
MainProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be5c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004bfd0  0800c060  0800c060  0000d060  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08058030  08058030  000613b8  2**0
                  CONTENTS
  4 .ARM          00000008  08058030  08058030  00059030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08058038  08058038  000613b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08058038  08058038  00059038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805803c  0805803c  0005903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000073b8  20000000  08058040  0005a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b34  200073c0  0805f3f8  000613c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20017ef4  0805f3f8  00061ef4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000613b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af79  00000000  00000000  000613e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0c  00000000  00000000  0007c35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009325  00000000  00000000  0007fd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00089090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc6  00000000  00000000  00089d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aa2d  00000000  00000000  0008ab4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3ea  00000000  00000000  000b557b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102f7e  00000000  00000000  000d0965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000093  00000000  00000000  001d38e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036e4  00000000  00000000  001d3978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001d705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200073c0 	.word	0x200073c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c044 	.word	0x0800c044

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200073c4 	.word	0x200073c4
 800023c:	0800c044 	.word	0x0800c044

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 80005e0:	460b      	mov	r3, r1
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData);
 80005e2:	f44f 7250 	mov.w	r2, #832	@ 0x340
 80005e6:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 80005ea:	f001 b955 	b.w	8001898 <MLX90640_I2CRead>

080005ee <MLX90640_GetFrameData>:
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 80005ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80005f0:	4605      	mov	r5, r0
 80005f2:	460c      	mov	r4, r1
    uint8_t cnt = 0;
    
    dataReady = 0;
    while(dataReady == 0)
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 80005f4:	f10d 0306 	add.w	r3, sp, #6
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fe:	4628      	mov	r0, r5
 8000600:	f001 f94a 	bl	8001898 <MLX90640_I2CRead>
        if(error != 0)
 8000604:	2800      	cmp	r0, #0
 8000606:	d140      	bne.n	800068a <MLX90640_GetFrameData+0x9c>
        {
            return error;
        }    
        dataReady = statusRegister & 0x0008;
 8000608:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    while(dataReady == 0)
 800060c:	0719      	lsls	r1, r3, #28
 800060e:	d5f1      	bpl.n	80005f4 <MLX90640_GetFrameData+0x6>
    uint8_t cnt = 0;
 8000610:	4606      	mov	r6, r0
    }       
        
    while(dataReady != 0 && cnt < 5)
    { 
        error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030);
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000618:	4628      	mov	r0, r5
 800061a:	f001 f965 	bl	80018e8 <MLX90640_I2CWrite>
        if(error == -1)
 800061e:	1c42      	adds	r2, r0, #1
 8000620:	d033      	beq.n	800068a <MLX90640_GetFrameData+0x9c>
        {
            return error;
        }
            
        error = MLX90640_I2CRead(slaveAddr, 0x0400, 832, frameData); 
 8000622:	4623      	mov	r3, r4
 8000624:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000628:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062c:	4628      	mov	r0, r5
 800062e:	f001 f933 	bl	8001898 <MLX90640_I2CRead>
        if(error != 0)
 8000632:	bb50      	cbnz	r0, 800068a <MLX90640_GetFrameData+0x9c>
        {
            return error;
        }
                   
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 8000634:	f10d 0306 	add.w	r3, sp, #6
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063e:	4628      	mov	r0, r5
 8000640:	f001 f92a 	bl	8001898 <MLX90640_I2CRead>
        if(error != 0)
 8000644:	bb08      	cbnz	r0, 800068a <MLX90640_GetFrameData+0x9c>
        {
            return error;
        }    
        dataReady = statusRegister & 0x0008;
 8000646:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        cnt = cnt + 1;
 800064a:	3601      	adds	r6, #1
    while(dataReady != 0 && cnt < 5)
 800064c:	071b      	lsls	r3, r3, #28
        cnt = cnt + 1;
 800064e:	b2f6      	uxtb	r6, r6
    while(dataReady != 0 && cnt < 5)
 8000650:	d504      	bpl.n	800065c <MLX90640_GetFrameData+0x6e>
 8000652:	2e05      	cmp	r6, #5
 8000654:	d1dd      	bne.n	8000612 <MLX90640_GetFrameData+0x24>
    }
    
    if(cnt > 4)
    {
        return -8;
 8000656:	f06f 0007 	mvn.w	r0, #7
 800065a:	e016      	b.n	800068a <MLX90640_GetFrameData+0x9c>
    if(cnt > 4)
 800065c:	2e05      	cmp	r6, #5
 800065e:	d0fa      	beq.n	8000656 <MLX90640_GetFrameData+0x68>
    }    
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000660:	ab01      	add	r3, sp, #4
 8000662:	2201      	movs	r2, #1
 8000664:	f248 010d 	movw	r1, #32781	@ 0x800d
 8000668:	4628      	mov	r0, r5
 800066a:	f001 f915 	bl	8001898 <MLX90640_I2CRead>
    frameData[832] = controlRegister1;
 800066e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000672:	4603      	mov	r3, r0
    frameData[832] = controlRegister1;
 8000674:	f8a4 2680 	strh.w	r2, [r4, #1664]	@ 0x680
    frameData[833] = statusRegister & 0x0001;
 8000678:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800067c:	f002 0001 	and.w	r0, r2, #1
 8000680:	f8a4 0682 	strh.w	r0, [r4, #1666]	@ 0x682
    if(error != 0)
    {
        return error;
    }
    
    return frameData[833];    
 8000684:	2b00      	cmp	r3, #0
 8000686:	bf18      	it	ne
 8000688:	4618      	movne	r0, r3
}
 800068a:	b002      	add	sp, #8
 800068c:	bd70      	pop	{r4, r5, r6, pc}

0800068e <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 800068e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000690:	460c      	mov	r4, r1
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000692:	f10d 0306 	add.w	r3, sp, #6
 8000696:	2201      	movs	r2, #1
 8000698:	f248 010d 	movw	r1, #32781	@ 0x800d
{
 800069c:	4605      	mov	r5, r0
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 800069e:	f001 f8fb 	bl	8001898 <MLX90640_I2CRead>
    if(error == 0)
 80006a2:	b968      	cbnz	r0, 80006c0 <MLX90640_SetRefreshRate+0x32>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 80006a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    value = (refreshRate & 0x07)<<7;
 80006a8:	01e4      	lsls	r4, r4, #7
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 80006aa:	f248 010d 	movw	r1, #32781	@ 0x800d
 80006ae:	4628      	mov	r0, r5
        value = (controlRegister1 & 0xFC7F) | value;
 80006b0:	f422 7260 	bic.w	r2, r2, #896	@ 0x380
    value = (refreshRate & 0x07)<<7;
 80006b4:	f404 7460 	and.w	r4, r4, #896	@ 0x380
        value = (controlRegister1 & 0xFC7F) | value;
 80006b8:	b292      	uxth	r2, r2
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 80006ba:	4322      	orrs	r2, r4
 80006bc:	f001 f914 	bl	80018e8 <MLX90640_I2CWrite>
    }    
    
    return error;
}
 80006c0:	b003      	add	sp, #12
 80006c2:	bd30      	pop	{r4, r5, pc}

080006c4 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 80006c4:	b513      	push	{r0, r1, r4, lr}
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f10d 0306 	add.w	r3, sp, #6
 80006cc:	f248 010d 	movw	r1, #32781	@ 0x800d
{
 80006d0:	4604      	mov	r4, r0
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80006d2:	f001 f8e1 	bl	8001898 <MLX90640_I2CRead>
    
    if(error == 0)
 80006d6:	b940      	cbnz	r0, 80006ea <MLX90640_SetChessMode+0x26>
    {
        value = (controlRegister1 | 0x1000);
 80006d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);        
 80006dc:	f248 010d 	movw	r1, #32781	@ 0x800d
 80006e0:	4620      	mov	r0, r4
 80006e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80006e6:	f001 f8ff 	bl	80018e8 <MLX90640_I2CWrite>
    }    
    
    return error;
}
 80006ea:	b002      	add	sp, #8
 80006ec:	bd10      	pop	{r4, pc}
	...

080006f0 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 80006f0:	b538      	push	{r3, r4, r5, lr}
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 80006f2:	f8b0 3654 	ldrh.w	r3, [r0, #1620]	@ 0x654
    if(vdd > 32767)
    {
        vdd = vdd - 65536;
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 80006f6:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
{
 80006fa:	460c      	mov	r4, r1
    vdd = frameData[810];
 80006fc:	ee07 3a90 	vmov	s15, r3
    if(vdd > 32767)
 8000700:	041b      	lsls	r3, r3, #16
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 8000702:	f8b0 3680 	ldrh.w	r3, [r0, #1664]	@ 0x680
 8000706:	f3c3 2581 	ubfx	r5, r3, #10, #2
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 800070a:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
{
 800070e:	ed2d 8b04 	vpush	{d8-d9}
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 8000712:	ee01 3a10 	vmov	s2, r3
    vdd = frameData[810];
 8000716:	eeb8 8a67 	vcvt.f32.u32	s16, s15
        vdd = vdd - 65536;
 800071a:	bf48      	it	mi
 800071c:	eddf 7a16 	vldrmi	s15, [pc, #88]	@ 8000778 <MLX90640_GetVdd+0x88>
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 8000720:	eeb8 1b41 	vcvt.f64.u32	d1, s2
        vdd = vdd - 65536;
 8000724:	bf48      	it	mi
 8000726:	ee38 8a67 	vsubmi.f32	s16, s16, s15
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 800072a:	f00b f961 	bl	800b9f0 <pow>
 800072e:	ee07 5a90 	vmov	s15, r5
 8000732:	eeb0 9b40 	vmov.f64	d9, d0
 8000736:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 800073a:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 800073e:	f00b f957 	bl	800b9f0 <pow>
 8000742:	ee89 7b00 	vdiv.f64	d7, d9, d0
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 8000746:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 800074a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 800074e:	ee07 3a90 	vmov	s15, r3
 8000752:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800075a:	eed8 7a07 	vfnms.f32	s15, s16, s14
 800075e:	ee07 3a10 	vmov	s14, r3
 8000762:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    
    return vdd;
}
 8000766:	ecbd 8b04 	vpop	{d8-d9}
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 800076a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 800076e:	eddf 7a03 	vldr	s15, [pc, #12]	@ 800077c <MLX90640_GetVdd+0x8c>
 8000772:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000776:	bd38      	pop	{r3, r4, r5, pc}
 8000778:	47800000 	.word	0x47800000
 800077c:	40533333 	.word	0x40533333

08000780 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8000780:	b538      	push	{r3, r4, r5, lr}
 8000782:	4605      	mov	r5, r0
 8000784:	460c      	mov	r4, r1
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 8000786:	f7ff ffb3 	bl	80006f0 <MLX90640_GetVdd>
    
    ptat = frameData[800];
 800078a:	f8b5 3640 	ldrh.w	r3, [r5, #1600]	@ 0x640
 800078e:	ee07 3a90 	vmov	s15, r3
    if(ptat > 32767)
 8000792:	041a      	lsls	r2, r3, #16
    {
        ptat = ptat - 65536;
    }
    
    ptatArt = frameData[768];
 8000794:	f8b5 3600 	ldrh.w	r3, [r5, #1536]	@ 0x600
    ptat = frameData[800];
 8000798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
        ptat = ptat - 65536;
 800079c:	bf44      	itt	mi
 800079e:	eddf 7a1a 	vldrmi	s15, [pc, #104]	@ 8000808 <MLX90640_GetTa+0x88>
 80007a2:	ee37 7a67 	vsubmi.f32	s14, s14, s15
    ptatArt = frameData[768];
 80007a6:	ee07 3a90 	vmov	s15, r3
    if(ptatArt > 32767)
 80007aa:	041b      	lsls	r3, r3, #16
    {
        ptatArt = ptatArt - 65536;
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 80007ac:	89a3      	ldrh	r3, [r4, #12]
    ptatArt = frameData[768];
 80007ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
        ptatArt = ptatArt - 65536;
 80007b2:	bf44      	itt	mi
 80007b4:	eddf 6a14 	vldrmi	s13, [pc, #80]	@ 8000808 <MLX90640_GetTa+0x88>
 80007b8:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 80007bc:	edd4 6a04 	vldr	s13, [r4, #16]
 80007c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80007c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80007c8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800080c <MLX90640_GetTa+0x8c>
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 80007cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 80007d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 80007d4:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8000810 <MLX90640_GetTa+0x90>
 80007d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80007dc:	edd4 7a01 	vldr	s15, [r4, #4]
 80007e0:	eea7 7a80 	vfma.f32	s14, s15, s0
 80007e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007e8:	ee07 3a10 	vmov	s14, r3
 80007ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80007f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    ta = ta / params->KtPTAT + 25;
 80007f4:	ed94 7a02 	vldr	s14, [r4, #8]
 80007f8:	ee87 0a87 	vdiv.f32	s0, s15, s14
    
    return ta;
}
 80007fc:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8000800:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000804:	bd38      	pop	{r3, r4, r5, pc}
 8000806:	bf00      	nop
 8000808:	47800000 	.word	0x47800000
 800080c:	48800000 	.word	0x48800000
 8000810:	40533333 	.word	0x40533333
 8000814:	00000000 	.word	0x00000000

08000818 <MLX90640_CalculateTo>:
{
 8000818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    subPage = frameData[833];
 800081c:	f8b0 3682 	ldrh.w	r3, [r0, #1666]	@ 0x682
{
 8000820:	460c      	mov	r4, r1
 8000822:	4605      	mov	r5, r0
 8000824:	4693      	mov	fp, r2
    kvScale = pow(2,(double)params->kvScale);
 8000826:	f504 5a80 	add.w	sl, r4, #4096	@ 0x1000
{
 800082a:	ed2d 8b10 	vpush	{d8-d15}
 800082e:	eeb0 8a60 	vmov.f32	s16, s1
 8000832:	b08b      	sub	sp, #44	@ 0x2c
    ta4 = (ta + 273.15f);
 8000834:	eddf caec 	vldr	s25, [pc, #944]	@ 8000be8 <MLX90640_CalculateTo+0x3d0>
{
 8000838:	eeb0 aa40 	vmov.f32	s20, s0
    subPage = frameData[833];
 800083c:	9303      	str	r3, [sp, #12]
    vdd = MLX90640_GetVdd(frameData, params);
 800083e:	f7ff ff57 	bl	80006f0 <MLX90640_GetVdd>
    ta = MLX90640_GetTa(frameData, params);
 8000842:	4621      	mov	r1, r4
 8000844:	4628      	mov	r0, r5
    vdd = MLX90640_GetVdd(frameData, params);
 8000846:	eef0 9a40 	vmov.f32	s19, s0
    ta = MLX90640_GetTa(frameData, params);
 800084a:	f7ff ff99 	bl	8000780 <MLX90640_GetTa>
    tr4 = (tr + 273.15f);
 800084e:	ee38 8a2c 	vadd.f32	s16, s16, s25
    ktaScale = pow(2,(double)params->ktaScale);
 8000852:	f894 3f4c 	ldrb.w	r3, [r4, #3916]	@ 0xf4c
    ta4 = (ta + 273.15f);
 8000856:	ee70 7a2c 	vadd.f32	s15, s0, s25
    ktaScale = pow(2,(double)params->ktaScale);
 800085a:	ee01 3a10 	vmov	s2, r3
    ta = MLX90640_GetTa(frameData, params);
 800085e:	eeb0 fa40 	vmov.f32	s30, s0
    tr4 = tr4 * tr4;
 8000862:	ee28 8a08 	vmul.f32	s16, s16, s16
    ta4 = ta4 * ta4;
 8000866:	ee67 7aa7 	vmul.f32	s15, s15, s15
    ktaScale = pow(2,(double)params->ktaScale);
 800086a:	eeb8 1b41 	vcvt.f64.u32	d1, s2
    tr4 = tr4 * tr4;
 800086e:	ee28 8a08 	vmul.f32	s16, s16, s16
    ktaScale = pow(2,(double)params->ktaScale);
 8000872:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8000876:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
    taTr = tr4 - (tr4-ta4)/emissivity;
 800087a:	eeb0 7a48 	vmov.f32	s14, s16
 800087e:	eea7 7ae7 	vfms.f32	s14, s15, s15
 8000882:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8000886:	ee38 8a67 	vsub.f32	s16, s16, s15
    ktaScale = pow(2,(double)params->ktaScale);
 800088a:	f00b f8b1 	bl	800b9f0 <pow>
    kvScale = pow(2,(double)params->kvScale);
 800088e:	f89a 324d 	ldrb.w	r3, [sl, #589]	@ 0x24d
    ktaScale = pow(2,(double)params->ktaScale);
 8000892:	eef7 abc0 	vcvt.f32.f64	s21, d0
    kvScale = pow(2,(double)params->kvScale);
 8000896:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 800089a:	ee01 3a10 	vmov	s2, r3
 800089e:	eeb8 1b41 	vcvt.f64.u32	d1, s2
 80008a2:	f00b f8a5 	bl	800b9f0 <pow>
    alphaScale = pow(2,(double)params->alphaScale);
 80008a6:	f894 364a 	ldrb.w	r3, [r4, #1610]	@ 0x64a
    kvScale = pow(2,(double)params->kvScale);
 80008aa:	eeb7 cbc0 	vcvt.f32.f64	s24, d0
    alphaScale = pow(2,(double)params->alphaScale);
 80008ae:	ee01 3a10 	vmov	s2, r3
 80008b2:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80008b6:	eeb8 1b41 	vcvt.f64.u32	d1, s2
 80008ba:	f00b f899 	bl	800b9f0 <pow>
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80008be:	eeb0 7a68 	vmov.f32	s14, s17
 80008c2:	edd4 6a0b 	vldr	s13, [r4, #44]	@ 0x2c
    alphaScale = pow(2,(double)params->alphaScale);
 80008c6:	eeb7 dbc0 	vcvt.f32.f64	s26, d0
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80008ca:	eddf 7ac8 	vldr	s15, [pc, #800]	@ 8000bec <MLX90640_CalculateTo+0x3d4>
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 80008ce:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80008d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 80008d6:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	@ 0x46
 80008da:	eef0 6a68 	vmov.f32	s13, s17
 80008de:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 80008e2:	9201      	str	r2, [sp, #4]
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80008e4:	ed94 5a07 	vldr	s10, [r4, #28]
    alphaCorrR[1] = 1 ;
 80008e8:	edcd 8a07 	vstr	s17, [sp, #28]
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80008ec:	eec8 7a87 	vdiv.f32	s15, s17, s14
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 80008f0:	eeb0 7a68 	vmov.f32	s14, s17
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80008f4:	edcd 7a06 	vstr	s15, [sp, #24]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 80008f8:	ee07 3a90 	vmov	s15, r3
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 80008fc:	1ad3      	subs	r3, r2, r3
    irDataCP[0] = frameData[776];  
 80008fe:	f8b5 2610 	ldrh.w	r2, [r5, #1552]	@ 0x610
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8000902:	eef8 dae7 	vcvt.f32.s32	s27, s15
 8000906:	edd4 7a0c 	vldr	s15, [r4, #48]	@ 0x30
 800090a:	eea7 7aad 	vfma.f32	s14, s15, s27
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 800090e:	ee07 3a90 	vmov	s15, r3
    gain = frameData[778];
 8000912:	f8b5 3614 	ldrh.w	r3, [r5, #1556]	@ 0x614
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8000916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if(gain > 32767)
 800091a:	041e      	lsls	r6, r3, #16
    mode = (frameData[832] & 0x1000) >> 5;
 800091c:	f8b5 6680 	ldrh.w	r6, [r5, #1664]	@ 0x680
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8000920:	eee6 6a27 	vfma.f32	s13, s12, s15
    gain = frameData[778];
 8000924:	ee07 3a90 	vmov	s15, r3
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8000928:	ed8d 7a08 	vstr	s14, [sp, #32]
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 800092c:	eeb0 6a68 	vmov.f32	s12, s17
    gain = frameData[778];
 8000930:	eef8 7a67 	vcvt.f32.u32	s15, s15
    gain = params->gainEE / gain; 
 8000934:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
    mode = (frameData[832] & 0x1000) >> 5;
 8000938:	ea4f 1666 	mov.w	r6, r6, asr #5
 800093c:	f006 0980 	and.w	r9, r6, #128	@ 0x80
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8000940:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000944:	ed8d 7a09 	vstr	s14, [sp, #36]	@ 0x24
        gain = gain - 65536;
 8000948:	bf44      	itt	mi
 800094a:	ed9f 7aa9 	vldrmi	s14, [pc, #676]	@ 8000bf0 <MLX90640_CalculateTo+0x3d8>
 800094e:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
    gain = params->gainEE / gain; 
 8000952:	ee07 3a10 	vmov	s14, r3
        if(irDataCP[i] > 32767)
 8000956:	0410      	lsls	r0, r2, #16
    irDataCP[1] = frameData[808];
 8000958:	f8b5 3650 	ldrh.w	r3, [r5, #1616]	@ 0x650
    gain = params->gainEE / gain; 
 800095c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            irDataCP[i] = irDataCP[i] - 65536;
 8000960:	bf48      	it	mi
 8000962:	eddf 6aa3 	vldrmi	s13, [pc, #652]	@ 8000bf0 <MLX90640_CalculateTo+0x3d8>
    gain = params->gainEE / gain; 
 8000966:	eec7 fa27 	vdiv.f32	s31, s14, s15
    irDataCP[0] = frameData[776];  
 800096a:	ee07 2a90 	vmov	s15, r2
    irDataCP[1] = frameData[808];
 800096e:	ee07 3a10 	vmov	s14, r3
    irDataCP[0] = frameData[776];  
 8000972:	eef8 7a67 	vcvt.f32.u32	s15, s15
    irDataCP[1] = frameData[808];
 8000976:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    irDataCP[0] = frameData[776];  
 800097a:	edcd 7a04 	vstr	s15, [sp, #16]
            irDataCP[i] = irDataCP[i] - 65536;
 800097e:	bf48      	it	mi
 8000980:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
    irDataCP[1] = frameData[808];
 8000984:	ed8d 7a05 	vstr	s14, [sp, #20]
            irDataCP[i] = irDataCP[i] - 65536;
 8000988:	bf48      	it	mi
 800098a:	edcd 7a04 	vstrmi	s15, [sp, #16]
        if(irDataCP[i] > 32767)
 800098e:	0419      	lsls	r1, r3, #16
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000990:	f9ba 3258 	ldrsh.w	r3, [sl, #600]	@ 0x258
            irDataCP[i] = irDataCP[i] - 65536;
 8000994:	bf48      	it	mi
 8000996:	eddf 6a96 	vldrmi	s13, [pc, #600]	@ 8000bf0 <MLX90640_CalculateTo+0x3d8>
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 800099a:	ee05 3a90 	vmov	s11, r3
        irDataCP[i] = irDataCP[i] * gain;
 800099e:	eddd 7a04 	vldr	s15, [sp, #16]
            irDataCP[i] = irDataCP[i] - 65536;
 80009a2:	bf48      	it	mi
 80009a4:	ee37 7a66 	vsubmi.f32	s14, s14, s13
    if( mode ==  params->calibrationModeEE)
 80009a8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80009ac:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80009b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    if( mode ==  params->calibrationModeEE)
 80009b4:	9302      	str	r3, [sp, #8]
        irDataCP[i] = irDataCP[i] * gain;
 80009b6:	ee6f 7aa7 	vmul.f32	s15, s31, s15
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80009ba:	f9ba 325a 	ldrsh.w	r3, [sl, #602]	@ 0x25a
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80009be:	ee3f fa66 	vsub.f32	s30, s30, s13
 80009c2:	edd4 6a08 	vldr	s13, [r4, #32]
            irDataCP[i] = irDataCP[i] - 65536;
 80009c6:	bf48      	it	mi
 80009c8:	ed8d 7a05 	vstrmi	s14, [sp, #20]
        irDataCP[i] = irDataCP[i] * gain;
 80009cc:	ed9d 7a05 	vldr	s14, [sp, #20]
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80009d0:	eea6 6a8f 	vfma.f32	s12, s13, s30
 80009d4:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8000bf4 <MLX90640_CalculateTo+0x3dc>
        irDataCP[i] = irDataCP[i] * gain;
 80009d8:	ee2f 7a87 	vmul.f32	s14, s31, s14
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80009dc:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80009e0:	eef0 6a68 	vmov.f32	s13, s17
 80009e4:	eee5 6a29 	vfma.f32	s13, s10, s19
 80009e8:	ee66 5a65 	vnmul.f32	s11, s12, s11
 80009ec:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80009f0:	eef1 6a66 	vneg.f32	s13, s13
 80009f4:	edcd 7a04 	vstr	s15, [sp, #16]
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80009f8:	ee07 3a90 	vmov	s15, r3
    if( mode ==  params->calibrationModeEE)
 80009fc:	9b02      	ldr	r3, [sp, #8]
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80009fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if( mode ==  params->calibrationModeEE)
 8000a02:	454b      	cmp	r3, r9
 8000a04:	f040 8133 	bne.w	8000c6e <MLX90640_CalculateTo+0x456>
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000a08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000a0c:	eea6 7a26 	vfma.f32	s14, s12, s13
 8000a10:	f104 084a 	add.w	r8, r4, #74	@ 0x4a
 8000a14:	f604 474c 	addw	r7, r4, #3148	@ 0xc4c
{
 8000a18:	f04f 0a00 	mov.w	sl, #0
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000a1c:	eddf ea76 	vldr	s29, [pc, #472]	@ 8000bf8 <MLX90640_CalculateTo+0x3e0>
 8000a20:	ed8d 7a05 	vstr	s14, [sp, #20]
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8000a24:	ed9f bb6e 	vldr	d11, [pc, #440]	@ 8000be0 <MLX90640_CalculateTo+0x3c8>
        if(mode == 0)
 8000a28:	0632      	lsls	r2, r6, #24
 8000a2a:	4650      	mov	r0, sl
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8000a2c:	f3ca 1c40 	ubfx	ip, sl, #5, #1
        if(pattern == frameData[833])
 8000a30:	9a03      	ldr	r2, [sp, #12]
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8000a32:	bf48      	it	mi
 8000a34:	f000 0301 	andmi.w	r3, r0, #1
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000a38:	f10a 0a01 	add.w	sl, sl, #1
          pattern = ilPattern; 
 8000a3c:	bf54      	ite	pl
 8000a3e:	4663      	movpl	r3, ip
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8000a40:	ea8c 0303 	eormi.w	r3, ip, r3
        if(pattern == frameData[833])
 8000a44:	4293      	cmp	r3, r2
 8000a46:	f040 8103 	bne.w	8000c50 <MLX90640_CalculateTo+0x438>
            irData = frameData[pixelNumber];
 8000a4a:	1eab      	subs	r3, r5, #2
 8000a4c:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8000a50:	ee07 3a90 	vmov	s15, r3
            if(irData > 32767)
 8000a54:	041b      	lsls	r3, r3, #16
            kv = params->kv[pixelNumber]/kvScale;
 8000a56:	f997 3301 	ldrsb.w	r3, [r7, #769]	@ 0x301
            irData = frameData[pixelNumber];
 8000a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                irData = irData - 65536;
 8000a5e:	bf44      	itt	mi
 8000a60:	eddf 7a63 	vldrmi	s15, [pc, #396]	@ 8000bf0 <MLX90640_CalculateTo+0x3d8>
 8000a64:	ee76 6ae7 	vsubmi.f32	s13, s13, s15
            kv = params->kv[pixelNumber]/kvScale;
 8000a68:	ee07 3a90 	vmov	s15, r3
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000a6c:	f9b8 3602 	ldrsh.w	r3, [r8, #1538]	@ 0x602
            kv = params->kv[pixelNumber]/kvScale;
 8000a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000a74:	ee07 3a10 	vmov	s14, r3
            kta = params->kta[pixelNumber]/ktaScale;
 8000a78:	f997 3000 	ldrsb.w	r3, [r7]
            kv = params->kv[pixelNumber]/kvScale;
 8000a7c:	ee87 6a8c 	vdiv.f32	s12, s15, s24
            kta = params->kta[pixelNumber]/ktaScale;
 8000a80:	ee07 3a90 	vmov	s15, r3
            if(mode !=  params->calibrationModeEE)
 8000a84:	9b02      	ldr	r3, [sp, #8]
 8000a86:	454b      	cmp	r3, r9
            kta = params->kta[pixelNumber]/ktaScale;
 8000a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000a8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            kta = params->kta[pixelNumber]/ktaScale;
 8000a90:	eec7 5aaa 	vdiv.f32	s11, s15, s21
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000a94:	eef0 7a68 	vmov.f32	s15, s17
 8000a98:	eeef 7a25 	vfma.f32	s15, s30, s11
 8000a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aa0:	eef0 7a68 	vmov.f32	s15, s17
 8000aa4:	eee9 7a86 	vfma.f32	s15, s19, s12
 8000aa8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8000aac:	eee6 7aaf 	vfma.f32	s15, s13, s31
            if(mode !=  params->calibrationModeEE)
 8000ab0:	d02e      	beq.n	8000b10 <MLX90640_CalculateTo+0x2f8>
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000ab2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000ab6:	f110 0e03 	adds.w	lr, r0, #3
 8000aba:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000abe:	edd3 6a99 	vldr	s13, [r3, #612]	@ 0x264
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000ac2:	f100 0302 	add.w	r3, r0, #2
 8000ac6:	bf48      	it	mi
 8000ac8:	f100 0e06 	addmi.w	lr, r0, #6
 8000acc:	2800      	cmp	r0, #0
 8000ace:	ea4f 03a3 	mov.w	r3, r3, asr #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000ad2:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000ad6:	bfb8      	it	lt
 8000ad8:	3003      	addlt	r0, #3
 8000ada:	f1cc 0c01 	rsb	ip, ip, #1
 8000ade:	eba3 03ae 	sub.w	r3, r3, lr, asr #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000ae2:	ee07 2a10 	vmov	s14, r2
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000ae6:	eb03 03aa 	add.w	r3, r3, sl, asr #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000aea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000aee:	eba3 03a0 	sub.w	r3, r3, r0, asr #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000af2:	eee6 7a87 	vfma.f32	s15, s13, s14
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000af6:	fb13 f30c 	smulbb	r3, r3, ip
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	ee07 3a10 	vmov	s14, r3
 8000b00:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8000b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000b08:	edd3 6a98 	vldr	s13, [r3, #608]	@ 0x260
 8000b0c:	eee6 7ac7 	vfms.f32	s15, s13, s14
            irData = irData - params->tgc * irDataCP[subPage];
 8000b10:	aa0a      	add	r2, sp, #40	@ 0x28
 8000b12:	9b03      	ldr	r3, [sp, #12]
 8000b14:	edd4 6a06 	vldr	s13, [r4, #24]
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8000b18:	eeb0 9a68 	vmov.f32	s18, s17
            irData = irData - params->tgc * irDataCP[subPage];
 8000b1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000b20:	ed13 7a06 	vldr	s14, [r3, #-24]	@ 0xffffffe8
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000b24:	f8b8 3000 	ldrh.w	r3, [r8]
            irData = irData - params->tgc * irDataCP[subPage];
 8000b28:	eee6 7ac7 	vfms.f32	s15, s13, s14
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000b2c:	ee2d 7a2e 	vmul.f32	s14, s26, s29
            irData = irData / emissivity;
 8000b30:	ee87 ea8a 	vdiv.f32	s28, s15, s20
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3c:	ee87 6a27 	vdiv.f32	s12, s14, s15
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8000b40:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 8000b44:	eeaf 9a27 	vfma.f32	s18, s30, s15
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000b48:	eef0 7a4e 	vmov.f32	s15, s28
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8000b4c:	ee29 9a06 	vmul.f32	s18, s18, s12
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000b50:	eee8 7a09 	vfma.f32	s15, s16, s18
 8000b54:	ee29 0a09 	vmul.f32	s0, s18, s18
 8000b58:	ee20 0a09 	vmul.f32	s0, s0, s18
 8000b5c:	ee20 0a27 	vmul.f32	s0, s0, s15
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 8000b60:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000b64:	f00b f994 	bl	800be90 <sqrt>
 8000b68:	f00b f992 	bl	800be90 <sqrt>
 8000b6c:	ed94 6a0c 	vldr	s12, [r4, #48]	@ 0x30
 8000b70:	eeb7 7ac6 	vcvt.f64.f32	d7, s12
 8000b74:	ee27 7b00 	vmul.f64	d7, d7, d0
 8000b78:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8000b7c:	eef0 7a68 	vmov.f32	s15, s17
 8000b80:	eee6 7a6c 	vfms.f32	s15, s12, s25
 8000b84:	eea7 7a89 	vfma.f32	s14, s15, s18
 8000b88:	ee8e 0a07 	vdiv.f32	s0, s28, s14
 8000b8c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000b90:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000b94:	f00b f97c 	bl	800be90 <sqrt>
 8000b98:	f00b f97a 	bl	800be90 <sqrt>
 8000b9c:	ee30 7b4b 	vsub.f64	d7, d0, d11
            if(To < params->ct[1])
 8000ba0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8000ba4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
            if(To < params->ct[1])
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb8:	dc62      	bgt.n	8000c80 <MLX90640_CalculateTo+0x468>
            else if(To < params->ct[2])   
 8000bba:	eef4 dac7 	vcmpe.f32	s27, s14
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	dc5f      	bgt.n	8000c84 <MLX90640_CalculateTo+0x46c>
            else if(To < params->ct[3])
 8000bc4:	eddd 7a01 	vldr	s15, [sp, #4]
 8000bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                range = 3;            
 8000bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd4:	bfcc      	ite	gt
 8000bd6:	2302      	movgt	r3, #2
 8000bd8:	2303      	movle	r3, #3
 8000bda:	e00f      	b.n	8000bfc <MLX90640_CalculateTo+0x3e4>
 8000bdc:	f3af 8000 	nop.w
 8000be0:	60000000 	.word	0x60000000
 8000be4:	40711266 	.word	0x40711266
 8000be8:	43889333 	.word	0x43889333
 8000bec:	42200000 	.word	0x42200000
 8000bf0:	47800000 	.word	0x47800000
 8000bf4:	40533333 	.word	0x40533333
 8000bf8:	358637bd 	.word	0x358637bd
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8000bfc:	aa0a      	add	r2, sp, #40	@ 0x28
 8000bfe:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8000c02:	ed50 7a04 	vldr	s15, [r0, #-16]
 8000c06:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8000c0a:	3320      	adds	r3, #32
 8000c0c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8000c10:	ed90 6a0b 	vldr	s12, [r0, #44]	@ 0x2c
 8000c14:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c24:	eef0 7a68 	vmov.f32	s15, s17
 8000c28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8000c2c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8000c30:	ee8e 0a09 	vdiv.f32	s0, s28, s18
 8000c34:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000c38:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000c3c:	f00b f928 	bl	800be90 <sqrt>
 8000c40:	f00b f926 	bl	800be90 <sqrt>
 8000c44:	ee30 0b4b 	vsub.f64	d0, d0, d11
 8000c48:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8000c4c:	ed8b 0a00 	vstr	s0, [fp]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8000c50:	f5ba 7f40 	cmp.w	sl, #768	@ 0x300
 8000c54:	f10b 0b04 	add.w	fp, fp, #4
 8000c58:	f108 0802 	add.w	r8, r8, #2
 8000c5c:	f107 0701 	add.w	r7, r7, #1
 8000c60:	f47f aee2 	bne.w	8000a28 <MLX90640_CalculateTo+0x210>
}
 8000c64:	b00b      	add	sp, #44	@ 0x2c
 8000c66:	ecbd 8b10 	vpop	{d8-d15}
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000c6e:	edda 5a97 	vldr	s11, [sl, #604]	@ 0x25c
 8000c72:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000c76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000c7a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000c7e:	e6c7      	b.n	8000a10 <MLX90640_CalculateTo+0x1f8>
                range = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	e7bb      	b.n	8000bfc <MLX90640_CalculateTo+0x3e4>
                range = 1;            
 8000c84:	2301      	movs	r3, #1
 8000c86:	e7b9      	b.n	8000bfc <MLX90640_CalculateTo+0x3e4>

08000c88 <ExtractVDDParameters>:
void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8000c88:	f8b0 3066 	ldrh.w	r3, [r0, #102]	@ 0x66
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 8000c8c:	0a1a      	lsrs	r2, r3, #8
    if(kVdd > 127)
 8000c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    {
        kVdd = kVdd - 256;
    }
    kVdd = 32 * kVdd;
    vdd25 = eeData[51] & 0x00FF;
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8000c92:	f063 03ff 	orn	r3, r3, #255	@ 0xff
        kVdd = kVdd - 256;
 8000c96:	bf28      	it	cs
 8000c98:	f5a2 7280 	subcs.w	r2, r2, #256	@ 0x100
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8000c9c:	ea4f 1343 	mov.w	r3, r3, lsl #5
        kVdd = kVdd - 256;
 8000ca0:	bf28      	it	cs
 8000ca2:	b292      	uxthcs	r2, r2
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8000ca4:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
    kVdd = 32 * kVdd;
 8000ca8:	0152      	lsls	r2, r2, #5
    
    mlx90640->kVdd = kVdd;
    mlx90640->vdd25 = vdd25; 
 8000caa:	804b      	strh	r3, [r1, #2]
    mlx90640->kVdd = kVdd;
 8000cac:	800a      	strh	r2, [r1, #0]
}
 8000cae:	4770      	bx	lr

08000cb0 <ExtractPTATParameters>:
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8000cb0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
    if(KvPTAT > 31)
 8000cb4:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
        KvPTAT = KvPTAT - 64;
    }
    KvPTAT = KvPTAT/4096;
    
    KtPTAT = eeData[50] & 0x03FF;
    if(KtPTAT > 511)
 8000cb8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000d40 <ExtractPTATParameters+0x90>
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8000cbc:	0a9a      	lsrs	r2, r3, #10
    KtPTAT = eeData[50] & 0x03FF;
 8000cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8000cc2:	ee07 2a90 	vmov	s15, r2
    {
        KtPTAT = KtPTAT - 1024;
    }
    KtPTAT = KtPTAT/8;
    
    vPTAT25 = eeData[49];
 8000cc6:	f8b0 2062 	ldrh.w	r2, [r0, #98]	@ 0x62
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8000cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000cce:	ed9f 4b1a 	vldr	d4, [pc, #104]	@ 8000d38 <ExtractPTATParameters+0x88>
    if(KvPTAT > 31)
 8000cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        KvPTAT = KvPTAT - 64;
 8000cda:	bfc4      	itt	gt
 8000cdc:	ed9f 7a19 	vldrgt	s14, [pc, #100]	@ 8000d44 <ExtractPTATParameters+0x94>
 8000ce0:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    KvPTAT = KvPTAT/4096;
 8000ce4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000d48 <ExtractPTATParameters+0x98>
 8000ce8:	ee27 7a87 	vmul.f32	s14, s15, s14
    KtPTAT = eeData[50] & 0x03FF;
 8000cec:	ee07 3a90 	vmov	s15, r3
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000cf0:	8c03      	ldrh	r3, [r0, #32]
    KtPTAT = eeData[50] & 0x03FF;
 8000cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    
    mlx90640->KvPTAT = KvPTAT;
    mlx90640->KtPTAT = KtPTAT;    
    mlx90640->vPTAT25 = vPTAT25;
 8000cf6:	818a      	strh	r2, [r1, #12]
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000cf8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
    mlx90640->KvPTAT = KvPTAT;
 8000cfc:	ed81 7a01 	vstr	s14, [r1, #4]
    if(KtPTAT > 511)
 8000d00:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        KtPTAT = KtPTAT - 1024;
 8000d08:	bfc4      	itt	gt
 8000d0a:	eddf 6a10 	vldrgt	s13, [pc, #64]	@ 8000d4c <ExtractPTATParameters+0x9c>
 8000d0e:	ee77 7ae6 	vsubgt.f32	s15, s15, s13
    KtPTAT = KtPTAT/8;
 8000d12:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8000d16:	ee67 7aa6 	vmul.f32	s15, s15, s13
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000d1a:	ee06 3a90 	vmov	s13, r3
 8000d1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8000d22:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
    mlx90640->KtPTAT = KtPTAT;    
 8000d26:	edc1 7a02 	vstr	s15, [r1, #8]
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000d2a:	eea5 6b04 	vfma.f64	d6, d5, d4
 8000d2e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000d32:	ed81 6a04 	vstr	s12, [r1, #16]
    mlx90640->alphaPTAT = alphaPTAT;   
}
 8000d36:	4770      	bx	lr
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	3f100000 	.word	0x3f100000
 8000d40:	43ff8000 	.word	0x43ff8000
 8000d44:	42800000 	.word	0x42800000
 8000d48:	39800000 	.word	0x39800000
 8000d4c:	44800000 	.word	0x44800000

08000d50 <ExtractTgcParameters>:
//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8000d50:	f890 3078 	ldrb.w	r3, [r0, #120]	@ 0x78
    if(tgc > 127)
 8000d54:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000d80 <ExtractTgcParameters+0x30>
    tgc = eeData[60] & 0x00FF;
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if(tgc > 127)
 8000d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        tgc = tgc - 256;
 8000d68:	bfc4      	itt	gt
 8000d6a:	ed9f 7a06 	vldrgt	s14, [pc, #24]	@ 8000d84 <ExtractTgcParameters+0x34>
 8000d6e:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    }
    tgc = tgc / 32.0f;
 8000d72:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000d88 <ExtractTgcParameters+0x38>
 8000d76:	ee67 7a87 	vmul.f32	s15, s15, s14
    
    mlx90640->tgc = tgc;        
 8000d7a:	edc1 7a06 	vstr	s15, [r1, #24]
}
 8000d7e:	4770      	bx	lr
 8000d80:	42fe0000 	.word	0x42fe0000
 8000d84:	43800000 	.word	0x43800000
 8000d88:	3d000000 	.word	0x3d000000

08000d8c <ExtractKsTaParameters>:
//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 8000d8c:	f8b0 3078 	ldrh.w	r3, [r0, #120]	@ 0x78
    if(KsTa > 127)
 8000d90:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000dc0 <ExtractKsTaParameters+0x34>
    KsTa = (eeData[60] & 0xFF00) >> 8;
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if(KsTa > 127)
 8000d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        KsTa = KsTa -256;
 8000da6:	bfc4      	itt	gt
 8000da8:	ed9f 7a06 	vldrgt	s14, [pc, #24]	@ 8000dc4 <ExtractKsTaParameters+0x38>
 8000dac:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    }
    KsTa = KsTa / 8192.0f;
 8000db0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000dc8 <ExtractKsTaParameters+0x3c>
 8000db4:	ee67 7a87 	vmul.f32	s15, s15, s14
    
    mlx90640->KsTa = KsTa;
 8000db8:	edc1 7a0a 	vstr	s15, [r1, #40]	@ 0x28
}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	42fe0000 	.word	0x42fe0000
 8000dc4:	43800000 	.word	0x43800000
 8000dc8:	39000000 	.word	0x39000000

08000dcc <ExtractKsToParameters>:
void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8000dcc:	f8b0 207e 	ldrh.w	r2, [r0, #126]	@ 0x7e
    
    mlx90640->ct[0] = -40;
 8000dd0:	f64f 73d8 	movw	r3, #65496	@ 0xffd8
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
    
    for(int i = 0; i < 4; i++)
    {
        if(mlx90640->ksTo[i] > 127)
 8000dd4:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8000ea8 <ExtractKsToParameters+0xdc>
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8000dd8:	f3c2 3201 	ubfx	r2, r2, #12, #2
    mlx90640->ct[0] = -40;
 8000ddc:	640b      	str	r3, [r1, #64]	@ 0x40
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8000dde:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8000de2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8000de6:	eddf 5a31 	vldr	s11, [pc, #196]	@ 8000eac <ExtractKsToParameters+0xe0>
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8000dea:	f3c3 1303 	ubfx	r3, r3, #4, #4
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8000dee:	0052      	lsls	r2, r2, #1
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8000df0:	f8a1 3044 	strh.w	r3, [r1, #68]	@ 0x44
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8000df4:	fb13 f302 	smulbb	r3, r3, r2
{
 8000df8:	b510      	push	{r4, lr}
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 8000dfa:	f8b0 407e 	ldrh.w	r4, [r0, #126]	@ 0x7e
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8000dfe:	b29b      	uxth	r3, r3
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 8000e00:	f3c4 2403 	ubfx	r4, r4, #8, #4
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8000e04:	f8a1 3044 	strh.w	r3, [r1, #68]	@ 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8000e08:	fb04 3302 	mla	r3, r4, r2, r3
 8000e0c:	f8a1 3046 	strh.w	r3, [r1, #70]	@ 0x46
    mlx90640->ct[4] = 400;
 8000e10:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000e14:	f8a1 3048 	strh.w	r3, [r1, #72]	@ 0x48
    KsToScale = 1 << KsToScale;
 8000e18:	2301      	movs	r3, #1
    KsToScale = (eeData[63] & 0x000F) + 8;
 8000e1a:	f8b0 207e 	ldrh.w	r2, [r0, #126]	@ 0x7e
 8000e1e:	f002 020f 	and.w	r2, r2, #15
 8000e22:	3208      	adds	r2, #8
    KsToScale = 1 << KsToScale;
 8000e24:	4093      	lsls	r3, r2
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8000e26:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
 8000e2a:	ee07 2a10 	vmov	s14, r2
    KsToScale = 1 << KsToScale;
 8000e2e:	ee07 3a90 	vmov	s15, r3
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8000e32:	f8b0 307a 	ldrh.w	r3, [r0, #122]	@ 0x7a
 8000e36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8000e3a:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8000e3e:	0a1b      	lsrs	r3, r3, #8
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8000e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8000e44:	ed81 7a0b 	vstr	s14, [r1, #44]	@ 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8000e48:	ee07 3a10 	vmov	s14, r3
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8000e4c:	f8b0 307c 	ldrh.w	r3, [r0, #124]	@ 0x7c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8000e50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 8000e54:	0a1b      	lsrs	r3, r3, #8
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8000e56:	ed81 7a0c 	vstr	s14, [r1, #48]	@ 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8000e5a:	ee07 2a10 	vmov	s14, r2
 8000e5e:	f101 023c 	add.w	r2, r1, #60	@ 0x3c
 8000e62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000e66:	ed81 7a0d 	vstr	s14, [r1, #52]	@ 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 8000e6a:	ee07 3a10 	vmov	s14, r3
 8000e6e:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
 8000e72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000e76:	ed81 7a0e 	vstr	s14, [r1, #56]	@ 0x38
        if(mlx90640->ksTo[i] > 127)
 8000e7a:	ecb3 7a01 	vldmia	r3!, {s14}
 8000e7e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8000e86:	bfc4      	itt	gt
 8000e88:	ee37 7a65 	vsubgt.f32	s14, s14, s11
 8000e8c:	ed03 7a01 	vstrgt	s14, [r3, #-4]
    for(int i = 0; i < 4; i++)
 8000e90:	4293      	cmp	r3, r2
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8000e92:	ed53 6a01 	vldr	s13, [r3, #-4]
 8000e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e9a:	ed03 7a01 	vstr	s14, [r3, #-4]
    for(int i = 0; i < 4; i++)
 8000e9e:	d1ec      	bne.n	8000e7a <ExtractKsToParameters+0xae>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <ExtractKsToParameters+0xe4>)
 8000ea2:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	42fe0000 	.word	0x42fe0000
 8000eac:	43800000 	.word	0x43800000
 8000eb0:	b951b717 	.word	0xb951b717

08000eb4 <ExtractAlphaParameters>:
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 8000eb4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
{
 8000eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8000ebc:	f3c3 2203 	ubfx	r2, r3, #8, #4
    accRemScale = eeData[32] & 0x000F;
 8000ec0:	f003 070f 	and.w	r7, r3, #15
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8000ec4:	f3c3 1b03 	ubfx	fp, r3, #4, #4
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8000ec8:	0b1b      	lsrs	r3, r3, #12
    alphaRef = eeData[33];
 8000eca:	4686      	mov	lr, r0
{
 8000ecc:	4604      	mov	r4, r0
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8000ece:	331e      	adds	r3, #30
{
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	f100 084e 	add.w	r8, r0, #78	@ 0x4e
    alphaRef = eeData[33];
 8000ed6:	f83e 1f42 	ldrh.w	r1, [lr, #66]!
{
 8000eda:	ed2d 8b08 	vpush	{d8-d11}
 8000ede:	f6ad 4dec 	subw	sp, sp, #3308	@ 0xcec
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8000ee2:	ee08 3a90 	vmov	s17, r3
 8000ee6:	f10d 0c08 	add.w	ip, sp, #8
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8000eea:	9200      	str	r2, [sp, #0]
    alphaRef = eeData[33];
 8000eec:	4663      	mov	r3, ip
 8000eee:	4660      	mov	r0, ip
    
    for(int i = 0; i < 6; i++)
    {
        p = i * 4;
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8000ef0:	f83e 6f02 	ldrh.w	r6, [lr, #2]!
    for(int i = 0; i < 6; i++)
 8000ef4:	3310      	adds	r3, #16
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8000ef6:	f006 020f 	and.w	r2, r6, #15
    for(int i = 0; i < 6; i++)
 8000efa:	45c6      	cmp	lr, r8
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8000efc:	f843 2c10 	str.w	r2, [r3, #-16]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 8000f00:	f3c6 1203 	ubfx	r2, r6, #4, #4
 8000f04:	f843 2c0c 	str.w	r2, [r3, #-12]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 8000f08:	f3c6 2203 	ubfx	r2, r6, #8, #4
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8000f0c:	ea4f 3616 	mov.w	r6, r6, lsr #12
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 8000f10:	f843 2c08 	str.w	r2, [r3, #-8]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8000f14:	f843 6c04 	str.w	r6, [r3, #-4]
    for(int i = 0; i < 6; i++)
 8000f18:	d1ea      	bne.n	8000ef0 <ExtractAlphaParameters+0x3c>
    }
    
    for(int i = 0; i < 24; i++)
 8000f1a:	2600      	movs	r6, #0
    {
        if (accRow[i] > 7)
 8000f1c:	f85c 3b04 	ldr.w	r3, [ip], #4
    for(int i = 0; i < 24; i++)
 8000f20:	3601      	adds	r6, #1
        if (accRow[i] > 7)
 8000f22:	2b07      	cmp	r3, #7
        {
            accRow[i] = accRow[i] - 16;
 8000f24:	bfc4      	itt	gt
 8000f26:	3b10      	subgt	r3, #16
 8000f28:	f84c 3c04 	strgt.w	r3, [ip, #-4]
    for(int i = 0; i < 24; i++)
 8000f2c:	2e18      	cmp	r6, #24
 8000f2e:	d1f5      	bne.n	8000f1c <ExtractAlphaParameters+0x68>
 8000f30:	f10d 0c68 	add.w	ip, sp, #104	@ 0x68
 8000f34:	f104 0e4e 	add.w	lr, r4, #78	@ 0x4e
 8000f38:	f104 085e 	add.w	r8, r4, #94	@ 0x5e
 8000f3c:	4663      	mov	r3, ip
    }
    
    for(int i = 0; i < 8; i++)
    {
        p = i * 4;
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8000f3e:	f83e 6f02 	ldrh.w	r6, [lr, #2]!
    for(int i = 0; i < 8; i++)
 8000f42:	3310      	adds	r3, #16
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8000f44:	f006 020f 	and.w	r2, r6, #15
    for(int i = 0; i < 8; i++)
 8000f48:	45f0      	cmp	r8, lr
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8000f4a:	f843 2c10 	str.w	r2, [r3, #-16]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 8000f4e:	f3c6 1203 	ubfx	r2, r6, #4, #4
 8000f52:	f843 2c0c 	str.w	r2, [r3, #-12]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8000f56:	f3c6 2203 	ubfx	r2, r6, #8, #4
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8000f5a:	ea4f 3616 	mov.w	r6, r6, lsr #12
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8000f5e:	f843 2c08 	str.w	r2, [r3, #-8]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8000f62:	f843 6c04 	str.w	r6, [r3, #-4]
    for(int i = 0; i < 8; i++)
 8000f66:	d1ea      	bne.n	8000f3e <ExtractAlphaParameters+0x8a>
    }
    
    for(int i = 0; i < 32; i ++)
 8000f68:	2600      	movs	r6, #0
    {
        if (accColumn[i] > 7)
 8000f6a:	f85c 3b04 	ldr.w	r3, [ip], #4
    for(int i = 0; i < 32; i ++)
 8000f6e:	3601      	adds	r6, #1
        if (accColumn[i] > 7)
 8000f70:	2b07      	cmp	r3, #7
        {
            accColumn[i] = accColumn[i] - 16;
 8000f72:	bfc4      	itt	gt
 8000f74:	3b10      	subgt	r3, #16
 8000f76:	f84c 3c04 	strgt.w	r3, [ip, #-4]
    for(int i = 0; i < 32; i ++)
 8000f7a:	2e20      	cmp	r6, #32
 8000f7c:	d1f5      	bne.n	8000f6a <ExtractAlphaParameters+0xb6>
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
            if (alphaTemp[p] > 31)
            {
                alphaTemp[p] = alphaTemp[p] - 64;
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8000f7e:	2301      	movs	r3, #1
 8000f80:	347e      	adds	r4, #126	@ 0x7e
                alphaTemp[p] = alphaTemp[p] - 64;
 8000f82:	ed9f ba56 	vldr	s22, [pc, #344]	@ 80010dc <ExtractAlphaParameters+0x228>
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8000f86:	40bb      	lsls	r3, r7
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 8000f88:	eddf aa55 	vldr	s21, [pc, #340]	@ 80010e0 <ExtractAlphaParameters+0x22c>
    for(int i = 0; i < 24; i++)
 8000f8c:	2700      	movs	r7, #0
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
        for(int j = 0; j < 32; j ++)
 8000f96:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
            if (alphaTemp[p] > 31)
 8000f9a:	eef3 9a0f 	vmov.f32	s19, #63	@ 0x41f80000  31.0
    for(int i = 0; i < 32; i ++)
 8000f9e:	46a2      	mov	sl, r4
        for(int j = 0; j < 32; j ++)
 8000fa0:	f04f 0800 	mov.w	r8, #0
 8000fa4:	eb09 16c7 	add.w	r6, r9, r7, lsl #7
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8000fa8:	f83a 3f02 	ldrh.w	r3, [sl, #2]!
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000fac:	f10d 0c68 	add.w	ip, sp, #104	@ 0x68
 8000fb0:	9a00      	ldr	r2, [sp, #0]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8000fb2:	eeb8 1b68 	vcvt.f64.u32	d1, s17
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8000fb6:	f3c3 1305 	ubfx	r3, r3, #4, #6
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8000fba:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8000fbe:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8000fc2:	ee07 3a90 	vmov	s15, r3
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000fc6:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8000fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000fce:	4093      	lsls	r3, r2
 8000fd0:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
        for(int j = 0; j < 32; j ++)
 8000fd4:	f108 0801 	add.w	r8, r8, #1
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000fd8:	440b      	add	r3, r1
            if (alphaTemp[p] > 31)
 8000fda:	eef4 7ae9 	vcmpe.f32	s15, s19
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000fde:	fa02 fc0b 	lsl.w	ip, r2, fp
 8000fe2:	4463      	add	r3, ip
            if (alphaTemp[p] > 31)
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000fe8:	ee07 3a10 	vmov	s14, r3
                alphaTemp[p] = alphaTemp[p] - 64;
 8000fec:	bfc8      	it	gt
 8000fee:	ee77 7acb 	vsubgt.f32	s15, s15, s22
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000ff2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                alphaTemp[p] = alphaTemp[p] - 64;
 8000ff6:	edc6 7a00 	vstr	s15, [r6]
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8000ffa:	edd6 7a00 	vldr	s15, [r6]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000ffe:	9101      	str	r1, [sp, #4]
 8001000:	eea7 7a89 	vfma.f32	s14, s15, s18
 8001004:	eeb0 8a47 	vmov.f32	s16, s14
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8001008:	f00a fcf2 	bl	800b9f0 <pow>
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 800100c:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8001010:	edd5 5a06 	vldr	s11, [r5, #24]
        for(int j = 0; j < 32; j ++)
 8001014:	f1b8 0f20 	cmp.w	r8, #32
 8001018:	9901      	ldr	r1, [sp, #4]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 800101a:	ed93 7a95 	vldr	s14, [r3, #596]	@ 0x254
        for(int j = 0; j < 32; j ++)
 800101e:	a802      	add	r0, sp, #8
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001020:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8001024:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001028:	ee65 5ae7 	vnmul.f32	s11, s11, s15
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 800102c:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8001030:	ee87 6b00 	vdiv.f64	d6, d7, d0
 8001034:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001038:	eea5 6a8a 	vfma.f32	s12, s11, s20
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 800103c:	eeca 7a86 	vdiv.f32	s15, s21, s12
 8001040:	ece6 7a01 	vstmia	r6!, {s15}
        for(int j = 0; j < 32; j ++)
 8001044:	d1b0      	bne.n	8000fa8 <ExtractAlphaParameters+0xf4>
    for(int i = 0; i < 24; i++)
 8001046:	3701      	adds	r7, #1
 8001048:	3440      	adds	r4, #64	@ 0x40
 800104a:	2f18      	cmp	r7, #24
 800104c:	d1a3      	bne.n	8000f96 <ExtractAlphaParameters+0xe2>
        }
    }
    
    temp = alphaTemp[0];
 800104e:	eddd 7a3a 	vldr	s15, [sp, #232]	@ 0xe8
    for(int i = 1; i < 768; i++)
 8001052:	aa3b      	add	r2, sp, #236	@ 0xec
 8001054:	2301      	movs	r3, #1
    {
        if (alphaTemp[i] > temp)
 8001056:	ecb2 7a01 	vldmia	r2!, {s14}
    for(int i = 1; i < 768; i++)
 800105a:	3301      	adds	r3, #1
        {
            temp = alphaTemp[i];
 800105c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	fe77 7a27 	vselgt.f32	s15, s14, s15
    for(int i = 1; i < 768; i++)
 8001068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800106c:	d1f3      	bne.n	8001056 <ExtractAlphaParameters+0x1a2>
 800106e:	2300      	movs	r3, #0
        }
    }
    
    alphaScale = 0;
    while(temp < 32768)
 8001070:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80010e4 <ExtractAlphaParameters+0x230>
 8001074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d428      	bmi.n	80010d2 <ExtractAlphaParameters+0x21e>
 8001080:	b2dc      	uxtb	r4, r3
 8001082:	f105 0648 	add.w	r6, r5, #72	@ 0x48
 8001086:	f505 67c9 	add.w	r7, r5, #1608	@ 0x648
        alphaScale = alphaScale + 1;
    } 
    
    for(int i = 0; i < 768; i++)
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 800108a:	ee07 4a90 	vmov	s15, r4
 800108e:	eeb8 9b67 	vcvt.f64.u32	d9, s15
 8001092:	ecb9 8a01 	vldmia	r9!, {s16}
 8001096:	eeb0 1b49 	vmov.f64	d1, d9
 800109a:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 800109e:	f00a fca7 	bl	800b9f0 <pow>
 80010a2:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 80010a6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80010aa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        mlx90640->alpha[i] = (temp + 0.5f);        
 80010ae:	ee37 7a0a 	vadd.f32	s14, s14, s20
 80010b2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80010b6:	ee17 3a10 	vmov	r3, s14
 80010ba:	f826 3f02 	strh.w	r3, [r6, #2]!
    for(int i = 0; i < 768; i++)
 80010be:	42b7      	cmp	r7, r6
 80010c0:	d1e7      	bne.n	8001092 <ExtractAlphaParameters+0x1de>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 80010c2:	f885 464a 	strb.w	r4, [r5, #1610]	@ 0x64a
   
}
 80010c6:	f60d 4dec 	addw	sp, sp, #3308	@ 0xcec
 80010ca:	ecbd 8b08 	vpop	{d8-d11}
 80010ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
 80010d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010d6:	4613      	mov	r3, r2
 80010d8:	e7cc      	b.n	8001074 <ExtractAlphaParameters+0x1c0>
 80010da:	bf00      	nop
 80010dc:	42800000 	.word	0x42800000
 80010e0:	358637bd 	.word	0x358637bd
 80010e4:	47000000 	.word	0x47000000

080010e8 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80010e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ec:	b0b9      	sub	sp, #228	@ 0xe4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 80010ee:	8c04      	ldrh	r4, [r0, #32]
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
    occRowScale = (eeData[16] & 0x0F00) >> 8;
    offsetRef = eeData[17];
 80010f0:	4686      	mov	lr, r0
 80010f2:	f100 082e 	add.w	r8, r0, #46	@ 0x2e
 80010f6:	466d      	mov	r5, sp
    occRemScale = (eeData[16] & 0x000F);
 80010f8:	f004 070f 	and.w	r7, r4, #15
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 80010fc:	f3c4 1c03 	ubfx	ip, r4, #4, #4
    offsetRef = eeData[17];
 8001100:	f83e 6f22 	ldrh.w	r6, [lr, #34]!
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 8001104:	f3c4 2403 	ubfx	r4, r4, #8, #4
    offsetRef = eeData[17];
 8001108:	462b      	mov	r3, r5
    }
    
    for(int i = 0; i < 6; i++)
    {
        p = i * 4;
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 800110a:	f83e 2f02 	ldrh.w	r2, [lr, #2]!
    for(int i = 0; i < 6; i++)
 800110e:	3310      	adds	r3, #16
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8001110:	f002 090f 	and.w	r9, r2, #15
    for(int i = 0; i < 6; i++)
 8001114:	45f0      	cmp	r8, lr
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8001116:	f843 9c10 	str.w	r9, [r3, #-16]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 800111a:	f3c2 1903 	ubfx	r9, r2, #4, #4
 800111e:	f843 9c0c 	str.w	r9, [r3, #-12]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8001122:	f3c2 2903 	ubfx	r9, r2, #8, #4
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8001126:	ea4f 3212 	mov.w	r2, r2, lsr #12
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 800112a:	f843 9c08 	str.w	r9, [r3, #-8]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 800112e:	f843 2c04 	str.w	r2, [r3, #-4]
    for(int i = 0; i < 6; i++)
 8001132:	d1ea      	bne.n	800110a <ExtractOffsetParameters+0x22>
 8001134:	46ae      	mov	lr, r5
    }
    
    for(int i = 0; i < 24; i++)
 8001136:	2200      	movs	r2, #0
    {
        if (occRow[i] > 7)
 8001138:	f85e 3b04 	ldr.w	r3, [lr], #4
    for(int i = 0; i < 24; i++)
 800113c:	3201      	adds	r2, #1
        if (occRow[i] > 7)
 800113e:	2b07      	cmp	r3, #7
        {
            occRow[i] = occRow[i] - 16;
 8001140:	bfc4      	itt	gt
 8001142:	3b10      	subgt	r3, #16
 8001144:	f84e 3c04 	strgt.w	r3, [lr, #-4]
    for(int i = 0; i < 24; i++)
 8001148:	2a18      	cmp	r2, #24
 800114a:	d1f5      	bne.n	8001138 <ExtractOffsetParameters+0x50>
 800114c:	46c6      	mov	lr, r8
 800114e:	ab18      	add	r3, sp, #96	@ 0x60
 8001150:	f100 083e 	add.w	r8, r0, #62	@ 0x3e
    }
    
    for(int i = 0; i < 8; i++)
    {
        p = i * 4;
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8001154:	f83e 2f02 	ldrh.w	r2, [lr, #2]!
    for(int i = 0; i < 8; i++)
 8001158:	3310      	adds	r3, #16
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 800115a:	f002 090f 	and.w	r9, r2, #15
    for(int i = 0; i < 8; i++)
 800115e:	45f0      	cmp	r8, lr
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8001160:	f843 9c10 	str.w	r9, [r3, #-16]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8001164:	f3c2 1903 	ubfx	r9, r2, #4, #4
 8001168:	f843 9c0c 	str.w	r9, [r3, #-12]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 800116c:	f3c2 2903 	ubfx	r9, r2, #8, #4
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 8001170:	ea4f 3212 	mov.w	r2, r2, lsr #12
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 8001174:	f843 9c08 	str.w	r9, [r3, #-8]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 8001178:	f843 2c04 	str.w	r2, [r3, #-4]
    for(int i = 0; i < 8; i++)
 800117c:	d1ea      	bne.n	8001154 <ExtractOffsetParameters+0x6c>
 800117e:	f10d 0e60 	add.w	lr, sp, #96	@ 0x60
    }
    
    for(int i = 0; i < 32; i ++)
 8001182:	2200      	movs	r2, #0
    {
        if (occColumn[i] > 7)
 8001184:	f85e 3b04 	ldr.w	r3, [lr], #4
    for(int i = 0; i < 32; i ++)
 8001188:	3201      	adds	r2, #1
        if (occColumn[i] > 7)
 800118a:	2b07      	cmp	r3, #7
        {
            occColumn[i] = occColumn[i] - 16;
 800118c:	bfc4      	itt	gt
 800118e:	3b10      	subgt	r3, #16
 8001190:	f84e 3c04 	strgt.w	r3, [lr, #-4]
    for(int i = 0; i < 32; i ++)
 8001194:	2a20      	cmp	r2, #32
 8001196:	d1f5      	bne.n	8001184 <ExtractOffsetParameters+0x9c>
 8001198:	30be      	adds	r0, #190	@ 0xbe
 800119a:	f201 614a 	addw	r1, r1, #1610	@ 0x64a
 800119e:	f04f 0800 	mov.w	r8, #0
            if (mlx90640->offset[p] > 31)
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80011a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011a6:	f1a0 0940 	sub.w	r9, r0, #64	@ 0x40
 80011aa:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80011ae:	460a      	mov	r2, r1
 80011b0:	40a3      	lsls	r3, r4
 80011b2:	4433      	add	r3, r6
 80011b4:	b29b      	uxth	r3, r3
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 80011b6:	f839 bf02 	ldrh.w	fp, [r9, #2]!
 80011ba:	ea4f 2e9b 	mov.w	lr, fp, lsr #10
            if (mlx90640->offset[p] > 31)
 80011be:	f5bb 4f00 	cmp.w	fp, #32768	@ 0x8000
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80011c2:	bf28      	it	cs
 80011c4:	f1ae 0e40 	subcs.w	lr, lr, #64	@ 0x40
        for(int j = 0; j < 32; j ++)
 80011c8:	4548      	cmp	r0, r9
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80011ca:	f8a2 e002 	strh.w	lr, [r2, #2]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80011ce:	f85a eb04 	ldr.w	lr, [sl], #4
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 80011d2:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80011d6:	fa0e fe0c 	lsl.w	lr, lr, ip
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 80011da:	fa0b fb07 	lsl.w	fp, fp, r7
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80011de:	449e      	add	lr, r3
 80011e0:	44de      	add	lr, fp
 80011e2:	f8a2 e000 	strh.w	lr, [r2]
        for(int j = 0; j < 32; j ++)
 80011e6:	d1e6      	bne.n	80011b6 <ExtractOffsetParameters+0xce>
    for(int i = 0; i < 24; i++)
 80011e8:	f108 0820 	add.w	r8, r8, #32
 80011ec:	3040      	adds	r0, #64	@ 0x40
 80011ee:	3140      	adds	r1, #64	@ 0x40
 80011f0:	f5b8 7f40 	cmp.w	r8, #768	@ 0x300
 80011f4:	d1d5      	bne.n	80011a2 <ExtractOffsetParameters+0xba>
        }
    }
}
 80011f6:	b039      	add	sp, #228	@ 0xe4
 80011f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011fc <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001200:	ed2d 8b06 	vpush	{d8-d10}
 8001204:	f6ad 4d14 	subw	sp, sp, #3092	@ 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8001208:	f8b0 306c 	ldrh.w	r3, [r0, #108]	@ 0x6c
            p = 32 * i +j;
            split = 2*(p/32 - (p/64)*2) + p%2;
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
            if (ktaTemp[p] > 3)
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 800120c:	eeb2 aa00 	vmov.f32	s20, #32	@ 0x41000000  8.0
{
 8001210:	460e      	mov	r6, r1
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8001212:	0a1a      	lsrs	r2, r3, #8
    KtaReCo = (eeData[54] & 0x00FF);
 8001214:	f88d 300e 	strb.w	r3, [sp, #14]
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8001218:	f8b0 306e 	ldrh.w	r3, [r0, #110]	@ 0x6e
 800121c:	f10d 0810 	add.w	r8, sp, #16
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8001220:	f88d 200c 	strb.w	r2, [sp, #12]
    KtaRC[0] = KtaRoCo;
 8001224:	f10d 090c 	add.w	r9, sp, #12
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8001228:	0a1a      	lsrs	r2, r3, #8
    KtaReCe = (eeData[55] & 0x00FF);
 800122a:	f889 3003 	strb.w	r3, [r9, #3]
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 800122e:	f8b0 3070 	ldrh.w	r3, [r0, #112]	@ 0x70
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8001232:	46c3      	mov	fp, r8
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8001234:	f889 2001 	strb.w	r2, [r9, #1]
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8001238:	f04f 0a00 	mov.w	sl, #0
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 800123c:	f3c3 1203 	ubfx	r2, r3, #4, #4
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8001240:	f100 0580 	add.w	r5, r0, #128	@ 0x80
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 8001244:	3208      	adds	r2, #8
 8001246:	ee09 2a10 	vmov	s18, r2
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 800124a:	f003 020f 	and.w	r2, r3, #15
 800124e:	2301      	movs	r3, #1
 8001250:	4093      	lsls	r3, r2
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 8ae7 	vcvt.f32.s32	s17, s15
            if (ktaTemp[p] > 3)
 800125a:	eef0 9a08 	vmov.f32	s19, #8	@ 0x40400000  3.0
{
 800125e:	465f      	mov	r7, fp
 8001260:	4654      	mov	r4, sl
            split = 2*(p/32 - (p/64)*2) + p%2;
 8001262:	f3c4 1340 	ubfx	r3, r4, #5, #1
 8001266:	f004 0201 	and.w	r2, r4, #1
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 800126a:	eeb8 1b49 	vcvt.f64.u32	d1, s18
            split = 2*(p/32 - (p/64)*2) + p%2;
 800126e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8001272:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 8001276:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
        for(int j = 0; j < 32; j ++)
 800127a:	3401      	adds	r4, #1
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 800127c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (ktaTemp[p] > 3)
 8001288:	eef4 7ae9 	vcmpe.f32	s15, s19
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                ktaTemp[p] = ktaTemp[p] - 8;
 8001290:	bfc8      	it	gt
 8001292:	ee77 7aca 	vsubgt.f32	s15, s15, s20
 8001296:	edc7 7a00 	vstr	s15, [r7]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 800129a:	f919 3002 	ldrsb.w	r3, [r9, r2]
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 800129e:	edd7 7a00 	vldr	s15, [r7]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 80012a2:	ee07 3a10 	vmov	s14, r3
 80012a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012aa:	eea7 7aa8 	vfma.f32	s14, s15, s17
 80012ae:	eeb0 8a47 	vmov.f32	s16, s14
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 80012b2:	f00a fb9d 	bl	800b9f0 <pow>
 80012b6:	f10a 0320 	add.w	r3, sl, #32
 80012ba:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
        for(int j = 0; j < 32; j ++)
 80012be:	42a3      	cmp	r3, r4
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 80012c0:	ee87 6b00 	vdiv.f64	d6, d7, d0
 80012c4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 80012c8:	eca7 6a01 	vstmia	r7!, {s12}
        for(int j = 0; j < 32; j ++)
 80012cc:	d1c9      	bne.n	8001262 <ExtractKtaPixelParameters+0x66>
    for(int i = 0; i < 24; i++)
 80012ce:	f5b4 7f40 	cmp.w	r4, #768	@ 0x300
 80012d2:	f10b 0b80 	add.w	fp, fp, #128	@ 0x80
 80012d6:	d001      	beq.n	80012dc <ExtractKtaPixelParameters+0xe0>
 80012d8:	46a2      	mov	sl, r4
 80012da:	e7be      	b.n	800125a <ExtractKtaPixelParameters+0x5e>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 80012dc:	edd8 7a00 	vldr	s15, [r8]
 80012e0:	aa05      	add	r2, sp, #20
    for(int i = 1; i < 768; i++)
 80012e2:	2301      	movs	r3, #1
    temp = fabs(ktaTemp[0]);
 80012e4:	eef0 7ae7 	vabs.f32	s15, s15
    {
        if (fabs(ktaTemp[i]) > temp)
 80012e8:	ecb2 7a01 	vldmia	r2!, {s14}
    for(int i = 1; i < 768; i++)
 80012ec:	3301      	adds	r3, #1
        if (fabs(ktaTemp[i]) > temp)
 80012ee:	eeb0 7ac7 	vabs.f32	s14, s14
        {
            temp = fabs(ktaTemp[i]);
 80012f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	fe77 7a27 	vselgt.f32	s15, s14, s15
    for(int i = 1; i < 768; i++)
 80012fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001302:	d1f1      	bne.n	80012e8 <ExtractKtaPixelParameters+0xec>
 8001304:	2300      	movs	r3, #0
        }
    }
    
    ktaScale1 = 0;
    while(temp < 64)
 8001306:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001388 <ExtractKtaPixelParameters+0x18c>
 800130a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001314:	d433      	bmi.n	800137e <ExtractKtaPixelParameters+0x182>
 8001316:	b2dc      	uxtb	r4, r3
 8001318:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800131c:	f606 454b 	addw	r5, r6, #3147	@ 0xc4b
 8001320:	f606 774b 	addw	r7, r6, #3915	@ 0xf4b
        ktaScale1 = ktaScale1 + 1;
    }    
     
    for(int i = 0; i < 768; i++)
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8001324:	ee07 4a90 	vmov	s15, r4
 8001328:	eeb8 9b67 	vcvt.f64.u32	d9, s15
 800132c:	ecb8 8a01 	vldmia	r8!, {s16}
 8001330:	eeb0 1b49 	vmov.f64	d1, d9
 8001334:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001338:	f00a fb5a 	bl	800b9f0 <pow>
 800133c:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8001340:	ee27 7b00 	vmul.f64	d7, d7, d0
 8001344:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        if (temp < 0)
 8001348:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mlx90640->kta[i] = (temp - 0.5f);
 8001350:	bf4c      	ite	mi
 8001352:	ee37 7a68 	vsubmi.f32	s14, s14, s17
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8001356:	ee37 7a28 	vaddpl.f32	s14, s14, s17
 800135a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800135e:	edcd 7a01 	vstr	s15, [sp, #4]
 8001362:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8001366:	f805 3f01 	strb.w	r3, [r5, #1]!
    for(int i = 0; i < 768; i++)
 800136a:	42af      	cmp	r7, r5
 800136c:	d1de      	bne.n	800132c <ExtractKtaPixelParameters+0x130>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 800136e:	f886 4f4c 	strb.w	r4, [r6, #3916]	@ 0xf4c
}
 8001372:	f60d 4d14 	addw	sp, sp, #3092	@ 0xc14
 8001376:	ecbd 8b06 	vpop	{d8-d10}
 800137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
 800137e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001382:	4613      	mov	r3, r2
 8001384:	e7c1      	b.n	800130a <ExtractKtaPixelParameters+0x10e>
 8001386:	bf00      	nop
 8001388:	42800000 	.word	0x42800000

0800138c <ExtractKvPixelParameters>:
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 800138c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8001390:	0b1a      	lsrs	r2, r3, #12
    if (KvRoCo > 7)
 8001392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
{
 8001396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    {
        KvRoCo = KvRoCo - 16;
 800139a:	bf28      	it	cs
 800139c:	3a10      	subcs	r2, #16
    }
    KvT[0] = KvRoCo;
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
    if (KvReCo > 7)
 800139e:	051e      	lsls	r6, r3, #20
{
 80013a0:	460c      	mov	r4, r1
    {
        KvReCe = KvReCe - 16;
    }
    KvT[3] = KvReCe;
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 80013a2:	f04f 0800 	mov.w	r8, #0
        KvRoCo = KvRoCo - 16;
 80013a6:	b252      	sxtb	r2, r2
{
 80013a8:	ed2d 8b04 	vpush	{d8-d9}
 80013ac:	f5ad 6d41 	sub.w	sp, sp, #3088	@ 0xc10
    KvT[0] = KvRoCo;
 80013b0:	f88d 200c 	strb.w	r2, [sp, #12]
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 80013b4:	f3c3 2203 	ubfx	r2, r3, #8, #4
        KvReCo = KvReCo - 16;
 80013b8:	ae04      	add	r6, sp, #16
    KvT[0] = KvRoCo;
 80013ba:	ad03      	add	r5, sp, #12
        KvReCo = KvReCo - 16;
 80013bc:	bf48      	it	mi
 80013be:	3a10      	submi	r2, #16
    if (KvRoCe > 7)
 80013c0:	0619      	lsls	r1, r3, #24
    kvScale = (eeData[56] & 0x0F00) >> 8;
 80013c2:	46b1      	mov	r9, r6
    KvT[2] = KvReCo;
 80013c4:	70aa      	strb	r2, [r5, #2]
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 80013c6:	f3c3 1203 	ubfx	r2, r3, #4, #4
        KvRoCe = KvRoCe - 16;
 80013ca:	bf48      	it	mi
 80013cc:	3a10      	submi	r2, #16
    KvT[1] = KvRoCe;
 80013ce:	706a      	strb	r2, [r5, #1]
    KvReCe = (eeData[52] & 0x000F);
 80013d0:	f003 020f 	and.w	r2, r3, #15
    if (KvReCe > 7)
 80013d4:	071b      	lsls	r3, r3, #28
    kvScale = (eeData[56] & 0x0F00) >> 8;
 80013d6:	f8b0 3070 	ldrh.w	r3, [r0, #112]	@ 0x70
 80013da:	f3c3 2303 	ubfx	r3, r3, #8, #4
        KvReCe = KvReCe - 16;
 80013de:	bf48      	it	mi
 80013e0:	3a10      	submi	r2, #16
        for(int j = 0; j < 32; j ++)
        {
            p = 32 * i +j;
            split = 2*(p/32 - (p/64)*2) + p%2;
            kvTemp[p] = KvT[split];
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 80013e2:	ee07 3a90 	vmov	s15, r3
    KvT[3] = KvReCe;
 80013e6:	70ea      	strb	r2, [r5, #3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 80013e8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
{
 80013ec:	46ca      	mov	sl, r9
        for(int j = 0; j < 32; j ++)
 80013ee:	2700      	movs	r7, #0
            p = 32 * i +j;
 80013f0:	eb07 0308 	add.w	r3, r7, r8
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 80013f4:	eeb0 1b48 	vmov.f64	d1, d8
 80013f8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
        for(int j = 0; j < 32; j ++)
 80013fc:	3701      	adds	r7, #1
            split = 2*(p/32 - (p/64)*2) + p%2;
 80013fe:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8001402:	f003 0301 	and.w	r3, r3, #1
            kvTemp[p] = KvT[split];
 8001406:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800140a:	56eb      	ldrsb	r3, [r5, r3]
 800140c:	ee09 3a10 	vmov	s18, r3
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 8001410:	f00a faee 	bl	800b9f0 <pow>
        for(int j = 0; j < 32; j ++)
 8001414:	2f20      	cmp	r7, #32
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 8001416:	eeb8 9bc9 	vcvt.f64.s32	d9, s18
 800141a:	ee89 7b00 	vdiv.f64	d7, d9, d0
 800141e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001422:	ecaa 7a01 	vstmia	sl!, {s14}
        for(int j = 0; j < 32; j ++)
 8001426:	d1e3      	bne.n	80013f0 <ExtractKvPixelParameters+0x64>
    for(int i = 0; i < 24; i++)
 8001428:	f108 0820 	add.w	r8, r8, #32
 800142c:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 8001430:	f5b8 7f40 	cmp.w	r8, #768	@ 0x300
 8001434:	d1da      	bne.n	80013ec <ExtractKvPixelParameters+0x60>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 8001436:	edd6 7a00 	vldr	s15, [r6]
 800143a:	aa05      	add	r2, sp, #20
    for(int i = 1; i < 768; i++)
 800143c:	2301      	movs	r3, #1
    temp = fabs(kvTemp[0]);
 800143e:	eef0 7ae7 	vabs.f32	s15, s15
    {
        if (fabs(kvTemp[i]) > temp)
 8001442:	ecb2 7a01 	vldmia	r2!, {s14}
    for(int i = 1; i < 768; i++)
 8001446:	3301      	adds	r3, #1
        if (fabs(kvTemp[i]) > temp)
 8001448:	eeb0 7ac7 	vabs.f32	s14, s14
        {
            temp = fabs(kvTemp[i]);
 800144c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	fe77 7a27 	vselgt.f32	s15, s14, s15
    for(int i = 1; i < 768; i++)
 8001458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800145c:	d1f1      	bne.n	8001442 <ExtractKvPixelParameters+0xb6>
 800145e:	2300      	movs	r3, #0
        }
    }
    
    kvScale = 0;
    while(temp < 64)
 8001460:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80014e8 <ExtractKvPixelParameters+0x15c>
 8001464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d437      	bmi.n	80014e0 <ExtractKvPixelParameters+0x154>
 8001470:	b2dd      	uxtb	r5, r3
 8001472:	f504 5892 	add.w	r8, r4, #4672	@ 0x1240
 8001476:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800147a:	f604 774c 	addw	r7, r4, #3916	@ 0xf4c
        kvScale = kvScale + 1;
    }    
     
    for(int i = 0; i < 768; i++)
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 800147e:	ee07 5a90 	vmov	s15, r5
 8001482:	f108 080c 	add.w	r8, r8, #12
 8001486:	eeb8 9b67 	vcvt.f64.u32	d9, s15
 800148a:	ecb6 8a01 	vldmia	r6!, {s16}
 800148e:	eeb0 1b49 	vmov.f64	d1, d9
 8001492:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001496:	f00a faab 	bl	800b9f0 <pow>
 800149a:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800149e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80014a2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        if (temp < 0)
 80014a6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mlx90640->kv[i] = (temp - 0.5f);
 80014ae:	bf4c      	ite	mi
 80014b0:	ee37 7a68 	vsubmi.f32	s14, s14, s17
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 80014b4:	ee37 7a28 	vaddpl.f32	s14, s14, s17
 80014b8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80014bc:	edcd 7a01 	vstr	s15, [sp, #4]
 80014c0:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80014c4:	f807 3f01 	strb.w	r3, [r7, #1]!
    for(int i = 0; i < 768; i++)
 80014c8:	45b8      	cmp	r8, r7
 80014ca:	d1de      	bne.n	800148a <ExtractKvPixelParameters+0xfe>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 80014cc:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 80014d0:	f884 524d 	strb.w	r5, [r4, #589]	@ 0x24d
}
 80014d4:	f50d 6d41 	add.w	sp, sp, #3088	@ 0xc10
 80014d8:	ecbd 8b04 	vpop	{d8-d9}
 80014dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        temp = temp*2;
 80014e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e4:	4613      	mov	r3, r2
 80014e6:	e7bd      	b.n	8001464 <ExtractKvPixelParameters+0xd8>
 80014e8:	42800000 	.word	0x42800000

080014ec <ExtractCPParameters>:
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 80014ec:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
    alphaSP[0] = (eeData[57] & 0x03FF);
    if (alphaSP[0] > 511)
    {
        alphaSP[0] = alphaSP[0] - 1024;
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 80014f0:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
    offsetSP[0] = (eeData[58] & 0x03FF);
 80014f4:	f8b0 2074 	ldrh.w	r2, [r0, #116]	@ 0x74
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 80014f8:	0b1b      	lsrs	r3, r3, #12
    if (alphaSP[0] > 511)
 80014fa:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8001648 <ExtractCPParameters+0x15c>
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 80014fe:	331b      	adds	r3, #27
{
 8001500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8001504:	ee01 3a10 	vmov	s2, r3
{
 8001508:	460d      	mov	r5, r1
 800150a:	f3c2 0309 	ubfx	r3, r2, #0, #10
    if (offsetSP[0] > 511)
 800150e:	0591      	lsls	r1, r2, #22
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8001510:	ea4f 2692 	mov.w	r6, r2, lsr #10
    alphaSP[0] = (eeData[57] & 0x03FF);
 8001514:	f8b0 4072 	ldrh.w	r4, [r0, #114]	@ 0x72
        offsetSP[0] = offsetSP[0] - 1024;
 8001518:	bf48      	it	mi
 800151a:	f5a3 6380 	submi.w	r3, r3, #1024	@ 0x400
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 800151e:	eeb8 1b41 	vcvt.f64.u32	d1, s2
{
 8001522:	4680      	mov	r8, r0
        offsetSP[0] = offsetSP[0] - 1024;
 8001524:	bf48      	it	mi
 8001526:	b29b      	uxthmi	r3, r3
    if (offsetSP[1] > 31)
 8001528:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
        offsetSP[1] = offsetSP[1] - 64;
 800152c:	bf28      	it	cs
 800152e:	3e40      	subcs	r6, #64	@ 0x40
 8001530:	b21f      	sxth	r7, r3
 8001532:	bf28      	it	cs
 8001534:	b2b6      	uxthcs	r6, r6
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8001536:	441e      	add	r6, r3
    alphaSP[0] = (eeData[57] & 0x03FF);
 8001538:	f3c4 0309 	ubfx	r3, r4, #0, #10
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 800153c:	0aa4      	lsrs	r4, r4, #10
    alphaSP[0] = (eeData[57] & 0x03FF);
 800153e:	ee07 3a10 	vmov	s14, r3
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8001542:	b236      	sxth	r6, r6
{
 8001544:	ed2d 8b04 	vpush	{d8-d9}
    alphaSP[0] = (eeData[57] & 0x03FF);
 8001548:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
    if (alphaSP[0] > 511)
 800154c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        alphaSP[0] = alphaSP[0] - 1024;
 8001554:	bfc4      	itt	gt
 8001556:	eddf 7a3d 	vldrgt	s15, [pc, #244]	@ 800164c <ExtractCPParameters+0x160>
 800155a:	ee38 8a67 	vsubgt.f32	s16, s16, s15
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 800155e:	f00a fa47 	bl	800b9f0 <pow>
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8001562:	ee07 4a90 	vmov	s15, r4
    if (alphaSP[1] > 31)
 8001566:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
    {
        alphaSP[1] = alphaSP[1] - 64;
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
    
    cpKta = (eeData[59] & 0x00FF);
 800156a:	f898 3076 	ldrb.w	r3, [r8, #118]	@ 0x76
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 800156e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    cpKta = (eeData[59] & 0x00FF);
 8001572:	f8b8 4076 	ldrh.w	r4, [r8, #118]	@ 0x76
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (cpKta > 127)
    {
        cpKta = cpKta - 256;
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 800157a:	f8b8 8070 	ldrh.w	r8, [r8, #112]	@ 0x70
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 800157e:	ee88 9b00 	vdiv.f64	d9, d8, d0
    if (alphaSP[1] > 31)
 8001582:	eef4 7ac7 	vcmpe.f32	s15, s14
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8001586:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 800158a:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
    if (alphaSP[1] > 31)
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        alphaSP[1] = alphaSP[1] - 64;
 8001592:	bfc4      	itt	gt
 8001594:	ed9f 7a2e 	vldrgt	s14, [pc, #184]	@ 8001650 <ExtractCPParameters+0x164>
 8001598:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 800159c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001654 <ExtractCPParameters+0x168>
 80015a0:	eee7 8a87 	vfma.f32	s17, s15, s14
    cpKta = (eeData[59] & 0x00FF);
 80015a4:	ee07 3a10 	vmov	s14, r3
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 80015a8:	f3c8 1303 	ubfx	r3, r8, #4, #4
    cpKta = (eeData[59] & 0x00FF);
 80015ac:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80015b0:	3308      	adds	r3, #8
 80015b2:	ee01 3a10 	vmov	s2, r3
 80015b6:	eeb8 1b41 	vcvt.f64.u32	d1, s2
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 80015ba:	eeb7 9bc9 	vcvt.f32.f64	s18, d9
    if (cpKta > 127)
 80015be:	eddf 9a26 	vldr	s19, [pc, #152]	@ 8001658 <ExtractCPParameters+0x16c>
 80015c2:	eeb4 8ae9 	vcmpe.f32	s16, s19
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 80015c6:	ee69 8a28 	vmul.f32	s17, s18, s17
    if (cpKta > 127)
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cpKta = cpKta - 256;
 80015ce:	bfc4      	itt	gt
 80015d0:	eddf 7a22 	vldrgt	s15, [pc, #136]	@ 800165c <ExtractCPParameters+0x170>
 80015d4:	ee38 8a67 	vsubgt.f32	s16, s16, s15
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80015d8:	f00a fa0a 	bl	800b9f0 <pow>
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 80015dc:	0a23      	lsrs	r3, r4, #8
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80015de:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 80015e2:	ee87 6b00 	vdiv.f64	d6, d7, d0
    cpKv = (eeData[59] & 0xFF00) >> 8;
 80015e6:	ee07 3a10 	vmov	s14, r3
    if (cpKv > 127)
    {
        cpKv = cpKv - 256;
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 80015ea:	f3c8 2303 	ubfx	r3, r8, #8, #4
 80015ee:	ee01 3a10 	vmov	s2, r3
    cpKv = (eeData[59] & 0xFF00) >> 8;
 80015f2:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 80015f6:	eeb8 1b41 	vcvt.f64.u32	d1, s2
 80015fa:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
    if (cpKv > 127)
 80015fe:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cpKv = cpKv - 256;
 8001606:	bfc4      	itt	gt
 8001608:	eddf 7a14 	vldrgt	s15, [pc, #80]	@ 800165c <ExtractCPParameters+0x170>
 800160c:	ee38 8a67 	vsubgt.f32	s16, s16, s15
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 8001610:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8001614:	ed85 6a08 	vstr	s12, [r5, #32]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8001618:	f00a f9ea 	bl	800b9f0 <pow>
 800161c:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8001620:	f505 5180 	add.w	r1, r5, #4096	@ 0x1000
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8001624:	ee87 6b00 	vdiv.f64	d6, d7, d0
 8001628:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 800162c:	ed85 6a07 	vstr	s12, [r5, #28]
    mlx90640->cpAlpha[0] = alphaSP[0];
 8001630:	ed81 9a94 	vstr	s18, [r1, #592]	@ 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8001634:	edc1 8a95 	vstr	s17, [r1, #596]	@ 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8001638:	f8a1 7258 	strh.w	r7, [r1, #600]	@ 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 800163c:	f8a1 625a 	strh.w	r6, [r1, #602]	@ 0x25a
}
 8001640:	ecbd 8b04 	vpop	{d8-d9}
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001648:	43ff8000 	.word	0x43ff8000
 800164c:	44800000 	.word	0x44800000
 8001650:	42800000 	.word	0x42800000
 8001654:	3c000000 	.word	0x3c000000
 8001658:	42fe0000 	.word	0x42fe0000
 800165c:	43800000 	.word	0x43800000

08001660 <ExtractCILCParameters>:
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
    calibrationModeEE = calibrationModeEE ^ 0x80;

    ilChessC[0] = (eeData[53] & 0x003F);
 8001660:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
    if (ilChessC[0] > 31)
 8001664:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8001668:	8a82      	ldrh	r2, [r0, #20]
        ilChessC[0] = ilChessC[0] - 64;
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
    if (ilChessC[1] > 15)
 800166a:	eeb2 6a0e 	vmov.f32	s12, #46	@ 0x41700000  15.0
    ilChessC[0] = (eeData[53] & 0x003F);
 800166e:	f003 003f 	and.w	r0, r3, #63	@ 0x3f
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8001672:	ea6f 1212 	mvn.w	r2, r2, lsr #4
    ilChessC[0] = (eeData[53] & 0x003F);
 8001676:	ee07 0a90 	vmov	s15, r0
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 800167a:	f3c3 1084 	ubfx	r0, r3, #6, #5
    {
        ilChessC[1] = ilChessC[1] - 32;
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 800167e:	0adb      	lsrs	r3, r3, #11
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8001680:	f002 0280 	and.w	r2, r2, #128	@ 0x80
    ilChessC[0] = (eeData[53] & 0x003F);
 8001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    {
        ilChessC[2] = ilChessC[2] - 32;
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 8001688:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 800168c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
    if (ilChessC[0] > 31)
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        ilChessC[0] = ilChessC[0] - 64;
 8001698:	bfc4      	itt	gt
 800169a:	ed9f 7a18 	vldrgt	s14, [pc, #96]	@ 80016fc <ExtractCILCParameters+0x9c>
 800169e:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    ilChessC[0] = ilChessC[0] / 16.0f;
 80016a2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001700 <ExtractCILCParameters+0xa0>
 80016a6:	ee67 6a87 	vmul.f32	s13, s15, s14
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 80016aa:	ee07 0a90 	vmov	s15, r0
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mlx90640->ilChessC[0] = ilChessC[0];
 80016b2:	edc1 6a97 	vstr	s13, [r1, #604]	@ 0x25c
    if (ilChessC[1] > 15)
 80016b6:	eef4 7ac6 	vcmpe.f32	s15, s12
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        ilChessC[1] = ilChessC[1] - 32;
 80016be:	bfc4      	itt	gt
 80016c0:	ed9f 7a10 	vldrgt	s14, [pc, #64]	@ 8001704 <ExtractCILCParameters+0xa4>
 80016c4:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    ilChessC[1] = ilChessC[1] / 2.0f;
 80016c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016cc:	ee27 7a87 	vmul.f32	s14, s15, s14
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mlx90640->ilChessC[1] = ilChessC[1];
 80016d8:	ed81 7a98 	vstr	s14, [r1, #608]	@ 0x260
    ilChessC[2] = ilChessC[2] / 8.0f;
 80016dc:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
    if (ilChessC[2] > 15)
 80016e0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        ilChessC[2] = ilChessC[2] - 32;
 80016e8:	bfc4      	itt	gt
 80016ea:	ed9f 6a06 	vldrgt	s12, [pc, #24]	@ 8001704 <ExtractCILCParameters+0xa4>
 80016ee:	ee77 7ac6 	vsubgt.f32	s15, s15, s12
    ilChessC[2] = ilChessC[2] / 8.0f;
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    mlx90640->ilChessC[2] = ilChessC[2];
 80016f6:	edc1 7a99 	vstr	s15, [r1, #612]	@ 0x264
}
 80016fa:	4770      	bx	lr
 80016fc:	42800000 	.word	0x42800000
 8001700:	3d800000 	.word	0x3d800000
 8001704:	42000000 	.word	0x42000000

08001708 <CheckAdjacentPixels>:

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 8001708:	1a40      	subs	r0, r0, r1
     if(pixPosDif > -34 && pixPosDif < -30)
 800170a:	f100 0321 	add.w	r3, r0, #33	@ 0x21
 800170e:	2b02      	cmp	r3, #2
 8001710:	d909      	bls.n	8001726 <CheckAdjacentPixels+0x1e>
     {
         return -6;
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 8001712:	1c43      	adds	r3, r0, #1
 8001714:	2b02      	cmp	r3, #2
 8001716:	d906      	bls.n	8001726 <CheckAdjacentPixels+0x1e>
     {
         return -6;
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8001718:	381f      	subs	r0, #31
         return -6;
 800171a:	2802      	cmp	r0, #2
 800171c:	bf8c      	ite	hi
 800171e:	2000      	movhi	r0, #0
 8001720:	f06f 0005 	mvnls.w	r0, #5
 8001724:	4770      	bx	lr
 8001726:	f06f 0005 	mvn.w	r0, #5
     {
         return -6;
     }
     
     return 0;    
 }
 800172a:	4770      	bx	lr

0800172c <ExtractDeviatingPixels>:
{
 800172c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001730:	f501 5593 	add.w	r5, r1, #4704	@ 0x1260
 8001734:	4604      	mov	r4, r0
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8001736:	2214      	movs	r2, #20
{
 8001738:	460e      	mov	r6, r1
 800173a:	3508      	adds	r5, #8
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 800173c:	21ff      	movs	r1, #255	@ 0xff
 800173e:	4628      	mov	r0, r5
 8001740:	f008 fa42 	bl	8009bc8 <memset>
    uint16_t outlierPixCnt = 0;
 8001744:	2200      	movs	r2, #0
 8001746:	f104 007e 	add.w	r0, r4, #126	@ 0x7e
    pixCnt = 0;    
 800174a:	4613      	mov	r3, r2
    uint16_t brokenPixCnt = 0;
 800174c:	4614      	mov	r4, r2
        if(eeData[pixCnt+64] == 0)
 800174e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 8001752:	b989      	cbnz	r1, 8001778 <ExtractDeviatingPixels+0x4c>
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8001754:	f604 1134 	addw	r1, r4, #2356	@ 0x934
            brokenPixCnt = brokenPixCnt + 1;
 8001758:	3401      	adds	r4, #1
 800175a:	b2a4      	uxth	r4, r4
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 800175c:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
        pixCnt = pixCnt + 1;
 8001760:	3301      	adds	r3, #1
 8001762:	b29b      	uxth	r3, r3
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8001764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001768:	d010      	beq.n	800178c <ExtractDeviatingPixels+0x60>
 800176a:	2c05      	cmp	r4, #5
 800176c:	d058      	beq.n	8001820 <ExtractDeviatingPixels+0xf4>
 800176e:	2a05      	cmp	r2, #5
 8001770:	d1ed      	bne.n	800174e <ExtractDeviatingPixels+0x22>
        warn = -4;
 8001772:	f06f 0003 	mvn.w	r0, #3
 8001776:	e055      	b.n	8001824 <ExtractDeviatingPixels+0xf8>
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8001778:	07c9      	lsls	r1, r1, #31
 800177a:	d5f1      	bpl.n	8001760 <ExtractDeviatingPixels+0x34>
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 800177c:	f602 1138 	addw	r1, r2, #2360	@ 0x938
            outlierPixCnt = outlierPixCnt + 1;
 8001780:	3201      	adds	r2, #1
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8001782:	eb06 0141 	add.w	r1, r6, r1, lsl #1
            outlierPixCnt = outlierPixCnt + 1;
 8001786:	b292      	uxth	r2, r2
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8001788:	804b      	strh	r3, [r1, #2]
            outlierPixCnt = outlierPixCnt + 1;
 800178a:	e7e9      	b.n	8001760 <ExtractDeviatingPixels+0x34>
    if(brokenPixCnt > 4)  
 800178c:	2c05      	cmp	r4, #5
 800178e:	d047      	beq.n	8001820 <ExtractDeviatingPixels+0xf4>
    else if(outlierPixCnt > 4)  
 8001790:	2a05      	cmp	r2, #5
 8001792:	d0ee      	beq.n	8001772 <ExtractDeviatingPixels+0x46>
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8001794:	18a3      	adds	r3, r4, r2
 8001796:	2b04      	cmp	r3, #4
 8001798:	dc46      	bgt.n	8001828 <ExtractDeviatingPixels+0xfc>
 800179a:	2700      	movs	r7, #0
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800179c:	b2bb      	uxth	r3, r7
 800179e:	429c      	cmp	r4, r3
 80017a0:	d812      	bhi.n	80017c8 <ExtractDeviatingPixels+0x9c>
 80017a2:	f506 5893 	add.w	r8, r6, #4704	@ 0x1260
 80017a6:	2700      	movs	r7, #0
 80017a8:	f108 0812 	add.w	r8, r8, #18
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 80017ac:	b2bb      	uxth	r3, r7
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d81b      	bhi.n	80017ea <ExtractDeviatingPixels+0xbe>
 80017b2:	f506 5693 	add.w	r6, r6, #4704	@ 0x1260
 80017b6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80017ba:	3610      	adds	r6, #16
 80017bc:	eb06 0242 	add.w	r2, r6, r2, lsl #1
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80017c0:	42ac      	cmp	r4, r5
 80017c2:	d034      	beq.n	800182e <ExtractDeviatingPixels+0x102>
 80017c4:	4637      	mov	r7, r6
 80017c6:	e027      	b.n	8001818 <ExtractDeviatingPixels+0xec>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80017c8:	f107 0901 	add.w	r9, r7, #1
 80017cc:	46c8      	mov	r8, r9
 80017ce:	4544      	cmp	r4, r8
 80017d0:	dc01      	bgt.n	80017d6 <ExtractDeviatingPixels+0xaa>
 80017d2:	464f      	mov	r7, r9
 80017d4:	e7e2      	b.n	800179c <ExtractDeviatingPixels+0x70>
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 80017d6:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 80017da:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 80017de:	f7ff ff93 	bl	8001708 <CheckAdjacentPixels>
                if(warn != 0)
 80017e2:	b9f8      	cbnz	r0, 8001824 <ExtractDeviatingPixels+0xf8>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80017e4:	f108 0801 	add.w	r8, r8, #1
 80017e8:	e7f1      	b.n	80017ce <ExtractDeviatingPixels+0xa2>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 80017ea:	f107 0a01 	add.w	sl, r7, #1
 80017ee:	46d1      	mov	r9, sl
 80017f0:	454a      	cmp	r2, r9
 80017f2:	dc01      	bgt.n	80017f8 <ExtractDeviatingPixels+0xcc>
 80017f4:	4657      	mov	r7, sl
 80017f6:	e7d9      	b.n	80017ac <ExtractDeviatingPixels+0x80>
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 80017f8:	f838 1019 	ldrh.w	r1, [r8, r9, lsl #1]
 80017fc:	f838 0017 	ldrh.w	r0, [r8, r7, lsl #1]
 8001800:	f7ff ff82 	bl	8001708 <CheckAdjacentPixels>
                if(warn != 0)
 8001804:	b970      	cbnz	r0, 8001824 <ExtractDeviatingPixels+0xf8>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8001806:	f109 0901 	add.w	r9, r9, #1
 800180a:	e7f1      	b.n	80017f0 <ExtractDeviatingPixels+0xc4>
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 800180c:	f837 1f02 	ldrh.w	r1, [r7, #2]!
 8001810:	8828      	ldrh	r0, [r5, #0]
 8001812:	f7ff ff79 	bl	8001708 <CheckAdjacentPixels>
                if(warn != 0)
 8001816:	b928      	cbnz	r0, 8001824 <ExtractDeviatingPixels+0xf8>
            for(i=0; i<outlierPixCnt; i++)
 8001818:	4297      	cmp	r7, r2
 800181a:	d1f7      	bne.n	800180c <ExtractDeviatingPixels+0xe0>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800181c:	3502      	adds	r5, #2
 800181e:	e7cf      	b.n	80017c0 <ExtractDeviatingPixels+0x94>
        warn = -3;
 8001820:	f06f 0002 	mvn.w	r0, #2
}
 8001824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        warn = -5;
 8001828:	f06f 0004 	mvn.w	r0, #4
 800182c:	e7fa      	b.n	8001824 <ExtractDeviatingPixels+0xf8>
 800182e:	2000      	movs	r0, #0
 8001830:	e7f8      	b.n	8001824 <ExtractDeviatingPixels+0xf8>

08001832 <MLX90640_ExtractParameters>:
{
 8001832:	b538      	push	{r3, r4, r5, lr}
    ExtractVDDParameters(eeData, mlx90640);
 8001834:	f7ff fa28 	bl	8000c88 <ExtractVDDParameters>
{
 8001838:	4604      	mov	r4, r0
    ExtractPTATParameters(eeData, mlx90640);
 800183a:	f7ff fa39 	bl	8000cb0 <ExtractPTATParameters>
    mlx90640->gainEE = gainEE;    
 800183e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
{
 8001842:	460d      	mov	r5, r1
    mlx90640->gainEE = gainEE;    
 8001844:	828b      	strh	r3, [r1, #20]
    ExtractTgcParameters(eeData, mlx90640);
 8001846:	f7ff fa83 	bl	8000d50 <ExtractTgcParameters>
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 800184a:	f8b0 3070 	ldrh.w	r3, [r0, #112]	@ 0x70
 800184e:	f3c3 3301 	ubfx	r3, r3, #12, #2
    mlx90640->resolutionEE = resolutionEE;
 8001852:	f881 3024 	strb.w	r3, [r1, #36]	@ 0x24
    ExtractKsTaParameters(eeData, mlx90640);
 8001856:	f7ff fa99 	bl	8000d8c <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 800185a:	f7ff fab7 	bl	8000dcc <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 800185e:	f7ff fe45 	bl	80014ec <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8001862:	4629      	mov	r1, r5
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fb25 	bl	8000eb4 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 800186a:	4629      	mov	r1, r5
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fc3b 	bl	80010e8 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8001872:	4629      	mov	r1, r5
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff fcc1 	bl	80011fc <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 800187a:	4629      	mov	r1, r5
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fd85 	bl	800138c <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8001882:	4629      	mov	r1, r5
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff feeb 	bl	8001660 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 800188a:	4629      	mov	r1, r5
 800188c:	4620      	mov	r0, r4
}
 800188e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8001892:	f7ff bf4b 	b.w	800172c <ExtractDeviatingPixels>
	...

08001898 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 8001898:	b530      	push	{r4, r5, lr}
 800189a:	461c      	mov	r4, r3
 800189c:	b085      	sub	sp, #20
	uint8_t* p = (uint8_t*) data;

	int ack = 0;                               
	int cnt = 0;
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 800189e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018a2:	0055      	lsls	r5, r2, #1
 80018a4:	460a      	mov	r2, r1
 80018a6:	0041      	lsls	r1, r0, #1
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	b2ab      	uxth	r3, r5
 80018ac:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <MLX90640_I2CRead+0x4c>)
 80018ae:	e9cd 4300 	strd	r4, r3, [sp]
 80018b2:	2302      	movs	r3, #2
 80018b4:	f001 f890 	bl	80029d8 <HAL_I2C_Mem_Read>

	if (ack != HAL_OK)
 80018b8:	b988      	cbnz	r0, 80018de <MLX90640_I2CRead+0x46>
	{
			return -1;
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80018ba:	4621      	mov	r1, r4
 80018bc:	1c8b      	adds	r3, r1, #2
 80018be:	1b09      	subs	r1, r1, r4
 80018c0:	428d      	cmp	r5, r1
 80018c2:	dc02      	bgt.n	80018ca <MLX90640_I2CRead+0x32>
 80018c4:	2000      	movs	r0, #0
		p[cnt+1] = p[cnt];
		p[cnt] = tempBuffer;
	}

	return 0;   
} 
 80018c6:	b005      	add	sp, #20
 80018c8:	bd30      	pop	{r4, r5, pc}
		p[cnt+1] = p[cnt];
 80018ca:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		uint8_t tempBuffer = p[cnt+1];
 80018ce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
		p[cnt+1] = p[cnt];
 80018d2:	f803 1c01 	strb.w	r1, [r3, #-1]
		p[cnt] = tempBuffer;
 80018d6:	4619      	mov	r1, r3
 80018d8:	f803 2c02 	strb.w	r2, [r3, #-2]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80018dc:	e7ee      	b.n	80018bc <MLX90640_I2CRead+0x24>
			return -1;
 80018de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018e2:	e7f0      	b.n	80018c6 <MLX90640_I2CRead+0x2e>
 80018e4:	20007404 	.word	0x20007404

080018e8 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);

	cmd[0] = data >> 8;
 80018ea:	ba53      	rev16	r3, r2
{
 80018ec:	b087      	sub	sp, #28
 80018ee:	4614      	mov	r4, r2
	cmd[1] = data & 0x00FF;


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 80018f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
	cmd[0] = data >> 8;
 80018f4:	f8ad 3014 	strh.w	r3, [sp, #20]
	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 80018f8:	2302      	movs	r3, #2
{
 80018fa:	460e      	mov	r6, r1
	sa = (slaveAddr << 1);
 80018fc:	0041      	lsls	r1, r0, #1
{
 80018fe:	4605      	mov	r5, r0
	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 8001900:	480e      	ldr	r0, [pc, #56]	@ (800193c <MLX90640_I2CWrite+0x54>)
 8001902:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001906:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800190a:	aa05      	add	r2, sp, #20
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	4632      	mov	r2, r6
 8001910:	f000 ff88 	bl	8002824 <HAL_I2C_Mem_Write>

	if (ack != HAL_OK)
 8001914:	b970      	cbnz	r0, 8001934 <MLX90640_I2CWrite+0x4c>
	{
			return -1;
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck);
 8001916:	4f0a      	ldr	r7, [pc, #40]	@ (8001940 <MLX90640_I2CWrite+0x58>)
 8001918:	2201      	movs	r2, #1
 800191a:	4631      	mov	r1, r6
 800191c:	4628      	mov	r0, r5
 800191e:	463b      	mov	r3, r7
 8001920:	f7ff ffba 	bl	8001898 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 8001924:	883b      	ldrh	r3, [r7, #0]
	{
			return -2;
	}    
	
	return 0;
 8001926:	42a3      	cmp	r3, r4
 8001928:	bf14      	ite	ne
 800192a:	f06f 0001 	mvnne.w	r0, #1
 800192e:	2000      	moveq	r0, #0
}
 8001930:	b007      	add	sp, #28
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -1;
 8001934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001938:	e7fa      	b.n	8001930 <MLX90640_I2CWrite+0x48>
 800193a:	bf00      	nop
 800193c:	20007404 	.word	0x20007404
 8001940:	200073dc 	.word	0x200073dc

08001944 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001944:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001946:	4808      	ldr	r0, [pc, #32]	@ (8001968 <MX_CRC_Init+0x24>)
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_CRC_Init+0x28>)
 800194a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	8083      	strh	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001950:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001954:	2301      	movs	r3, #1
 8001956:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001958:	f000 fcae 	bl	80022b8 <HAL_CRC_Init>
 800195c:	b118      	cbz	r0, 8001966 <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800195e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001962:	f000 bb35 	b.w	8001fd0 <Error_Handler>
}
 8001966:	bd08      	pop	{r3, pc}
 8001968:	200073e0 	.word	0x200073e0
 800196c:	40023000 	.word	0x40023000

08001970 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001970:	6802      	ldr	r2, [r0, #0]
{
 8001972:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_CRC_MspInit+0x28>)
 8001976:	429a      	cmp	r2, r3
 8001978:	d10b      	bne.n	8001992 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800197a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 800197e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001982:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001986:	631a      	str	r2, [r3, #48]	@ 0x30
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001992:	b002      	add	sp, #8
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023000 	.word	0x40023000

0800199c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800199c:	b510      	push	{r4, lr}
 800199e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	2214      	movs	r2, #20
 80019a2:	2100      	movs	r1, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80019a4:	4c19      	ldr	r4, [pc, #100]	@ (8001a0c <MX_GPIO_Init+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	a803      	add	r0, sp, #12
 80019a8:	f008 f90e 	bl	8009bc8 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_GPIO_Init+0x74>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80019ae:	4620      	mov	r0, r4
 80019b0:	f244 0181 	movw	r1, #16513	@ 0x4081
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80019bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019be:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c8:	f042 0202 	orr.w	r2, r2, #2
 80019cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019d0:	f002 0202 	and.w	r2, r2, #2
 80019d4:	9201      	str	r2, [sp, #4]
 80019d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019da:	f042 0208 	orr.w	r2, r2, #8
 80019de:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80019ec:	f000 fda8 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	f244 0281 	movw	r2, #16513	@ 0x4081
 80019f4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	a903      	add	r1, sp, #12
 80019f8:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	e9cd 3305 	strd	r3, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f000 fcb8 	bl	8002378 <HAL_GPIO_Init>

}
 8001a08:	b008      	add	sp, #32
 8001a0a:	bd10      	pop	{r4, pc}
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40023800 	.word	0x40023800

08001a14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a14:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a16:	4812      	ldr	r0, [pc, #72]	@ (8001a60 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x6000030D;
 8001a18:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <MX_I2C1_Init+0x50>)
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <MX_I2C1_Init+0x54>)
 8001a1c:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8001a24:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a28:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a30:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a32:	f000 fea5 	bl	8002780 <HAL_I2C_Init>
 8001a36:	b108      	cbz	r0, 8001a3c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8001a38:	f000 faca 	bl	8001fd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <MX_I2C1_Init+0x4c>)
 8001a40:	f001 f8a8 	bl	8002b94 <HAL_I2CEx_ConfigAnalogFilter>
 8001a44:	b108      	cbz	r0, 8001a4a <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8001a46:	f000 fac3 	bl	8001fd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_I2C1_Init+0x4c>)
 8001a4e:	f001 f8c7 	bl	8002be0 <HAL_I2CEx_ConfigDigitalFilter>
 8001a52:	b118      	cbz	r0, 8001a5c <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a58:	f000 baba 	b.w	8001fd0 <Error_Handler>
}
 8001a5c:	bd08      	pop	{r3, pc}
 8001a5e:	bf00      	nop
 8001a60:	20007404 	.word	0x20007404
 8001a64:	40005400 	.word	0x40005400
 8001a68:	6000030d 	.word	0x6000030d

08001a6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	b0ac      	sub	sp, #176	@ 0xb0
 8001a70:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	2214      	movs	r2, #20
 8001a74:	2100      	movs	r1, #0
 8001a76:	a803      	add	r0, sp, #12
 8001a78:	f008 f8a6 	bl	8009bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	2290      	movs	r2, #144	@ 0x90
 8001a7e:	2100      	movs	r1, #0
 8001a80:	a808      	add	r0, sp, #32
 8001a82:	f008 f8a1 	bl	8009bc8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a86:	6822      	ldr	r2, [r4, #0]
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <HAL_I2C_MspInit+0x7c>)
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d12a      	bne.n	8001ae4 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a92:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a94:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a96:	f001 fbb1 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	b108      	cbz	r0, 8001aa0 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001a9c:	f000 fa98 	bl	8001fd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4c12      	ldr	r4, [pc, #72]	@ (8001aec <HAL_I2C_MspInit+0x80>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa2:	f44f 7240 	mov.w	r2, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ab2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abc:	2312      	movs	r3, #18
 8001abe:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001acc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f000 fc53 	bl	8002378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ad4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	6423      	str	r3, [r4, #64]	@ 0x40
 8001ada:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ae4:	b02c      	add	sp, #176	@ 0xb0
 8001ae6:	bd10      	pop	{r4, pc}
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400

08001af4 <displayNumber>:
void transform_to_4d(const float input[][WIDTH], float transformed_input[1][HEIGHT][WIDTH][1]);

void getFrame(float framebuf[HEIGHT][WIDTH]);
void captureAndPreprocessFrame(float (*frameBuffer)[WIDTH], float (*outputBuffer)[WIDTH]);

void displayNumber(int number) {
 8001af4:	b510      	push	{r4, lr}

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
void displayNumber(int number) {
 8001af8:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001afa:	2101      	movs	r1, #1
 8001afc:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <displayNumber+0x6c>)
 8001afe:	f000 fd1f 	bl	8002540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	4816      	ldr	r0, [pc, #88]	@ (8001b60 <displayNumber+0x6c>)
 8001b08:	f000 fd1a 	bl	8002540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b12:	4813      	ldr	r0, [pc, #76]	@ (8001b60 <displayNumber+0x6c>)
 8001b14:	f000 fd14 	bl	8002540 <HAL_GPIO_WritePin>

    if(number == 0) {
 8001b18:	b30c      	cbz	r4, 8001b5e <displayNumber+0x6a>
        // 0: 모든 LED 꺼짐
    } else if(number == 1) {
 8001b1a:	3c01      	subs	r4, #1
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
    } else if(number == 4) {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
    }
    else{ // error
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2c03      	cmp	r4, #3
 8001b20:	d810      	bhi.n	8001b44 <displayNumber+0x50>
 8001b22:	e8df f004 	tbb	[pc, r4]
 8001b26:	0d02      	.short	0x0d02
 8001b28:	1908      	.short	0x1908
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001b2a:	4611      	mov	r1, r2
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <displayNumber+0x6c>)
    }
}
 8001b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b32:	f000 bd05 	b.w	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001b36:	4611      	mov	r1, r2
 8001b38:	4809      	ldr	r0, [pc, #36]	@ (8001b60 <displayNumber+0x6c>)
 8001b3a:	f000 fd01 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	e7f3      	b.n	8001b2c <displayNumber+0x38>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001b44:	4611      	mov	r1, r2
 8001b46:	4806      	ldr	r0, [pc, #24]	@ (8001b60 <displayNumber+0x6c>)
 8001b48:	f000 fcfa 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <displayNumber+0x6c>)
 8001b52:	f000 fcf5 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b5c:	e7e6      	b.n	8001b2c <displayNumber+0x38>
}
 8001b5e:	bd10      	pop	{r4, pc}
 8001b60:	40020400 	.word	0x40020400

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b510      	push	{r4, lr}
 8001b66:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b68:	2210      	movs	r2, #16
 8001b6a:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	a809      	add	r0, sp, #36	@ 0x24
 8001b70:	f008 f82a 	bl	8009bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	2214      	movs	r2, #20
 8001b76:	2100      	movs	r1, #0
 8001b78:	a802      	add	r0, sp, #8
 8001b7a:	f008 f825 	bl	8009bc8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b80:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b82:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b86:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <SystemClock_Config+0xa4>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ba2:	9413      	str	r4, [sp, #76]	@ 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001bb0:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bb8:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001bbc:	23d8      	movs	r3, #216	@ 0xd8
 8001bbe:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc2:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bc4:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc8:	f001 f868 	bl	8002c9c <HAL_RCC_OscConfig>
 8001bcc:	b108      	cbz	r0, 8001bd2 <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <SystemClock_Config+0x6c>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bd2:	f001 f82b 	bl	8002c2c <HAL_PWREx_EnableOverDrive>
 8001bd6:	b108      	cbz	r0, 8001bdc <SystemClock_Config+0x78>
 8001bd8:	b672      	cpsid	i
  while (1)
 8001bda:	e7fe      	b.n	8001bda <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bdc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bde:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be2:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001be4:	2107      	movs	r1, #7
 8001be6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bf4:	f001 fa44 	bl	8003080 <HAL_RCC_ClockConfig>
 8001bf8:	b108      	cbz	r0, 8001bfe <SystemClock_Config+0x9a>
 8001bfa:	b672      	cpsid	i
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <SystemClock_Config+0x98>
}
 8001bfe:	b014      	add	sp, #80	@ 0x50
 8001c00:	bd10      	pop	{r4, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <AI_Init>:
{
 8001c0c:	b570      	push	{r4, r5, r6, lr}
  err = ai_model_create_and_init(&model, act_addr, NULL);
 8001c0e:	4c13      	ldr	r4, [pc, #76]	@ (8001c5c <AI_Init+0x50>)
  printf("\r\nTEMPLATE - initialization\r\n");
 8001c10:	4813      	ldr	r0, [pc, #76]	@ (8001c60 <AI_Init+0x54>)
 8001c12:	f007 ffd1 	bl	8009bb8 <puts>
  err = ai_model_create_and_init(&model, act_addr, NULL);
 8001c16:	2200      	movs	r2, #0
 8001c18:	4912      	ldr	r1, [pc, #72]	@ (8001c64 <AI_Init+0x58>)
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f002 fe64 	bl	80048e8 <ai_model_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8001c20:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8001c24:	d006      	beq.n	8001c34 <AI_Init+0x28>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001c26:	0a03      	lsrs	r3, r0, #8
 8001c28:	462a      	mov	r2, r5
 8001c2a:	490f      	ldr	r1, [pc, #60]	@ (8001c68 <AI_Init+0x5c>)
 8001c2c:	480f      	ldr	r0, [pc, #60]	@ (8001c6c <AI_Init+0x60>)
 8001c2e:	f007 ff5b 	bl	8009ae8 <iprintf>
  do {} while (1);
 8001c32:	e7fe      	b.n	8001c32 <AI_Init+0x26>
  ai_input = ai_model_inputs_get(model, NULL);
 8001c34:	4e0e      	ldr	r6, [pc, #56]	@ (8001c70 <AI_Init+0x64>)
 8001c36:	4629      	mov	r1, r5
 8001c38:	6820      	ldr	r0, [r4, #0]
 8001c3a:	f001 ffd3 	bl	8003be4 <ai_model_inputs_get>
  ai_output = ai_model_outputs_get(model, NULL);
 8001c3e:	4629      	mov	r1, r5
  ai_input = ai_model_inputs_get(model, NULL);
 8001c40:	6030      	str	r0, [r6, #0]
  ai_output = ai_model_outputs_get(model, NULL);
 8001c42:	6820      	ldr	r0, [r4, #0]
 8001c44:	f001 ffd8 	bl	8003bf8 <ai_model_outputs_get>
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <AI_Init+0x68>)
 8001c4a:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 8001c4c:	6833      	ldr	r3, [r6, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <AI_Init+0x6c>)
 8001c52:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 8001c54:	6842      	ldr	r2, [r0, #4]
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <AI_Init+0x70>)
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	2000b7e8 	.word	0x2000b7e8
 8001c60:	0800c070 	.word	0x0800c070
 8001c64:	20000000 	.word	0x20000000
 8001c68:	0800c08d 	.word	0x0800c08d
 8001c6c:	0800c0a6 	.word	0x0800c0a6
 8001c70:	2000b7e4 	.word	0x2000b7e4
 8001c74:	2000b7e0 	.word	0x2000b7e0
 8001c78:	20017804 	.word	0x20017804
 8001c7c:	20017800 	.word	0x20017800

08001c80 <argmax>:
int argmax(float* array, int size) {
 8001c80:	4602      	mov	r2, r0
    for (int i = 1; i < size; i++) {
 8001c82:	2301      	movs	r3, #1
int argmax(float* array, int size) {
 8001c84:	b530      	push	{r4, r5, lr}
 8001c86:	1d04      	adds	r4, r0, #4
    int max_index = 0;
 8001c88:	2000      	movs	r0, #0
    for (int i = 1; i < size; i++) {
 8001c8a:	428b      	cmp	r3, r1
 8001c8c:	db00      	blt.n	8001c90 <argmax+0x10>
}
 8001c8e:	bd30      	pop	{r4, r5, pc}
        if (array[i] > array[max_index]) {
 8001c90:	eb02 0580 	add.w	r5, r2, r0, lsl #2
 8001c94:	ecb4 7a01 	vldmia	r4!, {s14}
 8001c98:	edd5 7a00 	vldr	s15, [r5]
 8001c9c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	bfc8      	it	gt
 8001ca6:	4618      	movgt	r0, r3
    for (int i = 1; i < size; i++) {
 8001ca8:	3301      	adds	r3, #1
 8001caa:	e7ee      	b.n	8001c8a <argmax+0xa>

08001cac <transform_to_4d>:
void transform_to_4d(const float input[][WIDTH], float transformed_input[1][HEIGHT][WIDTH][1]) {
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	2300      	movs	r3, #0
            transformed_input[0][h][w][0] = input[h][w] / 255.0f;
 8001cb0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001cd8 <transform_to_4d+0x2c>
        for (int w = 0; w < WIDTH; w++) {
 8001cb4:	f100 0680 	add.w	r6, r0, #128	@ 0x80
 8001cb8:	181a      	adds	r2, r3, r0
 8001cba:	18cc      	adds	r4, r1, r3
 8001cbc:	18f5      	adds	r5, r6, r3
            transformed_input[0][h][w][0] = input[h][w] / 255.0f;
 8001cbe:	ecf2 6a01 	vldmia	r2!, {s13}
 8001cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        for (int w = 0; w < WIDTH; w++) {
 8001cc6:	42aa      	cmp	r2, r5
            transformed_input[0][h][w][0] = input[h][w] / 255.0f;
 8001cc8:	eca4 7a01 	vstmia	r4!, {s14}
        for (int w = 0; w < WIDTH; w++) {
 8001ccc:	d1f7      	bne.n	8001cbe <transform_to_4d+0x12>
    for (int h = 0; h < HEIGHT; h++) {
 8001cce:	3380      	adds	r3, #128	@ 0x80
 8001cd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001cd4:	d1f0      	bne.n	8001cb8 <transform_to_4d+0xc>
}
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
 8001cd8:	437f0000 	.word	0x437f0000

08001cdc <captureAndPreprocessFrame>:
void captureAndPreprocessFrame(float (*frameBuffer)[WIDTH], float (*outputBuffer)[WIDTH]) {
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	f100 0480 	add.w	r4, r0, #128	@ 0x80
 8001ce2:	f500 6548 	add.w	r5, r0, #3200	@ 0xc80
    float minVal = FLT_MAX, maxVal = -FLT_MAX;
 8001ce6:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8001d50 <captureAndPreprocessFrame+0x74>
            if (val > maxVal) maxVal = val;
 8001cea:	4622      	mov	r2, r4
    float minVal = FLT_MAX, maxVal = -FLT_MAX;
 8001cec:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001d54 <captureAndPreprocessFrame+0x78>
        for (int j = 0; j < WIDTH; j++) {
 8001cf0:	f1a2 0380 	sub.w	r3, r2, #128	@ 0x80
            float val = frameBuffer[i][j];
 8001cf4:	ecf3 6a01 	vldmia	r3!, {s13}
            if (val < minVal) minVal = val;
 8001cf8:	eef4 6a47 	vcmp.f32	s13, s14
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (val > maxVal) maxVal = val;
 8001d00:	eef4 6a67 	vcmp.f32	s13, s15
            if (val < minVal) minVal = val;
 8001d04:	bf48      	it	mi
 8001d06:	eeb0 7a66 	vmovmi.f32	s14, s13
            if (val > maxVal) maxVal = val;
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	fe76 7aa7 	vselgt.f32	s15, s13, s15
        for (int j = 0; j < WIDTH; j++) {
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d1ee      	bne.n	8001cf4 <captureAndPreprocessFrame+0x18>
    for (int i = 0; i < HEIGHT; i++) {
 8001d16:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8001d1a:	42aa      	cmp	r2, r5
 8001d1c:	d1e8      	bne.n	8001cf0 <captureAndPreprocessFrame+0x14>
            outputBuffer[i][j] = (frameBuffer[i][j] - minVal) / (maxVal - minVal) * 255.0f;
 8001d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d22:	2300      	movs	r3, #0
 8001d24:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8001d58 <captureAndPreprocessFrame+0x7c>
        for (int j = 0; j < WIDTH; j++) {
 8001d28:	18c2      	adds	r2, r0, r3
 8001d2a:	18cd      	adds	r5, r1, r3
 8001d2c:	191e      	adds	r6, r3, r4
            outputBuffer[i][j] = (frameBuffer[i][j] - minVal) / (maxVal - minVal) * 255.0f;
 8001d2e:	ecb2 6a01 	vldmia	r2!, {s12}
 8001d32:	ee36 6a47 	vsub.f32	s12, s12, s14
        for (int j = 0; j < WIDTH; j++) {
 8001d36:	42b2      	cmp	r2, r6
            outputBuffer[i][j] = (frameBuffer[i][j] - minVal) / (maxVal - minVal) * 255.0f;
 8001d38:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001d3c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001d40:	ece5 6a01 	vstmia	r5!, {s13}
        for (int j = 0; j < WIDTH; j++) {
 8001d44:	d1f3      	bne.n	8001d2e <captureAndPreprocessFrame+0x52>
    for (int i = 0; i < HEIGHT; i++) {
 8001d46:	3380      	adds	r3, #128	@ 0x80
 8001d48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001d4c:	d1ec      	bne.n	8001d28 <captureAndPreprocessFrame+0x4c>
}
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	ff7fffff 	.word	0xff7fffff
 8001d54:	7f7fffff 	.word	0x7f7fffff
 8001d58:	437f0000 	.word	0x437f0000

08001d5c <getFrame>:
void getFrame(float framebuf[HEIGHT][WIDTH]) {
 8001d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d60:	4604      	mov	r4, r0
 8001d62:	2602      	movs	r6, #2
        int status = MLX90640_GetFrameData(MLX90640_ADDR, mlx90640Frame);
 8001d64:	4d2a      	ldr	r5, [pc, #168]	@ (8001e10 <getFrame+0xb4>)
        tr = MLX90640_GetTa(mlx90640Frame, &mlx90640) - TA_SHIFT;
 8001d66:	4f2b      	ldr	r7, [pc, #172]	@ (8001e14 <getFrame+0xb8>)
        MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
 8001d68:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8001e20 <getFrame+0xc4>
        int status = MLX90640_GetFrameData(MLX90640_ADDR, mlx90640Frame);
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	2033      	movs	r0, #51	@ 0x33
 8001d70:	f7fe fc3d 	bl	80005ee <MLX90640_GetFrameData>
        if (status < 0) {
 8001d74:	1e01      	subs	r1, r0, #0
 8001d76:	da06      	bge.n	8001d86 <getFrame+0x2a>
            printf("Frame data fetch error: %d\n", status);
 8001d78:	4827      	ldr	r0, [pc, #156]	@ (8001e18 <getFrame+0xbc>)
}
 8001d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            printf("Frame data fetch error: %d\n", status);
 8001d7e:	f007 beb3 	b.w	8009ae8 <iprintf>
 8001d82:	2601      	movs	r6, #1
 8001d84:	e7f2      	b.n	8001d6c <getFrame+0x10>
        tr = MLX90640_GetTa(mlx90640Frame, &mlx90640) - TA_SHIFT;
 8001d86:	4639      	mov	r1, r7
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f7fe fcf9 	bl	8000780 <MLX90640_GetTa>
        MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
 8001d8e:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8001d92:	4642      	mov	r2, r8
 8001d94:	4639      	mov	r1, r7
 8001d96:	4628      	mov	r0, r5
 8001d98:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001d9c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001e1c <getFrame+0xc0>
 8001da0:	f7fe fd3a 	bl	8000818 <MLX90640_CalculateTo>
    for (int i = 0; i < 2; i++) {
 8001da4:	2e01      	cmp	r6, #1
 8001da6:	d1ec      	bne.n	8001d82 <getFrame+0x26>
 8001da8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <getFrame+0xc4>)
 8001daa:	f44f 7340 	mov.w	r3, #768	@ 0x300
    float minTemp = FLT_MAX, maxTemp = -FLT_MAX;
 8001dae:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8001e24 <getFrame+0xc8>
    for (int i = 0; i < 2; i++) {
 8001db2:	4611      	mov	r1, r2
    float minTemp = FLT_MAX, maxTemp = -FLT_MAX;
 8001db4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001e28 <getFrame+0xcc>
        if (mlx90640To[i] < minTemp) minTemp = mlx90640To[i];
 8001db8:	ecf1 6a01 	vldmia	r1!, {s13}
 8001dbc:	eef4 6a47 	vcmp.f32	s13, s14
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        if (mlx90640To[i] > maxTemp) maxTemp = mlx90640To[i];
 8001dc4:	eef4 6a67 	vcmp.f32	s13, s15
        if (mlx90640To[i] < minTemp) minTemp = mlx90640To[i];
 8001dc8:	bf48      	it	mi
 8001dca:	eeb0 7a66 	vmovmi.f32	s14, s13
        if (mlx90640To[i] > maxTemp) maxTemp = mlx90640To[i];
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	fe76 7aa7 	vselgt.f32	s15, s13, s15
    for (int i = 0; i < HEIGHT * WIDTH; i++) {
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	d1ee      	bne.n	8001db8 <getFrame+0x5c>
            framebuf[i][j] = (temp - minTemp) / (maxTemp - minTemp) * 255.0;
 8001dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dde:	4620      	mov	r0, r4
 8001de0:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8001e2c <getFrame+0xd0>
        if (mlx90640To[i] > maxTemp) maxTemp = mlx90640To[i];
 8001de4:	4611      	mov	r1, r2
 8001de6:	f100 0480 	add.w	r4, r0, #128	@ 0x80
            float temp = mlx90640To[i * WIDTH + j];
 8001dea:	ecb1 6a01 	vldmia	r1!, {s12}
            framebuf[i][j] = (temp - minTemp) / (maxTemp - minTemp) * 255.0;
 8001dee:	ee36 6a47 	vsub.f32	s12, s12, s14
 8001df2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001df6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001dfa:	ece0 6a01 	vstmia	r0!, {s13}
        for (int j = 0; j < WIDTH; j++) {
 8001dfe:	42a0      	cmp	r0, r4
 8001e00:	d1f3      	bne.n	8001dea <getFrame+0x8e>
    for (int i = 0; i < HEIGHT; i++) {
 8001e02:	3320      	adds	r3, #32
 8001e04:	3280      	adds	r2, #128	@ 0x80
 8001e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e0a:	d1eb      	bne.n	8001de4 <getFrame+0x88>
}
 8001e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e10:	2000b15c 	.word	0x2000b15c
 8001e14:	20007458 	.word	0x20007458
 8001e18:	0800c0d8 	.word	0x0800c0d8
 8001e1c:	3f733333 	.word	0x3f733333
 8001e20:	2000a55c 	.word	0x2000a55c
 8001e24:	ff7fffff 	.word	0xff7fffff
 8001e28:	7f7fffff 	.word	0x7f7fffff
 8001e2c:	437f0000 	.word	0x437f0000

08001e30 <main>:
{
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	f6ad 4d04 	subw	sp, sp, #3076	@ 0xc04
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e3a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e3e:	4a52      	ldr	r2, [pc, #328]	@ (8001f88 <main+0x158>)
 8001e40:	2100      	movs	r1, #0
 8001e42:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e4a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e4e:	6953      	ldr	r3, [r2, #20]
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e54:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001e5e:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e62:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001e66:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e6a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e6e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e72:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001e76:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e78:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e7c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e7e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001e82:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e84:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8001e88:	d2f9      	bcs.n	8001e7e <main+0x4e>
    } while(sets-- != 0U);
 8001e8a:	3b20      	subs	r3, #32
 8001e8c:	f113 0f20 	cmn.w	r3, #32
 8001e90:	d1f2      	bne.n	8001e78 <main+0x48>
 8001e92:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001e96:	6953      	ldr	r3, [r2, #20]
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6153      	str	r3, [r2, #20]
 8001e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ea2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001ea6:	f000 f991 	bl	80021cc <HAL_Init>
  status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640);
 8001eaa:	4c38      	ldr	r4, [pc, #224]	@ (8001f8c <main+0x15c>)
  SystemClock_Config();
 8001eac:	f7ff fe5a 	bl	8001b64 <SystemClock_Config>
  MX_GPIO_Init();
 8001eb0:	f7ff fd74 	bl	800199c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001eb4:	f000 f8da 	bl	800206c <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001eb8:	f7ff fd44 	bl	8001944 <MX_CRC_Init>
  MX_I2C1_Init();
 8001ebc:	f7ff fdaa 	bl	8001a14 <MX_I2C1_Init>
  AI_Init();
 8001ec0:	f7ff fea4 	bl	8001c0c <AI_Init>
  MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate);
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	2033      	movs	r0, #51	@ 0x33
 8001ec8:	f7fe fbe1 	bl	800068e <MLX90640_SetRefreshRate>
  MLX90640_SetChessMode(MLX90640_ADDR);
 8001ecc:	2033      	movs	r0, #51	@ 0x33
 8001ece:	f7fe fbf9 	bl	80006c4 <MLX90640_SetChessMode>
  status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640);
 8001ed2:	492f      	ldr	r1, [pc, #188]	@ (8001f90 <main+0x160>)
 8001ed4:	2033      	movs	r0, #51	@ 0x33
 8001ed6:	f7fe fb83 	bl	80005e0 <MLX90640_DumpEE>
 8001eda:	4601      	mov	r1, r0
 8001edc:	6020      	str	r0, [r4, #0]
  if (status != 0) printf("\r\nload system parameters error with code:%d\r\n",status);
 8001ede:	b110      	cbz	r0, 8001ee6 <main+0xb6>
 8001ee0:	482c      	ldr	r0, [pc, #176]	@ (8001f94 <main+0x164>)
 8001ee2:	f007 fe01 	bl	8009ae8 <iprintf>
  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 8001ee6:	492c      	ldr	r1, [pc, #176]	@ (8001f98 <main+0x168>)
 8001ee8:	4829      	ldr	r0, [pc, #164]	@ (8001f90 <main+0x160>)
 8001eea:	f7ff fca2 	bl	8001832 <MLX90640_ExtractParameters>
 8001eee:	4601      	mov	r1, r0
 8001ef0:	6020      	str	r0, [r4, #0]
  if (status != 0) printf("\r\nParameter extraction failed with error code:%d\r\n",status);
 8001ef2:	b110      	cbz	r0, 8001efa <main+0xca>
 8001ef4:	4829      	ldr	r0, [pc, #164]	@ (8001f9c <main+0x16c>)
 8001ef6:	f007 fdf7 	bl	8009ae8 <iprintf>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2101      	movs	r1, #1
 8001efe:	4828      	ldr	r0, [pc, #160]	@ (8001fa0 <main+0x170>)
 8001f00:	f000 fb1e 	bl	8002540 <HAL_GPIO_WritePin>
	  getFrame(frameBuffer);
 8001f04:	4d27      	ldr	r5, [pc, #156]	@ (8001fa4 <main+0x174>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	4825      	ldr	r0, [pc, #148]	@ (8001fa0 <main+0x170>)
	  captureAndPreprocessFrame(frameBuffer, preprocessedFrame);
 8001f0c:	4e26      	ldr	r6, [pc, #152]	@ (8001fa8 <main+0x178>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f0e:	f000 fb17 	bl	8002540 <HAL_GPIO_WritePin>
	  memcpy(data_ins[0], transformed_input, sizeof(float) * 1 * 24 * 32 * 1);
 8001f12:	4f26      	ldr	r7, [pc, #152]	@ (8001fac <main+0x17c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f1a:	4821      	ldr	r0, [pc, #132]	@ (8001fa0 <main+0x170>)
 8001f1c:	f000 fb10 	bl	8002540 <HAL_GPIO_WritePin>
	  getFrame(frameBuffer);
 8001f20:	4628      	mov	r0, r5
	  if (ai_model_run(model, ai_input, ai_output) != 1) {
 8001f22:	4c23      	ldr	r4, [pc, #140]	@ (8001fb0 <main+0x180>)
	  getFrame(frameBuffer);
 8001f24:	f7ff ff1a 	bl	8001d5c <getFrame>
	  captureAndPreprocessFrame(frameBuffer, preprocessedFrame);
 8001f28:	4631      	mov	r1, r6
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f7ff fed6 	bl	8001cdc <captureAndPreprocessFrame>
	  transform_to_4d(preprocessedFrame, transformed_input);
 8001f30:	4669      	mov	r1, sp
 8001f32:	4630      	mov	r0, r6
 8001f34:	f7ff feba 	bl	8001cac <transform_to_4d>
	  memcpy(data_ins[0], transformed_input, sizeof(float) * 1 * 24 * 32 * 1);
 8001f38:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	f007 fe8c 	bl	8009c5a <memcpy>
	  if (ai_model_run(model, ai_input, ai_output) != 1) {
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <main+0x184>)
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <main+0x188>)
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	f002 fd13 	bl	8004976 <ai_model_run>
 8001f50:	2801      	cmp	r0, #1
 8001f52:	d009      	beq.n	8001f68 <main+0x138>
	        ai_log_err(ai_model_get_error(model), "ai_model_run");
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	f001 fe34 	bl	8003bc2 <ai_model_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001f5a:	4918      	ldr	r1, [pc, #96]	@ (8001fbc <main+0x18c>)
 8001f5c:	0a03      	lsrs	r3, r0, #8
 8001f5e:	b2c2      	uxtb	r2, r0
 8001f60:	4817      	ldr	r0, [pc, #92]	@ (8001fc0 <main+0x190>)
 8001f62:	f007 fdc1 	bl	8009ae8 <iprintf>
  do {} while (1);
 8001f66:	e7fe      	b.n	8001f66 <main+0x136>
	  output_value = (float*)data_outs[0];
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <main+0x194>)
	  int max_index = argmax(output_value, output_size);
 8001f6a:	2105      	movs	r1, #5
	  output_value = (float*)data_outs[0];
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <main+0x198>)
 8001f70:	6018      	str	r0, [r3, #0]
	  int max_index = argmax(output_value, output_size);
 8001f72:	f7ff fe85 	bl	8001c80 <argmax>
 8001f76:	4604      	mov	r4, r0
	  printf("Max index: %d\n", max_index);
 8001f78:	4601      	mov	r1, r0
 8001f7a:	4814      	ldr	r0, [pc, #80]	@ (8001fcc <main+0x19c>)
 8001f7c:	f007 fdb4 	bl	8009ae8 <iprintf>
	  displayNumber(max_index);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff fdb7 	bl	8001af4 <displayNumber>
  {
 8001f86:	e7cb      	b.n	8001f20 <main+0xf0>
 8001f88:	e000ed00 	.word	0xe000ed00
 8001f8c:	200086d4 	.word	0x200086d4
 8001f90:	20009edc 	.word	0x20009edc
 8001f94:	0800c0f4 	.word	0x0800c0f4
 8001f98:	20007458 	.word	0x20007458
 8001f9c:	0800c122 	.word	0x0800c122
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	200092d8 	.word	0x200092d8
 8001fa8:	200086d8 	.word	0x200086d8
 8001fac:	20017804 	.word	0x20017804
 8001fb0:	2000b7e8 	.word	0x2000b7e8
 8001fb4:	2000b7e0 	.word	0x2000b7e0
 8001fb8:	2000b7e4 	.word	0x2000b7e4
 8001fbc:	0800c155 	.word	0x0800c155
 8001fc0:	0800c0a6 	.word	0x0800c0a6
 8001fc4:	20017800 	.word	0x20017800
 8001fc8:	20009ed8 	.word	0x20009ed8
 8001fcc:	0800c162 	.word	0x0800c162

08001fd0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <Error_Handler+0x2>

08001fd4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <HAL_MspInit+0x2c>)
{
 8001fd6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fda:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fe2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001fe6:	9200      	str	r2, [sp, #0]
 8001fe8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffc:	b002      	add	sp, #8
 8001ffe:	4770      	bx	lr
 8002000:	40023800 	.word	0x40023800

08002004 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002004:	e7fe      	b.n	8002004 <NMI_Handler>

08002006 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <HardFault_Handler>

08002008 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler>

0800200a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <BusFault_Handler>

0800200c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler>

0800200e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200e:	4770      	bx	lr

08002010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002010:	4770      	bx	lr

08002012 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002012:	4770      	bx	lr

08002014 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002014:	f000 b8e6 	b.w	80021e4 <HAL_IncTick>

08002018 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <_sbrk+0x30>)
{
 800201a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800201c:	6811      	ldr	r1, [r2, #0]
{
 800201e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002020:	b909      	cbnz	r1, 8002026 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002022:	490a      	ldr	r1, [pc, #40]	@ (800204c <_sbrk+0x34>)
 8002024:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	6810      	ldr	r0, [r2, #0]
 8002028:	4909      	ldr	r1, [pc, #36]	@ (8002050 <_sbrk+0x38>)
 800202a:	4c0a      	ldr	r4, [pc, #40]	@ (8002054 <_sbrk+0x3c>)
 800202c:	4403      	add	r3, r0
 800202e:	1b09      	subs	r1, r1, r4
 8002030:	428b      	cmp	r3, r1
 8002032:	d906      	bls.n	8002042 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002034:	f007 fde4 	bl	8009c00 <__errno>
 8002038:	230c      	movs	r3, #12
 800203a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800203c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002040:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002042:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002044:	e7fc      	b.n	8002040 <_sbrk+0x28>
 8002046:	bf00      	nop
 8002048:	20017808 	.word	0x20017808
 800204c:	20017ef8 	.word	0x20017ef8
 8002050:	20080000 	.word	0x20080000
 8002054:	00000800 	.word	0x00000800

08002058 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002058:	4a03      	ldr	r2, [pc, #12]	@ (8002068 <SystemInit+0x10>)
 800205a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800205e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002062:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800206c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800206e:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8002070:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002074:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <MX_USART3_UART_Init+0x38>)
 8002076:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800207c:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800207e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002082:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002084:	6243      	str	r3, [r0, #36]	@ 0x24
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800208e:	f001 fd6a 	bl	8003b66 <HAL_UART_Init>
 8002092:	b118      	cbz	r0, 800209c <MX_USART3_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002098:	f7ff bf9a 	b.w	8001fd0 <Error_Handler>
}
 800209c:	bd08      	pop	{r3, pc}
 800209e:	bf00      	nop
 80020a0:	2001780c 	.word	0x2001780c
 80020a4:	40004800 	.word	0x40004800

080020a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a8:	b510      	push	{r4, lr}
 80020aa:	b0ac      	sub	sp, #176	@ 0xb0
 80020ac:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	2214      	movs	r2, #20
 80020b0:	2100      	movs	r1, #0
 80020b2:	a803      	add	r0, sp, #12
 80020b4:	f007 fd88 	bl	8009bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b8:	2290      	movs	r2, #144	@ 0x90
 80020ba:	2100      	movs	r1, #0
 80020bc:	a808      	add	r0, sp, #32
 80020be:	f007 fd83 	bl	8009bc8 <memset>
  if(uartHandle->Instance==USART3)
 80020c2:	6822      	ldr	r2, [r4, #0]
 80020c4:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <HAL_UART_MspInit+0x7c>)
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d12a      	bne.n	8002120 <HAL_UART_MspInit+0x78>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ce:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020d0:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d2:	f001 f893 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 80020d6:	b108      	cbz	r0, 80020dc <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 80020d8:	f7ff ff7a 	bl	8001fd0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_UART_MspInit+0x80>)
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e0:	4812      	ldr	r0, [pc, #72]	@ (800212c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80020e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020e4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80020e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80020ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ec:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80020f0:	9201      	str	r2, [sp, #4]
 80020f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f6:	f042 0208 	orr.w	r2, r2, #8
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002116:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002118:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211c:	f000 f92c 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002120:	b02c      	add	sp, #176	@ 0xb0
 8002122:	bd10      	pop	{r4, pc}
 8002124:	40004800 	.word	0x40004800
 8002128:	40023800 	.word	0x40023800
 800212c:	40020c00 	.word	0x40020c00

08002130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002134:	480d      	ldr	r0, [pc, #52]	@ (800216c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002136:	490e      	ldr	r1, [pc, #56]	@ (8002170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002138:	4a0e      	ldr	r2, [pc, #56]	@ (8002174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800214c:	4c0b      	ldr	r4, [pc, #44]	@ (800217c <LoopFillZerobss+0x26>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800215a:	f7ff ff7d 	bl	8002058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215e:	f007 fd55 	bl	8009c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002162:	f7ff fe65 	bl	8001e30 <main>
  bx  lr    
 8002166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002168:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	200073b8 	.word	0x200073b8
  ldr r2, =_sidata
 8002174:	08058040 	.word	0x08058040
  ldr r2, =_sbss
 8002178:	200073c0 	.word	0x200073c0
  ldr r4, =_ebss
 800217c:	20017ef4 	.word	0x20017ef4

08002180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC_IRQHandler>
	...

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_InitTick+0x3c>)
{
 8002188:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002190:	fbb3 f3f2 	udiv	r3, r3, r2
 8002194:	4a0b      	ldr	r2, [pc, #44]	@ (80021c4 <HAL_InitTick+0x40>)
 8002196:	6810      	ldr	r0, [r2, #0]
 8002198:	fbb0 f0f3 	udiv	r0, r0, r3
 800219c:	f000 f878 	bl	8002290 <HAL_SYSTICK_Config>
 80021a0:	4604      	mov	r4, r0
 80021a2:	b958      	cbnz	r0, 80021bc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a4:	2d0f      	cmp	r5, #15
 80021a6:	d809      	bhi.n	80021bc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	4602      	mov	r2, r0
 80021aa:	4629      	mov	r1, r5
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021b0:	f000 f83c 	bl	800222c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <HAL_InitTick+0x44>)
 80021b6:	4620      	mov	r0, r4
 80021b8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80021ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021bc:	2001      	movs	r0, #1
 80021be:	e7fc      	b.n	80021ba <HAL_InitTick+0x36>
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000004 	.word	0x20000004
 80021c8:	2000000c 	.word	0x2000000c

080021cc <HAL_Init>:
{
 80021cc:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ce:	2003      	movs	r0, #3
 80021d0:	f000 f81a 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d4:	200f      	movs	r0, #15
 80021d6:	f7ff ffd5 	bl	8002184 <HAL_InitTick>
  HAL_MspInit();
 80021da:	f7ff fefb 	bl	8001fd4 <HAL_MspInit>
}
 80021de:	2000      	movs	r0, #0
 80021e0:	bd08      	pop	{r3, pc}
	...

080021e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021e4:	4a03      	ldr	r2, [pc, #12]	@ (80021f4 <HAL_IncTick+0x10>)
 80021e6:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <HAL_IncTick+0x14>)
 80021e8:	6811      	ldr	r1, [r2, #0]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	440b      	add	r3, r1
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20017894 	.word	0x20017894
 80021f8:	20000008 	.word	0x20000008

080021fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021fc:	4b01      	ldr	r3, [pc, #4]	@ (8002204 <HAL_GetTick+0x8>)
 80021fe:	6818      	ldr	r0, [r3, #0]
}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20017894 	.word	0x20017894

08002208 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4907      	ldr	r1, [pc, #28]	@ (8002228 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002216:	0412      	lsls	r2, r2, #16
 8002218:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002224:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b530      	push	{r4, r5, lr}
 8002230:	68dc      	ldr	r4, [r3, #12]
 8002232:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002236:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	2b04      	cmp	r3, #4
 800223e:	bf28      	it	cs
 8002240:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002248:	bf8c      	ite	hi
 800224a:	3c03      	subhi	r4, #3
 800224c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8002252:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	fa03 f304 	lsl.w	r3, r3, r4
 8002264:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800226c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800226e:	db06      	blt.n	800227e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002270:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002274:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002278:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800227c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	f000 000f 	and.w	r0, r0, #15
 8002282:	4a02      	ldr	r2, [pc, #8]	@ (800228c <HAL_NVIC_SetPriority+0x60>)
 8002284:	5413      	strb	r3, [r2, r0]
 8002286:	e7f9      	b.n	800227c <HAL_NVIC_SetPriority+0x50>
 8002288:	e000ed00 	.word	0xe000ed00
 800228c:	e000ed14 	.word	0xe000ed14

08002290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	3801      	subs	r0, #1
 8002292:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002296:	d20b      	bcs.n	80022b0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002298:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <HAL_SYSTICK_Config+0x24>)
 800229e:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a0:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a2:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022aa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80022b0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022b8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022ba:	4604      	mov	r4, r0
 80022bc:	b908      	cbnz	r0, 80022c2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80022be:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80022c0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022c2:	7f43      	ldrb	r3, [r0, #29]
 80022c4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022c8:	b913      	cbnz	r3, 80022d0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80022ca:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80022cc:	f7ff fb50 	bl	8001970 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80022d0:	2302      	movs	r3, #2
 80022d2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80022d4:	7923      	ldrb	r3, [r4, #4]
 80022d6:	b9e3      	cbnz	r3, 8002312 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	4a13      	ldr	r2, [pc, #76]	@ (8002328 <HAL_CRC_Init+0x70>)
 80022dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	f022 0218 	bic.w	r2, r2, #24
 80022e4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022e6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022e8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022ea:	b9d2      	cbnz	r2, 8002322 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80022f0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80022f2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	6961      	ldr	r1, [r4, #20]
 80022f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022fc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022fe:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002300:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800230c:	2301      	movs	r3, #1
 800230e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8002310:	e7d6      	b.n	80022c0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002312:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002316:	4620      	mov	r0, r4
 8002318:	f000 f808 	bl	800232c <HAL_CRCEx_Polynomial_Set>
 800231c:	2800      	cmp	r0, #0
 800231e:	d0e2      	beq.n	80022e6 <HAL_CRC_Init+0x2e>
 8002320:	e7cd      	b.n	80022be <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002322:	6922      	ldr	r2, [r4, #16]
 8002324:	e7e4      	b.n	80022f0 <HAL_CRC_Init+0x38>
 8002326:	bf00      	nop
 8002328:	04c11db7 	.word	0x04c11db7

0800232c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800232c:	231f      	movs	r3, #31
{
 800232e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002330:	3b01      	subs	r3, #1
 8002332:	d31d      	bcc.n	8002370 <HAL_CRCEx_Polynomial_Set+0x44>
 8002334:	fa21 f403 	lsr.w	r4, r1, r3
 8002338:	07e4      	lsls	r4, r4, #31
 800233a:	d5f9      	bpl.n	8002330 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800233c:	2a10      	cmp	r2, #16
 800233e:	d013      	beq.n	8002368 <HAL_CRCEx_Polynomial_Set+0x3c>
 8002340:	2a10      	cmp	r2, #16
 8002342:	d804      	bhi.n	800234e <HAL_CRCEx_Polynomial_Set+0x22>
 8002344:	b13a      	cbz	r2, 8002356 <HAL_CRCEx_Polynomial_Set+0x2a>
 8002346:	2a08      	cmp	r2, #8
 8002348:	d010      	beq.n	800236c <HAL_CRCEx_Polynomial_Set+0x40>
 800234a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800234c:	e00b      	b.n	8002366 <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 800234e:	2a18      	cmp	r2, #24
 8002350:	d1fb      	bne.n	800234a <HAL_CRCEx_Polynomial_Set+0x1e>
      if (msb >= HAL_CRC_LENGTH_7B)
 8002352:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8002354:	d8f9      	bhi.n	800234a <HAL_CRCEx_Polynomial_Set+0x1e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002356:	6800      	ldr	r0, [r0, #0]
 8002358:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800235a:	6883      	ldr	r3, [r0, #8]
 800235c:	f023 0318 	bic.w	r3, r3, #24
 8002360:	4313      	orrs	r3, r2
 8002362:	6083      	str	r3, [r0, #8]
 8002364:	2000      	movs	r0, #0
}
 8002366:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8002368:	2b07      	cmp	r3, #7
 800236a:	e7f3      	b.n	8002354 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 800236c:	2b0f      	cmp	r3, #15
 800236e:	e7f1      	b.n	8002354 <HAL_CRCEx_Polynomial_Set+0x28>
  switch (PolyLength)
 8002370:	2a10      	cmp	r2, #16
 8002372:	d1e5      	bne.n	8002340 <HAL_CRCEx_Polynomial_Set+0x14>
 8002374:	e7e9      	b.n	800234a <HAL_CRCEx_Polynomial_Set+0x1e>
	...

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800237c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 800253c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002382:	4a6c      	ldr	r2, [pc, #432]	@ (8002534 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002384:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002388:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800238e:	43ac      	bics	r4, r5
 8002390:	f040 80b7 	bne.w	8002502 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002394:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002396:	2703      	movs	r7, #3
 8002398:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023a0:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023a6:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023aa:	2f01      	cmp	r7, #1
 80023ac:	d834      	bhi.n	8002418 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80023ae:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023b0:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80023b4:	68cf      	ldr	r7, [r1, #12]
 80023b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80023ba:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 80023be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80023c0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c2:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80023ca:	409f      	lsls	r7, r3
 80023cc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80023d0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80023d2:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023d6:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023da:	688f      	ldr	r7, [r1, #8]
 80023dc:	fa07 f70e 	lsl.w	r7, r7, lr
 80023e0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 80023e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e6:	d119      	bne.n	800241c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 80023e8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023ec:	f003 0a07 	and.w	sl, r3, #7
 80023f0:	f04f 0b0f 	mov.w	fp, #15
 80023f4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80023f8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80023fc:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002400:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002404:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002408:	690f      	ldr	r7, [r1, #16]
 800240a:	fa07 f70a 	lsl.w	r7, r7, sl
 800240e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8002412:	f8c8 7020 	str.w	r7, [r8, #32]
 8002416:	e001      	b.n	800241c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	2c03      	cmp	r4, #3
 800241a:	d1da      	bne.n	80023d2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800241c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800241e:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002422:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002426:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800242a:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800242e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002430:	d067      	beq.n	8002502 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8002436:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800243a:	f003 0c03 	and.w	ip, r3, #3
 800243e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002446:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800244a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8002452:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8002456:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800245a:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8002462:	9401      	str	r4, [sp, #4]
 8002464:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002466:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002468:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800246c:	4c32      	ldr	r4, [pc, #200]	@ (8002538 <HAL_GPIO_Init+0x1c0>)
 800246e:	42a0      	cmp	r0, r4
 8002470:	d04e      	beq.n	8002510 <HAL_GPIO_Init+0x198>
 8002472:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002476:	42a0      	cmp	r0, r4
 8002478:	d04c      	beq.n	8002514 <HAL_GPIO_Init+0x19c>
 800247a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800247e:	42a0      	cmp	r0, r4
 8002480:	d04a      	beq.n	8002518 <HAL_GPIO_Init+0x1a0>
 8002482:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002486:	42a0      	cmp	r0, r4
 8002488:	d048      	beq.n	800251c <HAL_GPIO_Init+0x1a4>
 800248a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800248e:	42a0      	cmp	r0, r4
 8002490:	d046      	beq.n	8002520 <HAL_GPIO_Init+0x1a8>
 8002492:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002496:	42a0      	cmp	r0, r4
 8002498:	d044      	beq.n	8002524 <HAL_GPIO_Init+0x1ac>
 800249a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800249e:	42a0      	cmp	r0, r4
 80024a0:	d042      	beq.n	8002528 <HAL_GPIO_Init+0x1b0>
 80024a2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80024a6:	42a0      	cmp	r0, r4
 80024a8:	d040      	beq.n	800252c <HAL_GPIO_Init+0x1b4>
 80024aa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80024ae:	42a0      	cmp	r0, r4
 80024b0:	d03e      	beq.n	8002530 <HAL_GPIO_Init+0x1b8>
 80024b2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80024b6:	42a0      	cmp	r0, r4
 80024b8:	bf14      	ite	ne
 80024ba:	240a      	movne	r4, #10
 80024bc:	2409      	moveq	r4, #9
 80024be:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c2:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024c6:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80024ca:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 80024d0:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	bf0c      	ite	eq
 80024d4:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80024d6:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d8:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 80024dc:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80024de:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	bf0c      	ite	eq
 80024e2:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80024e4:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e6:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 80024ea:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80024ec:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	bf0c      	ite	eq
 80024f0:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80024f2:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80024f6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80024f8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	bf54      	ite	pl
 80024fc:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80024fe:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8002500:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002502:	3301      	adds	r3, #1
 8002504:	2b10      	cmp	r3, #16
 8002506:	f47f af3d 	bne.w	8002384 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800250a:	b003      	add	sp, #12
 800250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002510:	2400      	movs	r4, #0
 8002512:	e7d4      	b.n	80024be <HAL_GPIO_Init+0x146>
 8002514:	2401      	movs	r4, #1
 8002516:	e7d2      	b.n	80024be <HAL_GPIO_Init+0x146>
 8002518:	2402      	movs	r4, #2
 800251a:	e7d0      	b.n	80024be <HAL_GPIO_Init+0x146>
 800251c:	2403      	movs	r4, #3
 800251e:	e7ce      	b.n	80024be <HAL_GPIO_Init+0x146>
 8002520:	2404      	movs	r4, #4
 8002522:	e7cc      	b.n	80024be <HAL_GPIO_Init+0x146>
 8002524:	2405      	movs	r4, #5
 8002526:	e7ca      	b.n	80024be <HAL_GPIO_Init+0x146>
 8002528:	2406      	movs	r4, #6
 800252a:	e7c8      	b.n	80024be <HAL_GPIO_Init+0x146>
 800252c:	2407      	movs	r4, #7
 800252e:	e7c6      	b.n	80024be <HAL_GPIO_Init+0x146>
 8002530:	2408      	movs	r4, #8
 8002532:	e7c4      	b.n	80024be <HAL_GPIO_Init+0x146>
 8002534:	40013c00 	.word	0x40013c00
 8002538:	40020000 	.word	0x40020000
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	b10a      	cbz	r2, 8002546 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002542:	6181      	str	r1, [r0, #24]
  }
}
 8002544:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002546:	0409      	lsls	r1, r1, #16
 8002548:	e7fb      	b.n	8002542 <HAL_GPIO_WritePin+0x2>

0800254a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	0791      	lsls	r1, r2, #30
 8002550:	d501      	bpl.n	8002556 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002552:	2200      	movs	r2, #0
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	07d2      	lsls	r2, r2, #31
 800255a:	d403      	bmi.n	8002564 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	619a      	str	r2, [r3, #24]
  }
}
 8002564:	4770      	bx	lr
	...

08002568 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002568:	b530      	push	{r4, r5, lr}
 800256a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800256c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002570:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002572:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8002574:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800257c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800257e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002582:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002586:	ea20 0002 	bic.w	r0, r0, r2
 800258a:	4303      	orrs	r3, r0
 800258c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800258e:	bd30      	pop	{r4, r5, pc}
 8002590:	03ff63ff 	.word	0x03ff63ff

08002594 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8002594:	6803      	ldr	r3, [r0, #0]
{
 8002596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800259a:	699c      	ldr	r4, [r3, #24]
{
 800259c:	4605      	mov	r5, r0
 800259e:	460f      	mov	r7, r1
 80025a0:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025a2:	f014 0410 	ands.w	r4, r4, #16
 80025a6:	d06f      	beq.n	8002688 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80025a8:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025aa:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ae:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	0690      	lsls	r0, r2, #26
 80025b6:	d461      	bmi.n	800267c <I2C_IsErrorOccurred+0xe8>
 80025b8:	f1b8 0f00 	cmp.w	r8, #0
 80025bc:	d035      	beq.n	800262a <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80025be:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80025c2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80025c4:	682e      	ldr	r6, [r5, #0]
 80025c6:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025c8:	05d9      	lsls	r1, r3, #23
 80025ca:	d505      	bpl.n	80025d8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80025d0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025d6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025d8:	055a      	lsls	r2, r3, #21
 80025da:	d505      	bpl.n	80025e8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80025e0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025e6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025e8:	059b      	lsls	r3, r3, #22
 80025ea:	d54f      	bpl.n	800268c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80025f0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025f4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80025f6:	4628      	mov	r0, r5
 80025f8:	f7ff ffa7 	bl	800254a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80025fc:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80025fe:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002600:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002604:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8002608:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8002612:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002614:	4323      	orrs	r3, r4
 8002616:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002618:	2320      	movs	r3, #32
 800261a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800261e:	2300      	movs	r3, #0
 8002620:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002624:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8002628:	e032      	b.n	8002690 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800262a:	1c7a      	adds	r2, r7, #1
 800262c:	d0c1      	beq.n	80025b2 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7ff fde5 	bl	80021fc <HAL_GetTick>
 8002632:	1b80      	subs	r0, r0, r6
 8002634:	42b8      	cmp	r0, r7
 8002636:	d801      	bhi.n	800263c <I2C_IsErrorOccurred+0xa8>
 8002638:	2f00      	cmp	r7, #0
 800263a:	d1b9      	bne.n	80025b0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8002640:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002644:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8002646:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002648:	0400      	lsls	r0, r0, #16
 800264a:	d50a      	bpl.n	8002662 <I2C_IsErrorOccurred+0xce>
 800264c:	0449      	lsls	r1, r1, #17
 800264e:	d408      	bmi.n	8002662 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8002650:	2a20      	cmp	r2, #32
 8002652:	d006      	beq.n	8002662 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800265a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800265c:	f7ff fdce 	bl	80021fc <HAL_GetTick>
 8002660:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002662:	682b      	ldr	r3, [r5, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	069b      	lsls	r3, r3, #26
 8002668:	d4a2      	bmi.n	80025b0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800266a:	f7ff fdc7 	bl	80021fc <HAL_GetTick>
 800266e:	1b80      	subs	r0, r0, r6
 8002670:	2819      	cmp	r0, #25
 8002672:	d9f6      	bls.n	8002662 <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002674:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8002676:	f04f 0801 	mov.w	r8, #1
 800267a:	e799      	b.n	80025b0 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800267c:	f1b8 0f00 	cmp.w	r8, #0
 8002680:	d19d      	bne.n	80025be <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002682:	2220      	movs	r2, #32
 8002684:	61da      	str	r2, [r3, #28]
 8002686:	e79a      	b.n	80025be <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	4620      	mov	r0, r4
 800268a:	e79b      	b.n	80025c4 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800268c:	2800      	cmp	r0, #0
 800268e:	d1b2      	bne.n	80025f6 <I2C_IsErrorOccurred+0x62>
}
 8002690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002694 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4604      	mov	r4, r0
 8002698:	460d      	mov	r5, r1
 800269a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	079b      	lsls	r3, r3, #30
 80026a2:	d501      	bpl.n	80026a8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80026a4:	2000      	movs	r0, #0
 80026a6:	e01b      	b.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a8:	4632      	mov	r2, r6
 80026aa:	4629      	mov	r1, r5
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ff71 	bl	8002594 <I2C_IsErrorOccurred>
 80026b2:	b9a0      	cbnz	r0, 80026de <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80026b4:	1c6a      	adds	r2, r5, #1
 80026b6:	d0f1      	beq.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b8:	f7ff fda0 	bl	80021fc <HAL_GetTick>
 80026bc:	1b80      	subs	r0, r0, r6
 80026be:	42a8      	cmp	r0, r5
 80026c0:	d801      	bhi.n	80026c6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80026c2:	2d00      	cmp	r5, #0
 80026c4:	d1ea      	bne.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	2320      	movs	r3, #32
 80026d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80026da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80026de:	2001      	movs	r0, #1
}
 80026e0:	bd70      	pop	{r4, r5, r6, pc}

080026e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80026e2:	b570      	push	{r4, r5, r6, lr}
 80026e4:	4604      	mov	r4, r0
 80026e6:	460d      	mov	r5, r1
 80026e8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	d501      	bpl.n	80026f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80026f2:	2000      	movs	r0, #0
 80026f4:	e019      	b.n	800272a <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f6:	4632      	mov	r2, r6
 80026f8:	4629      	mov	r1, r5
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff ff4a 	bl	8002594 <I2C_IsErrorOccurred>
 8002700:	b990      	cbnz	r0, 8002728 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7ff fd7b 	bl	80021fc <HAL_GetTick>
 8002706:	1b80      	subs	r0, r0, r6
 8002708:	42a8      	cmp	r0, r5
 800270a:	d801      	bhi.n	8002710 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800270c:	2d00      	cmp	r5, #0
 800270e:	d1ec      	bne.n	80026ea <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002710:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002712:	f043 0320 	orr.w	r3, r3, #32
 8002716:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002718:	2320      	movs	r3, #32
 800271a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	2300      	movs	r3, #0
 8002720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002724:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
}
 800272a:	bd70      	pop	{r4, r5, r6, pc}

0800272c <I2C_WaitOnFlagUntilTimeout>:
{
 800272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002730:	9f06      	ldr	r7, [sp, #24]
 8002732:	4604      	mov	r4, r0
 8002734:	4688      	mov	r8, r1
 8002736:	4616      	mov	r6, r2
 8002738:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273a:	6822      	ldr	r2, [r4, #0]
 800273c:	6993      	ldr	r3, [r2, #24]
 800273e:	ea38 0303 	bics.w	r3, r8, r3
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	42b3      	cmp	r3, r6
 800274a:	d001      	beq.n	8002750 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800274c:	2000      	movs	r0, #0
 800274e:	e015      	b.n	800277c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002750:	1c6b      	adds	r3, r5, #1
 8002752:	d0f3      	beq.n	800273c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002754:	f7ff fd52 	bl	80021fc <HAL_GetTick>
 8002758:	1bc0      	subs	r0, r0, r7
 800275a:	42a8      	cmp	r0, r5
 800275c:	d801      	bhi.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x36>
 800275e:	2d00      	cmp	r5, #0
 8002760:	d1eb      	bne.n	800273a <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8002764:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800276c:	2320      	movs	r3, #32
 800276e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	2300      	movs	r3, #0
 8002774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8002778:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800277c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002780 <HAL_I2C_Init>:
{
 8002780:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002782:	4604      	mov	r4, r0
 8002784:	2800      	cmp	r0, #0
 8002786:	d04a      	beq.n	800281e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002788:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800278c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002790:	b91b      	cbnz	r3, 800279a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002796:	f7ff f969 	bl	8001a6c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800279a:	2324      	movs	r3, #36	@ 0x24
 800279c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027aa:	6862      	ldr	r2, [r4, #4]
 80027ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027b0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027b8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ba:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027be:	2901      	cmp	r1, #1
 80027c0:	d124      	bne.n	800280c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c8:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ca:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027cc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80027d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027d4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027dc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027de:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80027e2:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027e4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027ea:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027ec:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fe:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002800:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002804:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800280a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800280c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002810:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002812:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002814:	d1d8      	bne.n	80027c8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	e7d4      	b.n	80027c8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800281e:	2001      	movs	r0, #1
 8002820:	e7f3      	b.n	800280a <HAL_I2C_Init+0x8a>
	...

08002824 <HAL_I2C_Mem_Write>:
{
 8002824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002828:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800282e:	4604      	mov	r4, r0
 8002830:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	2b20      	cmp	r3, #32
{
 8002834:	4616      	mov	r6, r2
 8002836:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800283a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800283e:	f040 80c6 	bne.w	80029ce <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8002842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002844:	b113      	cbz	r3, 800284c <HAL_I2C_Mem_Write+0x28>
 8002846:	f1ba 0f00 	cmp.w	sl, #0
 800284a:	d106      	bne.n	800285a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800284c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002850:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002852:	2001      	movs	r0, #1
}
 8002854:	b003      	add	sp, #12
 8002856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800285a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800285e:	2b01      	cmp	r3, #1
 8002860:	f000 80b5 	beq.w	80029ce <HAL_I2C_Mem_Write+0x1aa>
 8002864:	f04f 0b01 	mov.w	fp, #1
 8002868:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800286c:	f7ff fcc6 	bl	80021fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002870:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002872:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002874:	9000      	str	r0, [sp, #0]
 8002876:	465a      	mov	r2, fp
 8002878:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800287c:	4620      	mov	r0, r4
 800287e:	f7ff ff55 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 8002882:	2800      	cmp	r0, #0
 8002884:	d1e5      	bne.n	8002852 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002886:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8002888:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800288a:	fa5f f289 	uxtb.w	r2, r9
 800288e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002890:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002894:	2340      	movs	r3, #64	@ 0x40
 8002896:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800289a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800289e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80028a0:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028a2:	4b4c      	ldr	r3, [pc, #304]	@ (80029d4 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80028a4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ae:	f7ff fe5b 	bl	8002568 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b2:	462a      	mov	r2, r5
 80028b4:	4641      	mov	r1, r8
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff feec 	bl	8002694 <I2C_WaitOnTXISFlagUntilTimeout>
 80028bc:	bb18      	cbnz	r0, 8002906 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028be:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028c4:	d115      	bne.n	80028f2 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	@ 0x80
 80028cc:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ce:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028d0:	4643      	mov	r3, r8
 80028d2:	9500      	str	r5, [sp, #0]
 80028d4:	f7ff ff2a 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 80028d8:	b9a8      	cbnz	r0, 8002906 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2bff      	cmp	r3, #255	@ 0xff
 80028e0:	d815      	bhi.n	800290e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80028e2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80028e8:	b292      	uxth	r2, r2
 80028ea:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	9000      	str	r0, [sp, #0]
 80028f0:	e012      	b.n	8002918 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028f2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f4:	4641      	mov	r1, r8
 80028f6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fa:	462a      	mov	r2, r5
 80028fc:	f7ff feca 	bl	8002694 <I2C_WaitOnTXISFlagUntilTimeout>
 8002900:	b908      	cbnz	r0, 8002906 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	e7df      	b.n	80028c6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800290c:	e7a1      	b.n	8002852 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800290e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002914:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002916:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002918:	4639      	mov	r1, r7
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff fe24 	bl	8002568 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	462a      	mov	r2, r5
 8002922:	4641      	mov	r1, r8
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff feb5 	bl	8002694 <I2C_WaitOnTXISFlagUntilTimeout>
 800292a:	2800      	cmp	r0, #0
 800292c:	d191      	bne.n	8002852 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800292e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002936:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002938:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800293a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800293c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800293e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002940:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002942:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002944:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002946:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002948:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800294a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800294c:	b29b      	uxth	r3, r3
 800294e:	b1b3      	cbz	r3, 800297e <HAL_I2C_Mem_Write+0x15a>
 8002950:	b9aa      	cbnz	r2, 800297e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002952:	4643      	mov	r3, r8
 8002954:	2180      	movs	r1, #128	@ 0x80
 8002956:	4620      	mov	r0, r4
 8002958:	9500      	str	r5, [sp, #0]
 800295a:	f7ff fee7 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 800295e:	2800      	cmp	r0, #0
 8002960:	f47f af77 	bne.w	8002852 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002964:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2bff      	cmp	r3, #255	@ 0xff
 800296a:	d928      	bls.n	80029be <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800296e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002974:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002976:	4639      	mov	r1, r7
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fdf5 	bl	8002568 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800297e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1cc      	bne.n	8002920 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002986:	462a      	mov	r2, r5
 8002988:	4641      	mov	r1, r8
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff fea9 	bl	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002990:	2800      	cmp	r0, #0
 8002992:	f47f af5e 	bne.w	8002852 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	2120      	movs	r1, #32
 800299a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80029a2:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80029a6:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80029b4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80029bc:	e74a      	b.n	8002854 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80029be:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80029c4:	b292      	uxth	r2, r2
 80029c6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	9000      	str	r0, [sp, #0]
 80029cc:	e7d3      	b.n	8002976 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80029ce:	2002      	movs	r0, #2
 80029d0:	e740      	b.n	8002854 <HAL_I2C_Mem_Write+0x30>
 80029d2:	bf00      	nop
 80029d4:	80002000 	.word	0x80002000

080029d8 <HAL_I2C_Mem_Read>:
{
 80029d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029de:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80029e2:	4604      	mov	r4, r0
 80029e4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	2b20      	cmp	r3, #32
{
 80029e8:	4616      	mov	r6, r2
 80029ea:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80029ee:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	f040 80c9 	bne.w	8002b88 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80029f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80029f8:	b113      	cbz	r3, 8002a00 <HAL_I2C_Mem_Read+0x28>
 80029fa:	f1ba 0f00 	cmp.w	sl, #0
 80029fe:	d106      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a04:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002a06:	2001      	movs	r0, #1
}
 8002a08:	b003      	add	sp, #12
 8002a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002a0e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f000 80b8 	beq.w	8002b88 <HAL_I2C_Mem_Read+0x1b0>
 8002a18:	f04f 0b01 	mov.w	fp, #1
 8002a1c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8002a20:	f7ff fbec 	bl	80021fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a24:	2319      	movs	r3, #25
 8002a26:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002a28:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a2a:	465a      	mov	r2, fp
 8002a2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff fe7b 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d1e4      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a3c:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8002a3e:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a40:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a42:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a46:	2240      	movs	r2, #64	@ 0x40
 8002a48:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8002a4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a50:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002a52:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a54:	4a4d      	ldr	r2, [pc, #308]	@ (8002b8c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8002a56:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a5a:	9200      	str	r2, [sp, #0]
 8002a5c:	fa5f f289 	uxtb.w	r2, r9
 8002a60:	f7ff fd82 	bl	8002568 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a64:	462a      	mov	r2, r5
 8002a66:	4641      	mov	r1, r8
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff fe13 	bl	8002694 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6e:	bb20      	cbnz	r0, 8002aba <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a70:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a74:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a76:	d116      	bne.n	8002aa6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a78:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2140      	movs	r1, #64	@ 0x40
 8002a7e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a80:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a82:	4643      	mov	r3, r8
 8002a84:	9500      	str	r5, [sp, #0]
 8002a86:	f7ff fe51 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	b9b0      	cbnz	r0, 8002aba <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2bff      	cmp	r3, #255	@ 0xff
 8002a92:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <HAL_I2C_Mem_Read+0x1b8>)
 8002a94:	d815      	bhi.n	8002ac2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8002a96:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aa4:	e012      	b.n	8002acc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aae:	462a      	mov	r2, r5
 8002ab0:	f7ff fdf0 	bl	8002694 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab4:	b908      	cbnz	r0, 8002aba <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	e7de      	b.n	8002a78 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002ac0:	e7a1      	b.n	8002a06 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	22ff      	movs	r2, #255	@ 0xff
 8002ac4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002acc:	4639      	mov	r1, r7
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f7ff fd4a 	bl	8002568 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4620      	mov	r0, r4
 8002adc:	9500      	str	r5, [sp, #0]
 8002ade:	f7ff fe25 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d18f      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002aec:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002aee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002af0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002af2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8002af4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8002af6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002af8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002afa:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002afc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002afe:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b04:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	b1b3      	cbz	r3, 8002b38 <HAL_I2C_Mem_Read+0x160>
 8002b0a:	b9aa      	cbnz	r2, 8002b38 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	2180      	movs	r1, #128	@ 0x80
 8002b10:	4620      	mov	r0, r4
 8002b12:	9500      	str	r5, [sp, #0]
 8002b14:	f7ff fe0a 	bl	800272c <I2C_WaitOnFlagUntilTimeout>
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	f47f af74 	bne.w	8002a06 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b1e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2bff      	cmp	r3, #255	@ 0xff
 8002b24:	d928      	bls.n	8002b78 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b26:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b2e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b30:	4639      	mov	r1, r7
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff fd18 	bl	8002568 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002b38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1c9      	bne.n	8002ad4 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b40:	462a      	mov	r2, r5
 8002b42:	4641      	mov	r1, r8
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff fdcc 	bl	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	f47f af5b 	bne.w	8002a06 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	2120      	movs	r1, #32
 8002b54:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8002b5c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8002b60:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002b6e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b72:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8002b76:	e747      	b.n	8002a08 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8002b78:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8002b7e:	b292      	uxth	r2, r2
 8002b80:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	9000      	str	r0, [sp, #0]
 8002b86:	e7d3      	b.n	8002b30 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8002b88:	2002      	movs	r0, #2
 8002b8a:	e73d      	b.n	8002a08 <HAL_I2C_Mem_Read+0x30>
 8002b8c:	80002000 	.word	0x80002000
 8002b90:	80002400 	.word	0x80002400

08002b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b94:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b96:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8002b9a:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	2a20      	cmp	r2, #32
 8002b9e:	b2d4      	uxtb	r4, r2
 8002ba0:	d11c      	bne.n	8002bdc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba2:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002ba6:	2a01      	cmp	r2, #1
 8002ba8:	d018      	beq.n	8002bdc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002baa:	2224      	movs	r2, #36	@ 0x24
 8002bac:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb0:	6802      	ldr	r2, [r0, #0]
 8002bb2:	6810      	ldr	r0, [r2, #0]
 8002bb4:	f020 0001 	bic.w	r0, r0, #1
 8002bb8:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bba:	6810      	ldr	r0, [r2, #0]
 8002bbc:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002bc0:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bc2:	6810      	ldr	r0, [r2, #0]
 8002bc4:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bc8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002bca:	6811      	ldr	r1, [r2, #0]
 8002bcc:	f041 0101 	orr.w	r1, r1, #1
 8002bd0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002bd6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002bda:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8002bdc:	2002      	movs	r0, #2
 8002bde:	e7fc      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002be0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002be0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8002be6:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	2a20      	cmp	r2, #32
 8002bea:	b2d4      	uxtb	r4, r2
 8002bec:	d11b      	bne.n	8002c26 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bee:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002bf2:	2a01      	cmp	r2, #1
 8002bf4:	d017      	beq.n	8002c26 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf6:	2224      	movs	r2, #36	@ 0x24
 8002bf8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfc:	6802      	ldr	r2, [r0, #0]
 8002bfe:	6810      	ldr	r0, [r2, #0]
 8002c00:	f020 0001 	bic.w	r0, r0, #1
 8002c04:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c06:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c08:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c0c:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8002c12:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002c14:	6811      	ldr	r1, [r2, #0]
 8002c16:	f041 0101 	orr.w	r1, r1, #1
 8002c1a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002c20:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002c24:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8002c26:	2002      	movs	r0, #2
 8002c28:	e7fc      	b.n	8002c24 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08002c2c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002c2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c32:	4c19      	ldr	r4, [pc, #100]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4c:	f7ff fad6 	bl	80021fc <HAL_GetTick>
 8002c50:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c52:	6863      	ldr	r3, [r4, #4]
 8002c54:	03da      	lsls	r2, r3, #15
 8002c56:	d50c      	bpl.n	8002c72 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c58:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c5a:	4d0f      	ldr	r5, [pc, #60]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c60:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002c62:	f7ff facb 	bl	80021fc <HAL_GetTick>
 8002c66:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c68:	686b      	ldr	r3, [r5, #4]
 8002c6a:	039b      	lsls	r3, r3, #14
 8002c6c:	d50a      	bpl.n	8002c84 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002c6e:	2000      	movs	r0, #0
 8002c70:	e006      	b.n	8002c80 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c72:	f7ff fac3 	bl	80021fc <HAL_GetTick>
 8002c76:	1b40      	subs	r0, r0, r5
 8002c78:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002c7c:	d9e9      	bls.n	8002c52 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002c7e:	2003      	movs	r0, #3
}
 8002c80:	b003      	add	sp, #12
 8002c82:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c84:	f7ff faba 	bl	80021fc <HAL_GetTick>
 8002c88:	1b00      	subs	r0, r0, r4
 8002c8a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002c8e:	d9eb      	bls.n	8002c68 <HAL_PWREx_EnableOverDrive+0x3c>
 8002c90:	e7f5      	b.n	8002c7e <HAL_PWREx_EnableOverDrive+0x52>
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	b918      	cbnz	r0, 8002cac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002ca4:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8002ca6:	b002      	add	sp, #8
 8002ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cac:	6803      	ldr	r3, [r0, #0]
 8002cae:	07de      	lsls	r6, r3, #31
 8002cb0:	d410      	bmi.n	8002cd4 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	079d      	lsls	r5, r3, #30
 8002cb6:	d45e      	bmi.n	8002d76 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	0719      	lsls	r1, r3, #28
 8002cbc:	f100 80a3 	bmi.w	8002e06 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	075a      	lsls	r2, r3, #29
 8002cc4:	f100 80c4 	bmi.w	8002e50 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	69a2      	ldr	r2, [r4, #24]
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	f040 812e 	bne.w	8002f2c <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	e7e8      	b.n	8002ca6 <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd4:	4b93      	ldr	r3, [pc, #588]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	f002 020c 	and.w	r2, r2, #12
 8002cdc:	2a04      	cmp	r2, #4
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x54>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	f002 020c 	and.w	r2, r2, #12
 8002ce6:	2a08      	cmp	r2, #8
 8002ce8:	d10a      	bne.n	8002d00 <HAL_RCC_OscConfig+0x64>
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0259      	lsls	r1, r3, #9
 8002cee:	d507      	bpl.n	8002d00 <HAL_RCC_OscConfig+0x64>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	039a      	lsls	r2, r3, #14
 8002cf6:	d5dc      	bpl.n	8002cb2 <HAL_RCC_OscConfig+0x16>
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1d9      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x16>
 8002cfe:	e7d1      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	4d88      	ldr	r5, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d08:	d111      	bne.n	8002d2e <HAL_RCC_OscConfig+0x92>
 8002d0a:	682b      	ldr	r3, [r5, #0]
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d12:	f7ff fa73 	bl	80021fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4e83      	ldr	r6, [pc, #524]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002d18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	6833      	ldr	r3, [r6, #0]
 8002d1c:	039b      	lsls	r3, r3, #14
 8002d1e:	d4c8      	bmi.n	8002cb2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7ff fa6c 	bl	80021fc <HAL_GetTick>
 8002d24:	1b40      	subs	r0, r0, r5
 8002d26:	2864      	cmp	r0, #100	@ 0x64
 8002d28:	d9f7      	bls.n	8002d1a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	e7bb      	b.n	8002ca6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2e:	b99b      	cbnz	r3, 8002d58 <HAL_RCC_OscConfig+0xbc>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d40:	f7ff fa5c 	bl	80021fc <HAL_GetTick>
 8002d44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	682b      	ldr	r3, [r5, #0]
 8002d48:	039f      	lsls	r7, r3, #14
 8002d4a:	d5b2      	bpl.n	8002cb2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7ff fa56 	bl	80021fc <HAL_GetTick>
 8002d50:	1b80      	subs	r0, r0, r6
 8002d52:	2864      	cmp	r0, #100	@ 0x64
 8002d54:	d9f7      	bls.n	8002d46 <HAL_RCC_OscConfig+0xaa>
 8002d56:	e7e8      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	d103      	bne.n	8002d68 <HAL_RCC_OscConfig+0xcc>
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d64:	602b      	str	r3, [r5, #0]
 8002d66:	e7d0      	b.n	8002d0a <HAL_RCC_OscConfig+0x6e>
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6c:	602b      	str	r3, [r5, #0]
 8002d6e:	682b      	ldr	r3, [r5, #0]
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d74:	e7cc      	b.n	8002d10 <HAL_RCC_OscConfig+0x74>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d76:	4b6b      	ldr	r3, [pc, #428]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	f012 0f0c 	tst.w	r2, #12
 8002d7e:	d007      	beq.n	8002d90 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	f002 020c 	and.w	r2, r2, #12
 8002d86:	2a08      	cmp	r2, #8
 8002d88:	d111      	bne.n	8002dae <HAL_RCC_OscConfig+0x112>
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	025d      	lsls	r5, r3, #9
 8002d8e:	d40e      	bmi.n	8002dae <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d90:	4a64      	ldr	r2, [pc, #400]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002d92:	6813      	ldr	r3, [r2, #0]
 8002d94:	0799      	lsls	r1, r3, #30
 8002d96:	d502      	bpl.n	8002d9e <HAL_RCC_OscConfig+0x102>
 8002d98:	68e3      	ldr	r3, [r4, #12]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d182      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	6813      	ldr	r3, [r2, #0]
 8002da0:	6921      	ldr	r1, [r4, #16]
 8002da2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002da6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002daa:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dac:	e784      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1c>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dae:	68e3      	ldr	r3, [r4, #12]
 8002db0:	4d5c      	ldr	r5, [pc, #368]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002db2:	b1bb      	cbz	r3, 8002de4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fa1e 	bl	80021fc <HAL_GetTick>
 8002dc0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	079b      	lsls	r3, r3, #30
 8002dc6:	d507      	bpl.n	8002dd8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	682b      	ldr	r3, [r5, #0]
 8002dca:	6922      	ldr	r2, [r4, #16]
 8002dcc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002dd0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	e76f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7ff fa10 	bl	80021fc <HAL_GetTick>
 8002ddc:	1b80      	subs	r0, r0, r6
 8002dde:	2802      	cmp	r0, #2
 8002de0:	d9ef      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x126>
 8002de2:	e7a2      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dec:	f7ff fa06 	bl	80021fc <HAL_GetTick>
 8002df0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	079f      	lsls	r7, r3, #30
 8002df6:	f57f af5f 	bpl.w	8002cb8 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7ff f9ff 	bl	80021fc <HAL_GetTick>
 8002dfe:	1b80      	subs	r0, r0, r6
 8002e00:	2802      	cmp	r0, #2
 8002e02:	d9f6      	bls.n	8002df2 <HAL_RCC_OscConfig+0x156>
 8002e04:	e791      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e06:	6963      	ldr	r3, [r4, #20]
 8002e08:	4d46      	ldr	r5, [pc, #280]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002e0a:	b183      	cbz	r3, 8002e2e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002e0c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002e14:	f7ff f9f2 	bl	80021fc <HAL_GetTick>
 8002e18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002e1c:	079b      	lsls	r3, r3, #30
 8002e1e:	f53f af4f 	bmi.w	8002cc0 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e22:	f7ff f9eb 	bl	80021fc <HAL_GetTick>
 8002e26:	1b80      	subs	r0, r0, r6
 8002e28:	2802      	cmp	r0, #2
 8002e2a:	d9f6      	bls.n	8002e1a <HAL_RCC_OscConfig+0x17e>
 8002e2c:	e77d      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002e2e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002e36:	f7ff f9e1 	bl	80021fc <HAL_GetTick>
 8002e3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002e3e:	079f      	lsls	r7, r3, #30
 8002e40:	f57f af3e 	bpl.w	8002cc0 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7ff f9da 	bl	80021fc <HAL_GetTick>
 8002e48:	1b80      	subs	r0, r0, r6
 8002e4a:	2802      	cmp	r0, #2
 8002e4c:	d9f6      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1a0>
 8002e4e:	e76c      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e50:	4b34      	ldr	r3, [pc, #208]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e54:	00d5      	lsls	r5, r2, #3
 8002e56:	d427      	bmi.n	8002ea8 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8002e5a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	4d2e      	ldr	r5, [pc, #184]	@ (8002f28 <HAL_RCC_OscConfig+0x28c>)
 8002e6e:	682b      	ldr	r3, [r5, #0]
 8002e70:	05d8      	lsls	r0, r3, #23
 8002e72:	d51b      	bpl.n	8002eac <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	68a3      	ldr	r3, [r4, #8]
 8002e76:	4d2b      	ldr	r5, [pc, #172]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d127      	bne.n	8002ecc <HAL_RCC_OscConfig+0x230>
 8002e7c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002e88:	f7ff f9b8 	bl	80021fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4e25      	ldr	r6, [pc, #148]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8002e8e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002e92:	079a      	lsls	r2, r3, #30
 8002e94:	d53f      	bpl.n	8002f16 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8002e96:	2f00      	cmp	r7, #0
 8002e98:	f43f af16 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4a21      	ldr	r2, [pc, #132]	@ (8002f24 <HAL_RCC_OscConfig+0x288>)
 8002e9e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ea6:	e70f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8002ea8:	2700      	movs	r7, #0
 8002eaa:	e7df      	b.n	8002e6c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002eb4:	f7ff f9a2 	bl	80021fc <HAL_GetTick>
 8002eb8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	05d9      	lsls	r1, r3, #23
 8002ebe:	d4d9      	bmi.n	8002e74 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7ff f99c 	bl	80021fc <HAL_GetTick>
 8002ec4:	1b80      	subs	r0, r0, r6
 8002ec6:	2864      	cmp	r0, #100	@ 0x64
 8002ec8:	d9f7      	bls.n	8002eba <HAL_RCC_OscConfig+0x21e>
 8002eca:	e72e      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	b9ab      	cbnz	r3, 8002efa <HAL_RCC_OscConfig+0x25e>
 8002ece:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	672b      	str	r3, [r5, #112]	@ 0x70
 8002eda:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002ee2:	f7ff f98b 	bl	80021fc <HAL_GetTick>
 8002ee6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002eea:	079b      	lsls	r3, r3, #30
 8002eec:	d5d3      	bpl.n	8002e96 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7ff f985 	bl	80021fc <HAL_GetTick>
 8002ef2:	1b80      	subs	r0, r0, r6
 8002ef4:	4540      	cmp	r0, r8
 8002ef6:	d9f7      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
 8002ef8:	e717      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002efe:	d103      	bne.n	8002f08 <HAL_RCC_OscConfig+0x26c>
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	672b      	str	r3, [r5, #112]	@ 0x70
 8002f06:	e7b9      	b.n	8002e7c <HAL_RCC_OscConfig+0x1e0>
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	672b      	str	r3, [r5, #112]	@ 0x70
 8002f0e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	e7b5      	b.n	8002e82 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7ff f971 	bl	80021fc <HAL_GetTick>
 8002f1a:	1b40      	subs	r0, r0, r5
 8002f1c:	4540      	cmp	r0, r8
 8002f1e:	d9b7      	bls.n	8002e90 <HAL_RCC_OscConfig+0x1f4>
 8002f20:	e703      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2c:	4d3c      	ldr	r5, [pc, #240]	@ (8003020 <HAL_RCC_OscConfig+0x384>)
 8002f2e:	68ab      	ldr	r3, [r5, #8]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d042      	beq.n	8002fbe <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8002f38:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f40:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f42:	d12f      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8002f44:	f7ff f95a 	bl	80021fc <HAL_GetTick>
 8002f48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	0199      	lsls	r1, r3, #6
 8002f4e:	d423      	bmi.n	8002f98 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f50:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f58:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f5c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002f5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f62:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002f64:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002f68:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002f6a:	0852      	lsrs	r2, r2, #1
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f72:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f93e 	bl	80021fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f80:	4d27      	ldr	r5, [pc, #156]	@ (8003020 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 8002f82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	019a      	lsls	r2, r3, #6
 8002f88:	f53f aea2 	bmi.w	8002cd0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7ff f936 	bl	80021fc <HAL_GetTick>
 8002f90:	1b00      	subs	r0, r0, r4
 8002f92:	2802      	cmp	r0, #2
 8002f94:	d9f6      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2e8>
 8002f96:	e6c8      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7ff f930 	bl	80021fc <HAL_GetTick>
 8002f9c:	1b80      	subs	r0, r0, r6
 8002f9e:	2802      	cmp	r0, #2
 8002fa0:	d9d3      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2ae>
 8002fa2:	e6c2      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f92a 	bl	80021fc <HAL_GetTick>
 8002fa8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	682b      	ldr	r3, [r5, #0]
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	f57f ae8f 	bpl.w	8002cd0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7ff f923 	bl	80021fc <HAL_GetTick>
 8002fb6:	1b00      	subs	r0, r0, r4
 8002fb8:	2802      	cmp	r0, #2
 8002fba:	d9f6      	bls.n	8002faa <HAL_RCC_OscConfig+0x30e>
 8002fbc:	e6b5      	b.n	8002d2a <HAL_RCC_OscConfig+0x8e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fbe:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002fc0:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	f43f ae6f 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fca:	69e1      	ldr	r1, [r4, #28]
 8002fcc:	428a      	cmp	r2, r1
 8002fce:	f47f ae69 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	6a21      	ldr	r1, [r4, #32]
 8002fd8:	428a      	cmp	r2, r1
 8002fda:	f47f ae63 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fde:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002fea:	f47f ae5b 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ff0:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002ff4:	0852      	lsrs	r2, r2, #1
 8002ff6:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ffc:	f47f ae52 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003000:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003004:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003006:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800300a:	f47f ae4b 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800300e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003010:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003014:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003018:	bf14      	ite	ne
 800301a:	2001      	movne	r0, #1
 800301c:	2000      	moveq	r0, #0
 800301e:	e642      	b.n	8002ca6 <HAL_RCC_OscConfig+0xa>
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003024:	4913      	ldr	r1, [pc, #76]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003026:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003028:	688b      	ldr	r3, [r1, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d01b      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x46>
 8003032:	2b08      	cmp	r3, #8
 8003034:	d11b      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003036:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003038:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003040:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003048:	bf1a      	itte	ne
 800304a:	480b      	ldrne	r0, [pc, #44]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x54>)
 800304c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	480b      	ldreq	r0, [pc, #44]	@ (800307c <HAL_RCC_GetSysClockFreq+0x58>)
 8003050:	fba1 0100 	umull	r0, r1, r1, r0
 8003054:	f7fd f94c 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x50>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003060:	3301      	adds	r3, #1
 8003062:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003064:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003068:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306a:	4803      	ldr	r0, [pc, #12]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x54>)
 800306c:	e7fc      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800306e:	4803      	ldr	r0, [pc, #12]	@ (800307c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003070:	e7fa      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x44>
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	007a1200 	.word	0x007a1200
 800307c:	00f42400 	.word	0x00f42400

08003080 <HAL_RCC_ClockConfig>:
{
 8003080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003084:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003086:	4604      	mov	r4, r0
 8003088:	b910      	cbnz	r0, 8003090 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800308a:	2001      	movs	r0, #1
}
 800308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4a45      	ldr	r2, [pc, #276]	@ (80031a8 <HAL_RCC_ClockConfig+0x128>)
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	428b      	cmp	r3, r1
 800309a:	d328      	bcc.n	80030ee <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	6821      	ldr	r1, [r4, #0]
 800309e:	078f      	lsls	r7, r1, #30
 80030a0:	d430      	bmi.n	8003104 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a2:	07c8      	lsls	r0, r1, #31
 80030a4:	d443      	bmi.n	800312e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a6:	4a40      	ldr	r2, [pc, #256]	@ (80031a8 <HAL_RCC_ClockConfig+0x128>)
 80030a8:	6813      	ldr	r3, [r2, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	42ab      	cmp	r3, r5
 80030b0:	d866      	bhi.n	8003180 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	0751      	lsls	r1, r2, #29
 80030b6:	d46f      	bmi.n	8003198 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	0713      	lsls	r3, r2, #28
 80030ba:	d507      	bpl.n	80030cc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030bc:	4a3b      	ldr	r2, [pc, #236]	@ (80031ac <HAL_RCC_ClockConfig+0x12c>)
 80030be:	6921      	ldr	r1, [r4, #16]
 80030c0:	6893      	ldr	r3, [r2, #8]
 80030c2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80030c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030cc:	f7ff ffaa 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 80030d0:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <HAL_RCC_ClockConfig+0x12c>)
 80030d2:	4a37      	ldr	r2, [pc, #220]	@ (80031b0 <HAL_RCC_ClockConfig+0x130>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	40d8      	lsrs	r0, r3
 80030de:	4b35      	ldr	r3, [pc, #212]	@ (80031b4 <HAL_RCC_ClockConfig+0x134>)
 80030e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80030e2:	4b35      	ldr	r3, [pc, #212]	@ (80031b8 <HAL_RCC_ClockConfig+0x138>)
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	f7ff f84d 	bl	8002184 <HAL_InitTick>
  return HAL_OK;
 80030ea:	2000      	movs	r0, #0
 80030ec:	e7ce      	b.n	800308c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	428b      	cmp	r3, r1
 8003100:	d1c3      	bne.n	800308a <HAL_RCC_ClockConfig+0xa>
 8003102:	e7cb      	b.n	800309c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	f011 0f04 	tst.w	r1, #4
 8003108:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <HAL_RCC_ClockConfig+0x12c>)
 800310a:	d003      	beq.n	8003114 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003112:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	070e      	lsls	r6, r1, #28
 8003116:	d503      	bpl.n	8003120 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800311e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	68a0      	ldr	r0, [r4, #8]
 8003124:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003128:	4302      	orrs	r2, r0
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	e7b9      	b.n	80030a2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312e:	6861      	ldr	r1, [r4, #4]
 8003130:	4b1e      	ldr	r3, [pc, #120]	@ (80031ac <HAL_RCC_ClockConfig+0x12c>)
 8003132:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003134:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	d11b      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003138:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	d0a5      	beq.n	800308a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003144:	4f19      	ldr	r7, [pc, #100]	@ (80031ac <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003146:	f022 0203 	bic.w	r2, r2, #3
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800314e:	f7ff f855 	bl	80021fc <HAL_GetTick>
 8003152:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6862      	ldr	r2, [r4, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003160:	d0a1      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003162:	f7ff f84b 	bl	80021fc <HAL_GetTick>
 8003166:	1b80      	subs	r0, r0, r6
 8003168:	4540      	cmp	r0, r8
 800316a:	d9f3      	bls.n	8003154 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800316c:	2003      	movs	r0, #3
 800316e:	e78d      	b.n	800308c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003170:	2902      	cmp	r1, #2
 8003172:	d102      	bne.n	800317a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003174:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003178:	e7e0      	b.n	800313c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	f012 0f02 	tst.w	r2, #2
 800317e:	e7dd      	b.n	800313c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003180:	6813      	ldr	r3, [r2, #0]
 8003182:	f023 030f 	bic.w	r3, r3, #15
 8003186:	432b      	orrs	r3, r5
 8003188:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	42ab      	cmp	r3, r5
 8003192:	f47f af7a 	bne.w	800308a <HAL_RCC_ClockConfig+0xa>
 8003196:	e78c      	b.n	80030b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4904      	ldr	r1, [pc, #16]	@ (80031ac <HAL_RCC_ClockConfig+0x12c>)
 800319a:	68e0      	ldr	r0, [r4, #12]
 800319c:	688b      	ldr	r3, [r1, #8]
 800319e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80031a2:	4303      	orrs	r3, r0
 80031a4:	608b      	str	r3, [r1, #8]
 80031a6:	e787      	b.n	80030b8 <HAL_RCC_ClockConfig+0x38>
 80031a8:	40023c00 	.word	0x40023c00
 80031ac:	40023800 	.word	0x40023800
 80031b0:	0800c179 	.word	0x0800c179
 80031b4:	20000004 	.word	0x20000004
 80031b8:	2000000c 	.word	0x2000000c

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	4a03      	ldr	r2, [pc, #12]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031ca:	6810      	ldr	r0, [r2, #0]
}
 80031cc:	40d8      	lsrs	r0, r3
 80031ce:	4770      	bx	lr
 80031d0:	40023800 	.word	0x40023800
 80031d4:	0800c171 	.word	0x0800c171
 80031d8:	20000004 	.word	0x20000004

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031dc:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80031de:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	4a03      	ldr	r2, [pc, #12]	@ (80031f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031ea:	6810      	ldr	r0, [r2, #0]
}
 80031ec:	40d8      	lsrs	r0, r3
 80031ee:	4770      	bx	lr
 80031f0:	40023800 	.word	0x40023800
 80031f4:	0800c171 	.word	0x0800c171
 80031f8:	20000004 	.word	0x20000004

080031fc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031fc:	6803      	ldr	r3, [r0, #0]
{
 80031fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003202:	f013 0601 	ands.w	r6, r3, #1
{
 8003206:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003208:	d00b      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800320a:	4ab1      	ldr	r2, [pc, #708]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800320c:	6891      	ldr	r1, [r2, #8]
 800320e:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8003212:	6091      	str	r1, [r2, #8]
 8003214:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8003216:	6891      	ldr	r1, [r2, #8]
 8003218:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800321a:	fab6 f686 	clz	r6, r6
 800321e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003220:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003222:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8003226:	d012      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003228:	49a9      	ldr	r1, [pc, #676]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800322a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800322c:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003230:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003234:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 8003238:	bf08      	it	eq
 800323a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800323c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003240:	bf16      	itet	ne
 8003242:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003246:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003248:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800324a:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800324e:	02d9      	lsls	r1, r3, #11
 8003250:	d510      	bpl.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003252:	489f      	ldr	r0, [pc, #636]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003254:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003256:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800325a:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800325e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003262:	ea42 0201 	orr.w	r2, r2, r1
 8003266:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800326a:	f000 81aa 	beq.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800326e:	2900      	cmp	r1, #0
 8003270:	bf08      	it	eq
 8003272:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003274:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003278:	bf18      	it	ne
 800327a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800327c:	069a      	lsls	r2, r3, #26
 800327e:	d532      	bpl.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b93      	ldr	r3, [pc, #588]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003282:	4f94      	ldr	r7, [pc, #592]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003286:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329e:	f7fe ffad 	bl	80021fc <HAL_GetTick>
 80032a2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	05db      	lsls	r3, r3, #23
 80032a8:	f140 818d 	bpl.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ac:	4f88      	ldr	r7, [pc, #544]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b2:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80032b6:	f040 8191 	bne.w	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032bc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80032c0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80032c4:	4a82      	ldr	r2, [pc, #520]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032c6:	f040 81ae 	bne.w	8003626 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80032ca:	6891      	ldr	r1, [r2, #8]
 80032cc:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 80032d0:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80032d4:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80032d8:	4301      	orrs	r1, r0
 80032da:	6091      	str	r1, [r2, #8]
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80032e2:	430b      	orrs	r3, r1
 80032e4:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	06da      	lsls	r2, r3, #27
 80032ea:	d50c      	bpl.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032ec:	4a78      	ldr	r2, [pc, #480]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032ee:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80032f2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80032f6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80032fa:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80032fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003300:	4301      	orrs	r1, r0
 8003302:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003306:	045f      	lsls	r7, r3, #17
 8003308:	d508      	bpl.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800330a:	4971      	ldr	r1, [pc, #452]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800330c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800330e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003312:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003316:	4302      	orrs	r2, r0
 8003318:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800331c:	0418      	lsls	r0, r3, #16
 800331e:	d508      	bpl.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003320:	496b      	ldr	r1, [pc, #428]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003322:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003324:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003328:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800332c:	4302      	orrs	r2, r0
 800332e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003332:	03d9      	lsls	r1, r3, #15
 8003334:	d508      	bpl.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003336:	4966      	ldr	r1, [pc, #408]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003338:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800333a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800333e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003342:	4302      	orrs	r2, r0
 8003344:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003348:	039a      	lsls	r2, r3, #14
 800334a:	d508      	bpl.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800334c:	4960      	ldr	r1, [pc, #384]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800334e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003350:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003354:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003358:	4302      	orrs	r2, r0
 800335a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800335e:	065f      	lsls	r7, r3, #25
 8003360:	d508      	bpl.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003362:	495b      	ldr	r1, [pc, #364]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003364:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003366:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800336a:	f022 0203 	bic.w	r2, r2, #3
 800336e:	4302      	orrs	r2, r0
 8003370:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003374:	0618      	lsls	r0, r3, #24
 8003376:	d508      	bpl.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003378:	4955      	ldr	r1, [pc, #340]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800337a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800337c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003380:	f022 020c 	bic.w	r2, r2, #12
 8003384:	4302      	orrs	r2, r0
 8003386:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338a:	05d9      	lsls	r1, r3, #23
 800338c:	d508      	bpl.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800338e:	4950      	ldr	r1, [pc, #320]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003390:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003392:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003396:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800339a:	4302      	orrs	r2, r0
 800339c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033a0:	059a      	lsls	r2, r3, #22
 80033a2:	d508      	bpl.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a4:	494a      	ldr	r1, [pc, #296]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033a6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80033a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80033ac:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80033b0:	4302      	orrs	r2, r0
 80033b2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033b6:	055f      	lsls	r7, r3, #21
 80033b8:	d508      	bpl.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ba:	4945      	ldr	r1, [pc, #276]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033bc:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80033be:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80033c2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80033c6:	4302      	orrs	r2, r0
 80033c8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033cc:	0518      	lsls	r0, r3, #20
 80033ce:	d508      	bpl.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033d0:	493f      	ldr	r1, [pc, #252]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80033d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80033dc:	4302      	orrs	r2, r0
 80033de:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033e2:	04d9      	lsls	r1, r3, #19
 80033e4:	d508      	bpl.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033e6:	493a      	ldr	r1, [pc, #232]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033e8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80033ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80033ee:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80033f2:	4302      	orrs	r2, r0
 80033f4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033f8:	049a      	lsls	r2, r3, #18
 80033fa:	d508      	bpl.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033fc:	4934      	ldr	r1, [pc, #208]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033fe:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003400:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003404:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003408:	4302      	orrs	r2, r0
 800340a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800340e:	025f      	lsls	r7, r3, #9
 8003410:	d508      	bpl.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003412:	492f      	ldr	r1, [pc, #188]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003414:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003416:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800341a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800341e:	4302      	orrs	r2, r0
 8003420:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003424:	0298      	lsls	r0, r3, #10
 8003426:	d50c      	bpl.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003428:	4829      	ldr	r0, [pc, #164]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800342a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800342c:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003430:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003434:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8003438:	bf08      	it	eq
 800343a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800343c:	430a      	orrs	r2, r1
 800343e:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003442:	f013 0f08 	tst.w	r3, #8
 8003446:	bf18      	it	ne
 8003448:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800344a:	0359      	lsls	r1, r3, #13
 800344c:	d508      	bpl.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800344e:	4920      	ldr	r1, [pc, #128]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003450:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003452:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003456:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800345a:	4302      	orrs	r2, r0
 800345c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	d509      	bpl.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003464:	491a      	ldr	r1, [pc, #104]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003466:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800346a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800346e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003472:	4302      	orrs	r2, r0
 8003474:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003478:	015f      	lsls	r7, r3, #5
 800347a:	d509      	bpl.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800347c:	4914      	ldr	r1, [pc, #80]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800347e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003482:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003486:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800348a:	4302      	orrs	r2, r0
 800348c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003490:	0118      	lsls	r0, r3, #4
 8003492:	d509      	bpl.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003494:	490e      	ldr	r1, [pc, #56]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003496:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800349a:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800349e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80034a2:	4302      	orrs	r2, r0
 80034a4:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80034a8:	00d9      	lsls	r1, r3, #3
 80034aa:	d509      	bpl.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034ac:	4908      	ldr	r1, [pc, #32]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ae:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80034b2:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 80034b6:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80034ba:	4302      	orrs	r2, r0
 80034bc:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034c0:	2e01      	cmp	r6, #1
 80034c2:	f000 80b4 	beq.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80034c6:	019a      	lsls	r2, r3, #6
 80034c8:	f100 80b1 	bmi.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034d8:	2d01      	cmp	r5, #1
 80034da:	d170      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034dc:	4d9d      	ldr	r5, [pc, #628]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e6:	f7fe fe89 	bl	80021fc <HAL_GetTick>
 80034ea:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	009f      	lsls	r7, r3, #2
 80034f0:	f100 8121 	bmi.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034f4:	6821      	ldr	r1, [r4, #0]
 80034f6:	030e      	lsls	r6, r1, #12
 80034f8:	d501      	bpl.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x302>
 80034fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80034fc:	b11b      	cbz	r3, 8003506 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80034fe:	02cd      	lsls	r5, r1, #11
 8003500:	d51d      	bpl.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003502:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003504:	b9db      	cbnz	r3, 800353e <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003506:	4a93      	ldr	r2, [pc, #588]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003508:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800350c:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003514:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003518:	4303      	orrs	r3, r0
 800351a:	6960      	ldr	r0, [r4, #20]
 800351c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003520:	69a0      	ldr	r0, [r4, #24]
 8003522:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003526:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800352a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800352e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003530:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003534:	3801      	subs	r0, #1
 8003536:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800353a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800353e:	0288      	lsls	r0, r1, #10
 8003540:	d515      	bpl.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003542:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003548:	d111      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800354a:	4a82      	ldr	r2, [pc, #520]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800354c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003550:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003554:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003558:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800355c:	4303      	orrs	r3, r0
 800355e:	6960      	ldr	r0, [r4, #20]
 8003560:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003564:	6a20      	ldr	r0, [r4, #32]
 8003566:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800356a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800356e:	070a      	lsls	r2, r1, #28
 8003570:	d519      	bpl.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003572:	4a78      	ldr	r2, [pc, #480]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003574:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003578:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800357c:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8003580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003584:	430b      	orrs	r3, r1
 8003586:	6961      	ldr	r1, [r4, #20]
 8003588:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800358c:	69e1      	ldr	r1, [r4, #28]
 800358e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003592:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003596:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800359a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800359c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80035a0:	430b      	orrs	r3, r1
 80035a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035a6:	4c6b      	ldr	r4, [pc, #428]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b0:	f7fe fe24 	bl	80021fc <HAL_GetTick>
 80035b4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f140 80c3 	bpl.w	8003744 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80035be:	2000      	movs	r0, #0
 80035c0:	e009      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 80035c2:	2601      	movs	r6, #1
 80035c4:	e656      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fe fe19 	bl	80021fc <HAL_GetTick>
 80035ca:	eba0 0008 	sub.w	r0, r0, r8
 80035ce:	2864      	cmp	r0, #100	@ 0x64
 80035d0:	f67f ae68 	bls.w	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80035d4:	2003      	movs	r0, #3
}
 80035d6:	b003      	add	sp, #12
 80035d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035dc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80035e0:	4293      	cmp	r3, r2
 80035e2:	f43f ae6a 	beq.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80035f2:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80035f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80035fa:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80035fc:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003600:	07d8      	lsls	r0, r3, #31
 8003602:	f57f ae5a 	bpl.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8003606:	f7fe fdf9 	bl	80021fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800360e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003612:	0799      	lsls	r1, r3, #30
 8003614:	f53f ae51 	bmi.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe fdf0 	bl	80021fc <HAL_GetTick>
 800361c:	eba0 0008 	sub.w	r0, r0, r8
 8003620:	4548      	cmp	r0, r9
 8003622:	d9f5      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003624:	e7d6      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003626:	6891      	ldr	r1, [r2, #8]
 8003628:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800362c:	e655      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800362e:	4e49      	ldr	r6, [pc, #292]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003636:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003638:	f7fe fde0 	bl	80021fc <HAL_GetTick>
 800363c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800363e:	6833      	ldr	r3, [r6, #0]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	d472      	bmi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	07d7      	lsls	r7, r2, #31
 8003648:	d512      	bpl.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800364a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800364c:	b983      	cbnz	r3, 8003670 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800364e:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003652:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800365a:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800365e:	430b      	orrs	r3, r1
 8003660:	6861      	ldr	r1, [r4, #4]
 8003662:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003666:	68a1      	ldr	r1, [r4, #8]
 8003668:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800366c:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003670:	0316      	lsls	r6, r2, #12
 8003672:	d503      	bpl.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003674:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800367a:	d005      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800367c:	02d0      	lsls	r0, r2, #11
 800367e:	d51e      	bpl.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003680:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003686:	d11a      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003688:	4932      	ldr	r1, [pc, #200]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800368a:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800368e:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003696:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800369a:	4303      	orrs	r3, r0
 800369c:	6860      	ldr	r0, [r4, #4]
 800369e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036a2:	68e0      	ldr	r0, [r4, #12]
 80036a4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80036a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036ac:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 80036b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036b2:	f020 001f 	bic.w	r0, r0, #31
 80036b6:	3b01      	subs	r3, #1
 80036b8:	4303      	orrs	r3, r0
 80036ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036be:	01d1      	lsls	r1, r2, #7
 80036c0:	d511      	bpl.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036c2:	4924      	ldr	r1, [pc, #144]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80036c4:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036c8:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036cc:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80036d0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80036d4:	4303      	orrs	r3, r0
 80036d6:	6860      	ldr	r0, [r4, #4]
 80036d8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036dc:	6920      	ldr	r0, [r4, #16]
 80036de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80036e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036e6:	0192      	lsls	r2, r2, #6
 80036e8:	d50d      	bpl.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	6862      	ldr	r2, [r4, #4]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036f4:	68e2      	ldr	r2, [r4, #12]
 80036f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036fa:	68a2      	ldr	r2, [r4, #8]
 80036fc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003702:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003706:	4e13      	ldr	r6, [pc, #76]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800370e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003710:	f7fe fd74 	bl	80021fc <HAL_GetTick>
 8003714:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003716:	6833      	ldr	r3, [r6, #0]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	f53f aedd 	bmi.w	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371e:	f7fe fd6d 	bl	80021fc <HAL_GetTick>
 8003722:	1bc0      	subs	r0, r0, r7
 8003724:	2864      	cmp	r0, #100	@ 0x64
 8003726:	d9f6      	bls.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003728:	e754      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800372a:	f7fe fd67 	bl	80021fc <HAL_GetTick>
 800372e:	1bc0      	subs	r0, r0, r7
 8003730:	2864      	cmp	r0, #100	@ 0x64
 8003732:	d984      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003734:	e74e      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003736:	f7fe fd61 	bl	80021fc <HAL_GetTick>
 800373a:	1b80      	subs	r0, r0, r6
 800373c:	2864      	cmp	r0, #100	@ 0x64
 800373e:	f67f aed5 	bls.w	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8003742:	e747      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003744:	f7fe fd5a 	bl	80021fc <HAL_GetTick>
 8003748:	1b40      	subs	r0, r0, r5
 800374a:	2864      	cmp	r0, #100	@ 0x64
 800374c:	f67f af33 	bls.w	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003750:	e740      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800

08003758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800375c:	69c0      	ldr	r0, [r0, #28]
 800375e:	6921      	ldr	r1, [r4, #16]
 8003760:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003762:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003764:	430a      	orrs	r2, r1
 8003766:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003768:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800376c:	497d      	ldr	r1, [pc, #500]	@ (8003964 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003770:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8003772:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003774:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003776:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003778:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003784:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003786:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003788:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800378a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003792:	4a75      	ldr	r2, [pc, #468]	@ (8003968 <UART_SetConfig+0x210>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d113      	bne.n	80037c0 <UART_SetConfig+0x68>
 8003798:	4b74      	ldr	r3, [pc, #464]	@ (800396c <UART_SetConfig+0x214>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	f000 80a8 	beq.w	80038f8 <UART_SetConfig+0x1a0>
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d021      	beq.n	80037f0 <UART_SetConfig+0x98>
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f040 80bd 	bne.w	800392c <UART_SetConfig+0x1d4>

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80037b6:	f040 809c 	bne.w	80038f2 <UART_SetConfig+0x19a>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7ff fc33 	bl	8003024 <HAL_RCC_GetSysClockFreq>
        break;
 80037be:	e092      	b.n	80038e6 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003970 <UART_SetConfig+0x218>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d11b      	bne.n	80037fe <UART_SetConfig+0xa6>
 80037c6:	4b69      	ldr	r3, [pc, #420]	@ (800396c <UART_SetConfig+0x214>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	f000 8091 	beq.w	80038f8 <UART_SetConfig+0x1a0>
 80037d6:	d809      	bhi.n	80037ec <UART_SetConfig+0x94>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80ad 	beq.w	8003938 <UART_SetConfig+0x1e0>
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d0e7      	beq.n	80037b2 <UART_SetConfig+0x5a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80037e6:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68

  return ret;
}
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ec:	2b0c      	cmp	r3, #12
 80037ee:	d1f8      	bne.n	80037e2 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80037f4:	f000 8084 	beq.w	8003900 <UART_SetConfig+0x1a8>
        pclk = (uint32_t) LSE_VALUE;
 80037f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80037fc:	e0a3      	b.n	8003946 <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003974 <UART_SetConfig+0x21c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10e      	bne.n	8003822 <UART_SetConfig+0xca>
 8003804:	4b59      	ldr	r3, [pc, #356]	@ (800396c <UART_SetConfig+0x214>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800380e:	2b20      	cmp	r3, #32
 8003810:	d072      	beq.n	80038f8 <UART_SetConfig+0x1a0>
 8003812:	d804      	bhi.n	800381e <UART_SetConfig+0xc6>
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 808f 	beq.w	8003938 <UART_SetConfig+0x1e0>
 800381a:	2b10      	cmp	r3, #16
 800381c:	e7e0      	b.n	80037e0 <UART_SetConfig+0x88>
 800381e:	2b30      	cmp	r3, #48	@ 0x30
 8003820:	e7e5      	b.n	80037ee <UART_SetConfig+0x96>
 8003822:	4a55      	ldr	r2, [pc, #340]	@ (8003978 <UART_SetConfig+0x220>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10d      	bne.n	8003844 <UART_SetConfig+0xec>
 8003828:	4b50      	ldr	r3, [pc, #320]	@ (800396c <UART_SetConfig+0x214>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003832:	2b80      	cmp	r3, #128	@ 0x80
 8003834:	d060      	beq.n	80038f8 <UART_SetConfig+0x1a0>
 8003836:	d803      	bhi.n	8003840 <UART_SetConfig+0xe8>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d07d      	beq.n	8003938 <UART_SetConfig+0x1e0>
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	e7cf      	b.n	80037e0 <UART_SetConfig+0x88>
 8003840:	2bc0      	cmp	r3, #192	@ 0xc0
 8003842:	e7d4      	b.n	80037ee <UART_SetConfig+0x96>
 8003844:	4a4d      	ldr	r2, [pc, #308]	@ (800397c <UART_SetConfig+0x224>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d110      	bne.n	800386c <UART_SetConfig+0x114>
 800384a:	4b48      	ldr	r3, [pc, #288]	@ (800396c <UART_SetConfig+0x214>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003858:	d04e      	beq.n	80038f8 <UART_SetConfig+0x1a0>
 800385a:	d804      	bhi.n	8003866 <UART_SetConfig+0x10e>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d06b      	beq.n	8003938 <UART_SetConfig+0x1e0>
 8003860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003864:	e7bc      	b.n	80037e0 <UART_SetConfig+0x88>
 8003866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800386a:	e7c0      	b.n	80037ee <UART_SetConfig+0x96>
 800386c:	4a44      	ldr	r2, [pc, #272]	@ (8003980 <UART_SetConfig+0x228>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d110      	bne.n	8003894 <UART_SetConfig+0x13c>
 8003872:	4b3e      	ldr	r3, [pc, #248]	@ (800396c <UART_SetConfig+0x214>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800387c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003880:	d03a      	beq.n	80038f8 <UART_SetConfig+0x1a0>
 8003882:	d804      	bhi.n	800388e <UART_SetConfig+0x136>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d051      	beq.n	800392c <UART_SetConfig+0x1d4>
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388c:	e7a8      	b.n	80037e0 <UART_SetConfig+0x88>
 800388e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003892:	e7ac      	b.n	80037ee <UART_SetConfig+0x96>
 8003894:	4a3b      	ldr	r2, [pc, #236]	@ (8003984 <UART_SetConfig+0x22c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d110      	bne.n	80038bc <UART_SetConfig+0x164>
 800389a:	4b34      	ldr	r3, [pc, #208]	@ (800396c <UART_SetConfig+0x214>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80038a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a8:	d026      	beq.n	80038f8 <UART_SetConfig+0x1a0>
 80038aa:	d804      	bhi.n	80038b6 <UART_SetConfig+0x15e>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d043      	beq.n	8003938 <UART_SetConfig+0x1e0>
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b4:	e794      	b.n	80037e0 <UART_SetConfig+0x88>
 80038b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038ba:	e798      	b.n	80037ee <UART_SetConfig+0x96>
 80038bc:	4a32      	ldr	r2, [pc, #200]	@ (8003988 <UART_SetConfig+0x230>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d18f      	bne.n	80037e2 <UART_SetConfig+0x8a>
 80038c2:	4b2a      	ldr	r3, [pc, #168]	@ (800396c <UART_SetConfig+0x214>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d0:	d012      	beq.n	80038f8 <UART_SetConfig+0x1a0>
 80038d2:	d803      	bhi.n	80038dc <UART_SetConfig+0x184>
 80038d4:	b383      	cbz	r3, 8003938 <UART_SetConfig+0x1e0>
 80038d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038da:	e781      	b.n	80037e0 <UART_SetConfig+0x88>
 80038dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038e0:	e785      	b.n	80037ee <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7ff fc6b 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80038e6:	b958      	cbnz	r0, 8003900 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e8:	2000      	movs	r0, #0
 80038ea:	e77b      	b.n	80037e4 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7ff fc76 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
        break;
 80038f0:	e027      	b.n	8003942 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7ff fb97 	bl	8003024 <HAL_RCC_GetSysClockFreq>
        break;
 80038f6:	e024      	b.n	8003942 <UART_SetConfig+0x1ea>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4823      	ldr	r0, [pc, #140]	@ (800398c <UART_SetConfig+0x234>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fe:	d122      	bne.n	8003946 <UART_SetConfig+0x1ee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003900:	6862      	ldr	r2, [r4, #4]
 8003902:	0853      	lsrs	r3, r2, #1
 8003904:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003908:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800390c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003910:	f1a3 0110 	sub.w	r1, r3, #16
 8003914:	4291      	cmp	r1, r2
 8003916:	f63f af64 	bhi.w	80037e2 <UART_SetConfig+0x8a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800391a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800391e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003922:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003924:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8003926:	4313      	orrs	r3, r2
 8003928:	60cb      	str	r3, [r1, #12]
 800392a:	e7dd      	b.n	80038e8 <UART_SetConfig+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003930:	d1dc      	bne.n	80038ec <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003932:	f7ff fc53 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
        break;
 8003936:	e7d6      	b.n	80038e6 <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003938:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800393c:	d0d1      	beq.n	80038e2 <UART_SetConfig+0x18a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800393e:	f7ff fc3d 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003942:	2800      	cmp	r0, #0
 8003944:	d0d0      	beq.n	80038e8 <UART_SetConfig+0x190>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003946:	6862      	ldr	r2, [r4, #4]
 8003948:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800394c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003950:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003954:	f1a3 0110 	sub.w	r1, r3, #16
 8003958:	4291      	cmp	r1, r2
 800395a:	f63f af42 	bhi.w	80037e2 <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	60d3      	str	r3, [r2, #12]
 8003962:	e7c1      	b.n	80038e8 <UART_SetConfig+0x190>
 8003964:	efff69f3 	.word	0xefff69f3
 8003968:	40011000 	.word	0x40011000
 800396c:	40023800 	.word	0x40023800
 8003970:	40004400 	.word	0x40004400
 8003974:	40004800 	.word	0x40004800
 8003978:	40004c00 	.word	0x40004c00
 800397c:	40005000 	.word	0x40005000
 8003980:	40011400 	.word	0x40011400
 8003984:	40007800 	.word	0x40007800
 8003988:	40007c00 	.word	0x40007c00
 800398c:	00f42400 	.word	0x00f42400

08003990 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003990:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003992:	07da      	lsls	r2, r3, #31
{
 8003994:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003996:	d506      	bpl.n	80039a6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003998:	6801      	ldr	r1, [r0, #0]
 800399a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800399c:	684a      	ldr	r2, [r1, #4]
 800399e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80039a2:	4322      	orrs	r2, r4
 80039a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a6:	079c      	lsls	r4, r3, #30
 80039a8:	d506      	bpl.n	80039b8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039aa:	6801      	ldr	r1, [r0, #0]
 80039ac:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80039ae:	684a      	ldr	r2, [r1, #4]
 80039b0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80039b4:	4322      	orrs	r2, r4
 80039b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b8:	0759      	lsls	r1, r3, #29
 80039ba:	d506      	bpl.n	80039ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039bc:	6801      	ldr	r1, [r0, #0]
 80039be:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80039c0:	684a      	ldr	r2, [r1, #4]
 80039c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039c6:	4322      	orrs	r2, r4
 80039c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ca:	071a      	lsls	r2, r3, #28
 80039cc:	d506      	bpl.n	80039dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ce:	6801      	ldr	r1, [r0, #0]
 80039d0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80039d2:	684a      	ldr	r2, [r1, #4]
 80039d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039d8:	4322      	orrs	r2, r4
 80039da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039dc:	06dc      	lsls	r4, r3, #27
 80039de:	d506      	bpl.n	80039ee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e0:	6801      	ldr	r1, [r0, #0]
 80039e2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80039e4:	688a      	ldr	r2, [r1, #8]
 80039e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039ea:	4322      	orrs	r2, r4
 80039ec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ee:	0699      	lsls	r1, r3, #26
 80039f0:	d506      	bpl.n	8003a00 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f2:	6801      	ldr	r1, [r0, #0]
 80039f4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80039f6:	688a      	ldr	r2, [r1, #8]
 80039f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039fc:	4322      	orrs	r2, r4
 80039fe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a00:	065a      	lsls	r2, r3, #25
 8003a02:	d510      	bpl.n	8003a26 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a04:	6801      	ldr	r1, [r0, #0]
 8003a06:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003a08:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a0a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a0e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003a12:	ea42 0204 	orr.w	r2, r2, r4
 8003a16:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a18:	d105      	bne.n	8003a26 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a1a:	684a      	ldr	r2, [r1, #4]
 8003a1c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003a1e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8003a22:	4322      	orrs	r2, r4
 8003a24:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	d506      	bpl.n	8003a38 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a2a:	6802      	ldr	r2, [r0, #0]
 8003a2c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003a2e:	6853      	ldr	r3, [r2, #4]
 8003a30:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6053      	str	r3, [r2, #4]
  }
}
 8003a38:	bd10      	pop	{r4, pc}

08003a3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a42:	4605      	mov	r5, r0
 8003a44:	460f      	mov	r7, r1
 8003a46:	4616      	mov	r6, r2
 8003a48:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4a:	682a      	ldr	r2, [r5, #0]
 8003a4c:	69d3      	ldr	r3, [r2, #28]
 8003a4e:	ea37 0303 	bics.w	r3, r7, r3
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	42b3      	cmp	r3, r6
 8003a5a:	d001      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e028      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8003a64:	d0f2      	beq.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fe fbc9 	bl	80021fc <HAL_GetTick>
 8003a6a:	eba0 0008 	sub.w	r0, r0, r8
 8003a6e:	682c      	ldr	r4, [r5, #0]
 8003a70:	4548      	cmp	r0, r9
 8003a72:	d802      	bhi.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x40>
 8003a74:	f1b9 0f00 	cmp.w	r9, #0
 8003a78:	d11d      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x7c>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a7e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	e844 3200 	strex	r2, r3, [r4]
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	d1f7      	bne.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	f104 0308 	add.w	r3, r4, #8
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	f104 0108 	add.w	r1, r4, #8
 8003a9a:	e841 3200 	strex	r2, r3, [r1]
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	d1f3      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState = HAL_UART_STATE_READY;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003aa6:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          __HAL_UNLOCK(huart);
 8003aaa:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003aac:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003aae:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
}
 8003ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	075a      	lsls	r2, r3, #29
 8003aba:	d5c6      	bpl.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003abc:	69e3      	ldr	r3, [r4, #28]
 8003abe:	051b      	lsls	r3, r3, #20
 8003ac0:	d5c3      	bpl.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ac2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ac6:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003acc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	e844 3200 	strex	r2, r3, [r4]
 8003ad4:	2a00      	cmp	r2, #0
 8003ad6:	d1f7      	bne.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	f104 0308 	add.w	r3, r4, #8
 8003adc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	f104 0108 	add.w	r1, r4, #8
 8003ae8:	e841 3200 	strex	r2, r3, [r1]
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	d1f3      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x9e>
          huart->gState = HAL_UART_STATE_READY;
 8003af0:	2320      	movs	r3, #32
 8003af2:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003af4:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003af8:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8003afc:	e7d5      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x70>

08003afe <UART_CheckIdleState>:
{
 8003afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	2600      	movs	r6, #0
{
 8003b02:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8003b08:	f7fe fb78 	bl	80021fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003b0e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	071a      	lsls	r2, r3, #28
 8003b14:	d418      	bmi.n	8003b48 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	075b      	lsls	r3, r3, #29
 8003b1c:	d50a      	bpl.n	8003b34 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b22:	2200      	movs	r2, #0
 8003b24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b28:	4620      	mov	r0, r4
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	f7ff ff84 	bl	8003a3a <UART_WaitOnFlagUntilTimeout>
 8003b32:	b9a8      	cbnz	r0, 8003b60 <UART_CheckIdleState+0x62>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b34:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003b36:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003b38:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b42:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b44:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8003b46:	e00c      	b.n	8003b62 <UART_CheckIdleState+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b4c:	4632      	mov	r2, r6
 8003b4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	4603      	mov	r3, r0
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7ff ff6f 	bl	8003a3a <UART_WaitOnFlagUntilTimeout>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d0da      	beq.n	8003b16 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003b60:	2003      	movs	r0, #3
}
 8003b62:	b002      	add	sp, #8
 8003b64:	bd70      	pop	{r4, r5, r6, pc}

08003b66 <HAL_UART_Init>:
{
 8003b66:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003b68:	4604      	mov	r4, r0
 8003b6a:	b340      	cbz	r0, 8003bbe <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003b6e:	b91b      	cbnz	r3, 8003b78 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003b70:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8003b74:	f7fe fa98 	bl	80020a8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003b78:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b7a:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b7c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003b7e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b88:	f7ff fde6 	bl	8003758 <UART_SetConfig>
 8003b8c:	2801      	cmp	r0, #1
 8003b8e:	d016      	beq.n	8003bbe <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b92:	b113      	cbz	r3, 8003b9a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7ff fefb 	bl	8003990 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003b9c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ba4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	f042 0201 	orr.w	r2, r2, #1
}
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003bb8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003bba:	f7ff bfa0 	b.w	8003afe <UART_CheckIdleState>
}
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	bd10      	pop	{r4, pc}

08003bc2 <ai_model_get_error>:
}

AI_API_ENTRY
ai_error ai_model_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003bc2:	f001 b80f 	b.w	8004be4 <ai_platform_network_get_error>
	...

08003bc8 <ai_model_create>:
}

AI_API_ENTRY
ai_error ai_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003bc8:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003bca:	2305      	movs	r3, #5
 8003bcc:	2200      	movs	r2, #0
 8003bce:	e9cd 3200 	strd	r3, r2, [sp]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4a02      	ldr	r2, [pc, #8]	@ (8003be0 <ai_model_create+0x18>)
 8003bd6:	f001 fc2b 	bl	8005430 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003bda:	b003      	add	sp, #12
 8003bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be0:	20000010 	.word	0x20000010

08003be4 <ai_model_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8003be4:	b910      	cbnz	r0, 8003bec <ai_model_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003be6:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <ai_model_inputs_get+0xc>)
 8003be8:	4b02      	ldr	r3, [pc, #8]	@ (8003bf4 <ai_model_inputs_get+0x10>)
 8003bea:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003bec:	f001 b90c 	b.w	8004e08 <ai_platform_inputs_get>
 8003bf0:	20000010 	.word	0x20000010
 8003bf4:	a1c00100 	.word	0xa1c00100

08003bf8 <ai_model_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8003bf8:	b910      	cbnz	r0, 8003c00 <ai_model_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003bfa:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <ai_model_outputs_get+0xc>)
 8003bfc:	4b02      	ldr	r3, [pc, #8]	@ (8003c08 <ai_model_outputs_get+0x10>)
 8003bfe:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8003c00:	f001 ba8e 	b.w	8005120 <ai_platform_outputs_get>
 8003c04:	20000010 	.word	0x20000010
 8003c08:	a1c00100 	.word	0xa1c00100

08003c0c <ai_model_init>:
}

AI_API_ENTRY
ai_bool ai_model_init(
  ai_handle network, const ai_network_params* params)
{
 8003c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c10:	460d      	mov	r5, r1
 8003c12:	9001      	str	r0, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003c14:	f001 fde6 	bl	80057e4 <ai_platform_network_init>
  if (!net_ctx) return false;
 8003c18:	4604      	mov	r4, r0
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	f000 8655 	beq.w	80048ca <ai_model_init+0xcbe>
  if (ai_platform_get_weights_map(g_model_weights_map, 1, params)) {
 8003c20:	4fc0      	ldr	r7, [pc, #768]	@ (8003f24 <ai_model_init+0x318>)
 8003c22:	462a      	mov	r2, r5
 8003c24:	2101      	movs	r1, #1
 8003c26:	4638      	mov	r0, r7
 8003c28:	f000 ff12 	bl	8004a50 <ai_platform_get_weights_map>
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	f000 864e 	beq.w	80048d0 <ai_model_init+0xcc4>
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c34:	4abc      	ldr	r2, [pc, #752]	@ (8003f28 <ai_model_init+0x31c>)
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c3c:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_model_weights_map[0] + 0);
 8003c3e:	683b      	ldr	r3, [r7, #0]
    conv2d_0_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 0);
 8003c40:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c44:	4ab9      	ldr	r2, [pc, #740]	@ (8003f2c <ai_model_init+0x320>)
 8003c46:	6811      	ldr	r1, [r2, #0]
 8003c48:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003c4c:	6011      	str	r1, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_model_weights_map[0] + 1152);
 8003c4e:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
    conv2d_0_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 1152);
 8003c52:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c56:	4ab6      	ldr	r2, [pc, #728]	@ (8003f30 <ai_model_init+0x324>)
 8003c58:	6811      	ldr	r1, [r2, #0]
 8003c5a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003c5e:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_model_weights_map[0] + 1184);
 8003c60:	f503 6194 	add.w	r1, r3, #1184	@ 0x4a0
    conv2d_3_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 1184);
 8003c64:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c68:	4ab2      	ldr	r2, [pc, #712]	@ (8003f34 <ai_model_init+0x328>)
 8003c6a:	6811      	ldr	r1, [r2, #0]
 8003c6c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003c70:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_model_weights_map[0] + 5792);
 8003c72:	f503 51b5 	add.w	r1, r3, #5792	@ 0x16a0
    conv2d_3_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 5792);
 8003c76:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c7a:	4aaf      	ldr	r2, [pc, #700]	@ (8003f38 <ai_model_init+0x32c>)
 8003c7c:	6811      	ldr	r1, [r2, #0]
 8003c7e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003c82:	6011      	str	r1, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_model_weights_map[0] + 5856);
 8003c84:	f503 51b7 	add.w	r1, r3, #5856	@ 0x16e0
    conv2d_21_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 5856);
 8003c88:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c8c:	4aab      	ldr	r2, [pc, #684]	@ (8003f3c <ai_model_init+0x330>)
 8003c8e:	6811      	ldr	r1, [r2, #0]
 8003c90:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003c94:	6011      	str	r1, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_model_weights_map[0] + 6144);
 8003c96:	f503 51c0 	add.w	r1, r3, #6144	@ 0x1800
    conv2d_21_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 6144);
 8003c9a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c9e:	4aa8      	ldr	r2, [pc, #672]	@ (8003f40 <ai_model_init+0x334>)
 8003ca0:	6811      	ldr	r1, [r2, #0]
 8003ca2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003ca6:	6011      	str	r1, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_model_weights_map[0] + 6176);
 8003ca8:	f503 51c1 	add.w	r1, r3, #6176	@ 0x1820
    conv2d_22_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 6176);
 8003cac:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cb0:	4aa4      	ldr	r2, [pc, #656]	@ (8003f44 <ai_model_init+0x338>)
 8003cb2:	6811      	ldr	r1, [r2, #0]
 8003cb4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003cb8:	6011      	str	r1, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_model_weights_map[0] + 6688);
 8003cba:	f503 51d1 	add.w	r1, r3, #6688	@ 0x1a20
    conv2d_22_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 6688);
 8003cbe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8003cc2:	4aa1      	ldr	r2, [pc, #644]	@ (8003f48 <ai_model_init+0x33c>)
 8003cc4:	6811      	ldr	r1, [r2, #0]
 8003cc6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003cca:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_model_weights_map[0] + 6752);
 8003ccc:	f503 51d3 	add.w	r1, r3, #6752	@ 0x1a60
    conv2d_7_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 6752);
 8003cd0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cd4:	4a9d      	ldr	r2, [pc, #628]	@ (8003f4c <ai_model_init+0x340>)
 8003cd6:	6811      	ldr	r1, [r2, #0]
 8003cd8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003cdc:	6011      	str	r1, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_model_weights_map[0] + 7040);
 8003cde:	f503 51dc 	add.w	r1, r3, #7040	@ 0x1b80
    conv2d_7_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 7040);
 8003ce2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ce6:	4a9a      	ldr	r2, [pc, #616]	@ (8003f50 <ai_model_init+0x344>)
 8003ce8:	6811      	ldr	r1, [r2, #0]
 8003cea:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003cee:	6011      	str	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_model_weights_map[0] + 7072);
 8003cf0:	f503 51dd 	add.w	r1, r3, #7072	@ 0x1ba0
    conv2d_8_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 7072);
 8003cf4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cf8:	4a96      	ldr	r2, [pc, #600]	@ (8003f54 <ai_model_init+0x348>)
 8003cfa:	6811      	ldr	r1, [r2, #0]
 8003cfc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d00:	6011      	str	r1, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_model_weights_map[0] + 7584);
 8003d02:	f503 51ed 	add.w	r1, r3, #7584	@ 0x1da0
    conv2d_8_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 7584);
 8003d06:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8003d0a:	4a93      	ldr	r2, [pc, #588]	@ (8003f58 <ai_model_init+0x34c>)
 8003d0c:	6811      	ldr	r1, [r2, #0]
 8003d0e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d12:	6011      	str	r1, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_model_weights_map[0] + 7648);
 8003d14:	f503 51ef 	add.w	r1, r3, #7648	@ 0x1de0
    conv2d_11_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 7648);
 8003d18:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8003d1c:	4a8f      	ldr	r2, [pc, #572]	@ (8003f5c <ai_model_init+0x350>)
 8003d1e:	6811      	ldr	r1, [r2, #0]
 8003d20:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d24:	6011      	str	r1, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_model_weights_map[0] + 7904);
 8003d26:	f503 51f7 	add.w	r1, r3, #7904	@ 0x1ee0
    conv2d_11_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 7904);
 8003d2a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8003d2e:	4a8c      	ldr	r2, [pc, #560]	@ (8003f60 <ai_model_init+0x354>)
 8003d30:	6811      	ldr	r1, [r2, #0]
 8003d32:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d36:	6011      	str	r1, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_model_weights_map[0] + 7920);
 8003d38:	f503 51f7 	add.w	r1, r3, #7904	@ 0x1ee0
 8003d3c:	3110      	adds	r1, #16
    conv2d_14_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 7920);
 8003d3e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8003d42:	4a88      	ldr	r2, [pc, #544]	@ (8003f64 <ai_model_init+0x358>)
 8003d44:	6811      	ldr	r1, [r2, #0]
 8003d46:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d4a:	6011      	str	r1, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_model_weights_map[0] + 8496);
 8003d4c:	f503 5104 	add.w	r1, r3, #8448	@ 0x2100
 8003d50:	3130      	adds	r1, #48	@ 0x30
    conv2d_14_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 8496);
 8003d52:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8003d56:	4a84      	ldr	r2, [pc, #528]	@ (8003f68 <ai_model_init+0x35c>)
 8003d58:	6811      	ldr	r1, [r2, #0]
 8003d5a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d5e:	6011      	str	r1, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_model_weights_map[0] + 8512);
 8003d60:	f503 5105 	add.w	r1, r3, #8512	@ 0x2140
    conv2d_17_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 8512);
 8003d64:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8003d68:	4a80      	ldr	r2, [pc, #512]	@ (8003f6c <ai_model_init+0x360>)
 8003d6a:	6811      	ldr	r1, [r2, #0]
 8003d6c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d70:	6011      	str	r1, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_model_weights_map[0] + 8768);
 8003d72:	f503 5109 	add.w	r1, r3, #8768	@ 0x2240
    conv2d_17_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 8768);
 8003d76:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8003d7a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f70 <ai_model_init+0x364>)
 8003d7c:	6811      	ldr	r1, [r2, #0]
 8003d7e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d82:	6011      	str	r1, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_model_weights_map[0] + 8832);
 8003d84:	f503 510a 	add.w	r1, r3, #8832	@ 0x2280
    conv2d_26_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 8832);
 8003d88:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8003d8c:	4a79      	ldr	r2, [pc, #484]	@ (8003f74 <ai_model_init+0x368>)
 8003d8e:	6811      	ldr	r1, [r2, #0]
 8003d90:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003d94:	6011      	str	r1, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_model_weights_map[0] + 27264);
 8003d96:	f503 41d5 	add.w	r1, r3, #27264	@ 0x6a80
    conv2d_26_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 27264);
 8003d9a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8003d9e:	4a76      	ldr	r2, [pc, #472]	@ (8003f78 <ai_model_init+0x36c>)
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003da6:	6011      	str	r1, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_model_weights_map[0] + 27328);
 8003da8:	f503 41d5 	add.w	r1, r3, #27264	@ 0x6a80
 8003dac:	3140      	adds	r1, #64	@ 0x40
    conv2d_32_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 27328);
 8003dae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8003db2:	4a72      	ldr	r2, [pc, #456]	@ (8003f7c <ai_model_init+0x370>)
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003dba:	6011      	str	r1, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(g_model_weights_map[0] + 33600);
 8003dbc:	f503 4103 	add.w	r1, r3, #33536	@ 0x8300
 8003dc0:	3140      	adds	r1, #64	@ 0x40
    conv2d_32_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 33600);
 8003dc2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8003dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f80 <ai_model_init+0x374>)
 8003dc8:	6811      	ldr	r1, [r2, #0]
 8003dca:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003dce:	6011      	str	r1, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_model_weights_map[0] + 33604);
 8003dd0:	f503 4103 	add.w	r1, r3, #33536	@ 0x8300
 8003dd4:	3144      	adds	r1, #68	@ 0x44
    conv2d_38_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 33604);
 8003dd6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8003dda:	4a6a      	ldr	r2, [pc, #424]	@ (8003f84 <ai_model_init+0x378>)
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003de2:	6011      	str	r1, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(g_model_weights_map[0] + 33996);
 8003de4:	f503 4104 	add.w	r1, r3, #33792	@ 0x8400
 8003de8:	31cc      	adds	r1, #204	@ 0xcc
    conv2d_41_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 33996);
 8003dea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8003dee:	4a66      	ldr	r2, [pc, #408]	@ (8003f88 <ai_model_init+0x37c>)
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003df6:	6011      	str	r1, [r2, #0]
    conv2d_41_bias_array.data = AI_PTR(g_model_weights_map[0] + 52428);
 8003df8:	f503 414c 	add.w	r1, r3, #52224	@ 0xcc00
 8003dfc:	31cc      	adds	r1, #204	@ 0xcc
    conv2d_41_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 52428);
 8003dfe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e02:	4a62      	ldr	r2, [pc, #392]	@ (8003f8c <ai_model_init+0x380>)
 8003e04:	6811      	ldr	r1, [r2, #0]
 8003e06:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e0a:	6011      	str	r1, [r2, #0]
    conv2d_59_weights_array.data = AI_PTR(g_model_weights_map[0] + 52556);
 8003e0c:	f503 414d 	add.w	r1, r3, #52480	@ 0xcd00
 8003e10:	314c      	adds	r1, #76	@ 0x4c
    conv2d_59_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 52556);
 8003e12:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e16:	4a5e      	ldr	r2, [pc, #376]	@ (8003f90 <ai_model_init+0x384>)
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e1e:	6011      	str	r1, [r2, #0]
    conv2d_59_bias_array.data = AI_PTR(g_model_weights_map[0] + 53132);
 8003e20:	f503 414f 	add.w	r1, r3, #52992	@ 0xcf00
 8003e24:	318c      	adds	r1, #140	@ 0x8c
    conv2d_59_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 53132);
 8003e26:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003f94 <ai_model_init+0x388>)
 8003e2c:	6811      	ldr	r1, [r2, #0]
 8003e2e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e32:	6011      	str	r1, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(g_model_weights_map[0] + 53196);
 8003e34:	f503 414f 	add.w	r1, r3, #52992	@ 0xcf00
 8003e38:	31cc      	adds	r1, #204	@ 0xcc
    conv2d_60_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 53196);
 8003e3a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e3e:	4a56      	ldr	r2, [pc, #344]	@ (8003f98 <ai_model_init+0x38c>)
 8003e40:	6811      	ldr	r1, [r2, #0]
 8003e42:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e46:	6011      	str	r1, [r2, #0]
    conv2d_60_bias_array.data = AI_PTR(g_model_weights_map[0] + 55244);
 8003e48:	f503 4157 	add.w	r1, r3, #55040	@ 0xd700
 8003e4c:	31cc      	adds	r1, #204	@ 0xcc
    conv2d_60_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 55244);
 8003e4e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e52:	4a52      	ldr	r2, [pc, #328]	@ (8003f9c <ai_model_init+0x390>)
 8003e54:	6811      	ldr	r1, [r2, #0]
 8003e56:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e5a:	6011      	str	r1, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(g_model_weights_map[0] + 55372);
 8003e5c:	f503 4158 	add.w	r1, r3, #55296	@ 0xd800
 8003e60:	314c      	adds	r1, #76	@ 0x4c
    conv2d_45_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 55372);
 8003e62:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e66:	4a4e      	ldr	r2, [pc, #312]	@ (8003fa0 <ai_model_init+0x394>)
 8003e68:	6811      	ldr	r1, [r2, #0]
 8003e6a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e6e:	6011      	str	r1, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(g_model_weights_map[0] + 55948);
 8003e70:	f503 415a 	add.w	r1, r3, #55808	@ 0xda00
 8003e74:	318c      	adds	r1, #140	@ 0x8c
    conv2d_45_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 55948);
 8003e76:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa4 <ai_model_init+0x398>)
 8003e7c:	6811      	ldr	r1, [r2, #0]
 8003e7e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e82:	6011      	str	r1, [r2, #0]
    conv2d_46_weights_array.data = AI_PTR(g_model_weights_map[0] + 56012);
 8003e84:	f503 415a 	add.w	r1, r3, #55808	@ 0xda00
 8003e88:	31cc      	adds	r1, #204	@ 0xcc
    conv2d_46_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 56012);
 8003e8a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e8e:	4a46      	ldr	r2, [pc, #280]	@ (8003fa8 <ai_model_init+0x39c>)
 8003e90:	6811      	ldr	r1, [r2, #0]
 8003e92:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e96:	6011      	str	r1, [r2, #0]
    conv2d_46_bias_array.data = AI_PTR(g_model_weights_map[0] + 58060);
 8003e98:	f503 4162 	add.w	r1, r3, #57856	@ 0xe200
 8003e9c:	31cc      	adds	r1, #204	@ 0xcc
    conv2d_46_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 58060);
 8003e9e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ea2:	4a42      	ldr	r2, [pc, #264]	@ (8003fac <ai_model_init+0x3a0>)
 8003ea4:	6811      	ldr	r1, [r2, #0]
 8003ea6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003eaa:	6011      	str	r1, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(g_model_weights_map[0] + 58188);
 8003eac:	f503 4163 	add.w	r1, r3, #58112	@ 0xe300
 8003eb0:	314c      	adds	r1, #76	@ 0x4c
    conv2d_49_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 58188);
 8003eb2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8003eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb0 <ai_model_init+0x3a4>)
 8003eb8:	6811      	ldr	r1, [r2, #0]
 8003eba:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003ebe:	6011      	str	r1, [r2, #0]
    conv2d_49_bias_array.data = AI_PTR(g_model_weights_map[0] + 59212);
 8003ec0:	f503 4167 	add.w	r1, r3, #59136	@ 0xe700
 8003ec4:	314c      	adds	r1, #76	@ 0x4c
    conv2d_49_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 59212);
 8003ec6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_52_weights_array.format |= AI_FMT_FLAG_CONST;
 8003eca:	4a3a      	ldr	r2, [pc, #232]	@ (8003fb4 <ai_model_init+0x3a8>)
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003ed2:	6011      	str	r1, [r2, #0]
    conv2d_52_weights_array.data = AI_PTR(g_model_weights_map[0] + 59244);
 8003ed4:	f503 4167 	add.w	r1, r3, #59136	@ 0xe700
 8003ed8:	316c      	adds	r1, #108	@ 0x6c
    conv2d_52_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 59244);
 8003eda:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_52_bias_array.format |= AI_FMT_FLAG_CONST;
 8003ede:	4a36      	ldr	r2, [pc, #216]	@ (8003fb8 <ai_model_init+0x3ac>)
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003ee6:	6011      	str	r1, [r2, #0]
    conv2d_52_bias_array.data = AI_PTR(g_model_weights_map[0] + 61548);
 8003ee8:	f503 4170 	add.w	r1, r3, #61440	@ 0xf000
 8003eec:	316c      	adds	r1, #108	@ 0x6c
    conv2d_52_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 61548);
 8003eee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ef2:	4a32      	ldr	r2, [pc, #200]	@ (8003fbc <ai_model_init+0x3b0>)
 8003ef4:	6811      	ldr	r1, [r2, #0]
 8003ef6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003efa:	6011      	str	r1, [r2, #0]
    conv2d_55_weights_array.data = AI_PTR(g_model_weights_map[0] + 61580);
 8003efc:	f503 4170 	add.w	r1, r3, #61440	@ 0xf000
 8003f00:	318c      	adds	r1, #140	@ 0x8c
    conv2d_55_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 61580);
 8003f02:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8003f06:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <ai_model_init+0x3b4>)
 8003f08:	6811      	ldr	r1, [r2, #0]
 8003f0a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003f0e:	6011      	str	r1, [r2, #0]
    conv2d_55_bias_array.data = AI_PTR(g_model_weights_map[0] + 62604);
 8003f10:	f503 4174 	add.w	r1, r3, #62464	@ 0xf400
 8003f14:	318c      	adds	r1, #140	@ 0x8c
    conv2d_55_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 62604);
 8003f16:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc4 <ai_model_init+0x3b8>)
 8003f1c:	6811      	ldr	r1, [r2, #0]
 8003f1e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003f22:	e051      	b.n	8003fc8 <ai_model_init+0x3bc>
 8003f24:	20017da0 	.word	0x20017da0
 8003f28:	20007188 	.word	0x20007188
 8003f2c:	20007178 	.word	0x20007178
 8003f30:	20007168 	.word	0x20007168
 8003f34:	20007158 	.word	0x20007158
 8003f38:	20007148 	.word	0x20007148
 8003f3c:	20007138 	.word	0x20007138
 8003f40:	20007128 	.word	0x20007128
 8003f44:	20007118 	.word	0x20007118
 8003f48:	20007108 	.word	0x20007108
 8003f4c:	200070f8 	.word	0x200070f8
 8003f50:	200070e8 	.word	0x200070e8
 8003f54:	200070d8 	.word	0x200070d8
 8003f58:	200070c8 	.word	0x200070c8
 8003f5c:	200070b8 	.word	0x200070b8
 8003f60:	200070a8 	.word	0x200070a8
 8003f64:	20007098 	.word	0x20007098
 8003f68:	20007088 	.word	0x20007088
 8003f6c:	20007078 	.word	0x20007078
 8003f70:	20007068 	.word	0x20007068
 8003f74:	20007058 	.word	0x20007058
 8003f78:	20007048 	.word	0x20007048
 8003f7c:	20007038 	.word	0x20007038
 8003f80:	20007028 	.word	0x20007028
 8003f84:	20007018 	.word	0x20007018
 8003f88:	20007008 	.word	0x20007008
 8003f8c:	20006ff8 	.word	0x20006ff8
 8003f90:	20006fe8 	.word	0x20006fe8
 8003f94:	20006fd8 	.word	0x20006fd8
 8003f98:	20006fc8 	.word	0x20006fc8
 8003f9c:	20006fb8 	.word	0x20006fb8
 8003fa0:	20006fa8 	.word	0x20006fa8
 8003fa4:	20006f98 	.word	0x20006f98
 8003fa8:	20006f88 	.word	0x20006f88
 8003fac:	20006f78 	.word	0x20006f78
 8003fb0:	20006f68 	.word	0x20006f68
 8003fb4:	20006f58 	.word	0x20006f58
 8003fb8:	20006f48 	.word	0x20006f48
 8003fbc:	20006f38 	.word	0x20006f38
 8003fc0:	20006f28 	.word	0x20006f28
 8003fc4:	20006f18 	.word	0x20006f18
 8003fc8:	6011      	str	r1, [r2, #0]
    conv2d_64_weights_array.data = AI_PTR(g_model_weights_map[0] + 62732);
 8003fca:	f503 4175 	add.w	r1, r3, #62720	@ 0xf500
 8003fce:	310c      	adds	r1, #12
    conv2d_64_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 62732);
 8003fd0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8003fd4:	49c4      	ldr	r1, [pc, #784]	@ (80042e8 <ai_model_init+0x6dc>)
 8003fd6:	680a      	ldr	r2, [r1, #0]
 8003fd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fdc:	600a      	str	r2, [r1, #0]
    conv2d_64_bias_array.data = AI_PTR(g_model_weights_map[0] + 136460);
 8003fde:	f503 3205 	add.w	r2, r3, #136192	@ 0x21400
 8003fe2:	f502 7086 	add.w	r0, r2, #268	@ 0x10c
    conv2d_70_weights_array.data = AI_PTR(g_model_weights_map[0] + 136588);
 8003fe6:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
    conv2d_64_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 136460);
 8003fea:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8003fee:	49bf      	ldr	r1, [pc, #764]	@ (80042ec <ai_model_init+0x6e0>)
 8003ff0:	6808      	ldr	r0, [r1, #0]
    conv2d_70_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 136588);
 8003ff2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ff6:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_76_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ffa:	4abd      	ldr	r2, [pc, #756]	@ (80042f0 <ai_model_init+0x6e4>)
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8003ffc:	6008      	str	r0, [r1, #0]
    conv2d_79_bias_array.data = AI_PTR(g_model_weights_map[0] + 186388);
 8003ffe:	f503 3036 	add.w	r0, r3, #186368	@ 0x2d800
    conv2d_76_weights_array.format |= AI_FMT_FLAG_CONST;
 8004002:	6811      	ldr	r1, [r2, #0]
 8004004:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004008:	6011      	str	r1, [r2, #0]
    conv2d_76_weights_array.data = AI_PTR(g_model_weights_map[0] + 149132);
 800400a:	f503 3111 	add.w	r1, r3, #148480	@ 0x24400
 800400e:	f501 7123 	add.w	r1, r1, #652	@ 0x28c
    conv2d_76_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 149132);
 8004012:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_79_weights_array.format |= AI_FMT_FLAG_CONST;
 8004016:	4ab7      	ldr	r2, [pc, #732]	@ (80042f4 <ai_model_init+0x6e8>)
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800401e:	6011      	str	r1, [r2, #0]
    conv2d_79_weights_array.data = AI_PTR(g_model_weights_map[0] + 149524);
 8004020:	f503 3112 	add.w	r1, r3, #149504	@ 0x24800
 8004024:	3114      	adds	r1, #20
    conv2d_79_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 149524);
 8004026:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_79_bias_array.format |= AI_FMT_FLAG_CONST;
 800402a:	4ab3      	ldr	r2, [pc, #716]	@ (80042f8 <ai_model_init+0x6ec>)
 800402c:	6811      	ldr	r1, [r2, #0]
 800402e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004032:	6011      	str	r1, [r2, #0]
    conv2d_79_bias_array.data = AI_PTR(g_model_weights_map[0] + 186388);
 8004034:	f100 0114 	add.w	r1, r0, #20
    conv2d_79_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 186388);
 8004038:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_97_weights_array.format |= AI_FMT_FLAG_CONST;
 800403c:	4aaf      	ldr	r2, [pc, #700]	@ (80042fc <ai_model_init+0x6f0>)
 800403e:	6811      	ldr	r1, [r2, #0]
 8004040:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004044:	6011      	str	r1, [r2, #0]
    conv2d_97_weights_array.data = AI_PTR(g_model_weights_map[0] + 186516);
 8004046:	f100 0194 	add.w	r1, r0, #148	@ 0x94
    conv2d_97_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 186516);
 800404a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_97_bias_array.format |= AI_FMT_FLAG_CONST;
 800404e:	4aac      	ldr	r2, [pc, #688]	@ (8004300 <ai_model_init+0x6f4>)
 8004050:	6811      	ldr	r1, [r2, #0]
 8004052:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004056:	6011      	str	r1, [r2, #0]
    conv2d_97_bias_array.data = AI_PTR(g_model_weights_map[0] + 187092);
 8004058:	f500 7135 	add.w	r1, r0, #724	@ 0x2d4
    conv2d_98_weights_array.data = AI_PTR(g_model_weights_map[0] + 187156);
 800405c:	f500 7045 	add.w	r0, r0, #788	@ 0x314
    conv2d_97_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 187092);
 8004060:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_98_weights_array.format |= AI_FMT_FLAG_CONST;
 8004064:	4aa7      	ldr	r2, [pc, #668]	@ (8004304 <ai_model_init+0x6f8>)
 8004066:	6811      	ldr	r1, [r2, #0]
 8004068:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800406c:	6011      	str	r1, [r2, #0]
    conv2d_98_bias_array.format |= AI_FMT_FLAG_CONST;
 800406e:	49a6      	ldr	r1, [pc, #664]	@ (8004308 <ai_model_init+0x6fc>)
    conv2d_98_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 187156);
 8004070:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_98_bias_array.format |= AI_FMT_FLAG_CONST;
 8004074:	680a      	ldr	r2, [r1, #0]
 8004076:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800407a:	600a      	str	r2, [r1, #0]
    conv2d_98_bias_array.data = AI_PTR(g_model_weights_map[0] + 189204);
 800407c:	f503 3238 	add.w	r2, r3, #188416	@ 0x2e000
 8004080:	f502 7045 	add.w	r0, r2, #788	@ 0x314
    conv2d_83_weights_array.data = AI_PTR(g_model_weights_map[0] + 189332);
 8004084:	f502 7265 	add.w	r2, r2, #916	@ 0x394
    conv2d_98_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 189204);
 8004088:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_83_weights_array.format |= AI_FMT_FLAG_CONST;
 800408c:	499f      	ldr	r1, [pc, #636]	@ (800430c <ai_model_init+0x700>)
 800408e:	6808      	ldr	r0, [r1, #0]
 8004090:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_83_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 189332);
 8004094:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_83_weights_array.format |= AI_FMT_FLAG_CONST;
 8004098:	6008      	str	r0, [r1, #0]
    conv2d_83_bias_array.format |= AI_FMT_FLAG_CONST;
 800409a:	499d      	ldr	r1, [pc, #628]	@ (8004310 <ai_model_init+0x704>)
 800409c:	680a      	ldr	r2, [r1, #0]
 800409e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040a2:	600a      	str	r2, [r1, #0]
    conv2d_83_bias_array.data = AI_PTR(g_model_weights_map[0] + 189908);
 80040a4:	f503 3239 	add.w	r2, r3, #189440	@ 0x2e400
 80040a8:	f502 70ea 	add.w	r0, r2, #468	@ 0x1d4
    conv2d_84_weights_array.data = AI_PTR(g_model_weights_map[0] + 189972);
 80040ac:	f502 7205 	add.w	r2, r2, #532	@ 0x214
    conv2d_83_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 189908);
 80040b0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_84_weights_array.format |= AI_FMT_FLAG_CONST;
 80040b4:	4997      	ldr	r1, [pc, #604]	@ (8004314 <ai_model_init+0x708>)
 80040b6:	6808      	ldr	r0, [r1, #0]
 80040b8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_84_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 189972);
 80040bc:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_84_weights_array.format |= AI_FMT_FLAG_CONST;
 80040c0:	6008      	str	r0, [r1, #0]
    conv2d_84_bias_array.format |= AI_FMT_FLAG_CONST;
 80040c2:	4995      	ldr	r1, [pc, #596]	@ (8004318 <ai_model_init+0x70c>)
 80040c4:	680a      	ldr	r2, [r1, #0]
 80040c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040ca:	600a      	str	r2, [r1, #0]
    conv2d_84_bias_array.data = AI_PTR(g_model_weights_map[0] + 192020);
 80040cc:	f503 323b 	add.w	r2, r3, #191488	@ 0x2ec00
 80040d0:	f502 7005 	add.w	r0, r2, #532	@ 0x214
    conv2d_87_weights_array.data = AI_PTR(g_model_weights_map[0] + 192148);
 80040d4:	f502 7225 	add.w	r2, r2, #660	@ 0x294
    conv2d_84_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 192020);
 80040d8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 80040dc:	498f      	ldr	r1, [pc, #572]	@ (800431c <ai_model_init+0x710>)
 80040de:	6808      	ldr	r0, [r1, #0]
 80040e0:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_87_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 192148);
 80040e4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 80040e8:	6008      	str	r0, [r1, #0]
    conv2d_87_bias_array.format |= AI_FMT_FLAG_CONST;
 80040ea:	498d      	ldr	r1, [pc, #564]	@ (8004320 <ai_model_init+0x714>)
 80040ec:	680a      	ldr	r2, [r1, #0]
 80040ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040f2:	600a      	str	r2, [r1, #0]
    conv2d_87_bias_array.data = AI_PTR(g_model_weights_map[0] + 194196);
 80040f4:	f503 323d 	add.w	r2, r3, #193536	@ 0x2f400
 80040f8:	f502 7025 	add.w	r0, r2, #660	@ 0x294
    conv2d_90_weights_array.data = AI_PTR(g_model_weights_map[0] + 194260);
 80040fc:	f502 7235 	add.w	r2, r2, #724	@ 0x2d4
    conv2d_87_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 194196);
 8004100:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_90_weights_array.format |= AI_FMT_FLAG_CONST;
 8004104:	4987      	ldr	r1, [pc, #540]	@ (8004324 <ai_model_init+0x718>)
 8004106:	6808      	ldr	r0, [r1, #0]
 8004108:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_90_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 194260);
 800410c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_90_weights_array.format |= AI_FMT_FLAG_CONST;
 8004110:	6008      	str	r0, [r1, #0]
    conv2d_90_bias_array.format |= AI_FMT_FLAG_CONST;
 8004112:	4985      	ldr	r1, [pc, #532]	@ (8004328 <ai_model_init+0x71c>)
 8004114:	680a      	ldr	r2, [r1, #0]
 8004116:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800411a:	600a      	str	r2, [r1, #0]
    conv2d_90_bias_array.data = AI_PTR(g_model_weights_map[0] + 203476);
 800411c:	f503 3246 	add.w	r2, r3, #202752	@ 0x31800
 8004120:	f502 7035 	add.w	r0, r2, #724	@ 0x2d4
    conv2d_93_weights_array.data = AI_PTR(g_model_weights_map[0] + 203540);
 8004124:	f502 7245 	add.w	r2, r2, #788	@ 0x314
    conv2d_90_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 203476);
 8004128:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_93_weights_array.format |= AI_FMT_FLAG_CONST;
 800412c:	497f      	ldr	r1, [pc, #508]	@ (800432c <ai_model_init+0x720>)
 800412e:	6808      	ldr	r0, [r1, #0]
 8004130:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_93_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 203540);
 8004134:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_93_weights_array.format |= AI_FMT_FLAG_CONST;
 8004138:	6008      	str	r0, [r1, #0]
    conv2d_93_bias_array.format |= AI_FMT_FLAG_CONST;
 800413a:	497d      	ldr	r1, [pc, #500]	@ (8004330 <ai_model_init+0x724>)
 800413c:	680a      	ldr	r2, [r1, #0]
 800413e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004142:	600a      	str	r2, [r1, #0]
    conv2d_93_bias_array.data = AI_PTR(g_model_weights_map[0] + 205588);
 8004144:	f503 3248 	add.w	r2, r3, #204800	@ 0x32000
 8004148:	f502 7045 	add.w	r0, r2, #788	@ 0x314
    conv2d_102_weights_array.data = AI_PTR(g_model_weights_map[0] + 205716);
 800414c:	f502 7265 	add.w	r2, r2, #916	@ 0x394
    conv2d_93_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 205588);
 8004150:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_102_weights_array.format |= AI_FMT_FLAG_CONST;
 8004154:	4977      	ldr	r1, [pc, #476]	@ (8004334 <ai_model_init+0x728>)
 8004156:	6808      	ldr	r0, [r1, #0]
 8004158:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_102_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 205716);
 800415c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_102_weights_array.format |= AI_FMT_FLAG_CONST;
 8004160:	6008      	str	r0, [r1, #0]
    conv2d_102_bias_array.format |= AI_FMT_FLAG_CONST;
 8004162:	4975      	ldr	r1, [pc, #468]	@ (8004338 <ai_model_init+0x72c>)
 8004164:	680a      	ldr	r2, [r1, #0]
 8004166:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800416a:	600a      	str	r2, [r1, #0]
    conv2d_102_bias_array.data = AI_PTR(g_model_weights_map[0] + 279444);
 800416c:	f503 2288 	add.w	r2, r3, #278528	@ 0x44000
 8004170:	f502 7065 	add.w	r0, r2, #916	@ 0x394
    conv2d_108_weights_array.data = AI_PTR(g_model_weights_map[0] + 279572);
 8004174:	f202 4214 	addw	r2, r2, #1044	@ 0x414
    conv2d_102_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 279444);
 8004178:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_108_weights_array.format |= AI_FMT_FLAG_CONST;
 800417c:	496f      	ldr	r1, [pc, #444]	@ (800433c <ai_model_init+0x730>)
 800417e:	6808      	ldr	r0, [r1, #0]
 8004180:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_108_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 279572);
 8004184:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_108_weights_array.format |= AI_FMT_FLAG_CONST;
 8004188:	6008      	str	r0, [r1, #0]
    conv2d_114_weights_array.format |= AI_FMT_FLAG_CONST;
 800418a:	496d      	ldr	r1, [pc, #436]	@ (8004340 <ai_model_init+0x734>)
 800418c:	680a      	ldr	r2, [r1, #0]
 800418e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004192:	600a      	str	r2, [r1, #0]
    conv2d_114_weights_array.data = AI_PTR(g_model_weights_map[0] + 292116);
 8004194:	f503 228e 	add.w	r2, r3, #290816	@ 0x47000
 8004198:	f202 5014 	addw	r0, r2, #1300	@ 0x514
    conv2d_117_weights_array.data = AI_PTR(g_model_weights_map[0] + 292508);
 800419c:	f202 629c 	addw	r2, r2, #1692	@ 0x69c
    conv2d_114_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 292116);
 80041a0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_117_weights_array.format |= AI_FMT_FLAG_CONST;
 80041a4:	4967      	ldr	r1, [pc, #412]	@ (8004344 <ai_model_init+0x738>)
 80041a6:	6808      	ldr	r0, [r1, #0]
 80041a8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_117_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 292508);
 80041ac:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_117_weights_array.format |= AI_FMT_FLAG_CONST;
 80041b0:	6008      	str	r0, [r1, #0]
    conv2d_117_bias_array.format |= AI_FMT_FLAG_CONST;
 80041b2:	4965      	ldr	r1, [pc, #404]	@ (8004348 <ai_model_init+0x73c>)
 80041b4:	680a      	ldr	r2, [r1, #0]
 80041b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80041ba:	600a      	str	r2, [r1, #0]
    conv2d_117_bias_array.data = AI_PTR(g_model_weights_map[0] + 300700);
 80041bc:	f503 2292 	add.w	r2, r3, #299008	@ 0x49000
    gemm_121_bias_array.data = AI_PTR(g_model_weights_map[0] + 302236);
 80041c0:	f503 2393 	add.w	r3, r3, #301056	@ 0x49800
    conv2d_117_bias_array.data = AI_PTR(g_model_weights_map[0] + 300700);
 80041c4:	f202 609c 	addw	r0, r2, #1692	@ 0x69c
    gemm_121_weights_array.data = AI_PTR(g_model_weights_map[0] + 300956);
 80041c8:	f202 729c 	addw	r2, r2, #1948	@ 0x79c
    conv2d_117_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 300700);
 80041cc:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_121_weights_array.format |= AI_FMT_FLAG_CONST;
 80041d0:	495e      	ldr	r1, [pc, #376]	@ (800434c <ai_model_init+0x740>)
 80041d2:	6808      	ldr	r0, [r1, #0]
    gemm_121_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 300956);
 80041d4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_121_weights_array.format |= AI_FMT_FLAG_CONST;
 80041d8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    gemm_121_bias_array.format |= AI_FMT_FLAG_CONST;
 80041dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004350 <ai_model_init+0x744>)
    gemm_121_weights_array.format |= AI_FMT_FLAG_CONST;
 80041de:	6008      	str	r0, [r1, #0]
    gemm_121_bias_array.format |= AI_FMT_FLAG_CONST;
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80041e6:	6011      	str	r1, [r2, #0]
    gemm_121_bias_array.data = AI_PTR(g_model_weights_map[0] + 302236);
 80041e8:	f203 419c 	addw	r1, r3, #1180	@ 0x49c
    gemm_121_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 302236);
 80041ec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    reduce_112_Placeholder_array.format |= AI_FMT_FLAG_CONST;
 80041f0:	4a58      	ldr	r2, [pc, #352]	@ (8004354 <ai_model_init+0x748>)
 80041f2:	6811      	ldr	r1, [r2, #0]
 80041f4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80041f8:	6011      	str	r1, [r2, #0]
    reduce_112_Placeholder_array.data = AI_PTR(g_model_weights_map[0] + 302256);
 80041fa:	f503 6196 	add.w	r1, r3, #1200	@ 0x4b0
    reduce_112_Placeholder_array.data_start = AI_PTR(g_model_weights_map[0] + 302256);
 80041fe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    reduce_74_Placeholder_array.format |= AI_FMT_FLAG_CONST;
 8004202:	4a55      	ldr	r2, [pc, #340]	@ (8004358 <ai_model_init+0x74c>)
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800420a:	6011      	str	r1, [r2, #0]
    reduce_74_Placeholder_array.data = AI_PTR(g_model_weights_map[0] + 302260);
 800420c:	f203 41b4 	addw	r1, r3, #1204	@ 0x4b4
    reduce_36_Placeholder_array.data = AI_PTR(g_model_weights_map[0] + 302264);
 8004210:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
    reduce_74_Placeholder_array.data_start = AI_PTR(g_model_weights_map[0] + 302260);
 8004214:	e9c2 1102 	strd	r1, r1, [r2, #8]
    reduce_36_Placeholder_array.format |= AI_FMT_FLAG_CONST;
 8004218:	4a50      	ldr	r2, [pc, #320]	@ (800435c <ai_model_init+0x750>)
 800421a:	6811      	ldr	r1, [r2, #0]
 800421c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    reduce_36_Placeholder_array.data_start = AI_PTR(g_model_weights_map[0] + 302264);
 8004220:	e9c2 3302 	strd	r3, r3, [r2, #8]
    reduce_36_Placeholder_array.format |= AI_FMT_FLAG_CONST;
 8004224:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_model_activations_map, 1, params)) {
 8004226:	4f4e      	ldr	r7, [pc, #312]	@ (8004360 <ai_model_init+0x754>)
 8004228:	462a      	mov	r2, r5
 800422a:	2101      	movs	r1, #1
 800422c:	4638      	mov	r0, r7
 800422e:	f000 fc67 	bl	8004b00 <ai_platform_get_activations_map>
 8004232:	4680      	mov	r8, r0
 8004234:	2800      	cmp	r0, #0
 8004236:	f000 8351 	beq.w	80048dc <ai_model_init+0xcd0>
    serving_default_input_10_output_array.data = AI_PTR(g_model_activations_map[0] + 27328);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	4949      	ldr	r1, [pc, #292]	@ (8004364 <ai_model_init+0x758>)
 800423e:	f503 42d5 	add.w	r2, r3, #27264	@ 0x6a80
    nl_1_output_array.data = AI_PTR(g_model_activations_map[0] + 15040);
 8004242:	f503 506b 	add.w	r0, r3, #15040	@ 0x3ac0
    conv2d_3_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 8004246:	f503 5540 	add.w	r5, r3, #12288	@ 0x3000
    conv2d_22_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 800424a:	f503 57c0 	add.w	r7, r3, #6144	@ 0x1800
    serving_default_input_10_output_array.data = AI_PTR(g_model_activations_map[0] + 27328);
 800424e:	3240      	adds	r2, #64	@ 0x40
    nl_12_output_array.data = AI_PTR(g_model_activations_map[0] + 15360);
 8004250:	f503 5e70 	add.w	lr, r3, #15360	@ 0x3c00
    eltwise_16_output_array.data = AI_PTR(g_model_activations_map[0] + 39936);
 8004254:	f503 441c 	add.w	r4, r3, #39936	@ 0x9c00
    concat_31_output_array.data = AI_PTR(g_model_activations_map[0] + 128);
 8004258:	f103 0c80 	add.w	ip, r3, #128	@ 0x80
    conv2d_41_output_array.data = AI_PTR(g_model_activations_map[0] + 13824);
 800425c:	f503 5958 	add.w	r9, r3, #13824	@ 0x3600
    conv2d_60_output_array.data = AI_PTR(g_model_activations_map[0] + 9216);
 8004260:	f503 5a10 	add.w	sl, r3, #9216	@ 0x2400
    concat_75_output_array.data = AI_PTR(g_model_activations_map[0] + 6536);
 8004264:	f8df b148 	ldr.w	fp, [pc, #328]	@ 80043b0 <ai_model_init+0x7a4>
    serving_default_input_10_output_array.data_start = AI_PTR(g_model_activations_map[0] + 27328);
 8004268:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_0_output_array.data = AI_PTR(g_model_activations_map[0] + 21184);
 800426c:	f503 42a5 	add.w	r2, r3, #21120	@ 0x5280
 8004270:	493d      	ldr	r1, [pc, #244]	@ (8004368 <ai_model_init+0x75c>)
 8004272:	3240      	adds	r2, #64	@ 0x40
    conv2d_0_output_array.data_start = AI_PTR(g_model_activations_map[0] + 21184);
 8004274:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_1_output_array.data = AI_PTR(g_model_activations_map[0] + 15040);
 8004278:	493c      	ldr	r1, [pc, #240]	@ (800436c <ai_model_init+0x760>)
    nl_1_output_array.data_start = AI_PTR(g_model_activations_map[0] + 15040);
 800427a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    eltwise_2_output_array.data = AI_PTR(g_model_activations_map[0] + 21184);
 800427e:	493c      	ldr	r1, [pc, #240]	@ (8004370 <ai_model_init+0x764>)
    split_6_output0_array.data = AI_PTR(g_model_activations_map[0] + 18432);
 8004280:	f503 4090 	add.w	r0, r3, #18432	@ 0x4800
    eltwise_2_output_array.data_start = AI_PTR(g_model_activations_map[0] + 21184);
 8004284:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 8004288:	4a3a      	ldr	r2, [pc, #232]	@ (8004374 <ai_model_init+0x768>)
    nl_4_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 800428a:	493b      	ldr	r1, [pc, #236]	@ (8004378 <ai_model_init+0x76c>)
    conv2d_3_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 800428c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    nl_4_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 8004290:	f503 42c0 	add.w	r2, r3, #24576	@ 0x6000
    nl_4_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 8004294:	e9c1 2202 	strd	r2, r2, [r1, #8]
    eltwise_5_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 8004298:	4938      	ldr	r1, [pc, #224]	@ (800437c <ai_model_init+0x770>)
    eltwise_5_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 800429a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    split_6_output0_array.data = AI_PTR(g_model_activations_map[0] + 18432);
 800429e:	4938      	ldr	r1, [pc, #224]	@ (8004380 <ai_model_init+0x774>)
    split_6_output0_array.data_start = AI_PTR(g_model_activations_map[0] + 18432);
 80042a0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    split_6_output1_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80042a4:	4937      	ldr	r1, [pc, #220]	@ (8004384 <ai_model_init+0x778>)
    conv2d_21_output_array.data = AI_PTR(g_model_activations_map[0] + 30720);
 80042a6:	f503 40f0 	add.w	r0, r3, #30720	@ 0x7800
    split_6_output1_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80042aa:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_21_output_array.data = AI_PTR(g_model_activations_map[0] + 30720);
 80042ae:	4936      	ldr	r1, [pc, #216]	@ (8004388 <ai_model_init+0x77c>)
    conv2d_21_output_array.data_start = AI_PTR(g_model_activations_map[0] + 30720);
 80042b0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_22_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 80042b4:	4935      	ldr	r1, [pc, #212]	@ (800438c <ai_model_init+0x780>)
    conv2d_14_output_array.data = AI_PTR(g_model_activations_map[0] + 14800);
 80042b6:	4836      	ldr	r0, [pc, #216]	@ (8004390 <ai_model_init+0x784>)
    conv2d_22_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 80042b8:	e9c1 7702 	strd	r7, r7, [r1, #8]
    nl_23_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 80042bc:	4935      	ldr	r1, [pc, #212]	@ (8004394 <ai_model_init+0x788>)
    nl_23_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 80042be:	e9c1 2202 	strd	r2, r2, [r1, #8]
    eltwise_24_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 80042c2:	4935      	ldr	r1, [pc, #212]	@ (8004398 <ai_model_init+0x78c>)
    eltwise_24_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 80042c4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80042c8:	4934      	ldr	r1, [pc, #208]	@ (800439c <ai_model_init+0x790>)
    conv2d_7_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80042ca:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_8_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80042ce:	4934      	ldr	r1, [pc, #208]	@ (80043a0 <ai_model_init+0x794>)
    conv2d_8_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80042d0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_9_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80042d4:	4933      	ldr	r1, [pc, #204]	@ (80043a4 <ai_model_init+0x798>)
    nl_9_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80042d6:	e9c1 5502 	strd	r5, r5, [r1, #8]
    eltwise_10_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80042da:	4933      	ldr	r1, [pc, #204]	@ (80043a8 <ai_model_init+0x79c>)
    eltwise_10_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80042dc:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_11_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80042e0:	4932      	ldr	r1, [pc, #200]	@ (80043ac <ai_model_init+0x7a0>)
    conv2d_11_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80042e2:	e9c1 5502 	strd	r5, r5, [r1, #8]
 80042e6:	e065      	b.n	80043b4 <ai_model_init+0x7a8>
 80042e8:	20006f08 	.word	0x20006f08
 80042ec:	20006ef8 	.word	0x20006ef8
 80042f0:	20006ee8 	.word	0x20006ee8
 80042f4:	20006ed8 	.word	0x20006ed8
 80042f8:	20006ec8 	.word	0x20006ec8
 80042fc:	20006eb8 	.word	0x20006eb8
 8004300:	20006ea8 	.word	0x20006ea8
 8004304:	20006e98 	.word	0x20006e98
 8004308:	20006e88 	.word	0x20006e88
 800430c:	20006e78 	.word	0x20006e78
 8004310:	20006e68 	.word	0x20006e68
 8004314:	20006e58 	.word	0x20006e58
 8004318:	20006e48 	.word	0x20006e48
 800431c:	20006e38 	.word	0x20006e38
 8004320:	20006e28 	.word	0x20006e28
 8004324:	20006e18 	.word	0x20006e18
 8004328:	20006e08 	.word	0x20006e08
 800432c:	20006df8 	.word	0x20006df8
 8004330:	20006de8 	.word	0x20006de8
 8004334:	20006dd8 	.word	0x20006dd8
 8004338:	20006dc8 	.word	0x20006dc8
 800433c:	20006db8 	.word	0x20006db8
 8004340:	20006da8 	.word	0x20006da8
 8004344:	20006d98 	.word	0x20006d98
 8004348:	20006d88 	.word	0x20006d88
 800434c:	20006d78 	.word	0x20006d78
 8004350:	20006d68 	.word	0x20006d68
 8004354:	20006538 	.word	0x20006538
 8004358:	20006528 	.word	0x20006528
 800435c:	20006518 	.word	0x20006518
 8004360:	20017da4 	.word	0x20017da4
 8004364:	20006d58 	.word	0x20006d58
 8004368:	20006d48 	.word	0x20006d48
 800436c:	20006d38 	.word	0x20006d38
 8004370:	20006d28 	.word	0x20006d28
 8004374:	20006d18 	.word	0x20006d18
 8004378:	20006d08 	.word	0x20006d08
 800437c:	20006cf8 	.word	0x20006cf8
 8004380:	20006ce8 	.word	0x20006ce8
 8004384:	20006cd8 	.word	0x20006cd8
 8004388:	20006cc8 	.word	0x20006cc8
 800438c:	20006cb8 	.word	0x20006cb8
 8004390:	20006c18 	.word	0x20006c18
 8004394:	20006ca8 	.word	0x20006ca8
 8004398:	20006c98 	.word	0x20006c98
 800439c:	20006c88 	.word	0x20006c88
 80043a0:	20006c78 	.word	0x20006c78
 80043a4:	20006c68 	.word	0x20006c68
 80043a8:	20006c58 	.word	0x20006c58
 80043ac:	20006c48 	.word	0x20006c48
 80043b0:	20006858 	.word	0x20006858
    nl_12_output_array.data = AI_PTR(g_model_activations_map[0] + 15360);
 80043b4:	49d3      	ldr	r1, [pc, #844]	@ (8004704 <ai_model_init+0xaf8>)
    nl_12_output_array.data_start = AI_PTR(g_model_activations_map[0] + 15360);
 80043b6:	e9c1 ee02 	strd	lr, lr, [r1, #8]
    eltwise_13_output_array.data = AI_PTR(g_model_activations_map[0] + 15360);
 80043ba:	49d3      	ldr	r1, [pc, #844]	@ (8004708 <ai_model_init+0xafc>)
    eltwise_13_output_array.data_start = AI_PTR(g_model_activations_map[0] + 15360);
 80043bc:	e9c1 ee02 	strd	lr, lr, [r1, #8]
    conv2d_14_output_array.data = AI_PTR(g_model_activations_map[0] + 14800);
 80043c0:	f503 5167 	add.w	r1, r3, #14784	@ 0x39c0
 80043c4:	3110      	adds	r1, #16
    conv2d_14_output_array.data_start = AI_PTR(g_model_activations_map[0] + 14800);
 80043c6:	e9c0 1102 	strd	r1, r1, [r0, #8]
    nl_15_output_array.data = AI_PTR(g_model_activations_map[0] + 36864);
 80043ca:	f503 4110 	add.w	r1, r3, #36864	@ 0x9000
 80043ce:	48cf      	ldr	r0, [pc, #828]	@ (800470c <ai_model_init+0xb00>)
    nl_15_output_array.data_start = AI_PTR(g_model_activations_map[0] + 36864);
 80043d0:	e9c0 1102 	strd	r1, r1, [r0, #8]
    eltwise_16_output_array.data = AI_PTR(g_model_activations_map[0] + 39936);
 80043d4:	48ce      	ldr	r0, [pc, #824]	@ (8004710 <ai_model_init+0xb04>)
    eltwise_16_output_array.data_start = AI_PTR(g_model_activations_map[0] + 39936);
 80043d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_17_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80043da:	48ce      	ldr	r0, [pc, #824]	@ (8004714 <ai_model_init+0xb08>)
    reduce_36_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 80043dc:	f503 7440 	add.w	r4, r3, #768	@ 0x300
    conv2d_17_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80043e0:	e9c0 5502 	strd	r5, r5, [r0, #8]
    nl_18_output_array.data = AI_PTR(g_model_activations_map[0] + 36864);
 80043e4:	48cc      	ldr	r0, [pc, #816]	@ (8004718 <ai_model_init+0xb0c>)
    nl_18_output_array.data_start = AI_PTR(g_model_activations_map[0] + 36864);
 80043e6:	e9c0 1102 	strd	r1, r1, [r0, #8]
    eltwise_19_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80043ea:	48cc      	ldr	r0, [pc, #816]	@ (800471c <ai_model_init+0xb10>)
    eltwise_19_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80043ec:	e9c0 5502 	strd	r5, r5, [r0, #8]
    eltwise_20_output_array.data = AI_PTR(g_model_activations_map[0] + 36864);
 80043f0:	48cb      	ldr	r0, [pc, #812]	@ (8004720 <ai_model_init+0xb14>)
    eltwise_20_output_array.data_start = AI_PTR(g_model_activations_map[0] + 36864);
 80043f2:	e9c0 1102 	strd	r1, r1, [r0, #8]
    concat_25_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80043f6:	49cb      	ldr	r1, [pc, #812]	@ (8004724 <ai_model_init+0xb18>)
    pool_29_output_array.data = AI_PTR(g_model_activations_map[0] + 64);
 80043f8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
    concat_25_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80043fc:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_26_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 8004400:	49c9      	ldr	r1, [pc, #804]	@ (8004728 <ai_model_init+0xb1c>)
    conv2d_26_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 8004402:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_27_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004406:	49c9      	ldr	r1, [pc, #804]	@ (800472c <ai_model_init+0xb20>)
    nl_27_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004408:	e9c1 3302 	strd	r3, r3, [r1, #8]
    eltwise_28_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 800440c:	49c8      	ldr	r1, [pc, #800]	@ (8004730 <ai_model_init+0xb24>)
    eltwise_28_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 800440e:	e9c1 5502 	strd	r5, r5, [r1, #8]
    pool_30_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004412:	49c8      	ldr	r1, [pc, #800]	@ (8004734 <ai_model_init+0xb28>)
    pool_30_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004414:	e9c1 3302 	strd	r3, r3, [r1, #8]
    pool_29_output_array.data = AI_PTR(g_model_activations_map[0] + 64);
 8004418:	49c7      	ldr	r1, [pc, #796]	@ (8004738 <ai_model_init+0xb2c>)
    pool_29_output_array.data_start = AI_PTR(g_model_activations_map[0] + 64);
 800441a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    concat_31_output_array.data = AI_PTR(g_model_activations_map[0] + 128);
 800441e:	49c7      	ldr	r1, [pc, #796]	@ (800473c <ai_model_init+0xb30>)
    nl_33_output_array.data = AI_PTR(g_model_activations_map[0] + 4);
 8004420:	1d18      	adds	r0, r3, #4
    concat_31_output_array.data_start = AI_PTR(g_model_activations_map[0] + 128);
 8004422:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_32_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004426:	49c6      	ldr	r1, [pc, #792]	@ (8004740 <ai_model_init+0xb34>)
    conv2d_32_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004428:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_33_output_array.data = AI_PTR(g_model_activations_map[0] + 4);
 800442c:	49c5      	ldr	r1, [pc, #788]	@ (8004744 <ai_model_init+0xb38>)
    nl_33_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4);
 800442e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    eltwise_34_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 8004432:	49c5      	ldr	r1, [pc, #788]	@ (8004748 <ai_model_init+0xb3c>)
    eltwise_34_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 8004434:	e9c1 2202 	strd	r2, r2, [r1, #8]
    reduce_36_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004438:	4ac4      	ldr	r2, [pc, #784]	@ (800474c <ai_model_init+0xb40>)
    concat_37_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 800443a:	49c5      	ldr	r1, [pc, #788]	@ (8004750 <ai_model_init+0xb44>)
    reduce_36_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800443c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    reduce_36_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 8004440:	4ac4      	ldr	r2, [pc, #784]	@ (8004754 <ai_model_init+0xb48>)
    reduce_36_Mul_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 8004442:	e9c2 4402 	strd	r4, r4, [r2, #8]
    reduce_35_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004446:	4ac4      	ldr	r2, [pc, #784]	@ (8004758 <ai_model_init+0xb4c>)
    reduce_35_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004448:	e9c2 3302 	strd	r3, r3, [r2, #8]
    concat_37_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 800444c:	f503 62c0 	add.w	r2, r3, #1536	@ 0x600
    concat_37_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8004450:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_38_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004454:	49c1      	ldr	r1, [pc, #772]	@ (800475c <ai_model_init+0xb50>)
    conv2d_38_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004456:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_39_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 800445a:	49c1      	ldr	r1, [pc, #772]	@ (8004760 <ai_model_init+0xb54>)
    nl_39_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 800445c:	e9c1 4402 	strd	r4, r4, [r1, #8]
    eltwise_40_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8004460:	49c0      	ldr	r1, [pc, #768]	@ (8004764 <ai_model_init+0xb58>)
    eltwise_40_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8004462:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_41_output_array.data = AI_PTR(g_model_activations_map[0] + 13824);
 8004466:	49c0      	ldr	r1, [pc, #768]	@ (8004768 <ai_model_init+0xb5c>)
    conv2d_41_output_array.data_start = AI_PTR(g_model_activations_map[0] + 13824);
 8004468:	e9c1 9902 	strd	r9, r9, [r1, #8]
    nl_42_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800446c:	49bf      	ldr	r1, [pc, #764]	@ (800476c <ai_model_init+0xb60>)
    split_44_output1_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 800446e:	f8df 93cc 	ldr.w	r9, [pc, #972]	@ 800483c <ai_model_init+0xc30>
    nl_42_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004472:	e9c1 3302 	strd	r3, r3, [r1, #8]
    eltwise_43_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 8004476:	49be      	ldr	r1, [pc, #760]	@ (8004770 <ai_model_init+0xb64>)
    eltwise_43_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 8004478:	e9c1 7702 	strd	r7, r7, [r1, #8]
    split_44_output0_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800447c:	49bd      	ldr	r1, [pc, #756]	@ (8004774 <ai_model_init+0xb68>)
    split_44_output0_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800447e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    split_44_output1_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8004482:	f503 6140 	add.w	r1, r3, #3072	@ 0xc00
    split_44_output1_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8004486:	e9c9 1102 	strd	r1, r1, [r9, #8]
    conv2d_59_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 800448a:	f8df 93b4 	ldr.w	r9, [pc, #948]	@ 8004840 <ai_model_init+0xc34>
    conv2d_59_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 800448e:	e9c9 7702 	strd	r7, r7, [r9, #8]
    conv2d_60_output_array.data = AI_PTR(g_model_activations_map[0] + 9216);
 8004492:	f8df 93b0 	ldr.w	r9, [pc, #944]	@ 8004844 <ai_model_init+0xc38>
    conv2d_60_output_array.data_start = AI_PTR(g_model_activations_map[0] + 9216);
 8004496:	e9c9 aa02 	strd	sl, sl, [r9, #8]
    nl_61_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 800449a:	f8df 93ac 	ldr.w	r9, [pc, #940]	@ 8004848 <ai_model_init+0xc3c>
    conv2d_55_output_array.data = AI_PTR(g_model_activations_map[0] + 4608);
 800449e:	f503 5a90 	add.w	sl, r3, #4608	@ 0x1200
    nl_61_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 80044a2:	e9c9 1102 	strd	r1, r1, [r9, #8]
    eltwise_62_output_array.data = AI_PTR(g_model_activations_map[0] + 15360);
 80044a6:	f8df 93a4 	ldr.w	r9, [pc, #932]	@ 800484c <ai_model_init+0xc40>
    eltwise_62_output_array.data_start = AI_PTR(g_model_activations_map[0] + 15360);
 80044aa:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_45_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 80044ae:	f8df e3a0 	ldr.w	lr, [pc, #928]	@ 8004850 <ai_model_init+0xc44>
    eltwise_48_output_array.data = AI_PTR(g_model_activations_map[0] + 21504);
 80044b2:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8004854 <ai_model_init+0xc48>
    conv2d_45_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 80044b6:	e9ce 1102 	strd	r1, r1, [lr, #8]
    conv2d_46_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 80044ba:	f8df e39c 	ldr.w	lr, [pc, #924]	@ 8004858 <ai_model_init+0xc4c>
    conv2d_46_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 80044be:	e9ce 7702 	strd	r7, r7, [lr, #8]
    nl_47_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80044c2:	f8df e398 	ldr.w	lr, [pc, #920]	@ 800485c <ai_model_init+0xc50>
    nl_47_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80044c6:	e9ce 3302 	strd	r3, r3, [lr, #8]
    eltwise_48_output_array.data = AI_PTR(g_model_activations_map[0] + 21504);
 80044ca:	f503 4ea8 	add.w	lr, r3, #21504	@ 0x5400
    eltwise_48_output_array.data_start = AI_PTR(g_model_activations_map[0] + 21504);
 80044ce:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_49_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80044d2:	f8df 938c 	ldr.w	r9, [pc, #908]	@ 8004860 <ai_model_init+0xc54>
    conv2d_49_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80044d6:	e9c9 3302 	strd	r3, r3, [r9, #8]
    nl_50_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 80044da:	f8df 9388 	ldr.w	r9, [pc, #904]	@ 8004864 <ai_model_init+0xc58>
    nl_50_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 80044de:	e9c9 2202 	strd	r2, r2, [r9, #8]
    eltwise_51_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 80044e2:	f8df 9384 	ldr.w	r9, [pc, #900]	@ 8004868 <ai_model_init+0xc5c>
    eltwise_51_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 80044e6:	e9c9 1102 	strd	r1, r1, [r9, #8]
    conv2d_52_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80044ea:	f8df 9380 	ldr.w	r9, [pc, #896]	@ 800486c <ai_model_init+0xc60>
    conv2d_52_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80044ee:	e9c9 3302 	strd	r3, r3, [r9, #8]
    nl_53_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 80044f2:	f8df 937c 	ldr.w	r9, [pc, #892]	@ 8004870 <ai_model_init+0xc64>
    nl_53_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 80044f6:	e9c9 2202 	strd	r2, r2, [r9, #8]
    eltwise_54_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 80044fa:	f8df 9378 	ldr.w	r9, [pc, #888]	@ 8004874 <ai_model_init+0xc68>
    eltwise_54_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 80044fe:	e9c9 1102 	strd	r1, r1, [r9, #8]
    conv2d_55_output_array.data = AI_PTR(g_model_activations_map[0] + 4608);
 8004502:	f8df 9374 	ldr.w	r9, [pc, #884]	@ 8004878 <ai_model_init+0xc6c>
    conv2d_55_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4608);
 8004506:	e9c9 aa02 	strd	sl, sl, [r9, #8]
    nl_56_output_array.data = AI_PTR(g_model_activations_map[0] + 27648);
 800450a:	f503 4ad8 	add.w	sl, r3, #27648	@ 0x6c00
 800450e:	f8df 936c 	ldr.w	r9, [pc, #876]	@ 800487c <ai_model_init+0xc70>
    nl_56_output_array.data_start = AI_PTR(g_model_activations_map[0] + 27648);
 8004512:	e9c9 aa02 	strd	sl, sl, [r9, #8]
    eltwise_57_output_array.data = AI_PTR(g_model_activations_map[0] + 33792);
 8004516:	f503 4a04 	add.w	sl, r3, #33792	@ 0x8400
 800451a:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8004880 <ai_model_init+0xc74>
    eltwise_57_output_array.data_start = AI_PTR(g_model_activations_map[0] + 33792);
 800451e:	e9c9 aa02 	strd	sl, sl, [r9, #8]
    eltwise_58_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004522:	f8df 9360 	ldr.w	r9, [pc, #864]	@ 8004884 <ai_model_init+0xc78>
    eltwise_72_output_array.data = AI_PTR(g_model_activations_map[0] + 8);
 8004526:	f103 0a08 	add.w	sl, r3, #8
    eltwise_58_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800452a:	e9c9 3302 	strd	r3, r3, [r9, #8]
    concat_63_output_array.data = AI_PTR(g_model_activations_map[0] + 21504);
 800452e:	f8df 9358 	ldr.w	r9, [pc, #856]	@ 8004888 <ai_model_init+0xc7c>
    concat_63_output_array.data_start = AI_PTR(g_model_activations_map[0] + 21504);
 8004532:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_64_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004536:	f8df e354 	ldr.w	lr, [pc, #852]	@ 800488c <ai_model_init+0xc80>
    reduce_74_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 6344);
 800453a:	f503 59c6 	add.w	r9, r3, #6336	@ 0x18c0
    conv2d_64_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800453e:	e9ce 3302 	strd	r3, r3, [lr, #8]
    nl_65_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 8004542:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8004890 <ai_model_init+0xc84>
    reduce_74_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 6344);
 8004546:	f109 0908 	add.w	r9, r9, #8
    nl_65_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 800454a:	e9ce 7702 	strd	r7, r7, [lr, #8]
    eltwise_66_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 800454e:	4f8a      	ldr	r7, [pc, #552]	@ (8004778 <ai_model_init+0xb6c>)
    reduce_74_output_array.data = AI_PTR(g_model_activations_map[0] + 6152);
 8004550:	f8df e340 	ldr.w	lr, [pc, #832]	@ 8004894 <ai_model_init+0xc88>
    eltwise_66_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 8004554:	e9c7 5502 	strd	r5, r5, [r7, #8]
    pool_68_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004558:	4d88      	ldr	r5, [pc, #544]	@ (800477c <ai_model_init+0xb70>)
    concat_69_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 800455a:	f503 7780 	add.w	r7, r3, #256	@ 0x100
    pool_68_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800455e:	e9c5 3302 	strd	r3, r3, [r5, #8]
    pool_67_output_array.data = AI_PTR(g_model_activations_map[0] + 128);
 8004562:	4d87      	ldr	r5, [pc, #540]	@ (8004780 <ai_model_init+0xb74>)
    pool_67_output_array.data_start = AI_PTR(g_model_activations_map[0] + 128);
 8004564:	e9c5 cc02 	strd	ip, ip, [r5, #8]
    concat_69_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 8004568:	4d86      	ldr	r5, [pc, #536]	@ (8004784 <ai_model_init+0xb78>)
    concat_69_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 800456a:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_70_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800456e:	4d86      	ldr	r5, [pc, #536]	@ (8004788 <ai_model_init+0xb7c>)
    conv2d_70_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004570:	e9c5 3302 	strd	r3, r3, [r5, #8]
    nl_71_output_array.data = AI_PTR(g_model_activations_map[0] + 4);
 8004574:	4d85      	ldr	r5, [pc, #532]	@ (800478c <ai_model_init+0xb80>)
    nl_71_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4);
 8004576:	e9c5 0002 	strd	r0, r0, [r5, #8]
    eltwise_72_output_array.data = AI_PTR(g_model_activations_map[0] + 8);
 800457a:	4d85      	ldr	r5, [pc, #532]	@ (8004790 <ai_model_init+0xb84>)
    eltwise_72_output_array.data_start = AI_PTR(g_model_activations_map[0] + 8);
 800457c:	e9c5 aa02 	strd	sl, sl, [r5, #8]
    reduce_74_output_array.data = AI_PTR(g_model_activations_map[0] + 6152);
 8004580:	f503 55c0 	add.w	r5, r3, #6144	@ 0x1800
 8004584:	3508      	adds	r5, #8
    reduce_74_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6152);
 8004586:	e9ce 5502 	strd	r5, r5, [lr, #8]
    reduce_74_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 6344);
 800458a:	f8df e30c 	ldr.w	lr, [pc, #780]	@ 8004898 <ai_model_init+0xc8c>
    reduce_74_Mul_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6344);
 800458e:	e9ce 9902 	strd	r9, r9, [lr, #8]
    reduce_73_output_array.data = AI_PTR(g_model_activations_map[0] + 6152);
 8004592:	f8df e308 	ldr.w	lr, [pc, #776]	@ 800489c <ai_model_init+0xc90>
    reduce_73_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6152);
 8004596:	e9ce 5502 	strd	r5, r5, [lr, #8]
    concat_75_output_array.data = AI_PTR(g_model_activations_map[0] + 6536);
 800459a:	f503 5ecc 	add.w	lr, r3, #6528	@ 0x1980
 800459e:	f10e 0e08 	add.w	lr, lr, #8
    concat_75_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6536);
 80045a2:	e9cb ee02 	strd	lr, lr, [fp, #8]
    conv2d_76_output_array.data = AI_PTR(g_model_activations_map[0] + 6152);
 80045a6:	f8df b2f8 	ldr.w	fp, [pc, #760]	@ 80048a0 <ai_model_init+0xc94>
    conv2d_76_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6152);
 80045aa:	e9cb 5502 	strd	r5, r5, [fp, #8]
    nl_77_output_array.data = AI_PTR(g_model_activations_map[0] + 6344);
 80045ae:	4d79      	ldr	r5, [pc, #484]	@ (8004794 <ai_model_init+0xb88>)
    nl_77_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6344);
 80045b0:	e9c5 9902 	strd	r9, r9, [r5, #8]
    eltwise_78_output_array.data = AI_PTR(g_model_activations_map[0] + 6536);
 80045b4:	4d78      	ldr	r5, [pc, #480]	@ (8004798 <ai_model_init+0xb8c>)
    eltwise_78_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6536);
 80045b6:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    conv2d_79_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80045ba:	4d78      	ldr	r5, [pc, #480]	@ (800479c <ai_model_init+0xb90>)
    conv2d_98_output_array.data = AI_PTR(g_model_activations_map[0] + 2304);
 80045bc:	f503 6e10 	add.w	lr, r3, #2304	@ 0x900
    conv2d_79_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80045c0:	e9c5 3302 	strd	r3, r3, [r5, #8]
    nl_80_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 80045c4:	4d76      	ldr	r5, [pc, #472]	@ (80047a0 <ai_model_init+0xb94>)
    nl_80_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 80045c6:	e9c5 2202 	strd	r2, r2, [r5, #8]
    eltwise_81_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 80045ca:	4d76      	ldr	r5, [pc, #472]	@ (80047a4 <ai_model_init+0xb98>)
    eltwise_81_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 80045cc:	e9c5 1102 	strd	r1, r1, [r5, #8]
    split_82_output0_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80045d0:	4d75      	ldr	r5, [pc, #468]	@ (80047a8 <ai_model_init+0xb9c>)
    split_82_output0_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80045d2:	e9c5 3302 	strd	r3, r3, [r5, #8]
    split_82_output1_array.data = AI_PTR(g_model_activations_map[0] + 768);
 80045d6:	4d75      	ldr	r5, [pc, #468]	@ (80047ac <ai_model_init+0xba0>)
    split_82_output1_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 80045d8:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_97_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 80045dc:	4d74      	ldr	r5, [pc, #464]	@ (80047b0 <ai_model_init+0xba4>)
    conv2d_97_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 80045de:	e9c5 2202 	strd	r2, r2, [r5, #8]
    conv2d_98_output_array.data = AI_PTR(g_model_activations_map[0] + 2304);
 80045e2:	4d74      	ldr	r5, [pc, #464]	@ (80047b4 <ai_model_init+0xba8>)
    conv2d_98_output_array.data_start = AI_PTR(g_model_activations_map[0] + 2304);
 80045e4:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    nl_99_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 80045e8:	4d73      	ldr	r5, [pc, #460]	@ (80047b8 <ai_model_init+0xbac>)
    eltwise_100_output_array.data = AI_PTR(g_model_activations_map[0] + 3840);
 80045ea:	f503 6e70 	add.w	lr, r3, #3840	@ 0xf00
    nl_99_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 80045ee:	e9c5 4402 	strd	r4, r4, [r5, #8]
    eltwise_100_output_array.data = AI_PTR(g_model_activations_map[0] + 3840);
 80045f2:	4d72      	ldr	r5, [pc, #456]	@ (80047bc <ai_model_init+0xbb0>)
    eltwise_100_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3840);
 80045f4:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    conv2d_83_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 80045f8:	4d71      	ldr	r5, [pc, #452]	@ (80047c0 <ai_model_init+0xbb4>)
    eltwise_86_output_array.data = AI_PTR(g_model_activations_map[0] + 5376);
 80045fa:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 80048a4 <ai_model_init+0xc98>
    conv2d_83_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 80045fe:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_84_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8004602:	4d70      	ldr	r5, [pc, #448]	@ (80047c4 <ai_model_init+0xbb8>)
    conv2d_84_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8004604:	e9c5 2202 	strd	r2, r2, [r5, #8]
    nl_85_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004608:	4d6f      	ldr	r5, [pc, #444]	@ (80047c8 <ai_model_init+0xbbc>)
    nl_85_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800460a:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_86_output_array.data = AI_PTR(g_model_activations_map[0] + 5376);
 800460e:	f503 55a8 	add.w	r5, r3, #5376	@ 0x1500
    eltwise_86_output_array.data_start = AI_PTR(g_model_activations_map[0] + 5376);
 8004612:	e9ce 5502 	strd	r5, r5, [lr, #8]
    conv2d_87_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004616:	f8df e290 	ldr.w	lr, [pc, #656]	@ 80048a8 <ai_model_init+0xc9c>
    conv2d_87_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800461a:	e9ce 3302 	strd	r3, r3, [lr, #8]
    nl_88_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 800461e:	f8df e28c 	ldr.w	lr, [pc, #652]	@ 80048ac <ai_model_init+0xca0>
    nl_88_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 8004622:	e9ce 4402 	strd	r4, r4, [lr, #8]
    eltwise_89_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8004626:	f8df e288 	ldr.w	lr, [pc, #648]	@ 80048b0 <ai_model_init+0xca4>
    eltwise_89_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 800462a:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_90_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800462e:	f8df e284 	ldr.w	lr, [pc, #644]	@ 80048b4 <ai_model_init+0xca8>
    conv2d_90_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004632:	e9ce 3302 	strd	r3, r3, [lr, #8]
    nl_91_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 8004636:	f8df e280 	ldr.w	lr, [pc, #640]	@ 80048b8 <ai_model_init+0xcac>
    nl_91_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 800463a:	e9ce 4402 	strd	r4, r4, [lr, #8]
    eltwise_92_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 800463e:	4c63      	ldr	r4, [pc, #396]	@ (80047cc <ai_model_init+0xbc0>)
    eltwise_95_output_array.data = AI_PTR(g_model_activations_map[0] + 6912);
 8004640:	f503 5ed8 	add.w	lr, r3, #6912	@ 0x1b00
    eltwise_92_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8004644:	e9c4 2202 	strd	r2, r2, [r4, #8]
    conv2d_93_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004648:	4c61      	ldr	r4, [pc, #388]	@ (80047d0 <ai_model_init+0xbc4>)
    conv2d_93_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800464a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    nl_94_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 800464e:	4c61      	ldr	r4, [pc, #388]	@ (80047d4 <ai_model_init+0xbc8>)
    nl_94_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8004650:	e9c4 2202 	strd	r2, r2, [r4, #8]
    eltwise_95_output_array.data = AI_PTR(g_model_activations_map[0] + 6912);
 8004654:	4c60      	ldr	r4, [pc, #384]	@ (80047d8 <ai_model_init+0xbcc>)
    eltwise_95_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6912);
 8004656:	e9c4 ee02 	strd	lr, lr, [r4, #8]
    eltwise_96_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800465a:	4c60      	ldr	r4, [pc, #384]	@ (80047dc <ai_model_init+0xbd0>)
    eltwise_96_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800465c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    concat_101_output_array.data = AI_PTR(g_model_activations_map[0] + 5376);
 8004660:	4c5f      	ldr	r4, [pc, #380]	@ (80047e0 <ai_model_init+0xbd4>)
    concat_101_output_array.data_start = AI_PTR(g_model_activations_map[0] + 5376);
 8004662:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_102_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8004666:	4c5f      	ldr	r4, [pc, #380]	@ (80047e4 <ai_model_init+0xbd8>)
    conv2d_102_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004668:	e9c4 3302 	strd	r3, r3, [r4, #8]
    nl_103_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 800466c:	4c5e      	ldr	r4, [pc, #376]	@ (80047e8 <ai_model_init+0xbdc>)
    nl_103_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 800466e:	e9c4 2202 	strd	r2, r2, [r4, #8]
    eltwise_104_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8004672:	4a5e      	ldr	r2, [pc, #376]	@ (80047ec <ai_model_init+0xbe0>)
    concat_113_output_array.data = AI_PTR(g_model_activations_map[0] + 1640);
 8004674:	4c5e      	ldr	r4, [pc, #376]	@ (80047f0 <ai_model_init+0xbe4>)
    eltwise_104_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8004676:	e9c2 1102 	strd	r1, r1, [r2, #8]
    pool_106_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800467a:	4a5e      	ldr	r2, [pc, #376]	@ (80047f4 <ai_model_init+0xbe8>)
    reduce_112_output_array.data = AI_PTR(g_model_activations_map[0] + 1544);
 800467c:	495e      	ldr	r1, [pc, #376]	@ (80047f8 <ai_model_init+0xbec>)
    pool_106_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800467e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    pool_105_output_array.data = AI_PTR(g_model_activations_map[0] + 128);
 8004682:	4a5e      	ldr	r2, [pc, #376]	@ (80047fc <ai_model_init+0xbf0>)
    pool_105_output_array.data_start = AI_PTR(g_model_activations_map[0] + 128);
 8004684:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    concat_107_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 8004688:	4a5d      	ldr	r2, [pc, #372]	@ (8004800 <ai_model_init+0xbf4>)
    concat_107_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 800468a:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_108_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800468e:	4a5d      	ldr	r2, [pc, #372]	@ (8004804 <ai_model_init+0xbf8>)
    conv2d_108_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004690:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_109_output_array.data = AI_PTR(g_model_activations_map[0] + 4);
 8004694:	4a5c      	ldr	r2, [pc, #368]	@ (8004808 <ai_model_init+0xbfc>)
    nl_109_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4);
 8004696:	e9c2 0002 	strd	r0, r0, [r2, #8]
    eltwise_110_output_array.data = AI_PTR(g_model_activations_map[0] + 8);
 800469a:	4a5c      	ldr	r2, [pc, #368]	@ (800480c <ai_model_init+0xc00>)
    reduce_112_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 1592);
 800469c:	f503 60c7 	add.w	r0, r3, #1592	@ 0x638
    eltwise_110_output_array.data_start = AI_PTR(g_model_activations_map[0] + 8);
 80046a0:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    reduce_112_output_array.data = AI_PTR(g_model_activations_map[0] + 1544);
 80046a4:	f503 62c1 	add.w	r2, r3, #1544	@ 0x608
    reduce_112_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1544);
 80046a8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    reduce_112_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 1592);
 80046ac:	4958      	ldr	r1, [pc, #352]	@ (8004810 <ai_model_init+0xc04>)
    reduce_112_Mul_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1592);
 80046ae:	e9c1 0002 	strd	r0, r0, [r1, #8]
    reduce_111_output_array.data = AI_PTR(g_model_activations_map[0] + 1544);
 80046b2:	4958      	ldr	r1, [pc, #352]	@ (8004814 <ai_model_init+0xc08>)
    reduce_111_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1544);
 80046b4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    concat_113_output_array.data = AI_PTR(g_model_activations_map[0] + 1640);
 80046b8:	f503 61cd 	add.w	r1, r3, #1640	@ 0x668
    concat_113_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1640);
 80046bc:	e9c4 1102 	strd	r1, r1, [r4, #8]
    conv2d_114_output_array.data = AI_PTR(g_model_activations_map[0] + 1544);
 80046c0:	4c55      	ldr	r4, [pc, #340]	@ (8004818 <ai_model_init+0xc0c>)
    conv2d_114_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1544);
 80046c2:	e9c4 2202 	strd	r2, r2, [r4, #8]
    nl_115_output_array.data = AI_PTR(g_model_activations_map[0] + 1592);
 80046c6:	4a55      	ldr	r2, [pc, #340]	@ (800481c <ai_model_init+0xc10>)
    nl_115_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1592);
 80046c8:	e9c2 0002 	strd	r0, r0, [r2, #8]
    eltwise_116_output_array.data = AI_PTR(g_model_activations_map[0] + 1640);
 80046cc:	4a54      	ldr	r2, [pc, #336]	@ (8004820 <ai_model_init+0xc14>)
    eltwise_116_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1640);
 80046ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_117_output_array.data = AI_PTR(g_model_activations_map[0] + 3176);
 80046d2:	f603 4168 	addw	r1, r3, #3176	@ 0xc68
 80046d6:	4a53      	ldr	r2, [pc, #332]	@ (8004824 <ai_model_init+0xc18>)
    conv2d_117_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3176);
 80046d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_118_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80046dc:	4a52      	ldr	r2, [pc, #328]	@ (8004828 <ai_model_init+0xc1c>)
    eltwise_119_output_array.data = AI_PTR(g_model_activations_map[0] + 6248);
 80046de:	4953      	ldr	r1, [pc, #332]	@ (800482c <ai_model_init+0xc20>)
    nl_118_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80046e0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    eltwise_119_output_array.data = AI_PTR(g_model_activations_map[0] + 6248);
 80046e4:	f503 52c3 	add.w	r2, r3, #6240	@ 0x1860
 80046e8:	3208      	adds	r2, #8
    eltwise_119_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6248);
 80046ea:	e9c1 2202 	strd	r2, r2, [r1, #8]
    pool_120_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80046ee:	4a50      	ldr	r2, [pc, #320]	@ (8004830 <ai_model_init+0xc24>)
    pool_120_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80046f0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_121_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 80046f4:	4a4f      	ldr	r2, [pc, #316]	@ (8004834 <ai_model_init+0xc28>)
    gemm_121_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 80046f6:	e9c2 7702 	strd	r7, r7, [r2, #8]
    nl_122_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80046fa:	4a4f      	ldr	r2, [pc, #316]	@ (8004838 <ai_model_init+0xc2c>)
    nl_122_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80046fc:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8004700:	e0dc      	b.n	80048bc <ai_model_init+0xcb0>
 8004702:	bf00      	nop
 8004704:	20006c38 	.word	0x20006c38
 8004708:	20006c28 	.word	0x20006c28
 800470c:	20006c08 	.word	0x20006c08
 8004710:	20006bf8 	.word	0x20006bf8
 8004714:	20006be8 	.word	0x20006be8
 8004718:	20006bd8 	.word	0x20006bd8
 800471c:	20006bc8 	.word	0x20006bc8
 8004720:	20006bb8 	.word	0x20006bb8
 8004724:	20006ba8 	.word	0x20006ba8
 8004728:	20006b98 	.word	0x20006b98
 800472c:	20006b88 	.word	0x20006b88
 8004730:	20006b78 	.word	0x20006b78
 8004734:	20006b68 	.word	0x20006b68
 8004738:	20006b58 	.word	0x20006b58
 800473c:	20006b48 	.word	0x20006b48
 8004740:	20006b38 	.word	0x20006b38
 8004744:	20006b28 	.word	0x20006b28
 8004748:	20006b18 	.word	0x20006b18
 800474c:	20006b08 	.word	0x20006b08
 8004750:	20006ad8 	.word	0x20006ad8
 8004754:	20006af8 	.word	0x20006af8
 8004758:	20006ae8 	.word	0x20006ae8
 800475c:	20006ac8 	.word	0x20006ac8
 8004760:	20006ab8 	.word	0x20006ab8
 8004764:	20006aa8 	.word	0x20006aa8
 8004768:	20006a98 	.word	0x20006a98
 800476c:	20006a88 	.word	0x20006a88
 8004770:	20006a78 	.word	0x20006a78
 8004774:	20006a68 	.word	0x20006a68
 8004778:	200068f8 	.word	0x200068f8
 800477c:	200068e8 	.word	0x200068e8
 8004780:	200068d8 	.word	0x200068d8
 8004784:	200068c8 	.word	0x200068c8
 8004788:	200068b8 	.word	0x200068b8
 800478c:	200068a8 	.word	0x200068a8
 8004790:	20006898 	.word	0x20006898
 8004794:	20006838 	.word	0x20006838
 8004798:	20006828 	.word	0x20006828
 800479c:	20006818 	.word	0x20006818
 80047a0:	20006808 	.word	0x20006808
 80047a4:	200067f8 	.word	0x200067f8
 80047a8:	200067e8 	.word	0x200067e8
 80047ac:	200067d8 	.word	0x200067d8
 80047b0:	200067c8 	.word	0x200067c8
 80047b4:	200067b8 	.word	0x200067b8
 80047b8:	200067a8 	.word	0x200067a8
 80047bc:	20006798 	.word	0x20006798
 80047c0:	20006788 	.word	0x20006788
 80047c4:	20006778 	.word	0x20006778
 80047c8:	20006768 	.word	0x20006768
 80047cc:	200066f8 	.word	0x200066f8
 80047d0:	200066e8 	.word	0x200066e8
 80047d4:	200066d8 	.word	0x200066d8
 80047d8:	200066c8 	.word	0x200066c8
 80047dc:	200066b8 	.word	0x200066b8
 80047e0:	200066a8 	.word	0x200066a8
 80047e4:	20006698 	.word	0x20006698
 80047e8:	20006688 	.word	0x20006688
 80047ec:	20006678 	.word	0x20006678
 80047f0:	200065d8 	.word	0x200065d8
 80047f4:	20006668 	.word	0x20006668
 80047f8:	20006608 	.word	0x20006608
 80047fc:	20006658 	.word	0x20006658
 8004800:	20006648 	.word	0x20006648
 8004804:	20006638 	.word	0x20006638
 8004808:	20006628 	.word	0x20006628
 800480c:	20006618 	.word	0x20006618
 8004810:	200065f8 	.word	0x200065f8
 8004814:	200065e8 	.word	0x200065e8
 8004818:	200065c8 	.word	0x200065c8
 800481c:	200065b8 	.word	0x200065b8
 8004820:	200065a8 	.word	0x200065a8
 8004824:	20006598 	.word	0x20006598
 8004828:	20006588 	.word	0x20006588
 800482c:	20006578 	.word	0x20006578
 8004830:	20006568 	.word	0x20006568
 8004834:	20006558 	.word	0x20006558
 8004838:	20006548 	.word	0x20006548
 800483c:	20006a58 	.word	0x20006a58
 8004840:	20006a48 	.word	0x20006a48
 8004844:	20006a38 	.word	0x20006a38
 8004848:	20006a28 	.word	0x20006a28
 800484c:	20006a18 	.word	0x20006a18
 8004850:	20006a08 	.word	0x20006a08
 8004854:	200069d8 	.word	0x200069d8
 8004858:	200069f8 	.word	0x200069f8
 800485c:	200069e8 	.word	0x200069e8
 8004860:	200069c8 	.word	0x200069c8
 8004864:	200069b8 	.word	0x200069b8
 8004868:	200069a8 	.word	0x200069a8
 800486c:	20006998 	.word	0x20006998
 8004870:	20006988 	.word	0x20006988
 8004874:	20006978 	.word	0x20006978
 8004878:	20006968 	.word	0x20006968
 800487c:	20006958 	.word	0x20006958
 8004880:	20006948 	.word	0x20006948
 8004884:	20006938 	.word	0x20006938
 8004888:	20006928 	.word	0x20006928
 800488c:	20006918 	.word	0x20006918
 8004890:	20006908 	.word	0x20006908
 8004894:	20006888 	.word	0x20006888
 8004898:	20006878 	.word	0x20006878
 800489c:	20006868 	.word	0x20006868
 80048a0:	20006848 	.word	0x20006848
 80048a4:	20006758 	.word	0x20006758
 80048a8:	20006748 	.word	0x20006748
 80048ac:	20006738 	.word	0x20006738
 80048b0:	20006728 	.word	0x20006728
 80048b4:	20006718 	.word	0x20006718
 80048b8:	20006708 	.word	0x20006708

  ai_bool ok = true;
  ok &= model_configure_weights(net_ctx, params);
  ok &= model_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80048bc:	9801      	ldr	r0, [sp, #4]
 80048be:	f001 f92d 	bl	8005b1c <ai_platform_network_post_init>
 80048c2:	ea00 0008 	and.w	r0, r0, r8
 80048c6:	4006      	ands	r6, r0
 80048c8:	b2f0      	uxtb	r0, r6

  return ok;
}
 80048ca:	b003      	add	sp, #12
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80048d0:	2212      	movs	r2, #18
 80048d2:	2130      	movs	r1, #48	@ 0x30
 80048d4:	4620      	mov	r0, r4
 80048d6:	f000 fa91 	bl	8004dfc <ai_platform_network_set_error>
  return false;
 80048da:	e4a4      	b.n	8004226 <ai_model_init+0x61a>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80048dc:	2213      	movs	r2, #19
 80048de:	2130      	movs	r1, #48	@ 0x30
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 fa8b 	bl	8004dfc <ai_platform_network_set_error>
  return false;
 80048e6:	e7e9      	b.n	80048bc <ai_model_init+0xcb0>

080048e8 <ai_model_create_and_init>:
{
 80048e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048ec:	4688      	mov	r8, r1
 80048ee:	b08f      	sub	sp, #60	@ 0x3c
    err = ai_model_create(network, AI_MODEL_DATA_CONFIG);
 80048f0:	2100      	movs	r1, #0
{
 80048f2:	4606      	mov	r6, r0
 80048f4:	4617      	mov	r7, r2
    err = ai_model_create(network, AI_MODEL_DATA_CONFIG);
 80048f6:	f7ff f967 	bl	8003bc8 <ai_model_create>
    if (err.type != AI_ERROR_NONE)
 80048fa:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
    err = ai_model_create(network, AI_MODEL_DATA_CONFIG);
 80048fe:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8004900:	d107      	bne.n	8004912 <ai_model_create_and_init+0x2a>
    if (ai_model_data_params_get(&params) != true) {
 8004902:	4668      	mov	r0, sp
 8004904:	f000 f83a 	bl	800497c <ai_model_data_params_get>
 8004908:	b938      	cbnz	r0, 800491a <ai_model_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 800490a:	6830      	ldr	r0, [r6, #0]
 800490c:	f000 f96a 	bl	8004be4 <ai_platform_network_get_error>
 8004910:	4604      	mov	r4, r0
}
 8004912:	4620      	mov	r0, r4
 8004914:	b00f      	add	sp, #60	@ 0x3c
 8004916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 800491a:	f1b8 0f00 	cmp.w	r8, #0
 800491e:	d11a      	bne.n	8004956 <ai_model_create_and_init+0x6e>
    if (weights) {
 8004920:	bb3f      	cbnz	r7, 8004972 <ai_model_create_and_init+0x8a>
    if (ai_model_init(*network, &params) != true) {
 8004922:	4669      	mov	r1, sp
 8004924:	6830      	ldr	r0, [r6, #0]
 8004926:	f7ff f971 	bl	8003c0c <ai_model_init>
 800492a:	b928      	cbnz	r0, 8004938 <ai_model_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 800492c:	6830      	ldr	r0, [r6, #0]
 800492e:	f000 f959 	bl	8004be4 <ai_platform_network_get_error>
 8004932:	4604      	mov	r4, r0
 8004934:	fa5f f980 	uxtb.w	r9, r0
    return err;
 8004938:	f369 0407 	bfi	r4, r9, #0, #8
 800493c:	e7e9      	b.n	8004912 <ai_model_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800493e:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8004942:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004944:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004946:	a803      	add	r0, sp, #12
 8004948:	f000 f86e 	bl	8004a28 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800494c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8004950:	42ab      	cmp	r3, r5
 8004952:	dcf4      	bgt.n	800493e <ai_model_create_and_init+0x56>
 8004954:	e7e4      	b.n	8004920 <ai_model_create_and_init+0x38>
 8004956:	464d      	mov	r5, r9
 8004958:	e7f8      	b.n	800494c <ai_model_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800495a:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800495e:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004960:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004962:	a801      	add	r0, sp, #4
 8004964:	f000 f860 	bl	8004a28 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004968:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800496c:	42ab      	cmp	r3, r5
 800496e:	dcf4      	bgt.n	800495a <ai_model_create_and_init+0x72>
 8004970:	e7d7      	b.n	8004922 <ai_model_create_and_init+0x3a>
 8004972:	2500      	movs	r5, #0
 8004974:	e7f8      	b.n	8004968 <ai_model_create_and_init+0x80>

08004976 <ai_model_run>:

AI_API_ENTRY
ai_i32 ai_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004976:	f001 b9fb 	b.w	8005d70 <ai_platform_network_process>
	...

0800497c <ai_model_data_params_get>:
 * @ingroup model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_model_data_params_get(ai_network_params* params)
{
 800497c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800497e:	4603      	mov	r3, r0
{
 8004980:	b085      	sub	sp, #20
  if (!params) return false;
 8004982:	b170      	cbz	r0, 80049a2 <ai_model_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8004984:	4c08      	ldr	r4, [pc, #32]	@ (80049a8 <ai_model_data_params_get+0x2c>)
 8004986:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODEL_DATA_ACTIVATIONS_COUNT, g_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004988:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 800498a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800498e:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8004992:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8004996:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODEL_DATA_WEIGHTS_COUNT, g_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800499a:	4629      	mov	r1, r5
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f907 	bl	8004bb0 <ai_platform_bind_network_params>
}
 80049a2:	b005      	add	sp, #20
 80049a4:	bd30      	pop	{r4, r5, pc}
 80049a6:	bf00      	nop
 80049a8:	0800c060 	.word	0x0800c060

080049ac <ai_buffer_get_size>:
 80049ac:	b368      	cbz	r0, 8004a0a <ai_buffer_get_size+0x5e>
 80049ae:	4b17      	ldr	r3, [pc, #92]	@ (8004a0c <ai_buffer_get_size+0x60>)
 80049b0:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <ai_buffer_get_size+0x64>)
 80049b2:	b410      	push	{r4}
 80049b4:	6804      	ldr	r4, [r0, #0]
 80049b6:	4023      	ands	r3, r4
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d123      	bne.n	8004a04 <ai_buffer_get_size+0x58>
 80049bc:	b311      	cbz	r1, 8004a04 <ai_buffer_get_size+0x58>
 80049be:	6984      	ldr	r4, [r0, #24]
 80049c0:	6862      	ldr	r2, [r4, #4]
 80049c2:	321f      	adds	r2, #31
 80049c4:	f022 021f 	bic.w	r2, r2, #31
 80049c8:	7d03      	ldrb	r3, [r0, #20]
 80049ca:	6941      	ldr	r1, [r0, #20]
 80049cc:	f1a3 0301 	sub.w	r3, r3, #1
 80049d0:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80049d4:	fab3 f383 	clz	r3, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80049de:	da0c      	bge.n	80049fa <ai_buffer_get_size+0x4e>
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d103      	bne.n	80049ec <ai_buffer_get_size+0x40>
 80049e4:	2802      	cmp	r0, #2
 80049e6:	f04f 0302 	mov.w	r3, #2
 80049ea:	d006      	beq.n	80049fa <ai_buffer_get_size+0x4e>
 80049ec:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4298      	cmp	r0, r3
 80049f4:	fb01 f202 	mul.w	r2, r1, r2
 80049f8:	d1f2      	bne.n	80049e0 <ai_buffer_get_size+0x34>
 80049fa:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80049fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	6984      	ldr	r4, [r0, #24]
 8004a06:	6862      	ldr	r2, [r4, #4]
 8004a08:	e7de      	b.n	80049c8 <ai_buffer_get_size+0x1c>
 8004a0a:	4770      	bx	lr
 8004a0c:	017fffff 	.word	0x017fffff
 8004a10:	000400c0 	.word	0x000400c0

08004a14 <ai_buffer_array_sane>:
 8004a14:	b138      	cbz	r0, 8004a26 <ai_buffer_array_sane+0x12>
 8004a16:	6843      	ldr	r3, [r0, #4]
 8004a18:	b123      	cbz	r3, 8004a24 <ai_buffer_array_sane+0x10>
 8004a1a:	8840      	ldrh	r0, [r0, #2]
 8004a1c:	3800      	subs	r0, #0
 8004a1e:	bf18      	it	ne
 8004a20:	2001      	movne	r0, #1
 8004a22:	4770      	bx	lr
 8004a24:	4618      	mov	r0, r3
 8004a26:	4770      	bx	lr

08004a28 <ai_buffer_array_item_set_address>:
 8004a28:	b150      	cbz	r0, 8004a40 <ai_buffer_array_item_set_address+0x18>
 8004a2a:	6843      	ldr	r3, [r0, #4]
 8004a2c:	b14b      	cbz	r3, 8004a42 <ai_buffer_array_item_set_address+0x1a>
 8004a2e:	8840      	ldrh	r0, [r0, #2]
 8004a30:	b900      	cbnz	r0, 8004a34 <ai_buffer_array_item_set_address+0xc>
 8004a32:	4770      	bx	lr
 8004a34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004a38:	2001      	movs	r0, #1
 8004a3a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a3e:	604a      	str	r2, [r1, #4]
 8004a40:	4770      	bx	lr
 8004a42:	4618      	mov	r0, r3
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop

08004a48 <_ai_platform_acquire_crc>:
 8004a48:	2001      	movs	r0, #1
 8004a4a:	4770      	bx	lr

08004a4c <_ai_platform_release_crc>:
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop

08004a50 <ai_platform_get_weights_map>:
 8004a50:	2900      	cmp	r1, #0
 8004a52:	bf18      	it	ne
 8004a54:	2800      	cmpne	r0, #0
 8004a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a58:	bf0c      	ite	eq
 8004a5a:	2401      	moveq	r4, #1
 8004a5c:	2400      	movne	r4, #0
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	bf08      	it	eq
 8004a62:	f044 0401 	orreq.w	r4, r4, #1
 8004a66:	b114      	cbz	r4, 8004a6e <ai_platform_get_weights_map+0x1e>
 8004a68:	2400      	movs	r4, #0
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a6e:	4616      	mov	r6, r2
 8004a70:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <ai_platform_get_weights_map+0xac>)
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	4605      	mov	r5, r0
 8004a76:	460f      	mov	r7, r1
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d022      	beq.n	8004ac2 <ai_platform_get_weights_map+0x72>
 8004a7c:	6870      	ldr	r0, [r6, #4]
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d0f2      	beq.n	8004a68 <ai_platform_get_weights_map+0x18>
 8004a82:	6806      	ldr	r6, [r0, #0]
 8004a84:	429e      	cmp	r6, r3
 8004a86:	d006      	beq.n	8004a96 <ai_platform_get_weights_map+0x46>
 8004a88:	f1a1 0401 	sub.w	r4, r1, #1
 8004a8c:	6028      	str	r0, [r5, #0]
 8004a8e:	fab4 f484 	clz	r4, r4
 8004a92:	0964      	lsrs	r4, r4, #5
 8004a94:	e7e9      	b.n	8004a6a <ai_platform_get_weights_map+0x1a>
 8004a96:	3d04      	subs	r5, #4
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	e000      	b.n	8004aa0 <ai_platform_get_weights_map+0x50>
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004aa4:	42b3      	cmp	r3, r6
 8004aa6:	d025      	beq.n	8004af4 <ai_platform_get_weights_map+0xa4>
 8004aa8:	f845 3f04 	str.w	r3, [r5, #4]!
 8004aac:	1c4b      	adds	r3, r1, #1
 8004aae:	429f      	cmp	r7, r3
 8004ab0:	d8f5      	bhi.n	8004a9e <ai_platform_get_weights_map+0x4e>
 8004ab2:	d1da      	bne.n	8004a6a <ai_platform_get_weights_map+0x1a>
 8004ab4:	3102      	adds	r1, #2
 8004ab6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004aba:	42b3      	cmp	r3, r6
 8004abc:	d1d5      	bne.n	8004a6a <ai_platform_get_weights_map+0x1a>
 8004abe:	2401      	movs	r4, #1
 8004ac0:	e7d3      	b.n	8004a6a <ai_platform_get_weights_map+0x1a>
 8004ac2:	1d30      	adds	r0, r6, #4
 8004ac4:	f7ff ffa6 	bl	8004a14 <ai_buffer_array_sane>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d0cd      	beq.n	8004a68 <ai_platform_get_weights_map+0x18>
 8004acc:	88f3      	ldrh	r3, [r6, #6]
 8004ace:	429f      	cmp	r7, r3
 8004ad0:	d1ca      	bne.n	8004a68 <ai_platform_get_weights_map+0x18>
 8004ad2:	3d04      	subs	r5, #4
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	68b3      	ldr	r3, [r6, #8]
 8004ad8:	4423      	add	r3, r4
 8004ada:	341c      	adds	r4, #28
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b123      	cbz	r3, 8004aea <ai_platform_get_weights_map+0x9a>
 8004ae0:	3201      	adds	r2, #1
 8004ae2:	f845 3f04 	str.w	r3, [r5, #4]!
 8004ae6:	4297      	cmp	r7, r2
 8004ae8:	d8f5      	bhi.n	8004ad6 <ai_platform_get_weights_map+0x86>
 8004aea:	1abc      	subs	r4, r7, r2
 8004aec:	fab4 f484 	clz	r4, r4
 8004af0:	0964      	lsrs	r4, r4, #5
 8004af2:	e7ba      	b.n	8004a6a <ai_platform_get_weights_map+0x1a>
 8004af4:	428f      	cmp	r7, r1
 8004af6:	d1b8      	bne.n	8004a6a <ai_platform_get_weights_map+0x1a>
 8004af8:	e7e1      	b.n	8004abe <ai_platform_get_weights_map+0x6e>
 8004afa:	bf00      	nop
 8004afc:	a1facade 	.word	0xa1facade

08004b00 <ai_platform_get_activations_map>:
 8004b00:	2900      	cmp	r1, #0
 8004b02:	bf18      	it	ne
 8004b04:	2800      	cmpne	r0, #0
 8004b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b08:	bf0c      	ite	eq
 8004b0a:	2401      	moveq	r4, #1
 8004b0c:	2400      	movne	r4, #0
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	bf08      	it	eq
 8004b12:	f044 0401 	orreq.w	r4, r4, #1
 8004b16:	b114      	cbz	r4, 8004b1e <ai_platform_get_activations_map+0x1e>
 8004b18:	2400      	movs	r4, #0
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1e:	4616      	mov	r6, r2
 8004b20:	4b22      	ldr	r3, [pc, #136]	@ (8004bac <ai_platform_get_activations_map+0xac>)
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	4605      	mov	r5, r0
 8004b26:	460f      	mov	r7, r1
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d022      	beq.n	8004b72 <ai_platform_get_activations_map+0x72>
 8004b2c:	6a30      	ldr	r0, [r6, #32]
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d0f2      	beq.n	8004b18 <ai_platform_get_activations_map+0x18>
 8004b32:	6806      	ldr	r6, [r0, #0]
 8004b34:	429e      	cmp	r6, r3
 8004b36:	d006      	beq.n	8004b46 <ai_platform_get_activations_map+0x46>
 8004b38:	f1a1 0401 	sub.w	r4, r1, #1
 8004b3c:	6028      	str	r0, [r5, #0]
 8004b3e:	fab4 f484 	clz	r4, r4
 8004b42:	0964      	lsrs	r4, r4, #5
 8004b44:	e7e9      	b.n	8004b1a <ai_platform_get_activations_map+0x1a>
 8004b46:	3d04      	subs	r5, #4
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	e000      	b.n	8004b50 <ai_platform_get_activations_map+0x50>
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004b54:	42b3      	cmp	r3, r6
 8004b56:	d026      	beq.n	8004ba6 <ai_platform_get_activations_map+0xa6>
 8004b58:	f845 3f04 	str.w	r3, [r5, #4]!
 8004b5c:	1c4b      	adds	r3, r1, #1
 8004b5e:	429f      	cmp	r7, r3
 8004b60:	d8f5      	bhi.n	8004b4e <ai_platform_get_activations_map+0x4e>
 8004b62:	d1da      	bne.n	8004b1a <ai_platform_get_activations_map+0x1a>
 8004b64:	3102      	adds	r1, #2
 8004b66:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004b6a:	42b3      	cmp	r3, r6
 8004b6c:	d1d5      	bne.n	8004b1a <ai_platform_get_activations_map+0x1a>
 8004b6e:	2401      	movs	r4, #1
 8004b70:	e7d3      	b.n	8004b1a <ai_platform_get_activations_map+0x1a>
 8004b72:	f106 000c 	add.w	r0, r6, #12
 8004b76:	f7ff ff4d 	bl	8004a14 <ai_buffer_array_sane>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d0cc      	beq.n	8004b18 <ai_platform_get_activations_map+0x18>
 8004b7e:	89f3      	ldrh	r3, [r6, #14]
 8004b80:	429f      	cmp	r7, r3
 8004b82:	d1c9      	bne.n	8004b18 <ai_platform_get_activations_map+0x18>
 8004b84:	3d04      	subs	r5, #4
 8004b86:	4622      	mov	r2, r4
 8004b88:	6933      	ldr	r3, [r6, #16]
 8004b8a:	4423      	add	r3, r4
 8004b8c:	341c      	adds	r4, #28
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b123      	cbz	r3, 8004b9c <ai_platform_get_activations_map+0x9c>
 8004b92:	3201      	adds	r2, #1
 8004b94:	f845 3f04 	str.w	r3, [r5, #4]!
 8004b98:	4297      	cmp	r7, r2
 8004b9a:	d8f5      	bhi.n	8004b88 <ai_platform_get_activations_map+0x88>
 8004b9c:	1abc      	subs	r4, r7, r2
 8004b9e:	fab4 f484 	clz	r4, r4
 8004ba2:	0964      	lsrs	r4, r4, #5
 8004ba4:	e7b9      	b.n	8004b1a <ai_platform_get_activations_map+0x1a>
 8004ba6:	428f      	cmp	r7, r1
 8004ba8:	d1b7      	bne.n	8004b1a <ai_platform_get_activations_map+0x1a>
 8004baa:	e7e0      	b.n	8004b6e <ai_platform_get_activations_map+0x6e>
 8004bac:	a1facade 	.word	0xa1facade

08004bb0 <ai_platform_bind_network_params>:
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	bf18      	it	ne
 8004bb4:	2900      	cmpne	r1, #0
 8004bb6:	d010      	beq.n	8004bda <ai_platform_bind_network_params+0x2a>
 8004bb8:	b178      	cbz	r0, 8004bda <ai_platform_bind_network_params+0x2a>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4808      	ldr	r0, [pc, #32]	@ (8004be0 <ai_platform_bind_network_params+0x30>)
 8004bbe:	f103 0c0c 	add.w	ip, r3, #12
 8004bc2:	f843 0b04 	str.w	r0, [r3], #4
 8004bc6:	c903      	ldmia	r1, {r0, r1}
 8004bc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bd2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	4770      	bx	lr
 8004bda:	2300      	movs	r3, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	4770      	bx	lr
 8004be0:	a1facade 	.word	0xa1facade

08004be4 <ai_platform_network_get_error>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d03f      	beq.n	8004c6a <ai_platform_network_get_error+0x86>
 8004bea:	4b7d      	ldr	r3, [pc, #500]	@ (8004de0 <ai_platform_network_get_error+0x1fc>)
 8004bec:	4604      	mov	r4, r0
 8004bee:	6802      	ldr	r2, [r0, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d13a      	bne.n	8004c6a <ai_platform_network_get_error+0x86>
 8004bf4:	f7ff ff28 	bl	8004a48 <_ai_platform_acquire_crc>
 8004bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8004de4 <ai_platform_network_get_error+0x200>)
 8004bfa:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c04:	189a      	adds	r2, r3, r2
 8004c06:	2a01      	cmp	r2, #1
 8004c08:	f240 8086 	bls.w	8004d18 <ai_platform_network_get_error+0x134>
 8004c0c:	f240 4249 	movw	r2, #1097	@ 0x449
 8004c10:	4293      	cmp	r3, r2
 8004c12:	f000 8081 	beq.w	8004d18 <ai_platform_network_get_error+0x134>
 8004c16:	4a74      	ldr	r2, [pc, #464]	@ (8004de8 <ai_platform_network_get_error+0x204>)
 8004c18:	6813      	ldr	r3, [r2, #0]
 8004c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c1e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004c22:	f000 8087 	beq.w	8004d34 <ai_platform_network_get_error+0x150>
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f240 4183 	movw	r1, #1155	@ 0x483
 8004c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c30:	428b      	cmp	r3, r1
 8004c32:	f000 80a9 	beq.w	8004d88 <ai_platform_network_get_error+0x1a4>
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c3c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004c40:	f000 80c0 	beq.w	8004dc4 <ai_platform_network_get_error+0x1e0>
 8004c44:	6813      	ldr	r3, [r2, #0]
 8004c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 8082 	bne.w	8004d54 <ai_platform_network_get_error+0x170>
 8004c50:	4a66      	ldr	r2, [pc, #408]	@ (8004dec <ai_platform_network_get_error+0x208>)
 8004c52:	2301      	movs	r3, #1
 8004c54:	6093      	str	r3, [r2, #8]
 8004c56:	6893      	ldr	r3, [r2, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1fc      	bne.n	8004c56 <ai_platform_network_get_error+0x72>
 8004c5c:	4964      	ldr	r1, [pc, #400]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004c5e:	4b65      	ldr	r3, [pc, #404]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d075      	beq.n	8004d54 <ai_platform_network_get_error+0x170>
 8004c68:	e7fe      	b.n	8004c68 <ai_platform_network_get_error+0x84>
 8004c6a:	f7ff feed 	bl	8004a48 <_ai_platform_acquire_crc>
 8004c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004de4 <ai_platform_network_get_error+0x200>)
 8004c70:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c7a:	185a      	adds	r2, r3, r1
 8004c7c:	2a01      	cmp	r2, #1
 8004c7e:	d929      	bls.n	8004cd4 <ai_platform_network_get_error+0xf0>
 8004c80:	f240 4249 	movw	r2, #1097	@ 0x449
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d025      	beq.n	8004cd4 <ai_platform_network_get_error+0xf0>
 8004c88:	4a57      	ldr	r2, [pc, #348]	@ (8004de8 <ai_platform_network_get_error+0x204>)
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c90:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004c94:	d02b      	beq.n	8004cee <ai_platform_network_get_error+0x10a>
 8004c96:	6813      	ldr	r3, [r2, #0]
 8004c98:	f240 4183 	movw	r1, #1155	@ 0x483
 8004c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	d060      	beq.n	8004d66 <ai_platform_network_get_error+0x182>
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004caa:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004cae:	d07c      	beq.n	8004daa <ai_platform_network_get_error+0x1c6>
 8004cb0:	6813      	ldr	r3, [r2, #0]
 8004cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d129      	bne.n	8004d0e <ai_platform_network_get_error+0x12a>
 8004cba:	4a4c      	ldr	r2, [pc, #304]	@ (8004dec <ai_platform_network_get_error+0x208>)
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	6893      	ldr	r3, [r2, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1fc      	bne.n	8004cc0 <ai_platform_network_get_error+0xdc>
 8004cc6:	494a      	ldr	r1, [pc, #296]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004cca:	6011      	str	r1, [r2, #0]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d01d      	beq.n	8004d0e <ai_platform_network_get_error+0x12a>
 8004cd2:	e7fe      	b.n	8004cd2 <ai_platform_network_get_error+0xee>
 8004cd4:	4a45      	ldr	r2, [pc, #276]	@ (8004dec <ai_platform_network_get_error+0x208>)
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	6093      	str	r3, [r2, #8]
 8004cda:	6893      	ldr	r3, [r2, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1fc      	bne.n	8004cda <ai_platform_network_get_error+0xf6>
 8004ce0:	4943      	ldr	r1, [pc, #268]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004ce2:	4b44      	ldr	r3, [pc, #272]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d010      	beq.n	8004d0e <ai_platform_network_get_error+0x12a>
 8004cec:	e7fe      	b.n	8004cec <ai_platform_network_get_error+0x108>
 8004cee:	4a42      	ldr	r2, [pc, #264]	@ (8004df8 <ai_platform_network_get_error+0x214>)
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004cf6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1fb      	bne.n	8004cf6 <ai_platform_network_get_error+0x112>
 8004cfe:	493c      	ldr	r1, [pc, #240]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004d00:	4b3c      	ldr	r3, [pc, #240]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004d02:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004d06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d111      	bne.n	8004d32 <ai_platform_network_get_error+0x14e>
 8004d0e:	f7ff fe9d 	bl	8004a4c <_ai_platform_release_crc>
 8004d12:	f241 0010 	movw	r0, #4112	@ 0x1010
 8004d16:	bd10      	pop	{r4, pc}
 8004d18:	4a34      	ldr	r2, [pc, #208]	@ (8004dec <ai_platform_network_get_error+0x208>)
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	6893      	ldr	r3, [r2, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1fc      	bne.n	8004d1e <ai_platform_network_get_error+0x13a>
 8004d24:	4932      	ldr	r1, [pc, #200]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004d26:	4b33      	ldr	r3, [pc, #204]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d011      	beq.n	8004d54 <ai_platform_network_get_error+0x170>
 8004d30:	e7fe      	b.n	8004d30 <ai_platform_network_get_error+0x14c>
 8004d32:	e7fe      	b.n	8004d32 <ai_platform_network_get_error+0x14e>
 8004d34:	4a30      	ldr	r2, [pc, #192]	@ (8004df8 <ai_platform_network_get_error+0x214>)
 8004d36:	2301      	movs	r3, #1
 8004d38:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004d3c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1fb      	bne.n	8004d3c <ai_platform_network_get_error+0x158>
 8004d44:	492a      	ldr	r1, [pc, #168]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004d46:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004d48:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004d4c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d107      	bne.n	8004d64 <ai_platform_network_get_error+0x180>
 8004d54:	f7ff fe7a 	bl	8004a4c <_ai_platform_release_crc>
 8004d58:	f104 0010 	add.w	r0, r4, #16
 8004d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d60:	f001 bae4 	b.w	800632c <core_get_error>
 8004d64:	e7fe      	b.n	8004d64 <ai_platform_network_get_error+0x180>
 8004d66:	4a24      	ldr	r2, [pc, #144]	@ (8004df8 <ai_platform_network_get_error+0x214>)
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004d6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1fb      	bne.n	8004d6e <ai_platform_network_get_error+0x18a>
 8004d76:	491e      	ldr	r1, [pc, #120]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004d78:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004d7a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004d7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d0c3      	beq.n	8004d0e <ai_platform_network_get_error+0x12a>
 8004d86:	e7fe      	b.n	8004d86 <ai_platform_network_get_error+0x1a2>
 8004d88:	4a1b      	ldr	r2, [pc, #108]	@ (8004df8 <ai_platform_network_get_error+0x214>)
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004d90:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1fb      	bne.n	8004d90 <ai_platform_network_get_error+0x1ac>
 8004d98:	4915      	ldr	r1, [pc, #84]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004d9a:	4b16      	ldr	r3, [pc, #88]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004d9c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004da0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d0d5      	beq.n	8004d54 <ai_platform_network_get_error+0x170>
 8004da8:	e7fe      	b.n	8004da8 <ai_platform_network_get_error+0x1c4>
 8004daa:	4a10      	ldr	r2, [pc, #64]	@ (8004dec <ai_platform_network_get_error+0x208>)
 8004dac:	2301      	movs	r3, #1
 8004dae:	6093      	str	r3, [r2, #8]
 8004db0:	6893      	ldr	r3, [r2, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1fc      	bne.n	8004db0 <ai_platform_network_get_error+0x1cc>
 8004db6:	490e      	ldr	r1, [pc, #56]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004db8:	4b0e      	ldr	r3, [pc, #56]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d0a5      	beq.n	8004d0e <ai_platform_network_get_error+0x12a>
 8004dc2:	e7fe      	b.n	8004dc2 <ai_platform_network_get_error+0x1de>
 8004dc4:	4a09      	ldr	r2, [pc, #36]	@ (8004dec <ai_platform_network_get_error+0x208>)
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	6893      	ldr	r3, [r2, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1fc      	bne.n	8004dca <ai_platform_network_get_error+0x1e6>
 8004dd0:	4907      	ldr	r1, [pc, #28]	@ (8004df0 <ai_platform_network_get_error+0x20c>)
 8004dd2:	4b08      	ldr	r3, [pc, #32]	@ (8004df4 <ai_platform_network_get_error+0x210>)
 8004dd4:	6011      	str	r1, [r2, #0]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d0bb      	beq.n	8004d54 <ai_platform_network_get_error+0x170>
 8004ddc:	e7fe      	b.n	8004ddc <ai_platform_network_get_error+0x1f8>
 8004dde:	bf00      	nop
 8004de0:	a1c00100 	.word	0xa1c00100
 8004de4:	e0042000 	.word	0xe0042000
 8004de8:	5c001000 	.word	0x5c001000
 8004dec:	40023000 	.word	0x40023000
 8004df0:	f407a5c2 	.word	0xf407a5c2
 8004df4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004df8:	58024000 	.word	0x58024000

08004dfc <ai_platform_network_set_error>:
 8004dfc:	b110      	cbz	r0, 8004e04 <ai_platform_network_set_error+0x8>
 8004dfe:	3010      	adds	r0, #16
 8004e00:	f001 ba9a 	b.w	8006338 <core_set_error>
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop

08004e08 <ai_platform_inputs_get>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	9102      	str	r1, [sp, #8]
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f000 8093 	beq.w	8004f3c <ai_platform_inputs_get+0x134>
 8004e16:	4baa      	ldr	r3, [pc, #680]	@ (80050c0 <ai_platform_inputs_get+0x2b8>)
 8004e18:	4681      	mov	r9, r0
 8004e1a:	6802      	ldr	r2, [r0, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	f040 808d 	bne.w	8004f3c <ai_platform_inputs_get+0x134>
 8004e22:	f7ff fe11 	bl	8004a48 <_ai_platform_acquire_crc>
 8004e26:	4ba7      	ldr	r3, [pc, #668]	@ (80050c4 <ai_platform_inputs_get+0x2bc>)
 8004e28:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e32:	189a      	adds	r2, r3, r2
 8004e34:	2a01      	cmp	r2, #1
 8004e36:	f240 80da 	bls.w	8004fee <ai_platform_inputs_get+0x1e6>
 8004e3a:	f240 4249 	movw	r2, #1097	@ 0x449
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	f000 80d5 	beq.w	8004fee <ai_platform_inputs_get+0x1e6>
 8004e44:	4aa0      	ldr	r2, [pc, #640]	@ (80050c8 <ai_platform_inputs_get+0x2c0>)
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e4c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004e50:	f000 80dc 	beq.w	800500c <ai_platform_inputs_get+0x204>
 8004e54:	6813      	ldr	r3, [r2, #0]
 8004e56:	f240 4183 	movw	r1, #1155	@ 0x483
 8004e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	f000 810e 	beq.w	8005080 <ai_platform_inputs_get+0x278>
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e6a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004e6e:	f000 8143 	beq.w	80050f8 <ai_platform_inputs_get+0x2f0>
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8113 	beq.w	80050a4 <ai_platform_inputs_get+0x29c>
 8004e7e:	f7ff fde5 	bl	8004a4c <_ai_platform_release_crc>
 8004e82:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80d2 	beq.w	8005030 <ai_platform_inputs_get+0x228>
 8004e8c:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8004e90:	f1ba 0f00 	cmp.w	sl, #0
 8004e94:	f000 80cc 	beq.w	8005030 <ai_platform_inputs_get+0x228>
 8004e98:	2100      	movs	r1, #0
 8004e9a:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	e016      	b.n	8004ed2 <ai_platform_inputs_get+0xca>
 8004ea4:	9a01      	ldr	r2, [sp, #4]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f848 3002 	str.w	r3, [r8, r2]
 8004eac:	69b2      	ldr	r2, [r6, #24]
 8004eae:	f04f 0301 	mov.w	r3, #1
 8004eb2:	6856      	ldr	r6, [r2, #4]
 8004eb4:	3501      	adds	r5, #1
 8004eb6:	f109 091c 	add.w	r9, r9, #28
 8004eba:	7523      	strb	r3, [r4, #20]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6962      	ldr	r2, [r4, #20]
 8004ec0:	60a7      	str	r7, [r4, #8]
 8004ec2:	f36b 221f 	bfi	r2, fp, #8, #24
 8004ec6:	6126      	str	r6, [r4, #16]
 8004ec8:	61a1      	str	r1, [r4, #24]
 8004eca:	60e3      	str	r3, [r4, #12]
 8004ecc:	6162      	str	r2, [r4, #20]
 8004ece:	e9c4 0c00 	strd	r0, ip, [r4]
 8004ed2:	f8ba 3000 	ldrh.w	r3, [sl]
 8004ed6:	b2ac      	uxth	r4, r5
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	f240 80b5 	bls.w	800504e <ai_platform_inputs_get+0x246>
 8004ee4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80b0 	beq.w	800504e <ai_platform_inputs_get+0x246>
 8004eee:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	f000 80ab 	beq.w	800504e <ai_platform_inputs_get+0x246>
 8004ef8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004efc:	69b2      	ldr	r2, [r6, #24]
 8004efe:	68f1      	ldr	r1, [r6, #12]
 8004f00:	6810      	ldr	r0, [r2, #0]
 8004f02:	9100      	str	r1, [sp, #0]
 8004f04:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8004f08:	68b3      	ldr	r3, [r6, #8]
 8004f0a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8004f0e:	444c      	add	r4, r9
 8004f10:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8004f14:	f003 fec2 	bl	8008c9c <ai_array_to_buffer_fmt>
 8004f18:	69b2      	ldr	r2, [r6, #24]
 8004f1a:	9900      	ldr	r1, [sp, #0]
 8004f1c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	d0c4      	beq.n	8004eae <ai_platform_inputs_get+0xa6>
 8004f24:	2200      	movs	r2, #0
 8004f26:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8004f2a:	6832      	ldr	r2, [r6, #0]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	b112      	cbz	r2, 8004f36 <ai_platform_inputs_get+0x12e>
 8004f30:	8852      	ldrh	r2, [r2, #2]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d1b6      	bne.n	8004ea4 <ai_platform_inputs_get+0x9c>
 8004f36:	69b2      	ldr	r2, [r6, #24]
 8004f38:	2700      	movs	r7, #0
 8004f3a:	e7b8      	b.n	8004eae <ai_platform_inputs_get+0xa6>
 8004f3c:	f7ff fd84 	bl	8004a48 <_ai_platform_acquire_crc>
 8004f40:	4b60      	ldr	r3, [pc, #384]	@ (80050c4 <ai_platform_inputs_get+0x2bc>)
 8004f42:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f4c:	185a      	adds	r2, r3, r1
 8004f4e:	2a01      	cmp	r2, #1
 8004f50:	d92a      	bls.n	8004fa8 <ai_platform_inputs_get+0x1a0>
 8004f52:	f240 4249 	movw	r2, #1097	@ 0x449
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d026      	beq.n	8004fa8 <ai_platform_inputs_get+0x1a0>
 8004f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80050c8 <ai_platform_inputs_get+0x2c0>)
 8004f5c:	6813      	ldr	r3, [r2, #0]
 8004f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f62:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004f66:	d02c      	beq.n	8004fc2 <ai_platform_inputs_get+0x1ba>
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	f240 4183 	movw	r1, #1155	@ 0x483
 8004f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f72:	428b      	cmp	r3, r1
 8004f74:	d073      	beq.n	800505e <ai_platform_inputs_get+0x256>
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f7c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004f80:	f000 80ac 	beq.w	80050dc <ai_platform_inputs_get+0x2d4>
 8004f84:	6813      	ldr	r3, [r2, #0]
 8004f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d129      	bne.n	8004fe2 <ai_platform_inputs_get+0x1da>
 8004f8e:	4a4f      	ldr	r2, [pc, #316]	@ (80050cc <ai_platform_inputs_get+0x2c4>)
 8004f90:	2301      	movs	r3, #1
 8004f92:	6093      	str	r3, [r2, #8]
 8004f94:	6893      	ldr	r3, [r2, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1fc      	bne.n	8004f94 <ai_platform_inputs_get+0x18c>
 8004f9a:	494d      	ldr	r1, [pc, #308]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 8004f9e:	6011      	str	r1, [r2, #0]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d01d      	beq.n	8004fe2 <ai_platform_inputs_get+0x1da>
 8004fa6:	e7fe      	b.n	8004fa6 <ai_platform_inputs_get+0x19e>
 8004fa8:	4a48      	ldr	r2, [pc, #288]	@ (80050cc <ai_platform_inputs_get+0x2c4>)
 8004faa:	2301      	movs	r3, #1
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	6893      	ldr	r3, [r2, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1fc      	bne.n	8004fae <ai_platform_inputs_get+0x1a6>
 8004fb4:	4946      	ldr	r1, [pc, #280]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 8004fb6:	4b47      	ldr	r3, [pc, #284]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 8004fb8:	6011      	str	r1, [r2, #0]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d010      	beq.n	8004fe2 <ai_platform_inputs_get+0x1da>
 8004fc0:	e7fe      	b.n	8004fc0 <ai_platform_inputs_get+0x1b8>
 8004fc2:	4a45      	ldr	r2, [pc, #276]	@ (80050d8 <ai_platform_inputs_get+0x2d0>)
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004fca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1fb      	bne.n	8004fca <ai_platform_inputs_get+0x1c2>
 8004fd2:	493f      	ldr	r1, [pc, #252]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 8004fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 8004fd6:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004fda:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d113      	bne.n	800500a <ai_platform_inputs_get+0x202>
 8004fe2:	f7ff fd33 	bl	8004a4c <_ai_platform_release_crc>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	b005      	add	sp, #20
 8004fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fee:	4a37      	ldr	r2, [pc, #220]	@ (80050cc <ai_platform_inputs_get+0x2c4>)
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	6093      	str	r3, [r2, #8]
 8004ff4:	6893      	ldr	r3, [r2, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1fc      	bne.n	8004ff4 <ai_platform_inputs_get+0x1ec>
 8004ffa:	4b35      	ldr	r3, [pc, #212]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	4b35      	ldr	r3, [pc, #212]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	f43f af3b 	beq.w	8004e7e <ai_platform_inputs_get+0x76>
 8005008:	e7fe      	b.n	8005008 <ai_platform_inputs_get+0x200>
 800500a:	e7fe      	b.n	800500a <ai_platform_inputs_get+0x202>
 800500c:	4a32      	ldr	r2, [pc, #200]	@ (80050d8 <ai_platform_inputs_get+0x2d0>)
 800500e:	2301      	movs	r3, #1
 8005010:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005014:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1fb      	bne.n	8005014 <ai_platform_inputs_get+0x20c>
 800501c:	4b2c      	ldr	r3, [pc, #176]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 800501e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005022:	4b2c      	ldr	r3, [pc, #176]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 8005024:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005028:	429a      	cmp	r2, r3
 800502a:	f43f af28 	beq.w	8004e7e <ai_platform_inputs_get+0x76>
 800502e:	e7fe      	b.n	800502e <ai_platform_inputs_get+0x226>
 8005030:	2400      	movs	r4, #0
 8005032:	2218      	movs	r2, #24
 8005034:	2111      	movs	r1, #17
 8005036:	f109 0010 	add.w	r0, r9, #16
 800503a:	f001 f97d 	bl	8006338 <core_set_error>
 800503e:	4620      	mov	r0, r4
 8005040:	9b02      	ldr	r3, [sp, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0d0      	beq.n	8004fe8 <ai_platform_inputs_get+0x1e0>
 8005046:	801c      	strh	r4, [r3, #0]
 8005048:	b005      	add	sp, #20
 800504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005052:	2c00      	cmp	r4, #0
 8005054:	d0ec      	beq.n	8005030 <ai_platform_inputs_get+0x228>
 8005056:	f8da 3008 	ldr.w	r3, [sl, #8]
 800505a:	6858      	ldr	r0, [r3, #4]
 800505c:	e7f0      	b.n	8005040 <ai_platform_inputs_get+0x238>
 800505e:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <ai_platform_inputs_get+0x2d0>)
 8005060:	2301      	movs	r3, #1
 8005062:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005066:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1fb      	bne.n	8005066 <ai_platform_inputs_get+0x25e>
 800506e:	4918      	ldr	r1, [pc, #96]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 8005070:	4b18      	ldr	r3, [pc, #96]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 8005072:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005076:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800507a:	429a      	cmp	r2, r3
 800507c:	d0b1      	beq.n	8004fe2 <ai_platform_inputs_get+0x1da>
 800507e:	e7fe      	b.n	800507e <ai_platform_inputs_get+0x276>
 8005080:	4a15      	ldr	r2, [pc, #84]	@ (80050d8 <ai_platform_inputs_get+0x2d0>)
 8005082:	2301      	movs	r3, #1
 8005084:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005088:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1fb      	bne.n	8005088 <ai_platform_inputs_get+0x280>
 8005090:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 8005092:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005096:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 8005098:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800509c:	429a      	cmp	r2, r3
 800509e:	f43f aeee 	beq.w	8004e7e <ai_platform_inputs_get+0x76>
 80050a2:	e7fe      	b.n	80050a2 <ai_platform_inputs_get+0x29a>
 80050a4:	4a09      	ldr	r2, [pc, #36]	@ (80050cc <ai_platform_inputs_get+0x2c4>)
 80050a6:	2301      	movs	r3, #1
 80050a8:	6093      	str	r3, [r2, #8]
 80050aa:	6893      	ldr	r3, [r2, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1fc      	bne.n	80050aa <ai_platform_inputs_get+0x2a2>
 80050b0:	4b07      	ldr	r3, [pc, #28]	@ (80050d0 <ai_platform_inputs_get+0x2c8>)
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b07      	ldr	r3, [pc, #28]	@ (80050d4 <ai_platform_inputs_get+0x2cc>)
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	f43f aee0 	beq.w	8004e7e <ai_platform_inputs_get+0x76>
 80050be:	e7fe      	b.n	80050be <ai_platform_inputs_get+0x2b6>
 80050c0:	a1c00100 	.word	0xa1c00100
 80050c4:	e0042000 	.word	0xe0042000
 80050c8:	5c001000 	.word	0x5c001000
 80050cc:	40023000 	.word	0x40023000
 80050d0:	f407a5c2 	.word	0xf407a5c2
 80050d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80050d8:	58024000 	.word	0x58024000
 80050dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005114 <ai_platform_inputs_get+0x30c>)
 80050de:	2301      	movs	r3, #1
 80050e0:	6093      	str	r3, [r2, #8]
 80050e2:	6893      	ldr	r3, [r2, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1fc      	bne.n	80050e2 <ai_platform_inputs_get+0x2da>
 80050e8:	490b      	ldr	r1, [pc, #44]	@ (8005118 <ai_platform_inputs_get+0x310>)
 80050ea:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <ai_platform_inputs_get+0x314>)
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	f43f af76 	beq.w	8004fe2 <ai_platform_inputs_get+0x1da>
 80050f6:	e7fe      	b.n	80050f6 <ai_platform_inputs_get+0x2ee>
 80050f8:	4a06      	ldr	r2, [pc, #24]	@ (8005114 <ai_platform_inputs_get+0x30c>)
 80050fa:	2301      	movs	r3, #1
 80050fc:	6093      	str	r3, [r2, #8]
 80050fe:	6893      	ldr	r3, [r2, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1fc      	bne.n	80050fe <ai_platform_inputs_get+0x2f6>
 8005104:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <ai_platform_inputs_get+0x310>)
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	4b04      	ldr	r3, [pc, #16]	@ (800511c <ai_platform_inputs_get+0x314>)
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	f43f aeb6 	beq.w	8004e7e <ai_platform_inputs_get+0x76>
 8005112:	e7fe      	b.n	8005112 <ai_platform_inputs_get+0x30a>
 8005114:	40023000 	.word	0x40023000
 8005118:	f407a5c2 	.word	0xf407a5c2
 800511c:	b5e8b5cd 	.word	0xb5e8b5cd

08005120 <ai_platform_outputs_get>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	b085      	sub	sp, #20
 8005126:	9102      	str	r1, [sp, #8]
 8005128:	2800      	cmp	r0, #0
 800512a:	f000 808f 	beq.w	800524c <ai_platform_outputs_get+0x12c>
 800512e:	4ba8      	ldr	r3, [pc, #672]	@ (80053d0 <ai_platform_outputs_get+0x2b0>)
 8005130:	4681      	mov	r9, r0
 8005132:	6802      	ldr	r2, [r0, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	f040 8089 	bne.w	800524c <ai_platform_outputs_get+0x12c>
 800513a:	f7ff fc85 	bl	8004a48 <_ai_platform_acquire_crc>
 800513e:	4ba5      	ldr	r3, [pc, #660]	@ (80053d4 <ai_platform_outputs_get+0x2b4>)
 8005140:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800514a:	189a      	adds	r2, r3, r2
 800514c:	2a01      	cmp	r2, #1
 800514e:	f240 80d6 	bls.w	80052fe <ai_platform_outputs_get+0x1de>
 8005152:	f240 4249 	movw	r2, #1097	@ 0x449
 8005156:	4293      	cmp	r3, r2
 8005158:	f000 80d1 	beq.w	80052fe <ai_platform_outputs_get+0x1de>
 800515c:	4a9e      	ldr	r2, [pc, #632]	@ (80053d8 <ai_platform_outputs_get+0x2b8>)
 800515e:	6813      	ldr	r3, [r2, #0]
 8005160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005164:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005168:	f000 80d8 	beq.w	800531c <ai_platform_outputs_get+0x1fc>
 800516c:	6813      	ldr	r3, [r2, #0]
 800516e:	f240 4183 	movw	r1, #1155	@ 0x483
 8005172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005176:	428b      	cmp	r3, r1
 8005178:	f000 8109 	beq.w	800538e <ai_platform_outputs_get+0x26e>
 800517c:	6813      	ldr	r3, [r2, #0]
 800517e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005182:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005186:	f000 813f 	beq.w	8005408 <ai_platform_outputs_get+0x2e8>
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 810e 	beq.w	80053b2 <ai_platform_outputs_get+0x292>
 8005196:	f7ff fc59 	bl	8004a4c <_ai_platform_release_crc>
 800519a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	f240 80db 	bls.w	800535a <ai_platform_outputs_get+0x23a>
 80051a4:	2100      	movs	r1, #0
 80051a6:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 80051aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80051ae:	460d      	mov	r5, r1
 80051b0:	4689      	mov	r9, r1
 80051b2:	e016      	b.n	80051e2 <ai_platform_outputs_get+0xc2>
 80051b4:	9a01      	ldr	r2, [sp, #4]
 80051b6:	2301      	movs	r3, #1
 80051b8:	f848 3002 	str.w	r3, [r8, r2]
 80051bc:	69b2      	ldr	r2, [r6, #24]
 80051be:	f04f 0301 	mov.w	r3, #1
 80051c2:	6856      	ldr	r6, [r2, #4]
 80051c4:	3501      	adds	r5, #1
 80051c6:	f109 091c 	add.w	r9, r9, #28
 80051ca:	7523      	strb	r3, [r4, #20]
 80051cc:	2300      	movs	r3, #0
 80051ce:	6962      	ldr	r2, [r4, #20]
 80051d0:	60a7      	str	r7, [r4, #8]
 80051d2:	f36b 221f 	bfi	r2, fp, #8, #24
 80051d6:	6126      	str	r6, [r4, #16]
 80051d8:	61a1      	str	r1, [r4, #24]
 80051da:	60e3      	str	r3, [r4, #12]
 80051dc:	6162      	str	r2, [r4, #20]
 80051de:	e9c4 0c00 	strd	r0, ip, [r4]
 80051e2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80051e6:	b2ac      	uxth	r4, r5
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	f240 80a6 	bls.w	8005340 <ai_platform_outputs_get+0x220>
 80051f4:	f8da 3010 	ldr.w	r3, [sl, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80a1 	beq.w	8005340 <ai_platform_outputs_get+0x220>
 80051fe:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005202:	2e00      	cmp	r6, #0
 8005204:	f000 809c 	beq.w	8005340 <ai_platform_outputs_get+0x220>
 8005208:	f8da 3014 	ldr.w	r3, [sl, #20]
 800520c:	69b2      	ldr	r2, [r6, #24]
 800520e:	68f1      	ldr	r1, [r6, #12]
 8005210:	6810      	ldr	r0, [r2, #0]
 8005212:	9100      	str	r1, [sp, #0]
 8005214:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8005218:	68b3      	ldr	r3, [r6, #8]
 800521a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800521e:	444c      	add	r4, r9
 8005220:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8005224:	f003 fd3a 	bl	8008c9c <ai_array_to_buffer_fmt>
 8005228:	69b2      	ldr	r2, [r6, #24]
 800522a:	9900      	ldr	r1, [sp, #0]
 800522c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005230:	2f00      	cmp	r7, #0
 8005232:	d0c4      	beq.n	80051be <ai_platform_outputs_get+0x9e>
 8005234:	2200      	movs	r2, #0
 8005236:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800523a:	6832      	ldr	r2, [r6, #0]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	b112      	cbz	r2, 8005246 <ai_platform_outputs_get+0x126>
 8005240:	8852      	ldrh	r2, [r2, #2]
 8005242:	2a00      	cmp	r2, #0
 8005244:	d1b6      	bne.n	80051b4 <ai_platform_outputs_get+0x94>
 8005246:	69b2      	ldr	r2, [r6, #24]
 8005248:	2700      	movs	r7, #0
 800524a:	e7b8      	b.n	80051be <ai_platform_outputs_get+0x9e>
 800524c:	f7ff fbfc 	bl	8004a48 <_ai_platform_acquire_crc>
 8005250:	4b60      	ldr	r3, [pc, #384]	@ (80053d4 <ai_platform_outputs_get+0x2b4>)
 8005252:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525c:	185a      	adds	r2, r3, r1
 800525e:	2a01      	cmp	r2, #1
 8005260:	d92a      	bls.n	80052b8 <ai_platform_outputs_get+0x198>
 8005262:	f240 4249 	movw	r2, #1097	@ 0x449
 8005266:	4293      	cmp	r3, r2
 8005268:	d026      	beq.n	80052b8 <ai_platform_outputs_get+0x198>
 800526a:	4a5b      	ldr	r2, [pc, #364]	@ (80053d8 <ai_platform_outputs_get+0x2b8>)
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005272:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005276:	d02c      	beq.n	80052d2 <ai_platform_outputs_get+0x1b2>
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	f240 4183 	movw	r1, #1155	@ 0x483
 800527e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005282:	428b      	cmp	r3, r1
 8005284:	d072      	beq.n	800536c <ai_platform_outputs_get+0x24c>
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800528c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005290:	f000 80ac 	beq.w	80053ec <ai_platform_outputs_get+0x2cc>
 8005294:	6813      	ldr	r3, [r2, #0]
 8005296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800529a:	2b00      	cmp	r3, #0
 800529c:	d129      	bne.n	80052f2 <ai_platform_outputs_get+0x1d2>
 800529e:	4a4f      	ldr	r2, [pc, #316]	@ (80053dc <ai_platform_outputs_get+0x2bc>)
 80052a0:	2301      	movs	r3, #1
 80052a2:	6093      	str	r3, [r2, #8]
 80052a4:	6893      	ldr	r3, [r2, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1fc      	bne.n	80052a4 <ai_platform_outputs_get+0x184>
 80052aa:	494d      	ldr	r1, [pc, #308]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 80052ac:	4b4d      	ldr	r3, [pc, #308]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 80052ae:	6011      	str	r1, [r2, #0]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d01d      	beq.n	80052f2 <ai_platform_outputs_get+0x1d2>
 80052b6:	e7fe      	b.n	80052b6 <ai_platform_outputs_get+0x196>
 80052b8:	4a48      	ldr	r2, [pc, #288]	@ (80053dc <ai_platform_outputs_get+0x2bc>)
 80052ba:	2301      	movs	r3, #1
 80052bc:	6093      	str	r3, [r2, #8]
 80052be:	6893      	ldr	r3, [r2, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1fc      	bne.n	80052be <ai_platform_outputs_get+0x19e>
 80052c4:	4946      	ldr	r1, [pc, #280]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 80052c6:	4b47      	ldr	r3, [pc, #284]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d010      	beq.n	80052f2 <ai_platform_outputs_get+0x1d2>
 80052d0:	e7fe      	b.n	80052d0 <ai_platform_outputs_get+0x1b0>
 80052d2:	4a45      	ldr	r2, [pc, #276]	@ (80053e8 <ai_platform_outputs_get+0x2c8>)
 80052d4:	2301      	movs	r3, #1
 80052d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80052da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1fb      	bne.n	80052da <ai_platform_outputs_get+0x1ba>
 80052e2:	493f      	ldr	r1, [pc, #252]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 80052e4:	4b3f      	ldr	r3, [pc, #252]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 80052e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80052ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d113      	bne.n	800531a <ai_platform_outputs_get+0x1fa>
 80052f2:	f7ff fbab 	bl	8004a4c <_ai_platform_release_crc>
 80052f6:	2000      	movs	r0, #0
 80052f8:	b005      	add	sp, #20
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	4a37      	ldr	r2, [pc, #220]	@ (80053dc <ai_platform_outputs_get+0x2bc>)
 8005300:	2301      	movs	r3, #1
 8005302:	6093      	str	r3, [r2, #8]
 8005304:	6893      	ldr	r3, [r2, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1fc      	bne.n	8005304 <ai_platform_outputs_get+0x1e4>
 800530a:	4b35      	ldr	r3, [pc, #212]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b35      	ldr	r3, [pc, #212]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	f43f af3f 	beq.w	8005196 <ai_platform_outputs_get+0x76>
 8005318:	e7fe      	b.n	8005318 <ai_platform_outputs_get+0x1f8>
 800531a:	e7fe      	b.n	800531a <ai_platform_outputs_get+0x1fa>
 800531c:	4a32      	ldr	r2, [pc, #200]	@ (80053e8 <ai_platform_outputs_get+0x2c8>)
 800531e:	2301      	movs	r3, #1
 8005320:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005324:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1fb      	bne.n	8005324 <ai_platform_outputs_get+0x204>
 800532c:	4b2c      	ldr	r3, [pc, #176]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 800532e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005332:	4b2c      	ldr	r3, [pc, #176]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 8005334:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005338:	429a      	cmp	r2, r3
 800533a:	f43f af2c 	beq.w	8005196 <ai_platform_outputs_get+0x76>
 800533e:	e7fe      	b.n	800533e <ai_platform_outputs_get+0x21e>
 8005340:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005344:	b14c      	cbz	r4, 800535a <ai_platform_outputs_get+0x23a>
 8005346:	f8da 3014 	ldr.w	r3, [sl, #20]
 800534a:	6858      	ldr	r0, [r3, #4]
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0d2      	beq.n	80052f8 <ai_platform_outputs_get+0x1d8>
 8005352:	801c      	strh	r4, [r3, #0]
 8005354:	b005      	add	sp, #20
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	2400      	movs	r4, #0
 800535c:	2218      	movs	r2, #24
 800535e:	2111      	movs	r1, #17
 8005360:	f109 0010 	add.w	r0, r9, #16
 8005364:	f000 ffe8 	bl	8006338 <core_set_error>
 8005368:	4620      	mov	r0, r4
 800536a:	e7ef      	b.n	800534c <ai_platform_outputs_get+0x22c>
 800536c:	4a1e      	ldr	r2, [pc, #120]	@ (80053e8 <ai_platform_outputs_get+0x2c8>)
 800536e:	2301      	movs	r3, #1
 8005370:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005374:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1fb      	bne.n	8005374 <ai_platform_outputs_get+0x254>
 800537c:	4918      	ldr	r1, [pc, #96]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 800537e:	4b19      	ldr	r3, [pc, #100]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 8005380:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005384:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005388:	429a      	cmp	r2, r3
 800538a:	d0b2      	beq.n	80052f2 <ai_platform_outputs_get+0x1d2>
 800538c:	e7fe      	b.n	800538c <ai_platform_outputs_get+0x26c>
 800538e:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <ai_platform_outputs_get+0x2c8>)
 8005390:	2301      	movs	r3, #1
 8005392:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005396:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1fb      	bne.n	8005396 <ai_platform_outputs_get+0x276>
 800539e:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 80053a0:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80053a4:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 80053a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80053aa:	429a      	cmp	r2, r3
 80053ac:	f43f aef3 	beq.w	8005196 <ai_platform_outputs_get+0x76>
 80053b0:	e7fe      	b.n	80053b0 <ai_platform_outputs_get+0x290>
 80053b2:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <ai_platform_outputs_get+0x2bc>)
 80053b4:	2301      	movs	r3, #1
 80053b6:	6093      	str	r3, [r2, #8]
 80053b8:	6893      	ldr	r3, [r2, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1fc      	bne.n	80053b8 <ai_platform_outputs_get+0x298>
 80053be:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <ai_platform_outputs_get+0x2c0>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b08      	ldr	r3, [pc, #32]	@ (80053e4 <ai_platform_outputs_get+0x2c4>)
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	f43f aee5 	beq.w	8005196 <ai_platform_outputs_get+0x76>
 80053cc:	e7fe      	b.n	80053cc <ai_platform_outputs_get+0x2ac>
 80053ce:	bf00      	nop
 80053d0:	a1c00100 	.word	0xa1c00100
 80053d4:	e0042000 	.word	0xe0042000
 80053d8:	5c001000 	.word	0x5c001000
 80053dc:	40023000 	.word	0x40023000
 80053e0:	f407a5c2 	.word	0xf407a5c2
 80053e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80053e8:	58024000 	.word	0x58024000
 80053ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005424 <ai_platform_outputs_get+0x304>)
 80053ee:	2301      	movs	r3, #1
 80053f0:	6093      	str	r3, [r2, #8]
 80053f2:	6893      	ldr	r3, [r2, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1fc      	bne.n	80053f2 <ai_platform_outputs_get+0x2d2>
 80053f8:	490b      	ldr	r1, [pc, #44]	@ (8005428 <ai_platform_outputs_get+0x308>)
 80053fa:	4b0c      	ldr	r3, [pc, #48]	@ (800542c <ai_platform_outputs_get+0x30c>)
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	f43f af76 	beq.w	80052f2 <ai_platform_outputs_get+0x1d2>
 8005406:	e7fe      	b.n	8005406 <ai_platform_outputs_get+0x2e6>
 8005408:	4a06      	ldr	r2, [pc, #24]	@ (8005424 <ai_platform_outputs_get+0x304>)
 800540a:	2301      	movs	r3, #1
 800540c:	6093      	str	r3, [r2, #8]
 800540e:	6893      	ldr	r3, [r2, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1fc      	bne.n	800540e <ai_platform_outputs_get+0x2ee>
 8005414:	4b04      	ldr	r3, [pc, #16]	@ (8005428 <ai_platform_outputs_get+0x308>)
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4b04      	ldr	r3, [pc, #16]	@ (800542c <ai_platform_outputs_get+0x30c>)
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	f43f aeba 	beq.w	8005196 <ai_platform_outputs_get+0x76>
 8005422:	e7fe      	b.n	8005422 <ai_platform_outputs_get+0x302>
 8005424:	40023000 	.word	0x40023000
 8005428:	f407a5c2 	.word	0xf407a5c2
 800542c:	b5e8b5cd 	.word	0xb5e8b5cd

08005430 <ai_platform_network_create>:
 8005430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005434:	b083      	sub	sp, #12
 8005436:	4604      	mov	r4, r0
 8005438:	4615      	mov	r5, r2
 800543a:	461e      	mov	r6, r3
 800543c:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8005440:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8005444:	f7ff fb00 	bl	8004a48 <_ai_platform_acquire_crc>
 8005448:	2800      	cmp	r0, #0
 800544a:	f000 80bd 	beq.w	80055c8 <ai_platform_network_create+0x198>
 800544e:	4ba5      	ldr	r3, [pc, #660]	@ (80056e4 <ai_platform_network_create+0x2b4>)
 8005450:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 8005454:	4601      	mov	r1, r0
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800545c:	eb03 020c 	add.w	r2, r3, ip
 8005460:	2a01      	cmp	r2, #1
 8005462:	f240 80a8 	bls.w	80055b6 <ai_platform_network_create+0x186>
 8005466:	f240 4249 	movw	r2, #1097	@ 0x449
 800546a:	4293      	cmp	r3, r2
 800546c:	f000 80a3 	beq.w	80055b6 <ai_platform_network_create+0x186>
 8005470:	4a9d      	ldr	r2, [pc, #628]	@ (80056e8 <ai_platform_network_create+0x2b8>)
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005478:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800547c:	f000 80b9 	beq.w	80055f2 <ai_platform_network_create+0x1c2>
 8005480:	6813      	ldr	r3, [r2, #0]
 8005482:	f240 4c83 	movw	ip, #1155	@ 0x483
 8005486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800548a:	4563      	cmp	r3, ip
 800548c:	f000 80a1 	beq.w	80055d2 <ai_platform_network_create+0x1a2>
 8005490:	6813      	ldr	r3, [r2, #0]
 8005492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005496:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800549a:	f000 8153 	beq.w	8005744 <ai_platform_network_create+0x314>
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 808d 	bne.w	80055c4 <ai_platform_network_create+0x194>
 80054aa:	4a90      	ldr	r2, [pc, #576]	@ (80056ec <ai_platform_network_create+0x2bc>)
 80054ac:	2318      	movs	r3, #24
 80054ae:	6093      	str	r3, [r2, #8]
 80054b0:	6893      	ldr	r3, [r2, #8]
 80054b2:	2b18      	cmp	r3, #24
 80054b4:	f040 8086 	bne.w	80055c4 <ai_platform_network_create+0x194>
 80054b8:	2301      	movs	r3, #1
 80054ba:	6093      	str	r3, [r2, #8]
 80054bc:	6893      	ldr	r3, [r2, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1fc      	bne.n	80054bc <ai_platform_network_create+0x8c>
 80054c2:	4608      	mov	r0, r1
 80054c4:	f7ff fac2 	bl	8004a4c <_ai_platform_release_crc>
 80054c8:	f7ff fabe 	bl	8004a48 <_ai_platform_acquire_crc>
 80054cc:	4b85      	ldr	r3, [pc, #532]	@ (80056e4 <ai_platform_network_create+0x2b4>)
 80054ce:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054d8:	189a      	adds	r2, r3, r2
 80054da:	2a01      	cmp	r2, #1
 80054dc:	f240 809f 	bls.w	800561e <ai_platform_network_create+0x1ee>
 80054e0:	f240 4249 	movw	r2, #1097	@ 0x449
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f000 809a 	beq.w	800561e <ai_platform_network_create+0x1ee>
 80054ea:	4a7f      	ldr	r2, [pc, #508]	@ (80056e8 <ai_platform_network_create+0x2b8>)
 80054ec:	6813      	ldr	r3, [r2, #0]
 80054ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054f2:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80054f6:	f000 80a0 	beq.w	800563a <ai_platform_network_create+0x20a>
 80054fa:	6813      	ldr	r3, [r2, #0]
 80054fc:	f240 4183 	movw	r1, #1155	@ 0x483
 8005500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005504:	428b      	cmp	r3, r1
 8005506:	f000 80bf 	beq.w	8005688 <ai_platform_network_create+0x258>
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005510:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005514:	f000 8123 	beq.w	800575e <ai_platform_network_create+0x32e>
 8005518:	6813      	ldr	r3, [r2, #0]
 800551a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80c4 	beq.w	80056ac <ai_platform_network_create+0x27c>
 8005524:	f7ff fa92 	bl	8004a4c <_ai_platform_release_crc>
 8005528:	2c00      	cmp	r4, #0
 800552a:	f000 80aa 	beq.w	8005682 <ai_platform_network_create+0x252>
 800552e:	4b70      	ldr	r3, [pc, #448]	@ (80056f0 <ai_platform_network_create+0x2c0>)
 8005530:	602b      	str	r3, [r5, #0]
 8005532:	6025      	str	r5, [r4, #0]
 8005534:	f000 fef8 	bl	8006328 <core_init>
 8005538:	2800      	cmp	r0, #0
 800553a:	f000 8090 	beq.w	800565e <ai_platform_network_create+0x22e>
 800553e:	f7ff fa83 	bl	8004a48 <_ai_platform_acquire_crc>
 8005542:	4b68      	ldr	r3, [pc, #416]	@ (80056e4 <ai_platform_network_create+0x2b4>)
 8005544:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800554e:	185a      	adds	r2, r3, r1
 8005550:	2a01      	cmp	r2, #1
 8005552:	f240 80b9 	bls.w	80056c8 <ai_platform_network_create+0x298>
 8005556:	f240 4249 	movw	r2, #1097	@ 0x449
 800555a:	4293      	cmp	r3, r2
 800555c:	f000 80b4 	beq.w	80056c8 <ai_platform_network_create+0x298>
 8005560:	4a61      	ldr	r2, [pc, #388]	@ (80056e8 <ai_platform_network_create+0x2b8>)
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005568:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800556c:	f000 80c8 	beq.w	8005700 <ai_platform_network_create+0x2d0>
 8005570:	6813      	ldr	r3, [r2, #0]
 8005572:	f240 4183 	movw	r1, #1155	@ 0x483
 8005576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800557a:	428b      	cmp	r3, r1
 800557c:	f000 8107 	beq.w	800578e <ai_platform_network_create+0x35e>
 8005580:	6813      	ldr	r3, [r2, #0]
 8005582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005586:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800558a:	f000 8111 	beq.w	80057b0 <ai_platform_network_create+0x380>
 800558e:	6813      	ldr	r3, [r2, #0]
 8005590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005594:	2b00      	cmp	r3, #0
 8005596:	f040 80c3 	bne.w	8005720 <ai_platform_network_create+0x2f0>
 800559a:	4b54      	ldr	r3, [pc, #336]	@ (80056ec <ai_platform_network_create+0x2bc>)
 800559c:	2201      	movs	r2, #1
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	d1fc      	bne.n	80055a0 <ai_platform_network_create+0x170>
 80055a6:	4a53      	ldr	r2, [pc, #332]	@ (80056f4 <ai_platform_network_create+0x2c4>)
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b52      	ldr	r3, [pc, #328]	@ (80056f8 <ai_platform_network_create+0x2c8>)
 80055ae:	429a      	cmp	r2, r3
 80055b0:	f000 80b6 	beq.w	8005720 <ai_platform_network_create+0x2f0>
 80055b4:	e7fe      	b.n	80055b4 <ai_platform_network_create+0x184>
 80055b6:	4b4d      	ldr	r3, [pc, #308]	@ (80056ec <ai_platform_network_create+0x2bc>)
 80055b8:	2218      	movs	r2, #24
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	2a18      	cmp	r2, #24
 80055c0:	d027      	beq.n	8005612 <ai_platform_network_create+0x1e2>
 80055c2:	4608      	mov	r0, r1
 80055c4:	f7ff fa42 	bl	8004a4c <_ai_platform_release_crc>
 80055c8:	f244 1033 	movw	r0, #16691	@ 0x4133
 80055cc:	b003      	add	sp, #12
 80055ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d2:	4a4a      	ldr	r2, [pc, #296]	@ (80056fc <ai_platform_network_create+0x2cc>)
 80055d4:	2318      	movs	r3, #24
 80055d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80055da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80055de:	2b18      	cmp	r3, #24
 80055e0:	d1f0      	bne.n	80055c4 <ai_platform_network_create+0x194>
 80055e2:	2301      	movs	r3, #1
 80055e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80055e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1fb      	bne.n	80055e8 <ai_platform_network_create+0x1b8>
 80055f0:	e767      	b.n	80054c2 <ai_platform_network_create+0x92>
 80055f2:	4a42      	ldr	r2, [pc, #264]	@ (80056fc <ai_platform_network_create+0x2cc>)
 80055f4:	2318      	movs	r3, #24
 80055f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80055fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80055fe:	2b18      	cmp	r3, #24
 8005600:	d1e0      	bne.n	80055c4 <ai_platform_network_create+0x194>
 8005602:	2301      	movs	r3, #1
 8005604:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005608:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1fb      	bne.n	8005608 <ai_platform_network_create+0x1d8>
 8005610:	e757      	b.n	80054c2 <ai_platform_network_create+0x92>
 8005612:	2201      	movs	r2, #1
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	2a00      	cmp	r2, #0
 800561a:	d1fc      	bne.n	8005616 <ai_platform_network_create+0x1e6>
 800561c:	e751      	b.n	80054c2 <ai_platform_network_create+0x92>
 800561e:	4a33      	ldr	r2, [pc, #204]	@ (80056ec <ai_platform_network_create+0x2bc>)
 8005620:	2301      	movs	r3, #1
 8005622:	6093      	str	r3, [r2, #8]
 8005624:	6891      	ldr	r1, [r2, #8]
 8005626:	2900      	cmp	r1, #0
 8005628:	d1fc      	bne.n	8005624 <ai_platform_network_create+0x1f4>
 800562a:	4b32      	ldr	r3, [pc, #200]	@ (80056f4 <ai_platform_network_create+0x2c4>)
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b32      	ldr	r3, [pc, #200]	@ (80056f8 <ai_platform_network_create+0x2c8>)
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	f43f af76 	beq.w	8005524 <ai_platform_network_create+0xf4>
 8005638:	e7fe      	b.n	8005638 <ai_platform_network_create+0x208>
 800563a:	4a30      	ldr	r2, [pc, #192]	@ (80056fc <ai_platform_network_create+0x2cc>)
 800563c:	2301      	movs	r3, #1
 800563e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005642:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1fb      	bne.n	8005642 <ai_platform_network_create+0x212>
 800564a:	4b2a      	ldr	r3, [pc, #168]	@ (80056f4 <ai_platform_network_create+0x2c4>)
 800564c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005650:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <ai_platform_network_create+0x2c8>)
 8005652:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005656:	429a      	cmp	r2, r3
 8005658:	f43f af64 	beq.w	8005524 <ai_platform_network_create+0xf4>
 800565c:	e7fe      	b.n	800565c <ai_platform_network_create+0x22c>
 800565e:	f04f 0930 	mov.w	r9, #48	@ 0x30
 8005662:	2300      	movs	r3, #0
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	2410      	movs	r4, #16
 8005668:	4642      	mov	r2, r8
 800566a:	4639      	mov	r1, r7
 800566c:	4630      	mov	r0, r6
 800566e:	f003 fbb9 	bl	8008de4 <ai_version_get>
 8005672:	4603      	mov	r3, r0
 8005674:	2000      	movs	r0, #0
 8005676:	64ab      	str	r3, [r5, #72]	@ 0x48
 8005678:	f369 0007 	bfi	r0, r9, #0, #8
 800567c:	f364 201f 	bfi	r0, r4, #8, #24
 8005680:	e7a4      	b.n	80055cc <ai_platform_network_create+0x19c>
 8005682:	f241 0010 	movw	r0, #4112	@ 0x1010
 8005686:	e7a1      	b.n	80055cc <ai_platform_network_create+0x19c>
 8005688:	4a1c      	ldr	r2, [pc, #112]	@ (80056fc <ai_platform_network_create+0x2cc>)
 800568a:	2301      	movs	r3, #1
 800568c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005690:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1fb      	bne.n	8005690 <ai_platform_network_create+0x260>
 8005698:	4b16      	ldr	r3, [pc, #88]	@ (80056f4 <ai_platform_network_create+0x2c4>)
 800569a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800569e:	4b16      	ldr	r3, [pc, #88]	@ (80056f8 <ai_platform_network_create+0x2c8>)
 80056a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80056a4:	429a      	cmp	r2, r3
 80056a6:	f43f af3d 	beq.w	8005524 <ai_platform_network_create+0xf4>
 80056aa:	e7fe      	b.n	80056aa <ai_platform_network_create+0x27a>
 80056ac:	4a0f      	ldr	r2, [pc, #60]	@ (80056ec <ai_platform_network_create+0x2bc>)
 80056ae:	2301      	movs	r3, #1
 80056b0:	6093      	str	r3, [r2, #8]
 80056b2:	6893      	ldr	r3, [r2, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1fc      	bne.n	80056b2 <ai_platform_network_create+0x282>
 80056b8:	4b0e      	ldr	r3, [pc, #56]	@ (80056f4 <ai_platform_network_create+0x2c4>)
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b0e      	ldr	r3, [pc, #56]	@ (80056f8 <ai_platform_network_create+0x2c8>)
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	f43f af2f 	beq.w	8005524 <ai_platform_network_create+0xf4>
 80056c6:	e7fe      	b.n	80056c6 <ai_platform_network_create+0x296>
 80056c8:	4a08      	ldr	r2, [pc, #32]	@ (80056ec <ai_platform_network_create+0x2bc>)
 80056ca:	2301      	movs	r3, #1
 80056cc:	6093      	str	r3, [r2, #8]
 80056ce:	6893      	ldr	r3, [r2, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1fc      	bne.n	80056ce <ai_platform_network_create+0x29e>
 80056d4:	4b07      	ldr	r3, [pc, #28]	@ (80056f4 <ai_platform_network_create+0x2c4>)
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	4b07      	ldr	r3, [pc, #28]	@ (80056f8 <ai_platform_network_create+0x2c8>)
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d01f      	beq.n	8005720 <ai_platform_network_create+0x2f0>
 80056e0:	e7fe      	b.n	80056e0 <ai_platform_network_create+0x2b0>
 80056e2:	bf00      	nop
 80056e4:	e0042000 	.word	0xe0042000
 80056e8:	5c001000 	.word	0x5c001000
 80056ec:	40023000 	.word	0x40023000
 80056f0:	a1c00100 	.word	0xa1c00100
 80056f4:	f407a5c2 	.word	0xf407a5c2
 80056f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80056fc:	58024000 	.word	0x58024000
 8005700:	4a33      	ldr	r2, [pc, #204]	@ (80057d0 <ai_platform_network_create+0x3a0>)
 8005702:	2301      	movs	r3, #1
 8005704:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005708:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1fb      	bne.n	8005708 <ai_platform_network_create+0x2d8>
 8005710:	4b30      	ldr	r3, [pc, #192]	@ (80057d4 <ai_platform_network_create+0x3a4>)
 8005712:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005716:	4b30      	ldr	r3, [pc, #192]	@ (80057d8 <ai_platform_network_create+0x3a8>)
 8005718:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800571c:	429a      	cmp	r2, r3
 800571e:	d12c      	bne.n	800577a <ai_platform_network_create+0x34a>
 8005720:	f7ff f994 	bl	8004a4c <_ai_platform_release_crc>
 8005724:	2200      	movs	r2, #0
 8005726:	4639      	mov	r1, r7
 8005728:	4630      	mov	r0, r6
 800572a:	f003 fb5b 	bl	8008de4 <ai_version_get>
 800572e:	4681      	mov	r9, r0
 8005730:	2200      	movs	r2, #0
 8005732:	2105      	movs	r1, #5
 8005734:	2001      	movs	r0, #1
 8005736:	f003 fb55 	bl	8008de4 <ai_version_get>
 800573a:	4581      	cmp	r9, r0
 800573c:	d01e      	beq.n	800577c <ai_platform_network_create+0x34c>
 800573e:	f04f 0901 	mov.w	r9, #1
 8005742:	e78e      	b.n	8005662 <ai_platform_network_create+0x232>
 8005744:	4b25      	ldr	r3, [pc, #148]	@ (80057dc <ai_platform_network_create+0x3ac>)
 8005746:	2218      	movs	r2, #24
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	2a18      	cmp	r2, #24
 800574e:	f47f af39 	bne.w	80055c4 <ai_platform_network_create+0x194>
 8005752:	2201      	movs	r2, #1
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	2a00      	cmp	r2, #0
 800575a:	d1fc      	bne.n	8005756 <ai_platform_network_create+0x326>
 800575c:	e6b1      	b.n	80054c2 <ai_platform_network_create+0x92>
 800575e:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <ai_platform_network_create+0x3ac>)
 8005760:	2301      	movs	r3, #1
 8005762:	6093      	str	r3, [r2, #8]
 8005764:	6893      	ldr	r3, [r2, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1fc      	bne.n	8005764 <ai_platform_network_create+0x334>
 800576a:	4b1a      	ldr	r3, [pc, #104]	@ (80057d4 <ai_platform_network_create+0x3a4>)
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b1a      	ldr	r3, [pc, #104]	@ (80057d8 <ai_platform_network_create+0x3a8>)
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	f43f aed6 	beq.w	8005524 <ai_platform_network_create+0xf4>
 8005778:	e7fe      	b.n	8005778 <ai_platform_network_create+0x348>
 800577a:	e7fe      	b.n	800577a <ai_platform_network_create+0x34a>
 800577c:	4b18      	ldr	r3, [pc, #96]	@ (80057e0 <ai_platform_network_create+0x3b0>)
 800577e:	a801      	add	r0, sp, #4
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	f000 fde5 	bl	8006350 <ai_check_custom_types>
 8005786:	b300      	cbz	r0, 80057ca <ai_platform_network_create+0x39a>
 8005788:	2400      	movs	r4, #0
 800578a:	46a1      	mov	r9, r4
 800578c:	e76c      	b.n	8005668 <ai_platform_network_create+0x238>
 800578e:	4b10      	ldr	r3, [pc, #64]	@ (80057d0 <ai_platform_network_create+0x3a0>)
 8005790:	2201      	movs	r2, #1
 8005792:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 8005796:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 800579a:	2a00      	cmp	r2, #0
 800579c:	d1fb      	bne.n	8005796 <ai_platform_network_create+0x366>
 800579e:	4a0d      	ldr	r2, [pc, #52]	@ (80057d4 <ai_platform_network_create+0x3a4>)
 80057a0:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 80057a4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <ai_platform_network_create+0x3a8>)
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d0b8      	beq.n	8005720 <ai_platform_network_create+0x2f0>
 80057ae:	e7fe      	b.n	80057ae <ai_platform_network_create+0x37e>
 80057b0:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <ai_platform_network_create+0x3ac>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d1fc      	bne.n	80057b6 <ai_platform_network_create+0x386>
 80057bc:	4a05      	ldr	r2, [pc, #20]	@ (80057d4 <ai_platform_network_create+0x3a4>)
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <ai_platform_network_create+0x3a8>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d0ab      	beq.n	8005720 <ai_platform_network_create+0x2f0>
 80057c8:	e7fe      	b.n	80057c8 <ai_platform_network_create+0x398>
 80057ca:	f04f 0902 	mov.w	r9, #2
 80057ce:	e748      	b.n	8005662 <ai_platform_network_create+0x232>
 80057d0:	58024000 	.word	0x58024000
 80057d4:	f407a5c2 	.word	0xf407a5c2
 80057d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80057dc:	40023000 	.word	0x40023000
 80057e0:	84048403 	.word	0x84048403

080057e4 <ai_platform_network_init>:
 80057e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d052      	beq.n	8005892 <ai_platform_network_init+0xae>
 80057ec:	4bab      	ldr	r3, [pc, #684]	@ (8005a9c <ai_platform_network_init+0x2b8>)
 80057ee:	4604      	mov	r4, r0
 80057f0:	6802      	ldr	r2, [r0, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d14d      	bne.n	8005892 <ai_platform_network_init+0xae>
 80057f6:	460d      	mov	r5, r1
 80057f8:	f7ff f926 	bl	8004a48 <_ai_platform_acquire_crc>
 80057fc:	4ba8      	ldr	r3, [pc, #672]	@ (8005aa0 <ai_platform_network_init+0x2bc>)
 80057fe:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005808:	189a      	adds	r2, r3, r2
 800580a:	2a01      	cmp	r2, #1
 800580c:	f240 809b 	bls.w	8005946 <ai_platform_network_init+0x162>
 8005810:	f240 4249 	movw	r2, #1097	@ 0x449
 8005814:	4293      	cmp	r3, r2
 8005816:	f000 8096 	beq.w	8005946 <ai_platform_network_init+0x162>
 800581a:	4aa2      	ldr	r2, [pc, #648]	@ (8005aa4 <ai_platform_network_init+0x2c0>)
 800581c:	6813      	ldr	r3, [r2, #0]
 800581e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005822:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005826:	f000 809d 	beq.w	8005964 <ai_platform_network_init+0x180>
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	f240 4183 	movw	r1, #1155	@ 0x483
 8005830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005834:	428b      	cmp	r3, r1
 8005836:	f000 80e4 	beq.w	8005a02 <ai_platform_network_init+0x21e>
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005840:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005844:	f000 811b 	beq.w	8005a7e <ai_platform_network_init+0x29a>
 8005848:	6813      	ldr	r3, [r2, #0]
 800584a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80f9 	beq.w	8005a46 <ai_platform_network_init+0x262>
 8005854:	f7ff f8fa 	bl	8004a4c <_ai_platform_release_crc>
 8005858:	2d00      	cmp	r5, #0
 800585a:	f000 8147 	beq.w	8005aec <ai_platform_network_init+0x308>
 800585e:	4b92      	ldr	r3, [pc, #584]	@ (8005aa8 <ai_platform_network_init+0x2c4>)
 8005860:	682a      	ldr	r2, [r5, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	f040 8090 	bne.w	8005988 <ai_platform_network_init+0x1a4>
 8005868:	692b      	ldr	r3, [r5, #16]
 800586a:	89ae      	ldrh	r6, [r5, #12]
 800586c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8005870:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8005874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005876:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800587a:	2303      	movs	r3, #3
 800587c:	84a6      	strh	r6, [r4, #36]	@ 0x24
 800587e:	4626      	mov	r6, r4
 8005880:	4620      	mov	r0, r4
 8005882:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 8005886:	60e3      	str	r3, [r4, #12]
 8005888:	f000 fd8a 	bl	80063a0 <ai_layers_init_all>
 800588c:	4630      	mov	r0, r6
 800588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005892:	f7ff f8d9 	bl	8004a48 <_ai_platform_acquire_crc>
 8005896:	4b82      	ldr	r3, [pc, #520]	@ (8005aa0 <ai_platform_network_init+0x2bc>)
 8005898:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058a2:	185a      	adds	r2, r3, r1
 80058a4:	2a01      	cmp	r2, #1
 80058a6:	d92b      	bls.n	8005900 <ai_platform_network_init+0x11c>
 80058a8:	f240 4249 	movw	r2, #1097	@ 0x449
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d027      	beq.n	8005900 <ai_platform_network_init+0x11c>
 80058b0:	4a7c      	ldr	r2, [pc, #496]	@ (8005aa4 <ai_platform_network_init+0x2c0>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058b8:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80058bc:	d02d      	beq.n	800591a <ai_platform_network_init+0x136>
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	f240 4183 	movw	r1, #1155	@ 0x483
 80058c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058c8:	428b      	cmp	r3, r1
 80058ca:	f000 8089 	beq.w	80059e0 <ai_platform_network_init+0x1fc>
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058d4:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80058d8:	f000 80c3 	beq.w	8005a62 <ai_platform_network_init+0x27e>
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d129      	bne.n	800593a <ai_platform_network_init+0x156>
 80058e6:	4a71      	ldr	r2, [pc, #452]	@ (8005aac <ai_platform_network_init+0x2c8>)
 80058e8:	2301      	movs	r3, #1
 80058ea:	6093      	str	r3, [r2, #8]
 80058ec:	6893      	ldr	r3, [r2, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1fc      	bne.n	80058ec <ai_platform_network_init+0x108>
 80058f2:	496f      	ldr	r1, [pc, #444]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 80058f4:	4b6f      	ldr	r3, [pc, #444]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 80058f6:	6011      	str	r1, [r2, #0]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d01d      	beq.n	800593a <ai_platform_network_init+0x156>
 80058fe:	e7fe      	b.n	80058fe <ai_platform_network_init+0x11a>
 8005900:	4a6a      	ldr	r2, [pc, #424]	@ (8005aac <ai_platform_network_init+0x2c8>)
 8005902:	2301      	movs	r3, #1
 8005904:	6093      	str	r3, [r2, #8]
 8005906:	6893      	ldr	r3, [r2, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1fc      	bne.n	8005906 <ai_platform_network_init+0x122>
 800590c:	4968      	ldr	r1, [pc, #416]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 800590e:	4b69      	ldr	r3, [pc, #420]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d010      	beq.n	800593a <ai_platform_network_init+0x156>
 8005918:	e7fe      	b.n	8005918 <ai_platform_network_init+0x134>
 800591a:	4a67      	ldr	r2, [pc, #412]	@ (8005ab8 <ai_platform_network_init+0x2d4>)
 800591c:	2301      	movs	r3, #1
 800591e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005922:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1fb      	bne.n	8005922 <ai_platform_network_init+0x13e>
 800592a:	4961      	ldr	r1, [pc, #388]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 800592c:	4b61      	ldr	r3, [pc, #388]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 800592e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005932:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005936:	429a      	cmp	r2, r3
 8005938:	d113      	bne.n	8005962 <ai_platform_network_init+0x17e>
 800593a:	2600      	movs	r6, #0
 800593c:	f7ff f886 	bl	8004a4c <_ai_platform_release_crc>
 8005940:	4630      	mov	r0, r6
 8005942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005946:	4a59      	ldr	r2, [pc, #356]	@ (8005aac <ai_platform_network_init+0x2c8>)
 8005948:	2301      	movs	r3, #1
 800594a:	6093      	str	r3, [r2, #8]
 800594c:	6893      	ldr	r3, [r2, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1fc      	bne.n	800594c <ai_platform_network_init+0x168>
 8005952:	4b57      	ldr	r3, [pc, #348]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	4b57      	ldr	r3, [pc, #348]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	f43f af7a 	beq.w	8005854 <ai_platform_network_init+0x70>
 8005960:	e7fe      	b.n	8005960 <ai_platform_network_init+0x17c>
 8005962:	e7fe      	b.n	8005962 <ai_platform_network_init+0x17e>
 8005964:	4a54      	ldr	r2, [pc, #336]	@ (8005ab8 <ai_platform_network_init+0x2d4>)
 8005966:	2301      	movs	r3, #1
 8005968:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800596c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1fb      	bne.n	800596c <ai_platform_network_init+0x188>
 8005974:	4b4e      	ldr	r3, [pc, #312]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 8005976:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800597a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 800597c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005980:	429a      	cmp	r2, r3
 8005982:	f43f af67 	beq.w	8005854 <ai_platform_network_init+0x70>
 8005986:	e7fe      	b.n	8005986 <ai_platform_network_init+0x1a2>
 8005988:	2101      	movs	r1, #1
 800598a:	4628      	mov	r0, r5
 800598c:	f105 081c 	add.w	r8, r5, #28
 8005990:	686e      	ldr	r6, [r5, #4]
 8005992:	f7ff f80b 	bl	80049ac <ai_buffer_get_size>
 8005996:	4607      	mov	r7, r0
 8005998:	2101      	movs	r1, #1
 800599a:	4640      	mov	r0, r8
 800599c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80059a0:	f7ff f804 	bl	80049ac <ai_buffer_get_size>
 80059a4:	2f00      	cmp	r7, #0
 80059a6:	d13e      	bne.n	8005a26 <ai_platform_network_init+0x242>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	f000 808e 	beq.w	8005aca <ai_platform_network_init+0x2e6>
 80059ae:	f1b9 0f00 	cmp.w	r9, #0
 80059b2:	f000 8094 	beq.w	8005ade <ai_platform_network_init+0x2fa>
 80059b6:	f04f 0c01 	mov.w	ip, #1
 80059ba:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80059bc:	2600      	movs	r6, #0
 80059be:	83e7      	strh	r7, [r4, #30]
 80059c0:	4563      	cmp	r3, ip
 80059c2:	83a6      	strh	r6, [r4, #28]
 80059c4:	d37a      	bcc.n	8005abc <ai_platform_network_init+0x2d8>
 80059c6:	f1bc 0f00 	cmp.w	ip, #0
 80059ca:	f000 809c 	beq.w	8005b06 <ai_platform_network_init+0x322>
 80059ce:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80059d0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80059d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80059da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80059de:	e74c      	b.n	800587a <ai_platform_network_init+0x96>
 80059e0:	4a35      	ldr	r2, [pc, #212]	@ (8005ab8 <ai_platform_network_init+0x2d4>)
 80059e2:	2301      	movs	r3, #1
 80059e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80059e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1fb      	bne.n	80059e8 <ai_platform_network_init+0x204>
 80059f0:	492f      	ldr	r1, [pc, #188]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 80059f2:	4b30      	ldr	r3, [pc, #192]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 80059f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80059f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d09c      	beq.n	800593a <ai_platform_network_init+0x156>
 8005a00:	e7fe      	b.n	8005a00 <ai_platform_network_init+0x21c>
 8005a02:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab8 <ai_platform_network_init+0x2d4>)
 8005a04:	2301      	movs	r3, #1
 8005a06:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005a0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1fb      	bne.n	8005a0a <ai_platform_network_init+0x226>
 8005a12:	4b27      	ldr	r3, [pc, #156]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 8005a14:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005a18:	4b26      	ldr	r3, [pc, #152]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 8005a1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	f43f af18 	beq.w	8005854 <ai_platform_network_init+0x70>
 8005a24:	e7fe      	b.n	8005a24 <ai_platform_network_init+0x240>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d153      	bne.n	8005ad2 <ai_platform_network_init+0x2ee>
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	4684      	mov	ip, r0
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	d063      	beq.n	8005afa <ai_platform_network_init+0x316>
 8005a32:	8be6      	ldrh	r6, [r4, #30]
 8005a34:	2e00      	cmp	r6, #0
 8005a36:	d168      	bne.n	8005b0a <ai_platform_network_init+0x326>
 8005a38:	2212      	movs	r2, #18
 8005a3a:	2116      	movs	r1, #22
 8005a3c:	f104 0010 	add.w	r0, r4, #16
 8005a40:	f000 fc7a 	bl	8006338 <core_set_error>
 8005a44:	e77c      	b.n	8005940 <ai_platform_network_init+0x15c>
 8005a46:	4a19      	ldr	r2, [pc, #100]	@ (8005aac <ai_platform_network_init+0x2c8>)
 8005a48:	2301      	movs	r3, #1
 8005a4a:	6093      	str	r3, [r2, #8]
 8005a4c:	6893      	ldr	r3, [r2, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1fc      	bne.n	8005a4c <ai_platform_network_init+0x268>
 8005a52:	4b17      	ldr	r3, [pc, #92]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	4b17      	ldr	r3, [pc, #92]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	f43f aefa 	beq.w	8005854 <ai_platform_network_init+0x70>
 8005a60:	e7fe      	b.n	8005a60 <ai_platform_network_init+0x27c>
 8005a62:	4a12      	ldr	r2, [pc, #72]	@ (8005aac <ai_platform_network_init+0x2c8>)
 8005a64:	2301      	movs	r3, #1
 8005a66:	6093      	str	r3, [r2, #8]
 8005a68:	6893      	ldr	r3, [r2, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1fc      	bne.n	8005a68 <ai_platform_network_init+0x284>
 8005a6e:	4910      	ldr	r1, [pc, #64]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 8005a70:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 8005a72:	6011      	str	r1, [r2, #0]
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	f43f af5f 	beq.w	800593a <ai_platform_network_init+0x156>
 8005a7c:	e7fe      	b.n	8005a7c <ai_platform_network_init+0x298>
 8005a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8005aac <ai_platform_network_init+0x2c8>)
 8005a80:	2301      	movs	r3, #1
 8005a82:	6093      	str	r3, [r2, #8]
 8005a84:	6893      	ldr	r3, [r2, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1fc      	bne.n	8005a84 <ai_platform_network_init+0x2a0>
 8005a8a:	4b09      	ldr	r3, [pc, #36]	@ (8005ab0 <ai_platform_network_init+0x2cc>)
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <ai_platform_network_init+0x2d0>)
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	f43f aede 	beq.w	8005854 <ai_platform_network_init+0x70>
 8005a98:	e7fe      	b.n	8005a98 <ai_platform_network_init+0x2b4>
 8005a9a:	bf00      	nop
 8005a9c:	a1c00100 	.word	0xa1c00100
 8005aa0:	e0042000 	.word	0xe0042000
 8005aa4:	5c001000 	.word	0x5c001000
 8005aa8:	a1facade 	.word	0xa1facade
 8005aac:	40023000 	.word	0x40023000
 8005ab0:	f407a5c2 	.word	0xf407a5c2
 8005ab4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ab8:	58024000 	.word	0x58024000
 8005abc:	2213      	movs	r2, #19
 8005abe:	2116      	movs	r1, #22
 8005ac0:	f104 0010 	add.w	r0, r4, #16
 8005ac4:	f000 fc38 	bl	8006338 <core_set_error>
 8005ac8:	e73a      	b.n	8005940 <ai_platform_network_init+0x15c>
 8005aca:	4607      	mov	r7, r0
 8005acc:	4680      	mov	r8, r0
 8005ace:	4684      	mov	ip, r0
 8005ad0:	e773      	b.n	80059ba <ai_platform_network_init+0x1d6>
 8005ad2:	f1b9 0f00 	cmp.w	r9, #0
 8005ad6:	d002      	beq.n	8005ade <ai_platform_network_init+0x2fa>
 8005ad8:	f04f 0c01 	mov.w	ip, #1
 8005adc:	e7a7      	b.n	8005a2e <ai_platform_network_init+0x24a>
 8005ade:	2110      	movs	r1, #16
 8005ae0:	2213      	movs	r2, #19
 8005ae2:	2600      	movs	r6, #0
 8005ae4:	1860      	adds	r0, r4, r1
 8005ae6:	f000 fc27 	bl	8006338 <core_set_error>
 8005aea:	e729      	b.n	8005940 <ai_platform_network_init+0x15c>
 8005aec:	2110      	movs	r1, #16
 8005aee:	2211      	movs	r2, #17
 8005af0:	462e      	mov	r6, r5
 8005af2:	1860      	adds	r0, r4, r1
 8005af4:	f000 fc20 	bl	8006338 <core_set_error>
 8005af8:	e722      	b.n	8005940 <ai_platform_network_init+0x15c>
 8005afa:	2110      	movs	r1, #16
 8005afc:	2212      	movs	r2, #18
 8005afe:	1860      	adds	r0, r4, r1
 8005b00:	f000 fc1a 	bl	8006338 <core_set_error>
 8005b04:	e71c      	b.n	8005940 <ai_platform_network_init+0x15c>
 8005b06:	4666      	mov	r6, ip
 8005b08:	e6b7      	b.n	800587a <ai_platform_network_init+0x96>
 8005b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b0c:	6a26      	ldr	r6, [r4, #32]
 8005b0e:	2701      	movs	r7, #1
 8005b10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005b12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b16:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005b1a:	e74e      	b.n	80059ba <ai_platform_network_init+0x1d6>

08005b1c <ai_platform_network_post_init>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d04e      	beq.n	8005bc0 <ai_platform_network_post_init+0xa4>
 8005b22:	4b8c      	ldr	r3, [pc, #560]	@ (8005d54 <ai_platform_network_post_init+0x238>)
 8005b24:	4604      	mov	r4, r0
 8005b26:	6802      	ldr	r2, [r0, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d149      	bne.n	8005bc0 <ai_platform_network_post_init+0xa4>
 8005b2c:	f7fe ff8c 	bl	8004a48 <_ai_platform_acquire_crc>
 8005b30:	4b89      	ldr	r3, [pc, #548]	@ (8005d58 <ai_platform_network_post_init+0x23c>)
 8005b32:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b3c:	189a      	adds	r2, r3, r2
 8005b3e:	2a01      	cmp	r2, #1
 8005b40:	f240 8095 	bls.w	8005c6e <ai_platform_network_post_init+0x152>
 8005b44:	f240 4249 	movw	r2, #1097	@ 0x449
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	f000 8090 	beq.w	8005c6e <ai_platform_network_post_init+0x152>
 8005b4e:	4a83      	ldr	r2, [pc, #524]	@ (8005d5c <ai_platform_network_post_init+0x240>)
 8005b50:	6813      	ldr	r3, [r2, #0]
 8005b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b56:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005b5a:	f000 8096 	beq.w	8005c8a <ai_platform_network_post_init+0x16e>
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	f240 4183 	movw	r1, #1155	@ 0x483
 8005b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	f000 80b8 	beq.w	8005cde <ai_platform_network_post_init+0x1c2>
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b74:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005b78:	f000 80de 	beq.w	8005d38 <ai_platform_network_post_init+0x21c>
 8005b7c:	6813      	ldr	r3, [r2, #0]
 8005b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80bd 	beq.w	8005d02 <ai_platform_network_post_init+0x1e6>
 8005b88:	f7fe ff60 	bl	8004a4c <_ai_platform_release_crc>
 8005b8c:	68e3      	ldr	r3, [r4, #12]
 8005b8e:	f013 0502 	ands.w	r5, r3, #2
 8005b92:	f000 808c 	beq.w	8005cae <ai_platform_network_post_init+0x192>
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fc10 	bl	80063bc <ai_layers_post_init_all>
 8005b9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005b9e:	b16b      	cbz	r3, 8005bbc <ai_platform_network_post_init+0xa0>
 8005ba0:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8005ba2:	e007      	b.n	8005bb4 <ai_platform_network_post_init+0x98>
 8005ba4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 8005ba8:	4798      	blx	r3
 8005baa:	692b      	ldr	r3, [r5, #16]
 8005bac:	b133      	cbz	r3, 8005bbc <ai_platform_network_post_init+0xa0>
 8005bae:	42ab      	cmp	r3, r5
 8005bb0:	461d      	mov	r5, r3
 8005bb2:	d003      	beq.n	8005bbc <ai_platform_network_post_init+0xa0>
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	d1f3      	bne.n	8005ba4 <ai_platform_network_post_init+0x88>
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	f7fe ff42 	bl	8004a48 <_ai_platform_acquire_crc>
 8005bc4:	4b64      	ldr	r3, [pc, #400]	@ (8005d58 <ai_platform_network_post_init+0x23c>)
 8005bc6:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bd0:	185a      	adds	r2, r3, r1
 8005bd2:	2a01      	cmp	r2, #1
 8005bd4:	d92a      	bls.n	8005c2c <ai_platform_network_post_init+0x110>
 8005bd6:	f240 4249 	movw	r2, #1097	@ 0x449
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d026      	beq.n	8005c2c <ai_platform_network_post_init+0x110>
 8005bde:	4a5f      	ldr	r2, [pc, #380]	@ (8005d5c <ai_platform_network_post_init+0x240>)
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005be6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005bea:	d02c      	beq.n	8005c46 <ai_platform_network_post_init+0x12a>
 8005bec:	6813      	ldr	r3, [r2, #0]
 8005bee:	f240 4183 	movw	r1, #1155	@ 0x483
 8005bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bf6:	428b      	cmp	r3, r1
 8005bf8:	d060      	beq.n	8005cbc <ai_platform_network_post_init+0x1a0>
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c00:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005c04:	f000 808b 	beq.w	8005d1e <ai_platform_network_post_init+0x202>
 8005c08:	6813      	ldr	r3, [r2, #0]
 8005c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d129      	bne.n	8005c66 <ai_platform_network_post_init+0x14a>
 8005c12:	4a53      	ldr	r2, [pc, #332]	@ (8005d60 <ai_platform_network_post_init+0x244>)
 8005c14:	2301      	movs	r3, #1
 8005c16:	6093      	str	r3, [r2, #8]
 8005c18:	6893      	ldr	r3, [r2, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1fc      	bne.n	8005c18 <ai_platform_network_post_init+0xfc>
 8005c1e:	4951      	ldr	r1, [pc, #324]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005c20:	4b51      	ldr	r3, [pc, #324]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005c22:	6011      	str	r1, [r2, #0]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d01d      	beq.n	8005c66 <ai_platform_network_post_init+0x14a>
 8005c2a:	e7fe      	b.n	8005c2a <ai_platform_network_post_init+0x10e>
 8005c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8005d60 <ai_platform_network_post_init+0x244>)
 8005c2e:	2301      	movs	r3, #1
 8005c30:	6093      	str	r3, [r2, #8]
 8005c32:	6893      	ldr	r3, [r2, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1fc      	bne.n	8005c32 <ai_platform_network_post_init+0x116>
 8005c38:	494a      	ldr	r1, [pc, #296]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d010      	beq.n	8005c66 <ai_platform_network_post_init+0x14a>
 8005c44:	e7fe      	b.n	8005c44 <ai_platform_network_post_init+0x128>
 8005c46:	4a49      	ldr	r2, [pc, #292]	@ (8005d6c <ai_platform_network_post_init+0x250>)
 8005c48:	2301      	movs	r3, #1
 8005c4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005c4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1fb      	bne.n	8005c4e <ai_platform_network_post_init+0x132>
 8005c56:	4943      	ldr	r1, [pc, #268]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005c58:	4b43      	ldr	r3, [pc, #268]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005c5a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005c5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d110      	bne.n	8005c88 <ai_platform_network_post_init+0x16c>
 8005c66:	f7fe fef1 	bl	8004a4c <_ai_platform_release_crc>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	bd38      	pop	{r3, r4, r5, pc}
 8005c6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005d60 <ai_platform_network_post_init+0x244>)
 8005c70:	2301      	movs	r3, #1
 8005c72:	6093      	str	r3, [r2, #8]
 8005c74:	6893      	ldr	r3, [r2, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1fc      	bne.n	8005c74 <ai_platform_network_post_init+0x158>
 8005c7a:	493a      	ldr	r1, [pc, #232]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005c7e:	6011      	str	r1, [r2, #0]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d080      	beq.n	8005b88 <ai_platform_network_post_init+0x6c>
 8005c86:	e7fe      	b.n	8005c86 <ai_platform_network_post_init+0x16a>
 8005c88:	e7fe      	b.n	8005c88 <ai_platform_network_post_init+0x16c>
 8005c8a:	4a38      	ldr	r2, [pc, #224]	@ (8005d6c <ai_platform_network_post_init+0x250>)
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005c92:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1fb      	bne.n	8005c92 <ai_platform_network_post_init+0x176>
 8005c9a:	4932      	ldr	r1, [pc, #200]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005c9c:	4b32      	ldr	r3, [pc, #200]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005c9e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005ca2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	f43f af6e 	beq.w	8005b88 <ai_platform_network_post_init+0x6c>
 8005cac:	e7fe      	b.n	8005cac <ai_platform_network_post_init+0x190>
 8005cae:	2210      	movs	r2, #16
 8005cb0:	2111      	movs	r1, #17
 8005cb2:	18a0      	adds	r0, r4, r2
 8005cb4:	f000 fb40 	bl	8006338 <core_set_error>
 8005cb8:	4628      	mov	r0, r5
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8005d6c <ai_platform_network_post_init+0x250>)
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005cc4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1fb      	bne.n	8005cc4 <ai_platform_network_post_init+0x1a8>
 8005ccc:	4925      	ldr	r1, [pc, #148]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005cce:	4b26      	ldr	r3, [pc, #152]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005cd0:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005cd4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d0c4      	beq.n	8005c66 <ai_platform_network_post_init+0x14a>
 8005cdc:	e7fe      	b.n	8005cdc <ai_platform_network_post_init+0x1c0>
 8005cde:	4a23      	ldr	r2, [pc, #140]	@ (8005d6c <ai_platform_network_post_init+0x250>)
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005ce6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1fb      	bne.n	8005ce6 <ai_platform_network_post_init+0x1ca>
 8005cee:	491d      	ldr	r1, [pc, #116]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005cf2:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005cf6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	f43f af44 	beq.w	8005b88 <ai_platform_network_post_init+0x6c>
 8005d00:	e7fe      	b.n	8005d00 <ai_platform_network_post_init+0x1e4>
 8005d02:	4a17      	ldr	r2, [pc, #92]	@ (8005d60 <ai_platform_network_post_init+0x244>)
 8005d04:	2301      	movs	r3, #1
 8005d06:	6093      	str	r3, [r2, #8]
 8005d08:	6893      	ldr	r3, [r2, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1fc      	bne.n	8005d08 <ai_platform_network_post_init+0x1ec>
 8005d0e:	4915      	ldr	r1, [pc, #84]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005d10:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005d12:	6011      	str	r1, [r2, #0]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f43f af36 	beq.w	8005b88 <ai_platform_network_post_init+0x6c>
 8005d1c:	e7fe      	b.n	8005d1c <ai_platform_network_post_init+0x200>
 8005d1e:	4a10      	ldr	r2, [pc, #64]	@ (8005d60 <ai_platform_network_post_init+0x244>)
 8005d20:	2301      	movs	r3, #1
 8005d22:	6093      	str	r3, [r2, #8]
 8005d24:	6893      	ldr	r3, [r2, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1fc      	bne.n	8005d24 <ai_platform_network_post_init+0x208>
 8005d2a:	490e      	ldr	r1, [pc, #56]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005d2e:	6011      	str	r1, [r2, #0]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d097      	beq.n	8005c66 <ai_platform_network_post_init+0x14a>
 8005d36:	e7fe      	b.n	8005d36 <ai_platform_network_post_init+0x21a>
 8005d38:	4a09      	ldr	r2, [pc, #36]	@ (8005d60 <ai_platform_network_post_init+0x244>)
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	6093      	str	r3, [r2, #8]
 8005d3e:	6893      	ldr	r3, [r2, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1fc      	bne.n	8005d3e <ai_platform_network_post_init+0x222>
 8005d44:	4907      	ldr	r1, [pc, #28]	@ (8005d64 <ai_platform_network_post_init+0x248>)
 8005d46:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <ai_platform_network_post_init+0x24c>)
 8005d48:	6011      	str	r1, [r2, #0]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	f43f af1b 	beq.w	8005b88 <ai_platform_network_post_init+0x6c>
 8005d52:	e7fe      	b.n	8005d52 <ai_platform_network_post_init+0x236>
 8005d54:	a1c00100 	.word	0xa1c00100
 8005d58:	e0042000 	.word	0xe0042000
 8005d5c:	5c001000 	.word	0x5c001000
 8005d60:	40023000 	.word	0x40023000
 8005d64:	f407a5c2 	.word	0xf407a5c2
 8005d68:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d6c:	58024000 	.word	0x58024000

08005d70 <ai_platform_network_process>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	b085      	sub	sp, #20
 8005d76:	460e      	mov	r6, r1
 8005d78:	4605      	mov	r5, r0
 8005d7a:	9201      	str	r2, [sp, #4]
 8005d7c:	b120      	cbz	r0, 8005d88 <ai_platform_network_process+0x18>
 8005d7e:	4b24      	ldr	r3, [pc, #144]	@ (8005e10 <ai_platform_network_process+0xa0>)
 8005d80:	6802      	ldr	r2, [r0, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	bf18      	it	ne
 8005d86:	2500      	movne	r5, #0
 8005d88:	f7fe fe5e 	bl	8004a48 <_ai_platform_acquire_crc>
 8005d8c:	4b21      	ldr	r3, [pc, #132]	@ (8005e14 <ai_platform_network_process+0xa4>)
 8005d8e:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d98:	185a      	adds	r2, r3, r1
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	d92b      	bls.n	8005df6 <ai_platform_network_process+0x86>
 8005d9e:	f240 4249 	movw	r2, #1097	@ 0x449
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d027      	beq.n	8005df6 <ai_platform_network_process+0x86>
 8005da6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e18 <ai_platform_network_process+0xa8>)
 8005da8:	6813      	ldr	r3, [r2, #0]
 8005daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dae:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005db2:	d039      	beq.n	8005e28 <ai_platform_network_process+0xb8>
 8005db4:	6813      	ldr	r3, [r2, #0]
 8005db6:	f240 4183 	movw	r1, #1155	@ 0x483
 8005dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dbe:	428b      	cmp	r3, r1
 8005dc0:	f000 819c 	beq.w	80060fc <ai_platform_network_process+0x38c>
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dca:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005dce:	f000 8179 	beq.w	80060c4 <ai_platform_network_process+0x354>
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d136      	bne.n	8005e4a <ai_platform_network_process+0xda>
 8005ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8005e1c <ai_platform_network_process+0xac>)
 8005dde:	2301      	movs	r3, #1
 8005de0:	6093      	str	r3, [r2, #8]
 8005de2:	6893      	ldr	r3, [r2, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1fc      	bne.n	8005de2 <ai_platform_network_process+0x72>
 8005de8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e20 <ai_platform_network_process+0xb0>)
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <ai_platform_network_process+0xb4>)
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d02a      	beq.n	8005e4a <ai_platform_network_process+0xda>
 8005df4:	e7fe      	b.n	8005df4 <ai_platform_network_process+0x84>
 8005df6:	4a09      	ldr	r2, [pc, #36]	@ (8005e1c <ai_platform_network_process+0xac>)
 8005df8:	2301      	movs	r3, #1
 8005dfa:	6093      	str	r3, [r2, #8]
 8005dfc:	6893      	ldr	r3, [r2, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1fc      	bne.n	8005dfc <ai_platform_network_process+0x8c>
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <ai_platform_network_process+0xb0>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <ai_platform_network_process+0xb4>)
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d01d      	beq.n	8005e4a <ai_platform_network_process+0xda>
 8005e0e:	e7fe      	b.n	8005e0e <ai_platform_network_process+0x9e>
 8005e10:	a1c00100 	.word	0xa1c00100
 8005e14:	e0042000 	.word	0xe0042000
 8005e18:	5c001000 	.word	0x5c001000
 8005e1c:	40023000 	.word	0x40023000
 8005e20:	f407a5c2 	.word	0xf407a5c2
 8005e24:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e28:	4ab0      	ldr	r2, [pc, #704]	@ (80060ec <ai_platform_network_process+0x37c>)
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005e30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1fb      	bne.n	8005e30 <ai_platform_network_process+0xc0>
 8005e38:	4bad      	ldr	r3, [pc, #692]	@ (80060f0 <ai_platform_network_process+0x380>)
 8005e3a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005e3e:	4bad      	ldr	r3, [pc, #692]	@ (80060f4 <ai_platform_network_process+0x384>)
 8005e40:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005e44:	429a      	cmp	r2, r3
 8005e46:	f040 812b 	bne.w	80060a0 <ai_platform_network_process+0x330>
 8005e4a:	f7fe fdff 	bl	8004a4c <_ai_platform_release_crc>
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	f000 8172 	beq.w	8006138 <ai_platform_network_process+0x3c8>
 8005e54:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 8123 	beq.w	80060a2 <ai_platform_network_process+0x332>
 8005e5c:	68eb      	ldr	r3, [r5, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	616a      	str	r2, [r5, #20]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	f040 811f 	bne.w	80060ae <ai_platform_network_process+0x33e>
 8005e70:	2e00      	cmp	r6, #0
 8005e72:	f000 8156 	beq.w	8006122 <ai_platform_network_process+0x3b2>
 8005e76:	fab8 f788 	clz	r7, r8
 8005e7a:	097f      	lsrs	r7, r7, #5
 8005e7c:	f1b8 0f00 	cmp.w	r8, #0
 8005e80:	f000 814f 	beq.w	8006122 <ai_platform_network_process+0x3b2>
 8005e84:	f8b8 3000 	ldrh.w	r3, [r8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 814a 	beq.w	8006122 <ai_platform_network_process+0x3b2>
 8005e8e:	69b3      	ldr	r3, [r6, #24]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8005e96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d072      	beq.n	8005f84 <ai_platform_network_process+0x214>
 8005e9e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005ea2:	2c00      	cmp	r4, #0
 8005ea4:	d06e      	beq.n	8005f84 <ai_platform_network_process+0x214>
 8005ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005eaa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005eae:	f8d3 a000 	ldr.w	sl, [r3]
 8005eb2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8005eb6:	f000 8133 	beq.w	8006120 <ai_platform_network_process+0x3b0>
 8005eba:	69a3      	ldr	r3, [r4, #24]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	685d      	ldr	r5, [r3, #4]
 8005ec2:	f7fe fd73 	bl	80049ac <ai_buffer_get_size>
 8005ec6:	4285      	cmp	r5, r0
 8005ec8:	f0c0 8138 	bcc.w	800613c <ai_platform_network_process+0x3cc>
 8005ecc:	68e0      	ldr	r0, [r4, #12]
 8005ece:	69b1      	ldr	r1, [r6, #24]
 8005ed0:	68c2      	ldr	r2, [r0, #12]
 8005ed2:	68cb      	ldr	r3, [r1, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	f040 8131 	bne.w	800613c <ai_platform_network_process+0x3cc>
 8005eda:	6882      	ldr	r2, [r0, #8]
 8005edc:	688b      	ldr	r3, [r1, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	f040 812c 	bne.w	800613c <ai_platform_network_process+0x3cc>
 8005ee4:	6842      	ldr	r2, [r0, #4]
 8005ee6:	684b      	ldr	r3, [r1, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	f040 8127 	bne.w	800613c <ai_platform_network_process+0x3cc>
 8005eee:	69a3      	ldr	r3, [r4, #24]
 8005ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ef4:	f002 ff66 	bl	8008dc4 <ai_array_get_data_byte_size>
 8005ef8:	4605      	mov	r5, r0
 8005efa:	4620      	mov	r0, r4
 8005efc:	f002 ff78 	bl	8008df0 <get_tensor_byte_size>
 8005f00:	4285      	cmp	r5, r0
 8005f02:	f0c0 811b 	bcc.w	800613c <ai_platform_network_process+0x3cc>
 8005f06:	69a3      	ldr	r3, [r4, #24]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	f002 fec7 	bl	8008c9c <ai_array_to_buffer_fmt>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	4058      	eors	r0, r3
 8005f12:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8005f16:	f040 81c8 	bne.w	80062aa <ai_platform_network_process+0x53a>
 8005f1a:	6873      	ldr	r3, [r6, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 81bb 	beq.w	8006298 <ai_platform_network_process+0x528>
 8005f22:	69b3      	ldr	r3, [r6, #24]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 81c8 	beq.w	80062bc <ai_platform_network_process+0x54c>
 8005f2c:	9a02      	ldr	r2, [sp, #8]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	3701      	adds	r7, #1
 8005f32:	361c      	adds	r6, #28
 8005f34:	429a      	cmp	r2, r3
 8005f36:	bf38      	it	cc
 8005f38:	461a      	movcc	r2, r3
 8005f3a:	9202      	str	r2, [sp, #8]
 8005f3c:	f002 ff58 	bl	8008df0 <get_tensor_byte_size>
 8005f40:	f8c9 0008 	str.w	r0, [r9, #8]
 8005f44:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	fb00 f303 	mul.w	r3, r0, r3
 8005f4e:	f8c9 300c 	str.w	r3, [r9, #12]
 8005f52:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8005f56:	440b      	add	r3, r1
 8005f58:	f8c9 1004 	str.w	r1, [r9, #4]
 8005f5c:	f84a 300b 	str.w	r3, [sl, fp]
 8005f60:	69a0      	ldr	r0, [r4, #24]
 8005f62:	6803      	ldr	r3, [r0, #0]
 8005f64:	009a      	lsls	r2, r3, #2
 8005f66:	f100 80bb 	bmi.w	80060e0 <ai_platform_network_process+0x370>
 8005f6a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	4419      	add	r1, r3
 8005f72:	6081      	str	r1, [r0, #8]
 8005f74:	69a3      	ldr	r3, [r4, #24]
 8005f76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005f7a:	60da      	str	r2, [r3, #12]
 8005f7c:	f8b8 3000 	ldrh.w	r3, [r8]
 8005f80:	42bb      	cmp	r3, r7
 8005f82:	d888      	bhi.n	8005e96 <ai_platform_network_process+0x126>
 8005f84:	9d03      	ldr	r5, [sp, #12]
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 819f 	beq.w	80062ce <ai_platform_network_process+0x55e>
 8005f90:	2a01      	cmp	r2, #1
 8005f92:	f240 8179 	bls.w	8006288 <ai_platform_network_process+0x518>
 8005f96:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8005f9a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8172 	beq.w	8006288 <ai_platform_network_process+0x518>
 8005fa4:	9e01      	ldr	r6, [sp, #4]
 8005fa6:	2700      	movs	r7, #0
 8005fa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80d3 	beq.w	8006158 <ai_platform_network_process+0x3e8>
 8005fb2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005fb6:	2c00      	cmp	r4, #0
 8005fb8:	f000 80ce 	beq.w	8006158 <ai_platform_network_process+0x3e8>
 8005fbc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005fc0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005fc4:	f8d3 8000 	ldr.w	r8, [r3]
 8005fc8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8005fcc:	f000 819d 	beq.w	800630a <ai_platform_network_process+0x59a>
 8005fd0:	69a3      	ldr	r3, [r4, #24]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	f7fe fce7 	bl	80049ac <ai_buffer_get_size>
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	4283      	cmp	r3, r0
 8005fe2:	f0c0 8151 	bcc.w	8006288 <ai_platform_network_process+0x518>
 8005fe6:	68e0      	ldr	r0, [r4, #12]
 8005fe8:	69b1      	ldr	r1, [r6, #24]
 8005fea:	68c2      	ldr	r2, [r0, #12]
 8005fec:	68cb      	ldr	r3, [r1, #12]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	f040 814a 	bne.w	8006288 <ai_platform_network_process+0x518>
 8005ff4:	6882      	ldr	r2, [r0, #8]
 8005ff6:	688b      	ldr	r3, [r1, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	f040 8145 	bne.w	8006288 <ai_platform_network_process+0x518>
 8005ffe:	6842      	ldr	r2, [r0, #4]
 8006000:	684b      	ldr	r3, [r1, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	f040 8140 	bne.w	8006288 <ai_platform_network_process+0x518>
 8006008:	69a3      	ldr	r3, [r4, #24]
 800600a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800600e:	f002 fed9 	bl	8008dc4 <ai_array_get_data_byte_size>
 8006012:	9001      	str	r0, [sp, #4]
 8006014:	4620      	mov	r0, r4
 8006016:	f002 feeb 	bl	8008df0 <get_tensor_byte_size>
 800601a:	9b01      	ldr	r3, [sp, #4]
 800601c:	4283      	cmp	r3, r0
 800601e:	f0c0 8133 	bcc.w	8006288 <ai_platform_network_process+0x518>
 8006022:	69a3      	ldr	r3, [r4, #24]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	f002 fe39 	bl	8008c9c <ai_array_to_buffer_fmt>
 800602a:	6833      	ldr	r3, [r6, #0]
 800602c:	4058      	eors	r0, r3
 800602e:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8006032:	f040 815a 	bne.w	80062ea <ai_platform_network_process+0x57a>
 8006036:	6873      	ldr	r3, [r6, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 814e 	beq.w	80062da <ai_platform_network_process+0x56a>
 800603e:	69b3      	ldr	r3, [r6, #24]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8159 	beq.w	80062fa <ai_platform_network_process+0x58a>
 8006048:	9a02      	ldr	r2, [sp, #8]
 800604a:	4620      	mov	r0, r4
 800604c:	3701      	adds	r7, #1
 800604e:	361c      	adds	r6, #28
 8006050:	429a      	cmp	r2, r3
 8006052:	bf38      	it	cc
 8006054:	461a      	movcc	r2, r3
 8006056:	9202      	str	r2, [sp, #8]
 8006058:	f002 feca 	bl	8008df0 <get_tensor_byte_size>
 800605c:	f8ca 0008 	str.w	r0, [sl, #8]
 8006060:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	fb00 f303 	mul.w	r3, r0, r3
 800606a:	f8ca 300c 	str.w	r3, [sl, #12]
 800606e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006072:	440b      	add	r3, r1
 8006074:	f8ca 1004 	str.w	r1, [sl, #4]
 8006078:	f848 300b 	str.w	r3, [r8, fp]
 800607c:	69a0      	ldr	r0, [r4, #24]
 800607e:	6803      	ldr	r3, [r0, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	d464      	bmi.n	800614e <ai_platform_network_process+0x3de>
 8006084:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	4419      	add	r1, r3
 800608c:	6081      	str	r1, [r0, #8]
 800608e:	69a3      	ldr	r3, [r4, #24]
 8006090:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800609a:	429f      	cmp	r7, r3
 800609c:	d384      	bcc.n	8005fa8 <ai_platform_network_process+0x238>
 800609e:	e05b      	b.n	8006158 <ai_platform_network_process+0x3e8>
 80060a0:	e7fe      	b.n	80060a0 <ai_platform_network_process+0x330>
 80060a2:	68ea      	ldr	r2, [r5, #12]
 80060a4:	616b      	str	r3, [r5, #20]
 80060a6:	f002 0203 	and.w	r2, r2, #3
 80060aa:	2a03      	cmp	r2, #3
 80060ac:	d039      	beq.n	8006122 <ai_platform_network_process+0x3b2>
 80060ae:	2230      	movs	r2, #48	@ 0x30
 80060b0:	2111      	movs	r1, #17
 80060b2:	f105 0010 	add.w	r0, r5, #16
 80060b6:	2400      	movs	r4, #0
 80060b8:	f000 f93e 	bl	8006338 <core_set_error>
 80060bc:	4620      	mov	r0, r4
 80060be:	b005      	add	sp, #20
 80060c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c4:	4a0c      	ldr	r2, [pc, #48]	@ (80060f8 <ai_platform_network_process+0x388>)
 80060c6:	2301      	movs	r3, #1
 80060c8:	6093      	str	r3, [r2, #8]
 80060ca:	6893      	ldr	r3, [r2, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1fc      	bne.n	80060ca <ai_platform_network_process+0x35a>
 80060d0:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <ai_platform_network_process+0x380>)
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	4b07      	ldr	r3, [pc, #28]	@ (80060f4 <ai_platform_network_process+0x384>)
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	f43f aeb6 	beq.w	8005e4a <ai_platform_network_process+0xda>
 80060de:	e7fe      	b.n	80060de <ai_platform_network_process+0x36e>
 80060e0:	f8b8 3000 	ldrh.w	r3, [r8]
 80060e4:	429f      	cmp	r7, r3
 80060e6:	f4ff aed6 	bcc.w	8005e96 <ai_platform_network_process+0x126>
 80060ea:	e74b      	b.n	8005f84 <ai_platform_network_process+0x214>
 80060ec:	58024000 	.word	0x58024000
 80060f0:	f407a5c2 	.word	0xf407a5c2
 80060f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80060f8:	40023000 	.word	0x40023000
 80060fc:	4a87      	ldr	r2, [pc, #540]	@ (800631c <ai_platform_network_process+0x5ac>)
 80060fe:	2301      	movs	r3, #1
 8006100:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006104:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1fb      	bne.n	8006104 <ai_platform_network_process+0x394>
 800610c:	4b84      	ldr	r3, [pc, #528]	@ (8006320 <ai_platform_network_process+0x5b0>)
 800610e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006112:	4b84      	ldr	r3, [pc, #528]	@ (8006324 <ai_platform_network_process+0x5b4>)
 8006114:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006118:	429a      	cmp	r2, r3
 800611a:	f43f ae96 	beq.w	8005e4a <ai_platform_network_process+0xda>
 800611e:	e7fe      	b.n	800611e <ai_platform_network_process+0x3ae>
 8006120:	9d03      	ldr	r5, [sp, #12]
 8006122:	2400      	movs	r4, #0
 8006124:	2217      	movs	r2, #23
 8006126:	2112      	movs	r1, #18
 8006128:	f105 0010 	add.w	r0, r5, #16
 800612c:	f000 f904 	bl	8006338 <core_set_error>
 8006130:	4620      	mov	r0, r4
 8006132:	b005      	add	sp, #20
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	462c      	mov	r4, r5
 800613a:	e7bf      	b.n	80060bc <ai_platform_network_process+0x34c>
 800613c:	9d03      	ldr	r5, [sp, #12]
 800613e:	2218      	movs	r2, #24
 8006140:	2112      	movs	r1, #18
 8006142:	2400      	movs	r4, #0
 8006144:	f105 0010 	add.w	r0, r5, #16
 8006148:	f000 f8f6 	bl	8006338 <core_set_error>
 800614c:	e7b6      	b.n	80060bc <ai_platform_network_process+0x34c>
 800614e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006152:	429f      	cmp	r7, r3
 8006154:	f4ff af28 	bcc.w	8005fa8 <ai_platform_network_process+0x238>
 8006158:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800615c:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 800615e:	82ab      	strh	r3, [r5, #20]
 8006160:	2a00      	cmp	r2, #0
 8006162:	f040 808b 	bne.w	800627c <ai_platform_network_process+0x50c>
 8006166:	4616      	mov	r6, r2
 8006168:	4617      	mov	r7, r2
 800616a:	8aec      	ldrh	r4, [r5, #22]
 800616c:	429c      	cmp	r4, r3
 800616e:	d2a5      	bcs.n	80060bc <ai_platform_network_process+0x34c>
 8006170:	46ab      	mov	fp, r5
 8006172:	2e00      	cmp	r6, #0
 8006174:	d030      	beq.n	80061d8 <ai_platform_network_process+0x468>
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	e014      	b.n	80061a6 <ai_platform_network_process+0x436>
 800617c:	6882      	ldr	r2, [r0, #8]
 800617e:	68c5      	ldr	r5, [r0, #12]
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	1b52      	subs	r2, r2, r5
 8006184:	4413      	add	r3, r2
 8006186:	6083      	str	r3, [r0, #8]
 8006188:	698b      	ldr	r3, [r1, #24]
 800618a:	6862      	ldr	r2, [r4, #4]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	f859 200a 	ldr.w	r2, [r9, sl]
 8006192:	f108 0801 	add.w	r8, r8, #1
 8006196:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800619a:	440b      	add	r3, r1
 800619c:	4293      	cmp	r3, r2
 800619e:	d301      	bcc.n	80061a4 <ai_platform_network_process+0x434>
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	8833      	ldrh	r3, [r6, #0]
 80061a8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80061ac:	4543      	cmp	r3, r8
 80061ae:	d913      	bls.n	80061d8 <ai_platform_network_process+0x468>
 80061b0:	6873      	ldr	r3, [r6, #4]
 80061b2:	b18b      	cbz	r3, 80061d8 <ai_platform_network_process+0x468>
 80061b4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80061b8:	b171      	cbz	r1, 80061d8 <ai_platform_network_process+0x468>
 80061ba:	6988      	ldr	r0, [r1, #24]
 80061bc:	68b2      	ldr	r2, [r6, #8]
 80061be:	6803      	ldr	r3, [r0, #0]
 80061c0:	f8d2 9000 	ldr.w	r9, [r2]
 80061c4:	009d      	lsls	r5, r3, #2
 80061c6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80061ca:	d5d7      	bpl.n	800617c <ai_platform_network_process+0x40c>
 80061cc:	6881      	ldr	r1, [r0, #8]
 80061ce:	68a2      	ldr	r2, [r4, #8]
 80061d0:	6860      	ldr	r0, [r4, #4]
 80061d2:	f002 fc93 	bl	8008afc <st_int8_copy>
 80061d6:	e7da      	b.n	800618e <ai_platform_network_process+0x41e>
 80061d8:	4658      	mov	r0, fp
 80061da:	f000 f903 	bl	80063e4 <ai_layers_forward_all>
 80061de:	2f00      	cmp	r7, #0
 80061e0:	d03d      	beq.n	800625e <ai_platform_network_process+0x4ee>
 80061e2:	2400      	movs	r4, #0
 80061e4:	e016      	b.n	8006214 <ai_platform_network_process+0x4a4>
 80061e6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80061ea:	f859 100a 	ldr.w	r1, [r9, sl]
 80061ee:	4413      	add	r3, r2
 80061f0:	428b      	cmp	r3, r1
 80061f2:	d302      	bcc.n	80061fa <ai_platform_network_process+0x48a>
 80061f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80061f8:	1acb      	subs	r3, r1, r3
 80061fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80061fe:	6981      	ldr	r1, [r0, #24]
 8006200:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006204:	1b52      	subs	r2, r2, r5
 8006206:	4413      	add	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
 800620a:	6983      	ldr	r3, [r0, #24]
 800620c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	3401      	adds	r4, #1
 8006214:	883b      	ldrh	r3, [r7, #0]
 8006216:	42a3      	cmp	r3, r4
 8006218:	d921      	bls.n	800625e <ai_platform_network_process+0x4ee>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	b1fb      	cbz	r3, 800625e <ai_platform_network_process+0x4ee>
 800621e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006222:	b1e0      	cbz	r0, 800625e <ai_platform_network_process+0x4ee>
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800622a:	6983      	ldr	r3, [r0, #24]
 800622c:	f8d2 9000 	ldr.w	r9, [r2]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006236:	0092      	lsls	r2, r2, #2
 8006238:	d5d5      	bpl.n	80061e6 <ai_platform_network_process+0x476>
 800623a:	6898      	ldr	r0, [r3, #8]
 800623c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006240:	f002 fc5c 	bl	8008afc <st_int8_copy>
 8006244:	f859 200a 	ldr.w	r2, [r9, sl]
 8006248:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800624c:	440b      	add	r3, r1
 800624e:	4293      	cmp	r3, r2
 8006250:	d302      	bcc.n	8006258 <ai_platform_network_process+0x4e8>
 8006252:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	f8c8 3004 	str.w	r3, [r8, #4]
 800625c:	e7d9      	b.n	8006212 <ai_platform_network_process+0x4a2>
 800625e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8006262:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006266:	3401      	adds	r4, #1
 8006268:	b2a4      	uxth	r4, r4
 800626a:	42a3      	cmp	r3, r4
 800626c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006270:	f63f af7f 	bhi.w	8006172 <ai_platform_network_process+0x402>
 8006274:	4620      	mov	r0, r4
 8006276:	b005      	add	sp, #20
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	2a01      	cmp	r2, #1
 800627e:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8006280:	d029      	beq.n	80062d6 <ai_platform_network_process+0x566>
 8006282:	f106 070c 	add.w	r7, r6, #12
 8006286:	e770      	b.n	800616a <ai_platform_network_process+0x3fa>
 8006288:	2218      	movs	r2, #24
 800628a:	2113      	movs	r1, #19
 800628c:	f105 0010 	add.w	r0, r5, #16
 8006290:	2400      	movs	r4, #0
 8006292:	f000 f851 	bl	8006338 <core_set_error>
 8006296:	e711      	b.n	80060bc <ai_platform_network_process+0x34c>
 8006298:	9d03      	ldr	r5, [sp, #12]
 800629a:	4604      	mov	r4, r0
 800629c:	2217      	movs	r2, #23
 800629e:	2112      	movs	r1, #18
 80062a0:	f105 0010 	add.w	r0, r5, #16
 80062a4:	f000 f848 	bl	8006338 <core_set_error>
 80062a8:	e708      	b.n	80060bc <ai_platform_network_process+0x34c>
 80062aa:	9d03      	ldr	r5, [sp, #12]
 80062ac:	2219      	movs	r2, #25
 80062ae:	2112      	movs	r1, #18
 80062b0:	2400      	movs	r4, #0
 80062b2:	f105 0010 	add.w	r0, r5, #16
 80062b6:	f000 f83f 	bl	8006338 <core_set_error>
 80062ba:	e6ff      	b.n	80060bc <ai_platform_network_process+0x34c>
 80062bc:	9d03      	ldr	r5, [sp, #12]
 80062be:	4604      	mov	r4, r0
 80062c0:	2221      	movs	r2, #33	@ 0x21
 80062c2:	2112      	movs	r1, #18
 80062c4:	f105 0010 	add.w	r0, r5, #16
 80062c8:	f000 f836 	bl	8006338 <core_set_error>
 80062cc:	e6f6      	b.n	80060bc <ai_platform_network_process+0x34c>
 80062ce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80062d2:	82ab      	strh	r3, [r5, #20]
 80062d4:	e744      	b.n	8006160 <ai_platform_network_process+0x3f0>
 80062d6:	2700      	movs	r7, #0
 80062d8:	e747      	b.n	800616a <ai_platform_network_process+0x3fa>
 80062da:	4604      	mov	r4, r0
 80062dc:	2217      	movs	r2, #23
 80062de:	2113      	movs	r1, #19
 80062e0:	f105 0010 	add.w	r0, r5, #16
 80062e4:	f000 f828 	bl	8006338 <core_set_error>
 80062e8:	e6e8      	b.n	80060bc <ai_platform_network_process+0x34c>
 80062ea:	2219      	movs	r2, #25
 80062ec:	2113      	movs	r1, #19
 80062ee:	f105 0010 	add.w	r0, r5, #16
 80062f2:	2400      	movs	r4, #0
 80062f4:	f000 f820 	bl	8006338 <core_set_error>
 80062f8:	e6e0      	b.n	80060bc <ai_platform_network_process+0x34c>
 80062fa:	4604      	mov	r4, r0
 80062fc:	2221      	movs	r2, #33	@ 0x21
 80062fe:	2113      	movs	r1, #19
 8006300:	f105 0010 	add.w	r0, r5, #16
 8006304:	f000 f818 	bl	8006338 <core_set_error>
 8006308:	e6d8      	b.n	80060bc <ai_platform_network_process+0x34c>
 800630a:	2217      	movs	r2, #23
 800630c:	2113      	movs	r1, #19
 800630e:	f105 0010 	add.w	r0, r5, #16
 8006312:	4654      	mov	r4, sl
 8006314:	f000 f810 	bl	8006338 <core_set_error>
 8006318:	e6d0      	b.n	80060bc <ai_platform_network_process+0x34c>
 800631a:	bf00      	nop
 800631c:	58024000 	.word	0x58024000
 8006320:	f407a5c2 	.word	0xf407a5c2
 8006324:	b5e8b5cd 	.word	0xb5e8b5cd

08006328 <core_init>:
 8006328:	2001      	movs	r0, #1
 800632a:	4770      	bx	lr

0800632c <core_get_error>:
 800632c:	4603      	mov	r3, r0
 800632e:	2200      	movs	r2, #0
 8006330:	6800      	ldr	r0, [r0, #0]
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop

08006338 <core_set_error>:
 8006338:	4603      	mov	r3, r0
 800633a:	7800      	ldrb	r0, [r0, #0]
 800633c:	b108      	cbz	r0, 8006342 <core_set_error+0xa>
 800633e:	2000      	movs	r0, #0
 8006340:	4770      	bx	lr
 8006342:	7019      	strb	r1, [r3, #0]
 8006344:	2001      	movs	r0, #1
 8006346:	6819      	ldr	r1, [r3, #0]
 8006348:	f362 211f 	bfi	r1, r2, #8, #24
 800634c:	6019      	str	r1, [r3, #0]
 800634e:	4770      	bx	lr

08006350 <ai_check_custom_types>:
 8006350:	b082      	sub	sp, #8
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <ai_check_custom_types+0x4c>)
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	b118      	cbz	r0, 8006360 <ai_check_custom_types+0x10>
 8006358:	7803      	ldrb	r3, [r0, #0]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d002      	beq.n	8006364 <ai_check_custom_types+0x14>
 800635e:	2000      	movs	r0, #0
 8006360:	b002      	add	sp, #8
 8006362:	4770      	bx	lr
 8006364:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <ai_check_custom_types+0x26>
 800636c:	2001      	movs	r0, #1
 800636e:	f080 0001 	eor.w	r0, r0, #1
 8006372:	b002      	add	sp, #8
 8006374:	4770      	bx	lr
 8006376:	7842      	ldrb	r2, [r0, #1]
 8006378:	3001      	adds	r0, #1
 800637a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800637e:	429a      	cmp	r2, r3
 8006380:	d1f4      	bne.n	800636c <ai_check_custom_types+0x1c>
 8006382:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006386:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800638a:	429a      	cmp	r2, r3
 800638c:	d1ee      	bne.n	800636c <ai_check_custom_types+0x1c>
 800638e:	7842      	ldrb	r2, [r0, #1]
 8006390:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006394:	429a      	cmp	r2, r3
 8006396:	d1e9      	bne.n	800636c <ai_check_custom_types+0x1c>
 8006398:	2000      	movs	r0, #0
 800639a:	e7e8      	b.n	800636e <ai_check_custom_types+0x1e>
 800639c:	84048403 	.word	0x84048403

080063a0 <ai_layers_init_all>:
 80063a0:	2100      	movs	r1, #0
 80063a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80063a4:	b13b      	cbz	r3, 80063b6 <ai_layers_init_all+0x16>
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	3101      	adds	r1, #1
 80063aa:	60d8      	str	r0, [r3, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	4613      	mov	r3, r2
 80063b0:	d001      	beq.n	80063b6 <ai_layers_init_all+0x16>
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d1f6      	bne.n	80063a4 <ai_layers_init_all+0x4>
 80063b6:	4608      	mov	r0, r1
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop

080063bc <ai_layers_post_init_all>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	2500      	movs	r5, #0
 80063c0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80063c2:	b16c      	cbz	r4, 80063e0 <ai_layers_post_init_all+0x24>
 80063c4:	6863      	ldr	r3, [r4, #4]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d504      	bpl.n	80063d4 <ai_layers_post_init_all+0x18>
 80063ca:	6a23      	ldr	r3, [r4, #32]
 80063cc:	4620      	mov	r0, r4
 80063ce:	b10b      	cbz	r3, 80063d4 <ai_layers_post_init_all+0x18>
 80063d0:	3501      	adds	r5, #1
 80063d2:	4798      	blx	r3
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	461c      	mov	r4, r3
 80063da:	d001      	beq.n	80063e0 <ai_layers_post_init_all+0x24>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f0      	bne.n	80063c2 <ai_layers_post_init_all+0x6>
 80063e0:	4628      	mov	r0, r5
 80063e2:	bd38      	pop	{r3, r4, r5, pc}

080063e4 <ai_layers_forward_all>:
 80063e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e8:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 80063ec:	4604      	mov	r4, r0
 80063ee:	f1b8 0f00 	cmp.w	r8, #0
 80063f2:	d02a      	beq.n	800644a <ai_layers_forward_all+0x66>
 80063f4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80063f6:	6381      	str	r1, [r0, #56]	@ 0x38
 80063f8:	b319      	cbz	r1, 8006442 <ai_layers_forward_all+0x5e>
 80063fa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80063fc:	2001      	movs	r0, #1
 80063fe:	47c0      	blx	r8
 8006400:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006402:	b1f6      	cbz	r6, 8006442 <ai_layers_forward_all+0x5e>
 8006404:	2700      	movs	r7, #0
 8006406:	4631      	mov	r1, r6
 8006408:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800640a:	2002      	movs	r0, #2
 800640c:	47c0      	blx	r8
 800640e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006410:	4628      	mov	r0, r5
 8006412:	696b      	ldr	r3, [r5, #20]
 8006414:	4798      	blx	r3
 8006416:	692e      	ldr	r6, [r5, #16]
 8006418:	2003      	movs	r0, #3
 800641a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800641c:	42b5      	cmp	r5, r6
 800641e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006420:	d007      	beq.n	8006432 <ai_layers_forward_all+0x4e>
 8006422:	47c0      	blx	r8
 8006424:	3701      	adds	r7, #1
 8006426:	63a6      	str	r6, [r4, #56]	@ 0x38
 8006428:	2e00      	cmp	r6, #0
 800642a:	d1ec      	bne.n	8006406 <ai_layers_forward_all+0x22>
 800642c:	4638      	mov	r0, r7
 800642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006432:	2003      	movs	r0, #3
 8006434:	3701      	adds	r7, #1
 8006436:	47c0      	blx	r8
 8006438:	2300      	movs	r3, #0
 800643a:	4638      	mov	r0, r7
 800643c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800643e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006442:	2700      	movs	r7, #0
 8006444:	4638      	mov	r0, r7
 8006446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800644a:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800644c:	6385      	str	r5, [r0, #56]	@ 0x38
 800644e:	2d00      	cmp	r5, #0
 8006450:	d0f7      	beq.n	8006442 <ai_layers_forward_all+0x5e>
 8006452:	4647      	mov	r7, r8
 8006454:	696b      	ldr	r3, [r5, #20]
 8006456:	4628      	mov	r0, r5
 8006458:	4798      	blx	r3
 800645a:	462b      	mov	r3, r5
 800645c:	692d      	ldr	r5, [r5, #16]
 800645e:	429d      	cmp	r5, r3
 8006460:	d004      	beq.n	800646c <ai_layers_forward_all+0x88>
 8006462:	3701      	adds	r7, #1
 8006464:	63a5      	str	r5, [r4, #56]	@ 0x38
 8006466:	2d00      	cmp	r5, #0
 8006468:	d1f4      	bne.n	8006454 <ai_layers_forward_all+0x70>
 800646a:	e7df      	b.n	800642c <ai_layers_forward_all+0x48>
 800646c:	2300      	movs	r3, #0
 800646e:	3701      	adds	r7, #1
 8006470:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006472:	e7db      	b.n	800642c <ai_layers_forward_all+0x48>

08006474 <ai_dict_decompress_f32>:
 8006474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006478:	9d08      	ldr	r5, [sp, #32]
 800647a:	2b04      	cmp	r3, #4
 800647c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006480:	d00e      	beq.n	80064a0 <ai_dict_decompress_f32+0x2c>
 8006482:	2b08      	cmp	r3, #8
 8006484:	d10a      	bne.n	800649c <ai_dict_decompress_f32+0x28>
 8006486:	42a8      	cmp	r0, r5
 8006488:	d208      	bcs.n	800649c <ai_dict_decompress_f32+0x28>
 800648a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800648e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f840 3b04 	str.w	r3, [r0], #4
 8006498:	4285      	cmp	r5, r0
 800649a:	d8f6      	bhi.n	800648a <ai_dict_decompress_f32+0x16>
 800649c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064a0:	9b07      	ldr	r3, [sp, #28]
 80064a2:	085e      	lsrs	r6, r3, #1
 80064a4:	f003 0701 	and.w	r7, r3, #1
 80064a8:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80064ac:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 80064b0:	42a8      	cmp	r0, r5
 80064b2:	d2f3      	bcs.n	800649c <ai_dict_decompress_f32+0x28>
 80064b4:	b33e      	cbz	r6, 8006506 <ai_dict_decompress_f32+0x92>
 80064b6:	f100 0e08 	add.w	lr, r0, #8
 80064ba:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 80064be:	eb01 0408 	add.w	r4, r1, r8
 80064c2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80064c6:	f10e 0e08 	add.w	lr, lr, #8
 80064ca:	091b      	lsrs	r3, r3, #4
 80064cc:	4564      	cmp	r4, ip
 80064ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f84e 3c10 	str.w	r3, [lr, #-16]
 80064d8:	f89c 3000 	ldrb.w	r3, [ip]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80064ea:	d1ea      	bne.n	80064c2 <ai_dict_decompress_f32+0x4e>
 80064ec:	4431      	add	r1, r6
 80064ee:	4448      	add	r0, r9
 80064f0:	2f00      	cmp	r7, #0
 80064f2:	d0dd      	beq.n	80064b0 <ai_dict_decompress_f32+0x3c>
 80064f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f840 3b04 	str.w	r3, [r0], #4
 8006504:	e7d4      	b.n	80064b0 <ai_dict_decompress_f32+0x3c>
 8006506:	2f00      	cmp	r7, #0
 8006508:	d1f4      	bne.n	80064f4 <ai_dict_decompress_f32+0x80>
 800650a:	42a8      	cmp	r0, r5
 800650c:	d3fd      	bcc.n	800650a <ai_dict_decompress_f32+0x96>
 800650e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006512:	bf00      	nop

08006514 <forward_conv2d_if32of32wf32>:
 8006514:	6982      	ldr	r2, [r0, #24]
 8006516:	8813      	ldrh	r3, [r2, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8092 	beq.w	8006642 <forward_conv2d_if32of32wf32+0x12e>
 800651e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8006522:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8006526:	b102      	cbz	r2, 800652a <forward_conv2d_if32of32wf32+0x16>
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	2b01      	cmp	r3, #1
 800652c:	f000 80b3 	beq.w	8006696 <forward_conv2d_if32of32wf32+0x182>
 8006530:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8006534:	b101      	cbz	r1, 8006538 <forward_conv2d_if32of32wf32+0x24>
 8006536:	6809      	ldr	r1, [r1, #0]
 8006538:	2b02      	cmp	r3, #2
 800653a:	f000 8084 	beq.w	8006646 <forward_conv2d_if32of32wf32+0x132>
 800653e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006542:	f8dc 601c 	ldr.w	r6, [ip, #28]
 8006546:	b0a1      	sub	sp, #132	@ 0x84
 8006548:	2e00      	cmp	r6, #0
 800654a:	f000 809d 	beq.w	8006688 <forward_conv2d_if32of32wf32+0x174>
 800654e:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 8006552:	6834      	ldr	r4, [r6, #0]
 8006554:	2d01      	cmp	r5, #1
 8006556:	f240 8099 	bls.w	800668c <forward_conv2d_if32of32wf32+0x178>
 800655a:	6876      	ldr	r6, [r6, #4]
 800655c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8006560:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8006564:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006568:	6992      	ldr	r2, [r2, #24]
 800656a:	9713      	str	r7, [sp, #76]	@ 0x4c
 800656c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8006570:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8006574:	9714      	str	r7, [sp, #80]	@ 0x50
 8006576:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800657a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800657e:	9715      	str	r7, [sp, #84]	@ 0x54
 8006580:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8006584:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8006588:	9716      	str	r7, [sp, #88]	@ 0x58
 800658a:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800658e:	69a2      	ldr	r2, [r4, #24]
 8006590:	9717      	str	r7, [sp, #92]	@ 0x5c
 8006592:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8006596:	9718      	str	r7, [sp, #96]	@ 0x60
 8006598:	8d07      	ldrh	r7, [r0, #40]	@ 0x28
 800659a:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 800659e:	9719      	str	r7, [sp, #100]	@ 0x64
 80065a0:	8d87      	ldrh	r7, [r0, #44]	@ 0x2c
 80065a2:	69c0      	ldr	r0, [r0, #28]
 80065a4:	971a      	str	r7, [sp, #104]	@ 0x68
 80065a6:	901f      	str	r0, [sp, #124]	@ 0x7c
 80065a8:	f8be 0000 	ldrh.w	r0, [lr]
 80065ac:	901b      	str	r0, [sp, #108]	@ 0x6c
 80065ae:	f8be 0004 	ldrh.w	r0, [lr, #4]
 80065b2:	901c      	str	r0, [sp, #112]	@ 0x70
 80065b4:	b2a8      	uxth	r0, r5
 80065b6:	901d      	str	r0, [sp, #116]	@ 0x74
 80065b8:	b2a0      	uxth	r0, r4
 80065ba:	901e      	str	r0, [sp, #120]	@ 0x78
 80065bc:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80065c0:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 80065c4:	b10e      	cbz	r6, 80065ca <forward_conv2d_if32of32wf32+0xb6>
 80065c6:	69b0      	ldr	r0, [r6, #24]
 80065c8:	6886      	ldr	r6, [r0, #8]
 80065ca:	b2a4      	uxth	r4, r4
 80065cc:	6989      	ldr	r1, [r1, #24]
 80065ce:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 80065d2:	b2ad      	uxth	r5, r5
 80065d4:	3c01      	subs	r4, #1
 80065d6:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80065da:	3d01      	subs	r5, #1
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	fb00 8404 	mla	r4, r0, r4, r8
 80065e2:	1e78      	subs	r0, r7, #1
 80065e4:	fb00 7505 	mla	r5, r0, r5, r7
 80065e8:	f3c1 4043 	ubfx	r0, r1, #17, #4
 80065ec:	2804      	cmp	r0, #4
 80065ee:	d02d      	beq.n	800664c <forward_conv2d_if32of32wf32+0x138>
 80065f0:	2808      	cmp	r0, #8
 80065f2:	d02b      	beq.n	800664c <forward_conv2d_if32of32wf32+0x138>
 80065f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065f6:	464a      	mov	r2, r9
 80065f8:	940c      	str	r4, [sp, #48]	@ 0x30
 80065fa:	4651      	mov	r1, sl
 80065fc:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80065fe:	4658      	mov	r0, fp
 8006600:	9706      	str	r7, [sp, #24]
 8006602:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006604:	e9cd 530d 	strd	r5, r3, [sp, #52]	@ 0x34
 8006608:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800660a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800660c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800660e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006610:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006612:	9309      	str	r3, [sp, #36]	@ 0x24
 8006614:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006616:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800661a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006620:	9304      	str	r3, [sp, #16]
 8006622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006624:	9303      	str	r3, [sp, #12]
 8006626:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8006628:	9302      	str	r3, [sp, #8]
 800662a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006634:	9310      	str	r3, [sp, #64]	@ 0x40
 8006636:	4633      	mov	r3, r6
 8006638:	f001 fde4 	bl	8008204 <forward_lite_conv2d_if32of32wf32>
 800663c:	b021      	add	sp, #132	@ 0x84
 800663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	deff      	udf	#255	@ 0xff
 8006646:	2300      	movs	r3, #0
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	deff      	udf	#255	@ 0xff
 800664c:	68d2      	ldr	r2, [r2, #12]
 800664e:	2a00      	cmp	r2, #0
 8006650:	d0d0      	beq.n	80065f4 <forward_conv2d_if32of32wf32+0xe0>
 8006652:	2b03      	cmp	r3, #3
 8006654:	d022      	beq.n	800669c <forward_conv2d_if32of32wf32+0x188>
 8006656:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 800665a:	b1cb      	cbz	r3, 8006690 <forward_conv2d_if32of32wf32+0x17c>
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	b1bb      	cbz	r3, 8006690 <forward_conv2d_if32of32wf32+0x17c>
 8006660:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8006664:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8006668:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800666c:	410b      	asrs	r3, r1
 800666e:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 8006672:	b29b      	uxth	r3, r3
 8006674:	9101      	str	r1, [sp, #4]
 8006676:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006678:	9100      	str	r1, [sp, #0]
 800667a:	4649      	mov	r1, r9
 800667c:	2800      	cmp	r0, #0
 800667e:	bf18      	it	ne
 8006680:	4681      	movne	r9, r0
 8006682:	f7ff fef7 	bl	8006474 <ai_dict_decompress_f32>
 8006686:	e7b5      	b.n	80065f4 <forward_conv2d_if32of32wf32+0xe0>
 8006688:	4634      	mov	r4, r6
 800668a:	e767      	b.n	800655c <forward_conv2d_if32of32wf32+0x48>
 800668c:	2600      	movs	r6, #0
 800668e:	e765      	b.n	800655c <forward_conv2d_if32of32wf32+0x48>
 8006690:	2300      	movs	r3, #0
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	deff      	udf	#255	@ 0xff
 8006696:	2300      	movs	r3, #0
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	deff      	udf	#255	@ 0xff
 800669c:	2300      	movs	r3, #0
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	deff      	udf	#255	@ 0xff
 80066a2:	bf00      	nop

080066a4 <forward_dw_if32of32wf32>:
 80066a4:	6982      	ldr	r2, [r0, #24]
 80066a6:	8813      	ldrh	r3, [r2, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8092 	beq.w	80067d2 <forward_dw_if32of32wf32+0x12e>
 80066ae:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80066b2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80066b6:	b102      	cbz	r2, 80066ba <forward_dw_if32of32wf32+0x16>
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	f000 80b3 	beq.w	8006826 <forward_dw_if32of32wf32+0x182>
 80066c0:	f8dc 1010 	ldr.w	r1, [ip, #16]
 80066c4:	b101      	cbz	r1, 80066c8 <forward_dw_if32of32wf32+0x24>
 80066c6:	6809      	ldr	r1, [r1, #0]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	f000 8084 	beq.w	80067d6 <forward_dw_if32of32wf32+0x132>
 80066ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d2:	f8dc 601c 	ldr.w	r6, [ip, #28]
 80066d6:	b0a1      	sub	sp, #132	@ 0x84
 80066d8:	2e00      	cmp	r6, #0
 80066da:	f000 809d 	beq.w	8006818 <forward_dw_if32of32wf32+0x174>
 80066de:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 80066e2:	6834      	ldr	r4, [r6, #0]
 80066e4:	2d01      	cmp	r5, #1
 80066e6:	f240 8099 	bls.w	800681c <forward_dw_if32of32wf32+0x178>
 80066ea:	6876      	ldr	r6, [r6, #4]
 80066ec:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80066f0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80066f4:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80066f8:	6992      	ldr	r2, [r2, #24]
 80066fa:	9713      	str	r7, [sp, #76]	@ 0x4c
 80066fc:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8006700:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8006704:	9714      	str	r7, [sp, #80]	@ 0x50
 8006706:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800670a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800670e:	9715      	str	r7, [sp, #84]	@ 0x54
 8006710:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8006714:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8006718:	9716      	str	r7, [sp, #88]	@ 0x58
 800671a:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800671e:	69a2      	ldr	r2, [r4, #24]
 8006720:	9717      	str	r7, [sp, #92]	@ 0x5c
 8006722:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8006726:	9718      	str	r7, [sp, #96]	@ 0x60
 8006728:	8d07      	ldrh	r7, [r0, #40]	@ 0x28
 800672a:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 800672e:	9719      	str	r7, [sp, #100]	@ 0x64
 8006730:	8d87      	ldrh	r7, [r0, #44]	@ 0x2c
 8006732:	69c0      	ldr	r0, [r0, #28]
 8006734:	971a      	str	r7, [sp, #104]	@ 0x68
 8006736:	901f      	str	r0, [sp, #124]	@ 0x7c
 8006738:	f8be 0000 	ldrh.w	r0, [lr]
 800673c:	901b      	str	r0, [sp, #108]	@ 0x6c
 800673e:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8006742:	901c      	str	r0, [sp, #112]	@ 0x70
 8006744:	b2a8      	uxth	r0, r5
 8006746:	901d      	str	r0, [sp, #116]	@ 0x74
 8006748:	b2a0      	uxth	r0, r4
 800674a:	901e      	str	r0, [sp, #120]	@ 0x78
 800674c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8006750:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8006754:	b10e      	cbz	r6, 800675a <forward_dw_if32of32wf32+0xb6>
 8006756:	69b0      	ldr	r0, [r6, #24]
 8006758:	6886      	ldr	r6, [r0, #8]
 800675a:	b2a4      	uxth	r4, r4
 800675c:	6989      	ldr	r1, [r1, #24]
 800675e:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8006762:	b2ad      	uxth	r5, r5
 8006764:	3c01      	subs	r4, #1
 8006766:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800676a:	3d01      	subs	r5, #1
 800676c:	6811      	ldr	r1, [r2, #0]
 800676e:	fb00 8404 	mla	r4, r0, r4, r8
 8006772:	1e78      	subs	r0, r7, #1
 8006774:	fb00 7505 	mla	r5, r0, r5, r7
 8006778:	f3c1 4043 	ubfx	r0, r1, #17, #4
 800677c:	2804      	cmp	r0, #4
 800677e:	d02d      	beq.n	80067dc <forward_dw_if32of32wf32+0x138>
 8006780:	2808      	cmp	r0, #8
 8006782:	d02b      	beq.n	80067dc <forward_dw_if32of32wf32+0x138>
 8006784:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006786:	464a      	mov	r2, r9
 8006788:	940c      	str	r4, [sp, #48]	@ 0x30
 800678a:	4651      	mov	r1, sl
 800678c:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 800678e:	4658      	mov	r0, fp
 8006790:	9706      	str	r7, [sp, #24]
 8006792:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006794:	e9cd 530d 	strd	r5, r3, [sp, #52]	@ 0x34
 8006798:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800679a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800679c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800679e:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80067a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80067a6:	e9cd 8307 	strd	r8, r3, [sp, #28]
 80067aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80067ac:	9305      	str	r3, [sp, #20]
 80067ae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067b4:	9303      	str	r3, [sp, #12]
 80067b6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80067b8:	9302      	str	r3, [sp, #8]
 80067ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80067c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80067c6:	4633      	mov	r3, r6
 80067c8:	f001 fe7c 	bl	80084c4 <forward_lite_dw_if32of32wf32>
 80067cc:	b021      	add	sp, #132	@ 0x84
 80067ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	deff      	udf	#255	@ 0xff
 80067d6:	2300      	movs	r3, #0
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	deff      	udf	#255	@ 0xff
 80067dc:	68d2      	ldr	r2, [r2, #12]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d0d0      	beq.n	8006784 <forward_dw_if32of32wf32+0xe0>
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d022      	beq.n	800682c <forward_dw_if32of32wf32+0x188>
 80067e6:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 80067ea:	b1cb      	cbz	r3, 8006820 <forward_dw_if32of32wf32+0x17c>
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	b1bb      	cbz	r3, 8006820 <forward_dw_if32of32wf32+0x17c>
 80067f0:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80067f4:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 80067f8:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80067fc:	410b      	asrs	r3, r1
 80067fe:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 8006802:	b29b      	uxth	r3, r3
 8006804:	9101      	str	r1, [sp, #4]
 8006806:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006808:	9100      	str	r1, [sp, #0]
 800680a:	4649      	mov	r1, r9
 800680c:	2800      	cmp	r0, #0
 800680e:	bf18      	it	ne
 8006810:	4681      	movne	r9, r0
 8006812:	f7ff fe2f 	bl	8006474 <ai_dict_decompress_f32>
 8006816:	e7b5      	b.n	8006784 <forward_dw_if32of32wf32+0xe0>
 8006818:	4634      	mov	r4, r6
 800681a:	e767      	b.n	80066ec <forward_dw_if32of32wf32+0x48>
 800681c:	2600      	movs	r6, #0
 800681e:	e765      	b.n	80066ec <forward_dw_if32of32wf32+0x48>
 8006820:	2300      	movs	r3, #0
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	deff      	udf	#255	@ 0xff
 8006826:	2300      	movs	r3, #0
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	deff      	udf	#255	@ 0xff
 800682c:	2300      	movs	r3, #0
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	deff      	udf	#255	@ 0xff
 8006832:	bf00      	nop

08006834 <forward_dense>:
 8006834:	6983      	ldr	r3, [r0, #24]
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	2a00      	cmp	r2, #0
 800683a:	f000 80f0 	beq.w	8006a1e <forward_dense+0x1ea>
 800683e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006842:	ed2d 8b02 	vpush	{d8}
 8006846:	6858      	ldr	r0, [r3, #4]
 8006848:	b09b      	sub	sp, #108	@ 0x6c
 800684a:	6845      	ldr	r5, [r0, #4]
 800684c:	b105      	cbz	r5, 8006850 <forward_dense+0x1c>
 800684e:	682d      	ldr	r5, [r5, #0]
 8006850:	2a01      	cmp	r2, #1
 8006852:	f000 840a 	beq.w	800706a <forward_dense+0x836>
 8006856:	6906      	ldr	r6, [r0, #16]
 8006858:	b106      	cbz	r6, 800685c <forward_dense+0x28>
 800685a:	6836      	ldr	r6, [r6, #0]
 800685c:	2a02      	cmp	r2, #2
 800685e:	f000 80e0 	beq.w	8006a22 <forward_dense+0x1ee>
 8006862:	69c3      	ldr	r3, [r0, #28]
 8006864:	930d      	str	r3, [sp, #52]	@ 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 83f1 	beq.w	800704e <forward_dense+0x81a>
 800686c:	4619      	mov	r1, r3
 800686e:	8b03      	ldrh	r3, [r0, #24]
 8006870:	6809      	ldr	r1, [r1, #0]
 8006872:	2b01      	cmp	r3, #1
 8006874:	910f      	str	r1, [sp, #60]	@ 0x3c
 8006876:	f240 83ec 	bls.w	8007052 <forward_dense+0x81e>
 800687a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006880:	460b      	mov	r3, r1
 8006882:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8006886:	2a03      	cmp	r2, #3
 8006888:	68eb      	ldr	r3, [r5, #12]
 800688a:	68f7      	ldr	r7, [r6, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687c      	ldr	r4, [r7, #4]
 8006890:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006892:	f8d8 3000 	ldr.w	r3, [r8]
 8006896:	4621      	mov	r1, r4
 8006898:	9419      	str	r4, [sp, #100]	@ 0x64
 800689a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800689e:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 80068a2:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80068a6:	fb01 f404 	mul.w	r4, r1, r4
 80068aa:	fa4e f10c 	asr.w	r1, lr, ip
 80068ae:	9116      	str	r1, [sp, #88]	@ 0x58
 80068b0:	f000 83d8 	beq.w	8007064 <forward_dense+0x830>
 80068b4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80068b6:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80068ba:	2a00      	cmp	r2, #0
 80068bc:	f000 83c2 	beq.w	8007044 <forward_dense+0x810>
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	2a00      	cmp	r2, #0
 80068c4:	f000 83be 	beq.w	8007044 <forward_dense+0x810>
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80068ce:	f000 83a8 	beq.w	8007022 <forward_dense+0x7ee>
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	f000 83a5 	beq.w	8007022 <forward_dense+0x7ee>
 80068d8:	f04f 0a00 	mov.w	sl, #0
 80068dc:	69ab      	ldr	r3, [r5, #24]
 80068de:	fb07 f404 	mul.w	r4, r7, r4
 80068e2:	69b2      	ldr	r2, [r6, #24]
 80068e4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80068e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068ea:	6892      	ldr	r2, [r2, #8]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80068f2:	9206      	str	r2, [sp, #24]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	428a      	cmp	r2, r1
 80068f8:	9110      	str	r1, [sp, #64]	@ 0x40
 80068fa:	9304      	str	r3, [sp, #16]
 80068fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068fe:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8006902:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006906:	900e      	str	r0, [sp, #56]	@ 0x38
 8006908:	9303      	str	r3, [sp, #12]
 800690a:	f080 8380 	bcs.w	800700e <forward_dense+0x7da>
 800690e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006910:	4654      	mov	r4, sl
 8006912:	4bb9      	ldr	r3, [pc, #740]	@ (8006bf8 <forward_dense+0x3c4>)
 8006914:	46ca      	mov	sl, r9
 8006916:	08d0      	lsrs	r0, r2, #3
 8006918:	ed9f 8ab8 	vldr	s16, [pc, #736]	@ 8006bfc <forward_dense+0x3c8>
 800691c:	4413      	add	r3, r2
 800691e:	9009      	str	r0, [sp, #36]	@ 0x24
 8006920:	0099      	lsls	r1, r3, #2
 8006922:	f022 0301 	bic.w	r3, r2, #1
 8006926:	f002 0201 	and.w	r2, r2, #1
 800692a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800692e:	9118      	str	r1, [sp, #96]	@ 0x60
 8006930:	920a      	str	r2, [sp, #40]	@ 0x28
 8006932:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 8006936:	9305      	str	r3, [sp, #20]
 8006938:	f101 0320 	add.w	r3, r1, #32
 800693c:	9207      	str	r2, [sp, #28]
 800693e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006940:	444b      	add	r3, r9
 8006942:	469b      	mov	fp, r3
 8006944:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800694e:	b10b      	cbz	r3, 8006954 <forward_dense+0x120>
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2c00      	cmp	r4, #0
 8006956:	f000 834b 	beq.w	8006ff0 <forward_dense+0x7bc>
 800695a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800695c:	2904      	cmp	r1, #4
 800695e:	f000 826a 	beq.w	8006e36 <forward_dense+0x602>
 8006962:	9903      	ldr	r1, [sp, #12]
 8006964:	9806      	ldr	r0, [sp, #24]
 8006966:	4281      	cmp	r1, r0
 8006968:	f240 8356 	bls.w	8007018 <forward_dense+0x7e4>
 800696c:	4686      	mov	lr, r0
 800696e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006970:	eb00 090a 	add.w	r9, r0, sl
 8006974:	0941      	lsrs	r1, r0, #5
 8006976:	f10a 0004 	add.w	r0, sl, #4
 800697a:	f8cd 9020 	str.w	r9, [sp, #32]
 800697e:	9012      	str	r0, [sp, #72]	@ 0x48
 8006980:	1c48      	adds	r0, r1, #1
 8006982:	00c9      	lsls	r1, r1, #3
 8006984:	3110      	adds	r1, #16
 8006986:	9115      	str	r1, [sp, #84]	@ 0x54
 8006988:	00c1      	lsls	r1, r0, #3
 800698a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800698c:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8006990:	9114      	str	r1, [sp, #80]	@ 0x50
 8006992:	f1a9 0104 	sub.w	r1, r9, #4
 8006996:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 800699a:	910c      	str	r1, [sp, #48]	@ 0x30
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8128 	beq.w	8006bf2 <forward_dense+0x3be>
 80069a2:	ecb3 5a01 	vldmia	r3!, {s10}
 80069a6:	f1b9 0f07 	cmp.w	r9, #7
 80069aa:	d83d      	bhi.n	8006a28 <forward_dense+0x1f4>
 80069ac:	45da      	cmp	sl, fp
 80069ae:	d211      	bcs.n	80069d4 <forward_dense+0x1a0>
 80069b0:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8006bfc <forward_dense+0x3c8>
 80069b4:	4650      	mov	r0, sl
 80069b6:	4615      	mov	r5, r2
 80069b8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80069bc:	ecb0 7a01 	vldmia	r0!, {s14}
 80069c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80069c4:	4558      	cmp	r0, fp
 80069c6:	edd1 6a00 	vldr	s13, [r1]
 80069ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80069ce:	d3f3      	bcc.n	80069b8 <forward_dense+0x184>
 80069d0:	ee35 5a27 	vadd.f32	s10, s10, s15
 80069d4:	9904      	ldr	r1, [sp, #16]
 80069d6:	ecae 5a01 	vstmia	lr!, {s10}
 80069da:	440a      	add	r2, r1
 80069dc:	9903      	ldr	r1, [sp, #12]
 80069de:	458e      	cmp	lr, r1
 80069e0:	d3dc      	bcc.n	800699c <forward_dense+0x168>
 80069e2:	9a06      	ldr	r2, [sp, #24]
 80069e4:	1a8b      	subs	r3, r1, r2
 80069e6:	3b01      	subs	r3, #1
 80069e8:	f023 0303 	bic.w	r3, r3, #3
 80069ec:	3304      	adds	r3, #4
 80069ee:	18d3      	adds	r3, r2, r3
 80069f0:	4619      	mov	r1, r3
 80069f2:	9306      	str	r3, [sp, #24]
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80069fa:	4413      	add	r3, r2
 80069fc:	9a07      	ldr	r2, [sp, #28]
 80069fe:	4281      	cmp	r1, r0
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a04:	441a      	add	r2, r3
 8006a06:	449b      	add	fp, r3
 8006a08:	9207      	str	r2, [sp, #28]
 8006a0a:	9a05      	ldr	r2, [sp, #20]
 8006a0c:	441a      	add	r2, r3
 8006a0e:	9205      	str	r2, [sp, #20]
 8006a10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a12:	4692      	mov	sl, r2
 8006a14:	f080 82fb 	bcs.w	800700e <forward_dense+0x7da>
 8006a18:	441a      	add	r2, r3
 8006a1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006a1c:	e793      	b.n	8006946 <forward_dense+0x112>
 8006a1e:	6853      	ldr	r3, [r2, #4]
 8006a20:	deff      	udf	#255	@ 0xff
 8006a22:	2300      	movs	r3, #0
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	deff      	udf	#255	@ 0xff
 8006a28:	f002 0103 	and.w	r1, r2, #3
 8006a2c:	2902      	cmp	r1, #2
 8006a2e:	f000 81e6 	beq.w	8006dfe <forward_dense+0x5ca>
 8006a32:	2903      	cmp	r1, #3
 8006a34:	f000 80e4 	beq.w	8006c00 <forward_dense+0x3cc>
 8006a38:	2901      	cmp	r1, #1
 8006a3a:	f000 81ef 	beq.w	8006e1c <forward_dense+0x5e8>
 8006a3e:	9908      	ldr	r1, [sp, #32]
 8006a40:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8006bfc <forward_dense+0x3c8>
 8006a44:	458a      	cmp	sl, r1
 8006a46:	f200 82e9 	bhi.w	800701c <forward_dense+0x7e8>
 8006a4a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8006a4c:	f102 0108 	add.w	r1, r2, #8
 8006a50:	f10a 0020 	add.w	r0, sl, #32
 8006a54:	18ae      	adds	r6, r5, r2
 8006a56:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8006a5a:	3108      	adds	r1, #8
 8006a5c:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 8006a60:	3020      	adds	r0, #32
 8006a62:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a66:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8006a6a:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 8006a6e:	edd5 7a00 	vldr	s15, [r5]
 8006a72:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8006a76:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8006a7a:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8006a7e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a82:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 8006a86:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 8006a8a:	edd5 2a00 	vldr	s5, [r5]
 8006a8e:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8006a92:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006a96:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 8006a9a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006a9e:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 8006aa2:	ed95 3a00 	vldr	s6, [r5]
 8006aa6:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8006aaa:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006aae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ab2:	edd5 3a00 	vldr	s7, [r5]
 8006ab6:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8006aba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006abe:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006ac2:	ed95 4a00 	vldr	s8, [r5]
 8006ac6:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006aca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ace:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006ad2:	edd5 4a00 	vldr	s9, [r5]
 8006ad6:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8006ada:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ade:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8006ae2:	edd5 5a00 	vldr	s11, [r5]
 8006ae6:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8006aea:	428e      	cmp	r6, r1
 8006aec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006af0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006af4:	ed95 6a00 	vldr	s12, [r5]
 8006af8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b00:	d1a9      	bne.n	8006a56 <forward_dense+0x222>
 8006b02:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b04:	1850      	adds	r0, r2, r1
 8006b06:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006b08:	4559      	cmp	r1, fp
 8006b0a:	d26f      	bcs.n	8006bec <forward_dense+0x3b8>
 8006b0c:	7805      	ldrb	r5, [r0, #0]
 8006b0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b12:	edd5 7a00 	vldr	s15, [r5]
 8006b16:	460d      	mov	r5, r1
 8006b18:	ecf5 6a01 	vldmia	r5!, {s13}
 8006b1c:	45ab      	cmp	fp, r5
 8006b1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b22:	d963      	bls.n	8006bec <forward_dense+0x3b8>
 8006b24:	7845      	ldrb	r5, [r0, #1]
 8006b26:	edd1 6a01 	vldr	s13, [r1, #4]
 8006b2a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b2e:	edd5 7a00 	vldr	s15, [r5]
 8006b32:	f101 0508 	add.w	r5, r1, #8
 8006b36:	45ab      	cmp	fp, r5
 8006b38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b3c:	d956      	bls.n	8006bec <forward_dense+0x3b8>
 8006b3e:	7885      	ldrb	r5, [r0, #2]
 8006b40:	edd1 6a02 	vldr	s13, [r1, #8]
 8006b44:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b48:	edd5 7a00 	vldr	s15, [r5]
 8006b4c:	f101 050c 	add.w	r5, r1, #12
 8006b50:	45ab      	cmp	fp, r5
 8006b52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b56:	d949      	bls.n	8006bec <forward_dense+0x3b8>
 8006b58:	78c5      	ldrb	r5, [r0, #3]
 8006b5a:	edd1 6a03 	vldr	s13, [r1, #12]
 8006b5e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b62:	edd5 7a00 	vldr	s15, [r5]
 8006b66:	f101 0510 	add.w	r5, r1, #16
 8006b6a:	45ab      	cmp	fp, r5
 8006b6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b70:	d93c      	bls.n	8006bec <forward_dense+0x3b8>
 8006b72:	7905      	ldrb	r5, [r0, #4]
 8006b74:	edd1 6a04 	vldr	s13, [r1, #16]
 8006b78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b7c:	edd5 7a00 	vldr	s15, [r5]
 8006b80:	f101 0514 	add.w	r5, r1, #20
 8006b84:	45ab      	cmp	fp, r5
 8006b86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b8a:	d92f      	bls.n	8006bec <forward_dense+0x3b8>
 8006b8c:	7945      	ldrb	r5, [r0, #5]
 8006b8e:	edd1 6a05 	vldr	s13, [r1, #20]
 8006b92:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006b96:	edd5 7a00 	vldr	s15, [r5]
 8006b9a:	f101 0518 	add.w	r5, r1, #24
 8006b9e:	45ab      	cmp	fp, r5
 8006ba0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ba4:	d922      	bls.n	8006bec <forward_dense+0x3b8>
 8006ba6:	7985      	ldrb	r5, [r0, #6]
 8006ba8:	edd1 6a06 	vldr	s13, [r1, #24]
 8006bac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006bb0:	edd5 7a00 	vldr	s15, [r5]
 8006bb4:	f101 051c 	add.w	r5, r1, #28
 8006bb8:	45ab      	cmp	fp, r5
 8006bba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bbe:	d915      	bls.n	8006bec <forward_dense+0x3b8>
 8006bc0:	79c5      	ldrb	r5, [r0, #7]
 8006bc2:	edd1 6a07 	vldr	s13, [r1, #28]
 8006bc6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006bca:	edd5 7a00 	vldr	s15, [r5]
 8006bce:	f101 0520 	add.w	r5, r1, #32
 8006bd2:	45ab      	cmp	fp, r5
 8006bd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bd8:	d908      	bls.n	8006bec <forward_dense+0x3b8>
 8006bda:	edd1 7a08 	vldr	s15, [r1, #32]
 8006bde:	7a01      	ldrb	r1, [r0, #8]
 8006be0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006be4:	edd1 6a00 	vldr	s13, [r1]
 8006be8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bec:	ee35 5a07 	vadd.f32	s10, s10, s14
 8006bf0:	e6f0      	b.n	80069d4 <forward_dense+0x1a0>
 8006bf2:	ed9f 5a02 	vldr	s10, [pc, #8]	@ 8006bfc <forward_dense+0x3c8>
 8006bf6:	e6d6      	b.n	80069a6 <forward_dense+0x172>
 8006bf8:	3ffffff8 	.word	0x3ffffff8
 8006bfc:	00000000 	.word	0x00000000
 8006c00:	eeb0 7a48 	vmov.f32	s14, s16
 8006c04:	4650      	mov	r0, sl
 8006c06:	4611      	mov	r1, r2
 8006c08:	468c      	mov	ip, r1
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8006c10:	ecf6 7a01 	vldmia	r6!, {s15}
 8006c14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c18:	edd5 6a00 	vldr	s13, [r5]
 8006c1c:	9d08      	ldr	r5, [sp, #32]
 8006c1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c22:	42ae      	cmp	r6, r5
 8006c24:	d866      	bhi.n	8006cf4 <forward_dense+0x4c0>
 8006c26:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006c28:	f101 0711 	add.w	r7, r1, #17
 8006c2c:	3109      	adds	r1, #9
 8006c2e:	eba5 0800 	sub.w	r8, r5, r0
 8006c32:	3024      	adds	r0, #36	@ 0x24
 8006c34:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8006c38:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8006c3c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8006c40:	3108      	adds	r1, #8
 8006c42:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 8006c46:	3020      	adds	r0, #32
 8006c48:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c4c:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8006c50:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 8006c54:	edd5 7a00 	vldr	s15, [r5]
 8006c58:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8006c5c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8006c60:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8006c64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c68:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 8006c6c:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 8006c70:	edd5 2a00 	vldr	s5, [r5]
 8006c74:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8006c78:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006c7c:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 8006c80:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c84:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 8006c88:	ed95 3a00 	vldr	s6, [r5]
 8006c8c:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8006c90:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006c98:	edd5 3a00 	vldr	s7, [r5]
 8006c9c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8006ca0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006ca4:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006ca8:	ed95 4a00 	vldr	s8, [r5]
 8006cac:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006cb0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006cb4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006cb8:	edd5 4a00 	vldr	s9, [r5]
 8006cbc:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8006cc0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006cc4:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8006cc8:	edd5 5a00 	vldr	s11, [r5]
 8006ccc:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8006cd0:	428f      	cmp	r7, r1
 8006cd2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006cd6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006cda:	ed95 6a00 	vldr	s12, [r5]
 8006cde:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ce6:	d1a9      	bne.n	8006c3c <forward_dense+0x408>
 8006ce8:	f108 0801 	add.w	r8, r8, #1
 8006cec:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8006cf0:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8006cf4:	455e      	cmp	r6, fp
 8006cf6:	f4bf af79 	bcs.w	8006bec <forward_dense+0x3b8>
 8006cfa:	f89c 1000 	ldrb.w	r1, [ip]
 8006cfe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d02:	edd1 7a00 	vldr	s15, [r1]
 8006d06:	4631      	mov	r1, r6
 8006d08:	ecf1 6a01 	vldmia	r1!, {s13}
 8006d0c:	458b      	cmp	fp, r1
 8006d0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d12:	f67f af6b 	bls.w	8006bec <forward_dense+0x3b8>
 8006d16:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8006d1a:	edd6 6a01 	vldr	s13, [r6, #4]
 8006d1e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d22:	edd1 7a00 	vldr	s15, [r1]
 8006d26:	f106 0108 	add.w	r1, r6, #8
 8006d2a:	458b      	cmp	fp, r1
 8006d2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d30:	f67f af5c 	bls.w	8006bec <forward_dense+0x3b8>
 8006d34:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8006d38:	edd6 6a02 	vldr	s13, [r6, #8]
 8006d3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d40:	edd1 7a00 	vldr	s15, [r1]
 8006d44:	f106 010c 	add.w	r1, r6, #12
 8006d48:	458b      	cmp	fp, r1
 8006d4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d4e:	f67f af4d 	bls.w	8006bec <forward_dense+0x3b8>
 8006d52:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8006d56:	edd6 6a03 	vldr	s13, [r6, #12]
 8006d5a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d5e:	edd1 7a00 	vldr	s15, [r1]
 8006d62:	f106 0110 	add.w	r1, r6, #16
 8006d66:	458b      	cmp	fp, r1
 8006d68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d6c:	f67f af3e 	bls.w	8006bec <forward_dense+0x3b8>
 8006d70:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8006d74:	edd6 6a04 	vldr	s13, [r6, #16]
 8006d78:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d7c:	edd1 7a00 	vldr	s15, [r1]
 8006d80:	f106 0114 	add.w	r1, r6, #20
 8006d84:	458b      	cmp	fp, r1
 8006d86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d8a:	f67f af2f 	bls.w	8006bec <forward_dense+0x3b8>
 8006d8e:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8006d92:	edd6 6a05 	vldr	s13, [r6, #20]
 8006d96:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d9a:	edd1 7a00 	vldr	s15, [r1]
 8006d9e:	f106 0118 	add.w	r1, r6, #24
 8006da2:	458b      	cmp	fp, r1
 8006da4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006da8:	f67f af20 	bls.w	8006bec <forward_dense+0x3b8>
 8006dac:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8006db0:	edd6 6a06 	vldr	s13, [r6, #24]
 8006db4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006db8:	edd1 7a00 	vldr	s15, [r1]
 8006dbc:	f106 011c 	add.w	r1, r6, #28
 8006dc0:	458b      	cmp	fp, r1
 8006dc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006dc6:	f67f af11 	bls.w	8006bec <forward_dense+0x3b8>
 8006dca:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8006dce:	edd6 6a07 	vldr	s13, [r6, #28]
 8006dd2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006dd6:	edd1 7a00 	vldr	s15, [r1]
 8006dda:	f106 0120 	add.w	r1, r6, #32
 8006dde:	458b      	cmp	fp, r1
 8006de0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006de4:	f67f af02 	bls.w	8006bec <forward_dense+0x3b8>
 8006de8:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8006dec:	edd6 7a08 	vldr	s15, [r6, #32]
 8006df0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006df4:	edd1 6a00 	vldr	s13, [r1]
 8006df8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006dfc:	e6f6      	b.n	8006bec <forward_dense+0x3b8>
 8006dfe:	eeb0 7a48 	vmov.f32	s14, s16
 8006e02:	4650      	mov	r0, sl
 8006e04:	4611      	mov	r1, r2
 8006e06:	f811 5b01 	ldrb.w	r5, [r1], #1
 8006e0a:	ecf0 7a01 	vldmia	r0!, {s15}
 8006e0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006e12:	edd5 6a00 	vldr	s13, [r5]
 8006e16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e1a:	e6f5      	b.n	8006c08 <forward_dense+0x3d4>
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	edda 7a00 	vldr	s15, [sl]
 8006e22:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006e24:	f811 5b01 	ldrb.w	r5, [r1], #1
 8006e28:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006e2c:	ed95 7a00 	vldr	s14, [r5]
 8006e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e34:	e7e7      	b.n	8006e06 <forward_dense+0x5d2>
 8006e36:	9803      	ldr	r0, [sp, #12]
 8006e38:	9906      	ldr	r1, [sp, #24]
 8006e3a:	4288      	cmp	r0, r1
 8006e3c:	f67f adda 	bls.w	80069f4 <forward_dense+0x1c0>
 8006e40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e42:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006e46:	468b      	mov	fp, r1
 8006e48:	f100 0c01 	add.w	ip, r0, #1
 8006e4c:	9805      	ldr	r0, [sp, #20]
 8006e4e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006e52:	3801      	subs	r0, #1
 8006e54:	9008      	str	r0, [sp, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80bf 	beq.w	8006fda <forward_dense+0x7a6>
 8006e5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e5e:	ecf3 2a01 	vldmia	r3!, {s5}
 8006e62:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 8006bfc <forward_dense+0x3c8>
 8006e66:	2900      	cmp	r1, #0
 8006e68:	f000 80bf 	beq.w	8006fea <forward_dense+0x7b6>
 8006e6c:	1d10      	adds	r0, r2, #4
 8006e6e:	f10a 0120 	add.w	r1, sl, #32
 8006e72:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8006e76:	3004      	adds	r0, #4
 8006e78:	ed11 2a07 	vldr	s4, [r1, #-28]	@ 0xffffffe4
 8006e7c:	3120      	adds	r1, #32
 8006e7e:	f007 0e0f 	and.w	lr, r7, #15
 8006e82:	093f      	lsrs	r7, r7, #4
 8006e84:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8006e88:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8006e8c:	ed11 4a10 	vldr	s8, [r1, #-64]	@ 0xffffffc0
 8006e90:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006e94:	ed51 3a0e 	vldr	s7, [r1, #-56]	@ 0xffffffc8
 8006e98:	edde 7a00 	vldr	s15, [lr]
 8006e9c:	ed97 3a00 	vldr	s6, [r7]
 8006ea0:	0937      	lsrs	r7, r6, #4
 8006ea2:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006ea6:	f006 060f 	and.w	r6, r6, #15
 8006eaa:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006eae:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8006eb2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006eb6:	ed11 5a0d 	vldr	s10, [r1, #-52]	@ 0xffffffcc
 8006eba:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006ebe:	ed97 3a00 	vldr	s6, [r7]
 8006ec2:	ed96 4a00 	vldr	s8, [r6]
 8006ec6:	092e      	lsrs	r6, r5, #4
 8006ec8:	ed51 4a0c 	vldr	s9, [r1, #-48]	@ 0xffffffd0
 8006ecc:	f005 050f 	and.w	r5, r5, #15
 8006ed0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006ed4:	ed11 6a0b 	vldr	s12, [r1, #-44]	@ 0xffffffd4
 8006ed8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006edc:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 8006ee0:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8006ee4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006ee8:	eee4 7a05 	vfma.f32	s15, s8, s10
 8006eec:	ed96 4a00 	vldr	s8, [r6]
 8006ef0:	ed95 5a00 	vldr	s10, [r5]
 8006ef4:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8006ef8:	4560      	cmp	r0, ip
 8006efa:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8006efe:	f005 050f 	and.w	r5, r5, #15
 8006f02:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006f06:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006f0a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006f0e:	eee5 7a06 	vfma.f32	s15, s10, s12
 8006f12:	ed96 5a00 	vldr	s10, [r6]
 8006f16:	ed95 6a00 	vldr	s12, [r5]
 8006f1a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006f1e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f26:	d1a4      	bne.n	8006e72 <forward_dense+0x63e>
 8006f28:	f1ac 0804 	sub.w	r8, ip, #4
 8006f2c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006f30:	9905      	ldr	r1, [sp, #20]
 8006f32:	458e      	cmp	lr, r1
 8006f34:	d229      	bcs.n	8006f8a <forward_dense+0x756>
 8006f36:	9908      	ldr	r1, [sp, #32]
 8006f38:	f10e 0008 	add.w	r0, lr, #8
 8006f3c:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8006f40:	eba1 070e 	sub.w	r7, r1, lr
 8006f44:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8006f48:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8006f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f50:	3008      	adds	r0, #8
 8006f52:	ed50 5a03 	vldr	s11, [r0, #-12]
 8006f56:	f001 050f 	and.w	r5, r1, #15
 8006f5a:	0909      	lsrs	r1, r1, #4
 8006f5c:	ed50 6a04 	vldr	s13, [r0, #-16]
 8006f60:	42b7      	cmp	r7, r6
 8006f62:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006f66:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006f6a:	edd5 7a00 	vldr	s15, [r5]
 8006f6e:	ed91 6a00 	vldr	s12, [r1]
 8006f72:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006f76:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f7e:	d1e5      	bne.n	8006f4c <forward_dense+0x718>
 8006f80:	f109 0901 	add.w	r9, r9, #1
 8006f84:	44c8      	add	r8, r9
 8006f86:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8006f8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f8c:	b1c1      	cbz	r1, 8006fc0 <forward_dense+0x78c>
 8006f8e:	f898 1000 	ldrb.w	r1, [r8]
 8006f92:	edde 7a00 	vldr	s15, [lr]
 8006f96:	0909      	lsrs	r1, r1, #4
 8006f98:	9804      	ldr	r0, [sp, #16]
 8006f9a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006f9e:	4402      	add	r2, r0
 8006fa0:	4484      	add	ip, r0
 8006fa2:	edd1 6a00 	vldr	s13, [r1]
 8006fa6:	9903      	ldr	r1, [sp, #12]
 8006fa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006fac:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006fb0:	eceb 2a01 	vstmia	fp!, {s5}
 8006fb4:	4559      	cmp	r1, fp
 8006fb6:	f63f af4e 	bhi.w	8006e56 <forward_dense+0x622>
 8006fba:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8006fbe:	e510      	b.n	80069e2 <forward_dense+0x1ae>
 8006fc0:	9904      	ldr	r1, [sp, #16]
 8006fc2:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006fc6:	440a      	add	r2, r1
 8006fc8:	448c      	add	ip, r1
 8006fca:	9903      	ldr	r1, [sp, #12]
 8006fcc:	ecab 7a01 	vstmia	fp!, {s14}
 8006fd0:	458b      	cmp	fp, r1
 8006fd2:	d2f2      	bcs.n	8006fba <forward_dense+0x786>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f af41 	bne.w	8006e5c <forward_dense+0x628>
 8006fda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fdc:	eef0 2a48 	vmov.f32	s5, s16
 8006fe0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8007070 <forward_dense+0x83c>
 8006fe4:	2900      	cmp	r1, #0
 8006fe6:	f47f af41 	bne.w	8006e6c <forward_dense+0x638>
 8006fea:	46d6      	mov	lr, sl
 8006fec:	4690      	mov	r8, r2
 8006fee:	e79f      	b.n	8006f30 <forward_dense+0x6fc>
 8006ff0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006ff2:	4651      	mov	r1, sl
 8006ff4:	9d06      	ldr	r5, [sp, #24]
 8006ff6:	9001      	str	r0, [sp, #4]
 8006ff8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8006ffa:	9000      	str	r0, [sp, #0]
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f001 fc55 	bl	80088ac <forward_lite_dense_if32of32wf32>
 8007002:	462b      	mov	r3, r5
 8007004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007006:	4413      	add	r3, r2
 8007008:	4619      	mov	r1, r3
 800700a:	9306      	str	r3, [sp, #24]
 800700c:	e4f2      	b.n	80069f4 <forward_dense+0x1c0>
 800700e:	b01b      	add	sp, #108	@ 0x6c
 8007010:	ecbd 8b02 	vpop	{d8}
 8007014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007018:	4601      	mov	r1, r0
 800701a:	e4eb      	b.n	80069f4 <forward_dense+0x1c0>
 800701c:	4651      	mov	r1, sl
 800701e:	4610      	mov	r0, r2
 8007020:	e572      	b.n	8006b08 <forward_dense+0x2d4>
 8007022:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8007026:	f1b9 0f00 	cmp.w	r9, #0
 800702a:	d016      	beq.n	800705a <forward_dense+0x826>
 800702c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007030:	f001 fea0 	bl	8008d74 <ai_array_get_byte_size>
 8007034:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8007038:	4602      	mov	r2, r0
 800703a:	4640      	mov	r0, r8
 800703c:	4651      	mov	r1, sl
 800703e:	f001 fd5d 	bl	8008afc <st_int8_copy>
 8007042:	e44b      	b.n	80068dc <forward_dense+0xa8>
 8007044:	2b04      	cmp	r3, #4
 8007046:	d00a      	beq.n	800705e <forward_dense+0x82a>
 8007048:	f04f 0900 	mov.w	r9, #0
 800704c:	e441      	b.n	80068d2 <forward_dense+0x9e>
 800704e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007050:	e417      	b.n	8006882 <forward_dense+0x4e>
 8007052:	2300      	movs	r3, #0
 8007054:	930d      	str	r3, [sp, #52]	@ 0x34
 8007056:	460b      	mov	r3, r1
 8007058:	e413      	b.n	8006882 <forward_dense+0x4e>
 800705a:	46c2      	mov	sl, r8
 800705c:	e43e      	b.n	80068dc <forward_dense+0xa8>
 800705e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8007062:	e43b      	b.n	80068dc <forward_dense+0xa8>
 8007064:	2300      	movs	r3, #0
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	deff      	udf	#255	@ 0xff
 800706a:	2300      	movs	r3, #0
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	deff      	udf	#255	@ 0xff
 8007070:	00000000 	.word	0x00000000

08007074 <forward_split>:
 8007074:	6983      	ldr	r3, [r0, #24]
 8007076:	8819      	ldrh	r1, [r3, #0]
 8007078:	b909      	cbnz	r1, 800707e <forward_split+0xa>
 800707a:	684b      	ldr	r3, [r1, #4]
 800707c:	deff      	udf	#255	@ 0xff
 800707e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007082:	685d      	ldr	r5, [r3, #4]
 8007084:	2901      	cmp	r1, #1
 8007086:	b089      	sub	sp, #36	@ 0x24
 8007088:	686b      	ldr	r3, [r5, #4]
 800708a:	bf14      	ite	ne
 800708c:	f105 090c 	addne.w	r9, r5, #12
 8007090:	f04f 0900 	moveq.w	r9, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80a4 	beq.w	80071e2 <forward_split+0x16e>
 800709a:	681c      	ldr	r4, [r3, #0]
 800709c:	2902      	cmp	r1, #2
 800709e:	69c3      	ldr	r3, [r0, #28]
 80070a0:	6962      	ldr	r2, [r4, #20]
 80070a2:	f8d2 b004 	ldr.w	fp, [r2, #4]
 80070a6:	f240 8099 	bls.w	80071dc <forward_split+0x168>
 80070aa:	69e9      	ldr	r1, [r5, #28]
 80070ac:	2900      	cmp	r1, #0
 80070ae:	d06b      	beq.n	8007188 <forward_split+0x114>
 80070b0:	680a      	ldr	r2, [r1, #0]
 80070b2:	9202      	str	r2, [sp, #8]
 80070b4:	f1b9 0f00 	cmp.w	r9, #0
 80070b8:	d078      	beq.n	80071ac <forward_split+0x138>
 80070ba:	f8b9 1000 	ldrh.w	r1, [r9]
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d067      	beq.n	8007192 <forward_split+0x11e>
 80070c2:	6991      	ldr	r1, [r2, #24]
 80070c4:	688a      	ldr	r2, [r1, #8]
 80070c6:	9204      	str	r2, [sp, #16]
 80070c8:	2200      	movs	r2, #0
 80070ca:	9205      	str	r2, [sp, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d06b      	beq.n	80071a8 <forward_split+0x134>
 80070d0:	68e1      	ldr	r1, [r4, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 80070d8:	3904      	subs	r1, #4
 80070da:	3d04      	subs	r5, #4
 80070dc:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80070e0:	428d      	cmp	r5, r1
 80070e2:	fb00 f202 	mul.w	r2, r0, r2
 80070e6:	d1f9      	bne.n	80070dc <forward_split+0x68>
 80070e8:	68a1      	ldr	r1, [r4, #8]
 80070ea:	3301      	adds	r3, #1
 80070ec:	9203      	str	r2, [sp, #12]
 80070ee:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80070f2:	f3c1 2517 	ubfx	r5, r1, #8, #24
 80070f6:	d26a      	bcs.n	80071ce <forward_split+0x15a>
 80070f8:	68e0      	ldr	r0, [r4, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007100:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8007104:	f853 1b04 	ldr.w	r1, [r3], #4
 8007108:	4298      	cmp	r0, r3
 800710a:	fb01 f202 	mul.w	r2, r1, r2
 800710e:	d1f9      	bne.n	8007104 <forward_split+0x90>
 8007110:	69a3      	ldr	r3, [r4, #24]
 8007112:	9207      	str	r2, [sp, #28]
 8007114:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8007118:	2a00      	cmp	r2, #0
 800711a:	d053      	beq.n	80071c4 <forward_split+0x150>
 800711c:	f1b9 0f00 	cmp.w	r9, #0
 8007120:	d050      	beq.n	80071c4 <forward_split+0x150>
 8007122:	2300      	movs	r3, #0
 8007124:	f8b9 1000 	ldrh.w	r1, [r9]
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	9306      	str	r3, [sp, #24]
 800712c:	2700      	movs	r7, #0
 800712e:	46da      	mov	sl, fp
 8007130:	42b9      	cmp	r1, r7
 8007132:	d93d      	bls.n	80071b0 <forward_split+0x13c>
 8007134:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d039      	beq.n	80071b0 <forward_split+0x13c>
 800713c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d035      	beq.n	80071b0 <forward_split+0x13c>
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	689c      	ldr	r4, [r3, #8]
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d03d      	beq.n	80071ca <forward_split+0x156>
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	fb03 f606 	mul.w	r6, r3, r6
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	fb03 f306 	mul.w	r3, r3, r6
 8007160:	b176      	cbz	r6, 8007180 <forward_split+0x10c>
 8007162:	441c      	add	r4, r3
 8007164:	46c3      	mov	fp, r8
 8007166:	2500      	movs	r5, #0
 8007168:	3501      	adds	r5, #1
 800716a:	4621      	mov	r1, r4
 800716c:	4658      	mov	r0, fp
 800716e:	4652      	mov	r2, sl
 8007170:	f001 fcc4 	bl	8008afc <st_int8_copy>
 8007174:	42ae      	cmp	r6, r5
 8007176:	4454      	add	r4, sl
 8007178:	44d3      	add	fp, sl
 800717a:	d1f5      	bne.n	8007168 <forward_split+0xf4>
 800717c:	f8b9 1000 	ldrh.w	r1, [r9]
 8007180:	fb0a 8806 	mla	r8, sl, r6, r8
 8007184:	3701      	adds	r7, #1
 8007186:	e7d3      	b.n	8007130 <forward_split+0xbc>
 8007188:	f1b9 0f00 	cmp.w	r9, #0
 800718c:	d025      	beq.n	80071da <forward_split+0x166>
 800718e:	f8b9 1000 	ldrh.w	r1, [r9]
 8007192:	68e0      	ldr	r0, [r4, #12]
 8007194:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007198:	fbb0 f2f1 	udiv	r2, r0, r1
 800719c:	9205      	str	r2, [sp, #20]
 800719e:	2200      	movs	r2, #0
 80071a0:	9202      	str	r2, [sp, #8]
 80071a2:	9204      	str	r2, [sp, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d193      	bne.n	80070d0 <forward_split+0x5c>
 80071a8:	2201      	movs	r2, #1
 80071aa:	e79d      	b.n	80070e8 <forward_split+0x74>
 80071ac:	4649      	mov	r1, r9
 80071ae:	e786      	b.n	80070be <forward_split+0x4a>
 80071b0:	9a01      	ldr	r2, [sp, #4]
 80071b2:	46d3      	mov	fp, sl
 80071b4:	9b06      	ldr	r3, [sp, #24]
 80071b6:	4452      	add	r2, sl
 80071b8:	3301      	adds	r3, #1
 80071ba:	9201      	str	r2, [sp, #4]
 80071bc:	9a07      	ldr	r2, [sp, #28]
 80071be:	9306      	str	r3, [sp, #24]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d8b3      	bhi.n	800712c <forward_split+0xb8>
 80071c4:	b009      	add	sp, #36	@ 0x24
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ca:	9e05      	ldr	r6, [sp, #20]
 80071cc:	e7c2      	b.n	8007154 <forward_split+0xe0>
 80071ce:	69a3      	ldr	r3, [r4, #24]
 80071d0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80071d4:	2301      	movs	r3, #1
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	e7a0      	b.n	800711c <forward_split+0xa8>
 80071da:	deff      	udf	#255	@ 0xff
 80071dc:	2300      	movs	r3, #0
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	deff      	udf	#255	@ 0xff
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	deff      	udf	#255	@ 0xff
 80071e6:	bf00      	nop

080071e8 <forward_concat>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	ed2d 8b06 	vpush	{d8-d10}
 80071f0:	6982      	ldr	r2, [r0, #24]
 80071f2:	b087      	sub	sp, #28
 80071f4:	8813      	ldrh	r3, [r2, #0]
 80071f6:	9002      	str	r0, [sp, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 827e 	beq.w	80076fa <forward_concat+0x512>
 80071fe:	2b01      	cmp	r3, #1
 8007200:	6856      	ldr	r6, [r2, #4]
 8007202:	f000 827a 	beq.w	80076fa <forward_concat+0x512>
 8007206:	6933      	ldr	r3, [r6, #16]
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	b10b      	cbz	r3, 8007210 <forward_concat+0x28>
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	8830      	ldrh	r0, [r6, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	4604      	mov	r4, r0
 8007216:	4619      	mov	r1, r3
 8007218:	e00c      	b.n	8007234 <forward_concat+0x4c>
 800721a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800721e:	b172      	cbz	r2, 800723e <forward_concat+0x56>
 8007220:	6992      	ldr	r2, [r2, #24]
 8007222:	3301      	adds	r3, #1
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800722a:	2a01      	cmp	r2, #1
 800722c:	bf0c      	ite	eq
 800722e:	2201      	moveq	r2, #1
 8007230:	2202      	movne	r2, #2
 8007232:	4311      	orrs	r1, r2
 8007234:	4298      	cmp	r0, r3
 8007236:	d002      	beq.n	800723e <forward_concat+0x56>
 8007238:	6872      	ldr	r2, [r6, #4]
 800723a:	2a00      	cmp	r2, #0
 800723c:	d1ed      	bne.n	800721a <forward_concat+0x32>
 800723e:	9b01      	ldr	r3, [sp, #4]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	6897      	ldr	r7, [r2, #8]
 8007246:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800724a:	2a01      	cmp	r2, #1
 800724c:	d134      	bne.n	80072b8 <forward_concat+0xd0>
 800724e:	2901      	cmp	r1, #1
 8007250:	d139      	bne.n	80072c6 <forward_concat+0xde>
 8007252:	f04f 0b00 	mov.w	fp, #0
 8007256:	455c      	cmp	r4, fp
 8007258:	d930      	bls.n	80072bc <forward_concat+0xd4>
 800725a:	6873      	ldr	r3, [r6, #4]
 800725c:	b373      	cbz	r3, 80072bc <forward_concat+0xd4>
 800725e:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 8007262:	b35c      	cbz	r4, 80072bc <forward_concat+0xd4>
 8007264:	69a3      	ldr	r3, [r4, #24]
 8007266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800726a:	f001 fd83 	bl	8008d74 <ai_array_get_byte_size>
 800726e:	69a1      	ldr	r1, [r4, #24]
 8007270:	6965      	ldr	r5, [r4, #20]
 8007272:	68e2      	ldr	r2, [r4, #12]
 8007274:	9b02      	ldr	r3, [sp, #8]
 8007276:	688c      	ldr	r4, [r1, #8]
 8007278:	9901      	ldr	r1, [sp, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	eb04 0800 	add.w	r8, r4, r0
 8007280:	68c9      	ldr	r1, [r1, #12]
 8007282:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8007286:	4544      	cmp	r4, r8
 8007288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800728c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007290:	fb02 f905 	mul.w	r9, r2, r5
 8007294:	fb03 f505 	mul.w	r5, r3, r5
 8007298:	d209      	bcs.n	80072ae <forward_concat+0xc6>
 800729a:	46ba      	mov	sl, r7
 800729c:	4620      	mov	r0, r4
 800729e:	444c      	add	r4, r9
 80072a0:	4651      	mov	r1, sl
 80072a2:	464a      	mov	r2, r9
 80072a4:	f001 fc2a 	bl	8008afc <st_int8_copy>
 80072a8:	45a0      	cmp	r8, r4
 80072aa:	44aa      	add	sl, r5
 80072ac:	d8f6      	bhi.n	800729c <forward_concat+0xb4>
 80072ae:	444f      	add	r7, r9
 80072b0:	f10b 0b01 	add.w	fp, fp, #1
 80072b4:	8834      	ldrh	r4, [r6, #0]
 80072b6:	e7ce      	b.n	8007256 <forward_concat+0x6e>
 80072b8:	2901      	cmp	r1, #1
 80072ba:	d108      	bne.n	80072ce <forward_concat+0xe6>
 80072bc:	b007      	add	sp, #28
 80072be:	ecbd 8b06 	vpop	{d8-d10}
 80072c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c6:	2a01      	cmp	r2, #1
 80072c8:	d1f6      	bne.n	80072b8 <forward_concat+0xd0>
 80072ca:	078a      	lsls	r2, r1, #30
 80072cc:	d4f6      	bmi.n	80072bc <forward_concat+0xd4>
 80072ce:	9a01      	ldr	r2, [sp, #4]
 80072d0:	6811      	ldr	r1, [r2, #0]
 80072d2:	460c      	mov	r4, r1
 80072d4:	2900      	cmp	r1, #0
 80072d6:	f000 81fa 	beq.w	80076ce <forward_concat+0x4e6>
 80072da:	684a      	ldr	r2, [r1, #4]
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 81f6 	beq.w	80076ce <forward_concat+0x4e6>
 80072e2:	8849      	ldrh	r1, [r1, #2]
 80072e4:	2900      	cmp	r1, #0
 80072e6:	f000 81f2 	beq.w	80076ce <forward_concat+0x4e6>
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	edd2 8a00 	vldr	s17, [r2]
 80072f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80072f4:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 80072f8:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 80072fc:	9603      	str	r6, [sp, #12]
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	2300      	movs	r3, #0
 8007302:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 8007306:	ed9f 8ab7 	vldr	s16, [pc, #732]	@ 80075e4 <forward_concat+0x3fc>
 800730a:	ed9f 9ab7 	vldr	s18, [pc, #732]	@ 80075e8 <forward_concat+0x400>
 800730e:	4626      	mov	r6, r4
 8007310:	4699      	mov	r9, r3
 8007312:	4548      	cmp	r0, r9
 8007314:	d9d2      	bls.n	80072bc <forward_concat+0xd4>
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0ce      	beq.n	80072bc <forward_concat+0xd4>
 800731e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0ca      	beq.n	80072bc <forward_concat+0xd4>
 8007326:	9a02      	ldr	r2, [sp, #8]
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	69d0      	ldr	r0, [r2, #28]
 800732c:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
 8007330:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8007334:	68d9      	ldr	r1, [r3, #12]
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800733c:	6894      	ldr	r4, [r2, #8]
 800733e:	fb01 fb05 	mul.w	fp, r1, r5
 8007342:	68d9      	ldr	r1, [r3, #12]
 8007344:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007348:	fb01 f505 	mul.w	r5, r1, r5
 800734c:	e9d2 8100 	ldrd	r8, r1, [r2]
 8007350:	4640      	mov	r0, r8
 8007352:	f001 fd0f 	bl	8008d74 <ai_array_get_byte_size>
 8007356:	f3c8 4243 	ubfx	r2, r8, #17, #4
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	eb04 0800 	add.w	r8, r4, r0
 8007360:	2a01      	cmp	r2, #1
 8007362:	d05f      	beq.n	8007424 <forward_concat+0x23c>
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	2a00      	cmp	r2, #0
 8007368:	f000 80d1 	beq.w	800750e <forward_concat+0x326>
 800736c:	6851      	ldr	r1, [r2, #4]
 800736e:	2900      	cmp	r1, #0
 8007370:	f000 812f 	beq.w	80075d2 <forward_concat+0x3ea>
 8007374:	8850      	ldrh	r0, [r2, #2]
 8007376:	2800      	cmp	r0, #0
 8007378:	f000 8128 	beq.w	80075cc <forward_concat+0x3e4>
 800737c:	680b      	ldr	r3, [r1, #0]
 800737e:	edd3 6a00 	vldr	s13, [r3]
 8007382:	684b      	ldr	r3, [r1, #4]
 8007384:	f993 0000 	ldrsb.w	r0, [r3]
 8007388:	2e00      	cmp	r6, #0
 800738a:	f000 80c6 	beq.w	800751a <forward_concat+0x332>
 800738e:	6873      	ldr	r3, [r6, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8122 	beq.w	80075da <forward_concat+0x3f2>
 8007396:	8871      	ldrh	r1, [r6, #2]
 8007398:	b111      	cbz	r1, 80073a0 <forward_concat+0x1b8>
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f993 1000 	ldrsb.w	r1, [r3]
 80073a0:	eef4 8a66 	vcmp.f32	s17, s13
 80073a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a8:	bf0c      	ite	eq
 80073aa:	2301      	moveq	r3, #1
 80073ac:	2300      	movne	r3, #0
 80073ae:	4288      	cmp	r0, r1
 80073b0:	d102      	bne.n	80073b8 <forward_concat+0x1d0>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 80b3 	bne.w	800751e <forward_concat+0x336>
 80073b8:	9905      	ldr	r1, [sp, #20]
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d17c      	bne.n	80074b8 <forward_concat+0x2d0>
 80073be:	2a00      	cmp	r2, #0
 80073c0:	f000 8188 	beq.w	80076d4 <forward_concat+0x4ec>
 80073c4:	6851      	ldr	r1, [r2, #4]
 80073c6:	2900      	cmp	r1, #0
 80073c8:	f000 817a 	beq.w	80076c0 <forward_concat+0x4d8>
 80073cc:	8852      	ldrh	r2, [r2, #2]
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	f000 8176 	beq.w	80076c0 <forward_concat+0x4d8>
 80073d4:	684a      	ldr	r2, [r1, #4]
 80073d6:	f892 c000 	ldrb.w	ip, [r2]
 80073da:	2e00      	cmp	r6, #0
 80073dc:	f000 8175 	beq.w	80076ca <forward_concat+0x4e2>
 80073e0:	6871      	ldr	r1, [r6, #4]
 80073e2:	2900      	cmp	r1, #0
 80073e4:	f000 817c 	beq.w	80076e0 <forward_concat+0x4f8>
 80073e8:	8872      	ldrh	r2, [r6, #2]
 80073ea:	b10a      	cbz	r2, 80073f0 <forward_concat+0x208>
 80073ec:	684a      	ldr	r2, [r1, #4]
 80073ee:	7812      	ldrb	r2, [r2, #0]
 80073f0:	4594      	cmp	ip, r2
 80073f2:	f040 80fd 	bne.w	80075f0 <forward_concat+0x408>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 80fa 	beq.w	80075f0 <forward_concat+0x408>
 80073fc:	4544      	cmp	r4, r8
 80073fe:	d209      	bcs.n	8007414 <forward_concat+0x22c>
 8007400:	46ba      	mov	sl, r7
 8007402:	4620      	mov	r0, r4
 8007404:	445c      	add	r4, fp
 8007406:	4651      	mov	r1, sl
 8007408:	465a      	mov	r2, fp
 800740a:	f001 fb77 	bl	8008afc <st_int8_copy>
 800740e:	45a0      	cmp	r8, r4
 8007410:	44aa      	add	sl, r5
 8007412:	d8f6      	bhi.n	8007402 <forward_concat+0x21a>
 8007414:	eb07 0e0b 	add.w	lr, r7, fp
 8007418:	4677      	mov	r7, lr
 800741a:	9b03      	ldr	r3, [sp, #12]
 800741c:	f109 0901 	add.w	r9, r9, #1
 8007420:	8818      	ldrh	r0, [r3, #0]
 8007422:	e776      	b.n	8007312 <forward_concat+0x12a>
 8007424:	f1bb 0f00 	cmp.w	fp, #0
 8007428:	4659      	mov	r1, fp
 800742a:	9b05      	ldr	r3, [sp, #20]
 800742c:	bfb8      	it	lt
 800742e:	f10b 0103 	addlt.w	r1, fp, #3
 8007432:	1089      	asrs	r1, r1, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 8082 	bne.w	800753e <forward_concat+0x356>
 800743a:	2e00      	cmp	r6, #0
 800743c:	f000 80cf 	beq.w	80075de <forward_concat+0x3f6>
 8007440:	6873      	ldr	r3, [r6, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80cb 	beq.w	80075de <forward_concat+0x3f6>
 8007448:	8872      	ldrh	r2, [r6, #2]
 800744a:	2a00      	cmp	r2, #0
 800744c:	f000 80c7 	beq.w	80075de <forward_concat+0x3f6>
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	ee06 3a90 	vmov	s13, r3
 8007458:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800745c:	ee76 6a8a 	vadd.f32	s13, s13, s20
 8007460:	4544      	cmp	r4, r8
 8007462:	d227      	bcs.n	80074b4 <forward_concat+0x2cc>
 8007464:	f1bb 0f03 	cmp.w	fp, #3
 8007468:	eba5 0501 	sub.w	r5, r5, r1
 800746c:	dd22      	ble.n	80074b4 <forward_concat+0x2cc>
 800746e:	46be      	mov	lr, r7
 8007470:	46f4      	mov	ip, lr
 8007472:	4620      	mov	r0, r4
 8007474:	2200      	movs	r2, #0
 8007476:	f810 3b01 	ldrb.w	r3, [r0], #1
 800747a:	eef0 7a66 	vmov.f32	s15, s13
 800747e:	ee07 3a10 	vmov	s14, r3
 8007482:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007486:	eee7 7a29 	vfma.f32	s15, s14, s19
 800748a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800748e:	ee17 3a90 	vmov	r3, s15
 8007492:	f383 0308 	usat	r3, #8, r3
 8007496:	3201      	adds	r2, #1
 8007498:	f80c 3b01 	strb.w	r3, [ip], #1
 800749c:	4291      	cmp	r1, r2
 800749e:	dcea      	bgt.n	8007476 <forward_concat+0x28e>
 80074a0:	f1bb 0f03 	cmp.w	fp, #3
 80074a4:	bfcc      	ite	gt
 80074a6:	460b      	movgt	r3, r1
 80074a8:	2301      	movle	r3, #1
 80074aa:	441c      	add	r4, r3
 80074ac:	442b      	add	r3, r5
 80074ae:	45a0      	cmp	r8, r4
 80074b0:	449e      	add	lr, r3
 80074b2:	d8dd      	bhi.n	8007470 <forward_concat+0x288>
 80074b4:	440f      	add	r7, r1
 80074b6:	e7b0      	b.n	800741a <forward_concat+0x232>
 80074b8:	b142      	cbz	r2, 80074cc <forward_concat+0x2e4>
 80074ba:	6851      	ldr	r1, [r2, #4]
 80074bc:	2900      	cmp	r1, #0
 80074be:	f000 8111 	beq.w	80076e4 <forward_concat+0x4fc>
 80074c2:	8852      	ldrh	r2, [r2, #2]
 80074c4:	b112      	cbz	r2, 80074cc <forward_concat+0x2e4>
 80074c6:	684a      	ldr	r2, [r1, #4]
 80074c8:	f992 2000 	ldrsb.w	r2, [r2]
 80074cc:	2e00      	cmp	r6, #0
 80074ce:	f000 8103 	beq.w	80076d8 <forward_concat+0x4f0>
 80074d2:	6870      	ldr	r0, [r6, #4]
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f000 8101 	beq.w	80076dc <forward_concat+0x4f4>
 80074da:	8871      	ldrh	r1, [r6, #2]
 80074dc:	b111      	cbz	r1, 80074e4 <forward_concat+0x2fc>
 80074de:	6841      	ldr	r1, [r0, #4]
 80074e0:	f991 1000 	ldrsb.w	r1, [r1]
 80074e4:	428a      	cmp	r2, r1
 80074e6:	f040 80b3 	bne.w	8007650 <forward_concat+0x468>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80b0 	beq.w	8007650 <forward_concat+0x468>
 80074f0:	4544      	cmp	r4, r8
 80074f2:	d28f      	bcs.n	8007414 <forward_concat+0x22c>
 80074f4:	46ba      	mov	sl, r7
 80074f6:	4620      	mov	r0, r4
 80074f8:	445c      	add	r4, fp
 80074fa:	4651      	mov	r1, sl
 80074fc:	465a      	mov	r2, fp
 80074fe:	f001 fafd 	bl	8008afc <st_int8_copy>
 8007502:	45a0      	cmp	r8, r4
 8007504:	44aa      	add	sl, r5
 8007506:	d8f6      	bhi.n	80074f6 <forward_concat+0x30e>
 8007508:	eb07 0e0b 	add.w	lr, r7, fp
 800750c:	e784      	b.n	8007418 <forward_concat+0x230>
 800750e:	eef0 6a49 	vmov.f32	s13, s18
 8007512:	4610      	mov	r0, r2
 8007514:	2e00      	cmp	r6, #0
 8007516:	f47f af3a 	bne.w	800738e <forward_concat+0x1a6>
 800751a:	4631      	mov	r1, r6
 800751c:	e740      	b.n	80073a0 <forward_concat+0x1b8>
 800751e:	4544      	cmp	r4, r8
 8007520:	f4bf af78 	bcs.w	8007414 <forward_concat+0x22c>
 8007524:	46ba      	mov	sl, r7
 8007526:	4620      	mov	r0, r4
 8007528:	445c      	add	r4, fp
 800752a:	4651      	mov	r1, sl
 800752c:	465a      	mov	r2, fp
 800752e:	f001 fae5 	bl	8008afc <st_int8_copy>
 8007532:	45a0      	cmp	r8, r4
 8007534:	44aa      	add	sl, r5
 8007536:	d8f6      	bhi.n	8007526 <forward_concat+0x33e>
 8007538:	eb07 0e0b 	add.w	lr, r7, fp
 800753c:	e76c      	b.n	8007418 <forward_concat+0x230>
 800753e:	2e00      	cmp	r6, #0
 8007540:	f000 80d2 	beq.w	80076e8 <forward_concat+0x500>
 8007544:	6873      	ldr	r3, [r6, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 80d4 	beq.w	80076f4 <forward_concat+0x50c>
 800754c:	8872      	ldrh	r2, [r6, #2]
 800754e:	2a00      	cmp	r2, #0
 8007550:	f000 80cd 	beq.w	80076ee <forward_concat+0x506>
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f993 3000 	ldrsb.w	r3, [r3]
 800755a:	ee06 3a90 	vmov	s13, r3
 800755e:	4544      	cmp	r4, r8
 8007560:	d2a8      	bcs.n	80074b4 <forward_concat+0x2cc>
 8007562:	f1bb 0f03 	cmp.w	fp, #3
 8007566:	eba5 0501 	sub.w	r5, r5, r1
 800756a:	dda3      	ble.n	80074b4 <forward_concat+0x2cc>
 800756c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007570:	46be      	mov	lr, r7
 8007572:	46f4      	mov	ip, lr
 8007574:	4620      	mov	r0, r4
 8007576:	2200      	movs	r2, #0
 8007578:	f810 3b01 	ldrb.w	r3, [r0], #1
 800757c:	eef0 7a66 	vmov.f32	s15, s13
 8007580:	ee07 3a10 	vmov	s14, r3
 8007584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007588:	eee7 7a29 	vfma.f32	s15, s14, s19
 800758c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007594:	bf4c      	ite	mi
 8007596:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 800759a:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 800759e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075a2:	ee17 3a90 	vmov	r3, s15
 80075a6:	f303 0307 	ssat	r3, #8, r3
 80075aa:	3201      	adds	r2, #1
 80075ac:	f80c 3b01 	strb.w	r3, [ip], #1
 80075b0:	4291      	cmp	r1, r2
 80075b2:	dce1      	bgt.n	8007578 <forward_concat+0x390>
 80075b4:	f1bb 0f03 	cmp.w	fp, #3
 80075b8:	bfcc      	ite	gt
 80075ba:	460b      	movgt	r3, r1
 80075bc:	2301      	movle	r3, #1
 80075be:	441c      	add	r4, r3
 80075c0:	442b      	add	r3, r5
 80075c2:	45a0      	cmp	r8, r4
 80075c4:	449e      	add	lr, r3
 80075c6:	d8d4      	bhi.n	8007572 <forward_concat+0x38a>
 80075c8:	440f      	add	r7, r1
 80075ca:	e726      	b.n	800741a <forward_concat+0x232>
 80075cc:	eef0 6a49 	vmov.f32	s13, s18
 80075d0:	e6da      	b.n	8007388 <forward_concat+0x1a0>
 80075d2:	eef0 6a49 	vmov.f32	s13, s18
 80075d6:	4608      	mov	r0, r1
 80075d8:	e6d6      	b.n	8007388 <forward_concat+0x1a0>
 80075da:	4619      	mov	r1, r3
 80075dc:	e6e0      	b.n	80073a0 <forward_concat+0x1b8>
 80075de:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80075e2:	e73d      	b.n	8007460 <forward_concat+0x278>
 80075e4:	3efffffc 	.word	0x3efffffc
	...
 80075f0:	4544      	cmp	r4, r8
 80075f2:	ee69 6aa6 	vmul.f32	s13, s19, s13
 80075f6:	f4bf af0d 	bcs.w	8007414 <forward_concat+0x22c>
 80075fa:	f1bb 0f00 	cmp.w	fp, #0
 80075fe:	f77f af09 	ble.w	8007414 <forward_concat+0x22c>
 8007602:	ee07 2a90 	vmov	s15, r2
 8007606:	eb07 0e0b 	add.w	lr, r7, fp
 800760a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800760e:	4670      	mov	r0, lr
 8007610:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8007614:	463a      	mov	r2, r7
 8007616:	4621      	mov	r1, r4
 8007618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800761c:	eeb0 7a46 	vmov.f32	s14, s12
 8007620:	eba3 030c 	sub.w	r3, r3, ip
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800762c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007630:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8007634:	ee17 3a90 	vmov	r3, s15
 8007638:	f383 0308 	usat	r3, #8, r3
 800763c:	f802 3b01 	strb.w	r3, [r2], #1
 8007640:	4282      	cmp	r2, r0
 8007642:	d1e9      	bne.n	8007618 <forward_concat+0x430>
 8007644:	445c      	add	r4, fp
 8007646:	442f      	add	r7, r5
 8007648:	4428      	add	r0, r5
 800764a:	4544      	cmp	r4, r8
 800764c:	d3e2      	bcc.n	8007614 <forward_concat+0x42c>
 800764e:	e6e3      	b.n	8007418 <forward_concat+0x230>
 8007650:	4544      	cmp	r4, r8
 8007652:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8007656:	f4bf aedd 	bcs.w	8007414 <forward_concat+0x22c>
 800765a:	f1bb 0f00 	cmp.w	fp, #0
 800765e:	f77f aed9 	ble.w	8007414 <forward_concat+0x22c>
 8007662:	ee07 1a90 	vmov	s15, r1
 8007666:	eb04 000b 	add.w	r0, r4, fp
 800766a:	46bc      	mov	ip, r7
 800766c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007670:	4601      	mov	r1, r0
 8007672:	46e6      	mov	lr, ip
 8007674:	f914 3b01 	ldrsb.w	r3, [r4], #1
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007682:	eef0 7a46 	vmov.f32	s15, s12
 8007686:	eee7 7a26 	vfma.f32	s15, s14, s13
 800768a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007692:	bf4c      	ite	mi
 8007694:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 8007698:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 800769c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a0:	ee17 3a90 	vmov	r3, s15
 80076a4:	f303 0307 	ssat	r3, #8, r3
 80076a8:	428c      	cmp	r4, r1
 80076aa:	f80e 3b01 	strb.w	r3, [lr], #1
 80076ae:	d1e1      	bne.n	8007674 <forward_concat+0x48c>
 80076b0:	4540      	cmp	r0, r8
 80076b2:	44ac      	add	ip, r5
 80076b4:	4459      	add	r1, fp
 80076b6:	4604      	mov	r4, r0
 80076b8:	f4bf aeac 	bcs.w	8007414 <forward_concat+0x22c>
 80076bc:	4458      	add	r0, fp
 80076be:	e7d8      	b.n	8007672 <forward_concat+0x48a>
 80076c0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80076c4:	2e00      	cmp	r6, #0
 80076c6:	f47f ae8b 	bne.w	80073e0 <forward_concat+0x1f8>
 80076ca:	4632      	mov	r2, r6
 80076cc:	e690      	b.n	80073f0 <forward_concat+0x208>
 80076ce:	ed5f 8a39 	vldr	s17, [pc, #-228]	@ 80075ec <forward_concat+0x404>
 80076d2:	e60d      	b.n	80072f0 <forward_concat+0x108>
 80076d4:	468c      	mov	ip, r1
 80076d6:	e680      	b.n	80073da <forward_concat+0x1f2>
 80076d8:	4631      	mov	r1, r6
 80076da:	e703      	b.n	80074e4 <forward_concat+0x2fc>
 80076dc:	4601      	mov	r1, r0
 80076de:	e701      	b.n	80074e4 <forward_concat+0x2fc>
 80076e0:	460a      	mov	r2, r1
 80076e2:	e685      	b.n	80073f0 <forward_concat+0x208>
 80076e4:	460a      	mov	r2, r1
 80076e6:	e6f1      	b.n	80074cc <forward_concat+0x2e4>
 80076e8:	ee06 6a90 	vmov	s13, r6
 80076ec:	e737      	b.n	800755e <forward_concat+0x376>
 80076ee:	ee06 2a90 	vmov	s13, r2
 80076f2:	e734      	b.n	800755e <forward_concat+0x376>
 80076f4:	ee06 3a90 	vmov	s13, r3
 80076f8:	e731      	b.n	800755e <forward_concat+0x376>
 80076fa:	2300      	movs	r3, #0
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	deff      	udf	#255	@ 0xff

08007700 <forward_eltwise>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	6982      	ldr	r2, [r0, #24]
 8007706:	b09d      	sub	sp, #116	@ 0x74
 8007708:	8811      	ldrh	r1, [r2, #0]
 800770a:	9003      	str	r0, [sp, #12]
 800770c:	2900      	cmp	r1, #0
 800770e:	f000 80c7 	beq.w	80078a0 <forward_eltwise+0x1a0>
 8007712:	6853      	ldr	r3, [r2, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8116 	beq.w	8007946 <forward_eltwise+0x246>
 800771a:	8818      	ldrh	r0, [r3, #0]
 800771c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007720:	f1b8 0f00 	cmp.w	r8, #0
 8007724:	d001      	beq.n	800772a <forward_eltwise+0x2a>
 8007726:	f8d8 8000 	ldr.w	r8, [r8]
 800772a:	2901      	cmp	r1, #1
 800772c:	f000 810f 	beq.w	800794e <forward_eltwise+0x24e>
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	b10b      	cbz	r3, 800773a <forward_eltwise+0x3a>
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	2300      	movs	r3, #0
 800773c:	2801      	cmp	r0, #1
 800773e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007740:	9312      	str	r3, [sp, #72]	@ 0x48
 8007742:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007744:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8007748:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 800774c:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
 8007750:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
 8007754:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8007758:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
 800775c:	ab0d      	add	r3, sp, #52	@ 0x34
 800775e:	9308      	str	r3, [sp, #32]
 8007760:	ab12      	add	r3, sp, #72	@ 0x48
 8007762:	930a      	str	r3, [sp, #40]	@ 0x28
 8007764:	ab17      	add	r3, sp, #92	@ 0x5c
 8007766:	930c      	str	r3, [sp, #48]	@ 0x30
 8007768:	f240 5302 	movw	r3, #1282	@ 0x502
 800776c:	9307      	str	r3, [sp, #28]
 800776e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007770:	f240 5301 	movw	r3, #1281	@ 0x501
 8007774:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	f240 80d8 	bls.w	8007932 <forward_eltwise+0x232>
 8007782:	0083      	lsls	r3, r0, #2
 8007784:	9305      	str	r3, [sp, #20]
 8007786:	2304      	movs	r3, #4
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	8813      	ldrh	r3, [r2, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80e1 	beq.w	8007954 <forward_eltwise+0x254>
 8007792:	6853      	ldr	r3, [r2, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 80d7 	beq.w	800794a <forward_eltwise+0x24a>
 800779c:	9a01      	ldr	r2, [sp, #4]
 800779e:	f108 0108 	add.w	r1, r8, #8
 80077a2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80077a6:	f853 a002 	ldr.w	sl, [r3, r2]
 80077aa:	f8da 3008 	ldr.w	r3, [sl, #8]
 80077ae:	f10a 0908 	add.w	r9, sl, #8
 80077b2:	4043      	eors	r3, r0
 80077b4:	f033 03ff 	bics.w	r3, r3, #255	@ 0xff
 80077b8:	d10f      	bne.n	80077da <forward_eltwise+0xda>
 80077ba:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80077be:	2800      	cmp	r0, #0
 80077c0:	f000 8097 	beq.w	80078f2 <forward_eltwise+0x1f2>
 80077c4:	3801      	subs	r0, #1
 80077c6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80077ca:	f8da 300c 	ldr.w	r3, [sl, #12]
 80077ce:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80077d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d0f1      	beq.n	80077be <forward_eltwise+0xbe>
 80077da:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80077de:	464a      	mov	r2, r9
 80077e0:	a80b      	add	r0, sp, #44	@ 0x2c
 80077e2:	9102      	str	r1, [sp, #8]
 80077e4:	689d      	ldr	r5, [r3, #8]
 80077e6:	f8da 3018 	ldr.w	r3, [sl, #24]
 80077ea:	689c      	ldr	r4, [r3, #8]
 80077ec:	9b00      	ldr	r3, [sp, #0]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	689e      	ldr	r6, [r3, #8]
 80077f2:	f001 fb13 	bl	8008e1c <core_get_broadcasted_shape>
 80077f6:	f8da 2014 	ldr.w	r2, [sl, #20]
 80077fa:	a807      	add	r0, sp, #28
 80077fc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007800:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8007804:	9a00      	ldr	r2, [sp, #0]
 8007806:	9902      	ldr	r1, [sp, #8]
 8007808:	6952      	ldr	r2, [r2, #20]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8007810:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007812:	f001 fb2b 	bl	8008e6c <core_compute_offsets>
 8007816:	4653      	mov	r3, sl
 8007818:	aa0b      	add	r2, sp, #44	@ 0x2c
 800781a:	4649      	mov	r1, r9
 800781c:	a809      	add	r0, sp, #36	@ 0x24
 800781e:	f001 fb25 	bl	8008e6c <core_compute_offsets>
 8007822:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007824:	68d3      	ldr	r3, [r2, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d058      	beq.n	80078dc <forward_eltwise+0x1dc>
 800782a:	2300      	movs	r3, #0
 800782c:	6891      	ldr	r1, [r2, #8]
 800782e:	9302      	str	r3, [sp, #8]
 8007830:	2900      	cmp	r1, #0
 8007832:	d053      	beq.n	80078dc <forward_eltwise+0x1dc>
 8007834:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007836:	f04f 0b00 	mov.w	fp, #0
 800783a:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800783e:	f04f 0a00 	mov.w	sl, #0
 8007842:	2804      	cmp	r0, #4
 8007844:	bf8c      	ite	hi
 8007846:	6913      	ldrhi	r3, [r2, #16]
 8007848:	2301      	movls	r3, #1
 800784a:	459a      	cmp	sl, r3
 800784c:	d22a      	bcs.n	80078a4 <forward_eltwise+0x1a4>
 800784e:	6851      	ldr	r1, [r2, #4]
 8007850:	b1a9      	cbz	r1, 800787e <forward_eltwise+0x17e>
 8007852:	f04f 0900 	mov.w	r9, #0
 8007856:	4622      	mov	r2, r4
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f109 0901 	add.w	r9, r9, #1
 8007860:	47b8      	blx	r7
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007866:	4446      	add	r6, r8
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	441d      	add	r5, r3
 800786c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	441c      	add	r4, r3
 8007872:	6853      	ldr	r3, [r2, #4]
 8007874:	454b      	cmp	r3, r9
 8007876:	d8ee      	bhi.n	8007856 <forward_eltwise+0x156>
 8007878:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800787a:	f3c3 2017 	ubfx	r0, r3, #8, #24
 800787e:	9907      	ldr	r1, [sp, #28]
 8007880:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8007884:	d302      	bcc.n	800788c <forward_eltwise+0x18c>
 8007886:	9908      	ldr	r1, [sp, #32]
 8007888:	690b      	ldr	r3, [r1, #16]
 800788a:	441d      	add	r5, r3
 800788c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800788e:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8007892:	d302      	bcc.n	800789a <forward_eltwise+0x19a>
 8007894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007896:	690b      	ldr	r3, [r1, #16]
 8007898:	441c      	add	r4, r3
 800789a:	f10a 0a01 	add.w	sl, sl, #1
 800789e:	e7d0      	b.n	8007842 <forward_eltwise+0x142>
 80078a0:	684b      	ldr	r3, [r1, #4]
 80078a2:	deff      	udf	#255	@ 0xff
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	f10b 0b01 	add.w	fp, fp, #1
 80078aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80078ae:	6899      	ldr	r1, [r3, #8]
 80078b0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80078b4:	440d      	add	r5, r1
 80078b6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80078ba:	45dc      	cmp	ip, fp
 80078bc:	440c      	add	r4, r1
 80078be:	d8be      	bhi.n	800783e <forward_eltwise+0x13e>
 80078c0:	68d8      	ldr	r0, [r3, #12]
 80078c2:	469e      	mov	lr, r3
 80078c4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80078c8:	4661      	mov	r1, ip
 80078ca:	4405      	add	r5, r0
 80078cc:	441c      	add	r4, r3
 80078ce:	9b02      	ldr	r3, [sp, #8]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4618      	mov	r0, r3
 80078d4:	9302      	str	r3, [sp, #8]
 80078d6:	68d3      	ldr	r3, [r2, #12]
 80078d8:	4283      	cmp	r3, r0
 80078da:	d8a9      	bhi.n	8007830 <forward_eltwise+0x130>
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	9a05      	ldr	r2, [sp, #20]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4293      	cmp	r3, r2
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	d024      	beq.n	8007932 <forward_eltwise+0x232>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	f8dd 8000 	ldr.w	r8, [sp]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	e74b      	b.n	800778a <forward_eltwise+0x8a>
 80078f2:	9b00      	ldr	r3, [sp, #0]
 80078f4:	464a      	mov	r2, r9
 80078f6:	f8da 0018 	ldr.w	r0, [sl, #24]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8007900:	6885      	ldr	r5, [r0, #8]
 8007902:	a80b      	add	r0, sp, #44	@ 0x2c
 8007904:	689e      	ldr	r6, [r3, #8]
 8007906:	68a4      	ldr	r4, [r4, #8]
 8007908:	f001 fa88 	bl	8008e1c <core_get_broadcasted_shape>
 800790c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	d012      	beq.n	8007938 <forward_eltwise+0x238>
 8007912:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007914:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8007918:	2301      	movs	r3, #1
 800791a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800791e:	4290      	cmp	r0, r2
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	d1f9      	bne.n	800791a <forward_eltwise+0x21a>
 8007926:	4621      	mov	r1, r4
 8007928:	462a      	mov	r2, r5
 800792a:	4630      	mov	r0, r6
 800792c:	9c04      	ldr	r4, [sp, #16]
 800792e:	47a0      	blx	r4
 8007930:	e7d4      	b.n	80078dc <forward_eltwise+0x1dc>
 8007932:	b01d      	add	sp, #116	@ 0x74
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007938:	4621      	mov	r1, r4
 800793a:	2301      	movs	r3, #1
 800793c:	462a      	mov	r2, r5
 800793e:	4630      	mov	r0, r6
 8007940:	9c04      	ldr	r4, [sp, #16]
 8007942:	47a0      	blx	r4
 8007944:	e7ca      	b.n	80078dc <forward_eltwise+0x1dc>
 8007946:	4618      	mov	r0, r3
 8007948:	e6e8      	b.n	800771c <forward_eltwise+0x1c>
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	deff      	udf	#255	@ 0xff
 800794e:	2300      	movs	r3, #0
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	deff      	udf	#255	@ 0xff
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	deff      	udf	#255	@ 0xff

08007958 <forward_reduce>:
 8007958:	6982      	ldr	r2, [r0, #24]
 800795a:	8813      	ldrh	r3, [r2, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8086 	beq.w	8007a6e <forward_reduce+0x116>
 8007962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007966:	6852      	ldr	r2, [r2, #4]
 8007968:	b08b      	sub	sp, #44	@ 0x2c
 800796a:	6856      	ldr	r6, [r2, #4]
 800796c:	b106      	cbz	r6, 8007970 <forward_reduce+0x18>
 800796e:	6836      	ldr	r6, [r6, #0]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d07e      	beq.n	8007a72 <forward_reduce+0x11a>
 8007974:	6913      	ldr	r3, [r2, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d07e      	beq.n	8007a78 <forward_reduce+0x120>
 800797a:	681d      	ldr	r5, [r3, #0]
 800797c:	6972      	ldr	r2, [r6, #20]
 800797e:	f105 0108 	add.w	r1, r5, #8
 8007982:	6857      	ldr	r7, [r2, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	e9d0 3807 	ldrd	r3, r8, [r0, #28]
 800798a:	a803      	add	r0, sp, #12
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	696b      	ldr	r3, [r5, #20]
 8007990:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007994:	ab05      	add	r3, sp, #20
 8007996:	9209      	str	r2, [sp, #36]	@ 0x24
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	f240 5302 	movw	r3, #1282	@ 0x502
 800799e:	e9cd 2205 	strd	r2, r2, [sp, #20]
 80079a2:	e9cd 2207 	strd	r2, r2, [sp, #28]
 80079a6:	9303      	str	r3, [sp, #12]
 80079a8:	f106 0208 	add.w	r2, r6, #8
 80079ac:	463b      	mov	r3, r7
 80079ae:	f001 fa5d 	bl	8008e6c <core_compute_offsets>
 80079b2:	69aa      	ldr	r2, [r5, #24]
 80079b4:	69b3      	ldr	r3, [r6, #24]
 80079b6:	e9d2 2401 	ldrd	r2, r4, [r2, #4]
 80079ba:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80079be:	fb02 4209 	mla	r2, r2, r9, r4
 80079c2:	4294      	cmp	r4, r2
 80079c4:	d20d      	bcs.n	80079e2 <forward_reduce+0x8a>
 80079c6:	46a2      	mov	sl, r4
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	4651      	mov	r1, sl
 80079cc:	464a      	mov	r2, r9
 80079ce:	44ca      	add	sl, r9
 80079d0:	6898      	ldr	r0, [r3, #8]
 80079d2:	f001 f893 	bl	8008afc <st_int8_copy>
 80079d6:	69aa      	ldr	r2, [r5, #24]
 80079d8:	6852      	ldr	r2, [r2, #4]
 80079da:	fb02 4209 	mla	r2, r2, r9, r4
 80079de:	4592      	cmp	sl, r2
 80079e0:	d3f2      	bcc.n	80079c8 <forward_reduce+0x70>
 80079e2:	68f2      	ldr	r2, [r6, #12]
 80079e4:	68d1      	ldr	r1, [r2, #12]
 80079e6:	2900      	cmp	r1, #0
 80079e8:	d03e      	beq.n	8007a68 <forward_reduce+0x110>
 80079ea:	2300      	movs	r3, #0
 80079ec:	6895      	ldr	r5, [r2, #8]
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	d039      	beq.n	8007a68 <forward_reduce+0x110>
 80079f4:	68b1      	ldr	r1, [r6, #8]
 80079f6:	f04f 0a00 	mov.w	sl, #0
 80079fa:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80079fe:	f04f 0900 	mov.w	r9, #0
 8007a02:	2904      	cmp	r1, #4
 8007a04:	bf8c      	ite	hi
 8007a06:	6910      	ldrhi	r0, [r2, #16]
 8007a08:	2001      	movls	r0, #1
 8007a0a:	4581      	cmp	r9, r0
 8007a0c:	d21c      	bcs.n	8007a48 <forward_reduce+0xf0>
 8007a0e:	6850      	ldr	r0, [r2, #4]
 8007a10:	b180      	cbz	r0, 8007a34 <forward_reduce+0xdc>
 8007a12:	2500      	movs	r5, #0
 8007a14:	465a      	mov	r2, fp
 8007a16:	4621      	mov	r1, r4
 8007a18:	4620      	mov	r0, r4
 8007a1a:	3501      	adds	r5, #1
 8007a1c:	47c0      	blx	r8
 8007a1e:	9904      	ldr	r1, [sp, #16]
 8007a20:	68f2      	ldr	r2, [r6, #12]
 8007a22:	44bb      	add	fp, r7
 8007a24:	6848      	ldr	r0, [r1, #4]
 8007a26:	6851      	ldr	r1, [r2, #4]
 8007a28:	4404      	add	r4, r0
 8007a2a:	42a9      	cmp	r1, r5
 8007a2c:	d8f2      	bhi.n	8007a14 <forward_reduce+0xbc>
 8007a2e:	68b1      	ldr	r1, [r6, #8]
 8007a30:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8007a34:	9803      	ldr	r0, [sp, #12]
 8007a36:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 8007a3a:	d302      	bcc.n	8007a42 <forward_reduce+0xea>
 8007a3c:	9804      	ldr	r0, [sp, #16]
 8007a3e:	6900      	ldr	r0, [r0, #16]
 8007a40:	4404      	add	r4, r0
 8007a42:	f109 0901 	add.w	r9, r9, #1
 8007a46:	e7dc      	b.n	8007a02 <forward_reduce+0xaa>
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	f10a 0a01 	add.w	sl, sl, #1
 8007a4e:	6895      	ldr	r5, [r2, #8]
 8007a50:	6898      	ldr	r0, [r3, #8]
 8007a52:	4555      	cmp	r5, sl
 8007a54:	4404      	add	r4, r0
 8007a56:	d8d2      	bhi.n	80079fe <forward_reduce+0xa6>
 8007a58:	68d8      	ldr	r0, [r3, #12]
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	68d1      	ldr	r1, [r2, #12]
 8007a5e:	4404      	add	r4, r0
 8007a60:	3301      	adds	r3, #1
 8007a62:	428b      	cmp	r3, r1
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	d3c3      	bcc.n	80079f0 <forward_reduce+0x98>
 8007a68:	b00b      	add	sp, #44	@ 0x2c
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	deff      	udf	#255	@ 0xff
 8007a72:	2300      	movs	r3, #0
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	deff      	udf	#255	@ 0xff
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	deff      	udf	#255	@ 0xff

08007a7c <forward_sigmoid>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	ed2d 8b02 	vpush	{d8}
 8007a82:	6982      	ldr	r2, [r0, #24]
 8007a84:	8813      	ldrh	r3, [r2, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d03b      	beq.n	8007b02 <forward_sigmoid+0x86>
 8007a8a:	6852      	ldr	r2, [r2, #4]
 8007a8c:	6854      	ldr	r4, [r2, #4]
 8007a8e:	b104      	cbz	r4, 8007a92 <forward_sigmoid+0x16>
 8007a90:	6824      	ldr	r4, [r4, #0]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d034      	beq.n	8007b00 <forward_sigmoid+0x84>
 8007a96:	6915      	ldr	r5, [r2, #16]
 8007a98:	b105      	cbz	r5, 8007a9c <forward_sigmoid+0x20>
 8007a9a:	682d      	ldr	r5, [r5, #0]
 8007a9c:	68a3      	ldr	r3, [r4, #8]
 8007a9e:	0a1b      	lsrs	r3, r3, #8
 8007aa0:	d031      	beq.n	8007b06 <forward_sigmoid+0x8a>
 8007aa2:	68e0      	ldr	r0, [r4, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007aaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007aae:	4298      	cmp	r0, r3
 8007ab0:	fb01 f202 	mul.w	r2, r1, r2
 8007ab4:	d1f9      	bne.n	8007aaa <forward_sigmoid+0x2e>
 8007ab6:	69a7      	ldr	r7, [r4, #24]
 8007ab8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007abc:	69a9      	ldr	r1, [r5, #24]
 8007abe:	4413      	add	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	688e      	ldr	r6, [r1, #8]
 8007ac4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007ac8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007acc:	42aa      	cmp	r2, r5
 8007ace:	d814      	bhi.n	8007afa <forward_sigmoid+0x7e>
 8007ad0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8007ad4:	3504      	adds	r5, #4
 8007ad6:	3604      	adds	r6, #4
 8007ad8:	462c      	mov	r4, r5
 8007ada:	ed35 0a01 	vldmdb	r5!, {s0}
 8007ade:	eeb1 0a40 	vneg.f32	s0, s0
 8007ae2:	3c08      	subs	r4, #8
 8007ae4:	f003 feb0 	bl	800b848 <expf>
 8007ae8:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007aec:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007af0:	ed66 7a01 	vstmdb	r6!, {s15}
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	d9ee      	bls.n	8007ad8 <forward_sigmoid+0x5c>
 8007afa:	ecbd 8b02 	vpop	{d8}
 8007afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b00:	2300      	movs	r3, #0
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	deff      	udf	#255	@ 0xff
 8007b06:	69ab      	ldr	r3, [r5, #24]
 8007b08:	69a7      	ldr	r7, [r4, #24]
 8007b0a:	689e      	ldr	r6, [r3, #8]
 8007b0c:	68bd      	ldr	r5, [r7, #8]
 8007b0e:	e7df      	b.n	8007ad0 <forward_sigmoid+0x54>

08007b10 <forward_sm>:
 8007b10:	6982      	ldr	r2, [r0, #24]
 8007b12:	8813      	ldrh	r3, [r2, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d078      	beq.n	8007c0a <forward_sm+0xfa>
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	ed2d 8b04 	vpush	{d8-d9}
 8007b20:	6852      	ldr	r2, [r2, #4]
 8007b22:	b085      	sub	sp, #20
 8007b24:	6854      	ldr	r4, [r2, #4]
 8007b26:	b104      	cbz	r4, 8007b2a <forward_sm+0x1a>
 8007b28:	6824      	ldr	r4, [r4, #0]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d072      	beq.n	8007c14 <forward_sm+0x104>
 8007b2e:	6913      	ldr	r3, [r2, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d072      	beq.n	8007c1a <forward_sm+0x10a>
 8007b34:	681e      	ldr	r6, [r3, #0]
 8007b36:	68a3      	ldr	r3, [r4, #8]
 8007b38:	68e0      	ldr	r0, [r4, #12]
 8007b3a:	68f2      	ldr	r2, [r6, #12]
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	6845      	ldr	r5, [r0, #4]
 8007b40:	6857      	ldr	r7, [r2, #4]
 8007b42:	d064      	beq.n	8007c0e <forward_sm+0xfe>
 8007b44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b4e:	4298      	cmp	r0, r3
 8007b50:	fb01 f202 	mul.w	r2, r1, r2
 8007b54:	d1f9      	bne.n	8007b4a <forward_sm+0x3a>
 8007b56:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8007b5a:	69a2      	ldr	r2, [r4, #24]
 8007b5c:	69b3      	ldr	r3, [r6, #24]
 8007b5e:	6892      	ldr	r2, [r2, #8]
 8007b60:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8007b64:	eb02 0309 	add.w	r3, r2, r9
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	d248      	bcs.n	8007c00 <forward_sm+0xf0>
 8007b6e:	00bb      	lsls	r3, r7, #2
 8007b70:	2d01      	cmp	r5, #1
 8007b72:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8007b76:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8007b7a:	9303      	str	r3, [sp, #12]
 8007b7c:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8007b80:	463e      	mov	r6, r7
 8007b82:	ed92 8a00 	vldr	s16, [r2]
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	d937      	bls.n	8007bfa <forward_sm+0xea>
 8007b8a:	1d13      	adds	r3, r2, #4
 8007b8c:	ecf3 7a01 	vldmia	r3!, {s15}
 8007b90:	429e      	cmp	r6, r3
 8007b92:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8007b96:	d1f9      	bne.n	8007b8c <forward_sm+0x7c>
 8007b98:	4692      	mov	sl, r2
 8007b9a:	46c3      	mov	fp, r8
 8007b9c:	46c1      	mov	r9, r8
 8007b9e:	eddf 8a20 	vldr	s17, [pc, #128]	@ 8007c20 <forward_sm+0x110>
 8007ba2:	2400      	movs	r4, #0
 8007ba4:	ecba 0a01 	vldmia	sl!, {s0}
 8007ba8:	3401      	adds	r4, #1
 8007baa:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007bae:	f003 fe4b 	bl	800b848 <expf>
 8007bb2:	42a5      	cmp	r5, r4
 8007bb4:	ee78 8a80 	vadd.f32	s17, s17, s0
 8007bb8:	eca9 0a01 	vstmia	r9!, {s0}
 8007bbc:	d8f2      	bhi.n	8007ba4 <forward_sm+0x94>
 8007bbe:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc6:	d00b      	beq.n	8007be0 <forward_sm+0xd0>
 8007bc8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8007bcc:	2300      	movs	r3, #0
 8007bce:	eddb 7a00 	vldr	s15, [fp]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	429d      	cmp	r5, r3
 8007bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bda:	eceb 7a01 	vstmia	fp!, {s15}
 8007bde:	d8f6      	bhi.n	8007bce <forward_sm+0xbe>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	463a      	mov	r2, r7
 8007be4:	9901      	ldr	r1, [sp, #4]
 8007be6:	4498      	add	r8, r3
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	42b9      	cmp	r1, r7
 8007bec:	441e      	add	r6, r3
 8007bee:	d907      	bls.n	8007c00 <forward_sm+0xf0>
 8007bf0:	2d01      	cmp	r5, #1
 8007bf2:	441f      	add	r7, r3
 8007bf4:	ed92 8a00 	vldr	s16, [r2]
 8007bf8:	d8c7      	bhi.n	8007b8a <forward_sm+0x7a>
 8007bfa:	2d00      	cmp	r5, #0
 8007bfc:	d0f0      	beq.n	8007be0 <forward_sm+0xd0>
 8007bfe:	e7cb      	b.n	8007b98 <forward_sm+0x88>
 8007c00:	b005      	add	sp, #20
 8007c02:	ecbd 8b04 	vpop	{d8-d9}
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	deff      	udf	#255	@ 0xff
 8007c0e:	f04f 0904 	mov.w	r9, #4
 8007c12:	e7a2      	b.n	8007b5a <forward_sm+0x4a>
 8007c14:	2300      	movs	r3, #0
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	deff      	udf	#255	@ 0xff
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	deff      	udf	#255	@ 0xff
 8007c1e:	bf00      	nop
 8007c20:	00000000 	.word	0x00000000

08007c24 <forward_mp>:
 8007c24:	6983      	ldr	r3, [r0, #24]
 8007c26:	881a      	ldrh	r2, [r3, #0]
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	f000 80bc 	beq.w	8007da6 <forward_mp+0x182>
 8007c2e:	6859      	ldr	r1, [r3, #4]
 8007c30:	684b      	ldr	r3, [r1, #4]
 8007c32:	b103      	cbz	r3, 8007c36 <forward_mp+0x12>
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2a01      	cmp	r2, #1
 8007c38:	f000 80ba 	beq.w	8007db0 <forward_mp+0x18c>
 8007c3c:	690a      	ldr	r2, [r1, #16]
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	f000 80b9 	beq.w	8007db6 <forward_mp+0x192>
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	6811      	ldr	r1, [r2, #0]
 8007c4a:	b093      	sub	sp, #76	@ 0x4c
 8007c4c:	68ca      	ldr	r2, [r1, #12]
 8007c4e:	6989      	ldr	r1, [r1, #24]
 8007c50:	68d4      	ldr	r4, [r2, #12]
 8007c52:	6895      	ldr	r5, [r2, #8]
 8007c54:	688a      	ldr	r2, [r1, #8]
 8007c56:	68d9      	ldr	r1, [r3, #12]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	9200      	str	r2, [sp, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8007c60:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007c64:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c66:	9408      	str	r4, [sp, #32]
 8007c68:	9504      	str	r5, [sp, #16]
 8007c6a:	e9d2 3600 	ldrd	r3, r6, [r2]
 8007c6e:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 8007c72:	69c1      	ldr	r1, [r0, #28]
 8007c74:	f1c3 0a00 	rsb	sl, r3, #0
 8007c78:	960d      	str	r6, [sp, #52]	@ 0x34
 8007c7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c7c:	6a01      	ldr	r1, [r0, #32]
 8007c7e:	9705      	str	r7, [sp, #20]
 8007c80:	910a      	str	r1, [sp, #40]	@ 0x28
 8007c82:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8007c84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c86:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007c88:	910c      	str	r1, [sp, #48]	@ 0x30
 8007c8a:	2c00      	cmp	r4, #0
 8007c8c:	f000 8088 	beq.w	8007da0 <forward_mp+0x17c>
 8007c90:	441a      	add	r2, r3
 8007c92:	9b05      	ldr	r3, [sp, #20]
 8007c94:	ea4f 0789 	mov.w	r7, r9, lsl #2
 8007c98:	f04f 0b00 	mov.w	fp, #0
 8007c9c:	fb09 f303 	mul.w	r3, r9, r3
 8007ca0:	9201      	str	r2, [sp, #4]
 8007ca2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8007ca6:	4273      	negs	r3, r6
 8007ca8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007caa:	fb05 f307 	mul.w	r3, r5, r7
 8007cae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cb2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007cb6:	9901      	ldr	r1, [sp, #4]
 8007cb8:	9307      	str	r3, [sp, #28]
 8007cba:	428a      	cmp	r2, r1
 8007cbc:	bf94      	ite	ls
 8007cbe:	eb0a 0e02 	addls.w	lr, sl, r2
 8007cc2:	eb0a 0e01 	addhi.w	lr, sl, r1
 8007cc6:	9a04      	ldr	r2, [sp, #16]
 8007cc8:	2a00      	cmp	r2, #0
 8007cca:	d05f      	beq.n	8007d8c <forward_mp+0x168>
 8007ccc:	9a05      	ldr	r2, [sp, #20]
 8007cce:	9d00      	ldr	r5, [sp, #0]
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cdc:	18d3      	adds	r3, r2, r3
 8007cde:	2200      	movs	r2, #0
 8007ce0:	9302      	str	r3, [sp, #8]
 8007ce2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ce4:	9206      	str	r2, [sp, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	469b      	mov	fp, r3
 8007cea:	db5e      	blt.n	8007daa <forward_mp+0x186>
 8007cec:	9a03      	ldr	r2, [sp, #12]
 8007cee:	18d6      	adds	r6, r2, r3
 8007cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cf2:	9902      	ldr	r1, [sp, #8]
 8007cf4:	fb06 2607 	mla	r6, r6, r7, r2
 8007cf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cfa:	428a      	cmp	r2, r1
 8007cfc:	bf94      	ite	ls
 8007cfe:	eb0b 0402 	addls.w	r4, fp, r2
 8007d02:	eb0b 0401 	addhi.w	r4, fp, r1
 8007d06:	1ae4      	subs	r4, r4, r3
 8007d08:	f1b9 0f00 	cmp.w	r9, #0
 8007d0c:	d008      	beq.n	8007d20 <forward_mp+0xfc>
 8007d0e:	4633      	mov	r3, r6
 8007d10:	462a      	mov	r2, r5
 8007d12:	19b9      	adds	r1, r7, r6
 8007d14:	f853 0b04 	ldr.w	r0, [r3], #4
 8007d18:	4299      	cmp	r1, r3
 8007d1a:	f842 0b04 	str.w	r0, [r2], #4
 8007d1e:	d1f9      	bne.n	8007d14 <forward_mp+0xf0>
 8007d20:	9b07      	ldr	r3, [sp, #28]
 8007d22:	459e      	cmp	lr, r3
 8007d24:	dd1f      	ble.n	8007d66 <forward_mp+0x142>
 8007d26:	469c      	mov	ip, r3
 8007d28:	fb07 6404 	mla	r4, r7, r4, r6
 8007d2c:	42a6      	cmp	r6, r4
 8007d2e:	d214      	bcs.n	8007d5a <forward_mp+0x136>
 8007d30:	f1b9 0f00 	cmp.w	r9, #0
 8007d34:	d011      	beq.n	8007d5a <forward_mp+0x136>
 8007d36:	19f1      	adds	r1, r6, r7
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	ecf2 7a01 	vldmia	r2!, {s15}
 8007d42:	ed93 7a00 	vldr	s14, [r3]
 8007d46:	428a      	cmp	r2, r1
 8007d48:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007d4c:	ece3 7a01 	vstmia	r3!, {s15}
 8007d50:	d1f5      	bne.n	8007d3e <forward_mp+0x11a>
 8007d52:	4438      	add	r0, r7
 8007d54:	4439      	add	r1, r7
 8007d56:	42a0      	cmp	r0, r4
 8007d58:	d3ef      	bcc.n	8007d3a <forward_mp+0x116>
 8007d5a:	f10c 0c01 	add.w	ip, ip, #1
 8007d5e:	4446      	add	r6, r8
 8007d60:	4444      	add	r4, r8
 8007d62:	45e6      	cmp	lr, ip
 8007d64:	d1e2      	bne.n	8007d2c <forward_mp+0x108>
 8007d66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d68:	443d      	add	r5, r7
 8007d6a:	9802      	ldr	r0, [sp, #8]
 8007d6c:	9a06      	ldr	r2, [sp, #24]
 8007d6e:	eb01 030b 	add.w	r3, r1, fp
 8007d72:	1a41      	subs	r1, r0, r1
 8007d74:	3201      	adds	r2, #1
 8007d76:	9102      	str	r1, [sp, #8]
 8007d78:	9904      	ldr	r1, [sp, #16]
 8007d7a:	9206      	str	r2, [sp, #24]
 8007d7c:	4291      	cmp	r1, r2
 8007d7e:	d1b2      	bne.n	8007ce6 <forward_mp+0xc2>
 8007d80:	9b00      	ldr	r3, [sp, #0]
 8007d82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d84:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8007d88:	4413      	add	r3, r2
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d8e:	f10b 0b01 	add.w	fp, fp, #1
 8007d92:	9a01      	ldr	r2, [sp, #4]
 8007d94:	449a      	add	sl, r3
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	455b      	cmp	r3, fp
 8007d9e:	d187      	bne.n	8007cb0 <forward_mp+0x8c>
 8007da0:	b013      	add	sp, #76	@ 0x4c
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	6853      	ldr	r3, [r2, #4]
 8007da8:	deff      	udf	#255	@ 0xff
 8007daa:	9e03      	ldr	r6, [sp, #12]
 8007dac:	2300      	movs	r3, #0
 8007dae:	e79f      	b.n	8007cf0 <forward_mp+0xcc>
 8007db0:	2300      	movs	r3, #0
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	deff      	udf	#255	@ 0xff
 8007db6:	68d3      	ldr	r3, [r2, #12]
 8007db8:	deff      	udf	#255	@ 0xff
 8007dba:	bf00      	nop

08007dbc <forward_ap>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	6983      	ldr	r3, [r0, #24]
 8007dc2:	b09b      	sub	sp, #108	@ 0x6c
 8007dc4:	881a      	ldrh	r2, [r3, #0]
 8007dc6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	f000 80f4 	beq.w	8007fb6 <forward_ap+0x1fa>
 8007dce:	6859      	ldr	r1, [r3, #4]
 8007dd0:	684b      	ldr	r3, [r1, #4]
 8007dd2:	b103      	cbz	r3, 8007dd6 <forward_ap+0x1a>
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	f000 80f8 	beq.w	8007fcc <forward_ap+0x210>
 8007ddc:	690a      	ldr	r2, [r1, #16]
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	f000 80f7 	beq.w	8007fd2 <forward_ap+0x216>
 8007de4:	6811      	ldr	r1, [r2, #0]
 8007de6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007de8:	68ca      	ldr	r2, [r1, #12]
 8007dea:	6989      	ldr	r1, [r1, #24]
 8007dec:	68d4      	ldr	r4, [r2, #12]
 8007dee:	6895      	ldr	r5, [r2, #8]
 8007df0:	688a      	ldr	r2, [r1, #8]
 8007df2:	68d9      	ldr	r1, [r3, #12]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	9205      	str	r2, [sp, #20]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8007dfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007dfe:	9410      	str	r4, [sp, #64]	@ 0x40
 8007e00:	9509      	str	r5, [sp, #36]	@ 0x24
 8007e02:	e9d2 3600 	ldrd	r3, r6, [r2]
 8007e06:	e9d1 7c02 	ldrd	r7, ip, [r1, #8]
 8007e0a:	6a02      	ldr	r2, [r0, #32]
 8007e0c:	970a      	str	r7, [sp, #40]	@ 0x28
 8007e0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007e10:	684f      	ldr	r7, [r1, #4]
 8007e12:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8007e14:	69c1      	ldr	r1, [r0, #28]
 8007e16:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007e18:	9614      	str	r6, [sp, #80]	@ 0x50
 8007e1a:	9013      	str	r0, [sp, #76]	@ 0x4c
 8007e1c:	4258      	negs	r0, r3
 8007e1e:	9111      	str	r1, [sp, #68]	@ 0x44
 8007e20:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e22:	9003      	str	r0, [sp, #12]
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	f000 80c3 	beq.w	8007fb0 <forward_ap+0x1f4>
 8007e2a:	eb0c 0003 	add.w	r0, ip, r3
 8007e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e32:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 8007e36:	fb07 f303 	mul.w	r3, r7, r3
 8007e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e3e:	9004      	str	r0, [sp, #16]
 8007e40:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007e44:	fb02 f301 	mul.w	r3, r2, r1
 8007e48:	9316      	str	r3, [sp, #88]	@ 0x58
 8007e4a:	4273      	negs	r3, r6
 8007e4c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007e4e:	fb05 f30a 	mul.w	r3, r5, sl
 8007e52:	463d      	mov	r5, r7
 8007e54:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e56:	2300      	movs	r3, #0
 8007e58:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e5e:	9804      	ldr	r0, [sp, #16]
 8007e60:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007e64:	4281      	cmp	r1, r0
 8007e66:	bf94      	ite	ls
 8007e68:	185b      	addls	r3, r3, r1
 8007e6a:	181b      	addhi	r3, r3, r0
 8007e6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	2900      	cmp	r1, #0
 8007e74:	f000 808e 	beq.w	8007f94 <forward_ap+0x1d8>
 8007e78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	fb00 f102 	mul.w	r1, r0, r2
 8007e80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e82:	9318      	str	r3, [sp, #96]	@ 0x60
 8007e84:	1882      	adds	r2, r0, r2
 8007e86:	9b05      	ldr	r3, [sp, #20]
 8007e88:	9108      	str	r1, [sp, #32]
 8007e8a:	4698      	mov	r8, r3
 8007e8c:	eb03 010a 	add.w	r1, r3, sl
 8007e90:	9207      	str	r2, [sp, #28]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007e96:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e98:	2a00      	cmp	r2, #0
 8007e9a:	9206      	str	r2, [sp, #24]
 8007e9c:	f2c0 8093 	blt.w	8007fc6 <forward_ap+0x20a>
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	189c      	adds	r4, r3, r2
 8007ea4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ea6:	9806      	ldr	r0, [sp, #24]
 8007ea8:	fb04 340a 	mla	r4, r4, sl, r3
 8007eac:	9e07      	ldr	r6, [sp, #28]
 8007eae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007eb0:	42b3      	cmp	r3, r6
 8007eb2:	bf94      	ite	ls
 8007eb4:	18c0      	addls	r0, r0, r3
 8007eb6:	1980      	addhi	r0, r0, r6
 8007eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eba:	eba2 0e00 	sub.w	lr, r2, r0
 8007ebe:	1a82      	subs	r2, r0, r2
 8007ec0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ec4:	9200      	str	r2, [sp, #0]
 8007ec6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007ec8:	fb02 fe0e 	mul.w	lr, r2, lr
 8007ecc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bf08      	it	eq
 8007ed2:	4672      	moveq	r2, lr
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	9202      	str	r2, [sp, #8]
 8007ed8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eda:	4293      	cmp	r3, r2
 8007edc:	dd48      	ble.n	8007f70 <forward_ap+0x1b4>
 8007ede:	9b00      	ldr	r3, [sp, #0]
 8007ee0:	4694      	mov	ip, r2
 8007ee2:	2700      	movs	r7, #0
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	fb0a 4003 	mla	r0, sl, r3, r4
 8007eea:	9b00      	ldr	r3, [sp, #0]
 8007eec:	441f      	add	r7, r3
 8007eee:	45be      	cmp	lr, r7
 8007ef0:	d063      	beq.n	8007fba <forward_ap+0x1fe>
 8007ef2:	42a0      	cmp	r0, r4
 8007ef4:	d933      	bls.n	8007f5e <forward_ap+0x1a2>
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	4623      	mov	r3, r4
 8007efa:	eb0a 0b04 	add.w	fp, sl, r4
 8007efe:	b145      	cbz	r5, 8007f12 <forward_ap+0x156>
 8007f00:	2a00      	cmp	r2, #0
 8007f02:	d05e      	beq.n	8007fc2 <forward_ap+0x206>
 8007f04:	4642      	mov	r2, r8
 8007f06:	ecf3 7a01 	vldmia	r3!, {s15}
 8007f0a:	459b      	cmp	fp, r3
 8007f0c:	ece2 7a01 	vstmia	r2!, {s15}
 8007f10:	d1f9      	bne.n	8007f06 <forward_ap+0x14a>
 8007f12:	46a3      	mov	fp, r4
 8007f14:	44d3      	add	fp, sl
 8007f16:	4558      	cmp	r0, fp
 8007f18:	d910      	bls.n	8007f3c <forward_ap+0x180>
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	d0fa      	beq.n	8007f14 <forward_ap+0x158>
 8007f1e:	4643      	mov	r3, r8
 8007f20:	465a      	mov	r2, fp
 8007f22:	ed93 7a00 	vldr	s14, [r3]
 8007f26:	ecf2 7a01 	vldmia	r2!, {s15}
 8007f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f2e:	ece3 7a01 	vstmia	r3!, {s15}
 8007f32:	428b      	cmp	r3, r1
 8007f34:	d1f5      	bne.n	8007f22 <forward_ap+0x166>
 8007f36:	44d3      	add	fp, sl
 8007f38:	4558      	cmp	r0, fp
 8007f3a:	d8ee      	bhi.n	8007f1a <forward_ap+0x15e>
 8007f3c:	b17e      	cbz	r6, 8007f5e <forward_ap+0x1a2>
 8007f3e:	ee07 6a90 	vmov	s15, r6
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4a:	b145      	cbz	r5, 8007f5e <forward_ap+0x1a2>
 8007f4c:	4643      	mov	r3, r8
 8007f4e:	edd3 7a00 	vldr	s15, [r3]
 8007f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f56:	ece3 7a01 	vstmia	r3!, {s15}
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	d1f7      	bne.n	8007f4e <forward_ap+0x192>
 8007f5e:	f10c 0c01 	add.w	ip, ip, #1
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	444c      	add	r4, r9
 8007f66:	4448      	add	r0, r9
 8007f68:	4563      	cmp	r3, ip
 8007f6a:	f04f 0200 	mov.w	r2, #0
 8007f6e:	d1bc      	bne.n	8007eea <forward_ap+0x12e>
 8007f70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007f72:	44d0      	add	r8, sl
 8007f74:	9c07      	ldr	r4, [sp, #28]
 8007f76:	4451      	add	r1, sl
 8007f78:	9a06      	ldr	r2, [sp, #24]
 8007f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f7c:	4402      	add	r2, r0
 8007f7e:	1a20      	subs	r0, r4, r0
 8007f80:	3301      	adds	r3, #1
 8007f82:	9007      	str	r0, [sp, #28]
 8007f84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f86:	930d      	str	r3, [sp, #52]	@ 0x34
 8007f88:	4298      	cmp	r0, r3
 8007f8a:	d185      	bne.n	8007e98 <forward_ap+0xdc>
 8007f8c:	9b05      	ldr	r3, [sp, #20]
 8007f8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f90:	4413      	add	r3, r2
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	9a03      	ldr	r2, [sp, #12]
 8007f96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007f98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f9a:	440a      	add	r2, r1
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	9203      	str	r2, [sp, #12]
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fa4:	1a52      	subs	r2, r2, r1
 8007fa6:	9204      	str	r2, [sp, #16]
 8007fa8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007faa:	429a      	cmp	r2, r3
 8007fac:	f47f af55 	bne.w	8007e5a <forward_ap+0x9e>
 8007fb0:	b01b      	add	sp, #108	@ 0x6c
 8007fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb6:	6853      	ldr	r3, [r2, #4]
 8007fb8:	deff      	udf	#255	@ 0xff
 8007fba:	42a0      	cmp	r0, r4
 8007fbc:	9e02      	ldr	r6, [sp, #8]
 8007fbe:	d89b      	bhi.n	8007ef8 <forward_ap+0x13c>
 8007fc0:	e7bc      	b.n	8007f3c <forward_ap+0x180>
 8007fc2:	46a3      	mov	fp, r4
 8007fc4:	e7ab      	b.n	8007f1e <forward_ap+0x162>
 8007fc6:	9c08      	ldr	r4, [sp, #32]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	e76b      	b.n	8007ea4 <forward_ap+0xe8>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	deff      	udf	#255	@ 0xff
 8007fd2:	68d3      	ldr	r3, [r2, #12]
 8007fd4:	deff      	udf	#255	@ 0xff
 8007fd6:	bf00      	nop

08007fd8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	ed2d 8b0c 	vpush	{d8-d13}
 8007fe0:	b08d      	sub	sp, #52	@ 0x34
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	9003      	str	r0, [sp, #12]
 8007fe6:	9207      	str	r2, [sp, #28]
 8007fe8:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8007fea:	9308      	str	r3, [sp, #32]
 8007fec:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 8007ff0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ff2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007ff4:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	@ 0x94
 8007ff8:	fb00 f002 	mul.w	r0, r0, r2
 8007ffc:	9004      	str	r0, [sp, #16]
 8007ffe:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	@ 0xa4
 8008002:	9009      	str	r0, [sp, #36]	@ 0x24
 8008004:	2c00      	cmp	r4, #0
 8008006:	f000 80ed 	beq.w	80081e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 800800a:	009c      	lsls	r4, r3, #2
 800800c:	fb00 f305 	mul.w	r3, r0, r5
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	9405      	str	r4, [sp, #20]
 8008014:	9306      	str	r3, [sp, #24]
 8008016:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008018:	fb03 f305 	mul.w	r3, r3, r5
 800801c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008024:	425b      	negs	r3, r3
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2300      	movs	r3, #0
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	00ab      	lsls	r3, r5, #2
 800802e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008030:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008032:	2b00      	cmp	r3, #0
 8008034:	f2c0 80dd 	blt.w	80081f2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8008038:	9e01      	ldr	r6, [sp, #4]
 800803a:	2000      	movs	r0, #0
 800803c:	9d04      	ldr	r5, [sp, #16]
 800803e:	9b07      	ldr	r3, [sp, #28]
 8008040:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008042:	9900      	ldr	r1, [sp, #0]
 8008044:	fb05 3502 	mla	r5, r5, r2, r3
 8008048:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800804a:	440b      	add	r3, r1
 800804c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800804e:	428b      	cmp	r3, r1
 8008050:	bf94      	ite	ls
 8008052:	ebc0 0003 	rsbls	r0, r0, r3
 8008056:	ebc0 0001 	rsbhi	r0, r0, r1
 800805a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800805c:	f1bb 0f00 	cmp.w	fp, #0
 8008060:	eba3 0a00 	sub.w	sl, r3, r0
 8008064:	9b08      	ldr	r3, [sp, #32]
 8008066:	eba1 0900 	sub.w	r9, r1, r0
 800806a:	fb03 f000 	mul.w	r0, r3, r0
 800806e:	f340 80c6 	ble.w	80081fe <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8008072:	f020 040f 	bic.w	r4, r0, #15
 8008076:	eeb0 7a40 	vmov.f32	s14, s0
 800807a:	fb02 fa0a 	mul.w	sl, r2, sl
 800807e:	f04f 0c00 	mov.w	ip, #0
 8008082:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8008086:	fb02 f909 	mul.w	r9, r2, r9
 800808a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800808e:	f108 0801 	add.w	r8, r8, #1
 8008092:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8008096:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800809a:	2c00      	cmp	r4, #0
 800809c:	f340 80a7 	ble.w	80081ee <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 80080a0:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 80080a4:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80080a8:	2100      	movs	r1, #0
 80080aa:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 80080ae:	3110      	adds	r1, #16
 80080b0:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80080b4:	3340      	adds	r3, #64	@ 0x40
 80080b6:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 80080ba:	42a1      	cmp	r1, r4
 80080bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080c0:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 80080c4:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80080c8:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80080cc:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 80080d0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80080d4:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 80080d8:	ed52 da1d 	vldr	s27, [r2, #-116]	@ 0xffffff8c
 80080dc:	ed12 da1c 	vldr	s26, [r2, #-112]	@ 0xffffff90
 80080e0:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 80080e4:	ed12 ca1b 	vldr	s24, [r2, #-108]	@ 0xffffff94
 80080e8:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 80080ec:	eee5 7a86 	vfma.f32	s15, s11, s12
 80080f0:	ed12 ba1a 	vldr	s22, [r2, #-104]	@ 0xffffff98
 80080f4:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 80080f8:	ed12 aa19 	vldr	s20, [r2, #-100]	@ 0xffffff9c
 80080fc:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8008100:	ed12 9a18 	vldr	s18, [r2, #-96]	@ 0xffffffa0
 8008104:	ed53 8a18 	vldr	s17, [r3, #-96]	@ 0xffffffa0
 8008108:	eeed 7aa6 	vfma.f32	s15, s27, s13
 800810c:	ed12 8a17 	vldr	s16, [r2, #-92]	@ 0xffffffa4
 8008110:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8008114:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8008118:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 800811c:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8008120:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8008124:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8008128:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800812c:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008130:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8008134:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8008138:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800813c:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8008140:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8008144:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8008148:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800814c:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8008150:	eeea 7a29 	vfma.f32	s15, s20, s19
 8008154:	eee9 7a28 	vfma.f32	s15, s18, s17
 8008158:	eee8 7a20 	vfma.f32	s15, s16, s1
 800815c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008160:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008164:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008168:	eee4 7a24 	vfma.f32	s15, s8, s9
 800816c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008170:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008178:	db97      	blt.n	80080aa <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 800817a:	4476      	add	r6, lr
 800817c:	4475      	add	r5, lr
 800817e:	4647      	mov	r7, r8
 8008180:	42b8      	cmp	r0, r7
 8008182:	dd10      	ble.n	80081a6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8008184:	463b      	mov	r3, r7
 8008186:	4631      	mov	r1, r6
 8008188:	462a      	mov	r2, r5
 800818a:	3301      	adds	r3, #1
 800818c:	ecf2 6a01 	vldmia	r2!, {s13}
 8008190:	ecf1 7a01 	vldmia	r1!, {s15}
 8008194:	4298      	cmp	r0, r3
 8008196:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800819a:	d1f6      	bne.n	800818a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 800819c:	1bc7      	subs	r7, r0, r7
 800819e:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80081a2:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 80081a6:	f10c 0c01 	add.w	ip, ip, #1
 80081aa:	4456      	add	r6, sl
 80081ac:	444d      	add	r5, r9
 80081ae:	45dc      	cmp	ip, fp
 80081b0:	f47f af73 	bne.w	800809a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 80081b4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80081b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081b8:	9a03      	ldr	r2, [sp, #12]
 80081ba:	4401      	add	r1, r0
 80081bc:	9b02      	ldr	r3, [sp, #8]
 80081be:	ed82 7a00 	vstr	s14, [r2]
 80081c2:	9128      	str	r1, [sp, #160]	@ 0xa0
 80081c4:	3301      	adds	r3, #1
 80081c6:	9905      	ldr	r1, [sp, #20]
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	440a      	add	r2, r1
 80081cc:	9906      	ldr	r1, [sp, #24]
 80081ce:	9203      	str	r2, [sp, #12]
 80081d0:	9a00      	ldr	r2, [sp, #0]
 80081d2:	1a12      	subs	r2, r2, r0
 80081d4:	9200      	str	r2, [sp, #0]
 80081d6:	9a01      	ldr	r2, [sp, #4]
 80081d8:	440a      	add	r2, r1
 80081da:	9201      	str	r2, [sp, #4]
 80081dc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081de:	4293      	cmp	r3, r2
 80081e0:	f47f af26 	bne.w	8008030 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 80081e4:	b00d      	add	sp, #52	@ 0x34
 80081e6:	ecbd 8b0c 	vpop	{d8-d13}
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	2700      	movs	r7, #0
 80081f0:	e7c6      	b.n	8008180 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 80081f2:	9a00      	ldr	r2, [sp, #0]
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	4610      	mov	r0, r2
 80081f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80081fa:	189d      	adds	r5, r3, r2
 80081fc:	e71f      	b.n	800803e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 80081fe:	eeb0 7a40 	vmov.f32	s14, s0
 8008202:	e7d7      	b.n	80081b4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08008204 <forward_lite_conv2d_if32of32wf32>:
 8008204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	ed2d 8b02 	vpush	{d8}
 800820c:	b09f      	sub	sp, #124	@ 0x7c
 800820e:	4686      	mov	lr, r0
 8008210:	4694      	mov	ip, r2
 8008212:	af08      	add	r7, sp, #32
 8008214:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	@ 0xb0
 8008218:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800821a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 800821e:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	@ 0xb4
 8008222:	424e      	negs	r6, r1
 8008224:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8008226:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	613a      	str	r2, [r7, #16]
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008230:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8008234:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	@ 0xa8
 8008238:	617d      	str	r5, [r7, #20]
 800823a:	633e      	str	r6, [r7, #48]	@ 0x30
 800823c:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	@ 0x88
 8008240:	2c00      	cmp	r4, #0
 8008242:	f000 8092 	beq.w	800836a <forward_lite_conv2d_if32of32wf32+0x166>
 8008246:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800824a:	6379      	str	r1, [r7, #52]	@ 0x34
 800824c:	fb04 f202 	mul.w	r2, r4, r2
 8008250:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008254:	4244      	negs	r4, r0
 8008256:	ed9f 8a9a 	vldr	s16, [pc, #616]	@ 80084c0 <forward_lite_conv2d_if32of32wf32+0x2bc>
 800825a:	653c      	str	r4, [r7, #80]	@ 0x50
 800825c:	fb03 f402 	mul.w	r4, r3, r2
 8008260:	fb03 f201 	mul.w	r2, r3, r1
 8008264:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8008268:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800826c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800826e:	fb01 f10a 	mul.w	r1, r1, sl
 8008272:	0089      	lsls	r1, r1, #2
 8008274:	61b9      	str	r1, [r7, #24]
 8008276:	fb05 f102 	mul.w	r1, r5, r2
 800827a:	4655      	mov	r5, sl
 800827c:	fb06 f202 	mul.w	r2, r6, r2
 8008280:	46da      	mov	sl, fp
 8008282:	0089      	lsls	r1, r1, #2
 8008284:	61f9      	str	r1, [r7, #28]
 8008286:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 800828a:	f10b 0207 	add.w	r2, fp, #7
 800828e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008290:	f022 0107 	bic.w	r1, r2, #7
 8008294:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8008298:	60f9      	str	r1, [r7, #12]
 800829a:	f10c 4178 	add.w	r1, ip, #4160749568	@ 0xf8000000
 800829e:	60ba      	str	r2, [r7, #8]
 80082a0:	2200      	movs	r2, #0
 80082a2:	6239      	str	r1, [r7, #32]
 80082a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80082a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082a8:	2a00      	cmp	r2, #0
 80082aa:	f2c0 80d5 	blt.w	8008458 <forward_lite_conv2d_if32of32wf32+0x254>
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8d7 b028 	ldr.w	fp, [r7, #40]	@ 0x28
 80082b4:	657a      	str	r2, [r7, #84]	@ 0x54
 80082b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082bc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80082c0:	440a      	add	r2, r1
 80082c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082c4:	4282      	cmp	r2, r0
 80082c6:	bf94      	ite	ls
 80082c8:	ebc1 0102 	rsbls	r1, r1, r2
 80082cc:	ebc1 0100 	rsbhi	r1, r1, r0
 80082d0:	6a3a      	ldr	r2, [r7, #32]
 80082d2:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80082d6:	6439      	str	r1, [r7, #64]	@ 0x40
 80082d8:	d24d      	bcs.n	8008376 <forward_lite_conv2d_if32of32wf32+0x172>
 80082da:	b385      	cbz	r5, 800833e <forward_lite_conv2d_if32of32wf32+0x13a>
 80082dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80082de:	2a00      	cmp	r2, #0
 80082e0:	f000 80bf 	beq.w	8008462 <forward_lite_conv2d_if32of32wf32+0x25e>
 80082e4:	4659      	mov	r1, fp
 80082e6:	4691      	mov	r9, r2
 80082e8:	46d3      	mov	fp, sl
 80082ea:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 80082ee:	693e      	ldr	r6, [r7, #16]
 80082f0:	2400      	movs	r4, #0
 80082f2:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 80082f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082f8:	3401      	adds	r4, #1
 80082fa:	ecb9 0a01 	vldmia	r9!, {s0}
 80082fe:	4640      	mov	r0, r8
 8008300:	9207      	str	r2, [sp, #28]
 8008302:	f108 0804 	add.w	r8, r8, #4
 8008306:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008308:	e9cd a205 	strd	sl, r2, [sp, #20]
 800830c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800830e:	9204      	str	r2, [sp, #16]
 8008310:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8008314:	9203      	str	r2, [sp, #12]
 8008316:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800831a:	9202      	str	r2, [sp, #8]
 800831c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008320:	e9cd 5200 	strd	r5, r2, [sp]
 8008324:	4632      	mov	r2, r6
 8008326:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800832a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800832c:	445e      	add	r6, fp
 800832e:	f7ff fe53 	bl	8007fd8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8008332:	42a5      	cmp	r5, r4
 8008334:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800833a:	d1dc      	bne.n	80082f6 <forward_lite_conv2d_if32of32wf32+0xf2>
 800833c:	46da      	mov	sl, fp
 800833e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008340:	69b8      	ldr	r0, [r7, #24]
 8008342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008344:	4401      	add	r1, r0
 8008346:	6978      	ldr	r0, [r7, #20]
 8008348:	3201      	adds	r2, #1
 800834a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800834c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800834e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008350:	4401      	add	r1, r0
 8008352:	6339      	str	r1, [r7, #48]	@ 0x30
 8008354:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008356:	1a09      	subs	r1, r1, r0
 8008358:	69f8      	ldr	r0, [r7, #28]
 800835a:	6379      	str	r1, [r7, #52]	@ 0x34
 800835c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800835e:	4401      	add	r1, r0
 8008360:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008362:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8008366:	4291      	cmp	r1, r2
 8008368:	d19d      	bne.n	80082a6 <forward_lite_conv2d_if32of32wf32+0xa2>
 800836a:	375c      	adds	r7, #92	@ 0x5c
 800836c:	46bd      	mov	sp, r7
 800836e:	ecbd 8b02 	vpop	{d8}
 8008372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008376:	466a      	mov	r2, sp
 8008378:	ee08 2a90 	vmov	s17, r2
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	ebad 0d02 	sub.w	sp, sp, r2
 8008382:	aa08      	add	r2, sp, #32
 8008384:	2d00      	cmp	r5, #0
 8008386:	d03d      	beq.n	8008404 <forward_lite_conv2d_if32of32wf32+0x200>
 8008388:	6938      	ldr	r0, [r7, #16]
 800838a:	4659      	mov	r1, fp
 800838c:	68bc      	ldr	r4, [r7, #8]
 800838e:	46ab      	mov	fp, r5
 8008390:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 8008394:	f04f 0800 	mov.w	r8, #0
 8008398:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800839a:	4605      	mov	r5, r0
 800839c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800839e:	b138      	cbz	r0, 80083b0 <forward_lite_conv2d_if32of32wf32+0x1ac>
 80083a0:	4628      	mov	r0, r5
 80083a2:	4694      	mov	ip, r2
 80083a4:	f850 eb04 	ldr.w	lr, [r0], #4
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	f84c eb04 	str.w	lr, [ip], #4
 80083ae:	d1f9      	bne.n	80083a4 <forward_lite_conv2d_if32of32wf32+0x1a0>
 80083b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80083b2:	f108 0801 	add.w	r8, r8, #1
 80083b6:	b348      	cbz	r0, 800840c <forward_lite_conv2d_if32of32wf32+0x208>
 80083b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80083ba:	4455      	add	r5, sl
 80083bc:	ecb6 0a01 	vldmia	r6!, {s0}
 80083c0:	4454      	add	r4, sl
 80083c2:	9007      	str	r0, [sp, #28]
 80083c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80083c6:	9006      	str	r0, [sp, #24]
 80083c8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80083ca:	9005      	str	r0, [sp, #20]
 80083cc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80083ce:	9004      	str	r0, [sp, #16]
 80083d0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80083d4:	9003      	str	r0, [sp, #12]
 80083d6:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80083da:	9002      	str	r0, [sp, #8]
 80083dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80083e0:	e9cd b000 	strd	fp, r0, [sp]
 80083e4:	4648      	mov	r0, r9
 80083e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083ea:	f109 0904 	add.w	r9, r9, #4
 80083ee:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 80083f2:	f7ff fdf1 	bl	8007fd8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80083f6:	45d8      	cmp	r8, fp
 80083f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083fc:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 8008400:	d1cc      	bne.n	800839c <forward_lite_conv2d_if32of32wf32+0x198>
 8008402:	465d      	mov	r5, fp
 8008404:	ee18 2a90 	vmov	r2, s17
 8008408:	4695      	mov	sp, r2
 800840a:	e798      	b.n	800833e <forward_lite_conv2d_if32of32wf32+0x13a>
 800840c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800840e:	eeb0 0a48 	vmov.f32	s0, s16
 8008412:	4455      	add	r5, sl
 8008414:	4454      	add	r4, sl
 8008416:	9007      	str	r0, [sp, #28]
 8008418:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800841a:	9006      	str	r0, [sp, #24]
 800841c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800841e:	9005      	str	r0, [sp, #20]
 8008420:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008422:	9004      	str	r0, [sp, #16]
 8008424:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8008428:	9003      	str	r0, [sp, #12]
 800842a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800842e:	9002      	str	r0, [sp, #8]
 8008430:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8008434:	e9cd b000 	strd	fp, r0, [sp]
 8008438:	4648      	mov	r0, r9
 800843a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800843e:	f109 0904 	add.w	r9, r9, #4
 8008442:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 8008446:	f7ff fdc7 	bl	8007fd8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800844a:	45c3      	cmp	fp, r8
 800844c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008450:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 8008454:	d1a2      	bne.n	800839c <forward_lite_conv2d_if32of32wf32+0x198>
 8008456:	e7d4      	b.n	8008402 <forward_lite_conv2d_if32of32wf32+0x1fe>
 8008458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800845a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800845e:	657a      	str	r2, [r7, #84]	@ 0x54
 8008460:	e729      	b.n	80082b6 <forward_lite_conv2d_if32of32wf32+0xb2>
 8008462:	4659      	mov	r1, fp
 8008464:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8008468:	46d3      	mov	fp, sl
 800846a:	693e      	ldr	r6, [r7, #16]
 800846c:	4614      	mov	r4, r2
 800846e:	f8d7 9054 	ldr.w	r9, [r7, #84]	@ 0x54
 8008472:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 8008476:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008478:	3401      	adds	r4, #1
 800847a:	4640      	mov	r0, r8
 800847c:	eeb0 0a48 	vmov.f32	s0, s16
 8008480:	9207      	str	r2, [sp, #28]
 8008482:	f108 0804 	add.w	r8, r8, #4
 8008486:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008488:	f8cd 9010 	str.w	r9, [sp, #16]
 800848c:	e9cd a205 	strd	sl, r2, [sp, #20]
 8008490:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8008494:	9203      	str	r2, [sp, #12]
 8008496:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800849a:	9202      	str	r2, [sp, #8]
 800849c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80084a0:	e9cd 5200 	strd	r5, r2, [sp]
 80084a4:	4632      	mov	r2, r6
 80084a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084aa:	6579      	str	r1, [r7, #84]	@ 0x54
 80084ac:	445e      	add	r6, fp
 80084ae:	f7ff fd93 	bl	8007fd8 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80084b2:	42a5      	cmp	r5, r4
 80084b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084ba:	d1dc      	bne.n	8008476 <forward_lite_conv2d_if32of32wf32+0x272>
 80084bc:	e73e      	b.n	800833c <forward_lite_conv2d_if32of32wf32+0x138>
 80084be:	bf00      	nop
 80084c0:	00000000 	.word	0x00000000

080084c4 <forward_lite_dw_if32of32wf32>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	b0a5      	sub	sp, #148	@ 0x94
 80084ca:	9111      	str	r1, [sp, #68]	@ 0x44
 80084cc:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	@ 0xe0
 80084d0:	9320      	str	r3, [sp, #128]	@ 0x80
 80084d2:	9122      	str	r1, [sp, #136]	@ 0x88
 80084d4:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 80084d8:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	@ 0xe4
 80084dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80084de:	9123      	str	r1, [sp, #140]	@ 0x8c
 80084e0:	4259      	negs	r1, r3
 80084e2:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	@ 0xd8
 80084e6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80084e8:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 80084ea:	901f      	str	r0, [sp, #124]	@ 0x7c
 80084ec:	9221      	str	r2, [sp, #132]	@ 0x84
 80084ee:	2900      	cmp	r1, #0
 80084f0:	f000 8137 	beq.w	8008762 <forward_lite_dw_if32of32wf32+0x29e>
 80084f4:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80084f6:	4252      	negs	r2, r2
 80084f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80084fa:	921c      	str	r2, [sp, #112]	@ 0x70
 80084fc:	00ca      	lsls	r2, r1, #3
 80084fe:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008500:	008f      	lsls	r7, r1, #2
 8008502:	9201      	str	r2, [sp, #4]
 8008504:	ea4f 1801 	mov.w	r8, r1, lsl #4
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800850c:	ed9f 3aa1 	vldr	s6, [pc, #644]	@ 8008794 <forward_lite_dw_if32of32wf32+0x2d0>
 8008510:	46bb      	mov	fp, r7
 8008512:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008514:	46c1      	mov	r9, r8
 8008516:	fb02 f303 	mul.w	r3, r2, r3
 800851a:	931e      	str	r3, [sp, #120]	@ 0x78
 800851c:	2300      	movs	r3, #0
 800851e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008520:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8008522:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8008524:	2800      	cmp	r0, #0
 8008526:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008528:	eb02 0103 	add.w	r1, r2, r3
 800852c:	bfb8      	it	lt
 800852e:	461a      	movlt	r2, r3
 8008530:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8008532:	bfa8      	it	ge
 8008534:	2200      	movge	r2, #0
 8008536:	4299      	cmp	r1, r3
 8008538:	bf28      	it	cs
 800853a:	4619      	movcs	r1, r3
 800853c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 8101 	beq.w	8008746 <forward_lite_dw_if32of32wf32+0x282>
 8008544:	1a53      	subs	r3, r2, r1
 8008546:	eba1 0e02 	sub.w	lr, r1, r2
 800854a:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 800854c:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8008550:	46f2      	mov	sl, lr
 8008552:	440b      	add	r3, r1
 8008554:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	9309      	str	r3, [sp, #36]	@ 0x24
 800855e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8008562:	fbb3 f1f1 	udiv	r1, r3, r1
 8008566:	1813      	adds	r3, r2, r0
 8008568:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 800856a:	9116      	str	r1, [sp, #88]	@ 0x58
 800856c:	fb02 f200 	mul.w	r2, r2, r0
 8008570:	9215      	str	r2, [sp, #84]	@ 0x54
 8008572:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8008574:	fb02 f303 	mul.w	r3, r2, r3
 8008578:	931d      	str	r3, [sp, #116]	@ 0x74
 800857a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800857c:	930d      	str	r3, [sp, #52]	@ 0x34
 800857e:	008b      	lsls	r3, r1, #2
 8008580:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008582:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008584:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008586:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008588:	930a      	str	r3, [sp, #40]	@ 0x28
 800858a:	2300      	movs	r3, #0
 800858c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800858e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008590:	2b00      	cmp	r3, #0
 8008592:	f2c0 80fa 	blt.w	800878a <forward_lite_dw_if32of32wf32+0x2c6>
 8008596:	2500      	movs	r5, #0
 8008598:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800859a:	462a      	mov	r2, r5
 800859c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800859e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80085a0:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 80085a2:	1808      	adds	r0, r1, r0
 80085a4:	993b      	ldr	r1, [sp, #236]	@ 0xec
 80085a6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80085a8:	4288      	cmp	r0, r1
 80085aa:	bf28      	it	cs
 80085ac:	4608      	movcs	r0, r1
 80085ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085b0:	1a80      	subs	r0, r0, r2
 80085b2:	190c      	adds	r4, r1, r4
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	f000 80d9 	beq.w	800876c <forward_lite_dw_if32of32wf32+0x2a8>
 80085ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085bc:	960c      	str	r6, [sp, #48]	@ 0x30
 80085be:	4296      	cmp	r6, r2
 80085c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085c6:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 80085c8:	fe43 3a22 	vseleq.f32	s7, s6, s5
 80085cc:	1a11      	subs	r1, r2, r0
 80085ce:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80085d0:	fb02 f101 	mul.w	r1, r2, r1
 80085d4:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 80085d6:	1a12      	subs	r2, r2, r0
 80085d8:	442c      	add	r4, r5
 80085da:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 80085dc:	fb0b 5404 	mla	r4, fp, r4, r5
 80085e0:	eb04 050b 	add.w	r5, r4, fp
 80085e4:	9407      	str	r4, [sp, #28]
 80085e6:	42ac      	cmp	r4, r5
 80085e8:	9514      	str	r5, [sp, #80]	@ 0x50
 80085ea:	f080 8096 	bcs.w	800871a <forward_lite_dw_if32of32wf32+0x256>
 80085ee:	0089      	lsls	r1, r1, #2
 80085f0:	f020 0803 	bic.w	r8, r0, #3
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	9102      	str	r1, [sp, #8]
 80085f8:	9203      	str	r2, [sp, #12]
 80085fa:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	@ 0xb8
 80085fe:	428a      	cmp	r2, r1
 8008600:	f0c0 808b 	bcc.w	800871a <forward_lite_dw_if32of32wf32+0x256>
 8008604:	2901      	cmp	r1, #1
 8008606:	f040 80c7 	bne.w	8008798 <forward_lite_dw_if32of32wf32+0x2d4>
 800860a:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800860e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8008610:	f8cd b060 	str.w	fp, [sp, #96]	@ 0x60
 8008614:	0891      	lsrs	r1, r2, #2
 8008616:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008618:	4422      	add	r2, r4
 800861a:	9208      	str	r2, [sp, #32]
 800861c:	2200      	movs	r2, #0
 800861e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008620:	1c4a      	adds	r2, r1, #1
 8008622:	fb01 9109 	mla	r1, r1, r9, r9
 8008626:	e9dd ce02 	ldrd	ip, lr, [sp, #8]
 800862a:	9106      	str	r1, [sp, #24]
 800862c:	0111      	lsls	r1, r2, #4
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	9105      	str	r1, [sp, #20]
 8008632:	9204      	str	r2, [sp, #16]
 8008634:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008636:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008638:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800863c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800863e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008642:	9202      	str	r2, [sp, #8]
 8008644:	ecb7 7a01 	vldmia	r7!, {s14}
 8008648:	f1ba 0f00 	cmp.w	sl, #0
 800864c:	ee23 7a87 	vmul.f32	s14, s7, s14
 8008650:	dd4a      	ble.n	80086e8 <forward_lite_dw_if32of32wf32+0x224>
 8008652:	9a07      	ldr	r2, [sp, #28]
 8008654:	2600      	movs	r6, #0
 8008656:	f1b8 0f00 	cmp.w	r8, #0
 800865a:	f340 8085 	ble.w	8008768 <forward_lite_dw_if32of32wf32+0x2a4>
 800865e:	9c01      	ldr	r4, [sp, #4]
 8008660:	f103 0110 	add.w	r1, r3, #16
 8008664:	f04f 0b00 	mov.w	fp, #0
 8008668:	1915      	adds	r5, r2, r4
 800866a:	4614      	mov	r4, r2
 800866c:	ed51 6a03 	vldr	s13, [r1, #-12]
 8008670:	f10b 0b04 	add.w	fp, fp, #4
 8008674:	edd4 7a01 	vldr	s15, [r4, #4]
 8008678:	3110      	adds	r1, #16
 800867a:	ed94 4a00 	vldr	s8, [r4]
 800867e:	45c3      	cmp	fp, r8
 8008680:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008684:	ed51 4a08 	vldr	s9, [r1, #-32]	@ 0xffffffe0
 8008688:	ed95 5a00 	vldr	s10, [r5]
 800868c:	444c      	add	r4, r9
 800868e:	ed51 5a06 	vldr	s11, [r1, #-24]	@ 0xffffffe8
 8008692:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008696:	ed95 6a01 	vldr	s12, [r5, #4]
 800869a:	ed51 6a05 	vldr	s13, [r1, #-20]	@ 0xffffffec
 800869e:	444d      	add	r5, r9
 80086a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80086a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086ac:	dbde      	blt.n	800866c <forward_lite_dw_if32of32wf32+0x1a8>
 80086ae:	9906      	ldr	r1, [sp, #24]
 80086b0:	440a      	add	r2, r1
 80086b2:	9905      	ldr	r1, [sp, #20]
 80086b4:	440b      	add	r3, r1
 80086b6:	9904      	ldr	r1, [sp, #16]
 80086b8:	4288      	cmp	r0, r1
 80086ba:	dd10      	ble.n	80086de <forward_lite_dw_if32of32wf32+0x21a>
 80086bc:	460c      	mov	r4, r1
 80086be:	4693      	mov	fp, r2
 80086c0:	461d      	mov	r5, r3
 80086c2:	3401      	adds	r4, #1
 80086c4:	ecfb 6a01 	vldmia	fp!, {s13}
 80086c8:	ecf5 7a01 	vldmia	r5!, {s15}
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086d2:	d1f6      	bne.n	80086c2 <forward_lite_dw_if32of32wf32+0x1fe>
 80086d4:	1a41      	subs	r1, r0, r1
 80086d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80086da:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80086de:	3601      	adds	r6, #1
 80086e0:	4462      	add	r2, ip
 80086e2:	4473      	add	r3, lr
 80086e4:	45b2      	cmp	sl, r6
 80086e6:	d1b6      	bne.n	8008656 <forward_lite_dw_if32of32wf32+0x192>
 80086e8:	9a02      	ldr	r2, [sp, #8]
 80086ea:	eca2 7a01 	vstmia	r2!, {s14}
 80086ee:	9202      	str	r2, [sp, #8]
 80086f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086f2:	4413      	add	r3, r2
 80086f4:	9a08      	ldr	r2, [sp, #32]
 80086f6:	42ba      	cmp	r2, r7
 80086f8:	d1a4      	bne.n	8008644 <forward_lite_dw_if32of32wf32+0x180>
 80086fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80086fc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80086fe:	9a07      	ldr	r2, [sp, #28]
 8008700:	4421      	add	r1, r4
 8008702:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8008704:	3204      	adds	r2, #4
 8008706:	910e      	str	r1, [sp, #56]	@ 0x38
 8008708:	9908      	ldr	r1, [sp, #32]
 800870a:	9207      	str	r2, [sp, #28]
 800870c:	4421      	add	r1, r4
 800870e:	9108      	str	r1, [sp, #32]
 8008710:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008712:	428a      	cmp	r2, r1
 8008714:	d38e      	bcc.n	8008634 <forward_lite_dw_if32of32wf32+0x170>
 8008716:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 800871a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800871c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800871e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008720:	440a      	add	r2, r1
 8008722:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008724:	3301      	adds	r3, #1
 8008726:	920a      	str	r2, [sp, #40]	@ 0x28
 8008728:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800872a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800872c:	440a      	add	r2, r1
 800872e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008730:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008732:	1a52      	subs	r2, r2, r1
 8008734:	920d      	str	r2, [sp, #52]	@ 0x34
 8008736:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8008738:	429a      	cmp	r2, r3
 800873a:	f47f af28 	bne.w	800858e <forward_lite_dw_if32of32wf32+0xca>
 800873e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008740:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008742:	4413      	add	r3, r2
 8008744:	9311      	str	r3, [sp, #68]	@ 0x44
 8008746:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008748:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800874a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800874c:	440a      	add	r2, r1
 800874e:	3301      	adds	r3, #1
 8008750:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008752:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008754:	9312      	str	r3, [sp, #72]	@ 0x48
 8008756:	1a52      	subs	r2, r2, r1
 8008758:	9210      	str	r2, [sp, #64]	@ 0x40
 800875a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800875c:	429a      	cmp	r2, r3
 800875e:	f47f aedf 	bne.w	8008520 <forward_lite_dw_if32of32wf32+0x5c>
 8008762:	b025      	add	sp, #148	@ 0x94
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	2100      	movs	r1, #0
 800876a:	e7a5      	b.n	80086b8 <forward_lite_dw_if32of32wf32+0x1f4>
 800876c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800876e:	eef0 3a43 	vmov.f32	s7, s6
 8008772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008778:	920c      	str	r2, [sp, #48]	@ 0x30
 800877a:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800877c:	1a11      	subs	r1, r2, r0
 800877e:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8008780:	fb02 f101 	mul.w	r1, r2, r1
 8008784:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8008786:	1a12      	subs	r2, r2, r0
 8008788:	e726      	b.n	80085d8 <forward_lite_dw_if32of32wf32+0x114>
 800878a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800878c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800878e:	462a      	mov	r2, r5
 8008790:	442b      	add	r3, r5
 8008792:	e703      	b.n	800859c <forward_lite_dw_if32of32wf32+0xd8>
 8008794:	00000000 	.word	0x00000000
 8008798:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800879c:	2400      	movs	r4, #0
 800879e:	0889      	lsrs	r1, r1, #2
 80087a0:	940e      	str	r4, [sp, #56]	@ 0x38
 80087a2:	941a      	str	r4, [sp, #104]	@ 0x68
 80087a4:	1c4a      	adds	r2, r1, #1
 80087a6:	fb01 9109 	mla	r1, r1, r9, r9
 80087aa:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80087ae:	9105      	str	r1, [sp, #20]
 80087b0:	0111      	lsls	r1, r2, #4
 80087b2:	9104      	str	r1, [sp, #16]
 80087b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087b6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80087b8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80087ba:	440a      	add	r2, r1
 80087bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80087be:	190d      	adds	r5, r1, r4
 80087c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80087c2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087c6:	9506      	str	r5, [sp, #24]
 80087c8:	0092      	lsls	r2, r2, #2
 80087ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80087cc:	9118      	str	r1, [sp, #96]	@ 0x60
 80087ce:	192c      	adds	r4, r5, r4
 80087d0:	921a      	str	r2, [sp, #104]	@ 0x68
 80087d2:	9408      	str	r4, [sp, #32]
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	f1ba 0f00 	cmp.w	sl, #0
 80087da:	ecb2 7a01 	vldmia	r2!, {s14}
 80087de:	ee27 7a23 	vmul.f32	s14, s14, s7
 80087e2:	9206      	str	r2, [sp, #24]
 80087e4:	dd4f      	ble.n	8008886 <forward_lite_dw_if32of32wf32+0x3c2>
 80087e6:	9907      	ldr	r1, [sp, #28]
 80087e8:	2700      	movs	r7, #0
 80087ea:	f1b8 0f00 	cmp.w	r8, #0
 80087ee:	dd5b      	ble.n	80088a8 <forward_lite_dw_if32of32wf32+0x3e4>
 80087f0:	9c01      	ldr	r4, [sp, #4]
 80087f2:	f103 0210 	add.w	r2, r3, #16
 80087f6:	2600      	movs	r6, #0
 80087f8:	190d      	adds	r5, r1, r4
 80087fa:	460c      	mov	r4, r1
 80087fc:	eb04 0c0b 	add.w	ip, r4, fp
 8008800:	ed12 4a03 	vldr	s8, [r2, #-12]
 8008804:	ed52 4a04 	vldr	s9, [r2, #-16]
 8008808:	3604      	adds	r6, #4
 800880a:	eddc 7a00 	vldr	s15, [ip]
 800880e:	eb05 0c0b 	add.w	ip, r5, fp
 8008812:	ed94 5a00 	vldr	s10, [r4]
 8008816:	4546      	cmp	r6, r8
 8008818:	ee67 7a84 	vmul.f32	s15, s15, s8
 800881c:	edd5 6a00 	vldr	s13, [r5]
 8008820:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008824:	444c      	add	r4, r9
 8008826:	ed12 6a01 	vldr	s12, [r2, #-4]
 800882a:	444d      	add	r5, r9
 800882c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008830:	f102 0210 	add.w	r2, r2, #16
 8008834:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8008838:	eddc 6a00 	vldr	s13, [ip]
 800883c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008844:	dbda      	blt.n	80087fc <forward_lite_dw_if32of32wf32+0x338>
 8008846:	9a05      	ldr	r2, [sp, #20]
 8008848:	4411      	add	r1, r2
 800884a:	9a04      	ldr	r2, [sp, #16]
 800884c:	4413      	add	r3, r2
 800884e:	4672      	mov	r2, lr
 8008850:	4290      	cmp	r0, r2
 8008852:	dd11      	ble.n	8008878 <forward_lite_dw_if32of32wf32+0x3b4>
 8008854:	4615      	mov	r5, r2
 8008856:	460c      	mov	r4, r1
 8008858:	461e      	mov	r6, r3
 800885a:	3501      	adds	r5, #1
 800885c:	edd4 7a00 	vldr	s15, [r4]
 8008860:	ecf6 6a01 	vldmia	r6!, {s13}
 8008864:	445c      	add	r4, fp
 8008866:	4285      	cmp	r5, r0
 8008868:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800886c:	d1f5      	bne.n	800885a <forward_lite_dw_if32of32wf32+0x396>
 800886e:	1a82      	subs	r2, r0, r2
 8008870:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008874:	fb02 110b 	mla	r1, r2, fp, r1
 8008878:	9a02      	ldr	r2, [sp, #8]
 800887a:	3701      	adds	r7, #1
 800887c:	4411      	add	r1, r2
 800887e:	4557      	cmp	r7, sl
 8008880:	9a03      	ldr	r2, [sp, #12]
 8008882:	4413      	add	r3, r2
 8008884:	d1b1      	bne.n	80087ea <forward_lite_dw_if32of32wf32+0x326>
 8008886:	9a08      	ldr	r2, [sp, #32]
 8008888:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800888a:	eca2 7a01 	vstmia	r2!, {s14}
 800888e:	9208      	str	r2, [sp, #32]
 8008890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008892:	4413      	add	r3, r2
 8008894:	9a06      	ldr	r2, [sp, #24]
 8008896:	428a      	cmp	r2, r1
 8008898:	d19c      	bne.n	80087d4 <forward_lite_dw_if32of32wf32+0x310>
 800889a:	9a07      	ldr	r2, [sp, #28]
 800889c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800889e:	3204      	adds	r2, #4
 80088a0:	428a      	cmp	r2, r1
 80088a2:	9207      	str	r2, [sp, #28]
 80088a4:	d386      	bcc.n	80087b4 <forward_lite_dw_if32of32wf32+0x2f0>
 80088a6:	e738      	b.n	800871a <forward_lite_dw_if32of32wf32+0x256>
 80088a8:	2200      	movs	r2, #0
 80088aa:	e7d1      	b.n	8008850 <forward_lite_dw_if32of32wf32+0x38c>

080088ac <forward_lite_dense_if32of32wf32>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	ed2d 8b0c 	vpush	{d8-d13}
 80088b4:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	@ 0x54
 80088b8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80088bc:	4287      	cmp	r7, r0
 80088be:	f240 8105 	bls.w	8008acc <forward_lite_dense_if32of32wf32+0x220>
 80088c2:	f1a6 0810 	sub.w	r8, r6, #16
 80088c6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80088ca:	4605      	mov	r5, r0
 80088cc:	f006 0b0f 	and.w	fp, r6, #15
 80088d0:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80088d4:	f108 0801 	add.w	r8, r8, #1
 80088d8:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80088dc:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80088e0:	2e0f      	cmp	r6, #15
 80088e2:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8008af8 <forward_lite_dense_if32of32wf32+0x24c>
 80088e6:	f240 8102 	bls.w	8008aee <forward_lite_dense_if32of32wf32+0x242>
 80088ea:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 80088ee:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 80088f2:	46b6      	mov	lr, r6
 80088f4:	ed54 6a0f 	vldr	s13, [r4, #-60]	@ 0xffffffc4
 80088f8:	f1ae 0e10 	sub.w	lr, lr, #16
 80088fc:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 8008900:	3440      	adds	r4, #64	@ 0x40
 8008902:	ed5c 4a10 	vldr	s9, [ip, #-64]	@ 0xffffffc0
 8008906:	f1be 0f0f 	cmp.w	lr, #15
 800890a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800890e:	ed14 5a20 	vldr	s10, [r4, #-128]	@ 0xffffff80
 8008912:	ed5c 5a0e 	vldr	s11, [ip, #-56]	@ 0xffffffc8
 8008916:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 800891a:	ed14 6a1e 	vldr	s12, [r4, #-120]	@ 0xffffff88
 800891e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008922:	ed54 6a1d 	vldr	s13, [r4, #-116]	@ 0xffffff8c
 8008926:	ed1c da1d 	vldr	s26, [ip, #-116]	@ 0xffffff8c
 800892a:	ed5c ca1c 	vldr	s25, [ip, #-112]	@ 0xffffff90
 800892e:	ed14 ca1c 	vldr	s24, [r4, #-112]	@ 0xffffff90
 8008932:	ed5c ba1b 	vldr	s23, [ip, #-108]	@ 0xffffff94
 8008936:	ed14 ba1b 	vldr	s22, [r4, #-108]	@ 0xffffff94
 800893a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800893e:	ed5c aa1a 	vldr	s21, [ip, #-104]	@ 0xffffff98
 8008942:	ed14 aa1a 	vldr	s20, [r4, #-104]	@ 0xffffff98
 8008946:	ed5c 9a19 	vldr	s19, [ip, #-100]	@ 0xffffff9c
 800894a:	ed14 9a19 	vldr	s18, [r4, #-100]	@ 0xffffff9c
 800894e:	ed5c 8a18 	vldr	s17, [ip, #-96]	@ 0xffffffa0
 8008952:	ed14 8a18 	vldr	s16, [r4, #-96]	@ 0xffffffa0
 8008956:	eeed 7a26 	vfma.f32	s15, s26, s13
 800895a:	ed1c 0a17 	vldr	s0, [ip, #-92]	@ 0xffffffa4
 800895e:	ed54 0a17 	vldr	s1, [r4, #-92]	@ 0xffffffa4
 8008962:	ed1c 1a16 	vldr	s2, [ip, #-88]	@ 0xffffffa8
 8008966:	ed54 1a16 	vldr	s3, [r4, #-88]	@ 0xffffffa8
 800896a:	ed1c 2a15 	vldr	s4, [ip, #-84]	@ 0xffffffac
 800896e:	ed54 2a15 	vldr	s5, [r4, #-84]	@ 0xffffffac
 8008972:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008976:	ed1c 3a14 	vldr	s6, [ip, #-80]	@ 0xffffffb0
 800897a:	ed54 3a14 	vldr	s7, [r4, #-80]	@ 0xffffffb0
 800897e:	ed1c 4a13 	vldr	s8, [ip, #-76]	@ 0xffffffb4
 8008982:	ed54 4a13 	vldr	s9, [r4, #-76]	@ 0xffffffb4
 8008986:	ed1c 5a12 	vldr	s10, [ip, #-72]	@ 0xffffffb8
 800898a:	ed54 5a12 	vldr	s11, [r4, #-72]	@ 0xffffffb8
 800898e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008992:	ed1c 6a11 	vldr	s12, [ip, #-68]	@ 0xffffffbc
 8008996:	ed54 6a11 	vldr	s13, [r4, #-68]	@ 0xffffffbc
 800899a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800899e:	eee9 7a89 	vfma.f32	s15, s19, s18
 80089a2:	eee8 7a88 	vfma.f32	s15, s17, s16
 80089a6:	eee0 7a20 	vfma.f32	s15, s0, s1
 80089aa:	eee1 7a21 	vfma.f32	s15, s2, s3
 80089ae:	eee2 7a22 	vfma.f32	s15, s4, s5
 80089b2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80089b6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089ba:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089be:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089c6:	d895      	bhi.n	80088f4 <forward_lite_dense_if32of32wf32+0x48>
 80089c8:	eb02 0e0a 	add.w	lr, r2, sl
 80089cc:	465c      	mov	r4, fp
 80089ce:	46c4      	mov	ip, r8
 80089d0:	2c00      	cmp	r4, #0
 80089d2:	d075      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 80089d4:	eddc 6a00 	vldr	s13, [ip]
 80089d8:	2c01      	cmp	r4, #1
 80089da:	edde 7a00 	vldr	s15, [lr]
 80089de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089e2:	d06d      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 80089e4:	eddc 6a01 	vldr	s13, [ip, #4]
 80089e8:	2c02      	cmp	r4, #2
 80089ea:	edde 7a01 	vldr	s15, [lr, #4]
 80089ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089f2:	d065      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 80089f4:	eddc 6a02 	vldr	s13, [ip, #8]
 80089f8:	2c03      	cmp	r4, #3
 80089fa:	edde 7a02 	vldr	s15, [lr, #8]
 80089fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a02:	d05d      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a04:	eddc 6a03 	vldr	s13, [ip, #12]
 8008a08:	2c04      	cmp	r4, #4
 8008a0a:	edde 7a03 	vldr	s15, [lr, #12]
 8008a0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a12:	d055      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a14:	eddc 6a04 	vldr	s13, [ip, #16]
 8008a18:	2c05      	cmp	r4, #5
 8008a1a:	edde 7a04 	vldr	s15, [lr, #16]
 8008a1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a22:	d04d      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a24:	eddc 6a05 	vldr	s13, [ip, #20]
 8008a28:	2c06      	cmp	r4, #6
 8008a2a:	edde 7a05 	vldr	s15, [lr, #20]
 8008a2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a32:	d045      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a34:	eddc 6a06 	vldr	s13, [ip, #24]
 8008a38:	2c07      	cmp	r4, #7
 8008a3a:	edde 7a06 	vldr	s15, [lr, #24]
 8008a3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a42:	d03d      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a44:	eddc 6a07 	vldr	s13, [ip, #28]
 8008a48:	2c08      	cmp	r4, #8
 8008a4a:	edde 7a07 	vldr	s15, [lr, #28]
 8008a4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a52:	d035      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a54:	eddc 6a08 	vldr	s13, [ip, #32]
 8008a58:	2c09      	cmp	r4, #9
 8008a5a:	edde 7a08 	vldr	s15, [lr, #32]
 8008a5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a62:	d02d      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a64:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 8008a68:	2c0a      	cmp	r4, #10
 8008a6a:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 8008a6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a72:	d025      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a74:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 8008a78:	2c0b      	cmp	r4, #11
 8008a7a:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 8008a7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a82:	d01d      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a84:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 8008a88:	2c0c      	cmp	r4, #12
 8008a8a:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 8008a8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a92:	d015      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008a94:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 8008a98:	3c0d      	subs	r4, #13
 8008a9a:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 8008a9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aa2:	d00d      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008aa4:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 8008aa8:	2c01      	cmp	r4, #1
 8008aaa:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 8008aae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ab2:	d005      	beq.n	8008ac0 <forward_lite_dense_if32of32wf32+0x214>
 8008ab4:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 8008ab8:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 8008abc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ac0:	eca5 7a01 	vstmia	r5!, {s14}
 8008ac4:	42af      	cmp	r7, r5
 8008ac6:	444a      	add	r2, r9
 8008ac8:	f63f af0a 	bhi.w	80088e0 <forward_lite_dense_if32of32wf32+0x34>
 8008acc:	b15b      	cbz	r3, 8008ae6 <forward_lite_dense_if32of32wf32+0x23a>
 8008ace:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008ad0:	b14a      	cbz	r2, 8008ae6 <forward_lite_dense_if32of32wf32+0x23a>
 8008ad2:	edd0 7a00 	vldr	s15, [r0]
 8008ad6:	ecb3 7a01 	vldmia	r3!, {s14}
 8008ada:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ade:	ece0 7a01 	vstmia	r0!, {s15}
 8008ae2:	4287      	cmp	r7, r0
 8008ae4:	d1f5      	bne.n	8008ad2 <forward_lite_dense_if32of32wf32+0x226>
 8008ae6:	ecbd 8b0c 	vpop	{d8-d13}
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aee:	4634      	mov	r4, r6
 8008af0:	4696      	mov	lr, r2
 8008af2:	468c      	mov	ip, r1
 8008af4:	e76c      	b.n	80089d0 <forward_lite_dense_if32of32wf32+0x124>
 8008af6:	bf00      	nop
 8008af8:	00000000 	.word	0x00000000

08008afc <st_int8_copy>:
 8008afc:	4288      	cmp	r0, r1
 8008afe:	d010      	beq.n	8008b22 <st_int8_copy+0x26>
 8008b00:	b17a      	cbz	r2, 8008b22 <st_int8_copy+0x26>
 8008b02:	4288      	cmp	r0, r1
 8008b04:	eb00 0302 	add.w	r3, r0, r2
 8008b08:	d20c      	bcs.n	8008b24 <st_int8_copy+0x28>
 8008b0a:	428b      	cmp	r3, r1
 8008b0c:	d90a      	bls.n	8008b24 <st_int8_copy+0x28>
 8008b0e:	4283      	cmp	r3, r0
 8008b10:	440a      	add	r2, r1
 8008b12:	d906      	bls.n	8008b22 <st_int8_copy+0x26>
 8008b14:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008b18:	4283      	cmp	r3, r0
 8008b1a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008b1e:	d1f9      	bne.n	8008b14 <st_int8_copy+0x18>
 8008b20:	4770      	bx	lr
 8008b22:	4770      	bx	lr
 8008b24:	078b      	lsls	r3, r1, #30
 8008b26:	d102      	bne.n	8008b2e <st_int8_copy+0x32>
 8008b28:	e008      	b.n	8008b3c <st_int8_copy+0x40>
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	d04d      	beq.n	8008bca <st_int8_copy+0xce>
 8008b2e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008b32:	3a01      	subs	r2, #1
 8008b34:	f801 3b01 	strb.w	r3, [r1], #1
 8008b38:	078b      	lsls	r3, r1, #30
 8008b3a:	d1f6      	bne.n	8008b2a <st_int8_copy+0x2e>
 8008b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b40:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008b44:	d05e      	beq.n	8008c04 <st_int8_copy+0x108>
 8008b46:	ea40 0301 	orr.w	r3, r0, r1
 8008b4a:	075b      	lsls	r3, r3, #29
 8008b4c:	d13e      	bne.n	8008bcc <st_int8_copy+0xd0>
 8008b4e:	f10e 33ff 	add.w	r3, lr, #4294967295	@ 0xffffffff
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d93a      	bls.n	8008bcc <st_int8_copy+0xd0>
 8008b56:	f100 0310 	add.w	r3, r0, #16
 8008b5a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008b5e:	f101 0c10 	add.w	ip, r1, #16
 8008b62:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008b66:	3310      	adds	r3, #16
 8008b68:	f10c 0c10 	add.w	ip, ip, #16
 8008b6c:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8008b70:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8008b74:	4573      	cmp	r3, lr
 8008b76:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8008b7a:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8008b7e:	d1f2      	bne.n	8008b66 <st_int8_copy+0x6a>
 8008b80:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008b84:	4421      	add	r1, r4
 8008b86:	4420      	add	r0, r4
 8008b88:	f002 0203 	and.w	r2, r2, #3
 8008b8c:	b16b      	cbz	r3, 8008baa <st_int8_copy+0xae>
 8008b8e:	6804      	ldr	r4, [r0, #0]
 8008b90:	600c      	str	r4, [r1, #0]
 8008b92:	1e5c      	subs	r4, r3, #1
 8008b94:	d005      	beq.n	8008ba2 <st_int8_copy+0xa6>
 8008b96:	6845      	ldr	r5, [r0, #4]
 8008b98:	2c01      	cmp	r4, #1
 8008b9a:	604d      	str	r5, [r1, #4]
 8008b9c:	d001      	beq.n	8008ba2 <st_int8_copy+0xa6>
 8008b9e:	6884      	ldr	r4, [r0, #8]
 8008ba0:	608c      	str	r4, [r1, #8]
 8008ba2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008ba6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008baa:	b162      	cbz	r2, 8008bc6 <st_int8_copy+0xca>
 8008bac:	f990 3000 	ldrsb.w	r3, [r0]
 8008bb0:	3a01      	subs	r2, #1
 8008bb2:	700b      	strb	r3, [r1, #0]
 8008bb4:	d007      	beq.n	8008bc6 <st_int8_copy+0xca>
 8008bb6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008bba:	2a01      	cmp	r2, #1
 8008bbc:	704b      	strb	r3, [r1, #1]
 8008bbe:	d002      	beq.n	8008bc6 <st_int8_copy+0xca>
 8008bc0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8008bc4:	708b      	strb	r3, [r1, #2]
 8008bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bca:	4770      	bx	lr
 8008bcc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8008bd6:	4684      	mov	ip, r0
 8008bd8:	f8dc 8000 	ldr.w	r8, [ip]
 8008bdc:	3310      	adds	r3, #16
 8008bde:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8008be2:	f10c 0c10 	add.w	ip, ip, #16
 8008be6:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8008bea:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8008bee:	f843 8c10 	str.w	r8, [r3, #-16]
 8008bf2:	f843 7c0c 	str.w	r7, [r3, #-12]
 8008bf6:	f843 6c08 	str.w	r6, [r3, #-8]
 8008bfa:	f843 5c04 	str.w	r5, [r3, #-4]
 8008bfe:	459e      	cmp	lr, r3
 8008c00:	d1ea      	bne.n	8008bd8 <st_int8_copy+0xdc>
 8008c02:	e7bd      	b.n	8008b80 <st_int8_copy+0x84>
 8008c04:	0893      	lsrs	r3, r2, #2
 8008c06:	f002 0203 	and.w	r2, r2, #3
 8008c0a:	e7bf      	b.n	8008b8c <st_int8_copy+0x90>

08008c0c <ai_sum>:
 8008c0c:	edd1 7a00 	vldr	s15, [r1]
 8008c10:	ed92 7a00 	vldr	s14, [r2]
 8008c14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c18:	edc0 7a00 	vstr	s15, [r0]
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop

08008c20 <ai_sum_f32>:
 8008c20:	edd1 7a00 	vldr	s15, [r1]
 8008c24:	ed92 7a00 	vldr	s14, [r2]
 8008c28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c2c:	edc0 7a00 	vstr	s15, [r0]
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <ai_sum_buffer_f32>:
 8008c34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008c38:	4298      	cmp	r0, r3
 8008c3a:	d209      	bcs.n	8008c50 <ai_sum_buffer_f32+0x1c>
 8008c3c:	ecf1 7a01 	vldmia	r1!, {s15}
 8008c40:	ecb2 7a01 	vldmia	r2!, {s14}
 8008c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c48:	ece0 7a01 	vstmia	r0!, {s15}
 8008c4c:	4283      	cmp	r3, r0
 8008c4e:	d8f5      	bhi.n	8008c3c <ai_sum_buffer_f32+0x8>
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop

08008c54 <ai_mul_f32>:
 8008c54:	edd1 7a00 	vldr	s15, [r1]
 8008c58:	ed92 7a00 	vldr	s14, [r2]
 8008c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c60:	edc0 7a00 	vstr	s15, [r0]
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop

08008c68 <ai_mul_buffer_f32>:
 8008c68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008c6c:	4298      	cmp	r0, r3
 8008c6e:	d209      	bcs.n	8008c84 <ai_mul_buffer_f32+0x1c>
 8008c70:	ecf1 7a01 	vldmia	r1!, {s15}
 8008c74:	ecb2 7a01 	vldmia	r2!, {s14}
 8008c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c7c:	ece0 7a01 	vstmia	r0!, {s15}
 8008c80:	4283      	cmp	r3, r0
 8008c82:	d8f5      	bhi.n	8008c70 <ai_mul_buffer_f32+0x8>
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop

08008c88 <ai_max>:
 8008c88:	edd2 7a00 	vldr	s15, [r2]
 8008c8c:	ed91 7a00 	vldr	s14, [r1]
 8008c90:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008c94:	edc0 7a00 	vstr	s15, [r0]
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop

08008c9c <ai_array_to_buffer_fmt>:
 8008c9c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d050      	beq.n	8008d46 <ai_array_to_buffer_fmt+0xaa>
 8008ca4:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 8008ca8:	4b29      	ldr	r3, [pc, #164]	@ (8008d50 <ai_array_to_buffer_fmt+0xb4>)
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d00b      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008cae:	dc1c      	bgt.n	8008cea <ai_array_to_buffer_fmt+0x4e>
 8008cb0:	4b28      	ldr	r3, [pc, #160]	@ (8008d54 <ai_array_to_buffer_fmt+0xb8>)
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d007      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008cb6:	dd0b      	ble.n	8008cd0 <ai_array_to_buffer_fmt+0x34>
 8008cb8:	4b27      	ldr	r3, [pc, #156]	@ (8008d58 <ai_array_to_buffer_fmt+0xbc>)
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d003      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008cbe:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d131      	bne.n	8008d2a <ai_array_to_buffer_fmt+0x8e>
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008ccc:	4318      	orrs	r0, r3
 8008cce:	4770      	bx	lr
 8008cd0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d0f6      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008cd8:	dd2c      	ble.n	8008d34 <ai_array_to_buffer_fmt+0x98>
 8008cda:	4b20      	ldr	r3, [pc, #128]	@ (8008d5c <ai_array_to_buffer_fmt+0xc0>)
 8008cdc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	bf18      	it	ne
 8008ce4:	2340      	movne	r3, #64	@ 0x40
 8008ce6:	4318      	orrs	r0, r3
 8008ce8:	4770      	bx	lr
 8008cea:	4b1d      	ldr	r3, [pc, #116]	@ (8008d60 <ai_array_to_buffer_fmt+0xc4>)
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d0ea      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008cf0:	dd0e      	ble.n	8008d10 <ai_array_to_buffer_fmt+0x74>
 8008cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8008d64 <ai_array_to_buffer_fmt+0xc8>)
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d0e6      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008cf8:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d0e2      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008d00:	4b19      	ldr	r3, [pc, #100]	@ (8008d68 <ai_array_to_buffer_fmt+0xcc>)
 8008d02:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008d06:	429a      	cmp	r2, r3
 8008d08:	bf18      	it	ne
 8008d0a:	2340      	movne	r3, #64	@ 0x40
 8008d0c:	4318      	orrs	r0, r3
 8008d0e:	4770      	bx	lr
 8008d10:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d0d6      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008d18:	3307      	adds	r3, #7
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d0d3      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008d1e:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 8008d22:	429a      	cmp	r2, r3
 8008d24:	bf18      	it	ne
 8008d26:	2340      	movne	r3, #64	@ 0x40
 8008d28:	e7ce      	b.n	8008cc8 <ai_array_to_buffer_fmt+0x2c>
 8008d2a:	4b10      	ldr	r3, [pc, #64]	@ (8008d6c <ai_array_to_buffer_fmt+0xd0>)
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	bf18      	it	ne
 8008d30:	2340      	movne	r3, #64	@ 0x40
 8008d32:	e7c9      	b.n	8008cc8 <ai_array_to_buffer_fmt+0x2c>
 8008d34:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d0c4      	beq.n	8008cc6 <ai_array_to_buffer_fmt+0x2a>
 8008d3c:	3380      	adds	r3, #128	@ 0x80
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	bf18      	it	ne
 8008d42:	2340      	movne	r3, #64	@ 0x40
 8008d44:	e7c0      	b.n	8008cc8 <ai_array_to_buffer_fmt+0x2c>
 8008d46:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <ai_array_to_buffer_fmt+0xd4>)
 8008d48:	4003      	ands	r3, r0
 8008d4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d4e:	e7bb      	b.n	8008cc8 <ai_array_to_buffer_fmt+0x2c>
 8008d50:	00840040 	.word	0x00840040
 8008d54:	00040840 	.word	0x00040840
 8008d58:	00041040 	.word	0x00041040
 8008d5c:	00040447 	.word	0x00040447
 8008d60:	00840840 	.word	0x00840840
 8008d64:	00841040 	.word	0x00841040
 8008d68:	0084084f 	.word	0x0084084f
 8008d6c:	0004084f 	.word	0x0004084f
 8008d70:	00803fff 	.word	0x00803fff

08008d74 <ai_array_get_byte_size>:
 8008d74:	b319      	cbz	r1, 8008dbe <ai_array_get_byte_size+0x4a>
 8008d76:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008d7a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008d7e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8008d82:	11c0      	asrs	r0, r0, #7
 8008d84:	fb03 f101 	mul.w	r1, r3, r1
 8008d88:	2a04      	cmp	r2, #4
 8008d8a:	f101 0107 	add.w	r1, r1, #7
 8008d8e:	f021 0107 	bic.w	r1, r1, #7
 8008d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8008d96:	d00b      	beq.n	8008db0 <ai_array_get_byte_size+0x3c>
 8008d98:	2a08      	cmp	r2, #8
 8008d9a:	d002      	beq.n	8008da2 <ai_array_get_byte_size+0x2e>
 8008d9c:	3107      	adds	r1, #7
 8008d9e:	08c8      	lsrs	r0, r1, #3
 8008da0:	4770      	bx	lr
 8008da2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008da6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008daa:	3107      	adds	r1, #7
 8008dac:	08c8      	lsrs	r0, r1, #3
 8008dae:	4770      	bx	lr
 8008db0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008db4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008db8:	3107      	adds	r1, #7
 8008dba:	08c8      	lsrs	r0, r1, #3
 8008dbc:	4770      	bx	lr
 8008dbe:	4608      	mov	r0, r1
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop

08008dc4 <ai_array_get_data_byte_size>:
 8008dc4:	b161      	cbz	r1, 8008de0 <ai_array_get_data_byte_size+0x1c>
 8008dc6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008dca:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8008dce:	fb03 f101 	mul.w	r1, r3, r1
 8008dd2:	1dc8      	adds	r0, r1, #7
 8008dd4:	f020 0007 	bic.w	r0, r0, #7
 8008dd8:	40d0      	lsrs	r0, r2
 8008dda:	3007      	adds	r0, #7
 8008ddc:	08c0      	lsrs	r0, r0, #3
 8008dde:	4770      	bx	lr
 8008de0:	4608      	mov	r0, r1
 8008de2:	4770      	bx	lr

08008de4 <ai_version_get>:
 8008de4:	0212      	lsls	r2, r2, #8
 8008de6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008dea:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008dee:	4770      	bx	lr

08008df0 <get_tensor_byte_size>:
 8008df0:	b430      	push	{r4, r5}
 8008df2:	6985      	ldr	r5, [r0, #24]
 8008df4:	68c4      	ldr	r4, [r0, #12]
 8008df6:	6941      	ldr	r1, [r0, #20]
 8008df8:	4b06      	ldr	r3, [pc, #24]	@ (8008e14 <get_tensor_byte_size+0x24>)
 8008dfa:	6828      	ldr	r0, [r5, #0]
 8008dfc:	4a06      	ldr	r2, [pc, #24]	@ (8008e18 <get_tensor_byte_size+0x28>)
 8008dfe:	4003      	ands	r3, r0
 8008e00:	68c9      	ldr	r1, [r1, #12]
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	fb01 f000 	mul.w	r0, r1, r0
 8008e0a:	d101      	bne.n	8008e10 <get_tensor_byte_size+0x20>
 8008e0c:	3007      	adds	r0, #7
 8008e0e:	08c0      	lsrs	r0, r0, #3
 8008e10:	bc30      	pop	{r4, r5}
 8008e12:	4770      	bx	lr
 8008e14:	017fffff 	.word	0x017fffff
 8008e18:	000400c0 	.word	0x000400c0

08008e1c <core_get_broadcasted_shape>:
 8008e1c:	b470      	push	{r4, r5, r6}
 8008e1e:	6804      	ldr	r4, [r0, #0]
 8008e20:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008e24:	b304      	cbz	r4, 8008e68 <core_get_broadcasted_shape+0x4c>
 8008e26:	4623      	mov	r3, r4
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	429c      	cmp	r4, r3
 8008e2c:	d917      	bls.n	8008e5e <core_get_broadcasted_shape+0x42>
 8008e2e:	6815      	ldr	r5, [r2, #0]
 8008e30:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008e34:	2401      	movs	r4, #1
 8008e36:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8008e3a:	d202      	bcs.n	8008e42 <core_get_broadcasted_shape+0x26>
 8008e3c:	6854      	ldr	r4, [r2, #4]
 8008e3e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8008e42:	680e      	ldr	r6, [r1, #0]
 8008e44:	2501      	movs	r5, #1
 8008e46:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8008e4a:	d202      	bcs.n	8008e52 <core_get_broadcasted_shape+0x36>
 8008e4c:	684d      	ldr	r5, [r1, #4]
 8008e4e:	f855 500c 	ldr.w	r5, [r5, ip]
 8008e52:	42ac      	cmp	r4, r5
 8008e54:	bf38      	it	cc
 8008e56:	462c      	movcc	r4, r5
 8008e58:	6845      	ldr	r5, [r0, #4]
 8008e5a:	f845 400c 	str.w	r4, [r5, ip]
 8008e5e:	b11b      	cbz	r3, 8008e68 <core_get_broadcasted_shape+0x4c>
 8008e60:	6804      	ldr	r4, [r0, #0]
 8008e62:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008e66:	e7df      	b.n	8008e28 <core_get_broadcasted_shape+0xc>
 8008e68:	bc70      	pop	{r4, r5, r6}
 8008e6a:	4770      	bx	lr

08008e6c <core_compute_offsets>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	e9d1 5c00 	ldrd	r5, ip, [r1]
 8008e74:	6857      	ldr	r7, [r2, #4]
 8008e76:	b085      	sub	sp, #20
 8008e78:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008e7c:	687e      	ldr	r6, [r7, #4]
 8008e7e:	1ba1      	subs	r1, r4, r6
 8008e80:	bf18      	it	ne
 8008e82:	2101      	movne	r1, #1
 8008e84:	f5b5 6fa0 	cmp.w	r5, #1280	@ 0x500
 8008e88:	9103      	str	r1, [sp, #12]
 8008e8a:	d378      	bcc.n	8008f7e <core_compute_offsets+0x112>
 8008e8c:	f8dc 9010 	ldr.w	r9, [ip, #16]
 8008e90:	fb09 fe04 	mul.w	lr, r9, r4
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	f8d0 b000 	ldr.w	fp, [r0]
 8008e9a:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8008e9e:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 8008ea2:	bf2c      	ite	cs
 8008ea4:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 8008ea8:	f04f 0a01 	movcc.w	sl, #1
 8008eac:	9201      	str	r2, [sp, #4]
 8008eae:	ebb9 0c0a 	subs.w	ip, r9, sl
 8008eb2:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 8008eb6:	bf18      	it	ne
 8008eb8:	f04f 0c01 	movne.w	ip, #1
 8008ebc:	ebb5 0708 	subs.w	r7, r5, r8
 8008ec0:	9202      	str	r2, [sp, #8]
 8008ec2:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8008ec6:	bf18      	it	ne
 8008ec8:	2701      	movne	r7, #1
 8008eca:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 8008ece:	d321      	bcc.n	8008f14 <core_compute_offsets+0xa8>
 8008ed0:	42b4      	cmp	r4, r6
 8008ed2:	bf0c      	ite	eq
 8008ed4:	461a      	moveq	r2, r3
 8008ed6:	2200      	movne	r2, #0
 8008ed8:	6841      	ldr	r1, [r0, #4]
 8008eda:	604a      	str	r2, [r1, #4]
 8008edc:	f8d0 b000 	ldr.w	fp, [r0]
 8008ee0:	f5bb 6fa0 	cmp.w	fp, #1280	@ 0x500
 8008ee4:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8008ee8:	d314      	bcc.n	8008f14 <core_compute_offsets+0xa8>
 8008eea:	9a03      	ldr	r2, [sp, #12]
 8008eec:	45d1      	cmp	r9, sl
 8008eee:	bf14      	ite	ne
 8008ef0:	2200      	movne	r2, #0
 8008ef2:	f002 0201 	andeq.w	r2, r2, #1
 8008ef6:	42b4      	cmp	r4, r6
 8008ef8:	bf14      	ite	ne
 8008efa:	f04f 0900 	movne.w	r9, #0
 8008efe:	f00c 0901 	andeq.w	r9, ip, #1
 8008f02:	6846      	ldr	r6, [r0, #4]
 8008f04:	fb04 2219 	mls	r2, r4, r9, r2
 8008f08:	fb03 f202 	mul.w	r2, r3, r2
 8008f0c:	6132      	str	r2, [r6, #16]
 8008f0e:	6802      	ldr	r2, [r0, #0]
 8008f10:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8008f14:	2a02      	cmp	r2, #2
 8008f16:	fb0e f607 	mul.w	r6, lr, r7
 8008f1a:	d911      	bls.n	8008f40 <core_compute_offsets+0xd4>
 8008f1c:	9a03      	ldr	r2, [sp, #12]
 8008f1e:	4545      	cmp	r5, r8
 8008f20:	bf14      	ite	ne
 8008f22:	2200      	movne	r2, #0
 8008f24:	f002 0201 	andeq.w	r2, r2, #1
 8008f28:	ea0c 0202 	and.w	r2, ip, r2
 8008f2c:	1b92      	subs	r2, r2, r6
 8008f2e:	fb04 240c 	mla	r4, r4, ip, r2
 8008f32:	6842      	ldr	r2, [r0, #4]
 8008f34:	fb03 f404 	mul.w	r4, r3, r4
 8008f38:	6094      	str	r4, [r2, #8]
 8008f3a:	6802      	ldr	r2, [r0, #0]
 8008f3c:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8008f40:	e9dd 4101 	ldrd	r4, r1, [sp, #4]
 8008f44:	428c      	cmp	r4, r1
 8008f46:	d118      	bne.n	8008f7a <core_compute_offsets+0x10e>
 8008f48:	b1bf      	cbz	r7, 8008f7a <core_compute_offsets+0x10e>
 8008f4a:	9903      	ldr	r1, [sp, #12]
 8008f4c:	ea01 010c 	and.w	r1, r1, ip
 8008f50:	2a03      	cmp	r2, #3
 8008f52:	d90f      	bls.n	8008f74 <core_compute_offsets+0x108>
 8008f54:	fb0e f505 	mul.w	r5, lr, r5
 8008f58:	e9dd 2401 	ldrd	r2, r4, [sp, #4]
 8008f5c:	ebb2 0c04 	subs.w	ip, r2, r4
 8008f60:	6842      	ldr	r2, [r0, #4]
 8008f62:	bf18      	it	ne
 8008f64:	f04f 0c01 	movne.w	ip, #1
 8008f68:	fb0c 1115 	mls	r1, ip, r5, r1
 8008f6c:	440e      	add	r6, r1
 8008f6e:	fb06 f303 	mul.w	r3, r6, r3
 8008f72:	60d3      	str	r3, [r2, #12]
 8008f74:	b005      	add	sp, #20
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	e7e8      	b.n	8008f50 <core_compute_offsets+0xe4>
 8008f7e:	46a6      	mov	lr, r4
 8008f80:	f04f 0901 	mov.w	r9, #1
 8008f84:	e786      	b.n	8008e94 <core_compute_offsets+0x28>
 8008f86:	bf00      	nop

08008f88 <__cvt>:
 8008f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8a:	ed2d 8b02 	vpush	{d8}
 8008f8e:	eeb0 8b40 	vmov.f64	d8, d0
 8008f92:	b085      	sub	sp, #20
 8008f94:	4617      	mov	r7, r2
 8008f96:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008f98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f9a:	ee18 2a90 	vmov	r2, s17
 8008f9e:	f025 0520 	bic.w	r5, r5, #32
 8008fa2:	2a00      	cmp	r2, #0
 8008fa4:	bfb6      	itet	lt
 8008fa6:	222d      	movlt	r2, #45	@ 0x2d
 8008fa8:	2200      	movge	r2, #0
 8008faa:	eeb1 8b40 	vneglt.f64	d8, d0
 8008fae:	2d46      	cmp	r5, #70	@ 0x46
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	d004      	beq.n	8008fc0 <__cvt+0x38>
 8008fb6:	2d45      	cmp	r5, #69	@ 0x45
 8008fb8:	d100      	bne.n	8008fbc <__cvt+0x34>
 8008fba:	3401      	adds	r4, #1
 8008fbc:	2102      	movs	r1, #2
 8008fbe:	e000      	b.n	8008fc2 <__cvt+0x3a>
 8008fc0:	2103      	movs	r1, #3
 8008fc2:	ab03      	add	r3, sp, #12
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	ab02      	add	r3, sp, #8
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	4622      	mov	r2, r4
 8008fcc:	4633      	mov	r3, r6
 8008fce:	eeb0 0b48 	vmov.f64	d0, d8
 8008fd2:	f000 fed9 	bl	8009d88 <_dtoa_r>
 8008fd6:	2d47      	cmp	r5, #71	@ 0x47
 8008fd8:	d114      	bne.n	8009004 <__cvt+0x7c>
 8008fda:	07fb      	lsls	r3, r7, #31
 8008fdc:	d50a      	bpl.n	8008ff4 <__cvt+0x6c>
 8008fde:	1902      	adds	r2, r0, r4
 8008fe0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe8:	bf08      	it	eq
 8008fea:	9203      	streq	r2, [sp, #12]
 8008fec:	2130      	movs	r1, #48	@ 0x30
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d319      	bcc.n	8009028 <__cvt+0xa0>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ff8:	1a1b      	subs	r3, r3, r0
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	b005      	add	sp, #20
 8008ffe:	ecbd 8b02 	vpop	{d8}
 8009002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009004:	2d46      	cmp	r5, #70	@ 0x46
 8009006:	eb00 0204 	add.w	r2, r0, r4
 800900a:	d1e9      	bne.n	8008fe0 <__cvt+0x58>
 800900c:	7803      	ldrb	r3, [r0, #0]
 800900e:	2b30      	cmp	r3, #48	@ 0x30
 8009010:	d107      	bne.n	8009022 <__cvt+0x9a>
 8009012:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901a:	bf1c      	itt	ne
 800901c:	f1c4 0401 	rsbne	r4, r4, #1
 8009020:	6034      	strne	r4, [r6, #0]
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	441a      	add	r2, r3
 8009026:	e7db      	b.n	8008fe0 <__cvt+0x58>
 8009028:	1c5c      	adds	r4, r3, #1
 800902a:	9403      	str	r4, [sp, #12]
 800902c:	7019      	strb	r1, [r3, #0]
 800902e:	e7de      	b.n	8008fee <__cvt+0x66>

08009030 <__exponent>:
 8009030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009032:	2900      	cmp	r1, #0
 8009034:	bfba      	itte	lt
 8009036:	4249      	neglt	r1, r1
 8009038:	232d      	movlt	r3, #45	@ 0x2d
 800903a:	232b      	movge	r3, #43	@ 0x2b
 800903c:	2909      	cmp	r1, #9
 800903e:	7002      	strb	r2, [r0, #0]
 8009040:	7043      	strb	r3, [r0, #1]
 8009042:	dd29      	ble.n	8009098 <__exponent+0x68>
 8009044:	f10d 0307 	add.w	r3, sp, #7
 8009048:	461d      	mov	r5, r3
 800904a:	270a      	movs	r7, #10
 800904c:	461a      	mov	r2, r3
 800904e:	fbb1 f6f7 	udiv	r6, r1, r7
 8009052:	fb07 1416 	mls	r4, r7, r6, r1
 8009056:	3430      	adds	r4, #48	@ 0x30
 8009058:	f802 4c01 	strb.w	r4, [r2, #-1]
 800905c:	460c      	mov	r4, r1
 800905e:	2c63      	cmp	r4, #99	@ 0x63
 8009060:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009064:	4631      	mov	r1, r6
 8009066:	dcf1      	bgt.n	800904c <__exponent+0x1c>
 8009068:	3130      	adds	r1, #48	@ 0x30
 800906a:	1e94      	subs	r4, r2, #2
 800906c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009070:	1c41      	adds	r1, r0, #1
 8009072:	4623      	mov	r3, r4
 8009074:	42ab      	cmp	r3, r5
 8009076:	d30a      	bcc.n	800908e <__exponent+0x5e>
 8009078:	f10d 0309 	add.w	r3, sp, #9
 800907c:	1a9b      	subs	r3, r3, r2
 800907e:	42ac      	cmp	r4, r5
 8009080:	bf88      	it	hi
 8009082:	2300      	movhi	r3, #0
 8009084:	3302      	adds	r3, #2
 8009086:	4403      	add	r3, r0
 8009088:	1a18      	subs	r0, r3, r0
 800908a:	b003      	add	sp, #12
 800908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009092:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009096:	e7ed      	b.n	8009074 <__exponent+0x44>
 8009098:	2330      	movs	r3, #48	@ 0x30
 800909a:	3130      	adds	r1, #48	@ 0x30
 800909c:	7083      	strb	r3, [r0, #2]
 800909e:	70c1      	strb	r1, [r0, #3]
 80090a0:	1d03      	adds	r3, r0, #4
 80090a2:	e7f1      	b.n	8009088 <__exponent+0x58>
 80090a4:	0000      	movs	r0, r0
	...

080090a8 <_printf_float>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	b08d      	sub	sp, #52	@ 0x34
 80090ae:	460c      	mov	r4, r1
 80090b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090b4:	4616      	mov	r6, r2
 80090b6:	461f      	mov	r7, r3
 80090b8:	4605      	mov	r5, r0
 80090ba:	f000 fd8d 	bl	8009bd8 <_localeconv_r>
 80090be:	f8d0 b000 	ldr.w	fp, [r0]
 80090c2:	4658      	mov	r0, fp
 80090c4:	f7f7 f90c 	bl	80002e0 <strlen>
 80090c8:	2300      	movs	r3, #0
 80090ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80090d4:	6822      	ldr	r2, [r4, #0]
 80090d6:	9005      	str	r0, [sp, #20]
 80090d8:	3307      	adds	r3, #7
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	f103 0108 	add.w	r1, r3, #8
 80090e2:	f8c8 1000 	str.w	r1, [r8]
 80090e6:	ed93 0b00 	vldr	d0, [r3]
 80090ea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009348 <_printf_float+0x2a0>
 80090ee:	eeb0 7bc0 	vabs.f64	d7, d0
 80090f2:	eeb4 7b46 	vcmp.f64	d7, d6
 80090f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80090fe:	dd24      	ble.n	800914a <_printf_float+0xa2>
 8009100:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	d502      	bpl.n	8009110 <_printf_float+0x68>
 800910a:	232d      	movs	r3, #45	@ 0x2d
 800910c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009110:	498f      	ldr	r1, [pc, #572]	@ (8009350 <_printf_float+0x2a8>)
 8009112:	4b90      	ldr	r3, [pc, #576]	@ (8009354 <_printf_float+0x2ac>)
 8009114:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009118:	bf94      	ite	ls
 800911a:	4688      	movls	r8, r1
 800911c:	4698      	movhi	r8, r3
 800911e:	f022 0204 	bic.w	r2, r2, #4
 8009122:	2303      	movs	r3, #3
 8009124:	6123      	str	r3, [r4, #16]
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	f04f 0a00 	mov.w	sl, #0
 800912c:	9700      	str	r7, [sp, #0]
 800912e:	4633      	mov	r3, r6
 8009130:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 fa7b 	bl	8009630 <_printf_common>
 800913a:	3001      	adds	r0, #1
 800913c:	f040 8089 	bne.w	8009252 <_printf_float+0x1aa>
 8009140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009144:	b00d      	add	sp, #52	@ 0x34
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	eeb4 0b40 	vcmp.f64	d0, d0
 800914e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009152:	d709      	bvc.n	8009168 <_printf_float+0xc0>
 8009154:	ee10 3a90 	vmov	r3, s1
 8009158:	2b00      	cmp	r3, #0
 800915a:	bfbc      	itt	lt
 800915c:	232d      	movlt	r3, #45	@ 0x2d
 800915e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009162:	497d      	ldr	r1, [pc, #500]	@ (8009358 <_printf_float+0x2b0>)
 8009164:	4b7d      	ldr	r3, [pc, #500]	@ (800935c <_printf_float+0x2b4>)
 8009166:	e7d5      	b.n	8009114 <_printf_float+0x6c>
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	1c59      	adds	r1, r3, #1
 800916c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009170:	d139      	bne.n	80091e6 <_printf_float+0x13e>
 8009172:	2306      	movs	r3, #6
 8009174:	6063      	str	r3, [r4, #4]
 8009176:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800917a:	2300      	movs	r3, #0
 800917c:	6022      	str	r2, [r4, #0]
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	ab0a      	add	r3, sp, #40	@ 0x28
 8009182:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009186:	ab09      	add	r3, sp, #36	@ 0x24
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	6861      	ldr	r1, [r4, #4]
 800918c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009190:	4628      	mov	r0, r5
 8009192:	f7ff fef9 	bl	8008f88 <__cvt>
 8009196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800919a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800919c:	4680      	mov	r8, r0
 800919e:	d129      	bne.n	80091f4 <_printf_float+0x14c>
 80091a0:	1cc8      	adds	r0, r1, #3
 80091a2:	db02      	blt.n	80091aa <_printf_float+0x102>
 80091a4:	6863      	ldr	r3, [r4, #4]
 80091a6:	4299      	cmp	r1, r3
 80091a8:	dd41      	ble.n	800922e <_printf_float+0x186>
 80091aa:	f1a9 0902 	sub.w	r9, r9, #2
 80091ae:	fa5f f989 	uxtb.w	r9, r9
 80091b2:	3901      	subs	r1, #1
 80091b4:	464a      	mov	r2, r9
 80091b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80091bc:	f7ff ff38 	bl	8009030 <__exponent>
 80091c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091c2:	1813      	adds	r3, r2, r0
 80091c4:	2a01      	cmp	r2, #1
 80091c6:	4682      	mov	sl, r0
 80091c8:	6123      	str	r3, [r4, #16]
 80091ca:	dc02      	bgt.n	80091d2 <_printf_float+0x12a>
 80091cc:	6822      	ldr	r2, [r4, #0]
 80091ce:	07d2      	lsls	r2, r2, #31
 80091d0:	d501      	bpl.n	80091d6 <_printf_float+0x12e>
 80091d2:	3301      	adds	r3, #1
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0a6      	beq.n	800912c <_printf_float+0x84>
 80091de:	232d      	movs	r3, #45	@ 0x2d
 80091e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e4:	e7a2      	b.n	800912c <_printf_float+0x84>
 80091e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80091ea:	d1c4      	bne.n	8009176 <_printf_float+0xce>
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1c2      	bne.n	8009176 <_printf_float+0xce>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e7bf      	b.n	8009174 <_printf_float+0xcc>
 80091f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80091f8:	d9db      	bls.n	80091b2 <_printf_float+0x10a>
 80091fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80091fe:	d118      	bne.n	8009232 <_printf_float+0x18a>
 8009200:	2900      	cmp	r1, #0
 8009202:	6863      	ldr	r3, [r4, #4]
 8009204:	dd0b      	ble.n	800921e <_printf_float+0x176>
 8009206:	6121      	str	r1, [r4, #16]
 8009208:	b913      	cbnz	r3, 8009210 <_printf_float+0x168>
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	07d0      	lsls	r0, r2, #31
 800920e:	d502      	bpl.n	8009216 <_printf_float+0x16e>
 8009210:	3301      	adds	r3, #1
 8009212:	440b      	add	r3, r1
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009218:	f04f 0a00 	mov.w	sl, #0
 800921c:	e7db      	b.n	80091d6 <_printf_float+0x12e>
 800921e:	b913      	cbnz	r3, 8009226 <_printf_float+0x17e>
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	07d2      	lsls	r2, r2, #31
 8009224:	d501      	bpl.n	800922a <_printf_float+0x182>
 8009226:	3302      	adds	r3, #2
 8009228:	e7f4      	b.n	8009214 <_printf_float+0x16c>
 800922a:	2301      	movs	r3, #1
 800922c:	e7f2      	b.n	8009214 <_printf_float+0x16c>
 800922e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009234:	4299      	cmp	r1, r3
 8009236:	db05      	blt.n	8009244 <_printf_float+0x19c>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	6121      	str	r1, [r4, #16]
 800923c:	07d8      	lsls	r0, r3, #31
 800923e:	d5ea      	bpl.n	8009216 <_printf_float+0x16e>
 8009240:	1c4b      	adds	r3, r1, #1
 8009242:	e7e7      	b.n	8009214 <_printf_float+0x16c>
 8009244:	2900      	cmp	r1, #0
 8009246:	bfd4      	ite	le
 8009248:	f1c1 0202 	rsble	r2, r1, #2
 800924c:	2201      	movgt	r2, #1
 800924e:	4413      	add	r3, r2
 8009250:	e7e0      	b.n	8009214 <_printf_float+0x16c>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	055a      	lsls	r2, r3, #21
 8009256:	d407      	bmi.n	8009268 <_printf_float+0x1c0>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	4642      	mov	r2, r8
 800925c:	4631      	mov	r1, r6
 800925e:	4628      	mov	r0, r5
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	d12a      	bne.n	80092bc <_printf_float+0x214>
 8009266:	e76b      	b.n	8009140 <_printf_float+0x98>
 8009268:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800926c:	f240 80e0 	bls.w	8009430 <_printf_float+0x388>
 8009270:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009274:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927c:	d133      	bne.n	80092e6 <_printf_float+0x23e>
 800927e:	4a38      	ldr	r2, [pc, #224]	@ (8009360 <_printf_float+0x2b8>)
 8009280:	2301      	movs	r3, #1
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	f43f af59 	beq.w	8009140 <_printf_float+0x98>
 800928e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009292:	4543      	cmp	r3, r8
 8009294:	db02      	blt.n	800929c <_printf_float+0x1f4>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	07d8      	lsls	r0, r3, #31
 800929a:	d50f      	bpl.n	80092bc <_printf_float+0x214>
 800929c:	9b05      	ldr	r3, [sp, #20]
 800929e:	465a      	mov	r2, fp
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af4a 	beq.w	8009140 <_printf_float+0x98>
 80092ac:	f04f 0900 	mov.w	r9, #0
 80092b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80092b4:	f104 0a1a 	add.w	sl, r4, #26
 80092b8:	45c8      	cmp	r8, r9
 80092ba:	dc09      	bgt.n	80092d0 <_printf_float+0x228>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	079b      	lsls	r3, r3, #30
 80092c0:	f100 8107 	bmi.w	80094d2 <_printf_float+0x42a>
 80092c4:	68e0      	ldr	r0, [r4, #12]
 80092c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c8:	4298      	cmp	r0, r3
 80092ca:	bfb8      	it	lt
 80092cc:	4618      	movlt	r0, r3
 80092ce:	e739      	b.n	8009144 <_printf_float+0x9c>
 80092d0:	2301      	movs	r3, #1
 80092d2:	4652      	mov	r2, sl
 80092d4:	4631      	mov	r1, r6
 80092d6:	4628      	mov	r0, r5
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	f43f af30 	beq.w	8009140 <_printf_float+0x98>
 80092e0:	f109 0901 	add.w	r9, r9, #1
 80092e4:	e7e8      	b.n	80092b8 <_printf_float+0x210>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc3b      	bgt.n	8009364 <_printf_float+0x2bc>
 80092ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009360 <_printf_float+0x2b8>)
 80092ee:	2301      	movs	r3, #1
 80092f0:	4631      	mov	r1, r6
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	f43f af22 	beq.w	8009140 <_printf_float+0x98>
 80092fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009300:	ea59 0303 	orrs.w	r3, r9, r3
 8009304:	d102      	bne.n	800930c <_printf_float+0x264>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	07d9      	lsls	r1, r3, #31
 800930a:	d5d7      	bpl.n	80092bc <_printf_float+0x214>
 800930c:	9b05      	ldr	r3, [sp, #20]
 800930e:	465a      	mov	r2, fp
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af12 	beq.w	8009140 <_printf_float+0x98>
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	f104 0b1a 	add.w	fp, r4, #26
 8009324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009326:	425b      	negs	r3, r3
 8009328:	4553      	cmp	r3, sl
 800932a:	dc01      	bgt.n	8009330 <_printf_float+0x288>
 800932c:	464b      	mov	r3, r9
 800932e:	e794      	b.n	800925a <_printf_float+0x1b2>
 8009330:	2301      	movs	r3, #1
 8009332:	465a      	mov	r2, fp
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f af00 	beq.w	8009140 <_printf_float+0x98>
 8009340:	f10a 0a01 	add.w	sl, sl, #1
 8009344:	e7ee      	b.n	8009324 <_printf_float+0x27c>
 8009346:	bf00      	nop
 8009348:	ffffffff 	.word	0xffffffff
 800934c:	7fefffff 	.word	0x7fefffff
 8009350:	080562c0 	.word	0x080562c0
 8009354:	080562c4 	.word	0x080562c4
 8009358:	080562c8 	.word	0x080562c8
 800935c:	080562cc 	.word	0x080562cc
 8009360:	080562d0 	.word	0x080562d0
 8009364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009366:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800936a:	4553      	cmp	r3, sl
 800936c:	bfa8      	it	ge
 800936e:	4653      	movge	r3, sl
 8009370:	2b00      	cmp	r3, #0
 8009372:	4699      	mov	r9, r3
 8009374:	dc37      	bgt.n	80093e6 <_printf_float+0x33e>
 8009376:	2300      	movs	r3, #0
 8009378:	9307      	str	r3, [sp, #28]
 800937a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937e:	f104 021a 	add.w	r2, r4, #26
 8009382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009384:	9907      	ldr	r1, [sp, #28]
 8009386:	9306      	str	r3, [sp, #24]
 8009388:	eba3 0309 	sub.w	r3, r3, r9
 800938c:	428b      	cmp	r3, r1
 800938e:	dc31      	bgt.n	80093f4 <_printf_float+0x34c>
 8009390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009392:	459a      	cmp	sl, r3
 8009394:	dc3b      	bgt.n	800940e <_printf_float+0x366>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	07da      	lsls	r2, r3, #31
 800939a:	d438      	bmi.n	800940e <_printf_float+0x366>
 800939c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800939e:	ebaa 0903 	sub.w	r9, sl, r3
 80093a2:	9b06      	ldr	r3, [sp, #24]
 80093a4:	ebaa 0303 	sub.w	r3, sl, r3
 80093a8:	4599      	cmp	r9, r3
 80093aa:	bfa8      	it	ge
 80093ac:	4699      	movge	r9, r3
 80093ae:	f1b9 0f00 	cmp.w	r9, #0
 80093b2:	dc34      	bgt.n	800941e <_printf_float+0x376>
 80093b4:	f04f 0800 	mov.w	r8, #0
 80093b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093bc:	f104 0b1a 	add.w	fp, r4, #26
 80093c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c2:	ebaa 0303 	sub.w	r3, sl, r3
 80093c6:	eba3 0309 	sub.w	r3, r3, r9
 80093ca:	4543      	cmp	r3, r8
 80093cc:	f77f af76 	ble.w	80092bc <_printf_float+0x214>
 80093d0:	2301      	movs	r3, #1
 80093d2:	465a      	mov	r2, fp
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	f43f aeb0 	beq.w	8009140 <_printf_float+0x98>
 80093e0:	f108 0801 	add.w	r8, r8, #1
 80093e4:	e7ec      	b.n	80093c0 <_printf_float+0x318>
 80093e6:	4642      	mov	r2, r8
 80093e8:	4631      	mov	r1, r6
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b8      	blx	r7
 80093ee:	3001      	adds	r0, #1
 80093f0:	d1c1      	bne.n	8009376 <_printf_float+0x2ce>
 80093f2:	e6a5      	b.n	8009140 <_printf_float+0x98>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	9206      	str	r2, [sp, #24]
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	f43f ae9e 	beq.w	8009140 <_printf_float+0x98>
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	9a06      	ldr	r2, [sp, #24]
 8009408:	3301      	adds	r3, #1
 800940a:	9307      	str	r3, [sp, #28]
 800940c:	e7b9      	b.n	8009382 <_printf_float+0x2da>
 800940e:	9b05      	ldr	r3, [sp, #20]
 8009410:	465a      	mov	r2, fp
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	d1bf      	bne.n	800939c <_printf_float+0x2f4>
 800941c:	e690      	b.n	8009140 <_printf_float+0x98>
 800941e:	9a06      	ldr	r2, [sp, #24]
 8009420:	464b      	mov	r3, r9
 8009422:	4442      	add	r2, r8
 8009424:	4631      	mov	r1, r6
 8009426:	4628      	mov	r0, r5
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	d1c2      	bne.n	80093b4 <_printf_float+0x30c>
 800942e:	e687      	b.n	8009140 <_printf_float+0x98>
 8009430:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009434:	f1b9 0f01 	cmp.w	r9, #1
 8009438:	dc01      	bgt.n	800943e <_printf_float+0x396>
 800943a:	07db      	lsls	r3, r3, #31
 800943c:	d536      	bpl.n	80094ac <_printf_float+0x404>
 800943e:	2301      	movs	r3, #1
 8009440:	4642      	mov	r2, r8
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	f43f ae79 	beq.w	8009140 <_printf_float+0x98>
 800944e:	9b05      	ldr	r3, [sp, #20]
 8009450:	465a      	mov	r2, fp
 8009452:	4631      	mov	r1, r6
 8009454:	4628      	mov	r0, r5
 8009456:	47b8      	blx	r7
 8009458:	3001      	adds	r0, #1
 800945a:	f43f ae71 	beq.w	8009140 <_printf_float+0x98>
 800945e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009462:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800946e:	d018      	beq.n	80094a2 <_printf_float+0x3fa>
 8009470:	464b      	mov	r3, r9
 8009472:	f108 0201 	add.w	r2, r8, #1
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	d10c      	bne.n	800949a <_printf_float+0x3f2>
 8009480:	e65e      	b.n	8009140 <_printf_float+0x98>
 8009482:	2301      	movs	r3, #1
 8009484:	465a      	mov	r2, fp
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	f43f ae57 	beq.w	8009140 <_printf_float+0x98>
 8009492:	f108 0801 	add.w	r8, r8, #1
 8009496:	45c8      	cmp	r8, r9
 8009498:	dbf3      	blt.n	8009482 <_printf_float+0x3da>
 800949a:	4653      	mov	r3, sl
 800949c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094a0:	e6dc      	b.n	800925c <_printf_float+0x1b4>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	f104 0b1a 	add.w	fp, r4, #26
 80094aa:	e7f4      	b.n	8009496 <_printf_float+0x3ee>
 80094ac:	2301      	movs	r3, #1
 80094ae:	4642      	mov	r2, r8
 80094b0:	e7e1      	b.n	8009476 <_printf_float+0x3ce>
 80094b2:	2301      	movs	r3, #1
 80094b4:	464a      	mov	r2, r9
 80094b6:	4631      	mov	r1, r6
 80094b8:	4628      	mov	r0, r5
 80094ba:	47b8      	blx	r7
 80094bc:	3001      	adds	r0, #1
 80094be:	f43f ae3f 	beq.w	8009140 <_printf_float+0x98>
 80094c2:	f108 0801 	add.w	r8, r8, #1
 80094c6:	68e3      	ldr	r3, [r4, #12]
 80094c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094ca:	1a5b      	subs	r3, r3, r1
 80094cc:	4543      	cmp	r3, r8
 80094ce:	dcf0      	bgt.n	80094b2 <_printf_float+0x40a>
 80094d0:	e6f8      	b.n	80092c4 <_printf_float+0x21c>
 80094d2:	f04f 0800 	mov.w	r8, #0
 80094d6:	f104 0919 	add.w	r9, r4, #25
 80094da:	e7f4      	b.n	80094c6 <_printf_float+0x41e>

080094dc <malloc>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	@ (80094e8 <malloc+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f000 b825 	b.w	8009530 <_malloc_r>
 80094e6:	bf00      	nop
 80094e8:	200071fc 	.word	0x200071fc

080094ec <sbrk_aligned>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	4e0f      	ldr	r6, [pc, #60]	@ (800952c <sbrk_aligned+0x40>)
 80094f0:	460c      	mov	r4, r1
 80094f2:	6831      	ldr	r1, [r6, #0]
 80094f4:	4605      	mov	r5, r0
 80094f6:	b911      	cbnz	r1, 80094fe <sbrk_aligned+0x12>
 80094f8:	f000 fb72 	bl	8009be0 <_sbrk_r>
 80094fc:	6030      	str	r0, [r6, #0]
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f000 fb6d 	bl	8009be0 <_sbrk_r>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	d103      	bne.n	8009512 <sbrk_aligned+0x26>
 800950a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800950e:	4620      	mov	r0, r4
 8009510:	bd70      	pop	{r4, r5, r6, pc}
 8009512:	1cc4      	adds	r4, r0, #3
 8009514:	f024 0403 	bic.w	r4, r4, #3
 8009518:	42a0      	cmp	r0, r4
 800951a:	d0f8      	beq.n	800950e <sbrk_aligned+0x22>
 800951c:	1a21      	subs	r1, r4, r0
 800951e:	4628      	mov	r0, r5
 8009520:	f000 fb5e 	bl	8009be0 <_sbrk_r>
 8009524:	3001      	adds	r0, #1
 8009526:	d1f2      	bne.n	800950e <sbrk_aligned+0x22>
 8009528:	e7ef      	b.n	800950a <sbrk_aligned+0x1e>
 800952a:	bf00      	nop
 800952c:	20017da8 	.word	0x20017da8

08009530 <_malloc_r>:
 8009530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009534:	1ccd      	adds	r5, r1, #3
 8009536:	f025 0503 	bic.w	r5, r5, #3
 800953a:	3508      	adds	r5, #8
 800953c:	2d0c      	cmp	r5, #12
 800953e:	bf38      	it	cc
 8009540:	250c      	movcc	r5, #12
 8009542:	2d00      	cmp	r5, #0
 8009544:	4606      	mov	r6, r0
 8009546:	db01      	blt.n	800954c <_malloc_r+0x1c>
 8009548:	42a9      	cmp	r1, r5
 800954a:	d904      	bls.n	8009556 <_malloc_r+0x26>
 800954c:	230c      	movs	r3, #12
 800954e:	6033      	str	r3, [r6, #0]
 8009550:	2000      	movs	r0, #0
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800962c <_malloc_r+0xfc>
 800955a:	f000 f9f7 	bl	800994c <__malloc_lock>
 800955e:	f8d8 3000 	ldr.w	r3, [r8]
 8009562:	461c      	mov	r4, r3
 8009564:	bb44      	cbnz	r4, 80095b8 <_malloc_r+0x88>
 8009566:	4629      	mov	r1, r5
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ffbf 	bl	80094ec <sbrk_aligned>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	4604      	mov	r4, r0
 8009572:	d158      	bne.n	8009626 <_malloc_r+0xf6>
 8009574:	f8d8 4000 	ldr.w	r4, [r8]
 8009578:	4627      	mov	r7, r4
 800957a:	2f00      	cmp	r7, #0
 800957c:	d143      	bne.n	8009606 <_malloc_r+0xd6>
 800957e:	2c00      	cmp	r4, #0
 8009580:	d04b      	beq.n	800961a <_malloc_r+0xea>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4639      	mov	r1, r7
 8009586:	4630      	mov	r0, r6
 8009588:	eb04 0903 	add.w	r9, r4, r3
 800958c:	f000 fb28 	bl	8009be0 <_sbrk_r>
 8009590:	4581      	cmp	r9, r0
 8009592:	d142      	bne.n	800961a <_malloc_r+0xea>
 8009594:	6821      	ldr	r1, [r4, #0]
 8009596:	1a6d      	subs	r5, r5, r1
 8009598:	4629      	mov	r1, r5
 800959a:	4630      	mov	r0, r6
 800959c:	f7ff ffa6 	bl	80094ec <sbrk_aligned>
 80095a0:	3001      	adds	r0, #1
 80095a2:	d03a      	beq.n	800961a <_malloc_r+0xea>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	442b      	add	r3, r5
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	f8d8 3000 	ldr.w	r3, [r8]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	bb62      	cbnz	r2, 800960c <_malloc_r+0xdc>
 80095b2:	f8c8 7000 	str.w	r7, [r8]
 80095b6:	e00f      	b.n	80095d8 <_malloc_r+0xa8>
 80095b8:	6822      	ldr	r2, [r4, #0]
 80095ba:	1b52      	subs	r2, r2, r5
 80095bc:	d420      	bmi.n	8009600 <_malloc_r+0xd0>
 80095be:	2a0b      	cmp	r2, #11
 80095c0:	d917      	bls.n	80095f2 <_malloc_r+0xc2>
 80095c2:	1961      	adds	r1, r4, r5
 80095c4:	42a3      	cmp	r3, r4
 80095c6:	6025      	str	r5, [r4, #0]
 80095c8:	bf18      	it	ne
 80095ca:	6059      	strne	r1, [r3, #4]
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	bf08      	it	eq
 80095d0:	f8c8 1000 	streq.w	r1, [r8]
 80095d4:	5162      	str	r2, [r4, r5]
 80095d6:	604b      	str	r3, [r1, #4]
 80095d8:	4630      	mov	r0, r6
 80095da:	f000 f9bd 	bl	8009958 <__malloc_unlock>
 80095de:	f104 000b 	add.w	r0, r4, #11
 80095e2:	1d23      	adds	r3, r4, #4
 80095e4:	f020 0007 	bic.w	r0, r0, #7
 80095e8:	1ac2      	subs	r2, r0, r3
 80095ea:	bf1c      	itt	ne
 80095ec:	1a1b      	subne	r3, r3, r0
 80095ee:	50a3      	strne	r3, [r4, r2]
 80095f0:	e7af      	b.n	8009552 <_malloc_r+0x22>
 80095f2:	6862      	ldr	r2, [r4, #4]
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	bf0c      	ite	eq
 80095f8:	f8c8 2000 	streq.w	r2, [r8]
 80095fc:	605a      	strne	r2, [r3, #4]
 80095fe:	e7eb      	b.n	80095d8 <_malloc_r+0xa8>
 8009600:	4623      	mov	r3, r4
 8009602:	6864      	ldr	r4, [r4, #4]
 8009604:	e7ae      	b.n	8009564 <_malloc_r+0x34>
 8009606:	463c      	mov	r4, r7
 8009608:	687f      	ldr	r7, [r7, #4]
 800960a:	e7b6      	b.n	800957a <_malloc_r+0x4a>
 800960c:	461a      	mov	r2, r3
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	42a3      	cmp	r3, r4
 8009612:	d1fb      	bne.n	800960c <_malloc_r+0xdc>
 8009614:	2300      	movs	r3, #0
 8009616:	6053      	str	r3, [r2, #4]
 8009618:	e7de      	b.n	80095d8 <_malloc_r+0xa8>
 800961a:	230c      	movs	r3, #12
 800961c:	6033      	str	r3, [r6, #0]
 800961e:	4630      	mov	r0, r6
 8009620:	f000 f99a 	bl	8009958 <__malloc_unlock>
 8009624:	e794      	b.n	8009550 <_malloc_r+0x20>
 8009626:	6005      	str	r5, [r0, #0]
 8009628:	e7d6      	b.n	80095d8 <_malloc_r+0xa8>
 800962a:	bf00      	nop
 800962c:	20017dac 	.word	0x20017dac

08009630 <_printf_common>:
 8009630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	4616      	mov	r6, r2
 8009636:	4698      	mov	r8, r3
 8009638:	688a      	ldr	r2, [r1, #8]
 800963a:	690b      	ldr	r3, [r1, #16]
 800963c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009640:	4293      	cmp	r3, r2
 8009642:	bfb8      	it	lt
 8009644:	4613      	movlt	r3, r2
 8009646:	6033      	str	r3, [r6, #0]
 8009648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800964c:	4607      	mov	r7, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b10a      	cbz	r2, 8009656 <_printf_common+0x26>
 8009652:	3301      	adds	r3, #1
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	0699      	lsls	r1, r3, #26
 800965a:	bf42      	ittt	mi
 800965c:	6833      	ldrmi	r3, [r6, #0]
 800965e:	3302      	addmi	r3, #2
 8009660:	6033      	strmi	r3, [r6, #0]
 8009662:	6825      	ldr	r5, [r4, #0]
 8009664:	f015 0506 	ands.w	r5, r5, #6
 8009668:	d106      	bne.n	8009678 <_printf_common+0x48>
 800966a:	f104 0a19 	add.w	sl, r4, #25
 800966e:	68e3      	ldr	r3, [r4, #12]
 8009670:	6832      	ldr	r2, [r6, #0]
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	42ab      	cmp	r3, r5
 8009676:	dc26      	bgt.n	80096c6 <_printf_common+0x96>
 8009678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800967c:	6822      	ldr	r2, [r4, #0]
 800967e:	3b00      	subs	r3, #0
 8009680:	bf18      	it	ne
 8009682:	2301      	movne	r3, #1
 8009684:	0692      	lsls	r2, r2, #26
 8009686:	d42b      	bmi.n	80096e0 <_printf_common+0xb0>
 8009688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800968c:	4641      	mov	r1, r8
 800968e:	4638      	mov	r0, r7
 8009690:	47c8      	blx	r9
 8009692:	3001      	adds	r0, #1
 8009694:	d01e      	beq.n	80096d4 <_printf_common+0xa4>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	6922      	ldr	r2, [r4, #16]
 800969a:	f003 0306 	and.w	r3, r3, #6
 800969e:	2b04      	cmp	r3, #4
 80096a0:	bf02      	ittt	eq
 80096a2:	68e5      	ldreq	r5, [r4, #12]
 80096a4:	6833      	ldreq	r3, [r6, #0]
 80096a6:	1aed      	subeq	r5, r5, r3
 80096a8:	68a3      	ldr	r3, [r4, #8]
 80096aa:	bf0c      	ite	eq
 80096ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b0:	2500      	movne	r5, #0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bfc4      	itt	gt
 80096b6:	1a9b      	subgt	r3, r3, r2
 80096b8:	18ed      	addgt	r5, r5, r3
 80096ba:	2600      	movs	r6, #0
 80096bc:	341a      	adds	r4, #26
 80096be:	42b5      	cmp	r5, r6
 80096c0:	d11a      	bne.n	80096f8 <_printf_common+0xc8>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e008      	b.n	80096d8 <_printf_common+0xa8>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4652      	mov	r2, sl
 80096ca:	4641      	mov	r1, r8
 80096cc:	4638      	mov	r0, r7
 80096ce:	47c8      	blx	r9
 80096d0:	3001      	adds	r0, #1
 80096d2:	d103      	bne.n	80096dc <_printf_common+0xac>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096dc:	3501      	adds	r5, #1
 80096de:	e7c6      	b.n	800966e <_printf_common+0x3e>
 80096e0:	18e1      	adds	r1, r4, r3
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	2030      	movs	r0, #48	@ 0x30
 80096e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096ea:	4422      	add	r2, r4
 80096ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096f4:	3302      	adds	r3, #2
 80096f6:	e7c7      	b.n	8009688 <_printf_common+0x58>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4622      	mov	r2, r4
 80096fc:	4641      	mov	r1, r8
 80096fe:	4638      	mov	r0, r7
 8009700:	47c8      	blx	r9
 8009702:	3001      	adds	r0, #1
 8009704:	d0e6      	beq.n	80096d4 <_printf_common+0xa4>
 8009706:	3601      	adds	r6, #1
 8009708:	e7d9      	b.n	80096be <_printf_common+0x8e>
	...

0800970c <_printf_i>:
 800970c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	7e0f      	ldrb	r7, [r1, #24]
 8009712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009714:	2f78      	cmp	r7, #120	@ 0x78
 8009716:	4691      	mov	r9, r2
 8009718:	4680      	mov	r8, r0
 800971a:	460c      	mov	r4, r1
 800971c:	469a      	mov	sl, r3
 800971e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009722:	d807      	bhi.n	8009734 <_printf_i+0x28>
 8009724:	2f62      	cmp	r7, #98	@ 0x62
 8009726:	d80a      	bhi.n	800973e <_printf_i+0x32>
 8009728:	2f00      	cmp	r7, #0
 800972a:	f000 80d2 	beq.w	80098d2 <_printf_i+0x1c6>
 800972e:	2f58      	cmp	r7, #88	@ 0x58
 8009730:	f000 80b9 	beq.w	80098a6 <_printf_i+0x19a>
 8009734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800973c:	e03a      	b.n	80097b4 <_printf_i+0xa8>
 800973e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009742:	2b15      	cmp	r3, #21
 8009744:	d8f6      	bhi.n	8009734 <_printf_i+0x28>
 8009746:	a101      	add	r1, pc, #4	@ (adr r1, 800974c <_printf_i+0x40>)
 8009748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800974c:	080097a5 	.word	0x080097a5
 8009750:	080097b9 	.word	0x080097b9
 8009754:	08009735 	.word	0x08009735
 8009758:	08009735 	.word	0x08009735
 800975c:	08009735 	.word	0x08009735
 8009760:	08009735 	.word	0x08009735
 8009764:	080097b9 	.word	0x080097b9
 8009768:	08009735 	.word	0x08009735
 800976c:	08009735 	.word	0x08009735
 8009770:	08009735 	.word	0x08009735
 8009774:	08009735 	.word	0x08009735
 8009778:	080098b9 	.word	0x080098b9
 800977c:	080097e3 	.word	0x080097e3
 8009780:	08009873 	.word	0x08009873
 8009784:	08009735 	.word	0x08009735
 8009788:	08009735 	.word	0x08009735
 800978c:	080098db 	.word	0x080098db
 8009790:	08009735 	.word	0x08009735
 8009794:	080097e3 	.word	0x080097e3
 8009798:	08009735 	.word	0x08009735
 800979c:	08009735 	.word	0x08009735
 80097a0:	0800987b 	.word	0x0800987b
 80097a4:	6833      	ldr	r3, [r6, #0]
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6032      	str	r2, [r6, #0]
 80097ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097b4:	2301      	movs	r3, #1
 80097b6:	e09d      	b.n	80098f4 <_printf_i+0x1e8>
 80097b8:	6833      	ldr	r3, [r6, #0]
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	1d19      	adds	r1, r3, #4
 80097be:	6031      	str	r1, [r6, #0]
 80097c0:	0606      	lsls	r6, r0, #24
 80097c2:	d501      	bpl.n	80097c8 <_printf_i+0xbc>
 80097c4:	681d      	ldr	r5, [r3, #0]
 80097c6:	e003      	b.n	80097d0 <_printf_i+0xc4>
 80097c8:	0645      	lsls	r5, r0, #25
 80097ca:	d5fb      	bpl.n	80097c4 <_printf_i+0xb8>
 80097cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	da03      	bge.n	80097dc <_printf_i+0xd0>
 80097d4:	232d      	movs	r3, #45	@ 0x2d
 80097d6:	426d      	negs	r5, r5
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097dc:	4859      	ldr	r0, [pc, #356]	@ (8009944 <_printf_i+0x238>)
 80097de:	230a      	movs	r3, #10
 80097e0:	e011      	b.n	8009806 <_printf_i+0xfa>
 80097e2:	6821      	ldr	r1, [r4, #0]
 80097e4:	6833      	ldr	r3, [r6, #0]
 80097e6:	0608      	lsls	r0, r1, #24
 80097e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80097ec:	d402      	bmi.n	80097f4 <_printf_i+0xe8>
 80097ee:	0649      	lsls	r1, r1, #25
 80097f0:	bf48      	it	mi
 80097f2:	b2ad      	uxthmi	r5, r5
 80097f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80097f6:	4853      	ldr	r0, [pc, #332]	@ (8009944 <_printf_i+0x238>)
 80097f8:	6033      	str	r3, [r6, #0]
 80097fa:	bf14      	ite	ne
 80097fc:	230a      	movne	r3, #10
 80097fe:	2308      	moveq	r3, #8
 8009800:	2100      	movs	r1, #0
 8009802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009806:	6866      	ldr	r6, [r4, #4]
 8009808:	60a6      	str	r6, [r4, #8]
 800980a:	2e00      	cmp	r6, #0
 800980c:	bfa2      	ittt	ge
 800980e:	6821      	ldrge	r1, [r4, #0]
 8009810:	f021 0104 	bicge.w	r1, r1, #4
 8009814:	6021      	strge	r1, [r4, #0]
 8009816:	b90d      	cbnz	r5, 800981c <_printf_i+0x110>
 8009818:	2e00      	cmp	r6, #0
 800981a:	d04b      	beq.n	80098b4 <_printf_i+0x1a8>
 800981c:	4616      	mov	r6, r2
 800981e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009822:	fb03 5711 	mls	r7, r3, r1, r5
 8009826:	5dc7      	ldrb	r7, [r0, r7]
 8009828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800982c:	462f      	mov	r7, r5
 800982e:	42bb      	cmp	r3, r7
 8009830:	460d      	mov	r5, r1
 8009832:	d9f4      	bls.n	800981e <_printf_i+0x112>
 8009834:	2b08      	cmp	r3, #8
 8009836:	d10b      	bne.n	8009850 <_printf_i+0x144>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	07df      	lsls	r7, r3, #31
 800983c:	d508      	bpl.n	8009850 <_printf_i+0x144>
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6861      	ldr	r1, [r4, #4]
 8009842:	4299      	cmp	r1, r3
 8009844:	bfde      	ittt	le
 8009846:	2330      	movle	r3, #48	@ 0x30
 8009848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800984c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009850:	1b92      	subs	r2, r2, r6
 8009852:	6122      	str	r2, [r4, #16]
 8009854:	f8cd a000 	str.w	sl, [sp]
 8009858:	464b      	mov	r3, r9
 800985a:	aa03      	add	r2, sp, #12
 800985c:	4621      	mov	r1, r4
 800985e:	4640      	mov	r0, r8
 8009860:	f7ff fee6 	bl	8009630 <_printf_common>
 8009864:	3001      	adds	r0, #1
 8009866:	d14a      	bne.n	80098fe <_printf_i+0x1f2>
 8009868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800986c:	b004      	add	sp, #16
 800986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	f043 0320 	orr.w	r3, r3, #32
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	4833      	ldr	r0, [pc, #204]	@ (8009948 <_printf_i+0x23c>)
 800987c:	2778      	movs	r7, #120	@ 0x78
 800987e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	6831      	ldr	r1, [r6, #0]
 8009886:	061f      	lsls	r7, r3, #24
 8009888:	f851 5b04 	ldr.w	r5, [r1], #4
 800988c:	d402      	bmi.n	8009894 <_printf_i+0x188>
 800988e:	065f      	lsls	r7, r3, #25
 8009890:	bf48      	it	mi
 8009892:	b2ad      	uxthmi	r5, r5
 8009894:	6031      	str	r1, [r6, #0]
 8009896:	07d9      	lsls	r1, r3, #31
 8009898:	bf44      	itt	mi
 800989a:	f043 0320 	orrmi.w	r3, r3, #32
 800989e:	6023      	strmi	r3, [r4, #0]
 80098a0:	b11d      	cbz	r5, 80098aa <_printf_i+0x19e>
 80098a2:	2310      	movs	r3, #16
 80098a4:	e7ac      	b.n	8009800 <_printf_i+0xf4>
 80098a6:	4827      	ldr	r0, [pc, #156]	@ (8009944 <_printf_i+0x238>)
 80098a8:	e7e9      	b.n	800987e <_printf_i+0x172>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	f023 0320 	bic.w	r3, r3, #32
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	e7f6      	b.n	80098a2 <_printf_i+0x196>
 80098b4:	4616      	mov	r6, r2
 80098b6:	e7bd      	b.n	8009834 <_printf_i+0x128>
 80098b8:	6833      	ldr	r3, [r6, #0]
 80098ba:	6825      	ldr	r5, [r4, #0]
 80098bc:	6961      	ldr	r1, [r4, #20]
 80098be:	1d18      	adds	r0, r3, #4
 80098c0:	6030      	str	r0, [r6, #0]
 80098c2:	062e      	lsls	r6, r5, #24
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	d501      	bpl.n	80098cc <_printf_i+0x1c0>
 80098c8:	6019      	str	r1, [r3, #0]
 80098ca:	e002      	b.n	80098d2 <_printf_i+0x1c6>
 80098cc:	0668      	lsls	r0, r5, #25
 80098ce:	d5fb      	bpl.n	80098c8 <_printf_i+0x1bc>
 80098d0:	8019      	strh	r1, [r3, #0]
 80098d2:	2300      	movs	r3, #0
 80098d4:	6123      	str	r3, [r4, #16]
 80098d6:	4616      	mov	r6, r2
 80098d8:	e7bc      	b.n	8009854 <_printf_i+0x148>
 80098da:	6833      	ldr	r3, [r6, #0]
 80098dc:	1d1a      	adds	r2, r3, #4
 80098de:	6032      	str	r2, [r6, #0]
 80098e0:	681e      	ldr	r6, [r3, #0]
 80098e2:	6862      	ldr	r2, [r4, #4]
 80098e4:	2100      	movs	r1, #0
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7f6 fcaa 	bl	8000240 <memchr>
 80098ec:	b108      	cbz	r0, 80098f2 <_printf_i+0x1e6>
 80098ee:	1b80      	subs	r0, r0, r6
 80098f0:	6060      	str	r0, [r4, #4]
 80098f2:	6863      	ldr	r3, [r4, #4]
 80098f4:	6123      	str	r3, [r4, #16]
 80098f6:	2300      	movs	r3, #0
 80098f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098fc:	e7aa      	b.n	8009854 <_printf_i+0x148>
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	4632      	mov	r2, r6
 8009902:	4649      	mov	r1, r9
 8009904:	4640      	mov	r0, r8
 8009906:	47d0      	blx	sl
 8009908:	3001      	adds	r0, #1
 800990a:	d0ad      	beq.n	8009868 <_printf_i+0x15c>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	079b      	lsls	r3, r3, #30
 8009910:	d413      	bmi.n	800993a <_printf_i+0x22e>
 8009912:	68e0      	ldr	r0, [r4, #12]
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	4298      	cmp	r0, r3
 8009918:	bfb8      	it	lt
 800991a:	4618      	movlt	r0, r3
 800991c:	e7a6      	b.n	800986c <_printf_i+0x160>
 800991e:	2301      	movs	r3, #1
 8009920:	4632      	mov	r2, r6
 8009922:	4649      	mov	r1, r9
 8009924:	4640      	mov	r0, r8
 8009926:	47d0      	blx	sl
 8009928:	3001      	adds	r0, #1
 800992a:	d09d      	beq.n	8009868 <_printf_i+0x15c>
 800992c:	3501      	adds	r5, #1
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	9903      	ldr	r1, [sp, #12]
 8009932:	1a5b      	subs	r3, r3, r1
 8009934:	42ab      	cmp	r3, r5
 8009936:	dcf2      	bgt.n	800991e <_printf_i+0x212>
 8009938:	e7eb      	b.n	8009912 <_printf_i+0x206>
 800993a:	2500      	movs	r5, #0
 800993c:	f104 0619 	add.w	r6, r4, #25
 8009940:	e7f5      	b.n	800992e <_printf_i+0x222>
 8009942:	bf00      	nop
 8009944:	080562d2 	.word	0x080562d2
 8009948:	080562e3 	.word	0x080562e3

0800994c <__malloc_lock>:
 800994c:	4801      	ldr	r0, [pc, #4]	@ (8009954 <__malloc_lock+0x8>)
 800994e:	f000 b982 	b.w	8009c56 <__retarget_lock_acquire_recursive>
 8009952:	bf00      	nop
 8009954:	20017eec 	.word	0x20017eec

08009958 <__malloc_unlock>:
 8009958:	4801      	ldr	r0, [pc, #4]	@ (8009960 <__malloc_unlock+0x8>)
 800995a:	f000 b97d 	b.w	8009c58 <__retarget_lock_release_recursive>
 800995e:	bf00      	nop
 8009960:	20017eec 	.word	0x20017eec

08009964 <std>:
 8009964:	2300      	movs	r3, #0
 8009966:	b510      	push	{r4, lr}
 8009968:	4604      	mov	r4, r0
 800996a:	e9c0 3300 	strd	r3, r3, [r0]
 800996e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009972:	6083      	str	r3, [r0, #8]
 8009974:	8181      	strh	r1, [r0, #12]
 8009976:	6643      	str	r3, [r0, #100]	@ 0x64
 8009978:	81c2      	strh	r2, [r0, #14]
 800997a:	6183      	str	r3, [r0, #24]
 800997c:	4619      	mov	r1, r3
 800997e:	2208      	movs	r2, #8
 8009980:	305c      	adds	r0, #92	@ 0x5c
 8009982:	f000 f921 	bl	8009bc8 <memset>
 8009986:	4b0d      	ldr	r3, [pc, #52]	@ (80099bc <std+0x58>)
 8009988:	6263      	str	r3, [r4, #36]	@ 0x24
 800998a:	4b0d      	ldr	r3, [pc, #52]	@ (80099c0 <std+0x5c>)
 800998c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800998e:	4b0d      	ldr	r3, [pc, #52]	@ (80099c4 <std+0x60>)
 8009990:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009992:	4b0d      	ldr	r3, [pc, #52]	@ (80099c8 <std+0x64>)
 8009994:	6323      	str	r3, [r4, #48]	@ 0x30
 8009996:	4b0d      	ldr	r3, [pc, #52]	@ (80099cc <std+0x68>)
 8009998:	6224      	str	r4, [r4, #32]
 800999a:	429c      	cmp	r4, r3
 800999c:	d006      	beq.n	80099ac <std+0x48>
 800999e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099a2:	4294      	cmp	r4, r2
 80099a4:	d002      	beq.n	80099ac <std+0x48>
 80099a6:	33d0      	adds	r3, #208	@ 0xd0
 80099a8:	429c      	cmp	r4, r3
 80099aa:	d105      	bne.n	80099b8 <std+0x54>
 80099ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b4:	f000 b94e 	b.w	8009c54 <__retarget_lock_init_recursive>
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	bf00      	nop
 80099bc:	0800b3a9 	.word	0x0800b3a9
 80099c0:	0800b3cb 	.word	0x0800b3cb
 80099c4:	0800b403 	.word	0x0800b403
 80099c8:	0800b427 	.word	0x0800b427
 80099cc:	20017db0 	.word	0x20017db0

080099d0 <stdio_exit_handler>:
 80099d0:	4a02      	ldr	r2, [pc, #8]	@ (80099dc <stdio_exit_handler+0xc>)
 80099d2:	4903      	ldr	r1, [pc, #12]	@ (80099e0 <stdio_exit_handler+0x10>)
 80099d4:	4803      	ldr	r0, [pc, #12]	@ (80099e4 <stdio_exit_handler+0x14>)
 80099d6:	f000 b869 	b.w	8009aac <_fwalk_sglue>
 80099da:	bf00      	nop
 80099dc:	200071f0 	.word	0x200071f0
 80099e0:	0800ac55 	.word	0x0800ac55
 80099e4:	20007200 	.word	0x20007200

080099e8 <cleanup_stdio>:
 80099e8:	6841      	ldr	r1, [r0, #4]
 80099ea:	4b0c      	ldr	r3, [pc, #48]	@ (8009a1c <cleanup_stdio+0x34>)
 80099ec:	4299      	cmp	r1, r3
 80099ee:	b510      	push	{r4, lr}
 80099f0:	4604      	mov	r4, r0
 80099f2:	d001      	beq.n	80099f8 <cleanup_stdio+0x10>
 80099f4:	f001 f92e 	bl	800ac54 <_fflush_r>
 80099f8:	68a1      	ldr	r1, [r4, #8]
 80099fa:	4b09      	ldr	r3, [pc, #36]	@ (8009a20 <cleanup_stdio+0x38>)
 80099fc:	4299      	cmp	r1, r3
 80099fe:	d002      	beq.n	8009a06 <cleanup_stdio+0x1e>
 8009a00:	4620      	mov	r0, r4
 8009a02:	f001 f927 	bl	800ac54 <_fflush_r>
 8009a06:	68e1      	ldr	r1, [r4, #12]
 8009a08:	4b06      	ldr	r3, [pc, #24]	@ (8009a24 <cleanup_stdio+0x3c>)
 8009a0a:	4299      	cmp	r1, r3
 8009a0c:	d004      	beq.n	8009a18 <cleanup_stdio+0x30>
 8009a0e:	4620      	mov	r0, r4
 8009a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a14:	f001 b91e 	b.w	800ac54 <_fflush_r>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20017db0 	.word	0x20017db0
 8009a20:	20017e18 	.word	0x20017e18
 8009a24:	20017e80 	.word	0x20017e80

08009a28 <global_stdio_init.part.0>:
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a58 <global_stdio_init.part.0+0x30>)
 8009a2c:	4c0b      	ldr	r4, [pc, #44]	@ (8009a5c <global_stdio_init.part.0+0x34>)
 8009a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a60 <global_stdio_init.part.0+0x38>)
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	4620      	mov	r0, r4
 8009a34:	2200      	movs	r2, #0
 8009a36:	2104      	movs	r1, #4
 8009a38:	f7ff ff94 	bl	8009964 <std>
 8009a3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a40:	2201      	movs	r2, #1
 8009a42:	2109      	movs	r1, #9
 8009a44:	f7ff ff8e 	bl	8009964 <std>
 8009a48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a52:	2112      	movs	r1, #18
 8009a54:	f7ff bf86 	b.w	8009964 <std>
 8009a58:	20017ee8 	.word	0x20017ee8
 8009a5c:	20017db0 	.word	0x20017db0
 8009a60:	080099d1 	.word	0x080099d1

08009a64 <__sfp_lock_acquire>:
 8009a64:	4801      	ldr	r0, [pc, #4]	@ (8009a6c <__sfp_lock_acquire+0x8>)
 8009a66:	f000 b8f6 	b.w	8009c56 <__retarget_lock_acquire_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	20017eed 	.word	0x20017eed

08009a70 <__sfp_lock_release>:
 8009a70:	4801      	ldr	r0, [pc, #4]	@ (8009a78 <__sfp_lock_release+0x8>)
 8009a72:	f000 b8f1 	b.w	8009c58 <__retarget_lock_release_recursive>
 8009a76:	bf00      	nop
 8009a78:	20017eed 	.word	0x20017eed

08009a7c <__sinit>:
 8009a7c:	b510      	push	{r4, lr}
 8009a7e:	4604      	mov	r4, r0
 8009a80:	f7ff fff0 	bl	8009a64 <__sfp_lock_acquire>
 8009a84:	6a23      	ldr	r3, [r4, #32]
 8009a86:	b11b      	cbz	r3, 8009a90 <__sinit+0x14>
 8009a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a8c:	f7ff bff0 	b.w	8009a70 <__sfp_lock_release>
 8009a90:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <__sinit+0x28>)
 8009a92:	6223      	str	r3, [r4, #32]
 8009a94:	4b04      	ldr	r3, [pc, #16]	@ (8009aa8 <__sinit+0x2c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f5      	bne.n	8009a88 <__sinit+0xc>
 8009a9c:	f7ff ffc4 	bl	8009a28 <global_stdio_init.part.0>
 8009aa0:	e7f2      	b.n	8009a88 <__sinit+0xc>
 8009aa2:	bf00      	nop
 8009aa4:	080099e9 	.word	0x080099e9
 8009aa8:	20017ee8 	.word	0x20017ee8

08009aac <_fwalk_sglue>:
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	4688      	mov	r8, r1
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009abc:	f1b9 0901 	subs.w	r9, r9, #1
 8009ac0:	d505      	bpl.n	8009ace <_fwalk_sglue+0x22>
 8009ac2:	6824      	ldr	r4, [r4, #0]
 8009ac4:	2c00      	cmp	r4, #0
 8009ac6:	d1f7      	bne.n	8009ab8 <_fwalk_sglue+0xc>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ace:	89ab      	ldrh	r3, [r5, #12]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d907      	bls.n	8009ae4 <_fwalk_sglue+0x38>
 8009ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	d003      	beq.n	8009ae4 <_fwalk_sglue+0x38>
 8009adc:	4629      	mov	r1, r5
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c0      	blx	r8
 8009ae2:	4306      	orrs	r6, r0
 8009ae4:	3568      	adds	r5, #104	@ 0x68
 8009ae6:	e7e9      	b.n	8009abc <_fwalk_sglue+0x10>

08009ae8 <iprintf>:
 8009ae8:	b40f      	push	{r0, r1, r2, r3}
 8009aea:	b507      	push	{r0, r1, r2, lr}
 8009aec:	4906      	ldr	r1, [pc, #24]	@ (8009b08 <iprintf+0x20>)
 8009aee:	ab04      	add	r3, sp, #16
 8009af0:	6808      	ldr	r0, [r1, #0]
 8009af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af6:	6881      	ldr	r1, [r0, #8]
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	f000 ff0f 	bl	800a91c <_vfiprintf_r>
 8009afe:	b003      	add	sp, #12
 8009b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b04:	b004      	add	sp, #16
 8009b06:	4770      	bx	lr
 8009b08:	200071fc 	.word	0x200071fc

08009b0c <_puts_r>:
 8009b0c:	6a03      	ldr	r3, [r0, #32]
 8009b0e:	b570      	push	{r4, r5, r6, lr}
 8009b10:	6884      	ldr	r4, [r0, #8]
 8009b12:	4605      	mov	r5, r0
 8009b14:	460e      	mov	r6, r1
 8009b16:	b90b      	cbnz	r3, 8009b1c <_puts_r+0x10>
 8009b18:	f7ff ffb0 	bl	8009a7c <__sinit>
 8009b1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b1e:	07db      	lsls	r3, r3, #31
 8009b20:	d405      	bmi.n	8009b2e <_puts_r+0x22>
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	0598      	lsls	r0, r3, #22
 8009b26:	d402      	bmi.n	8009b2e <_puts_r+0x22>
 8009b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b2a:	f000 f894 	bl	8009c56 <__retarget_lock_acquire_recursive>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	0719      	lsls	r1, r3, #28
 8009b32:	d502      	bpl.n	8009b3a <_puts_r+0x2e>
 8009b34:	6923      	ldr	r3, [r4, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d135      	bne.n	8009ba6 <_puts_r+0x9a>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f001 fcb5 	bl	800b4ac <__swsetup_r>
 8009b42:	b380      	cbz	r0, 8009ba6 <_puts_r+0x9a>
 8009b44:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009b48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b4a:	07da      	lsls	r2, r3, #31
 8009b4c:	d405      	bmi.n	8009b5a <_puts_r+0x4e>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	059b      	lsls	r3, r3, #22
 8009b52:	d402      	bmi.n	8009b5a <_puts_r+0x4e>
 8009b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b56:	f000 f87f 	bl	8009c58 <__retarget_lock_release_recursive>
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	bd70      	pop	{r4, r5, r6, pc}
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da04      	bge.n	8009b6c <_puts_r+0x60>
 8009b62:	69a2      	ldr	r2, [r4, #24]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	dc17      	bgt.n	8009b98 <_puts_r+0x8c>
 8009b68:	290a      	cmp	r1, #10
 8009b6a:	d015      	beq.n	8009b98 <_puts_r+0x8c>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	6022      	str	r2, [r4, #0]
 8009b72:	7019      	strb	r1, [r3, #0]
 8009b74:	68a3      	ldr	r3, [r4, #8]
 8009b76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	60a3      	str	r3, [r4, #8]
 8009b7e:	2900      	cmp	r1, #0
 8009b80:	d1ed      	bne.n	8009b5e <_puts_r+0x52>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	da11      	bge.n	8009baa <_puts_r+0x9e>
 8009b86:	4622      	mov	r2, r4
 8009b88:	210a      	movs	r1, #10
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f001 fc4f 	bl	800b42e <__swbuf_r>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d0d7      	beq.n	8009b44 <_puts_r+0x38>
 8009b94:	250a      	movs	r5, #10
 8009b96:	e7d7      	b.n	8009b48 <_puts_r+0x3c>
 8009b98:	4622      	mov	r2, r4
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f001 fc47 	bl	800b42e <__swbuf_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d1e7      	bne.n	8009b74 <_puts_r+0x68>
 8009ba4:	e7ce      	b.n	8009b44 <_puts_r+0x38>
 8009ba6:	3e01      	subs	r6, #1
 8009ba8:	e7e4      	b.n	8009b74 <_puts_r+0x68>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	6022      	str	r2, [r4, #0]
 8009bb0:	220a      	movs	r2, #10
 8009bb2:	701a      	strb	r2, [r3, #0]
 8009bb4:	e7ee      	b.n	8009b94 <_puts_r+0x88>
	...

08009bb8 <puts>:
 8009bb8:	4b02      	ldr	r3, [pc, #8]	@ (8009bc4 <puts+0xc>)
 8009bba:	4601      	mov	r1, r0
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	f7ff bfa5 	b.w	8009b0c <_puts_r>
 8009bc2:	bf00      	nop
 8009bc4:	200071fc 	.word	0x200071fc

08009bc8 <memset>:
 8009bc8:	4402      	add	r2, r0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d100      	bne.n	8009bd2 <memset+0xa>
 8009bd0:	4770      	bx	lr
 8009bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bd6:	e7f9      	b.n	8009bcc <memset+0x4>

08009bd8 <_localeconv_r>:
 8009bd8:	4800      	ldr	r0, [pc, #0]	@ (8009bdc <_localeconv_r+0x4>)
 8009bda:	4770      	bx	lr
 8009bdc:	2000733c 	.word	0x2000733c

08009be0 <_sbrk_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	@ (8009bfc <_sbrk_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f7f8 fa14 	bl	8002018 <_sbrk>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_sbrk_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_sbrk_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	20017ef0 	.word	0x20017ef0

08009c00 <__errno>:
 8009c00:	4b01      	ldr	r3, [pc, #4]	@ (8009c08 <__errno+0x8>)
 8009c02:	6818      	ldr	r0, [r3, #0]
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	200071fc 	.word	0x200071fc

08009c0c <__libc_init_array>:
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8009c44 <__libc_init_array+0x38>)
 8009c10:	4c0d      	ldr	r4, [pc, #52]	@ (8009c48 <__libc_init_array+0x3c>)
 8009c12:	1b64      	subs	r4, r4, r5
 8009c14:	10a4      	asrs	r4, r4, #2
 8009c16:	2600      	movs	r6, #0
 8009c18:	42a6      	cmp	r6, r4
 8009c1a:	d109      	bne.n	8009c30 <__libc_init_array+0x24>
 8009c1c:	4d0b      	ldr	r5, [pc, #44]	@ (8009c4c <__libc_init_array+0x40>)
 8009c1e:	4c0c      	ldr	r4, [pc, #48]	@ (8009c50 <__libc_init_array+0x44>)
 8009c20:	f002 fa10 	bl	800c044 <_init>
 8009c24:	1b64      	subs	r4, r4, r5
 8009c26:	10a4      	asrs	r4, r4, #2
 8009c28:	2600      	movs	r6, #0
 8009c2a:	42a6      	cmp	r6, r4
 8009c2c:	d105      	bne.n	8009c3a <__libc_init_array+0x2e>
 8009c2e:	bd70      	pop	{r4, r5, r6, pc}
 8009c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c34:	4798      	blx	r3
 8009c36:	3601      	adds	r6, #1
 8009c38:	e7ee      	b.n	8009c18 <__libc_init_array+0xc>
 8009c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c3e:	4798      	blx	r3
 8009c40:	3601      	adds	r6, #1
 8009c42:	e7f2      	b.n	8009c2a <__libc_init_array+0x1e>
 8009c44:	08058038 	.word	0x08058038
 8009c48:	08058038 	.word	0x08058038
 8009c4c:	08058038 	.word	0x08058038
 8009c50:	0805803c 	.word	0x0805803c

08009c54 <__retarget_lock_init_recursive>:
 8009c54:	4770      	bx	lr

08009c56 <__retarget_lock_acquire_recursive>:
 8009c56:	4770      	bx	lr

08009c58 <__retarget_lock_release_recursive>:
 8009c58:	4770      	bx	lr

08009c5a <memcpy>:
 8009c5a:	440a      	add	r2, r1
 8009c5c:	4291      	cmp	r1, r2
 8009c5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c62:	d100      	bne.n	8009c66 <memcpy+0xc>
 8009c64:	4770      	bx	lr
 8009c66:	b510      	push	{r4, lr}
 8009c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c70:	4291      	cmp	r1, r2
 8009c72:	d1f9      	bne.n	8009c68 <memcpy+0xe>
 8009c74:	bd10      	pop	{r4, pc}

08009c76 <quorem>:
 8009c76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7a:	6903      	ldr	r3, [r0, #16]
 8009c7c:	690c      	ldr	r4, [r1, #16]
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	4607      	mov	r7, r0
 8009c82:	db7e      	blt.n	8009d82 <quorem+0x10c>
 8009c84:	3c01      	subs	r4, #1
 8009c86:	f101 0814 	add.w	r8, r1, #20
 8009c8a:	00a3      	lsls	r3, r4, #2
 8009c8c:	f100 0514 	add.w	r5, r0, #20
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c96:	9301      	str	r3, [sp, #4]
 8009c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cac:	d32e      	bcc.n	8009d0c <quorem+0x96>
 8009cae:	f04f 0a00 	mov.w	sl, #0
 8009cb2:	46c4      	mov	ip, r8
 8009cb4:	46ae      	mov	lr, r5
 8009cb6:	46d3      	mov	fp, sl
 8009cb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cbc:	b298      	uxth	r0, r3
 8009cbe:	fb06 a000 	mla	r0, r6, r0, sl
 8009cc2:	0c02      	lsrs	r2, r0, #16
 8009cc4:	0c1b      	lsrs	r3, r3, #16
 8009cc6:	fb06 2303 	mla	r3, r6, r3, r2
 8009cca:	f8de 2000 	ldr.w	r2, [lr]
 8009cce:	b280      	uxth	r0, r0
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	1a12      	subs	r2, r2, r0
 8009cd4:	445a      	add	r2, fp
 8009cd6:	f8de 0000 	ldr.w	r0, [lr]
 8009cda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ce4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ce8:	b292      	uxth	r2, r2
 8009cea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cee:	45e1      	cmp	r9, ip
 8009cf0:	f84e 2b04 	str.w	r2, [lr], #4
 8009cf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cf8:	d2de      	bcs.n	8009cb8 <quorem+0x42>
 8009cfa:	9b00      	ldr	r3, [sp, #0]
 8009cfc:	58eb      	ldr	r3, [r5, r3]
 8009cfe:	b92b      	cbnz	r3, 8009d0c <quorem+0x96>
 8009d00:	9b01      	ldr	r3, [sp, #4]
 8009d02:	3b04      	subs	r3, #4
 8009d04:	429d      	cmp	r5, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	d32f      	bcc.n	8009d6a <quorem+0xf4>
 8009d0a:	613c      	str	r4, [r7, #16]
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f001 fa43 	bl	800b198 <__mcmp>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	db25      	blt.n	8009d62 <quorem+0xec>
 8009d16:	4629      	mov	r1, r5
 8009d18:	2000      	movs	r0, #0
 8009d1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d1e:	f8d1 c000 	ldr.w	ip, [r1]
 8009d22:	fa1f fe82 	uxth.w	lr, r2
 8009d26:	fa1f f38c 	uxth.w	r3, ip
 8009d2a:	eba3 030e 	sub.w	r3, r3, lr
 8009d2e:	4403      	add	r3, r0
 8009d30:	0c12      	lsrs	r2, r2, #16
 8009d32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d40:	45c1      	cmp	r9, r8
 8009d42:	f841 3b04 	str.w	r3, [r1], #4
 8009d46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d4a:	d2e6      	bcs.n	8009d1a <quorem+0xa4>
 8009d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d54:	b922      	cbnz	r2, 8009d60 <quorem+0xea>
 8009d56:	3b04      	subs	r3, #4
 8009d58:	429d      	cmp	r5, r3
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	d30b      	bcc.n	8009d76 <quorem+0x100>
 8009d5e:	613c      	str	r4, [r7, #16]
 8009d60:	3601      	adds	r6, #1
 8009d62:	4630      	mov	r0, r6
 8009d64:	b003      	add	sp, #12
 8009d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6a:	6812      	ldr	r2, [r2, #0]
 8009d6c:	3b04      	subs	r3, #4
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	d1cb      	bne.n	8009d0a <quorem+0x94>
 8009d72:	3c01      	subs	r4, #1
 8009d74:	e7c6      	b.n	8009d04 <quorem+0x8e>
 8009d76:	6812      	ldr	r2, [r2, #0]
 8009d78:	3b04      	subs	r3, #4
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	d1ef      	bne.n	8009d5e <quorem+0xe8>
 8009d7e:	3c01      	subs	r4, #1
 8009d80:	e7ea      	b.n	8009d58 <quorem+0xe2>
 8009d82:	2000      	movs	r0, #0
 8009d84:	e7ee      	b.n	8009d64 <quorem+0xee>
	...

08009d88 <_dtoa_r>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	ed2d 8b02 	vpush	{d8}
 8009d90:	69c7      	ldr	r7, [r0, #28]
 8009d92:	b091      	sub	sp, #68	@ 0x44
 8009d94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d98:	ec55 4b10 	vmov	r4, r5, d0
 8009d9c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009d9e:	9107      	str	r1, [sp, #28]
 8009da0:	4681      	mov	r9, r0
 8009da2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009da4:	930d      	str	r3, [sp, #52]	@ 0x34
 8009da6:	b97f      	cbnz	r7, 8009dc8 <_dtoa_r+0x40>
 8009da8:	2010      	movs	r0, #16
 8009daa:	f7ff fb97 	bl	80094dc <malloc>
 8009dae:	4602      	mov	r2, r0
 8009db0:	f8c9 001c 	str.w	r0, [r9, #28]
 8009db4:	b920      	cbnz	r0, 8009dc0 <_dtoa_r+0x38>
 8009db6:	4ba0      	ldr	r3, [pc, #640]	@ (800a038 <_dtoa_r+0x2b0>)
 8009db8:	21ef      	movs	r1, #239	@ 0xef
 8009dba:	48a0      	ldr	r0, [pc, #640]	@ (800a03c <_dtoa_r+0x2b4>)
 8009dbc:	f001 fc96 	bl	800b6ec <__assert_func>
 8009dc0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009dc4:	6007      	str	r7, [r0, #0]
 8009dc6:	60c7      	str	r7, [r0, #12]
 8009dc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	b159      	cbz	r1, 8009de8 <_dtoa_r+0x60>
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	604a      	str	r2, [r1, #4]
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4093      	lsls	r3, r2
 8009dd8:	608b      	str	r3, [r1, #8]
 8009dda:	4648      	mov	r0, r9
 8009ddc:	f000 ffa2 	bl	800ad24 <_Bfree>
 8009de0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	1e2b      	subs	r3, r5, #0
 8009dea:	bfbb      	ittet	lt
 8009dec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009df0:	9303      	strlt	r3, [sp, #12]
 8009df2:	2300      	movge	r3, #0
 8009df4:	2201      	movlt	r2, #1
 8009df6:	bfac      	ite	ge
 8009df8:	6033      	strge	r3, [r6, #0]
 8009dfa:	6032      	strlt	r2, [r6, #0]
 8009dfc:	4b90      	ldr	r3, [pc, #576]	@ (800a040 <_dtoa_r+0x2b8>)
 8009dfe:	9e03      	ldr	r6, [sp, #12]
 8009e00:	43b3      	bics	r3, r6
 8009e02:	d110      	bne.n	8009e26 <_dtoa_r+0x9e>
 8009e04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e06:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009e10:	4323      	orrs	r3, r4
 8009e12:	f000 84de 	beq.w	800a7d2 <_dtoa_r+0xa4a>
 8009e16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e18:	4f8a      	ldr	r7, [pc, #552]	@ (800a044 <_dtoa_r+0x2bc>)
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 84e0 	beq.w	800a7e0 <_dtoa_r+0xa58>
 8009e20:	1cfb      	adds	r3, r7, #3
 8009e22:	f000 bcdb 	b.w	800a7dc <_dtoa_r+0xa54>
 8009e26:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009e2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e32:	d10a      	bne.n	8009e4a <_dtoa_r+0xc2>
 8009e34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e36:	2301      	movs	r3, #1
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e3c:	b113      	cbz	r3, 8009e44 <_dtoa_r+0xbc>
 8009e3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009e40:	4b81      	ldr	r3, [pc, #516]	@ (800a048 <_dtoa_r+0x2c0>)
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	4f81      	ldr	r7, [pc, #516]	@ (800a04c <_dtoa_r+0x2c4>)
 8009e46:	f000 bccb 	b.w	800a7e0 <_dtoa_r+0xa58>
 8009e4a:	aa0e      	add	r2, sp, #56	@ 0x38
 8009e4c:	a90f      	add	r1, sp, #60	@ 0x3c
 8009e4e:	4648      	mov	r0, r9
 8009e50:	eeb0 0b48 	vmov.f64	d0, d8
 8009e54:	f001 fa50 	bl	800b2f8 <__d2b>
 8009e58:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009e5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e5e:	9001      	str	r0, [sp, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d045      	beq.n	8009ef0 <_dtoa_r+0x168>
 8009e64:	eeb0 7b48 	vmov.f64	d7, d8
 8009e68:	ee18 1a90 	vmov	r1, s17
 8009e6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009e70:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009e74:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009e78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009e7c:	2500      	movs	r5, #0
 8009e7e:	ee07 1a90 	vmov	s15, r1
 8009e82:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009e86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a020 <_dtoa_r+0x298>
 8009e8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e8e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a028 <_dtoa_r+0x2a0>
 8009e92:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a030 <_dtoa_r+0x2a8>
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009ea2:	eeb0 7b46 	vmov.f64	d7, d6
 8009ea6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009eaa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009eae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb6:	ee16 8a90 	vmov	r8, s13
 8009eba:	d508      	bpl.n	8009ece <_dtoa_r+0x146>
 8009ebc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009ec0:	eeb4 6b47 	vcmp.f64	d6, d7
 8009ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec8:	bf18      	it	ne
 8009eca:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8009ece:	f1b8 0f16 	cmp.w	r8, #22
 8009ed2:	d82b      	bhi.n	8009f2c <_dtoa_r+0x1a4>
 8009ed4:	495e      	ldr	r1, [pc, #376]	@ (800a050 <_dtoa_r+0x2c8>)
 8009ed6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009eda:	ed91 7b00 	vldr	d7, [r1]
 8009ede:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee6:	d501      	bpl.n	8009eec <_dtoa_r+0x164>
 8009ee8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009eec:	2100      	movs	r1, #0
 8009eee:	e01e      	b.n	8009f2e <_dtoa_r+0x1a6>
 8009ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009ef8:	2920      	cmp	r1, #32
 8009efa:	bfc1      	itttt	gt
 8009efc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009f00:	408e      	lslgt	r6, r1
 8009f02:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009f06:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009f0a:	bfd6      	itet	le
 8009f0c:	f1c1 0120 	rsble	r1, r1, #32
 8009f10:	4331      	orrgt	r1, r6
 8009f12:	fa04 f101 	lslle.w	r1, r4, r1
 8009f16:	ee07 1a90 	vmov	s15, r1
 8009f1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	ee17 1a90 	vmov	r1, s15
 8009f24:	2501      	movs	r5, #1
 8009f26:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009f2a:	e7a8      	b.n	8009e7e <_dtoa_r+0xf6>
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	1ad2      	subs	r2, r2, r3
 8009f30:	1e53      	subs	r3, r2, #1
 8009f32:	9306      	str	r3, [sp, #24]
 8009f34:	bf45      	ittet	mi
 8009f36:	f1c2 0301 	rsbmi	r3, r2, #1
 8009f3a:	9305      	strmi	r3, [sp, #20]
 8009f3c:	2300      	movpl	r3, #0
 8009f3e:	2300      	movmi	r3, #0
 8009f40:	bf4c      	ite	mi
 8009f42:	9306      	strmi	r3, [sp, #24]
 8009f44:	9305      	strpl	r3, [sp, #20]
 8009f46:	f1b8 0f00 	cmp.w	r8, #0
 8009f4a:	910c      	str	r1, [sp, #48]	@ 0x30
 8009f4c:	db18      	blt.n	8009f80 <_dtoa_r+0x1f8>
 8009f4e:	9b06      	ldr	r3, [sp, #24]
 8009f50:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009f54:	4443      	add	r3, r8
 8009f56:	9306      	str	r3, [sp, #24]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9a07      	ldr	r2, [sp, #28]
 8009f5c:	2a09      	cmp	r2, #9
 8009f5e:	d849      	bhi.n	8009ff4 <_dtoa_r+0x26c>
 8009f60:	2a05      	cmp	r2, #5
 8009f62:	bfc4      	itt	gt
 8009f64:	3a04      	subgt	r2, #4
 8009f66:	9207      	strgt	r2, [sp, #28]
 8009f68:	9a07      	ldr	r2, [sp, #28]
 8009f6a:	f1a2 0202 	sub.w	r2, r2, #2
 8009f6e:	bfcc      	ite	gt
 8009f70:	2400      	movgt	r4, #0
 8009f72:	2401      	movle	r4, #1
 8009f74:	2a03      	cmp	r2, #3
 8009f76:	d848      	bhi.n	800a00a <_dtoa_r+0x282>
 8009f78:	e8df f002 	tbb	[pc, r2]
 8009f7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009f80:	9b05      	ldr	r3, [sp, #20]
 8009f82:	2200      	movs	r2, #0
 8009f84:	eba3 0308 	sub.w	r3, r3, r8
 8009f88:	9305      	str	r3, [sp, #20]
 8009f8a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f8c:	f1c8 0300 	rsb	r3, r8, #0
 8009f90:	e7e3      	b.n	8009f5a <_dtoa_r+0x1d2>
 8009f92:	2200      	movs	r2, #0
 8009f94:	9208      	str	r2, [sp, #32]
 8009f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	dc39      	bgt.n	800a010 <_dtoa_r+0x288>
 8009f9c:	f04f 0b01 	mov.w	fp, #1
 8009fa0:	46da      	mov	sl, fp
 8009fa2:	465a      	mov	r2, fp
 8009fa4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009fa8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009fac:	2100      	movs	r1, #0
 8009fae:	2004      	movs	r0, #4
 8009fb0:	f100 0614 	add.w	r6, r0, #20
 8009fb4:	4296      	cmp	r6, r2
 8009fb6:	d930      	bls.n	800a01a <_dtoa_r+0x292>
 8009fb8:	6079      	str	r1, [r7, #4]
 8009fba:	4648      	mov	r0, r9
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	f000 fe71 	bl	800aca4 <_Balloc>
 8009fc2:	9b04      	ldr	r3, [sp, #16]
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d146      	bne.n	800a058 <_dtoa_r+0x2d0>
 8009fca:	4b22      	ldr	r3, [pc, #136]	@ (800a054 <_dtoa_r+0x2cc>)
 8009fcc:	4602      	mov	r2, r0
 8009fce:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fd2:	e6f2      	b.n	8009dba <_dtoa_r+0x32>
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	e7dd      	b.n	8009f94 <_dtoa_r+0x20c>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	9208      	str	r2, [sp, #32]
 8009fdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fde:	eb08 0b02 	add.w	fp, r8, r2
 8009fe2:	f10b 0a01 	add.w	sl, fp, #1
 8009fe6:	4652      	mov	r2, sl
 8009fe8:	2a01      	cmp	r2, #1
 8009fea:	bfb8      	it	lt
 8009fec:	2201      	movlt	r2, #1
 8009fee:	e7db      	b.n	8009fa8 <_dtoa_r+0x220>
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	e7f2      	b.n	8009fda <_dtoa_r+0x252>
 8009ff4:	2401      	movs	r4, #1
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009ffc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a000:	2100      	movs	r1, #0
 800a002:	46da      	mov	sl, fp
 800a004:	2212      	movs	r2, #18
 800a006:	9109      	str	r1, [sp, #36]	@ 0x24
 800a008:	e7ce      	b.n	8009fa8 <_dtoa_r+0x220>
 800a00a:	2201      	movs	r2, #1
 800a00c:	9208      	str	r2, [sp, #32]
 800a00e:	e7f5      	b.n	8009ffc <_dtoa_r+0x274>
 800a010:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a014:	46da      	mov	sl, fp
 800a016:	465a      	mov	r2, fp
 800a018:	e7c6      	b.n	8009fa8 <_dtoa_r+0x220>
 800a01a:	3101      	adds	r1, #1
 800a01c:	0040      	lsls	r0, r0, #1
 800a01e:	e7c7      	b.n	8009fb0 <_dtoa_r+0x228>
 800a020:	636f4361 	.word	0x636f4361
 800a024:	3fd287a7 	.word	0x3fd287a7
 800a028:	8b60c8b3 	.word	0x8b60c8b3
 800a02c:	3fc68a28 	.word	0x3fc68a28
 800a030:	509f79fb 	.word	0x509f79fb
 800a034:	3fd34413 	.word	0x3fd34413
 800a038:	08056301 	.word	0x08056301
 800a03c:	08056318 	.word	0x08056318
 800a040:	7ff00000 	.word	0x7ff00000
 800a044:	080562fd 	.word	0x080562fd
 800a048:	080562d1 	.word	0x080562d1
 800a04c:	080562d0 	.word	0x080562d0
 800a050:	08056420 	.word	0x08056420
 800a054:	08056370 	.word	0x08056370
 800a058:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a05c:	f1ba 0f0e 	cmp.w	sl, #14
 800a060:	6010      	str	r0, [r2, #0]
 800a062:	d86f      	bhi.n	800a144 <_dtoa_r+0x3bc>
 800a064:	2c00      	cmp	r4, #0
 800a066:	d06d      	beq.n	800a144 <_dtoa_r+0x3bc>
 800a068:	f1b8 0f00 	cmp.w	r8, #0
 800a06c:	f340 80c2 	ble.w	800a1f4 <_dtoa_r+0x46c>
 800a070:	4aca      	ldr	r2, [pc, #808]	@ (800a39c <_dtoa_r+0x614>)
 800a072:	f008 010f 	and.w	r1, r8, #15
 800a076:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a07a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a07e:	ed92 7b00 	vldr	d7, [r2]
 800a082:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a086:	f000 80a9 	beq.w	800a1dc <_dtoa_r+0x454>
 800a08a:	4ac5      	ldr	r2, [pc, #788]	@ (800a3a0 <_dtoa_r+0x618>)
 800a08c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a090:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a094:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a098:	f001 010f 	and.w	r1, r1, #15
 800a09c:	2203      	movs	r2, #3
 800a09e:	48c0      	ldr	r0, [pc, #768]	@ (800a3a0 <_dtoa_r+0x618>)
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	f040 809d 	bne.w	800a1e0 <_dtoa_r+0x458>
 800a0a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a0ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a0b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0b8:	2900      	cmp	r1, #0
 800a0ba:	f000 80c1 	beq.w	800a240 <_dtoa_r+0x4b8>
 800a0be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a0c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ca:	f140 80b9 	bpl.w	800a240 <_dtoa_r+0x4b8>
 800a0ce:	f1ba 0f00 	cmp.w	sl, #0
 800a0d2:	f000 80b5 	beq.w	800a240 <_dtoa_r+0x4b8>
 800a0d6:	f1bb 0f00 	cmp.w	fp, #0
 800a0da:	dd31      	ble.n	800a140 <_dtoa_r+0x3b8>
 800a0dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a0e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0e8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800a0ec:	9104      	str	r1, [sp, #16]
 800a0ee:	3201      	adds	r2, #1
 800a0f0:	465c      	mov	r4, fp
 800a0f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a0fa:	ee07 2a90 	vmov	s15, r2
 800a0fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a102:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a106:	ee15 2a90 	vmov	r2, s11
 800a10a:	ec51 0b15 	vmov	r0, r1, d5
 800a10e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a112:	2c00      	cmp	r4, #0
 800a114:	f040 8098 	bne.w	800a248 <_dtoa_r+0x4c0>
 800a118:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a11c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a120:	ec41 0b17 	vmov	d7, r0, r1
 800a124:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12c:	f300 8261 	bgt.w	800a5f2 <_dtoa_r+0x86a>
 800a130:	eeb1 7b47 	vneg.f64	d7, d7
 800a134:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13c:	f100 80f5 	bmi.w	800a32a <_dtoa_r+0x5a2>
 800a140:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a144:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a146:	2a00      	cmp	r2, #0
 800a148:	f2c0 812c 	blt.w	800a3a4 <_dtoa_r+0x61c>
 800a14c:	f1b8 0f0e 	cmp.w	r8, #14
 800a150:	f300 8128 	bgt.w	800a3a4 <_dtoa_r+0x61c>
 800a154:	4b91      	ldr	r3, [pc, #580]	@ (800a39c <_dtoa_r+0x614>)
 800a156:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a15a:	ed93 6b00 	vldr	d6, [r3]
 800a15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	da03      	bge.n	800a16c <_dtoa_r+0x3e4>
 800a164:	f1ba 0f00 	cmp.w	sl, #0
 800a168:	f340 80d2 	ble.w	800a310 <_dtoa_r+0x588>
 800a16c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a170:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a174:	463e      	mov	r6, r7
 800a176:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a17a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a17e:	ee15 3a10 	vmov	r3, s10
 800a182:	3330      	adds	r3, #48	@ 0x30
 800a184:	f806 3b01 	strb.w	r3, [r6], #1
 800a188:	1bf3      	subs	r3, r6, r7
 800a18a:	459a      	cmp	sl, r3
 800a18c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a190:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a194:	f040 80f8 	bne.w	800a388 <_dtoa_r+0x600>
 800a198:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a19c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a4:	f300 80dd 	bgt.w	800a362 <_dtoa_r+0x5da>
 800a1a8:	eeb4 7b46 	vcmp.f64	d7, d6
 800a1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b0:	d104      	bne.n	800a1bc <_dtoa_r+0x434>
 800a1b2:	ee15 3a10 	vmov	r3, s10
 800a1b6:	07db      	lsls	r3, r3, #31
 800a1b8:	f100 80d3 	bmi.w	800a362 <_dtoa_r+0x5da>
 800a1bc:	9901      	ldr	r1, [sp, #4]
 800a1be:	4648      	mov	r0, r9
 800a1c0:	f000 fdb0 	bl	800ad24 <_Bfree>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1c8:	7033      	strb	r3, [r6, #0]
 800a1ca:	f108 0301 	add.w	r3, r8, #1
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 8304 	beq.w	800a7e0 <_dtoa_r+0xa58>
 800a1d8:	601e      	str	r6, [r3, #0]
 800a1da:	e301      	b.n	800a7e0 <_dtoa_r+0xa58>
 800a1dc:	2202      	movs	r2, #2
 800a1de:	e75e      	b.n	800a09e <_dtoa_r+0x316>
 800a1e0:	07cc      	lsls	r4, r1, #31
 800a1e2:	d504      	bpl.n	800a1ee <_dtoa_r+0x466>
 800a1e4:	ed90 6b00 	vldr	d6, [r0]
 800a1e8:	3201      	adds	r2, #1
 800a1ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1ee:	1049      	asrs	r1, r1, #1
 800a1f0:	3008      	adds	r0, #8
 800a1f2:	e755      	b.n	800a0a0 <_dtoa_r+0x318>
 800a1f4:	d022      	beq.n	800a23c <_dtoa_r+0x4b4>
 800a1f6:	f1c8 0100 	rsb	r1, r8, #0
 800a1fa:	4a68      	ldr	r2, [pc, #416]	@ (800a39c <_dtoa_r+0x614>)
 800a1fc:	f001 000f 	and.w	r0, r1, #15
 800a200:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a204:	ed92 7b00 	vldr	d7, [r2]
 800a208:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a20c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a210:	4863      	ldr	r0, [pc, #396]	@ (800a3a0 <_dtoa_r+0x618>)
 800a212:	1109      	asrs	r1, r1, #4
 800a214:	2400      	movs	r4, #0
 800a216:	2202      	movs	r2, #2
 800a218:	b929      	cbnz	r1, 800a226 <_dtoa_r+0x49e>
 800a21a:	2c00      	cmp	r4, #0
 800a21c:	f43f af49 	beq.w	800a0b2 <_dtoa_r+0x32a>
 800a220:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a224:	e745      	b.n	800a0b2 <_dtoa_r+0x32a>
 800a226:	07ce      	lsls	r6, r1, #31
 800a228:	d505      	bpl.n	800a236 <_dtoa_r+0x4ae>
 800a22a:	ed90 6b00 	vldr	d6, [r0]
 800a22e:	3201      	adds	r2, #1
 800a230:	2401      	movs	r4, #1
 800a232:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a236:	1049      	asrs	r1, r1, #1
 800a238:	3008      	adds	r0, #8
 800a23a:	e7ed      	b.n	800a218 <_dtoa_r+0x490>
 800a23c:	2202      	movs	r2, #2
 800a23e:	e738      	b.n	800a0b2 <_dtoa_r+0x32a>
 800a240:	f8cd 8010 	str.w	r8, [sp, #16]
 800a244:	4654      	mov	r4, sl
 800a246:	e754      	b.n	800a0f2 <_dtoa_r+0x36a>
 800a248:	4a54      	ldr	r2, [pc, #336]	@ (800a39c <_dtoa_r+0x614>)
 800a24a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a24e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a252:	9a08      	ldr	r2, [sp, #32]
 800a254:	ec41 0b17 	vmov	d7, r0, r1
 800a258:	443c      	add	r4, r7
 800a25a:	b34a      	cbz	r2, 800a2b0 <_dtoa_r+0x528>
 800a25c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a260:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a264:	463e      	mov	r6, r7
 800a266:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a26a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a26e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a272:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a276:	ee14 2a90 	vmov	r2, s9
 800a27a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a27e:	3230      	adds	r2, #48	@ 0x30
 800a280:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a284:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28c:	f806 2b01 	strb.w	r2, [r6], #1
 800a290:	d438      	bmi.n	800a304 <_dtoa_r+0x57c>
 800a292:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a296:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29e:	d462      	bmi.n	800a366 <_dtoa_r+0x5de>
 800a2a0:	42a6      	cmp	r6, r4
 800a2a2:	f43f af4d 	beq.w	800a140 <_dtoa_r+0x3b8>
 800a2a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a2aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a2ae:	e7e0      	b.n	800a272 <_dtoa_r+0x4ea>
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	463e      	mov	r6, r7
 800a2b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a2b8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a2bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a2c0:	ee14 2a90 	vmov	r2, s9
 800a2c4:	3230      	adds	r2, #48	@ 0x30
 800a2c6:	f806 2b01 	strb.w	r2, [r6], #1
 800a2ca:	42a6      	cmp	r6, r4
 800a2cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a2d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a2d4:	d119      	bne.n	800a30a <_dtoa_r+0x582>
 800a2d6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a2da:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a2de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e6:	dc3e      	bgt.n	800a366 <_dtoa_r+0x5de>
 800a2e8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a2ec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f4:	f57f af24 	bpl.w	800a140 <_dtoa_r+0x3b8>
 800a2f8:	460e      	mov	r6, r1
 800a2fa:	3901      	subs	r1, #1
 800a2fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a300:	2b30      	cmp	r3, #48	@ 0x30
 800a302:	d0f9      	beq.n	800a2f8 <_dtoa_r+0x570>
 800a304:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a308:	e758      	b.n	800a1bc <_dtoa_r+0x434>
 800a30a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a30e:	e7d5      	b.n	800a2bc <_dtoa_r+0x534>
 800a310:	d10b      	bne.n	800a32a <_dtoa_r+0x5a2>
 800a312:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a316:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a31a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a31e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a326:	f2c0 8161 	blt.w	800a5ec <_dtoa_r+0x864>
 800a32a:	2400      	movs	r4, #0
 800a32c:	4625      	mov	r5, r4
 800a32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a330:	43db      	mvns	r3, r3
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	463e      	mov	r6, r7
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	4621      	mov	r1, r4
 800a33c:	4648      	mov	r0, r9
 800a33e:	f000 fcf1 	bl	800ad24 <_Bfree>
 800a342:	2d00      	cmp	r5, #0
 800a344:	d0de      	beq.n	800a304 <_dtoa_r+0x57c>
 800a346:	f1b8 0f00 	cmp.w	r8, #0
 800a34a:	d005      	beq.n	800a358 <_dtoa_r+0x5d0>
 800a34c:	45a8      	cmp	r8, r5
 800a34e:	d003      	beq.n	800a358 <_dtoa_r+0x5d0>
 800a350:	4641      	mov	r1, r8
 800a352:	4648      	mov	r0, r9
 800a354:	f000 fce6 	bl	800ad24 <_Bfree>
 800a358:	4629      	mov	r1, r5
 800a35a:	4648      	mov	r0, r9
 800a35c:	f000 fce2 	bl	800ad24 <_Bfree>
 800a360:	e7d0      	b.n	800a304 <_dtoa_r+0x57c>
 800a362:	f8cd 8010 	str.w	r8, [sp, #16]
 800a366:	4633      	mov	r3, r6
 800a368:	461e      	mov	r6, r3
 800a36a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a36e:	2a39      	cmp	r2, #57	@ 0x39
 800a370:	d106      	bne.n	800a380 <_dtoa_r+0x5f8>
 800a372:	429f      	cmp	r7, r3
 800a374:	d1f8      	bne.n	800a368 <_dtoa_r+0x5e0>
 800a376:	9a04      	ldr	r2, [sp, #16]
 800a378:	3201      	adds	r2, #1
 800a37a:	9204      	str	r2, [sp, #16]
 800a37c:	2230      	movs	r2, #48	@ 0x30
 800a37e:	703a      	strb	r2, [r7, #0]
 800a380:	781a      	ldrb	r2, [r3, #0]
 800a382:	3201      	adds	r2, #1
 800a384:	701a      	strb	r2, [r3, #0]
 800a386:	e7bd      	b.n	800a304 <_dtoa_r+0x57c>
 800a388:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a38c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a394:	f47f aeef 	bne.w	800a176 <_dtoa_r+0x3ee>
 800a398:	e710      	b.n	800a1bc <_dtoa_r+0x434>
 800a39a:	bf00      	nop
 800a39c:	08056420 	.word	0x08056420
 800a3a0:	080563f8 	.word	0x080563f8
 800a3a4:	9908      	ldr	r1, [sp, #32]
 800a3a6:	2900      	cmp	r1, #0
 800a3a8:	f000 80e3 	beq.w	800a572 <_dtoa_r+0x7ea>
 800a3ac:	9907      	ldr	r1, [sp, #28]
 800a3ae:	2901      	cmp	r1, #1
 800a3b0:	f300 80c8 	bgt.w	800a544 <_dtoa_r+0x7bc>
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	f000 80c1 	beq.w	800a53c <_dtoa_r+0x7b4>
 800a3ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a3be:	9e05      	ldr	r6, [sp, #20]
 800a3c0:	461c      	mov	r4, r3
 800a3c2:	9304      	str	r3, [sp, #16]
 800a3c4:	9b05      	ldr	r3, [sp, #20]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	9b06      	ldr	r3, [sp, #24]
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	4413      	add	r3, r2
 800a3d0:	4648      	mov	r0, r9
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	f000 fd5a 	bl	800ae8c <__i2b>
 800a3d8:	9b04      	ldr	r3, [sp, #16]
 800a3da:	4605      	mov	r5, r0
 800a3dc:	b166      	cbz	r6, 800a3f8 <_dtoa_r+0x670>
 800a3de:	9a06      	ldr	r2, [sp, #24]
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	dd09      	ble.n	800a3f8 <_dtoa_r+0x670>
 800a3e4:	42b2      	cmp	r2, r6
 800a3e6:	9905      	ldr	r1, [sp, #20]
 800a3e8:	bfa8      	it	ge
 800a3ea:	4632      	movge	r2, r6
 800a3ec:	1a89      	subs	r1, r1, r2
 800a3ee:	9105      	str	r1, [sp, #20]
 800a3f0:	9906      	ldr	r1, [sp, #24]
 800a3f2:	1ab6      	subs	r6, r6, r2
 800a3f4:	1a8a      	subs	r2, r1, r2
 800a3f6:	9206      	str	r2, [sp, #24]
 800a3f8:	b1fb      	cbz	r3, 800a43a <_dtoa_r+0x6b2>
 800a3fa:	9a08      	ldr	r2, [sp, #32]
 800a3fc:	2a00      	cmp	r2, #0
 800a3fe:	f000 80bc 	beq.w	800a57a <_dtoa_r+0x7f2>
 800a402:	b19c      	cbz	r4, 800a42c <_dtoa_r+0x6a4>
 800a404:	4629      	mov	r1, r5
 800a406:	4622      	mov	r2, r4
 800a408:	4648      	mov	r0, r9
 800a40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a40c:	f000 fdfe 	bl	800b00c <__pow5mult>
 800a410:	9a01      	ldr	r2, [sp, #4]
 800a412:	4601      	mov	r1, r0
 800a414:	4605      	mov	r5, r0
 800a416:	4648      	mov	r0, r9
 800a418:	f000 fd4e 	bl	800aeb8 <__multiply>
 800a41c:	9901      	ldr	r1, [sp, #4]
 800a41e:	9004      	str	r0, [sp, #16]
 800a420:	4648      	mov	r0, r9
 800a422:	f000 fc7f 	bl	800ad24 <_Bfree>
 800a426:	9a04      	ldr	r2, [sp, #16]
 800a428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a42a:	9201      	str	r2, [sp, #4]
 800a42c:	1b1a      	subs	r2, r3, r4
 800a42e:	d004      	beq.n	800a43a <_dtoa_r+0x6b2>
 800a430:	9901      	ldr	r1, [sp, #4]
 800a432:	4648      	mov	r0, r9
 800a434:	f000 fdea 	bl	800b00c <__pow5mult>
 800a438:	9001      	str	r0, [sp, #4]
 800a43a:	2101      	movs	r1, #1
 800a43c:	4648      	mov	r0, r9
 800a43e:	f000 fd25 	bl	800ae8c <__i2b>
 800a442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a444:	4604      	mov	r4, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 81d0 	beq.w	800a7ec <_dtoa_r+0xa64>
 800a44c:	461a      	mov	r2, r3
 800a44e:	4601      	mov	r1, r0
 800a450:	4648      	mov	r0, r9
 800a452:	f000 fddb 	bl	800b00c <__pow5mult>
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	4604      	mov	r4, r0
 800a45c:	f300 8095 	bgt.w	800a58a <_dtoa_r+0x802>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f040 808b 	bne.w	800a57e <_dtoa_r+0x7f6>
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a46e:	2a00      	cmp	r2, #0
 800a470:	f040 8087 	bne.w	800a582 <_dtoa_r+0x7fa>
 800a474:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a478:	0d12      	lsrs	r2, r2, #20
 800a47a:	0512      	lsls	r2, r2, #20
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	f000 8082 	beq.w	800a586 <_dtoa_r+0x7fe>
 800a482:	9b05      	ldr	r3, [sp, #20]
 800a484:	3301      	adds	r3, #1
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	9b06      	ldr	r3, [sp, #24]
 800a48a:	3301      	adds	r3, #1
 800a48c:	9306      	str	r3, [sp, #24]
 800a48e:	2301      	movs	r3, #1
 800a490:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 81af 	beq.w	800a7f8 <_dtoa_r+0xa70>
 800a49a:	6922      	ldr	r2, [r4, #16]
 800a49c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a4a0:	6910      	ldr	r0, [r2, #16]
 800a4a2:	f000 fca7 	bl	800adf4 <__hi0bits>
 800a4a6:	f1c0 0020 	rsb	r0, r0, #32
 800a4aa:	9b06      	ldr	r3, [sp, #24]
 800a4ac:	4418      	add	r0, r3
 800a4ae:	f010 001f 	ands.w	r0, r0, #31
 800a4b2:	d076      	beq.n	800a5a2 <_dtoa_r+0x81a>
 800a4b4:	f1c0 0220 	rsb	r2, r0, #32
 800a4b8:	2a04      	cmp	r2, #4
 800a4ba:	dd69      	ble.n	800a590 <_dtoa_r+0x808>
 800a4bc:	9b05      	ldr	r3, [sp, #20]
 800a4be:	f1c0 001c 	rsb	r0, r0, #28
 800a4c2:	4403      	add	r3, r0
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	9b06      	ldr	r3, [sp, #24]
 800a4c8:	4406      	add	r6, r0
 800a4ca:	4403      	add	r3, r0
 800a4cc:	9306      	str	r3, [sp, #24]
 800a4ce:	9b05      	ldr	r3, [sp, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dd05      	ble.n	800a4e0 <_dtoa_r+0x758>
 800a4d4:	9901      	ldr	r1, [sp, #4]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	4648      	mov	r0, r9
 800a4da:	f000 fdf1 	bl	800b0c0 <__lshift>
 800a4de:	9001      	str	r0, [sp, #4]
 800a4e0:	9b06      	ldr	r3, [sp, #24]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dd05      	ble.n	800a4f2 <_dtoa_r+0x76a>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4648      	mov	r0, r9
 800a4ec:	f000 fde8 	bl	800b0c0 <__lshift>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d056      	beq.n	800a5a6 <_dtoa_r+0x81e>
 800a4f8:	9801      	ldr	r0, [sp, #4]
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	f000 fe4c 	bl	800b198 <__mcmp>
 800a500:	2800      	cmp	r0, #0
 800a502:	da50      	bge.n	800a5a6 <_dtoa_r+0x81e>
 800a504:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	9901      	ldr	r1, [sp, #4]
 800a50c:	2300      	movs	r3, #0
 800a50e:	220a      	movs	r2, #10
 800a510:	4648      	mov	r0, r9
 800a512:	f000 fc29 	bl	800ad68 <__multadd>
 800a516:	9b08      	ldr	r3, [sp, #32]
 800a518:	9001      	str	r0, [sp, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 816e 	beq.w	800a7fc <_dtoa_r+0xa74>
 800a520:	4629      	mov	r1, r5
 800a522:	2300      	movs	r3, #0
 800a524:	220a      	movs	r2, #10
 800a526:	4648      	mov	r0, r9
 800a528:	f000 fc1e 	bl	800ad68 <__multadd>
 800a52c:	f1bb 0f00 	cmp.w	fp, #0
 800a530:	4605      	mov	r5, r0
 800a532:	dc64      	bgt.n	800a5fe <_dtoa_r+0x876>
 800a534:	9b07      	ldr	r3, [sp, #28]
 800a536:	2b02      	cmp	r3, #2
 800a538:	dc3e      	bgt.n	800a5b8 <_dtoa_r+0x830>
 800a53a:	e060      	b.n	800a5fe <_dtoa_r+0x876>
 800a53c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a53e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a542:	e73c      	b.n	800a3be <_dtoa_r+0x636>
 800a544:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800a548:	42a3      	cmp	r3, r4
 800a54a:	bfbf      	itttt	lt
 800a54c:	1ae2      	sublt	r2, r4, r3
 800a54e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a550:	189b      	addlt	r3, r3, r2
 800a552:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a554:	bfae      	itee	ge
 800a556:	1b1c      	subge	r4, r3, r4
 800a558:	4623      	movlt	r3, r4
 800a55a:	2400      	movlt	r4, #0
 800a55c:	f1ba 0f00 	cmp.w	sl, #0
 800a560:	bfb5      	itete	lt
 800a562:	9a05      	ldrlt	r2, [sp, #20]
 800a564:	9e05      	ldrge	r6, [sp, #20]
 800a566:	eba2 060a 	sublt.w	r6, r2, sl
 800a56a:	4652      	movge	r2, sl
 800a56c:	bfb8      	it	lt
 800a56e:	2200      	movlt	r2, #0
 800a570:	e727      	b.n	800a3c2 <_dtoa_r+0x63a>
 800a572:	9e05      	ldr	r6, [sp, #20]
 800a574:	9d08      	ldr	r5, [sp, #32]
 800a576:	461c      	mov	r4, r3
 800a578:	e730      	b.n	800a3dc <_dtoa_r+0x654>
 800a57a:	461a      	mov	r2, r3
 800a57c:	e758      	b.n	800a430 <_dtoa_r+0x6a8>
 800a57e:	2300      	movs	r3, #0
 800a580:	e786      	b.n	800a490 <_dtoa_r+0x708>
 800a582:	9b02      	ldr	r3, [sp, #8]
 800a584:	e784      	b.n	800a490 <_dtoa_r+0x708>
 800a586:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a588:	e783      	b.n	800a492 <_dtoa_r+0x70a>
 800a58a:	2300      	movs	r3, #0
 800a58c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a58e:	e784      	b.n	800a49a <_dtoa_r+0x712>
 800a590:	d09d      	beq.n	800a4ce <_dtoa_r+0x746>
 800a592:	9b05      	ldr	r3, [sp, #20]
 800a594:	321c      	adds	r2, #28
 800a596:	4413      	add	r3, r2
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	9b06      	ldr	r3, [sp, #24]
 800a59c:	4416      	add	r6, r2
 800a59e:	4413      	add	r3, r2
 800a5a0:	e794      	b.n	800a4cc <_dtoa_r+0x744>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	e7f5      	b.n	800a592 <_dtoa_r+0x80a>
 800a5a6:	f1ba 0f00 	cmp.w	sl, #0
 800a5aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800a5ae:	46d3      	mov	fp, sl
 800a5b0:	dc21      	bgt.n	800a5f6 <_dtoa_r+0x86e>
 800a5b2:	9b07      	ldr	r3, [sp, #28]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	dd1e      	ble.n	800a5f6 <_dtoa_r+0x86e>
 800a5b8:	f1bb 0f00 	cmp.w	fp, #0
 800a5bc:	f47f aeb7 	bne.w	800a32e <_dtoa_r+0x5a6>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	465b      	mov	r3, fp
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	4648      	mov	r0, r9
 800a5c8:	f000 fbce 	bl	800ad68 <__multadd>
 800a5cc:	4601      	mov	r1, r0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	f000 fde1 	bl	800b198 <__mcmp>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	f77f aea9 	ble.w	800a32e <_dtoa_r+0x5a6>
 800a5dc:	463e      	mov	r6, r7
 800a5de:	2331      	movs	r3, #49	@ 0x31
 800a5e0:	f806 3b01 	strb.w	r3, [r6], #1
 800a5e4:	9b04      	ldr	r3, [sp, #16]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	e6a4      	b.n	800a336 <_dtoa_r+0x5ae>
 800a5ec:	f8cd 8010 	str.w	r8, [sp, #16]
 800a5f0:	4654      	mov	r4, sl
 800a5f2:	4625      	mov	r5, r4
 800a5f4:	e7f2      	b.n	800a5dc <_dtoa_r+0x854>
 800a5f6:	9b08      	ldr	r3, [sp, #32]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 8103 	beq.w	800a804 <_dtoa_r+0xa7c>
 800a5fe:	2e00      	cmp	r6, #0
 800a600:	dd05      	ble.n	800a60e <_dtoa_r+0x886>
 800a602:	4629      	mov	r1, r5
 800a604:	4632      	mov	r2, r6
 800a606:	4648      	mov	r0, r9
 800a608:	f000 fd5a 	bl	800b0c0 <__lshift>
 800a60c:	4605      	mov	r5, r0
 800a60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d058      	beq.n	800a6c6 <_dtoa_r+0x93e>
 800a614:	6869      	ldr	r1, [r5, #4]
 800a616:	4648      	mov	r0, r9
 800a618:	f000 fb44 	bl	800aca4 <_Balloc>
 800a61c:	4606      	mov	r6, r0
 800a61e:	b928      	cbnz	r0, 800a62c <_dtoa_r+0x8a4>
 800a620:	4b82      	ldr	r3, [pc, #520]	@ (800a82c <_dtoa_r+0xaa4>)
 800a622:	4602      	mov	r2, r0
 800a624:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a628:	f7ff bbc7 	b.w	8009dba <_dtoa_r+0x32>
 800a62c:	692a      	ldr	r2, [r5, #16]
 800a62e:	3202      	adds	r2, #2
 800a630:	0092      	lsls	r2, r2, #2
 800a632:	f105 010c 	add.w	r1, r5, #12
 800a636:	300c      	adds	r0, #12
 800a638:	f7ff fb0f 	bl	8009c5a <memcpy>
 800a63c:	2201      	movs	r2, #1
 800a63e:	4631      	mov	r1, r6
 800a640:	4648      	mov	r0, r9
 800a642:	f000 fd3d 	bl	800b0c0 <__lshift>
 800a646:	1c7b      	adds	r3, r7, #1
 800a648:	9305      	str	r3, [sp, #20]
 800a64a:	eb07 030b 	add.w	r3, r7, fp
 800a64e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a650:	9b02      	ldr	r3, [sp, #8]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	46a8      	mov	r8, r5
 800a658:	9308      	str	r3, [sp, #32]
 800a65a:	4605      	mov	r5, r0
 800a65c:	9b05      	ldr	r3, [sp, #20]
 800a65e:	9801      	ldr	r0, [sp, #4]
 800a660:	4621      	mov	r1, r4
 800a662:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a666:	f7ff fb06 	bl	8009c76 <quorem>
 800a66a:	4641      	mov	r1, r8
 800a66c:	9002      	str	r0, [sp, #8]
 800a66e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a672:	9801      	ldr	r0, [sp, #4]
 800a674:	f000 fd90 	bl	800b198 <__mcmp>
 800a678:	462a      	mov	r2, r5
 800a67a:	9006      	str	r0, [sp, #24]
 800a67c:	4621      	mov	r1, r4
 800a67e:	4648      	mov	r0, r9
 800a680:	f000 fda6 	bl	800b1d0 <__mdiff>
 800a684:	68c2      	ldr	r2, [r0, #12]
 800a686:	4606      	mov	r6, r0
 800a688:	b9fa      	cbnz	r2, 800a6ca <_dtoa_r+0x942>
 800a68a:	4601      	mov	r1, r0
 800a68c:	9801      	ldr	r0, [sp, #4]
 800a68e:	f000 fd83 	bl	800b198 <__mcmp>
 800a692:	4602      	mov	r2, r0
 800a694:	4631      	mov	r1, r6
 800a696:	4648      	mov	r0, r9
 800a698:	920a      	str	r2, [sp, #40]	@ 0x28
 800a69a:	f000 fb43 	bl	800ad24 <_Bfree>
 800a69e:	9b07      	ldr	r3, [sp, #28]
 800a6a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6a2:	9e05      	ldr	r6, [sp, #20]
 800a6a4:	ea43 0102 	orr.w	r1, r3, r2
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	4319      	orrs	r1, r3
 800a6ac:	d10f      	bne.n	800a6ce <_dtoa_r+0x946>
 800a6ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a6b2:	d028      	beq.n	800a706 <_dtoa_r+0x97e>
 800a6b4:	9b06      	ldr	r3, [sp, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dd02      	ble.n	800a6c0 <_dtoa_r+0x938>
 800a6ba:	9b02      	ldr	r3, [sp, #8]
 800a6bc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a6c0:	f88b a000 	strb.w	sl, [fp]
 800a6c4:	e639      	b.n	800a33a <_dtoa_r+0x5b2>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	e7bd      	b.n	800a646 <_dtoa_r+0x8be>
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	e7e2      	b.n	800a694 <_dtoa_r+0x90c>
 800a6ce:	9b06      	ldr	r3, [sp, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	db04      	blt.n	800a6de <_dtoa_r+0x956>
 800a6d4:	9907      	ldr	r1, [sp, #28]
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	9908      	ldr	r1, [sp, #32]
 800a6da:	430b      	orrs	r3, r1
 800a6dc:	d120      	bne.n	800a720 <_dtoa_r+0x998>
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	ddee      	ble.n	800a6c0 <_dtoa_r+0x938>
 800a6e2:	9901      	ldr	r1, [sp, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	4648      	mov	r0, r9
 800a6e8:	f000 fcea 	bl	800b0c0 <__lshift>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	9001      	str	r0, [sp, #4]
 800a6f0:	f000 fd52 	bl	800b198 <__mcmp>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	dc03      	bgt.n	800a700 <_dtoa_r+0x978>
 800a6f8:	d1e2      	bne.n	800a6c0 <_dtoa_r+0x938>
 800a6fa:	f01a 0f01 	tst.w	sl, #1
 800a6fe:	d0df      	beq.n	800a6c0 <_dtoa_r+0x938>
 800a700:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a704:	d1d9      	bne.n	800a6ba <_dtoa_r+0x932>
 800a706:	2339      	movs	r3, #57	@ 0x39
 800a708:	f88b 3000 	strb.w	r3, [fp]
 800a70c:	4633      	mov	r3, r6
 800a70e:	461e      	mov	r6, r3
 800a710:	3b01      	subs	r3, #1
 800a712:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a716:	2a39      	cmp	r2, #57	@ 0x39
 800a718:	d053      	beq.n	800a7c2 <_dtoa_r+0xa3a>
 800a71a:	3201      	adds	r2, #1
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	e60c      	b.n	800a33a <_dtoa_r+0x5b2>
 800a720:	2a00      	cmp	r2, #0
 800a722:	dd07      	ble.n	800a734 <_dtoa_r+0x9ac>
 800a724:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a728:	d0ed      	beq.n	800a706 <_dtoa_r+0x97e>
 800a72a:	f10a 0301 	add.w	r3, sl, #1
 800a72e:	f88b 3000 	strb.w	r3, [fp]
 800a732:	e602      	b.n	800a33a <_dtoa_r+0x5b2>
 800a734:	9b05      	ldr	r3, [sp, #20]
 800a736:	9a05      	ldr	r2, [sp, #20]
 800a738:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a73e:	4293      	cmp	r3, r2
 800a740:	d029      	beq.n	800a796 <_dtoa_r+0xa0e>
 800a742:	9901      	ldr	r1, [sp, #4]
 800a744:	2300      	movs	r3, #0
 800a746:	220a      	movs	r2, #10
 800a748:	4648      	mov	r0, r9
 800a74a:	f000 fb0d 	bl	800ad68 <__multadd>
 800a74e:	45a8      	cmp	r8, r5
 800a750:	9001      	str	r0, [sp, #4]
 800a752:	f04f 0300 	mov.w	r3, #0
 800a756:	f04f 020a 	mov.w	r2, #10
 800a75a:	4641      	mov	r1, r8
 800a75c:	4648      	mov	r0, r9
 800a75e:	d107      	bne.n	800a770 <_dtoa_r+0x9e8>
 800a760:	f000 fb02 	bl	800ad68 <__multadd>
 800a764:	4680      	mov	r8, r0
 800a766:	4605      	mov	r5, r0
 800a768:	9b05      	ldr	r3, [sp, #20]
 800a76a:	3301      	adds	r3, #1
 800a76c:	9305      	str	r3, [sp, #20]
 800a76e:	e775      	b.n	800a65c <_dtoa_r+0x8d4>
 800a770:	f000 fafa 	bl	800ad68 <__multadd>
 800a774:	4629      	mov	r1, r5
 800a776:	4680      	mov	r8, r0
 800a778:	2300      	movs	r3, #0
 800a77a:	220a      	movs	r2, #10
 800a77c:	4648      	mov	r0, r9
 800a77e:	f000 faf3 	bl	800ad68 <__multadd>
 800a782:	4605      	mov	r5, r0
 800a784:	e7f0      	b.n	800a768 <_dtoa_r+0x9e0>
 800a786:	f1bb 0f00 	cmp.w	fp, #0
 800a78a:	bfcc      	ite	gt
 800a78c:	465e      	movgt	r6, fp
 800a78e:	2601      	movle	r6, #1
 800a790:	443e      	add	r6, r7
 800a792:	f04f 0800 	mov.w	r8, #0
 800a796:	9901      	ldr	r1, [sp, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	4648      	mov	r0, r9
 800a79c:	f000 fc90 	bl	800b0c0 <__lshift>
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	9001      	str	r0, [sp, #4]
 800a7a4:	f000 fcf8 	bl	800b198 <__mcmp>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	dcaf      	bgt.n	800a70c <_dtoa_r+0x984>
 800a7ac:	d102      	bne.n	800a7b4 <_dtoa_r+0xa2c>
 800a7ae:	f01a 0f01 	tst.w	sl, #1
 800a7b2:	d1ab      	bne.n	800a70c <_dtoa_r+0x984>
 800a7b4:	4633      	mov	r3, r6
 800a7b6:	461e      	mov	r6, r3
 800a7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7bc:	2a30      	cmp	r2, #48	@ 0x30
 800a7be:	d0fa      	beq.n	800a7b6 <_dtoa_r+0xa2e>
 800a7c0:	e5bb      	b.n	800a33a <_dtoa_r+0x5b2>
 800a7c2:	429f      	cmp	r7, r3
 800a7c4:	d1a3      	bne.n	800a70e <_dtoa_r+0x986>
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	2331      	movs	r3, #49	@ 0x31
 800a7ce:	703b      	strb	r3, [r7, #0]
 800a7d0:	e5b3      	b.n	800a33a <_dtoa_r+0x5b2>
 800a7d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a7d4:	4f16      	ldr	r7, [pc, #88]	@ (800a830 <_dtoa_r+0xaa8>)
 800a7d6:	b11b      	cbz	r3, 800a7e0 <_dtoa_r+0xa58>
 800a7d8:	f107 0308 	add.w	r3, r7, #8
 800a7dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	b011      	add	sp, #68	@ 0x44
 800a7e4:	ecbd 8b02 	vpop	{d8}
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	9b07      	ldr	r3, [sp, #28]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	f77f ae36 	ble.w	800a460 <_dtoa_r+0x6d8>
 800a7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	e656      	b.n	800a4aa <_dtoa_r+0x722>
 800a7fc:	f1bb 0f00 	cmp.w	fp, #0
 800a800:	f77f aed7 	ble.w	800a5b2 <_dtoa_r+0x82a>
 800a804:	463e      	mov	r6, r7
 800a806:	9801      	ldr	r0, [sp, #4]
 800a808:	4621      	mov	r1, r4
 800a80a:	f7ff fa34 	bl	8009c76 <quorem>
 800a80e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a812:	f806 ab01 	strb.w	sl, [r6], #1
 800a816:	1bf2      	subs	r2, r6, r7
 800a818:	4593      	cmp	fp, r2
 800a81a:	ddb4      	ble.n	800a786 <_dtoa_r+0x9fe>
 800a81c:	9901      	ldr	r1, [sp, #4]
 800a81e:	2300      	movs	r3, #0
 800a820:	220a      	movs	r2, #10
 800a822:	4648      	mov	r0, r9
 800a824:	f000 faa0 	bl	800ad68 <__multadd>
 800a828:	9001      	str	r0, [sp, #4]
 800a82a:	e7ec      	b.n	800a806 <_dtoa_r+0xa7e>
 800a82c:	08056370 	.word	0x08056370
 800a830:	080562f4 	.word	0x080562f4

0800a834 <_free_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4605      	mov	r5, r0
 800a838:	2900      	cmp	r1, #0
 800a83a:	d041      	beq.n	800a8c0 <_free_r+0x8c>
 800a83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a840:	1f0c      	subs	r4, r1, #4
 800a842:	2b00      	cmp	r3, #0
 800a844:	bfb8      	it	lt
 800a846:	18e4      	addlt	r4, r4, r3
 800a848:	f7ff f880 	bl	800994c <__malloc_lock>
 800a84c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8c4 <_free_r+0x90>)
 800a84e:	6813      	ldr	r3, [r2, #0]
 800a850:	b933      	cbnz	r3, 800a860 <_free_r+0x2c>
 800a852:	6063      	str	r3, [r4, #4]
 800a854:	6014      	str	r4, [r2, #0]
 800a856:	4628      	mov	r0, r5
 800a858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a85c:	f7ff b87c 	b.w	8009958 <__malloc_unlock>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d908      	bls.n	800a876 <_free_r+0x42>
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	1821      	adds	r1, r4, r0
 800a868:	428b      	cmp	r3, r1
 800a86a:	bf01      	itttt	eq
 800a86c:	6819      	ldreq	r1, [r3, #0]
 800a86e:	685b      	ldreq	r3, [r3, #4]
 800a870:	1809      	addeq	r1, r1, r0
 800a872:	6021      	streq	r1, [r4, #0]
 800a874:	e7ed      	b.n	800a852 <_free_r+0x1e>
 800a876:	461a      	mov	r2, r3
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	b10b      	cbz	r3, 800a880 <_free_r+0x4c>
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d9fa      	bls.n	800a876 <_free_r+0x42>
 800a880:	6811      	ldr	r1, [r2, #0]
 800a882:	1850      	adds	r0, r2, r1
 800a884:	42a0      	cmp	r0, r4
 800a886:	d10b      	bne.n	800a8a0 <_free_r+0x6c>
 800a888:	6820      	ldr	r0, [r4, #0]
 800a88a:	4401      	add	r1, r0
 800a88c:	1850      	adds	r0, r2, r1
 800a88e:	4283      	cmp	r3, r0
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	d1e0      	bne.n	800a856 <_free_r+0x22>
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	6053      	str	r3, [r2, #4]
 800a89a:	4408      	add	r0, r1
 800a89c:	6010      	str	r0, [r2, #0]
 800a89e:	e7da      	b.n	800a856 <_free_r+0x22>
 800a8a0:	d902      	bls.n	800a8a8 <_free_r+0x74>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	e7d6      	b.n	800a856 <_free_r+0x22>
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	1821      	adds	r1, r4, r0
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	bf04      	itt	eq
 800a8b0:	6819      	ldreq	r1, [r3, #0]
 800a8b2:	685b      	ldreq	r3, [r3, #4]
 800a8b4:	6063      	str	r3, [r4, #4]
 800a8b6:	bf04      	itt	eq
 800a8b8:	1809      	addeq	r1, r1, r0
 800a8ba:	6021      	streq	r1, [r4, #0]
 800a8bc:	6054      	str	r4, [r2, #4]
 800a8be:	e7ca      	b.n	800a856 <_free_r+0x22>
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20017dac 	.word	0x20017dac

0800a8c8 <__sfputc_r>:
 800a8c8:	6893      	ldr	r3, [r2, #8]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	b410      	push	{r4}
 800a8d0:	6093      	str	r3, [r2, #8]
 800a8d2:	da08      	bge.n	800a8e6 <__sfputc_r+0x1e>
 800a8d4:	6994      	ldr	r4, [r2, #24]
 800a8d6:	42a3      	cmp	r3, r4
 800a8d8:	db01      	blt.n	800a8de <__sfputc_r+0x16>
 800a8da:	290a      	cmp	r1, #10
 800a8dc:	d103      	bne.n	800a8e6 <__sfputc_r+0x1e>
 800a8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8e2:	f000 bda4 	b.w	800b42e <__swbuf_r>
 800a8e6:	6813      	ldr	r3, [r2, #0]
 800a8e8:	1c58      	adds	r0, r3, #1
 800a8ea:	6010      	str	r0, [r2, #0]
 800a8ec:	7019      	strb	r1, [r3, #0]
 800a8ee:	4608      	mov	r0, r1
 800a8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <__sfputs_r>:
 800a8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	460f      	mov	r7, r1
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	18d5      	adds	r5, r2, r3
 800a900:	42ac      	cmp	r4, r5
 800a902:	d101      	bne.n	800a908 <__sfputs_r+0x12>
 800a904:	2000      	movs	r0, #0
 800a906:	e007      	b.n	800a918 <__sfputs_r+0x22>
 800a908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90c:	463a      	mov	r2, r7
 800a90e:	4630      	mov	r0, r6
 800a910:	f7ff ffda 	bl	800a8c8 <__sfputc_r>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d1f3      	bne.n	800a900 <__sfputs_r+0xa>
 800a918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a91c <_vfiprintf_r>:
 800a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a920:	460d      	mov	r5, r1
 800a922:	b09d      	sub	sp, #116	@ 0x74
 800a924:	4614      	mov	r4, r2
 800a926:	4698      	mov	r8, r3
 800a928:	4606      	mov	r6, r0
 800a92a:	b118      	cbz	r0, 800a934 <_vfiprintf_r+0x18>
 800a92c:	6a03      	ldr	r3, [r0, #32]
 800a92e:	b90b      	cbnz	r3, 800a934 <_vfiprintf_r+0x18>
 800a930:	f7ff f8a4 	bl	8009a7c <__sinit>
 800a934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a936:	07d9      	lsls	r1, r3, #31
 800a938:	d405      	bmi.n	800a946 <_vfiprintf_r+0x2a>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	059a      	lsls	r2, r3, #22
 800a93e:	d402      	bmi.n	800a946 <_vfiprintf_r+0x2a>
 800a940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a942:	f7ff f988 	bl	8009c56 <__retarget_lock_acquire_recursive>
 800a946:	89ab      	ldrh	r3, [r5, #12]
 800a948:	071b      	lsls	r3, r3, #28
 800a94a:	d501      	bpl.n	800a950 <_vfiprintf_r+0x34>
 800a94c:	692b      	ldr	r3, [r5, #16]
 800a94e:	b99b      	cbnz	r3, 800a978 <_vfiprintf_r+0x5c>
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f000 fdaa 	bl	800b4ac <__swsetup_r>
 800a958:	b170      	cbz	r0, 800a978 <_vfiprintf_r+0x5c>
 800a95a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a95c:	07dc      	lsls	r4, r3, #31
 800a95e:	d504      	bpl.n	800a96a <_vfiprintf_r+0x4e>
 800a960:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a964:	b01d      	add	sp, #116	@ 0x74
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	89ab      	ldrh	r3, [r5, #12]
 800a96c:	0598      	lsls	r0, r3, #22
 800a96e:	d4f7      	bmi.n	800a960 <_vfiprintf_r+0x44>
 800a970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a972:	f7ff f971 	bl	8009c58 <__retarget_lock_release_recursive>
 800a976:	e7f3      	b.n	800a960 <_vfiprintf_r+0x44>
 800a978:	2300      	movs	r3, #0
 800a97a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97c:	2320      	movs	r3, #32
 800a97e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a982:	f8cd 800c 	str.w	r8, [sp, #12]
 800a986:	2330      	movs	r3, #48	@ 0x30
 800a988:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab38 <_vfiprintf_r+0x21c>
 800a98c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a990:	f04f 0901 	mov.w	r9, #1
 800a994:	4623      	mov	r3, r4
 800a996:	469a      	mov	sl, r3
 800a998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a99c:	b10a      	cbz	r2, 800a9a2 <_vfiprintf_r+0x86>
 800a99e:	2a25      	cmp	r2, #37	@ 0x25
 800a9a0:	d1f9      	bne.n	800a996 <_vfiprintf_r+0x7a>
 800a9a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9a6:	d00b      	beq.n	800a9c0 <_vfiprintf_r+0xa4>
 800a9a8:	465b      	mov	r3, fp
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f7ff ffa1 	bl	800a8f6 <__sfputs_r>
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	f000 80a7 	beq.w	800ab08 <_vfiprintf_r+0x1ec>
 800a9ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9bc:	445a      	add	r2, fp
 800a9be:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 809f 	beq.w	800ab08 <_vfiprintf_r+0x1ec>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9d4:	f10a 0a01 	add.w	sl, sl, #1
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	9307      	str	r3, [sp, #28]
 800a9dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9e2:	4654      	mov	r4, sl
 800a9e4:	2205      	movs	r2, #5
 800a9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ea:	4853      	ldr	r0, [pc, #332]	@ (800ab38 <_vfiprintf_r+0x21c>)
 800a9ec:	f7f5 fc28 	bl	8000240 <memchr>
 800a9f0:	9a04      	ldr	r2, [sp, #16]
 800a9f2:	b9d8      	cbnz	r0, 800aa2c <_vfiprintf_r+0x110>
 800a9f4:	06d1      	lsls	r1, r2, #27
 800a9f6:	bf44      	itt	mi
 800a9f8:	2320      	movmi	r3, #32
 800a9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9fe:	0713      	lsls	r3, r2, #28
 800aa00:	bf44      	itt	mi
 800aa02:	232b      	movmi	r3, #43	@ 0x2b
 800aa04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa08:	f89a 3000 	ldrb.w	r3, [sl]
 800aa0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa0e:	d015      	beq.n	800aa3c <_vfiprintf_r+0x120>
 800aa10:	9a07      	ldr	r2, [sp, #28]
 800aa12:	4654      	mov	r4, sl
 800aa14:	2000      	movs	r0, #0
 800aa16:	f04f 0c0a 	mov.w	ip, #10
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa20:	3b30      	subs	r3, #48	@ 0x30
 800aa22:	2b09      	cmp	r3, #9
 800aa24:	d94b      	bls.n	800aabe <_vfiprintf_r+0x1a2>
 800aa26:	b1b0      	cbz	r0, 800aa56 <_vfiprintf_r+0x13a>
 800aa28:	9207      	str	r2, [sp, #28]
 800aa2a:	e014      	b.n	800aa56 <_vfiprintf_r+0x13a>
 800aa2c:	eba0 0308 	sub.w	r3, r0, r8
 800aa30:	fa09 f303 	lsl.w	r3, r9, r3
 800aa34:	4313      	orrs	r3, r2
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	46a2      	mov	sl, r4
 800aa3a:	e7d2      	b.n	800a9e2 <_vfiprintf_r+0xc6>
 800aa3c:	9b03      	ldr	r3, [sp, #12]
 800aa3e:	1d19      	adds	r1, r3, #4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	9103      	str	r1, [sp, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bfbb      	ittet	lt
 800aa48:	425b      	neglt	r3, r3
 800aa4a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa4e:	9307      	strge	r3, [sp, #28]
 800aa50:	9307      	strlt	r3, [sp, #28]
 800aa52:	bfb8      	it	lt
 800aa54:	9204      	strlt	r2, [sp, #16]
 800aa56:	7823      	ldrb	r3, [r4, #0]
 800aa58:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa5a:	d10a      	bne.n	800aa72 <_vfiprintf_r+0x156>
 800aa5c:	7863      	ldrb	r3, [r4, #1]
 800aa5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa60:	d132      	bne.n	800aac8 <_vfiprintf_r+0x1ac>
 800aa62:	9b03      	ldr	r3, [sp, #12]
 800aa64:	1d1a      	adds	r2, r3, #4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	9203      	str	r2, [sp, #12]
 800aa6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa6e:	3402      	adds	r4, #2
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab48 <_vfiprintf_r+0x22c>
 800aa76:	7821      	ldrb	r1, [r4, #0]
 800aa78:	2203      	movs	r2, #3
 800aa7a:	4650      	mov	r0, sl
 800aa7c:	f7f5 fbe0 	bl	8000240 <memchr>
 800aa80:	b138      	cbz	r0, 800aa92 <_vfiprintf_r+0x176>
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	eba0 000a 	sub.w	r0, r0, sl
 800aa88:	2240      	movs	r2, #64	@ 0x40
 800aa8a:	4082      	lsls	r2, r0
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	3401      	adds	r4, #1
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa96:	4829      	ldr	r0, [pc, #164]	@ (800ab3c <_vfiprintf_r+0x220>)
 800aa98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa9c:	2206      	movs	r2, #6
 800aa9e:	f7f5 fbcf 	bl	8000240 <memchr>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d03f      	beq.n	800ab26 <_vfiprintf_r+0x20a>
 800aaa6:	4b26      	ldr	r3, [pc, #152]	@ (800ab40 <_vfiprintf_r+0x224>)
 800aaa8:	bb1b      	cbnz	r3, 800aaf2 <_vfiprintf_r+0x1d6>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	3307      	adds	r3, #7
 800aaae:	f023 0307 	bic.w	r3, r3, #7
 800aab2:	3308      	adds	r3, #8
 800aab4:	9303      	str	r3, [sp, #12]
 800aab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab8:	443b      	add	r3, r7
 800aaba:	9309      	str	r3, [sp, #36]	@ 0x24
 800aabc:	e76a      	b.n	800a994 <_vfiprintf_r+0x78>
 800aabe:	fb0c 3202 	mla	r2, ip, r2, r3
 800aac2:	460c      	mov	r4, r1
 800aac4:	2001      	movs	r0, #1
 800aac6:	e7a8      	b.n	800aa1a <_vfiprintf_r+0xfe>
 800aac8:	2300      	movs	r3, #0
 800aaca:	3401      	adds	r4, #1
 800aacc:	9305      	str	r3, [sp, #20]
 800aace:	4619      	mov	r1, r3
 800aad0:	f04f 0c0a 	mov.w	ip, #10
 800aad4:	4620      	mov	r0, r4
 800aad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aada:	3a30      	subs	r2, #48	@ 0x30
 800aadc:	2a09      	cmp	r2, #9
 800aade:	d903      	bls.n	800aae8 <_vfiprintf_r+0x1cc>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d0c6      	beq.n	800aa72 <_vfiprintf_r+0x156>
 800aae4:	9105      	str	r1, [sp, #20]
 800aae6:	e7c4      	b.n	800aa72 <_vfiprintf_r+0x156>
 800aae8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaec:	4604      	mov	r4, r0
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e7f0      	b.n	800aad4 <_vfiprintf_r+0x1b8>
 800aaf2:	ab03      	add	r3, sp, #12
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	462a      	mov	r2, r5
 800aaf8:	4b12      	ldr	r3, [pc, #72]	@ (800ab44 <_vfiprintf_r+0x228>)
 800aafa:	a904      	add	r1, sp, #16
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7fe fad3 	bl	80090a8 <_printf_float>
 800ab02:	4607      	mov	r7, r0
 800ab04:	1c78      	adds	r0, r7, #1
 800ab06:	d1d6      	bne.n	800aab6 <_vfiprintf_r+0x19a>
 800ab08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab0a:	07d9      	lsls	r1, r3, #31
 800ab0c:	d405      	bmi.n	800ab1a <_vfiprintf_r+0x1fe>
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	059a      	lsls	r2, r3, #22
 800ab12:	d402      	bmi.n	800ab1a <_vfiprintf_r+0x1fe>
 800ab14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab16:	f7ff f89f 	bl	8009c58 <__retarget_lock_release_recursive>
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	065b      	lsls	r3, r3, #25
 800ab1e:	f53f af1f 	bmi.w	800a960 <_vfiprintf_r+0x44>
 800ab22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab24:	e71e      	b.n	800a964 <_vfiprintf_r+0x48>
 800ab26:	ab03      	add	r3, sp, #12
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	4b05      	ldr	r3, [pc, #20]	@ (800ab44 <_vfiprintf_r+0x228>)
 800ab2e:	a904      	add	r1, sp, #16
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7fe fdeb 	bl	800970c <_printf_i>
 800ab36:	e7e4      	b.n	800ab02 <_vfiprintf_r+0x1e6>
 800ab38:	08056381 	.word	0x08056381
 800ab3c:	0805638b 	.word	0x0805638b
 800ab40:	080090a9 	.word	0x080090a9
 800ab44:	0800a8f7 	.word	0x0800a8f7
 800ab48:	08056387 	.word	0x08056387

0800ab4c <__sflush_r>:
 800ab4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab54:	0716      	lsls	r6, r2, #28
 800ab56:	4605      	mov	r5, r0
 800ab58:	460c      	mov	r4, r1
 800ab5a:	d454      	bmi.n	800ac06 <__sflush_r+0xba>
 800ab5c:	684b      	ldr	r3, [r1, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dc02      	bgt.n	800ab68 <__sflush_r+0x1c>
 800ab62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dd48      	ble.n	800abfa <__sflush_r+0xae>
 800ab68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	d045      	beq.n	800abfa <__sflush_r+0xae>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab74:	682f      	ldr	r7, [r5, #0]
 800ab76:	6a21      	ldr	r1, [r4, #32]
 800ab78:	602b      	str	r3, [r5, #0]
 800ab7a:	d030      	beq.n	800abde <__sflush_r+0x92>
 800ab7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	0759      	lsls	r1, r3, #29
 800ab82:	d505      	bpl.n	800ab90 <__sflush_r+0x44>
 800ab84:	6863      	ldr	r3, [r4, #4]
 800ab86:	1ad2      	subs	r2, r2, r3
 800ab88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab8a:	b10b      	cbz	r3, 800ab90 <__sflush_r+0x44>
 800ab8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab8e:	1ad2      	subs	r2, r2, r3
 800ab90:	2300      	movs	r3, #0
 800ab92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab94:	6a21      	ldr	r1, [r4, #32]
 800ab96:	4628      	mov	r0, r5
 800ab98:	47b0      	blx	r6
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	d106      	bne.n	800abae <__sflush_r+0x62>
 800aba0:	6829      	ldr	r1, [r5, #0]
 800aba2:	291d      	cmp	r1, #29
 800aba4:	d82b      	bhi.n	800abfe <__sflush_r+0xb2>
 800aba6:	4a2a      	ldr	r2, [pc, #168]	@ (800ac50 <__sflush_r+0x104>)
 800aba8:	410a      	asrs	r2, r1
 800abaa:	07d6      	lsls	r6, r2, #31
 800abac:	d427      	bmi.n	800abfe <__sflush_r+0xb2>
 800abae:	2200      	movs	r2, #0
 800abb0:	6062      	str	r2, [r4, #4]
 800abb2:	04d9      	lsls	r1, r3, #19
 800abb4:	6922      	ldr	r2, [r4, #16]
 800abb6:	6022      	str	r2, [r4, #0]
 800abb8:	d504      	bpl.n	800abc4 <__sflush_r+0x78>
 800abba:	1c42      	adds	r2, r0, #1
 800abbc:	d101      	bne.n	800abc2 <__sflush_r+0x76>
 800abbe:	682b      	ldr	r3, [r5, #0]
 800abc0:	b903      	cbnz	r3, 800abc4 <__sflush_r+0x78>
 800abc2:	6560      	str	r0, [r4, #84]	@ 0x54
 800abc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abc6:	602f      	str	r7, [r5, #0]
 800abc8:	b1b9      	cbz	r1, 800abfa <__sflush_r+0xae>
 800abca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abce:	4299      	cmp	r1, r3
 800abd0:	d002      	beq.n	800abd8 <__sflush_r+0x8c>
 800abd2:	4628      	mov	r0, r5
 800abd4:	f7ff fe2e 	bl	800a834 <_free_r>
 800abd8:	2300      	movs	r3, #0
 800abda:	6363      	str	r3, [r4, #52]	@ 0x34
 800abdc:	e00d      	b.n	800abfa <__sflush_r+0xae>
 800abde:	2301      	movs	r3, #1
 800abe0:	4628      	mov	r0, r5
 800abe2:	47b0      	blx	r6
 800abe4:	4602      	mov	r2, r0
 800abe6:	1c50      	adds	r0, r2, #1
 800abe8:	d1c9      	bne.n	800ab7e <__sflush_r+0x32>
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0c6      	beq.n	800ab7e <__sflush_r+0x32>
 800abf0:	2b1d      	cmp	r3, #29
 800abf2:	d001      	beq.n	800abf8 <__sflush_r+0xac>
 800abf4:	2b16      	cmp	r3, #22
 800abf6:	d11e      	bne.n	800ac36 <__sflush_r+0xea>
 800abf8:	602f      	str	r7, [r5, #0]
 800abfa:	2000      	movs	r0, #0
 800abfc:	e022      	b.n	800ac44 <__sflush_r+0xf8>
 800abfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac02:	b21b      	sxth	r3, r3
 800ac04:	e01b      	b.n	800ac3e <__sflush_r+0xf2>
 800ac06:	690f      	ldr	r7, [r1, #16]
 800ac08:	2f00      	cmp	r7, #0
 800ac0a:	d0f6      	beq.n	800abfa <__sflush_r+0xae>
 800ac0c:	0793      	lsls	r3, r2, #30
 800ac0e:	680e      	ldr	r6, [r1, #0]
 800ac10:	bf08      	it	eq
 800ac12:	694b      	ldreq	r3, [r1, #20]
 800ac14:	600f      	str	r7, [r1, #0]
 800ac16:	bf18      	it	ne
 800ac18:	2300      	movne	r3, #0
 800ac1a:	eba6 0807 	sub.w	r8, r6, r7
 800ac1e:	608b      	str	r3, [r1, #8]
 800ac20:	f1b8 0f00 	cmp.w	r8, #0
 800ac24:	dde9      	ble.n	800abfa <__sflush_r+0xae>
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac2a:	4643      	mov	r3, r8
 800ac2c:	463a      	mov	r2, r7
 800ac2e:	4628      	mov	r0, r5
 800ac30:	47b0      	blx	r6
 800ac32:	2800      	cmp	r0, #0
 800ac34:	dc08      	bgt.n	800ac48 <__sflush_r+0xfc>
 800ac36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac48:	4407      	add	r7, r0
 800ac4a:	eba8 0800 	sub.w	r8, r8, r0
 800ac4e:	e7e7      	b.n	800ac20 <__sflush_r+0xd4>
 800ac50:	dfbffffe 	.word	0xdfbffffe

0800ac54 <_fflush_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	690b      	ldr	r3, [r1, #16]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b913      	cbnz	r3, 800ac64 <_fflush_r+0x10>
 800ac5e:	2500      	movs	r5, #0
 800ac60:	4628      	mov	r0, r5
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	b118      	cbz	r0, 800ac6e <_fflush_r+0x1a>
 800ac66:	6a03      	ldr	r3, [r0, #32]
 800ac68:	b90b      	cbnz	r3, 800ac6e <_fflush_r+0x1a>
 800ac6a:	f7fe ff07 	bl	8009a7c <__sinit>
 800ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f3      	beq.n	800ac5e <_fflush_r+0xa>
 800ac76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac78:	07d0      	lsls	r0, r2, #31
 800ac7a:	d404      	bmi.n	800ac86 <_fflush_r+0x32>
 800ac7c:	0599      	lsls	r1, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_fflush_r+0x32>
 800ac80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac82:	f7fe ffe8 	bl	8009c56 <__retarget_lock_acquire_recursive>
 800ac86:	4628      	mov	r0, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f7ff ff5f 	bl	800ab4c <__sflush_r>
 800ac8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac90:	07da      	lsls	r2, r3, #31
 800ac92:	4605      	mov	r5, r0
 800ac94:	d4e4      	bmi.n	800ac60 <_fflush_r+0xc>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	d4e1      	bmi.n	800ac60 <_fflush_r+0xc>
 800ac9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac9e:	f7fe ffdb 	bl	8009c58 <__retarget_lock_release_recursive>
 800aca2:	e7dd      	b.n	800ac60 <_fflush_r+0xc>

0800aca4 <_Balloc>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	69c6      	ldr	r6, [r0, #28]
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	b976      	cbnz	r6, 800accc <_Balloc+0x28>
 800acae:	2010      	movs	r0, #16
 800acb0:	f7fe fc14 	bl	80094dc <malloc>
 800acb4:	4602      	mov	r2, r0
 800acb6:	61e0      	str	r0, [r4, #28]
 800acb8:	b920      	cbnz	r0, 800acc4 <_Balloc+0x20>
 800acba:	4b18      	ldr	r3, [pc, #96]	@ (800ad1c <_Balloc+0x78>)
 800acbc:	4818      	ldr	r0, [pc, #96]	@ (800ad20 <_Balloc+0x7c>)
 800acbe:	216b      	movs	r1, #107	@ 0x6b
 800acc0:	f000 fd14 	bl	800b6ec <__assert_func>
 800acc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acc8:	6006      	str	r6, [r0, #0]
 800acca:	60c6      	str	r6, [r0, #12]
 800accc:	69e6      	ldr	r6, [r4, #28]
 800acce:	68f3      	ldr	r3, [r6, #12]
 800acd0:	b183      	cbz	r3, 800acf4 <_Balloc+0x50>
 800acd2:	69e3      	ldr	r3, [r4, #28]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acda:	b9b8      	cbnz	r0, 800ad0c <_Balloc+0x68>
 800acdc:	2101      	movs	r1, #1
 800acde:	fa01 f605 	lsl.w	r6, r1, r5
 800ace2:	1d72      	adds	r2, r6, #5
 800ace4:	0092      	lsls	r2, r2, #2
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fd1e 	bl	800b728 <_calloc_r>
 800acec:	b160      	cbz	r0, 800ad08 <_Balloc+0x64>
 800acee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acf2:	e00e      	b.n	800ad12 <_Balloc+0x6e>
 800acf4:	2221      	movs	r2, #33	@ 0x21
 800acf6:	2104      	movs	r1, #4
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fd15 	bl	800b728 <_calloc_r>
 800acfe:	69e3      	ldr	r3, [r4, #28]
 800ad00:	60f0      	str	r0, [r6, #12]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e4      	bne.n	800acd2 <_Balloc+0x2e>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	6802      	ldr	r2, [r0, #0]
 800ad0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad12:	2300      	movs	r3, #0
 800ad14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad18:	e7f7      	b.n	800ad0a <_Balloc+0x66>
 800ad1a:	bf00      	nop
 800ad1c:	08056301 	.word	0x08056301
 800ad20:	08056392 	.word	0x08056392

0800ad24 <_Bfree>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	69c6      	ldr	r6, [r0, #28]
 800ad28:	4605      	mov	r5, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	b976      	cbnz	r6, 800ad4c <_Bfree+0x28>
 800ad2e:	2010      	movs	r0, #16
 800ad30:	f7fe fbd4 	bl	80094dc <malloc>
 800ad34:	4602      	mov	r2, r0
 800ad36:	61e8      	str	r0, [r5, #28]
 800ad38:	b920      	cbnz	r0, 800ad44 <_Bfree+0x20>
 800ad3a:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <_Bfree+0x3c>)
 800ad3c:	4809      	ldr	r0, [pc, #36]	@ (800ad64 <_Bfree+0x40>)
 800ad3e:	218f      	movs	r1, #143	@ 0x8f
 800ad40:	f000 fcd4 	bl	800b6ec <__assert_func>
 800ad44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad48:	6006      	str	r6, [r0, #0]
 800ad4a:	60c6      	str	r6, [r0, #12]
 800ad4c:	b13c      	cbz	r4, 800ad5e <_Bfree+0x3a>
 800ad4e:	69eb      	ldr	r3, [r5, #28]
 800ad50:	6862      	ldr	r2, [r4, #4]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad58:	6021      	str	r1, [r4, #0]
 800ad5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}
 800ad60:	08056301 	.word	0x08056301
 800ad64:	08056392 	.word	0x08056392

0800ad68 <__multadd>:
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	690d      	ldr	r5, [r1, #16]
 800ad6e:	4607      	mov	r7, r0
 800ad70:	460c      	mov	r4, r1
 800ad72:	461e      	mov	r6, r3
 800ad74:	f101 0c14 	add.w	ip, r1, #20
 800ad78:	2000      	movs	r0, #0
 800ad7a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad7e:	b299      	uxth	r1, r3
 800ad80:	fb02 6101 	mla	r1, r2, r1, r6
 800ad84:	0c1e      	lsrs	r6, r3, #16
 800ad86:	0c0b      	lsrs	r3, r1, #16
 800ad88:	fb02 3306 	mla	r3, r2, r6, r3
 800ad8c:	b289      	uxth	r1, r1
 800ad8e:	3001      	adds	r0, #1
 800ad90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad94:	4285      	cmp	r5, r0
 800ad96:	f84c 1b04 	str.w	r1, [ip], #4
 800ad9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad9e:	dcec      	bgt.n	800ad7a <__multadd+0x12>
 800ada0:	b30e      	cbz	r6, 800ade6 <__multadd+0x7e>
 800ada2:	68a3      	ldr	r3, [r4, #8]
 800ada4:	42ab      	cmp	r3, r5
 800ada6:	dc19      	bgt.n	800addc <__multadd+0x74>
 800ada8:	6861      	ldr	r1, [r4, #4]
 800adaa:	4638      	mov	r0, r7
 800adac:	3101      	adds	r1, #1
 800adae:	f7ff ff79 	bl	800aca4 <_Balloc>
 800adb2:	4680      	mov	r8, r0
 800adb4:	b928      	cbnz	r0, 800adc2 <__multadd+0x5a>
 800adb6:	4602      	mov	r2, r0
 800adb8:	4b0c      	ldr	r3, [pc, #48]	@ (800adec <__multadd+0x84>)
 800adba:	480d      	ldr	r0, [pc, #52]	@ (800adf0 <__multadd+0x88>)
 800adbc:	21ba      	movs	r1, #186	@ 0xba
 800adbe:	f000 fc95 	bl	800b6ec <__assert_func>
 800adc2:	6922      	ldr	r2, [r4, #16]
 800adc4:	3202      	adds	r2, #2
 800adc6:	f104 010c 	add.w	r1, r4, #12
 800adca:	0092      	lsls	r2, r2, #2
 800adcc:	300c      	adds	r0, #12
 800adce:	f7fe ff44 	bl	8009c5a <memcpy>
 800add2:	4621      	mov	r1, r4
 800add4:	4638      	mov	r0, r7
 800add6:	f7ff ffa5 	bl	800ad24 <_Bfree>
 800adda:	4644      	mov	r4, r8
 800addc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ade0:	3501      	adds	r5, #1
 800ade2:	615e      	str	r6, [r3, #20]
 800ade4:	6125      	str	r5, [r4, #16]
 800ade6:	4620      	mov	r0, r4
 800ade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adec:	08056370 	.word	0x08056370
 800adf0:	08056392 	.word	0x08056392

0800adf4 <__hi0bits>:
 800adf4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800adf8:	4603      	mov	r3, r0
 800adfa:	bf36      	itet	cc
 800adfc:	0403      	lslcc	r3, r0, #16
 800adfe:	2000      	movcs	r0, #0
 800ae00:	2010      	movcc	r0, #16
 800ae02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae06:	bf3c      	itt	cc
 800ae08:	021b      	lslcc	r3, r3, #8
 800ae0a:	3008      	addcc	r0, #8
 800ae0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae10:	bf3c      	itt	cc
 800ae12:	011b      	lslcc	r3, r3, #4
 800ae14:	3004      	addcc	r0, #4
 800ae16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae1a:	bf3c      	itt	cc
 800ae1c:	009b      	lslcc	r3, r3, #2
 800ae1e:	3002      	addcc	r0, #2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	db05      	blt.n	800ae30 <__hi0bits+0x3c>
 800ae24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae28:	f100 0001 	add.w	r0, r0, #1
 800ae2c:	bf08      	it	eq
 800ae2e:	2020      	moveq	r0, #32
 800ae30:	4770      	bx	lr

0800ae32 <__lo0bits>:
 800ae32:	6803      	ldr	r3, [r0, #0]
 800ae34:	4602      	mov	r2, r0
 800ae36:	f013 0007 	ands.w	r0, r3, #7
 800ae3a:	d00b      	beq.n	800ae54 <__lo0bits+0x22>
 800ae3c:	07d9      	lsls	r1, r3, #31
 800ae3e:	d421      	bmi.n	800ae84 <__lo0bits+0x52>
 800ae40:	0798      	lsls	r0, r3, #30
 800ae42:	bf49      	itett	mi
 800ae44:	085b      	lsrmi	r3, r3, #1
 800ae46:	089b      	lsrpl	r3, r3, #2
 800ae48:	2001      	movmi	r0, #1
 800ae4a:	6013      	strmi	r3, [r2, #0]
 800ae4c:	bf5c      	itt	pl
 800ae4e:	6013      	strpl	r3, [r2, #0]
 800ae50:	2002      	movpl	r0, #2
 800ae52:	4770      	bx	lr
 800ae54:	b299      	uxth	r1, r3
 800ae56:	b909      	cbnz	r1, 800ae5c <__lo0bits+0x2a>
 800ae58:	0c1b      	lsrs	r3, r3, #16
 800ae5a:	2010      	movs	r0, #16
 800ae5c:	b2d9      	uxtb	r1, r3
 800ae5e:	b909      	cbnz	r1, 800ae64 <__lo0bits+0x32>
 800ae60:	3008      	adds	r0, #8
 800ae62:	0a1b      	lsrs	r3, r3, #8
 800ae64:	0719      	lsls	r1, r3, #28
 800ae66:	bf04      	itt	eq
 800ae68:	091b      	lsreq	r3, r3, #4
 800ae6a:	3004      	addeq	r0, #4
 800ae6c:	0799      	lsls	r1, r3, #30
 800ae6e:	bf04      	itt	eq
 800ae70:	089b      	lsreq	r3, r3, #2
 800ae72:	3002      	addeq	r0, #2
 800ae74:	07d9      	lsls	r1, r3, #31
 800ae76:	d403      	bmi.n	800ae80 <__lo0bits+0x4e>
 800ae78:	085b      	lsrs	r3, r3, #1
 800ae7a:	f100 0001 	add.w	r0, r0, #1
 800ae7e:	d003      	beq.n	800ae88 <__lo0bits+0x56>
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	4770      	bx	lr
 800ae84:	2000      	movs	r0, #0
 800ae86:	4770      	bx	lr
 800ae88:	2020      	movs	r0, #32
 800ae8a:	4770      	bx	lr

0800ae8c <__i2b>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	460c      	mov	r4, r1
 800ae90:	2101      	movs	r1, #1
 800ae92:	f7ff ff07 	bl	800aca4 <_Balloc>
 800ae96:	4602      	mov	r2, r0
 800ae98:	b928      	cbnz	r0, 800aea6 <__i2b+0x1a>
 800ae9a:	4b05      	ldr	r3, [pc, #20]	@ (800aeb0 <__i2b+0x24>)
 800ae9c:	4805      	ldr	r0, [pc, #20]	@ (800aeb4 <__i2b+0x28>)
 800ae9e:	f240 1145 	movw	r1, #325	@ 0x145
 800aea2:	f000 fc23 	bl	800b6ec <__assert_func>
 800aea6:	2301      	movs	r3, #1
 800aea8:	6144      	str	r4, [r0, #20]
 800aeaa:	6103      	str	r3, [r0, #16]
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	bf00      	nop
 800aeb0:	08056370 	.word	0x08056370
 800aeb4:	08056392 	.word	0x08056392

0800aeb8 <__multiply>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	4614      	mov	r4, r2
 800aebe:	690a      	ldr	r2, [r1, #16]
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	bfa8      	it	ge
 800aec6:	4623      	movge	r3, r4
 800aec8:	460f      	mov	r7, r1
 800aeca:	bfa4      	itt	ge
 800aecc:	460c      	movge	r4, r1
 800aece:	461f      	movge	r7, r3
 800aed0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aed4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aed8:	68a3      	ldr	r3, [r4, #8]
 800aeda:	6861      	ldr	r1, [r4, #4]
 800aedc:	eb0a 0609 	add.w	r6, sl, r9
 800aee0:	42b3      	cmp	r3, r6
 800aee2:	b085      	sub	sp, #20
 800aee4:	bfb8      	it	lt
 800aee6:	3101      	addlt	r1, #1
 800aee8:	f7ff fedc 	bl	800aca4 <_Balloc>
 800aeec:	b930      	cbnz	r0, 800aefc <__multiply+0x44>
 800aeee:	4602      	mov	r2, r0
 800aef0:	4b44      	ldr	r3, [pc, #272]	@ (800b004 <__multiply+0x14c>)
 800aef2:	4845      	ldr	r0, [pc, #276]	@ (800b008 <__multiply+0x150>)
 800aef4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aef8:	f000 fbf8 	bl	800b6ec <__assert_func>
 800aefc:	f100 0514 	add.w	r5, r0, #20
 800af00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af04:	462b      	mov	r3, r5
 800af06:	2200      	movs	r2, #0
 800af08:	4543      	cmp	r3, r8
 800af0a:	d321      	bcc.n	800af50 <__multiply+0x98>
 800af0c:	f107 0114 	add.w	r1, r7, #20
 800af10:	f104 0214 	add.w	r2, r4, #20
 800af14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af1c:	9302      	str	r3, [sp, #8]
 800af1e:	1b13      	subs	r3, r2, r4
 800af20:	3b15      	subs	r3, #21
 800af22:	f023 0303 	bic.w	r3, r3, #3
 800af26:	3304      	adds	r3, #4
 800af28:	f104 0715 	add.w	r7, r4, #21
 800af2c:	42ba      	cmp	r2, r7
 800af2e:	bf38      	it	cc
 800af30:	2304      	movcc	r3, #4
 800af32:	9301      	str	r3, [sp, #4]
 800af34:	9b02      	ldr	r3, [sp, #8]
 800af36:	9103      	str	r1, [sp, #12]
 800af38:	428b      	cmp	r3, r1
 800af3a:	d80c      	bhi.n	800af56 <__multiply+0x9e>
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	dd03      	ble.n	800af48 <__multiply+0x90>
 800af40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af44:	2b00      	cmp	r3, #0
 800af46:	d05b      	beq.n	800b000 <__multiply+0x148>
 800af48:	6106      	str	r6, [r0, #16]
 800af4a:	b005      	add	sp, #20
 800af4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af50:	f843 2b04 	str.w	r2, [r3], #4
 800af54:	e7d8      	b.n	800af08 <__multiply+0x50>
 800af56:	f8b1 a000 	ldrh.w	sl, [r1]
 800af5a:	f1ba 0f00 	cmp.w	sl, #0
 800af5e:	d024      	beq.n	800afaa <__multiply+0xf2>
 800af60:	f104 0e14 	add.w	lr, r4, #20
 800af64:	46a9      	mov	r9, r5
 800af66:	f04f 0c00 	mov.w	ip, #0
 800af6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af6e:	f8d9 3000 	ldr.w	r3, [r9]
 800af72:	fa1f fb87 	uxth.w	fp, r7
 800af76:	b29b      	uxth	r3, r3
 800af78:	fb0a 330b 	mla	r3, sl, fp, r3
 800af7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800af80:	f8d9 7000 	ldr.w	r7, [r9]
 800af84:	4463      	add	r3, ip
 800af86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af8a:	fb0a c70b 	mla	r7, sl, fp, ip
 800af8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800af92:	b29b      	uxth	r3, r3
 800af94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af98:	4572      	cmp	r2, lr
 800af9a:	f849 3b04 	str.w	r3, [r9], #4
 800af9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afa2:	d8e2      	bhi.n	800af6a <__multiply+0xb2>
 800afa4:	9b01      	ldr	r3, [sp, #4]
 800afa6:	f845 c003 	str.w	ip, [r5, r3]
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800afb0:	3104      	adds	r1, #4
 800afb2:	f1b9 0f00 	cmp.w	r9, #0
 800afb6:	d021      	beq.n	800affc <__multiply+0x144>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	f104 0c14 	add.w	ip, r4, #20
 800afbe:	46ae      	mov	lr, r5
 800afc0:	f04f 0a00 	mov.w	sl, #0
 800afc4:	f8bc b000 	ldrh.w	fp, [ip]
 800afc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800afcc:	fb09 770b 	mla	r7, r9, fp, r7
 800afd0:	4457      	add	r7, sl
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afd8:	f84e 3b04 	str.w	r3, [lr], #4
 800afdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afe0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afe4:	f8be 3000 	ldrh.w	r3, [lr]
 800afe8:	fb09 330a 	mla	r3, r9, sl, r3
 800afec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aff0:	4562      	cmp	r2, ip
 800aff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aff6:	d8e5      	bhi.n	800afc4 <__multiply+0x10c>
 800aff8:	9f01      	ldr	r7, [sp, #4]
 800affa:	51eb      	str	r3, [r5, r7]
 800affc:	3504      	adds	r5, #4
 800affe:	e799      	b.n	800af34 <__multiply+0x7c>
 800b000:	3e01      	subs	r6, #1
 800b002:	e79b      	b.n	800af3c <__multiply+0x84>
 800b004:	08056370 	.word	0x08056370
 800b008:	08056392 	.word	0x08056392

0800b00c <__pow5mult>:
 800b00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b010:	4615      	mov	r5, r2
 800b012:	f012 0203 	ands.w	r2, r2, #3
 800b016:	4607      	mov	r7, r0
 800b018:	460e      	mov	r6, r1
 800b01a:	d007      	beq.n	800b02c <__pow5mult+0x20>
 800b01c:	4c25      	ldr	r4, [pc, #148]	@ (800b0b4 <__pow5mult+0xa8>)
 800b01e:	3a01      	subs	r2, #1
 800b020:	2300      	movs	r3, #0
 800b022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b026:	f7ff fe9f 	bl	800ad68 <__multadd>
 800b02a:	4606      	mov	r6, r0
 800b02c:	10ad      	asrs	r5, r5, #2
 800b02e:	d03d      	beq.n	800b0ac <__pow5mult+0xa0>
 800b030:	69fc      	ldr	r4, [r7, #28]
 800b032:	b97c      	cbnz	r4, 800b054 <__pow5mult+0x48>
 800b034:	2010      	movs	r0, #16
 800b036:	f7fe fa51 	bl	80094dc <malloc>
 800b03a:	4602      	mov	r2, r0
 800b03c:	61f8      	str	r0, [r7, #28]
 800b03e:	b928      	cbnz	r0, 800b04c <__pow5mult+0x40>
 800b040:	4b1d      	ldr	r3, [pc, #116]	@ (800b0b8 <__pow5mult+0xac>)
 800b042:	481e      	ldr	r0, [pc, #120]	@ (800b0bc <__pow5mult+0xb0>)
 800b044:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b048:	f000 fb50 	bl	800b6ec <__assert_func>
 800b04c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b050:	6004      	str	r4, [r0, #0]
 800b052:	60c4      	str	r4, [r0, #12]
 800b054:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b05c:	b94c      	cbnz	r4, 800b072 <__pow5mult+0x66>
 800b05e:	f240 2171 	movw	r1, #625	@ 0x271
 800b062:	4638      	mov	r0, r7
 800b064:	f7ff ff12 	bl	800ae8c <__i2b>
 800b068:	2300      	movs	r3, #0
 800b06a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b06e:	4604      	mov	r4, r0
 800b070:	6003      	str	r3, [r0, #0]
 800b072:	f04f 0900 	mov.w	r9, #0
 800b076:	07eb      	lsls	r3, r5, #31
 800b078:	d50a      	bpl.n	800b090 <__pow5mult+0x84>
 800b07a:	4631      	mov	r1, r6
 800b07c:	4622      	mov	r2, r4
 800b07e:	4638      	mov	r0, r7
 800b080:	f7ff ff1a 	bl	800aeb8 <__multiply>
 800b084:	4631      	mov	r1, r6
 800b086:	4680      	mov	r8, r0
 800b088:	4638      	mov	r0, r7
 800b08a:	f7ff fe4b 	bl	800ad24 <_Bfree>
 800b08e:	4646      	mov	r6, r8
 800b090:	106d      	asrs	r5, r5, #1
 800b092:	d00b      	beq.n	800b0ac <__pow5mult+0xa0>
 800b094:	6820      	ldr	r0, [r4, #0]
 800b096:	b938      	cbnz	r0, 800b0a8 <__pow5mult+0x9c>
 800b098:	4622      	mov	r2, r4
 800b09a:	4621      	mov	r1, r4
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7ff ff0b 	bl	800aeb8 <__multiply>
 800b0a2:	6020      	str	r0, [r4, #0]
 800b0a4:	f8c0 9000 	str.w	r9, [r0]
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	e7e4      	b.n	800b076 <__pow5mult+0x6a>
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b2:	bf00      	nop
 800b0b4:	080563ec 	.word	0x080563ec
 800b0b8:	08056301 	.word	0x08056301
 800b0bc:	08056392 	.word	0x08056392

0800b0c0 <__lshift>:
 800b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	6849      	ldr	r1, [r1, #4]
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0ce:	68a3      	ldr	r3, [r4, #8]
 800b0d0:	4607      	mov	r7, r0
 800b0d2:	4691      	mov	r9, r2
 800b0d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0d8:	f108 0601 	add.w	r6, r8, #1
 800b0dc:	42b3      	cmp	r3, r6
 800b0de:	db0b      	blt.n	800b0f8 <__lshift+0x38>
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7ff fddf 	bl	800aca4 <_Balloc>
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	b948      	cbnz	r0, 800b0fe <__lshift+0x3e>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	4b28      	ldr	r3, [pc, #160]	@ (800b190 <__lshift+0xd0>)
 800b0ee:	4829      	ldr	r0, [pc, #164]	@ (800b194 <__lshift+0xd4>)
 800b0f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b0f4:	f000 fafa 	bl	800b6ec <__assert_func>
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	e7ee      	b.n	800b0dc <__lshift+0x1c>
 800b0fe:	2300      	movs	r3, #0
 800b100:	f100 0114 	add.w	r1, r0, #20
 800b104:	f100 0210 	add.w	r2, r0, #16
 800b108:	4618      	mov	r0, r3
 800b10a:	4553      	cmp	r3, sl
 800b10c:	db33      	blt.n	800b176 <__lshift+0xb6>
 800b10e:	6920      	ldr	r0, [r4, #16]
 800b110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b114:	f104 0314 	add.w	r3, r4, #20
 800b118:	f019 091f 	ands.w	r9, r9, #31
 800b11c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b120:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b124:	d02b      	beq.n	800b17e <__lshift+0xbe>
 800b126:	f1c9 0e20 	rsb	lr, r9, #32
 800b12a:	468a      	mov	sl, r1
 800b12c:	2200      	movs	r2, #0
 800b12e:	6818      	ldr	r0, [r3, #0]
 800b130:	fa00 f009 	lsl.w	r0, r0, r9
 800b134:	4310      	orrs	r0, r2
 800b136:	f84a 0b04 	str.w	r0, [sl], #4
 800b13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b13e:	459c      	cmp	ip, r3
 800b140:	fa22 f20e 	lsr.w	r2, r2, lr
 800b144:	d8f3      	bhi.n	800b12e <__lshift+0x6e>
 800b146:	ebac 0304 	sub.w	r3, ip, r4
 800b14a:	3b15      	subs	r3, #21
 800b14c:	f023 0303 	bic.w	r3, r3, #3
 800b150:	3304      	adds	r3, #4
 800b152:	f104 0015 	add.w	r0, r4, #21
 800b156:	4584      	cmp	ip, r0
 800b158:	bf38      	it	cc
 800b15a:	2304      	movcc	r3, #4
 800b15c:	50ca      	str	r2, [r1, r3]
 800b15e:	b10a      	cbz	r2, 800b164 <__lshift+0xa4>
 800b160:	f108 0602 	add.w	r6, r8, #2
 800b164:	3e01      	subs	r6, #1
 800b166:	4638      	mov	r0, r7
 800b168:	612e      	str	r6, [r5, #16]
 800b16a:	4621      	mov	r1, r4
 800b16c:	f7ff fdda 	bl	800ad24 <_Bfree>
 800b170:	4628      	mov	r0, r5
 800b172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b176:	f842 0f04 	str.w	r0, [r2, #4]!
 800b17a:	3301      	adds	r3, #1
 800b17c:	e7c5      	b.n	800b10a <__lshift+0x4a>
 800b17e:	3904      	subs	r1, #4
 800b180:	f853 2b04 	ldr.w	r2, [r3], #4
 800b184:	f841 2f04 	str.w	r2, [r1, #4]!
 800b188:	459c      	cmp	ip, r3
 800b18a:	d8f9      	bhi.n	800b180 <__lshift+0xc0>
 800b18c:	e7ea      	b.n	800b164 <__lshift+0xa4>
 800b18e:	bf00      	nop
 800b190:	08056370 	.word	0x08056370
 800b194:	08056392 	.word	0x08056392

0800b198 <__mcmp>:
 800b198:	690a      	ldr	r2, [r1, #16]
 800b19a:	4603      	mov	r3, r0
 800b19c:	6900      	ldr	r0, [r0, #16]
 800b19e:	1a80      	subs	r0, r0, r2
 800b1a0:	b530      	push	{r4, r5, lr}
 800b1a2:	d10e      	bne.n	800b1c2 <__mcmp+0x2a>
 800b1a4:	3314      	adds	r3, #20
 800b1a6:	3114      	adds	r1, #20
 800b1a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1b8:	4295      	cmp	r5, r2
 800b1ba:	d003      	beq.n	800b1c4 <__mcmp+0x2c>
 800b1bc:	d205      	bcs.n	800b1ca <__mcmp+0x32>
 800b1be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1c2:	bd30      	pop	{r4, r5, pc}
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d3f3      	bcc.n	800b1b0 <__mcmp+0x18>
 800b1c8:	e7fb      	b.n	800b1c2 <__mcmp+0x2a>
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	e7f9      	b.n	800b1c2 <__mcmp+0x2a>
	...

0800b1d0 <__mdiff>:
 800b1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	4689      	mov	r9, r1
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4648      	mov	r0, r9
 800b1dc:	4614      	mov	r4, r2
 800b1de:	f7ff ffdb 	bl	800b198 <__mcmp>
 800b1e2:	1e05      	subs	r5, r0, #0
 800b1e4:	d112      	bne.n	800b20c <__mdiff+0x3c>
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7ff fd5b 	bl	800aca4 <_Balloc>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	b928      	cbnz	r0, 800b1fe <__mdiff+0x2e>
 800b1f2:	4b3f      	ldr	r3, [pc, #252]	@ (800b2f0 <__mdiff+0x120>)
 800b1f4:	f240 2137 	movw	r1, #567	@ 0x237
 800b1f8:	483e      	ldr	r0, [pc, #248]	@ (800b2f4 <__mdiff+0x124>)
 800b1fa:	f000 fa77 	bl	800b6ec <__assert_func>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b204:	4610      	mov	r0, r2
 800b206:	b003      	add	sp, #12
 800b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20c:	bfbc      	itt	lt
 800b20e:	464b      	movlt	r3, r9
 800b210:	46a1      	movlt	r9, r4
 800b212:	4630      	mov	r0, r6
 800b214:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b218:	bfba      	itte	lt
 800b21a:	461c      	movlt	r4, r3
 800b21c:	2501      	movlt	r5, #1
 800b21e:	2500      	movge	r5, #0
 800b220:	f7ff fd40 	bl	800aca4 <_Balloc>
 800b224:	4602      	mov	r2, r0
 800b226:	b918      	cbnz	r0, 800b230 <__mdiff+0x60>
 800b228:	4b31      	ldr	r3, [pc, #196]	@ (800b2f0 <__mdiff+0x120>)
 800b22a:	f240 2145 	movw	r1, #581	@ 0x245
 800b22e:	e7e3      	b.n	800b1f8 <__mdiff+0x28>
 800b230:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b234:	6926      	ldr	r6, [r4, #16]
 800b236:	60c5      	str	r5, [r0, #12]
 800b238:	f109 0310 	add.w	r3, r9, #16
 800b23c:	f109 0514 	add.w	r5, r9, #20
 800b240:	f104 0e14 	add.w	lr, r4, #20
 800b244:	f100 0b14 	add.w	fp, r0, #20
 800b248:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b24c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	46d9      	mov	r9, fp
 800b254:	f04f 0c00 	mov.w	ip, #0
 800b258:	9b01      	ldr	r3, [sp, #4]
 800b25a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b25e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	fa1f f38a 	uxth.w	r3, sl
 800b268:	4619      	mov	r1, r3
 800b26a:	b283      	uxth	r3, r0
 800b26c:	1acb      	subs	r3, r1, r3
 800b26e:	0c00      	lsrs	r0, r0, #16
 800b270:	4463      	add	r3, ip
 800b272:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b276:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b280:	4576      	cmp	r6, lr
 800b282:	f849 3b04 	str.w	r3, [r9], #4
 800b286:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b28a:	d8e5      	bhi.n	800b258 <__mdiff+0x88>
 800b28c:	1b33      	subs	r3, r6, r4
 800b28e:	3b15      	subs	r3, #21
 800b290:	f023 0303 	bic.w	r3, r3, #3
 800b294:	3415      	adds	r4, #21
 800b296:	3304      	adds	r3, #4
 800b298:	42a6      	cmp	r6, r4
 800b29a:	bf38      	it	cc
 800b29c:	2304      	movcc	r3, #4
 800b29e:	441d      	add	r5, r3
 800b2a0:	445b      	add	r3, fp
 800b2a2:	461e      	mov	r6, r3
 800b2a4:	462c      	mov	r4, r5
 800b2a6:	4544      	cmp	r4, r8
 800b2a8:	d30e      	bcc.n	800b2c8 <__mdiff+0xf8>
 800b2aa:	f108 0103 	add.w	r1, r8, #3
 800b2ae:	1b49      	subs	r1, r1, r5
 800b2b0:	f021 0103 	bic.w	r1, r1, #3
 800b2b4:	3d03      	subs	r5, #3
 800b2b6:	45a8      	cmp	r8, r5
 800b2b8:	bf38      	it	cc
 800b2ba:	2100      	movcc	r1, #0
 800b2bc:	440b      	add	r3, r1
 800b2be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2c2:	b191      	cbz	r1, 800b2ea <__mdiff+0x11a>
 800b2c4:	6117      	str	r7, [r2, #16]
 800b2c6:	e79d      	b.n	800b204 <__mdiff+0x34>
 800b2c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2cc:	46e6      	mov	lr, ip
 800b2ce:	0c08      	lsrs	r0, r1, #16
 800b2d0:	fa1c fc81 	uxtah	ip, ip, r1
 800b2d4:	4471      	add	r1, lr
 800b2d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b2da:	b289      	uxth	r1, r1
 800b2dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b2e0:	f846 1b04 	str.w	r1, [r6], #4
 800b2e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2e8:	e7dd      	b.n	800b2a6 <__mdiff+0xd6>
 800b2ea:	3f01      	subs	r7, #1
 800b2ec:	e7e7      	b.n	800b2be <__mdiff+0xee>
 800b2ee:	bf00      	nop
 800b2f0:	08056370 	.word	0x08056370
 800b2f4:	08056392 	.word	0x08056392

0800b2f8 <__d2b>:
 800b2f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2fc:	460f      	mov	r7, r1
 800b2fe:	2101      	movs	r1, #1
 800b300:	ec59 8b10 	vmov	r8, r9, d0
 800b304:	4616      	mov	r6, r2
 800b306:	f7ff fccd 	bl	800aca4 <_Balloc>
 800b30a:	4604      	mov	r4, r0
 800b30c:	b930      	cbnz	r0, 800b31c <__d2b+0x24>
 800b30e:	4602      	mov	r2, r0
 800b310:	4b23      	ldr	r3, [pc, #140]	@ (800b3a0 <__d2b+0xa8>)
 800b312:	4824      	ldr	r0, [pc, #144]	@ (800b3a4 <__d2b+0xac>)
 800b314:	f240 310f 	movw	r1, #783	@ 0x30f
 800b318:	f000 f9e8 	bl	800b6ec <__assert_func>
 800b31c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b324:	b10d      	cbz	r5, 800b32a <__d2b+0x32>
 800b326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	f1b8 0300 	subs.w	r3, r8, #0
 800b330:	d023      	beq.n	800b37a <__d2b+0x82>
 800b332:	4668      	mov	r0, sp
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	f7ff fd7c 	bl	800ae32 <__lo0bits>
 800b33a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b33e:	b1d0      	cbz	r0, 800b376 <__d2b+0x7e>
 800b340:	f1c0 0320 	rsb	r3, r0, #32
 800b344:	fa02 f303 	lsl.w	r3, r2, r3
 800b348:	430b      	orrs	r3, r1
 800b34a:	40c2      	lsrs	r2, r0
 800b34c:	6163      	str	r3, [r4, #20]
 800b34e:	9201      	str	r2, [sp, #4]
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	61a3      	str	r3, [r4, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	bf0c      	ite	eq
 800b358:	2201      	moveq	r2, #1
 800b35a:	2202      	movne	r2, #2
 800b35c:	6122      	str	r2, [r4, #16]
 800b35e:	b1a5      	cbz	r5, 800b38a <__d2b+0x92>
 800b360:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b364:	4405      	add	r5, r0
 800b366:	603d      	str	r5, [r7, #0]
 800b368:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b36c:	6030      	str	r0, [r6, #0]
 800b36e:	4620      	mov	r0, r4
 800b370:	b003      	add	sp, #12
 800b372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b376:	6161      	str	r1, [r4, #20]
 800b378:	e7ea      	b.n	800b350 <__d2b+0x58>
 800b37a:	a801      	add	r0, sp, #4
 800b37c:	f7ff fd59 	bl	800ae32 <__lo0bits>
 800b380:	9b01      	ldr	r3, [sp, #4]
 800b382:	6163      	str	r3, [r4, #20]
 800b384:	3020      	adds	r0, #32
 800b386:	2201      	movs	r2, #1
 800b388:	e7e8      	b.n	800b35c <__d2b+0x64>
 800b38a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b38e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b392:	6038      	str	r0, [r7, #0]
 800b394:	6918      	ldr	r0, [r3, #16]
 800b396:	f7ff fd2d 	bl	800adf4 <__hi0bits>
 800b39a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b39e:	e7e5      	b.n	800b36c <__d2b+0x74>
 800b3a0:	08056370 	.word	0x08056370
 800b3a4:	08056392 	.word	0x08056392

0800b3a8 <__sread>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	f000 f978 	bl	800b6a4 <_read_r>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	bfab      	itete	ge
 800b3b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800b3bc:	181b      	addge	r3, r3, r0
 800b3be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3c2:	bfac      	ite	ge
 800b3c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3c6:	81a3      	strhlt	r3, [r4, #12]
 800b3c8:	bd10      	pop	{r4, pc}

0800b3ca <__swrite>:
 800b3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	461f      	mov	r7, r3
 800b3d0:	898b      	ldrh	r3, [r1, #12]
 800b3d2:	05db      	lsls	r3, r3, #23
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	4616      	mov	r6, r2
 800b3da:	d505      	bpl.n	800b3e8 <__swrite+0x1e>
 800b3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f000 f94c 	bl	800b680 <_lseek_r>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	4632      	mov	r2, r6
 800b3f6:	463b      	mov	r3, r7
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fe:	f000 b963 	b.w	800b6c8 <_write_r>

0800b402 <__sseek>:
 800b402:	b510      	push	{r4, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40a:	f000 f939 	bl	800b680 <_lseek_r>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	bf15      	itete	ne
 800b414:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b41a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b41e:	81a3      	strheq	r3, [r4, #12]
 800b420:	bf18      	it	ne
 800b422:	81a3      	strhne	r3, [r4, #12]
 800b424:	bd10      	pop	{r4, pc}

0800b426 <__sclose>:
 800b426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b42a:	f000 b8f7 	b.w	800b61c <_close_r>

0800b42e <__swbuf_r>:
 800b42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b430:	460e      	mov	r6, r1
 800b432:	4614      	mov	r4, r2
 800b434:	4605      	mov	r5, r0
 800b436:	b118      	cbz	r0, 800b440 <__swbuf_r+0x12>
 800b438:	6a03      	ldr	r3, [r0, #32]
 800b43a:	b90b      	cbnz	r3, 800b440 <__swbuf_r+0x12>
 800b43c:	f7fe fb1e 	bl	8009a7c <__sinit>
 800b440:	69a3      	ldr	r3, [r4, #24]
 800b442:	60a3      	str	r3, [r4, #8]
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	071a      	lsls	r2, r3, #28
 800b448:	d501      	bpl.n	800b44e <__swbuf_r+0x20>
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	b943      	cbnz	r3, 800b460 <__swbuf_r+0x32>
 800b44e:	4621      	mov	r1, r4
 800b450:	4628      	mov	r0, r5
 800b452:	f000 f82b 	bl	800b4ac <__swsetup_r>
 800b456:	b118      	cbz	r0, 800b460 <__swbuf_r+0x32>
 800b458:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b45c:	4638      	mov	r0, r7
 800b45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	6922      	ldr	r2, [r4, #16]
 800b464:	1a98      	subs	r0, r3, r2
 800b466:	6963      	ldr	r3, [r4, #20]
 800b468:	b2f6      	uxtb	r6, r6
 800b46a:	4283      	cmp	r3, r0
 800b46c:	4637      	mov	r7, r6
 800b46e:	dc05      	bgt.n	800b47c <__swbuf_r+0x4e>
 800b470:	4621      	mov	r1, r4
 800b472:	4628      	mov	r0, r5
 800b474:	f7ff fbee 	bl	800ac54 <_fflush_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d1ed      	bne.n	800b458 <__swbuf_r+0x2a>
 800b47c:	68a3      	ldr	r3, [r4, #8]
 800b47e:	3b01      	subs	r3, #1
 800b480:	60a3      	str	r3, [r4, #8]
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	6022      	str	r2, [r4, #0]
 800b488:	701e      	strb	r6, [r3, #0]
 800b48a:	6962      	ldr	r2, [r4, #20]
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	429a      	cmp	r2, r3
 800b490:	d004      	beq.n	800b49c <__swbuf_r+0x6e>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	07db      	lsls	r3, r3, #31
 800b496:	d5e1      	bpl.n	800b45c <__swbuf_r+0x2e>
 800b498:	2e0a      	cmp	r6, #10
 800b49a:	d1df      	bne.n	800b45c <__swbuf_r+0x2e>
 800b49c:	4621      	mov	r1, r4
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f7ff fbd8 	bl	800ac54 <_fflush_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0d9      	beq.n	800b45c <__swbuf_r+0x2e>
 800b4a8:	e7d6      	b.n	800b458 <__swbuf_r+0x2a>
	...

0800b4ac <__swsetup_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4b29      	ldr	r3, [pc, #164]	@ (800b554 <__swsetup_r+0xa8>)
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	b118      	cbz	r0, 800b4c0 <__swsetup_r+0x14>
 800b4b8:	6a03      	ldr	r3, [r0, #32]
 800b4ba:	b90b      	cbnz	r3, 800b4c0 <__swsetup_r+0x14>
 800b4bc:	f7fe fade 	bl	8009a7c <__sinit>
 800b4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c4:	0719      	lsls	r1, r3, #28
 800b4c6:	d422      	bmi.n	800b50e <__swsetup_r+0x62>
 800b4c8:	06da      	lsls	r2, r3, #27
 800b4ca:	d407      	bmi.n	800b4dc <__swsetup_r+0x30>
 800b4cc:	2209      	movs	r2, #9
 800b4ce:	602a      	str	r2, [r5, #0]
 800b4d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4d4:	81a3      	strh	r3, [r4, #12]
 800b4d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4da:	e033      	b.n	800b544 <__swsetup_r+0x98>
 800b4dc:	0758      	lsls	r0, r3, #29
 800b4de:	d512      	bpl.n	800b506 <__swsetup_r+0x5a>
 800b4e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4e2:	b141      	cbz	r1, 800b4f6 <__swsetup_r+0x4a>
 800b4e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	d002      	beq.n	800b4f2 <__swsetup_r+0x46>
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	f7ff f9a1 	bl	800a834 <_free_r>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	2300      	movs	r3, #0
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	6923      	ldr	r3, [r4, #16]
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	f043 0308 	orr.w	r3, r3, #8
 800b50c:	81a3      	strh	r3, [r4, #12]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	b94b      	cbnz	r3, 800b526 <__swsetup_r+0x7a>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b51c:	d003      	beq.n	800b526 <__swsetup_r+0x7a>
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f000 f83f 	bl	800b5a4 <__smakebuf_r>
 800b526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52a:	f013 0201 	ands.w	r2, r3, #1
 800b52e:	d00a      	beq.n	800b546 <__swsetup_r+0x9a>
 800b530:	2200      	movs	r2, #0
 800b532:	60a2      	str	r2, [r4, #8]
 800b534:	6962      	ldr	r2, [r4, #20]
 800b536:	4252      	negs	r2, r2
 800b538:	61a2      	str	r2, [r4, #24]
 800b53a:	6922      	ldr	r2, [r4, #16]
 800b53c:	b942      	cbnz	r2, 800b550 <__swsetup_r+0xa4>
 800b53e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b542:	d1c5      	bne.n	800b4d0 <__swsetup_r+0x24>
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	0799      	lsls	r1, r3, #30
 800b548:	bf58      	it	pl
 800b54a:	6962      	ldrpl	r2, [r4, #20]
 800b54c:	60a2      	str	r2, [r4, #8]
 800b54e:	e7f4      	b.n	800b53a <__swsetup_r+0x8e>
 800b550:	2000      	movs	r0, #0
 800b552:	e7f7      	b.n	800b544 <__swsetup_r+0x98>
 800b554:	200071fc 	.word	0x200071fc

0800b558 <__swhatbuf_r>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	460c      	mov	r4, r1
 800b55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b560:	2900      	cmp	r1, #0
 800b562:	b096      	sub	sp, #88	@ 0x58
 800b564:	4615      	mov	r5, r2
 800b566:	461e      	mov	r6, r3
 800b568:	da0d      	bge.n	800b586 <__swhatbuf_r+0x2e>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b570:	f04f 0100 	mov.w	r1, #0
 800b574:	bf14      	ite	ne
 800b576:	2340      	movne	r3, #64	@ 0x40
 800b578:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b57c:	2000      	movs	r0, #0
 800b57e:	6031      	str	r1, [r6, #0]
 800b580:	602b      	str	r3, [r5, #0]
 800b582:	b016      	add	sp, #88	@ 0x58
 800b584:	bd70      	pop	{r4, r5, r6, pc}
 800b586:	466a      	mov	r2, sp
 800b588:	f000 f858 	bl	800b63c <_fstat_r>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	dbec      	blt.n	800b56a <__swhatbuf_r+0x12>
 800b590:	9901      	ldr	r1, [sp, #4]
 800b592:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b596:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b59a:	4259      	negs	r1, r3
 800b59c:	4159      	adcs	r1, r3
 800b59e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5a2:	e7eb      	b.n	800b57c <__swhatbuf_r+0x24>

0800b5a4 <__smakebuf_r>:
 800b5a4:	898b      	ldrh	r3, [r1, #12]
 800b5a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5a8:	079d      	lsls	r5, r3, #30
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	d507      	bpl.n	800b5c0 <__smakebuf_r+0x1c>
 800b5b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	6123      	str	r3, [r4, #16]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	6163      	str	r3, [r4, #20]
 800b5bc:	b003      	add	sp, #12
 800b5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5c0:	ab01      	add	r3, sp, #4
 800b5c2:	466a      	mov	r2, sp
 800b5c4:	f7ff ffc8 	bl	800b558 <__swhatbuf_r>
 800b5c8:	9f00      	ldr	r7, [sp, #0]
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7fd ffae 	bl	8009530 <_malloc_r>
 800b5d4:	b948      	cbnz	r0, 800b5ea <__smakebuf_r+0x46>
 800b5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5da:	059a      	lsls	r2, r3, #22
 800b5dc:	d4ee      	bmi.n	800b5bc <__smakebuf_r+0x18>
 800b5de:	f023 0303 	bic.w	r3, r3, #3
 800b5e2:	f043 0302 	orr.w	r3, r3, #2
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	e7e2      	b.n	800b5b0 <__smakebuf_r+0xc>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	6020      	str	r0, [r4, #0]
 800b5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5fa:	b15b      	cbz	r3, 800b614 <__smakebuf_r+0x70>
 800b5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b600:	4630      	mov	r0, r6
 800b602:	f000 f82d 	bl	800b660 <_isatty_r>
 800b606:	b128      	cbz	r0, 800b614 <__smakebuf_r+0x70>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f023 0303 	bic.w	r3, r3, #3
 800b60e:	f043 0301 	orr.w	r3, r3, #1
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	431d      	orrs	r5, r3
 800b618:	81a5      	strh	r5, [r4, #12]
 800b61a:	e7cf      	b.n	800b5bc <__smakebuf_r+0x18>

0800b61c <_close_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d06      	ldr	r5, [pc, #24]	@ (800b638 <_close_r+0x1c>)
 800b620:	2300      	movs	r3, #0
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	602b      	str	r3, [r5, #0]
 800b628:	f000 fcca 	bl	800bfc0 <_close>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_close_r+0x1a>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_close_r+0x1a>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20017ef0 	.word	0x20017ef0

0800b63c <_fstat_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4d07      	ldr	r5, [pc, #28]	@ (800b65c <_fstat_r+0x20>)
 800b640:	2300      	movs	r3, #0
 800b642:	4604      	mov	r4, r0
 800b644:	4608      	mov	r0, r1
 800b646:	4611      	mov	r1, r2
 800b648:	602b      	str	r3, [r5, #0]
 800b64a:	f000 fcc1 	bl	800bfd0 <_fstat>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	d102      	bne.n	800b658 <_fstat_r+0x1c>
 800b652:	682b      	ldr	r3, [r5, #0]
 800b654:	b103      	cbz	r3, 800b658 <_fstat_r+0x1c>
 800b656:	6023      	str	r3, [r4, #0]
 800b658:	bd38      	pop	{r3, r4, r5, pc}
 800b65a:	bf00      	nop
 800b65c:	20017ef0 	.word	0x20017ef0

0800b660 <_isatty_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d06      	ldr	r5, [pc, #24]	@ (800b67c <_isatty_r+0x1c>)
 800b664:	2300      	movs	r3, #0
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	602b      	str	r3, [r5, #0]
 800b66c:	f000 fcc0 	bl	800bff0 <_isatty>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_isatty_r+0x1a>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_isatty_r+0x1a>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	20017ef0 	.word	0x20017ef0

0800b680 <_lseek_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d07      	ldr	r5, [pc, #28]	@ (800b6a0 <_lseek_r+0x20>)
 800b684:	4604      	mov	r4, r0
 800b686:	4608      	mov	r0, r1
 800b688:	4611      	mov	r1, r2
 800b68a:	2200      	movs	r2, #0
 800b68c:	602a      	str	r2, [r5, #0]
 800b68e:	461a      	mov	r2, r3
 800b690:	f000 fcbe 	bl	800c010 <_lseek>
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	d102      	bne.n	800b69e <_lseek_r+0x1e>
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	b103      	cbz	r3, 800b69e <_lseek_r+0x1e>
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	bd38      	pop	{r3, r4, r5, pc}
 800b6a0:	20017ef0 	.word	0x20017ef0

0800b6a4 <_read_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	4d07      	ldr	r5, [pc, #28]	@ (800b6c4 <_read_r+0x20>)
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	4608      	mov	r0, r1
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	602a      	str	r2, [r5, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	f000 fcb4 	bl	800c020 <_read>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d102      	bne.n	800b6c2 <_read_r+0x1e>
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	b103      	cbz	r3, 800b6c2 <_read_r+0x1e>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	20017ef0 	.word	0x20017ef0

0800b6c8 <_write_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d07      	ldr	r5, [pc, #28]	@ (800b6e8 <_write_r+0x20>)
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	602a      	str	r2, [r5, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f000 fcaa 	bl	800c030 <_write>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_write_r+0x1e>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_write_r+0x1e>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	20017ef0 	.word	0x20017ef0

0800b6ec <__assert_func>:
 800b6ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ee:	4614      	mov	r4, r2
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	4b09      	ldr	r3, [pc, #36]	@ (800b718 <__assert_func+0x2c>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	68d8      	ldr	r0, [r3, #12]
 800b6fa:	b954      	cbnz	r4, 800b712 <__assert_func+0x26>
 800b6fc:	4b07      	ldr	r3, [pc, #28]	@ (800b71c <__assert_func+0x30>)
 800b6fe:	461c      	mov	r4, r3
 800b700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b704:	9100      	str	r1, [sp, #0]
 800b706:	462b      	mov	r3, r5
 800b708:	4905      	ldr	r1, [pc, #20]	@ (800b720 <__assert_func+0x34>)
 800b70a:	f000 f833 	bl	800b774 <fiprintf>
 800b70e:	f000 f850 	bl	800b7b2 <abort>
 800b712:	4b04      	ldr	r3, [pc, #16]	@ (800b724 <__assert_func+0x38>)
 800b714:	e7f4      	b.n	800b700 <__assert_func+0x14>
 800b716:	bf00      	nop
 800b718:	200071fc 	.word	0x200071fc
 800b71c:	0800c121 	.word	0x0800c121
 800b720:	08056600 	.word	0x08056600
 800b724:	080565f3 	.word	0x080565f3

0800b728 <_calloc_r>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	fba1 5402 	umull	r5, r4, r1, r2
 800b72e:	b93c      	cbnz	r4, 800b740 <_calloc_r+0x18>
 800b730:	4629      	mov	r1, r5
 800b732:	f7fd fefd 	bl	8009530 <_malloc_r>
 800b736:	4606      	mov	r6, r0
 800b738:	b928      	cbnz	r0, 800b746 <_calloc_r+0x1e>
 800b73a:	2600      	movs	r6, #0
 800b73c:	4630      	mov	r0, r6
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	220c      	movs	r2, #12
 800b742:	6002      	str	r2, [r0, #0]
 800b744:	e7f9      	b.n	800b73a <_calloc_r+0x12>
 800b746:	462a      	mov	r2, r5
 800b748:	4621      	mov	r1, r4
 800b74a:	f7fe fa3d 	bl	8009bc8 <memset>
 800b74e:	e7f5      	b.n	800b73c <_calloc_r+0x14>

0800b750 <__ascii_mbtowc>:
 800b750:	b082      	sub	sp, #8
 800b752:	b901      	cbnz	r1, 800b756 <__ascii_mbtowc+0x6>
 800b754:	a901      	add	r1, sp, #4
 800b756:	b142      	cbz	r2, 800b76a <__ascii_mbtowc+0x1a>
 800b758:	b14b      	cbz	r3, 800b76e <__ascii_mbtowc+0x1e>
 800b75a:	7813      	ldrb	r3, [r2, #0]
 800b75c:	600b      	str	r3, [r1, #0]
 800b75e:	7812      	ldrb	r2, [r2, #0]
 800b760:	1e10      	subs	r0, r2, #0
 800b762:	bf18      	it	ne
 800b764:	2001      	movne	r0, #1
 800b766:	b002      	add	sp, #8
 800b768:	4770      	bx	lr
 800b76a:	4610      	mov	r0, r2
 800b76c:	e7fb      	b.n	800b766 <__ascii_mbtowc+0x16>
 800b76e:	f06f 0001 	mvn.w	r0, #1
 800b772:	e7f8      	b.n	800b766 <__ascii_mbtowc+0x16>

0800b774 <fiprintf>:
 800b774:	b40e      	push	{r1, r2, r3}
 800b776:	b503      	push	{r0, r1, lr}
 800b778:	4601      	mov	r1, r0
 800b77a:	ab03      	add	r3, sp, #12
 800b77c:	4805      	ldr	r0, [pc, #20]	@ (800b794 <fiprintf+0x20>)
 800b77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b782:	6800      	ldr	r0, [r0, #0]
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	f7ff f8c9 	bl	800a91c <_vfiprintf_r>
 800b78a:	b002      	add	sp, #8
 800b78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b790:	b003      	add	sp, #12
 800b792:	4770      	bx	lr
 800b794:	200071fc 	.word	0x200071fc

0800b798 <__ascii_wctomb>:
 800b798:	4603      	mov	r3, r0
 800b79a:	4608      	mov	r0, r1
 800b79c:	b141      	cbz	r1, 800b7b0 <__ascii_wctomb+0x18>
 800b79e:	2aff      	cmp	r2, #255	@ 0xff
 800b7a0:	d904      	bls.n	800b7ac <__ascii_wctomb+0x14>
 800b7a2:	228a      	movs	r2, #138	@ 0x8a
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7aa:	4770      	bx	lr
 800b7ac:	700a      	strb	r2, [r1, #0]
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	4770      	bx	lr

0800b7b2 <abort>:
 800b7b2:	b508      	push	{r3, lr}
 800b7b4:	2006      	movs	r0, #6
 800b7b6:	f000 f82b 	bl	800b810 <raise>
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	f000 fc40 	bl	800c040 <_exit>

0800b7c0 <_raise_r>:
 800b7c0:	291f      	cmp	r1, #31
 800b7c2:	b538      	push	{r3, r4, r5, lr}
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	d904      	bls.n	800b7d4 <_raise_r+0x14>
 800b7ca:	2316      	movs	r3, #22
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7d6:	b112      	cbz	r2, 800b7de <_raise_r+0x1e>
 800b7d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7dc:	b94b      	cbnz	r3, 800b7f2 <_raise_r+0x32>
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f000 f830 	bl	800b844 <_getpid_r>
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4601      	mov	r1, r0
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ee:	f000 b817 	b.w	800b820 <_kill_r>
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d00a      	beq.n	800b80c <_raise_r+0x4c>
 800b7f6:	1c59      	adds	r1, r3, #1
 800b7f8:	d103      	bne.n	800b802 <_raise_r+0x42>
 800b7fa:	2316      	movs	r3, #22
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	2001      	movs	r0, #1
 800b800:	e7e7      	b.n	800b7d2 <_raise_r+0x12>
 800b802:	2100      	movs	r1, #0
 800b804:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b808:	4620      	mov	r0, r4
 800b80a:	4798      	blx	r3
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7e0      	b.n	800b7d2 <_raise_r+0x12>

0800b810 <raise>:
 800b810:	4b02      	ldr	r3, [pc, #8]	@ (800b81c <raise+0xc>)
 800b812:	4601      	mov	r1, r0
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	f7ff bfd3 	b.w	800b7c0 <_raise_r>
 800b81a:	bf00      	nop
 800b81c:	200071fc 	.word	0x200071fc

0800b820 <_kill_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d07      	ldr	r5, [pc, #28]	@ (800b840 <_kill_r+0x20>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	4611      	mov	r1, r2
 800b82c:	602b      	str	r3, [r5, #0]
 800b82e:	f000 fbe7 	bl	800c000 <_kill>
 800b832:	1c43      	adds	r3, r0, #1
 800b834:	d102      	bne.n	800b83c <_kill_r+0x1c>
 800b836:	682b      	ldr	r3, [r5, #0]
 800b838:	b103      	cbz	r3, 800b83c <_kill_r+0x1c>
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	bd38      	pop	{r3, r4, r5, pc}
 800b83e:	bf00      	nop
 800b840:	20017ef0 	.word	0x20017ef0

0800b844 <_getpid_r>:
 800b844:	f000 bbcc 	b.w	800bfe0 <_getpid>

0800b848 <expf>:
 800b848:	ee10 2a10 	vmov	r2, s0
 800b84c:	f240 412a 	movw	r1, #1066	@ 0x42a
 800b850:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800b854:	428b      	cmp	r3, r1
 800b856:	b430      	push	{r4, r5}
 800b858:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b85c:	d92a      	bls.n	800b8b4 <expf+0x6c>
 800b85e:	f512 0f00 	cmn.w	r2, #8388608	@ 0x800000
 800b862:	d058      	beq.n	800b916 <expf+0xce>
 800b864:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800b868:	d303      	bcc.n	800b872 <expf+0x2a>
 800b86a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b86e:	bc30      	pop	{r4, r5}
 800b870:	4770      	bx	lr
 800b872:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 800b91c <expf+0xd4>
 800b876:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87e:	dd03      	ble.n	800b888 <expf+0x40>
 800b880:	bc30      	pop	{r4, r5}
 800b882:	2000      	movs	r0, #0
 800b884:	f000 b87a 	b.w	800b97c <__math_oflowf>
 800b888:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b920 <expf+0xd8>
 800b88c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b894:	d503      	bpl.n	800b89e <expf+0x56>
 800b896:	bc30      	pop	{r4, r5}
 800b898:	2000      	movs	r0, #0
 800b89a:	f000 b863 	b.w	800b964 <__math_uflowf>
 800b89e:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800b924 <expf+0xdc>
 800b8a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8aa:	d503      	bpl.n	800b8b4 <expf+0x6c>
 800b8ac:	bc30      	pop	{r4, r5}
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	f000 b85e 	b.w	800b970 <__math_may_uflowf>
 800b8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b928 <expf+0xe0>)
 800b8b6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800b8ba:	ed93 5b4a 	vldr	d5, [r3, #296]	@ 0x128
 800b8be:	ed93 4b48 	vldr	d4, [r3, #288]	@ 0x120
 800b8c2:	eeb0 7b44 	vmov.f64	d7, d4
 800b8c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b8ca:	ee17 0a10 	vmov	r0, s14
 800b8ce:	ee37 7b44 	vsub.f64	d7, d7, d4
 800b8d2:	f000 021f 	and.w	r2, r0, #31
 800b8d6:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800b8da:	ed93 5b4c 	vldr	d5, [r3, #304]	@ 0x130
 800b8de:	ee27 4b07 	vmul.f64	d4, d7, d7
 800b8e2:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
 800b8e6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800b8ea:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b8ee:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800b8f2:	684d      	ldr	r5, [r1, #4]
 800b8f4:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	190a      	adds	r2, r1, r4
 800b8fc:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800b900:	eea5 0b07 	vfma.f64	d0, d5, d7
 800b904:	ec43 2b17 	vmov	d7, r2, r3
 800b908:	eea6 0b04 	vfma.f64	d0, d6, d4
 800b90c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b910:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b914:	e7ab      	b.n	800b86e <expf+0x26>
 800b916:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800b92c <expf+0xe4>
 800b91a:	e7a8      	b.n	800b86e <expf+0x26>
 800b91c:	42b17217 	.word	0x42b17217
 800b920:	c2cff1b4 	.word	0xc2cff1b4
 800b924:	c2ce8ecf 	.word	0xc2ce8ecf
 800b928:	08056630 	.word	0x08056630
 800b92c:	00000000 	.word	0x00000000

0800b930 <with_errnof>:
 800b930:	b510      	push	{r4, lr}
 800b932:	ed2d 8b02 	vpush	{d8}
 800b936:	eeb0 8a40 	vmov.f32	s16, s0
 800b93a:	4604      	mov	r4, r0
 800b93c:	f7fe f960 	bl	8009c00 <__errno>
 800b940:	eeb0 0a48 	vmov.f32	s0, s16
 800b944:	ecbd 8b02 	vpop	{d8}
 800b948:	6004      	str	r4, [r0, #0]
 800b94a:	bd10      	pop	{r4, pc}

0800b94c <xflowf>:
 800b94c:	b130      	cbz	r0, 800b95c <xflowf+0x10>
 800b94e:	eef1 7a40 	vneg.f32	s15, s0
 800b952:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b956:	2022      	movs	r0, #34	@ 0x22
 800b958:	f7ff bfea 	b.w	800b930 <with_errnof>
 800b95c:	eef0 7a40 	vmov.f32	s15, s0
 800b960:	e7f7      	b.n	800b952 <xflowf+0x6>
	...

0800b964 <__math_uflowf>:
 800b964:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b96c <__math_uflowf+0x8>
 800b968:	f7ff bff0 	b.w	800b94c <xflowf>
 800b96c:	10000000 	.word	0x10000000

0800b970 <__math_may_uflowf>:
 800b970:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b978 <__math_may_uflowf+0x8>
 800b974:	f7ff bfea 	b.w	800b94c <xflowf>
 800b978:	1a200000 	.word	0x1a200000

0800b97c <__math_oflowf>:
 800b97c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b984 <__math_oflowf+0x8>
 800b980:	f7ff bfe4 	b.w	800b94c <xflowf>
 800b984:	70000000 	.word	0x70000000

0800b988 <checkint>:
 800b988:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b98c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800b990:	429a      	cmp	r2, r3
 800b992:	b570      	push	{r4, r5, r6, lr}
 800b994:	dd2a      	ble.n	800b9ec <checkint+0x64>
 800b996:	f240 4333 	movw	r3, #1075	@ 0x433
 800b99a:	429a      	cmp	r2, r3
 800b99c:	dc24      	bgt.n	800b9e8 <checkint+0x60>
 800b99e:	1a9b      	subs	r3, r3, r2
 800b9a0:	f1a3 0620 	sub.w	r6, r3, #32
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9a8:	fa02 f403 	lsl.w	r4, r2, r3
 800b9ac:	fa02 f606 	lsl.w	r6, r2, r6
 800b9b0:	f1c3 0520 	rsb	r5, r3, #32
 800b9b4:	fa22 f505 	lsr.w	r5, r2, r5
 800b9b8:	4334      	orrs	r4, r6
 800b9ba:	432c      	orrs	r4, r5
 800b9bc:	409a      	lsls	r2, r3
 800b9be:	ea20 0202 	bic.w	r2, r0, r2
 800b9c2:	ea21 0404 	bic.w	r4, r1, r4
 800b9c6:	4322      	orrs	r2, r4
 800b9c8:	f1a3 0420 	sub.w	r4, r3, #32
 800b9cc:	f1c3 0220 	rsb	r2, r3, #32
 800b9d0:	d10c      	bne.n	800b9ec <checkint+0x64>
 800b9d2:	40d8      	lsrs	r0, r3
 800b9d4:	fa01 f302 	lsl.w	r3, r1, r2
 800b9d8:	4318      	orrs	r0, r3
 800b9da:	40e1      	lsrs	r1, r4
 800b9dc:	4308      	orrs	r0, r1
 800b9de:	f000 0001 	and.w	r0, r0, #1
 800b9e2:	f1d0 0002 	rsbs	r0, r0, #2
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	2002      	movs	r0, #2
 800b9ea:	e7fc      	b.n	800b9e6 <checkint+0x5e>
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	e7fa      	b.n	800b9e6 <checkint+0x5e>

0800b9f0 <pow>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	ee10 4a90 	vmov	r4, s1
 800b9f8:	ed2d 8b0a 	vpush	{d8-d12}
 800b9fc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800ba00:	ee11 aa90 	vmov	sl, s3
 800ba04:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800ba08:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	ee10 5a10 	vmov	r5, s0
 800ba12:	ee11 0a10 	vmov	r0, s2
 800ba16:	b087      	sub	sp, #28
 800ba18:	46c4      	mov	ip, r8
 800ba1a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800ba1e:	d806      	bhi.n	800ba2e <pow+0x3e>
 800ba20:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800ba24:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800ba28:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba2a:	f240 8157 	bls.w	800bcdc <pow+0x2ec>
 800ba2e:	1802      	adds	r2, r0, r0
 800ba30:	eb4a 010a 	adc.w	r1, sl, sl
 800ba34:	f06f 0b01 	mvn.w	fp, #1
 800ba38:	1e57      	subs	r7, r2, #1
 800ba3a:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800ba3e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800ba42:	45bb      	cmp	fp, r7
 800ba44:	eb7e 0303 	sbcs.w	r3, lr, r3
 800ba48:	d242      	bcs.n	800bad0 <pow+0xe0>
 800ba4a:	ea52 0301 	orrs.w	r3, r2, r1
 800ba4e:	f04f 0300 	mov.w	r3, #0
 800ba52:	d10c      	bne.n	800ba6e <pow+0x7e>
 800ba54:	196d      	adds	r5, r5, r5
 800ba56:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800ba5a:	4164      	adcs	r4, r4
 800ba5c:	42ab      	cmp	r3, r5
 800ba5e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ba62:	41a3      	sbcs	r3, r4
 800ba64:	f0c0 808f 	bcc.w	800bb86 <pow+0x196>
 800ba68:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ba6c:	e02b      	b.n	800bac6 <pow+0xd6>
 800ba6e:	4ed4      	ldr	r6, [pc, #848]	@ (800bdc0 <pow+0x3d0>)
 800ba70:	42b4      	cmp	r4, r6
 800ba72:	bf08      	it	eq
 800ba74:	429d      	cmpeq	r5, r3
 800ba76:	d109      	bne.n	800ba8c <pow+0x9c>
 800ba78:	1800      	adds	r0, r0, r0
 800ba7a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800ba7e:	eb4a 0a0a 	adc.w	sl, sl, sl
 800ba82:	4283      	cmp	r3, r0
 800ba84:	4bcf      	ldr	r3, [pc, #828]	@ (800bdc4 <pow+0x3d4>)
 800ba86:	eb73 030a 	sbcs.w	r3, r3, sl
 800ba8a:	e7eb      	b.n	800ba64 <pow+0x74>
 800ba8c:	196d      	adds	r5, r5, r5
 800ba8e:	48ce      	ldr	r0, [pc, #824]	@ (800bdc8 <pow+0x3d8>)
 800ba90:	4164      	adcs	r4, r4
 800ba92:	42ab      	cmp	r3, r5
 800ba94:	eb70 0604 	sbcs.w	r6, r0, r4
 800ba98:	d375      	bcc.n	800bb86 <pow+0x196>
 800ba9a:	4281      	cmp	r1, r0
 800ba9c:	bf08      	it	eq
 800ba9e:	429a      	cmpeq	r2, r3
 800baa0:	d171      	bne.n	800bb86 <pow+0x196>
 800baa2:	4aca      	ldr	r2, [pc, #808]	@ (800bdcc <pow+0x3dc>)
 800baa4:	4294      	cmp	r4, r2
 800baa6:	bf08      	it	eq
 800baa8:	429d      	cmpeq	r5, r3
 800baaa:	d0dd      	beq.n	800ba68 <pow+0x78>
 800baac:	4294      	cmp	r4, r2
 800baae:	ea6f 0a0a 	mvn.w	sl, sl
 800bab2:	bf34      	ite	cc
 800bab4:	2400      	movcc	r4, #0
 800bab6:	2401      	movcs	r4, #1
 800bab8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800babc:	4554      	cmp	r4, sl
 800babe:	f040 81dc 	bne.w	800be7a <pow+0x48a>
 800bac2:	ee21 0b01 	vmul.f64	d0, d1, d1
 800bac6:	b007      	add	sp, #28
 800bac8:	ecbd 8b0a 	vpop	{d8-d12}
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	196f      	adds	r7, r5, r5
 800bad2:	eb44 0904 	adc.w	r9, r4, r4
 800bad6:	1e7a      	subs	r2, r7, #1
 800bad8:	f169 0300 	sbc.w	r3, r9, #0
 800badc:	4593      	cmp	fp, r2
 800bade:	eb7e 0303 	sbcs.w	r3, lr, r3
 800bae2:	d225      	bcs.n	800bb30 <pow+0x140>
 800bae4:	ee20 0b00 	vmul.f64	d0, d0, d0
 800bae8:	2c00      	cmp	r4, #0
 800baea:	da13      	bge.n	800bb14 <pow+0x124>
 800baec:	4651      	mov	r1, sl
 800baee:	f7ff ff4b 	bl	800b988 <checkint>
 800baf2:	2801      	cmp	r0, #1
 800baf4:	d10e      	bne.n	800bb14 <pow+0x124>
 800baf6:	eeb1 0b40 	vneg.f64	d0, d0
 800bafa:	ea57 0909 	orrs.w	r9, r7, r9
 800bafe:	d10b      	bne.n	800bb18 <pow+0x128>
 800bb00:	f1ba 0f00 	cmp.w	sl, #0
 800bb04:	dadf      	bge.n	800bac6 <pow+0xd6>
 800bb06:	b007      	add	sp, #28
 800bb08:	ecbd 8b0a 	vpop	{d8-d12}
 800bb0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	f000 ba12 	b.w	800bf38 <__math_divzero>
 800bb14:	2000      	movs	r0, #0
 800bb16:	e7f0      	b.n	800bafa <pow+0x10a>
 800bb18:	f1ba 0f00 	cmp.w	sl, #0
 800bb1c:	dad3      	bge.n	800bac6 <pow+0xd6>
 800bb1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bb22:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800bb26:	ed8d 7b00 	vstr	d7, [sp]
 800bb2a:	ed9d 0b00 	vldr	d0, [sp]
 800bb2e:	e7ca      	b.n	800bac6 <pow+0xd6>
 800bb30:	2c00      	cmp	r4, #0
 800bb32:	da2b      	bge.n	800bb8c <pow+0x19c>
 800bb34:	4651      	mov	r1, sl
 800bb36:	f7ff ff27 	bl	800b988 <checkint>
 800bb3a:	b930      	cbnz	r0, 800bb4a <pow+0x15a>
 800bb3c:	b007      	add	sp, #28
 800bb3e:	ecbd 8b0a 	vpop	{d8-d12}
 800bb42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb46:	f000 ba0f 	b.w	800bf68 <__math_invalid>
 800bb4a:	1e41      	subs	r1, r0, #1
 800bb4c:	4248      	negs	r0, r1
 800bb4e:	4148      	adcs	r0, r1
 800bb50:	0480      	lsls	r0, r0, #18
 800bb52:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800bb56:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800bb5a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800bb5e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800bb62:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb64:	d92d      	bls.n	800bbc2 <pow+0x1d2>
 800bb66:	4b96      	ldr	r3, [pc, #600]	@ (800bdc0 <pow+0x3d0>)
 800bb68:	2000      	movs	r0, #0
 800bb6a:	429c      	cmp	r4, r3
 800bb6c:	bf08      	it	eq
 800bb6e:	4285      	cmpeq	r5, r0
 800bb70:	f43f af7a 	beq.w	800ba68 <pow+0x78>
 800bb74:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800bb78:	428a      	cmp	r2, r1
 800bb7a:	d80c      	bhi.n	800bb96 <pow+0x1a6>
 800bb7c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800bb80:	42a8      	cmp	r0, r5
 800bb82:	41a3      	sbcs	r3, r4
 800bb84:	d204      	bcs.n	800bb90 <pow+0x1a0>
 800bb86:	ee31 0b00 	vadd.f64	d0, d1, d0
 800bb8a:	e79c      	b.n	800bac6 <pow+0xd6>
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	e7e4      	b.n	800bb5a <pow+0x16a>
 800bb90:	ee30 0b41 	vsub.f64	d0, d0, d1
 800bb94:	e797      	b.n	800bac6 <pow+0xd6>
 800bb96:	2d01      	cmp	r5, #1
 800bb98:	eb74 0303 	sbcs.w	r3, r4, r3
 800bb9c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bba0:	bf34      	ite	cc
 800bba2:	2301      	movcc	r3, #1
 800bba4:	2300      	movcs	r3, #0
 800bba6:	4296      	cmp	r6, r2
 800bba8:	bf8c      	ite	hi
 800bbaa:	2600      	movhi	r6, #0
 800bbac:	2601      	movls	r6, #1
 800bbae:	42b3      	cmp	r3, r6
 800bbb0:	f000 809c 	beq.w	800bcec <pow+0x2fc>
 800bbb4:	b007      	add	sp, #28
 800bbb6:	ecbd 8b0a 	vpop	{d8-d12}
 800bbba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbe:	f000 b9b3 	b.w	800bf28 <__math_oflow>
 800bbc2:	f1bc 0f00 	cmp.w	ip, #0
 800bbc6:	d10a      	bne.n	800bbde <pow+0x1ee>
 800bbc8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800bdb0 <pow+0x3c0>
 800bbcc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bbd0:	ec53 2b17 	vmov	r2, r3, d7
 800bbd4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800bbd8:	4615      	mov	r5, r2
 800bbda:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800bbde:	4a7c      	ldr	r2, [pc, #496]	@ (800bdd0 <pow+0x3e0>)
 800bbe0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800bbe4:	4422      	add	r2, r4
 800bbe6:	1513      	asrs	r3, r2, #20
 800bbe8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800bbec:	ee03 3a10 	vmov	s6, r3
 800bbf0:	0d12      	lsrs	r2, r2, #20
 800bbf2:	4b78      	ldr	r3, [pc, #480]	@ (800bdd4 <pow+0x3e4>)
 800bbf4:	0512      	lsls	r2, r2, #20
 800bbf6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800bbfa:	1aa7      	subs	r7, r4, r2
 800bbfc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800bc00:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800bc04:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800bc08:	1e2e      	subs	r6, r5, #0
 800bc0a:	ec47 6b14 	vmov	d4, r6, r7
 800bc0e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800bc12:	eea4 6b05 	vfma.f64	d6, d4, d5
 800bc16:	ed93 5b00 	vldr	d5, [r3]
 800bc1a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800bc1e:	eea3 2b05 	vfma.f64	d2, d3, d5
 800bc22:	ed93 5b02 	vldr	d5, [r3, #8]
 800bc26:	ee36 4b02 	vadd.f64	d4, d6, d2
 800bc2a:	ee32 2b44 	vsub.f64	d2, d2, d4
 800bc2e:	eea3 7b05 	vfma.f64	d7, d3, d5
 800bc32:	ed93 5b04 	vldr	d5, [r3, #16]
 800bc36:	ee32 2b06 	vadd.f64	d2, d2, d6
 800bc3a:	ee37 7b02 	vadd.f64	d7, d7, d2
 800bc3e:	ee26 5b05 	vmul.f64	d5, d6, d5
 800bc42:	ee26 0b05 	vmul.f64	d0, d6, d5
 800bc46:	ee34 8b00 	vadd.f64	d8, d4, d0
 800bc4a:	eeb0 9b40 	vmov.f64	d9, d0
 800bc4e:	ee34 4b48 	vsub.f64	d4, d4, d8
 800bc52:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800bc56:	ee34 ab00 	vadd.f64	d10, d4, d0
 800bc5a:	ed93 5b06 	vldr	d5, [r3, #24]
 800bc5e:	ee26 bb00 	vmul.f64	d11, d6, d0
 800bc62:	ee37 7b09 	vadd.f64	d7, d7, d9
 800bc66:	ed93 4b08 	vldr	d4, [r3, #32]
 800bc6a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800bc6e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800bc72:	eea6 5b04 	vfma.f64	d5, d6, d4
 800bc76:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800bc7a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800bc7e:	eea6 4b03 	vfma.f64	d4, d6, d3
 800bc82:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800bc86:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800bc8a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800bc8e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800bc92:	eeab 7b05 	vfma.f64	d7, d11, d5
 800bc96:	ee38 4b07 	vadd.f64	d4, d8, d7
 800bc9a:	ee21 6b04 	vmul.f64	d6, d1, d4
 800bc9e:	ee16 3a90 	vmov	r3, s13
 800bca2:	eeb0 5b46 	vmov.f64	d5, d6
 800bca6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800bcaa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800bcae:	18b2      	adds	r2, r6, r2
 800bcb0:	2a3e      	cmp	r2, #62	@ 0x3e
 800bcb2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800bcb6:	ee38 8b44 	vsub.f64	d8, d8, d4
 800bcba:	ee38 8b07 	vadd.f64	d8, d8, d7
 800bcbe:	eea1 5b08 	vfma.f64	d5, d1, d8
 800bcc2:	d91b      	bls.n	800bcfc <pow+0x30c>
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	da0b      	bge.n	800bce0 <pow+0x2f0>
 800bcc8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800bccc:	ee36 0b00 	vadd.f64	d0, d6, d0
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	f43f aef8 	beq.w	800bac6 <pow+0xd6>
 800bcd6:	eeb1 0b40 	vneg.f64	d0, d0
 800bcda:	e6f4      	b.n	800bac6 <pow+0xd6>
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e77e      	b.n	800bbde <pow+0x1ee>
 800bce0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800bce4:	d909      	bls.n	800bcfa <pow+0x30a>
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f6bf af64 	bge.w	800bbb4 <pow+0x1c4>
 800bcec:	b007      	add	sp, #28
 800bcee:	ecbd 8b0a 	vpop	{d8-d12}
 800bcf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf6:	f000 b90f 	b.w	800bf18 <__math_uflow>
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	4936      	ldr	r1, [pc, #216]	@ (800bdd8 <pow+0x3e8>)
 800bcfe:	ed91 4b02 	vldr	d4, [r1, #8]
 800bd02:	ed91 3b00 	vldr	d3, [r1]
 800bd06:	eeb0 7b44 	vmov.f64	d7, d4
 800bd0a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800bd0e:	ee17 5a10 	vmov	r5, s14
 800bd12:	ee37 7b44 	vsub.f64	d7, d7, d4
 800bd16:	ed91 4b04 	vldr	d4, [r1, #16]
 800bd1a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800bd1e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800bd22:	ed91 4b06 	vldr	d4, [r1, #24]
 800bd26:	18dc      	adds	r4, r3, r3
 800bd28:	f104 030f 	add.w	r3, r4, #15
 800bd2c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800bd30:	eea7 6b04 	vfma.f64	d6, d7, d4
 800bd34:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800bd38:	ee35 5b06 	vadd.f64	d5, d5, d6
 800bd3c:	ee25 6b05 	vmul.f64	d6, d5, d5
 800bd40:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800bd44:	ed91 4b08 	vldr	d4, [r1, #32]
 800bd48:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bd4c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800bd50:	eea5 4b03 	vfma.f64	d4, d5, d3
 800bd54:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800bd58:	eea6 7b04 	vfma.f64	d7, d6, d4
 800bd5c:	ee26 6b06 	vmul.f64	d6, d6, d6
 800bd60:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800bd64:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800bd68:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800bd6c:	eea5 4b03 	vfma.f64	d4, d5, d3
 800bd70:	1940      	adds	r0, r0, r5
 800bd72:	2700      	movs	r7, #0
 800bd74:	eb17 020c 	adds.w	r2, r7, ip
 800bd78:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800bd7c:	eea6 7b04 	vfma.f64	d7, d6, d4
 800bd80:	2e00      	cmp	r6, #0
 800bd82:	d175      	bne.n	800be70 <pow+0x480>
 800bd84:	42bd      	cmp	r5, r7
 800bd86:	db29      	blt.n	800bddc <pow+0x3ec>
 800bd88:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800bd8c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800bd90:	4610      	mov	r0, r2
 800bd92:	ec41 0b10 	vmov	d0, r0, r1
 800bd96:	eea7 0b00 	vfma.f64	d0, d7, d0
 800bd9a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800bdb8 <pow+0x3c8>
 800bd9e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bda2:	b007      	add	sp, #28
 800bda4:	ecbd 8b0a 	vpop	{d8-d12}
 800bda8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	f000 b8f4 	b.w	800bf98 <__math_check_oflow>
 800bdb0:	00000000 	.word	0x00000000
 800bdb4:	43300000 	.word	0x43300000
 800bdb8:	00000000 	.word	0x00000000
 800bdbc:	7f000000 	.word	0x7f000000
 800bdc0:	3ff00000 	.word	0x3ff00000
 800bdc4:	fff00000 	.word	0xfff00000
 800bdc8:	ffe00000 	.word	0xffe00000
 800bdcc:	7fe00000 	.word	0x7fe00000
 800bdd0:	c0196aab 	.word	0xc0196aab
 800bdd4:	08056778 	.word	0x08056778
 800bdd8:	080577c0 	.word	0x080577c0
 800bddc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800bde0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800bde4:	4610      	mov	r0, r2
 800bde6:	ec41 0b15 	vmov	d5, r0, r1
 800bdea:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800bdee:	ee27 6b05 	vmul.f64	d6, d7, d5
 800bdf2:	ee35 7b06 	vadd.f64	d7, d5, d6
 800bdf6:	eeb0 4bc7 	vabs.f64	d4, d7
 800bdfa:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800bdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be02:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800be80 <pow+0x490>
 800be06:	d52a      	bpl.n	800be5e <pow+0x46e>
 800be08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800be0c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800be10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be14:	ee35 5b06 	vadd.f64	d5, d5, d6
 800be18:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800be1c:	bf58      	it	pl
 800be1e:	eeb0 4b43 	vmovpl.f64	d4, d3
 800be22:	ee37 3b04 	vadd.f64	d3, d7, d4
 800be26:	ee34 6b43 	vsub.f64	d6, d4, d3
 800be2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800be2e:	ee36 6b05 	vadd.f64	d6, d6, d5
 800be32:	ee36 6b03 	vadd.f64	d6, d6, d3
 800be36:	ee36 7b44 	vsub.f64	d7, d6, d4
 800be3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be42:	d104      	bne.n	800be4e <pow+0x45e>
 800be44:	4632      	mov	r2, r6
 800be46:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800be4a:	ec43 2b17 	vmov	d7, r2, r3
 800be4e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be52:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be56:	ee26 6b00 	vmul.f64	d6, d6, d0
 800be5a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800be5e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800be62:	b007      	add	sp, #28
 800be64:	ecbd 8b0a 	vpop	{d8-d12}
 800be68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	f000 b88b 	b.w	800bf86 <__math_check_uflow>
 800be70:	ec43 2b10 	vmov	d0, r2, r3
 800be74:	eea7 0b00 	vfma.f64	d0, d7, d0
 800be78:	e625      	b.n	800bac6 <pow+0xd6>
 800be7a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800be88 <pow+0x498>
 800be7e:	e622      	b.n	800bac6 <pow+0xd6>
 800be80:	00000000 	.word	0x00000000
 800be84:	00100000 	.word	0x00100000
	...

0800be90 <sqrt>:
 800be90:	b508      	push	{r3, lr}
 800be92:	ed2d 8b04 	vpush	{d8-d9}
 800be96:	eeb0 8b40 	vmov.f64	d8, d0
 800be9a:	f000 f819 	bl	800bed0 <__ieee754_sqrt>
 800be9e:	eeb4 8b48 	vcmp.f64	d8, d8
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	d60c      	bvs.n	800bec2 <sqrt+0x32>
 800bea8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800bec8 <sqrt+0x38>
 800beac:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800beb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb4:	d505      	bpl.n	800bec2 <sqrt+0x32>
 800beb6:	f7fd fea3 	bl	8009c00 <__errno>
 800beba:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800bebe:	2321      	movs	r3, #33	@ 0x21
 800bec0:	6003      	str	r3, [r0, #0]
 800bec2:	ecbd 8b04 	vpop	{d8-d9}
 800bec6:	bd08      	pop	{r3, pc}
	...

0800bed0 <__ieee754_sqrt>:
 800bed0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800bed4:	4770      	bx	lr

0800bed6 <with_errno>:
 800bed6:	b510      	push	{r4, lr}
 800bed8:	ed2d 8b02 	vpush	{d8}
 800bedc:	eeb0 8b40 	vmov.f64	d8, d0
 800bee0:	4604      	mov	r4, r0
 800bee2:	f7fd fe8d 	bl	8009c00 <__errno>
 800bee6:	eeb0 0b48 	vmov.f64	d0, d8
 800beea:	ecbd 8b02 	vpop	{d8}
 800beee:	6004      	str	r4, [r0, #0]
 800bef0:	bd10      	pop	{r4, pc}

0800bef2 <xflow>:
 800bef2:	b082      	sub	sp, #8
 800bef4:	b158      	cbz	r0, 800bf0e <xflow+0x1c>
 800bef6:	eeb1 7b40 	vneg.f64	d7, d0
 800befa:	ed8d 7b00 	vstr	d7, [sp]
 800befe:	ed9d 7b00 	vldr	d7, [sp]
 800bf02:	2022      	movs	r0, #34	@ 0x22
 800bf04:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bf08:	b002      	add	sp, #8
 800bf0a:	f7ff bfe4 	b.w	800bed6 <with_errno>
 800bf0e:	eeb0 7b40 	vmov.f64	d7, d0
 800bf12:	e7f2      	b.n	800befa <xflow+0x8>
 800bf14:	0000      	movs	r0, r0
	...

0800bf18 <__math_uflow>:
 800bf18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf20 <__math_uflow+0x8>
 800bf1c:	f7ff bfe9 	b.w	800bef2 <xflow>
 800bf20:	00000000 	.word	0x00000000
 800bf24:	10000000 	.word	0x10000000

0800bf28 <__math_oflow>:
 800bf28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf30 <__math_oflow+0x8>
 800bf2c:	f7ff bfe1 	b.w	800bef2 <xflow>
 800bf30:	00000000 	.word	0x00000000
 800bf34:	70000000 	.word	0x70000000

0800bf38 <__math_divzero>:
 800bf38:	b082      	sub	sp, #8
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800bf40:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800bf44:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800bf48:	ed8d 7b00 	vstr	d7, [sp]
 800bf4c:	ed9d 0b00 	vldr	d0, [sp]
 800bf50:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800bf60 <__math_divzero+0x28>
 800bf54:	2022      	movs	r0, #34	@ 0x22
 800bf56:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800bf5a:	b002      	add	sp, #8
 800bf5c:	f7ff bfbb 	b.w	800bed6 <with_errno>
	...

0800bf68 <__math_invalid>:
 800bf68:	eeb0 7b40 	vmov.f64	d7, d0
 800bf6c:	eeb4 7b47 	vcmp.f64	d7, d7
 800bf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf74:	ee30 6b40 	vsub.f64	d6, d0, d0
 800bf78:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800bf7c:	d602      	bvs.n	800bf84 <__math_invalid+0x1c>
 800bf7e:	2021      	movs	r0, #33	@ 0x21
 800bf80:	f7ff bfa9 	b.w	800bed6 <with_errno>
 800bf84:	4770      	bx	lr

0800bf86 <__math_check_uflow>:
 800bf86:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf8e:	d102      	bne.n	800bf96 <__math_check_uflow+0x10>
 800bf90:	2022      	movs	r0, #34	@ 0x22
 800bf92:	f7ff bfa0 	b.w	800bed6 <with_errno>
 800bf96:	4770      	bx	lr

0800bf98 <__math_check_oflow>:
 800bf98:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800bfb8 <__math_check_oflow+0x20>
 800bf9c:	eeb0 7bc0 	vabs.f64	d7, d0
 800bfa0:	eeb4 7b46 	vcmp.f64	d7, d6
 800bfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa8:	dd02      	ble.n	800bfb0 <__math_check_oflow+0x18>
 800bfaa:	2022      	movs	r0, #34	@ 0x22
 800bfac:	f7ff bf93 	b.w	800bed6 <with_errno>
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	f3af 8000 	nop.w
 800bfb8:	ffffffff 	.word	0xffffffff
 800bfbc:	7fefffff 	.word	0x7fefffff

0800bfc0 <_close>:
 800bfc0:	4b02      	ldr	r3, [pc, #8]	@ (800bfcc <_close+0xc>)
 800bfc2:	2258      	movs	r2, #88	@ 0x58
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfca:	4770      	bx	lr
 800bfcc:	20017ef0 	.word	0x20017ef0

0800bfd0 <_fstat>:
 800bfd0:	4b02      	ldr	r3, [pc, #8]	@ (800bfdc <_fstat+0xc>)
 800bfd2:	2258      	movs	r2, #88	@ 0x58
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfda:	4770      	bx	lr
 800bfdc:	20017ef0 	.word	0x20017ef0

0800bfe0 <_getpid>:
 800bfe0:	4b02      	ldr	r3, [pc, #8]	@ (800bfec <_getpid+0xc>)
 800bfe2:	2258      	movs	r2, #88	@ 0x58
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfea:	4770      	bx	lr
 800bfec:	20017ef0 	.word	0x20017ef0

0800bff0 <_isatty>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	@ (800bffc <_isatty+0xc>)
 800bff2:	2258      	movs	r2, #88	@ 0x58
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	2000      	movs	r0, #0
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	20017ef0 	.word	0x20017ef0

0800c000 <_kill>:
 800c000:	4b02      	ldr	r3, [pc, #8]	@ (800c00c <_kill+0xc>)
 800c002:	2258      	movs	r2, #88	@ 0x58
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c00a:	4770      	bx	lr
 800c00c:	20017ef0 	.word	0x20017ef0

0800c010 <_lseek>:
 800c010:	4b02      	ldr	r3, [pc, #8]	@ (800c01c <_lseek+0xc>)
 800c012:	2258      	movs	r2, #88	@ 0x58
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c01a:	4770      	bx	lr
 800c01c:	20017ef0 	.word	0x20017ef0

0800c020 <_read>:
 800c020:	4b02      	ldr	r3, [pc, #8]	@ (800c02c <_read+0xc>)
 800c022:	2258      	movs	r2, #88	@ 0x58
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c02a:	4770      	bx	lr
 800c02c:	20017ef0 	.word	0x20017ef0

0800c030 <_write>:
 800c030:	4b02      	ldr	r3, [pc, #8]	@ (800c03c <_write+0xc>)
 800c032:	2258      	movs	r2, #88	@ 0x58
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c03a:	4770      	bx	lr
 800c03c:	20017ef0 	.word	0x20017ef0

0800c040 <_exit>:
 800c040:	e7fe      	b.n	800c040 <_exit>
	...

0800c044 <_init>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	bf00      	nop
 800c048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c04a:	bc08      	pop	{r3}
 800c04c:	469e      	mov	lr, r3
 800c04e:	4770      	bx	lr

0800c050 <_fini>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	bf00      	nop
 800c054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c056:	bc08      	pop	{r3}
 800c058:	469e      	mov	lr, r3
 800c05a:	4770      	bx	lr
