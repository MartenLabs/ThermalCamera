
MainProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001058c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0008fc48  080107a0  080107a0  000207a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a03e8  080a03e8  000c70fc  2**0
                  CONTENTS
  4 .ARM          00000008  080a03e8  080a03e8  000b03e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a03f0  080a03f0  000c70fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a03f0  080a03f0  000b03f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080a03f4  080a03f4  000b03f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000070fc  20000000  080a03f8  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fefc  20007100  080a74f4  000c7100  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20016ffc  080a74f4  000d6ffc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000c70fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000c712a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158c6  00000000  00000000  000c71bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9d  00000000  00000000  000dca83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  000dfa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5f  00000000  00000000  000e07c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9f2  00000000  00000000  000e1227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169a1  00000000  00000000  0010bc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102d7b  00000000  00000000  001225ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004908  00000000  00000000  00225338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00229c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20007100 	.word	0x20007100
 800021c:	00000000 	.word	0x00000000
 8000220:	08010774 	.word	0x08010774

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20007104 	.word	0x20007104
 800023c:	08010774 	.word	0x08010774

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData);
 80005f8:	79f8      	ldrb	r0, [r7, #7]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000600:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000604:	f003 f8e2 	bl	80037cc <MLX90640_I2CRead>
 8000608:	4603      	mov	r3, r0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <MLX90640_GetFrameData>:

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	6039      	str	r1, [r7, #0]
 800061c:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	82fb      	strh	r3, [r7, #22]
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
    uint8_t cnt = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]
    
    dataReady = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	82fb      	strh	r3, [r7, #22]
    while(dataReady == 0)
 800062e:	e011      	b.n	8000654 <MLX90640_GetFrameData+0x42>
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	79f8      	ldrb	r0, [r7, #7]
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	f003 f8c6 	bl	80037cc <MLX90640_I2CRead>
 8000640:	6138      	str	r0, [r7, #16]
        if(error != 0)
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MLX90640_GetFrameData+0x3a>
        {
            return error;
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	e063      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }    
        dataReady = statusRegister & 0x0008;
 800064c:	89bb      	ldrh	r3, [r7, #12]
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	82fb      	strh	r3, [r7, #22]
    while(dataReady == 0)
 8000654:	8afb      	ldrh	r3, [r7, #22]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0ea      	beq.n	8000630 <MLX90640_GetFrameData+0x1e>
    }       
        
    while(dataReady != 0 && cnt < 5)
 800065a:	e030      	b.n	80006be <MLX90640_GetFrameData+0xac>
    { 
        error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000664:	4618      	mov	r0, r3
 8000666:	f003 f901 	bl	800386c <MLX90640_I2CWrite>
 800066a:	6138      	str	r0, [r7, #16]
        if(error == -1)
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000672:	d101      	bne.n	8000678 <MLX90640_GetFrameData+0x66>
        {
            return error;
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	e04d      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }
            
        error = MLX90640_I2CRead(slaveAddr, 0x0400, 832, frameData); 
 8000678:	79f8      	ldrb	r0, [r7, #7]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	f003 f8a2 	bl	80037cc <MLX90640_I2CRead>
 8000688:	6138      	str	r0, [r7, #16]
        if(error != 0)
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MLX90640_GetFrameData+0x82>
        {
            return error;
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	e03f      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }
                   
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	79f8      	ldrb	r0, [r7, #7]
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a0:	f003 f894 	bl	80037cc <MLX90640_I2CRead>
 80006a4:	6138      	str	r0, [r7, #16]
        if(error != 0)
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MLX90640_GetFrameData+0x9e>
        {
            return error;
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	e031      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }    
        dataReady = statusRegister & 0x0008;
 80006b0:	89bb      	ldrh	r3, [r7, #12]
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	82fb      	strh	r3, [r7, #22]
        cnt = cnt + 1;
 80006b8:	7d7b      	ldrb	r3, [r7, #21]
 80006ba:	3301      	adds	r3, #1
 80006bc:	757b      	strb	r3, [r7, #21]
    while(dataReady != 0 && cnt < 5)
 80006be:	8afb      	ldrh	r3, [r7, #22]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <MLX90640_GetFrameData+0xb8>
 80006c4:	7d7b      	ldrb	r3, [r7, #21]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d9c8      	bls.n	800065c <MLX90640_GetFrameData+0x4a>
    }
    
    if(cnt > 4)
 80006ca:	7d7b      	ldrb	r3, [r7, #21]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d902      	bls.n	80006d6 <MLX90640_GetFrameData+0xc4>
    {
        return -8;
 80006d0:	f06f 0307 	mvn.w	r3, #7
 80006d4:	e01e      	b.n	8000714 <MLX90640_GetFrameData+0x102>
    }    
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80006d6:	f107 030e 	add.w	r3, r7, #14
 80006da:	79f8      	ldrb	r0, [r7, #7]
 80006dc:	2201      	movs	r2, #1
 80006de:	f248 010d 	movw	r1, #32781	; 0x800d
 80006e2:	f003 f873 	bl	80037cc <MLX90640_I2CRead>
 80006e6:	6138      	str	r0, [r7, #16]
    frameData[832] = controlRegister1;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	801a      	strh	r2, [r3, #0]
    frameData[833] = statusRegister & 0x0001;
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f203 6382 	addw	r3, r3, #1666	; 0x682
 80006fa:	f002 0201 	and.w	r2, r2, #1
 80006fe:	b292      	uxth	r2, r2
 8000700:	801a      	strh	r2, [r3, #0]
    
    if(error != 0)
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MLX90640_GetFrameData+0xfa>
    {
        return error;
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	e003      	b.n	8000714 <MLX90640_GetFrameData+0x102>
    }
    
    return frameData[833];    
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8000712:	881b      	ldrh	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 800072a:	6839      	ldr	r1, [r7, #0]
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f001 f8ab 	bl	8001888 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f001 f8df 	bl	80018f8 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 800073a:	6839      	ldr	r1, [r7, #0]
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f001 f95f 	bl	8001a00 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8000742:	6839      	ldr	r1, [r7, #0]
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f001 f96d 	bl	8001a24 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 800074a:	6839      	ldr	r1, [r7, #0]
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f001 f9a1 	bl	8001a94 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8000752:	6839      	ldr	r1, [r7, #0]
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f001 f9b5 	bl	8001ac4 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 800075a:	6839      	ldr	r1, [r7, #0]
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f001 f9e9 	bl	8001b34 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8000762:	6839      	ldr	r1, [r7, #0]
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f002 fc7f 	bl	8003068 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 800076a:	6839      	ldr	r1, [r7, #0]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f001 fac7 	bl	8001d00 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f001 fe21 	bl	80023bc <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 800077a:	6839      	ldr	r1, [r7, #0]
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f002 f857 	bl	8002830 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8000782:	6839      	ldr	r1, [r7, #0]
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f002 fa87 	bl	8002c98 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f002 fdaf 	bl	80032f0 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8000792:	6839      	ldr	r1, [r7, #0]
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f002 fe4b 	bl	8003430 <ExtractDeviatingPixels>
 800079a:	60f8      	str	r0, [r7, #12]
    
    return error;
 800079c:	68fb      	ldr	r3, [r7, #12]

}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	460a      	mov	r2, r1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	4613      	mov	r3, r2
 80007b4:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	01db      	lsls	r3, r3, #7
 80007ba:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80007be:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80007c0:	f107 030e 	add.w	r3, r7, #14
 80007c4:	79f8      	ldrb	r0, [r7, #7]
 80007c6:	2201      	movs	r2, #1
 80007c8:	f248 010d 	movw	r1, #32781	; 0x800d
 80007cc:	f002 fffe 	bl	80037cc <MLX90640_I2CRead>
 80007d0:	6178      	str	r0, [r7, #20]
    if(error == 0)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d110      	bne.n	80007fa <MLX90640_SetRefreshRate+0x54>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 80007d8:	89fb      	ldrh	r3, [r7, #14]
 80007da:	461a      	mov	r2, r3
 80007dc:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80007e0:	4013      	ands	r3, r2
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f248 010d 	movw	r1, #32781	; 0x800d
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 f83a 	bl	800386c <MLX90640_I2CWrite>
 80007f8:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 80007fa:	697b      	ldr	r3, [r7, #20]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 800080e:	f107 030e 	add.w	r3, r7, #14
 8000812:	79f8      	ldrb	r0, [r7, #7]
 8000814:	2201      	movs	r2, #1
 8000816:	f248 010d 	movw	r1, #32781	; 0x800d
 800081a:	f002 ffd7 	bl	80037cc <MLX90640_I2CRead>
 800081e:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10d      	bne.n	8000842 <MLX90640_SetChessMode+0x3e>
    {
        value = (controlRegister1 | 0x1000);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	b29b      	uxth	r3, r3
 800082e:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);        
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	b29a      	uxth	r2, r3
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f248 010d 	movw	r1, #32781	; 0x800d
 800083a:	4618      	mov	r0, r3
 800083c:	f003 f816 	bl	800386c <MLX90640_I2CWrite>
 8000840:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000842:	697b      	ldr	r3, [r7, #20]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0000      	movs	r0, r0
	...

08000850 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b0a0      	sub	sp, #128	; 0x80
 8000854:	af00      	add	r7, sp, #0
 8000856:	6178      	str	r0, [r7, #20]
 8000858:	6139      	str	r1, [r7, #16]
 800085a:	ed87 0a03 	vstr	s0, [r7, #12]
 800085e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 800086a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    vdd = MLX90640_GetVdd(frameData, params);
 800086e:	6939      	ldr	r1, [r7, #16]
 8000870:	6978      	ldr	r0, [r7, #20]
 8000872:	f000 fc2d 	bl	80010d0 <MLX90640_GetVdd>
 8000876:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ta = MLX90640_GetTa(frameData, params);
 800087a:	6939      	ldr	r1, [r7, #16]
 800087c:	6978      	ldr	r0, [r7, #20]
 800087e:	f000 fca1 	bl	80011c4 <MLX90640_GetTa>
 8000882:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    
    ta4 = (ta + 273.15f);
 8000886:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800088a:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8000bd8 <MLX90640_CalculateTo+0x388>
 800088e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000892:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 8000896:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800089a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800089e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 80008a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80008a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008aa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    tr4 = (tr + 273.15f);
 80008ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80008b2:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8000bd8 <MLX90640_CalculateTo+0x388>
 80008b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008ba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 80008be:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80008c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008c6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 80008ca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80008ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    taTr = tr4 - (tr4-ta4)/emissivity;
 80008d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80008da:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80008de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80008e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80008e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80008ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    
    ktaScale = pow(2,(double)params->ktaScale);
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 80008fc:	ee07 3a90 	vmov	s15, r3
 8000900:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000904:	eeb0 1b47 	vmov.f64	d1, d7
 8000908:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800090c:	f00f fc00 	bl	8010110 <pow>
 8000910:	eeb0 7b40 	vmov.f64	d7, d0
 8000914:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000918:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    kvScale = pow(2,(double)params->kvScale);
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000922:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800092e:	eeb0 1b47 	vmov.f64	d1, d7
 8000932:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000936:	f00f fbeb 	bl	8010110 <pow>
 800093a:	eeb0 7b40 	vmov.f64	d7, d0
 800093e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000942:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    alphaScale = pow(2,(double)params->alphaScale);
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800094c:	ee07 3a90 	vmov	s15, r3
 8000950:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000954:	eeb0 1b47 	vmov.f64	d1, d7
 8000958:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800095c:	f00f fbd8 	bl	8010110 <pow>
 8000960:	eeb0 7b40 	vmov.f64	d7, d0
 8000964:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000968:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000972:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000bc4 <MLX90640_CalculateTo+0x374>
 8000976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800097a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800097e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800098a:	edc7 7a06 	vstr	s15, [r7, #24]
    alphaCorrR[1] = 1 ;
 800098e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000992:	61fb      	str	r3, [r7, #28]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009b4:	edc7 7a08 	vstr	s15, [r7, #32]
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 80009b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80009c8:	461a      	mov	r2, r3
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	ee07 3a90 	vmov	s15, r3
 80009d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80009e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- Gain calculation -----------------------------------    
    gain = frameData[778];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f203 6314 	addw	r3, r3, #1556	; 0x614
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	ee07 3a90 	vmov	s15, r3
 80009fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009fe:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    if(gain > 32767)
 8000a02:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000a06:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8000bc8 <MLX90640_CalculateTo+0x378>
 8000a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a12:	dd07      	ble.n	8000a24 <MLX90640_CalculateTo+0x1d4>
    {
        gain = gain - 65536;
 8000a14:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000a18:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000bcc <MLX90640_CalculateTo+0x37c>
 8000a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a20:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    }
    
    gain = params->gainEE / gain; 
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a32:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8000a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a3a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & 0x1000) >> 5;
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	115b      	asrs	r3, r3, #5
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    irDataCP[0] = frameData[776];  
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    irDataCP[1] = frameData[808];
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	ee07 3a90 	vmov	s15, r3
 8000a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for( int i = 0; i < 2; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8000a7e:	e034      	b.n	8000aea <MLX90640_CalculateTo+0x29a>
    {
        if(irDataCP[i] > 32767)
 8000a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	3380      	adds	r3, #128	; 0x80
 8000a86:	443b      	add	r3, r7
 8000a88:	3b58      	subs	r3, #88	; 0x58
 8000a8a:	edd3 7a00 	vldr	s15, [r3]
 8000a8e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000bc8 <MLX90640_CalculateTo+0x378>
 8000a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	dd11      	ble.n	8000ac0 <MLX90640_CalculateTo+0x270>
        {
            irDataCP[i] = irDataCP[i] - 65536;
 8000a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	3380      	adds	r3, #128	; 0x80
 8000aa2:	443b      	add	r3, r7
 8000aa4:	3b58      	subs	r3, #88	; 0x58
 8000aa6:	edd3 7a00 	vldr	s15, [r3]
 8000aaa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000bcc <MLX90640_CalculateTo+0x37c>
 8000aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	3380      	adds	r3, #128	; 0x80
 8000ab8:	443b      	add	r3, r7
 8000aba:	3b58      	subs	r3, #88	; 0x58
 8000abc:	edc3 7a00 	vstr	s15, [r3]
        }
        irDataCP[i] = irDataCP[i] * gain;
 8000ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	3380      	adds	r3, #128	; 0x80
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3b58      	subs	r3, #88	; 0x58
 8000aca:	ed93 7a00 	vldr	s14, [r3]
 8000ace:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	3380      	adds	r3, #128	; 0x80
 8000adc:	443b      	add	r3, r7
 8000ade:	3b58      	subs	r3, #88	; 0x58
 8000ae0:	edc3 7a00 	vstr	s15, [r3]
    for( int i = 0; i < 2; i++)
 8000ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	673b      	str	r3, [r7, #112]	; 0x70
 8000aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	ddc7      	ble.n	8000a80 <MLX90640_CalculateTo+0x230>
    }
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000af0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000afa:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	ed93 6a08 	vldr	s12, [r3, #32]
 8000b0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b10:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000b14:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000b18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000b1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000b20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	ed93 6a07 	vldr	s12, [r3, #28]
 8000b2e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000b32:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000b36:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000b3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000b3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000b42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if( mode ==  params->calibrationModeEE)
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b58:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d13d      	bne.n	8000bdc <MLX90640_CalculateTo+0x38c>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000b60:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b6a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	ed93 6a08 	vldr	s12, [r3, #32]
 8000b7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b80:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000b84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000b88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000b8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000b90:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	ed93 6a07 	vldr	s12, [r3, #28]
 8000b9e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000ba2:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000ba6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000baa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000bae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000bb2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8000bc2:	e043      	b.n	8000c4c <MLX90640_CalculateTo+0x3fc>
 8000bc4:	42200000 	.word	0x42200000
 8000bc8:	46fffe00 	.word	0x46fffe00
 8000bcc:	47800000 	.word	0x47800000
 8000bd0:	40533333 	.word	0x40533333
 8000bd4:	358637bd 	.word	0x358637bd
 8000bd8:	43889333 	.word	0x43889333
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000bdc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000be6:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf8:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8000bfc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	ed93 6a08 	vldr	s12, [r3, #32]
 8000c06:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000c0a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000c0e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	ed93 6a07 	vldr	s12, [r3, #28]
 8000c28:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c2c:	ed5f 5a18 	vldr	s11, [pc, #-96]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000c30:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c3c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c50:	e230      	b.n	80010b4 <MLX90640_CalculateTo+0x864>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8000c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da00      	bge.n	8000c5a <MLX90640_CalculateTo+0x40a>
 8000c58:	331f      	adds	r3, #31
 8000c5a:	115b      	asrs	r3, r3, #5
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da00      	bge.n	8000c66 <MLX90640_CalculateTo+0x416>
 8000c64:	333f      	adds	r3, #63	; 0x3f
 8000c66:	119b      	asrs	r3, r3, #6
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8000c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	bfb8      	it	lt
 8000c80:	425b      	neglt	r3, r3
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c88:	4053      	eors	r3, r2
 8000c8a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c90:	3302      	adds	r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da00      	bge.n	8000c98 <MLX90640_CalculateTo+0x448>
 8000c96:	3303      	adds	r3, #3
 8000c98:	109b      	asrs	r3, r3, #2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	da00      	bge.n	8000ca6 <MLX90640_CalculateTo+0x456>
 8000ca4:	3303      	adds	r3, #3
 8000ca6:	109b      	asrs	r3, r3, #2
 8000ca8:	425b      	negs	r3, r3
 8000caa:	441a      	add	r2, r3
 8000cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cae:	3301      	adds	r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da00      	bge.n	8000cb6 <MLX90640_CalculateTo+0x466>
 8000cb4:	3303      	adds	r3, #3
 8000cb6:	109b      	asrs	r3, r3, #2
 8000cb8:	441a      	add	r2, r3
 8000cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da00      	bge.n	8000cc2 <MLX90640_CalculateTo+0x472>
 8000cc0:	3303      	adds	r3, #3
 8000cc2:	109b      	asrs	r3, r3, #2
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	f1c3 0301 	rsb	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	fb12 f303 	smulbb	r3, r2, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        
        if(mode == 0)
 8000ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <MLX90640_CalculateTo+0x4a2>
        {
          pattern = ilPattern; 
 8000ce8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000cec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000cf0:	e003      	b.n	8000cfa <MLX90640_CalculateTo+0x4aa>
        }
        else 
        {
          pattern = chessPattern; 
 8000cf2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000cf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }               
        
        if(pattern == frameData[833])
 8000cfa:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8000d04:	8812      	ldrh	r2, [r2, #0]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	f040 81d1 	bne.w	80010ae <MLX90640_CalculateTo+0x85e>
        {    
            irData = frameData[pixelNumber];
 8000d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	4413      	add	r3, r2
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d1e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            if(irData > 32767)
 8000d22:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000d26:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8000bc8 <MLX90640_CalculateTo+0x378>
 8000d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	dd07      	ble.n	8000d44 <MLX90640_CalculateTo+0x4f4>
            {
                irData = irData - 65536;
 8000d34:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000d38:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 8000bcc <MLX90640_CalculateTo+0x37c>
 8000d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d40:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }
            irData = irData * gain;
 8000d44:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000d48:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            kta = params->kta[pixelNumber]/ktaScale;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d58:	4413      	add	r3, r2
 8000d5a:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8000d5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            kv = params->kv[pixelNumber]/kvScale;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8000d80:	f993 3000 	ldrsb.w	r3, [r3]
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d8c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d9c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000db4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000db8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000dbc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000dd4:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000dd8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000ddc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            if(mode !=  params->calibrationModeEE)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e02:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d023      	beq.n	8000e52 <MLX90640_CalculateTo+0x602>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e10:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8000e14:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e28:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e36:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8000e3a:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e58:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	443b      	add	r3, r7
 8000e62:	3b58      	subs	r3, #88	; 0x58
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e74:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            irData = irData / emissivity;
 8000e78:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e84:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000e88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000e8c:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 8000bd4 <MLX90640_CalculateTo+0x384>
 8000e90:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e98:	3324      	adds	r3, #36	; 0x24
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	885b      	ldrh	r3, [r3, #2]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000eb6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000eba:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000ebe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ece:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000eda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ede:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ee2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000eee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ef6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f02:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 8000f06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0e:	eeb0 0b47 	vmov.f64	d0, d7
 8000f12:	f00f f839 	bl	800ff88 <sqrt>
 8000f16:	eeb0 7b40 	vmov.f64	d7, d0
 8000f1a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f1e:	f00f f833 	bl	800ff88 <sqrt>
 8000f22:	eeb0 6b40 	vmov.f64	d6, d0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f42:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8000bd8 <MLX90640_CalculateTo+0x388>
 8000f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f52:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f76:	eeb0 0b47 	vmov.f64	d0, d7
 8000f7a:	f00f f805 	bl	800ff88 <sqrt>
 8000f7e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f82:	eeb0 0b47 	vmov.f64	d0, d7
 8000f86:	f00e ffff 	bl	800ff88 <sqrt>
 8000f8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80010c8 <MLX90640_CalculateTo+0x878>
 8000f92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f9a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    
            if(To < params->ct[1])
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000fa4:	ee07 3a90 	vmov	s15, r3
 8000fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	d503      	bpl.n	8000fc2 <MLX90640_CalculateTo+0x772>
            {
                range = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000fc0:	e026      	b.n	8001010 <MLX90640_CalculateTo+0x7c0>
            }
            else if(To < params->ct[2])   
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fdc:	d503      	bpl.n	8000fe6 <MLX90640_CalculateTo+0x796>
            {
                range = 1;            
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000fe4:	e014      	b.n	8001010 <MLX90640_CalculateTo+0x7c0>
            }   
            else if(To < params->ct[3])
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	d503      	bpl.n	800100a <MLX90640_CalculateTo+0x7ba>
            {
                range = 2;            
 8001002:	2302      	movs	r3, #2
 8001004:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001008:	e002      	b.n	8001010 <MLX90640_CalculateTo+0x7c0>
            }
            else
            {
                range = 3;            
 800100a:	2303      	movs	r3, #3
 800100c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            }      
            
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8001010:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	3380      	adds	r3, #128	; 0x80
 8001018:	443b      	add	r3, r7
 800101a:	3b68      	subs	r3, #104	; 0x68
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001028:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	330a      	adds	r3, #10
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3304      	adds	r3, #4
 8001036:	edd3 6a00 	vldr	s13, [r3]
 800103a:	f997 2076 	ldrsb.w	r2, [r7, #118]	; 0x76
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3220      	adds	r2, #32
 8001042:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104e:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8001052:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800105e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800106a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800106e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107a:	eeb0 0b47 	vmov.f64	d0, d7
 800107e:	f00e ff83 	bl	800ff88 <sqrt>
 8001082:	eeb0 7b40 	vmov.f64	d7, d0
 8001086:	eeb0 0b47 	vmov.f64	d0, d7
 800108a:	f00e ff7d 	bl	800ff88 <sqrt>
 800108e:	eeb0 7b40 	vmov.f64	d7, d0
 8001092:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80010c8 <MLX90640_CalculateTo+0x878>
 8001096:	ee37 7b46 	vsub.f64	d7, d7, d6
 800109a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                        
            result[pixelNumber] = To;
 80010a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ac:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 80010ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010b0:	3301      	adds	r3, #1
 80010b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010ba:	f6ff adca 	blt.w	8000c52 <MLX90640_CalculateTo+0x402>
        }
    }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3780      	adds	r7, #128	; 0x80
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	60000000 	.word	0x60000000
 80010cc:	40711266 	.word	0x40711266

080010d0 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	ed2d 8b02 	vpush	{d8}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ee:	edc7 7a05 	vstr	s15, [r7, #20]
    if(vdd > 32767)
 80010f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80011b8 <MLX90640_GetVdd+0xe8>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	dd07      	ble.n	8001114 <MLX90640_GetVdd+0x44>
    {
        vdd = vdd - 65536;
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80011bc <MLX90640_GetVdd+0xec>
 800110c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001110:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	129b      	asrs	r3, r3, #10
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	613b      	str	r3, [r7, #16]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001132:	eeb0 1b47 	vmov.f64	d1, d7
 8001136:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800113a:	f00e ffe9 	bl	8010110 <pow>
 800113e:	eeb0 8b40 	vmov.f64	d8, d0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114c:	eeb0 1b47 	vmov.f64	d1, d7
 8001150:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001154:	f00e ffdc 	bl	8010110 <pow>
 8001158:	eeb0 6b40 	vmov.f64	d6, d0
 800115c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001160:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001164:	edc7 7a03 	vstr	s15, [r7, #12]
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 8001168:	ed97 7a03 	vldr	s14, [r7, #12]
 800116c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011c0 <MLX90640_GetVdd+0xf0>
 800119c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011a0:	edc7 7a05 	vstr	s15, [r7, #20]
    
    return vdd;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	ecbd 8b02 	vpop	{d8}
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	46fffe00 	.word	0x46fffe00
 80011bc:	47800000 	.word	0x47800000
 80011c0:	40533333 	.word	0x40533333

080011c4 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 80011ce:	6839      	ldr	r1, [r7, #0]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff7d 	bl	80010d0 <MLX90640_GetVdd>
 80011d6:	ed87 0a03 	vstr	s0, [r7, #12]
    
    ptat = frameData[800];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ea:	edc7 7a05 	vstr	s15, [r7, #20]
    if(ptat > 32767)
 80011ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80012d4 <MLX90640_GetTa+0x110>
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dd07      	ble.n	8001210 <MLX90640_GetTa+0x4c>
    {
        ptat = ptat - 65536;
 8001200:	edd7 7a05 	vldr	s15, [r7, #20]
 8001204:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80012d8 <MLX90640_GetTa+0x114>
 8001208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800120c:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    ptatArt = frameData[768];
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001220:	edc7 7a04 	vstr	s15, [r7, #16]
    if(ptatArt > 32767)
 8001224:	edd7 7a04 	vldr	s15, [r7, #16]
 8001228:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012d4 <MLX90640_GetTa+0x110>
 800122c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	dd07      	ble.n	8001246 <MLX90640_GetTa+0x82>
    {
        ptatArt = ptatArt - 65536;
 8001236:	edd7 7a04 	vldr	s15, [r7, #16]
 800123a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80012d8 <MLX90640_GetTa+0x114>
 800123e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001242:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	ed93 7a04 	vldr	s14, [r3, #16]
 800124c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001254:	edd7 7a04 	vldr	s15, [r7, #16]
 8001258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800125c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001264:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80012dc <MLX90640_GetTa+0x118>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a04 	vstr	s15, [r7, #16]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	ed93 7a01 	vldr	s14, [r3, #4]
 8001276:	edd7 7a03 	vldr	s15, [r7, #12]
 800127a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80012e0 <MLX90640_GetTa+0x11c>
 800127e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800128a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800128e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	899b      	ldrh	r3, [r3, #12]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80012b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80012bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012c0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	ee07 3a90 	vmov	s15, r3
}
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	46fffe00 	.word	0x46fffe00
 80012d8:	47800000 	.word	0x47800000
 80012dc:	48800000 	.word	0x48800000
 80012e0:	40533333 	.word	0x40533333

080012e4 <MLX90640_BadPixelsCorrection>:

}    

//------------------------------------------------------------------------------
void MLX90640_BadPixelsCorrection(uint16_t *pixels, float *to, int mode, paramsMLX90640 *params)
{   
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b08b      	sub	sp, #44	; 0x2c
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
    float ap[4];
    uint8_t pix;
    uint8_t line;
    uint8_t column;
    
    pix = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 80012f8:	e2b4      	b.n	8001864 <MLX90640_BadPixelsCorrection+0x580>
    {
        line = pixels[pix]>>5;
 80012fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	b29b      	uxth	r3, r3
 800130a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        column = pixels[pix] - (line<<5);
 800130e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	b2db      	uxtb	r3, r3
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        
        if(mode == 1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b01      	cmp	r3, #1
 800132e:	f040 8152 	bne.w	80015d6 <MLX90640_BadPixelsCorrection+0x2f2>
        {        
            if(line == 0)
 8001332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001336:	2b00      	cmp	r3, #0
 8001338:	d14d      	bne.n	80013d6 <MLX90640_BadPixelsCorrection+0xf2>
            {
                if(column == 0)
 800133a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <MLX90640_BadPixelsCorrection+0x7a>
                {        
                    to[pixels[pix]] = to[33];                    
 8001342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e27d      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                }
                else if(column == 31)
 800135e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001362:	2b1f      	cmp	r3, #31
 8001364:	d10d      	bne.n	8001382 <MLX90640_BadPixelsCorrection+0x9e>
                {
                    to[pixels[pix]] = to[62];                      
 8001366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	4413      	add	r3, r2
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e26b      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]+31] + to[pixels[pix]+33])/2.0f;                    
 8001382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	331f      	adds	r3, #31
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	ed93 7a00 	vldr	s14, [r3]
 800139a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	3321      	adds	r3, #33	; 0x21
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d0:	edc3 7a00 	vstr	s15, [r3]
 80013d4:	e241      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                }        
            }
            else if(line == 23)
 80013d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013da:	2b17      	cmp	r3, #23
 80013dc:	d153      	bne.n	8001486 <MLX90640_BadPixelsCorrection+0x1a2>
            {
                if(column == 0)
 80013de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10e      	bne.n	8001404 <MLX90640_BadPixelsCorrection+0x120>
                {
                    to[pixels[pix]] = to[705];                    
 80013e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	f602 3204 	addw	r2, r2, #2820	; 0xb04
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e22a      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                }
                else if(column == 31)
 8001404:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001408:	2b1f      	cmp	r3, #31
 800140a:	d10e      	bne.n	800142a <MLX90640_BadPixelsCorrection+0x146>
                {
                    to[pixels[pix]] = to[734];                       
 800140c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	4413      	add	r3, r2
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f602 3278 	addw	r2, r2, #2936	; 0xb78
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e217      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]-31])/2.0f;                       
 800142a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b9d      	ldr	r3, [pc, #628]	; (80016b0 <MLX90640_BadPixelsCorrection+0x3cc>)
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	4413      	add	r3, r2
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	4b97      	ldr	r3, [pc, #604]	; (80016b4 <MLX90640_BadPixelsCorrection+0x3d0>)
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	4413      	add	r3, r2
 8001478:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001480:	edc3 7a00 	vstr	s15, [r3]
 8001484:	e1e9      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                }                       
            } 
            else if(column == 0)
 8001486:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800148a:	2b00      	cmp	r3, #0
 800148c:	d12b      	bne.n	80014e6 <MLX90640_BadPixelsCorrection+0x202>
            {
                to[pixels[pix]] = (to[pixels[pix]-31] + to[pixels[pix]+33])/2.0f;                
 800148e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <MLX90640_BadPixelsCorrection+0x3d0>)
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	3321      	adds	r3, #33	; 0x21
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	4413      	add	r3, r2
 80014d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	edc3 7a00 	vstr	s15, [r3]
 80014e4:	e1b9      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
            }
            else if(column == 31)
 80014e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d12b      	bne.n	8001546 <MLX90640_BadPixelsCorrection+0x262>
            {
                to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]+31])/2.0f;                
 80014ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <MLX90640_BadPixelsCorrection+0x3cc>)
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	331f      	adds	r3, #31
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	4413      	add	r3, r2
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	4413      	add	r3, r2
 8001538:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800153c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001540:	edc3 7a00 	vstr	s15, [r3]
 8001544:	e189      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
            } 
            else
            {
                ap[0] = to[pixels[pix]-33];
 8001546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <MLX90640_BadPixelsCorrection+0x3cc>)
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	617b      	str	r3, [r7, #20]
                ap[1] = to[pixels[pix]-31];
 8001562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <MLX90640_BadPixelsCorrection+0x3d0>)
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
                ap[2] = to[pixels[pix]+31];
 800157e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	331f      	adds	r3, #31
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61fb      	str	r3, [r7, #28]
                ap[3] = to[pixels[pix]+33];
 8001596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	3321      	adds	r3, #33	; 0x21
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	623b      	str	r3, [r7, #32]
                to[pixels[pix]] = GetMedian(ap,4);
 80015ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	18d4      	adds	r4, r2, r3
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2104      	movs	r1, #4
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 f85e 	bl	8003688 <GetMedian>
 80015cc:	eef0 7a40 	vmov.f32	s15, s0
 80015d0:	edc4 7a00 	vstr	s15, [r4]
 80015d4:	e141      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
            }                   
        }
        else
        {        
            if(column == 0)
 80015d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d115      	bne.n	800160a <MLX90640_BadPixelsCorrection+0x326>
            {
                to[pixels[pix]] = to[pixels[pix]+1];            
 80015de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	441a      	add	r2, r3
 80015f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	68f9      	ldr	r1, [r7, #12]
 80015fa:	440b      	add	r3, r1
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	440b      	add	r3, r1
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e127      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
            }
            else if(column == 1 || column == 30)
 800160a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800160e:	2b01      	cmp	r3, #1
 8001610:	d003      	beq.n	800161a <MLX90640_BadPixelsCorrection+0x336>
 8001612:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001616:	2b1e      	cmp	r3, #30
 8001618:	d12c      	bne.n	8001674 <MLX90640_BadPixelsCorrection+0x390>
            {
                to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0f;                
 800161a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	4413      	add	r3, r2
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	4413      	add	r3, r2
 8001666:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800166a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166e:	edc3 7a00 	vstr	s15, [r3]
 8001672:	e0f2      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
            } 
            else if(column == 31)
 8001674:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001678:	2b1f      	cmp	r3, #31
 800167a:	d11d      	bne.n	80016b8 <MLX90640_BadPixelsCorrection+0x3d4>
            {
                to[pixels[pix]] = to[pixels[pix]-1];
 800167c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4413      	add	r3, r2
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	441a      	add	r2, r3
 8001696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	440b      	add	r3, r1
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	440b      	add	r3, r1
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e0d5      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
 80016ae:	bf00      	nop
 80016b0:	3fffffdf 	.word	0x3fffffdf
 80016b4:	3fffffe1 	.word	0x3fffffe1
            } 
            else
            {
                if(IsPixelBad(pixels[pix]-2,params) == 0 && IsPixelBad(pixels[pix]+2,params) == 0)
 80016b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	3b02      	subs	r3, #2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	6839      	ldr	r1, [r7, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 f853 	bl	8003776 <IsPixelBad>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8095 	bne.w	8001802 <MLX90640_BadPixelsCorrection+0x51e>
 80016d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	3302      	adds	r3, #2
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 f843 	bl	8003776 <IsPixelBad>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 8085 	bne.w	8001802 <MLX90640_BadPixelsCorrection+0x51e>
                {
                    ap[0] = to[pixels[pix]+1] - to[pixels[pix]+2];
 80016f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	4413      	add	r3, r2
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	3302      	adds	r3, #2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	edc7 7a05 	vstr	s15, [r7, #20]
                    ap[1] = to[pixels[pix]-1] - to[pixels[pix]-2];
 8001730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b49      	ldr	r3, [pc, #292]	; (8001884 <MLX90640_BadPixelsCorrection+0x5a0>)
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	4413      	add	r3, r2
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176e:	edc7 7a06 	vstr	s15, [r7, #24]
                    if(fabs(ap[0]) > fabs(ap[1]))
 8001772:	edd7 7a05 	vldr	s15, [r7, #20]
 8001776:	eeb0 7ae7 	vabs.f32	s14, s15
 800177a:	edd7 7a06 	vldr	s15, [r7, #24]
 800177e:	eef0 7ae7 	vabs.f32	s15, s15
 8001782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	dd1e      	ble.n	80017ca <MLX90640_BadPixelsCorrection+0x4e6>
                    {
                        to[pixels[pix]] = to[pixels[pix]-1] + ap[1];                        
 800178c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 80017c8:	e047      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                    }
                    else
                    {
                        to[pixels[pix]] = to[pixels[pix]+1] + ap[0];                        
 80017ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	ed93 7a00 	vldr	s14, [r3]
 80017e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	4413      	add	r3, r2
 80017f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fc:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 8001800:	e02b      	b.n	800185a <MLX90640_BadPixelsCorrection+0x576>
                    }
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0f;                    
 8001802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4413      	add	r3, r2
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4413      	add	r3, r2
 800184e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001856:	edc3 7a00 	vstr	s15, [r3]
                }            
            }                      
        } 
        pix = pix + 1;    
 800185a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185e:	3301      	adds	r3, #1
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 8001864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001874:	4293      	cmp	r3, r2
 8001876:	f47f ad40 	bne.w	80012fa <MLX90640_BadPixelsCorrection+0x16>
    }    
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	372c      	adds	r7, #44	; 0x2c
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}
 8001884:	3ffffffe 	.word	0x3ffffffe

08001888 <ExtractVDDParameters>:

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3366      	adds	r3, #102	; 0x66
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3366      	adds	r3, #102	; 0x66
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 80018a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018aa:	2b7f      	cmp	r3, #127	; 0x7f
 80018ac:	dd04      	ble.n	80018b8 <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	b29b      	uxth	r3, r3
 80018be:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3366      	adds	r3, #102	; 0x66
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 80018cc:	89bb      	ldrh	r3, [r7, #12]
 80018ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80018dc:	b29b      	uxth	r3, r3
 80018de:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	89fa      	ldrh	r2, [r7, #14]
 80018e4:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	89ba      	ldrh	r2, [r7, #12]
 80018ea:	805a      	strh	r2, [r3, #2]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3364      	adds	r3, #100	; 0x64
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	0a9b      	lsrs	r3, r3, #10
 800190a:	b29b      	uxth	r3, r3
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001914:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8001918:	edd7 7a05 	vldr	s15, [r7, #20]
 800191c:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	dd07      	ble.n	800193a <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 800192a:	edd7 7a05 	vldr	s15, [r7, #20]
 800192e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80019f0 <ExtractPTATParameters+0xf8>
 8001932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001936:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 800193a:	ed97 7a05 	vldr	s14, [r7, #20]
 800193e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80019f4 <ExtractPTATParameters+0xfc>
 8001942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001946:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3364      	adds	r3, #100	; 0x64
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195c:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8001960:	edd7 7a04 	vldr	s15, [r7, #16]
 8001964:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80019f8 <ExtractPTATParameters+0x100>
 8001968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	dd07      	ble.n	8001982 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8001972:	edd7 7a04 	vldr	s15, [r7, #16]
 8001976:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80019fc <ExtractPTATParameters+0x104>
 800197a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800197e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8001982:	ed97 7a04 	vldr	s14, [r7, #16]
 8001986:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800198a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3362      	adds	r3, #98	; 0x62
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3320      	adds	r3, #32
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019ac:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80019e8 <ExtractPTATParameters+0xf0>
 80019b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019b4:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80019b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019c0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 80019d0:	89fa      	ldrh	r2, [r7, #14]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	611a      	str	r2, [r3, #16]
}
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40d00000 	.word	0x40d00000
 80019f0:	42800000 	.word	0x42800000
 80019f4:	45800000 	.word	0x45800000
 80019f8:	43ff8000 	.word	0x43ff8000
 80019fc:	44800000 	.word	0x44800000

08001a00 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3360      	adds	r3, #96	; 0x60
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	89fa      	ldrh	r2, [r7, #14]
 8001a16:	829a      	strh	r2, [r3, #20]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3378      	adds	r3, #120	; 0x78
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 8001a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a46:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a88 <ExtractTgcParameters+0x64>
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	dd07      	ble.n	8001a64 <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 8001a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001a8c <ExtractTgcParameters+0x68>
 8001a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a60:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 8001a64:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a68:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001a90 <ExtractTgcParameters+0x6c>
 8001a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a70:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	42fe0000 	.word	0x42fe0000
 8001a8c:	43800000 	.word	0x43800000
 8001a90:	42000000 	.word	0x42000000

08001a94 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3370      	adds	r3, #112	; 0x70
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	131b      	asrs	r3, r3, #12
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3378      	adds	r3, #120	; 0x78
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae0:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001b28 <ExtractKsTaParameters+0x64>
 8001aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	dd07      	ble.n	8001b06 <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 8001af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001b2c <ExtractKsTaParameters+0x68>
 8001afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b02:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 8001b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b0a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001b30 <ExtractKsTaParameters+0x6c>
 8001b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b12:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	42fe0000 	.word	0x42fe0000
 8001b2c:	43800000 	.word	0x43800000
 8001b30:	46000000 	.word	0x46000000

08001b34 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	337e      	adds	r3, #126	; 0x7e
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	131b      	asrs	r3, r3, #12
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8001b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	337e      	adds	r3, #126	; 0x7e
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	111b      	asrs	r3, r3, #4
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	337e      	adds	r3, #126	; 0x7e
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	121b      	asrs	r3, r3, #8
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	fb12 f303 	smulbb	r3, r2, r3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001bc2:	b299      	uxth	r1, r3
 8001bc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	fb11 f303 	smulbb	r3, r1, r3
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001be2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	337e      	adds	r3, #126	; 0x7e
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	3308      	adds	r3, #8
 8001bf2:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	337a      	adds	r3, #122	; 0x7a
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	337a      	adds	r3, #122	; 0x7a
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	337c      	adds	r3, #124	; 0x7c
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	337c      	adds	r3, #124	; 0x7c
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e03c      	b.n	8001cda <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	330a      	adds	r3, #10
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001cf4 <ExtractKsToParameters+0x1c0>
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	dd13      	ble.n	8001ca6 <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	330a      	adds	r3, #10
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001cf8 <ExtractKsToParameters+0x1c4>
 8001c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	330a      	adds	r3, #10
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	330a      	adds	r3, #10
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	edd3 6a00 	vldr	s13, [r3]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	330a      	adds	r3, #10
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	ddbf      	ble.n	8001c60 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <ExtractKsToParameters+0x1c8>)
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	42fe0000 	.word	0x42fe0000
 8001cf8:	43800000 	.word	0x43800000
 8001cfc:	b951b717 	.word	0xb951b717

08001d00 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	ed2d 8b02 	vpush	{d8}
 8001d06:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d10:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001d14:	6018      	str	r0, [r3, #0]
 8001d16:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d1a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001d1e:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 8001d26:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d2a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3340      	adds	r3, #64	; 0x40
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8001d3e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d42:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3340      	adds	r3, #64	; 0x40
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	111b      	asrs	r3, r3, #4
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8001d58:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d5c:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3340      	adds	r3, #64	; 0x40
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	121b      	asrs	r3, r3, #8
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8001d72:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d76:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3340      	adds	r3, #64	; 0x40
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	0b1b      	lsrs	r3, r3, #12
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	331e      	adds	r3, #30
 8001d88:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8001d8c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d90:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3342      	adds	r3, #66	; 0x42
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001da4:	e062      	b.n	8001e6c <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 8001da6:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001db0:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001db4:	3322      	adds	r3, #34	; 0x22
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001dbc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	f003 020f 	and.w	r2, r3, #15
 8001dca:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001dd4:	443b      	add	r3, r7
 8001dd6:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 8001dda:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001dde:	3322      	adds	r3, #34	; 0x22
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001de6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	111a      	asrs	r2, r3, #4
 8001df2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001df6:	3301      	adds	r3, #1
 8001df8:	f002 020f 	and.w	r2, r2, #15
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001e02:	443b      	add	r3, r7
 8001e04:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 8001e08:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001e0c:	3322      	adds	r3, #34	; 0x22
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001e14:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	121a      	asrs	r2, r3, #8
 8001e20:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001e24:	3302      	adds	r3, #2
 8001e26:	f002 020f 	and.w	r2, r2, #15
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001e30:	443b      	add	r3, r7
 8001e32:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8001e36:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001e3a:	3322      	adds	r3, #34	; 0x22
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001e42:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	0b1b      	lsrs	r3, r3, #12
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001e54:	3303      	adds	r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8001e62:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001e6c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	dd98      	ble.n	8001da6 <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8001e7a:	e020      	b.n	8001ebe <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 8001e7c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001e86:	443b      	add	r3, r7
 8001e88:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001e8c:	2b07      	cmp	r3, #7
 8001e8e:	dd11      	ble.n	8001eb4 <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8001e90:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001e9a:	443b      	add	r3, r7
 8001e9c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001ea0:	f1a3 0210 	sub.w	r2, r3, #16
 8001ea4:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001eae:	443b      	add	r3, r7
 8001eb0:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 8001eb4:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8001ebe:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001ec2:	2b17      	cmp	r3, #23
 8001ec4:	ddda      	ble.n	8001e7c <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001ecc:	e062      	b.n	8001f94 <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 8001ece:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8001ed8:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001edc:	3328      	adds	r3, #40	; 0x28
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001ee4:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	f003 010f 	and.w	r1, r3, #15
 8001ef2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001ef6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001efa:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 8001f02:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001f06:	3328      	adds	r3, #40	; 0x28
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001f0e:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	111b      	asrs	r3, r3, #4
 8001f1a:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001f1e:	3201      	adds	r2, #1
 8001f20:	f003 010f 	and.w	r1, r3, #15
 8001f24:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8001f30:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001f34:	3328      	adds	r3, #40	; 0x28
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001f3c:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	121b      	asrs	r3, r3, #8
 8001f48:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001f4c:	3202      	adds	r2, #2
 8001f4e:	f003 010f 	and.w	r1, r3, #15
 8001f52:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8001f5e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001f62:	3328      	adds	r3, #40	; 0x28
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001f6a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	0b1b      	lsrs	r3, r3, #12
 8001f76:	b299      	uxth	r1, r3
 8001f78:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001f7c:	1cda      	adds	r2, r3, #3
 8001f7e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8001f8a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001f94:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001f98:	2b07      	cmp	r3, #7
 8001f9a:	dd98      	ble.n	8001ece <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001fa2:	e020      	b.n	8001fe6 <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8001fa4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001fa8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fac:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	dd11      	ble.n	8001fdc <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8001fb8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001fbc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fc0:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	f1a3 0110 	sub.w	r1, r3, #16
 8001fcc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001fd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fd4:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001fdc:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001fe6:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001fea:	2b1f      	cmp	r3, #31
 8001fec:	ddda      	ble.n	8001fa4 <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001ff4:	e12a      	b.n	800224c <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001ffc:	e11c      	b.n	8002238 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 8001ffe:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8002008:	4413      	add	r3, r2
 800200a:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 800200e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002012:	3340      	adds	r3, #64	; 0x40
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800201a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	111b      	asrs	r3, r3, #4
 8002026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002032:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002036:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800203a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8002046:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800204a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800204e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd17      	ble.n	8002098 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8002068:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800206c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002070:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80023b0 <ExtractAlphaParameters+0x6b0>
 8002080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002084:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002088:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800208c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8002098:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800209c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80020a0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 80020b0:	2201      	movs	r2, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80020c6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80020ca:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 80020d6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80020e0:	443b      	add	r3, r7
 80020e2:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80020e6:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 80020f0:	441a      	add	r2, r3
 80020f2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80020f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020fa:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 80020fe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002102:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	ee07 3a90 	vmov	s15, r3
 8002110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002114:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002118:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800211c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002130:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002134:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8002140:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002144:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002148:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002158:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002164:	eeb0 1b47 	vmov.f64	d1, d7
 8002168:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800216c:	f00d ffd0 	bl	8010110 <pow>
 8002170:	eeb0 6b40 	vmov.f64	d6, d0
 8002174:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002178:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800217c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002180:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002184:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8002190:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002194:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002198:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	ed93 7a00 	vldr	s14, [r3]
 80021a4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80021a8:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	edd3 6a06 	vldr	s13, [r3, #24]
 80021b2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80021b6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 80021c4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80021c8:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d2:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 80021d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80021da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ea:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80021ee:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80021f2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80021fe:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002202:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002206:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	eddf 6a68 	vldr	s13, [pc, #416]	; 80023b4 <ExtractAlphaParameters+0x6b4>
 8002216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800221e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002222:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800222e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002232:	3301      	adds	r3, #1
 8002234:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8002238:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800223c:	2b1f      	cmp	r3, #31
 800223e:	f77f aede 	ble.w	8001ffe <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 8002242:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8002246:	3301      	adds	r3, #1
 8002248:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 800224c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8002250:	2b17      	cmp	r3, #23
 8002252:	f77f aed0 	ble.w	8001ff6 <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 8002256:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800225a:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8002264:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8002266:	2301      	movs	r3, #1
 8002268:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800226c:	e023      	b.n	80022b6 <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 800226e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002272:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002276:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	d50b      	bpl.n	80022ac <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 8002294:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002298:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800229c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80022aa:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 80022ac:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022b0:	3301      	adds	r3, #1
 80022b2:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80022b6:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80022ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022be:	dbd6      	blt.n	800226e <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 80022c6:	e00e      	b.n	80022e6 <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 80022c8:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022d4:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80022d8:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80022dc:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80022e0:	3301      	adds	r3, #1
 80022e2:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 80022e6:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80023b8 <ExtractAlphaParameters+0x6b8>
 80022f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d4e5      	bmi.n	80022c8 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8002302:	e03f      	b.n	8002384 <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 8002304:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002308:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800230c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800231c:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002328:	eeb0 1b47 	vmov.f64	d1, d7
 800232c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002330:	f00d feee 	bl	8010110 <pow>
 8002334:	eeb0 7b40 	vmov.f64	d7, d0
 8002338:	ee28 7b07 	vmul.f64	d7, d8, d7
 800233c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002340:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002344:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8002348:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002354:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235c:	ee17 3a90 	vmov	r3, s15
 8002360:	b299      	uxth	r1, r3
 8002362:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002366:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002370:	3324      	adds	r3, #36	; 0x24
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	460a      	mov	r2, r1
 8002378:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 800237a:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800237e:	3301      	adds	r3, #1
 8002380:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8002384:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800238c:	dbba      	blt.n	8002304 <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 800238e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002392:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 800239c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 80023a0:	bf00      	nop
 80023a2:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	ecbd 8b02 	vpop	{d8}
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	42800000 	.word	0x42800000
 80023b4:	358637bd 	.word	0x358637bd
 80023b8:	47000000 	.word	0x47000000

080023bc <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80023bc:	b480      	push	{r7}
 80023be:	b0c5      	sub	sp, #276	; 0x114
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ca:	6018      	str	r0, [r3, #0]
 80023cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023d4:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 80023dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3320      	adds	r3, #32
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 80023f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3320      	adds	r3, #32
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	111b      	asrs	r3, r3, #4
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 800240e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002412:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3320      	adds	r3, #32
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	121b      	asrs	r3, r3, #8
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8002428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800242c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3322      	adds	r3, #34	; 0x22
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002440:	e062      	b.n	8002508 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8002442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 800244c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002450:	3312      	adds	r3, #18
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002458:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4413      	add	r3, r2
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002470:	443b      	add	r3, r7
 8002472:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8002476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800247a:	3312      	adds	r3, #18
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002482:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4413      	add	r3, r2
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	111a      	asrs	r2, r3, #4
 800248e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002492:	3301      	adds	r3, #1
 8002494:	f002 020f 	and.w	r2, r2, #15
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800249e:	443b      	add	r3, r7
 80024a0:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 80024a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a8:	3312      	adds	r3, #18
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024b0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	121a      	asrs	r2, r3, #8
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c0:	3302      	adds	r3, #2
 80024c2:	f002 020f 	and.w	r2, r2, #15
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80024cc:	443b      	add	r3, r7
 80024ce:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 80024d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024d6:	3312      	adds	r3, #18
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024de:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	0b1b      	lsrs	r3, r3, #12
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f0:	3303      	adds	r3, #3
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80024f8:	443b      	add	r3, r7
 80024fa:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 80024fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002502:	3301      	adds	r3, #1
 8002504:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800250c:	2b05      	cmp	r3, #5
 800250e:	dd98      	ble.n	8002442 <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002516:	e020      	b.n	800255a <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8002518:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002522:	443b      	add	r3, r7
 8002524:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002528:	2b07      	cmp	r3, #7
 800252a:	dd11      	ble.n	8002550 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 800252c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002536:	443b      	add	r3, r7
 8002538:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800253c:	f1a3 0210 	sub.w	r2, r3, #16
 8002540:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800254a:	443b      	add	r3, r7
 800254c:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8002550:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002554:	3301      	adds	r3, #1
 8002556:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800255a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800255e:	2b17      	cmp	r3, #23
 8002560:	ddda      	ble.n	8002518 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002568:	e062      	b.n	8002630 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 800256a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8002574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002578:	3318      	adds	r3, #24
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002580:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	4413      	add	r3, r2
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f003 010f 	and.w	r1, r3, #15
 800258e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002596:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800259a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 800259e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025a2:	3318      	adds	r3, #24
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025aa:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	111b      	asrs	r3, r3, #4
 80025b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80025ba:	3201      	adds	r2, #1
 80025bc:	f003 010f 	and.w	r1, r3, #15
 80025c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 80025cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025d0:	3318      	adds	r3, #24
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025d8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	121b      	asrs	r3, r3, #8
 80025e4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80025e8:	3202      	adds	r2, #2
 80025ea:	f003 010f 	and.w	r1, r3, #15
 80025ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 80025fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025fe:	3318      	adds	r3, #24
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002606:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	0b1b      	lsrs	r3, r3, #12
 8002612:	b299      	uxth	r1, r3
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	1cda      	adds	r2, r3, #3
 800261a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800261e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8002626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800262a:	3301      	adds	r3, #1
 800262c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002634:	2b07      	cmp	r3, #7
 8002636:	dd98      	ble.n	800256a <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800263e:	e020      	b.n	8002682 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002648:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	2b07      	cmp	r3, #7
 8002652:	dd11      	ble.n	8002678 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8002654:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800265c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	f1a3 0110 	sub.w	r1, r3, #16
 8002668:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800266c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002670:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8002678:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800267c:	3301      	adds	r3, #1
 800267e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002682:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002686:	2b1f      	cmp	r3, #31
 8002688:	ddda      	ble.n	8002640 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 800268a:	2300      	movs	r3, #0
 800268c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002690:	e0c0      	b.n	8002814 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002698:	e0b2      	b.n	8002800 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 800269a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80026a4:	4413      	add	r3, r2
 80026a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ae:	3340      	adds	r3, #64	; 0x40
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026b6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	0a9b      	lsrs	r3, r3, #10
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	b219      	sxth	r1, r3
 80026c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	460a      	mov	r2, r1
 80026de:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 80026e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ee:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026fa:	2b1f      	cmp	r3, #31
 80026fc:	dd1d      	ble.n	800273a <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80026fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002702:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b40      	subs	r3, #64	; 0x40
 800271c:	b29b      	uxth	r3, r3
 800271e:	b219      	sxth	r1, r3
 8002720:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	460a      	mov	r2, r1
 8002738:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 800273a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800273e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002748:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002754:	461a      	mov	r2, r3
 8002756:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	b219      	sxth	r1, r3
 8002760:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002764:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	460a      	mov	r2, r1
 8002778:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 800277a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002784:	443b      	add	r3, r7
 8002786:	f853 2c84 	ldr.w	r2, [r3, #-132]
 800278a:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	b29a      	uxth	r2, r3
 8002794:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002798:	4413      	add	r3, r2
 800279a:	b29a      	uxth	r2, r3
 800279c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027a4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80027a8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80027ac:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c8:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	440b      	add	r3, r1
 80027d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	b219      	sxth	r1, r3
 80027dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ea:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	460a      	mov	r2, r1
 80027f4:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 80027f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027fa:	3301      	adds	r3, #1
 80027fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002800:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002804:	2b1f      	cmp	r3, #31
 8002806:	f77f af48 	ble.w	800269a <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280e:	3301      	adds	r3, #1
 8002810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002818:	2b17      	cmp	r3, #23
 800281a:	f77f af3a 	ble.w	8002692 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	ed2d 8b02 	vpush	{d8}
 8002836:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 800283a:	af00      	add	r7, sp, #0
 800283c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002840:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002844:	6018      	str	r0, [r3, #0]
 8002846:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800284a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800284e:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8002856:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800285a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	336c      	adds	r3, #108	; 0x6c
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	b29b      	uxth	r3, r3
 8002868:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 800286c:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8002870:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 8002874:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002878:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	336c      	adds	r3, #108	; 0x6c
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 8002886:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 800288a:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 800288e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002892:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	336e      	adds	r3, #110	; 0x6e
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 80028a4:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 80028a8:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 80028ac:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80028b0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	336e      	adds	r3, #110	; 0x6e
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 80028be:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 80028c2:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 80028c6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80028ca:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3370      	adds	r3, #112	; 0x70
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	111b      	asrs	r3, r3, #4
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3308      	adds	r3, #8
 80028e0:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 80028e4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80028e8:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3370      	adds	r3, #112	; 0x70
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8002902:	e0e6      	b.n	8002ad2 <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800290a:	e0d8      	b.n	8002abe <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 800290c:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8002910:	015b      	lsls	r3, r3, #5
 8002912:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8002916:	4413      	add	r3, r2
 8002918:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 800291c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002920:	2b00      	cmp	r3, #0
 8002922:	da00      	bge.n	8002926 <ExtractKtaPixelParameters+0xf6>
 8002924:	331f      	adds	r3, #31
 8002926:	115b      	asrs	r3, r3, #5
 8002928:	461a      	mov	r2, r3
 800292a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800292e:	2b00      	cmp	r3, #0
 8002930:	da00      	bge.n	8002934 <ExtractKtaPixelParameters+0x104>
 8002932:	333f      	adds	r3, #63	; 0x3f
 8002934:	119b      	asrs	r3, r3, #6
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002944:	2b00      	cmp	r3, #0
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	bfb8      	it	lt
 800294c:	425b      	neglt	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4413      	add	r3, r2
 8002952:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8002956:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800295a:	3340      	adds	r3, #64	; 0x40
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 8002962:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4413      	add	r3, r2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	105b      	asrs	r3, r3, #1
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800297e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002982:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 800298e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002992:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002996:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80029a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	dd17      	ble.n	80029e0 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 80029b0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029b4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029b8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80029c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029cc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029d0:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029d4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 80029e0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029e4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029e8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80029f8:	2201      	movs	r2, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a0e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002a12:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8002a1e:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 8002a22:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002a26:	f107 0208 	add.w	r2, r7, #8
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a38:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a3c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002a40:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a50:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a54:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002a58:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 8002a64:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a68:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002a6c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002a7c:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002a80:	ee07 3a90 	vmov	s15, r3
 8002a84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a88:	eeb0 1b47 	vmov.f64	d1, d7
 8002a8c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002a90:	f00d fb3e 	bl	8010110 <pow>
 8002a94:	eeb0 6b40 	vmov.f64	d6, d0
 8002a98:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002a9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002aa0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002aa4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002aa8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8002ab4:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002abe:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002ac2:	2b1f      	cmp	r3, #31
 8002ac4:	f77f af22 	ble.w	800290c <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 8002ac8:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8002acc:	3301      	adds	r3, #1
 8002ace:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8002ad2:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8002ad6:	2b17      	cmp	r3, #23
 8002ad8:	f77f af14 	ble.w	8002904 <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 8002adc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002ae0:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	eef0 7ae7 	vabs.f32	s15, s15
 8002aec:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002af0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002af4:	2301      	movs	r3, #1
 8002af6:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002afa:	e029      	b.n	8002b50 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 8002afc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b00:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002b04:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	eef0 7ae7 	vabs.f32	s15, s15
 8002b14:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002b18:	ed93 7a00 	vldr	s14, [r3]
 8002b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	d50f      	bpl.n	8002b46 <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 8002b26:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b2a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002b2e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	eef0 7ae7 	vabs.f32	s15, s15
 8002b3e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002b42:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002b46:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002b50:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b58:	dbd0      	blt.n	8002afc <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002b60:	e00e      	b.n	8002b80 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 8002b62:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b6e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002b72:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8002b76:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002b80:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002c94 <ExtractKtaPixelParameters+0x464>
 8002b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	d4e5      	bmi.n	8002b62 <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002b9c:	e064      	b.n	8002c68 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8002b9e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002ba2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002ba6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002bb6:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bc2:	eeb0 1b47 	vmov.f64	d1, d7
 8002bc6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002bca:	f00d faa1 	bl	8010110 <pow>
 8002bce:	eeb0 7b40 	vmov.f64	d7, d0
 8002bd2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002bd6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bda:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002bde:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002be2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	d51a      	bpl.n	8002c2a <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 8002bf4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c08:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c0c:	793b      	ldrb	r3, [r7, #4]
 8002c0e:	b259      	sxtb	r1, r3
 8002c10:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002c14:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002c1e:	4413      	add	r3, r2
 8002c20:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8002c24:	460a      	mov	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e019      	b.n	8002c5e <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8002c2a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c3e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c42:	793b      	ldrb	r3, [r7, #4]
 8002c44:	b259      	sxtb	r1, r3
 8002c46:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002c4a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002c54:	4413      	add	r3, r2
 8002c56:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002c5e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002c62:	3301      	adds	r3, #1
 8002c64:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002c68:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c70:	db95      	blt.n	8002b9e <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 8002c72:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002c76:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8002c80:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8002c84:	bf00      	nop
 8002c86:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	ecbd 8b02 	vpop	{d8}
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	42800000 	.word	0x42800000

08002c98 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	ed2d 8b02 	vpush	{d8}
 8002c9e:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002ca8:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002cac:	6018      	str	r0, [r3, #0]
 8002cae:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002cb2:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002cb6:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 8002cbe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002cc2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3368      	adds	r3, #104	; 0x68
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	0b1b      	lsrs	r3, r3, #12
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 8002cd4:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 8002cd8:	2b07      	cmp	r3, #7
 8002cda:	dd05      	ble.n	8002ce8 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 8002cdc:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002ce0:	3b10      	subs	r3, #16
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 8002ce8:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002cec:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 8002cf0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002cf4:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3368      	adds	r3, #104	; 0x68
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	121b      	asrs	r3, r3, #8
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 8002d0a:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 8002d0e:	2b07      	cmp	r3, #7
 8002d10:	dd05      	ble.n	8002d1e <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 8002d12:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8002d16:	3b10      	subs	r3, #16
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 8002d1e:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8002d22:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 8002d26:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002d2a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3368      	adds	r3, #104	; 0x68
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	111b      	asrs	r3, r3, #4
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8002d40:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 8002d44:	2b07      	cmp	r3, #7
 8002d46:	dd05      	ble.n	8002d54 <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8002d48:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002d4c:	3b10      	subs	r3, #16
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 8002d54:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002d58:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 8002d5c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002d60:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3368      	adds	r3, #104	; 0x68
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 8002d74:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8002d78:	2b07      	cmp	r3, #7
 8002d7a:	dd05      	ble.n	8002d88 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 8002d7c:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002d80:	3b10      	subs	r3, #16
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8002d88:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002d8c:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002d90:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002d94:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3370      	adds	r3, #112	; 0x70
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	121b      	asrs	r3, r3, #8
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002db0:	e075      	b.n	8002e9e <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002db8:	e068      	b.n	8002e8c <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 8002dba:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002dbe:	015b      	lsls	r3, r3, #5
 8002dc0:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 8002dca:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da00      	bge.n	8002dd4 <ExtractKvPixelParameters+0x13c>
 8002dd2:	331f      	adds	r3, #31
 8002dd4:	115b      	asrs	r3, r3, #5
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da00      	bge.n	8002de2 <ExtractKvPixelParameters+0x14a>
 8002de0:	333f      	adds	r3, #63	; 0x3f
 8002de2:	119b      	asrs	r3, r3, #6
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	bfb8      	it	lt
 8002dfa:	425b      	neglt	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 8002e04:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8002e08:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002e0c:	f107 0208 	add.w	r2, r7, #8
 8002e10:	4413      	add	r3, r2
 8002e12:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002e22:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002e26:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 8002e32:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002e36:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002e3a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002e4a:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e56:	eeb0 1b47 	vmov.f64	d1, d7
 8002e5a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002e5e:	f00d f957 	bl	8010110 <pow>
 8002e62:	eeb0 6b40 	vmov.f64	d6, d0
 8002e66:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002e6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e6e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002e72:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002e76:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8002e82:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002e86:	3301      	adds	r3, #1
 8002e88:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002e8c:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002e90:	2b1f      	cmp	r3, #31
 8002e92:	dd92      	ble.n	8002dba <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 8002e94:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002e9e:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002ea2:	2b17      	cmp	r3, #23
 8002ea4:	dd85      	ble.n	8002db2 <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 8002ea6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002eaa:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	eef0 7ae7 	vabs.f32	s15, s15
 8002eb6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002eba:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002ec4:	e029      	b.n	8002f1a <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 8002ec6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002eca:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002ece:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	edd3 7a00 	vldr	s15, [r3]
 8002eda:	eef0 7ae7 	vabs.f32	s15, s15
 8002ede:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002ee2:	ed93 7a00 	vldr	s14, [r3]
 8002ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	d50f      	bpl.n	8002f10 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 8002ef0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002ef4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002ef8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	eef0 7ae7 	vabs.f32	s15, s15
 8002f08:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002f0c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002f10:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002f14:	3301      	adds	r3, #1
 8002f16:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002f1a:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f22:	dbd0      	blt.n	8002ec6 <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002f2a:	e00e      	b.n	8002f4a <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 8002f2c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f38:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002f3c:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8002f40:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002f44:	3301      	adds	r3, #1
 8002f46:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002f4a:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003064 <ExtractKvPixelParameters+0x3cc>
 8002f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5e:	d4e5      	bmi.n	8002f2c <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002f66:	e064      	b.n	8003032 <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8002f68:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002f6c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002f70:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	edd3 7a00 	vldr	s15, [r3]
 8002f7c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002f80:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f8c:	eeb0 1b47 	vmov.f64	d1, d7
 8002f90:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002f94:	f00d f8bc 	bl	8010110 <pow>
 8002f98:	eeb0 7b40 	vmov.f64	d7, d0
 8002f9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002fa0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fa4:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002fac:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	d51a      	bpl.n	8002ff4 <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 8002fbe:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fd2:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fd6:	793b      	ldrb	r3, [r7, #4]
 8002fd8:	b259      	sxtb	r1, r3
 8002fda:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002fde:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002fe8:	4413      	add	r3, r2
 8002fea:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002fee:	460a      	mov	r2, r1
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e019      	b.n	8003028 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 8002ff4:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003008:	edc7 7a01 	vstr	s15, [r7, #4]
 800300c:	793b      	ldrb	r3, [r7, #4]
 800300e:	b259      	sxtb	r1, r3
 8003010:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003014:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800301e:	4413      	add	r3, r2
 8003020:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8003024:	460a      	mov	r2, r1
 8003026:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8003028:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800302c:	3301      	adds	r3, #1
 800302e:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003032:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800303a:	db95      	blt.n	8002f68 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 800303c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8003040:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304a:	461a      	mov	r2, r3
 800304c:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8003050:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8003054:	bf00      	nop
 8003056:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 800305a:	46bd      	mov	sp, r7
 800305c:	ecbd 8b02 	vpop	{d8}
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	42800000 	.word	0x42800000

08003068 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	ed2d 8b02 	vpush	{d8}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3340      	adds	r3, #64	; 0x40
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	0b1b      	lsrs	r3, r3, #12
 800307e:	b29b      	uxth	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	331b      	adds	r3, #27
 8003084:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3374      	adds	r3, #116	; 0x74
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b21b      	sxth	r3, r3
 800308e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003092:	b21b      	sxth	r3, r3
 8003094:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8003096:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800309a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309e:	db07      	blt.n	80030b0 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 80030a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	b21b      	sxth	r3, r3
 80030ae:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3374      	adds	r3, #116	; 0x74
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	0a9b      	lsrs	r3, r3, #10
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 80030be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030c2:	2b1f      	cmp	r3, #31
 80030c4:	dd06      	ble.n	80030d4 <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 80030c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b40      	subs	r3, #64	; 0x40
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 80030d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3372      	adds	r3, #114	; 0x72
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fa:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 80030fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003102:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80032d8 <ExtractCPParameters+0x270>
 8003106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	dd07      	ble.n	8003120 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8003110:	edd7 7a03 	vldr	s15, [r7, #12]
 8003114:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80032dc <ExtractCPParameters+0x274>
 8003118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800311c:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8003120:	edd7 7a03 	vldr	s15, [r7, #12]
 8003124:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003132:	eeb0 1b47 	vmov.f64	d1, d7
 8003136:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800313a:	f00c ffe9 	bl	8010110 <pow>
 800313e:	eeb0 6b40 	vmov.f64	d6, d0
 8003142:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8003146:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800314a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3372      	adds	r3, #114	; 0x72
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	0a9b      	lsrs	r3, r3, #10
 8003156:	b29b      	uxth	r3, r3
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003160:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8003164:	edd7 7a04 	vldr	s15, [r7, #16]
 8003168:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800316c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	dd07      	ble.n	8003186 <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8003176:	edd7 7a04 	vldr	s15, [r7, #16]
 800317a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80032e0 <ExtractCPParameters+0x278>
 800317e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003182:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8003186:	ed97 7a04 	vldr	s14, [r7, #16]
 800318a:	eddf 6a56 	vldr	s13, [pc, #344]	; 80032e4 <ExtractCPParameters+0x27c>
 800318e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800319a:	edd7 7a03 	vldr	s15, [r7, #12]
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3376      	adds	r3, #118	; 0x76
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b6:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 80031ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80031be:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80032e8 <ExtractCPParameters+0x280>
 80031c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ca:	dd07      	ble.n	80031dc <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 80031cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80031d0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80032ec <ExtractCPParameters+0x284>
 80031d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031d8:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3370      	adds	r3, #112	; 0x70
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	111b      	asrs	r3, r3, #4
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	3308      	adds	r3, #8
 80031ee:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80031f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80031f4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80031f8:	7dbb      	ldrb	r3, [r7, #22]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003202:	eeb0 1b47 	vmov.f64	d1, d7
 8003206:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800320a:	f00c ff81 	bl	8010110 <pow>
 800320e:	eeb0 6b40 	vmov.f64	d6, d0
 8003212:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8003216:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3376      	adds	r3, #118	; 0x76
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	b29b      	uxth	r3, r3
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003232:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 8003236:	edd7 7a07 	vldr	s15, [r7, #28]
 800323a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80032e8 <ExtractCPParameters+0x280>
 800323e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	dd07      	ble.n	8003258 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8003248:	edd7 7a07 	vldr	s15, [r7, #28]
 800324c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80032ec <ExtractCPParameters+0x284>
 8003250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003254:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3370      	adds	r3, #112	; 0x70
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	121b      	asrs	r3, r3, #8
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8003268:	edd7 7a07 	vldr	s15, [r7, #28]
 800326c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003270:	7d7b      	ldrb	r3, [r7, #21]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800327a:	eeb0 1b47 	vmov.f64	d1, d7
 800327e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8003282:	f00c ff45 	bl	8010110 <pow>
 8003286:	eeb0 6b40 	vmov.f64	d6, d0
 800328a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800328e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032a0:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032ac:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 80032b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ba:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 80032be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c8:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 80032cc:	bf00      	nop
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	ecbd 8b02 	vpop	{d8}
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	43ff8000 	.word	0x43ff8000
 80032dc:	44800000 	.word	0x44800000
 80032e0:	42800000 	.word	0x42800000
 80032e4:	43000000 	.word	0x43000000
 80032e8:	42fe0000 	.word	0x42fe0000
 80032ec:	43800000 	.word	0x43800000

080032f0 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3314      	adds	r3, #20
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	111b      	asrs	r3, r3, #4
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003308:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8003310:	43db      	mvns	r3, r3
 8003312:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	336a      	adds	r3, #106	; 0x6a
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003326:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 800332a:	edd7 7a02 	vldr	s15, [r7, #8]
 800332e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	dd07      	ble.n	800334c <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 800333c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003340:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003428 <ExtractCILCParameters+0x138>
 8003344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003348:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 800334c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003350:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003358:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	336a      	adds	r3, #106	; 0x6a
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	119b      	asrs	r3, r3, #6
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003370:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8003374:	edd7 7a03 	vldr	s15, [r7, #12]
 8003378:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	dd07      	ble.n	8003396 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8003386:	edd7 7a03 	vldr	s15, [r7, #12]
 800338a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800342c <ExtractCILCParameters+0x13c>
 800338e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003392:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8003396:	ed97 7a03 	vldr	s14, [r7, #12]
 800339a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800339e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a2:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	336a      	adds	r3, #106	; 0x6a
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	0adb      	lsrs	r3, r3, #11
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033b8:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 80033bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80033c0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80033c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033cc:	dd07      	ble.n	80033de <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 80033ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80033d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800342c <ExtractCILCParameters+0x13c>
 80033d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033da:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 80033de:	ed97 7a04 	vldr	s14, [r7, #16]
 80033e2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80033e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ea:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	7dfa      	ldrb	r2, [r7, #23]
 80033f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033fe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800340a:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003416:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	42800000 	.word	0x42800000
 800342c:	42000000 	.word	0x42000000

08003430 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 800344a:	2300      	movs	r3, #0
 800344c:	82fb      	strh	r3, [r7, #22]
 800344e:	e013      	b.n	8003478 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8003450:	8afa      	ldrh	r2, [r7, #22]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003458:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800345c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8003460:	8afb      	ldrh	r3, [r7, #22]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003470:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003472:	8afb      	ldrh	r3, [r7, #22]
 8003474:	3301      	adds	r3, #1
 8003476:	82fb      	strh	r3, [r7, #22]
 8003478:	8afb      	ldrh	r3, [r7, #22]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d9e8      	bls.n	8003450 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 800347e:	2300      	movs	r3, #0
 8003480:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003482:	e02a      	b.n	80034da <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8003484:	8afb      	ldrh	r3, [r7, #22]
 8003486:	3340      	adds	r3, #64	; 0x40
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8003494:	8aba      	ldrh	r2, [r7, #20]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800349c:	8af9      	ldrh	r1, [r7, #22]
 800349e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 80034a2:	8abb      	ldrh	r3, [r7, #20]
 80034a4:	3301      	adds	r3, #1
 80034a6:	82bb      	strh	r3, [r7, #20]
 80034a8:	e014      	b.n	80034d4 <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 80034aa:	8afb      	ldrh	r3, [r7, #22]
 80034ac:	3340      	adds	r3, #64	; 0x40
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 80034be:	8a7b      	ldrh	r3, [r7, #18]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	8afa      	ldrh	r2, [r7, #22]
 80034cc:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 80034ce:	8a7b      	ldrh	r3, [r7, #18]
 80034d0:	3301      	adds	r3, #1
 80034d2:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 80034d4:	8afb      	ldrh	r3, [r7, #22]
 80034d6:	3301      	adds	r3, #1
 80034d8:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 80034da:	8afb      	ldrh	r3, [r7, #22]
 80034dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e0:	d205      	bcs.n	80034ee <ExtractDeviatingPixels+0xbe>
 80034e2:	8abb      	ldrh	r3, [r7, #20]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d802      	bhi.n	80034ee <ExtractDeviatingPixels+0xbe>
 80034e8:	8a7b      	ldrh	r3, [r7, #18]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d9ca      	bls.n	8003484 <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 80034ee:	8abb      	ldrh	r3, [r7, #20]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d903      	bls.n	80034fc <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 80034f4:	f06f 0302 	mvn.w	r3, #2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e08f      	b.n	800361c <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 80034fc:	8a7b      	ldrh	r3, [r7, #18]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d903      	bls.n	800350a <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 8003502:	f06f 0303 	mvn.w	r3, #3
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e088      	b.n	800361c <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 800350a:	8aba      	ldrh	r2, [r7, #20]
 800350c:	8a7b      	ldrh	r3, [r7, #18]
 800350e:	4413      	add	r3, r2
 8003510:	2b04      	cmp	r3, #4
 8003512:	dd03      	ble.n	800351c <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 8003514:	f06f 0304 	mvn.w	r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e07f      	b.n	800361c <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800351c:	2300      	movs	r3, #0
 800351e:	82fb      	strh	r3, [r7, #22]
 8003520:	e022      	b.n	8003568 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003522:	8afb      	ldrh	r3, [r7, #22]
 8003524:	3301      	adds	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	e017      	b.n	800355a <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 800352a:	8afa      	ldrh	r2, [r7, #22]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003532:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800353e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003542:	4619      	mov	r1, r3
 8003544:	f000 f86f 	bl	8003626 <CheckAdjacentPixels>
 8003548:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	e064      	b.n	800361e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3301      	adds	r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	8abb      	ldrh	r3, [r7, #20]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	dbe3      	blt.n	800352a <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003562:	8afb      	ldrh	r3, [r7, #22]
 8003564:	3301      	adds	r3, #1
 8003566:	82fb      	strh	r3, [r7, #22]
 8003568:	8afa      	ldrh	r2, [r7, #22]
 800356a:	8abb      	ldrh	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d3d8      	bcc.n	8003522 <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003570:	2300      	movs	r3, #0
 8003572:	82fb      	strh	r3, [r7, #22]
 8003574:	e024      	b.n	80035c0 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	3301      	adds	r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	e019      	b.n	80035b2 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 800357e:	8afb      	ldrh	r3, [r7, #22]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	8858      	ldrh	r0, [r3, #2]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	885b      	ldrh	r3, [r3, #2]
 800359a:	4619      	mov	r1, r3
 800359c:	f000 f843 	bl	8003626 <CheckAdjacentPixels>
 80035a0:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	e038      	b.n	800361e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3301      	adds	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	8a7b      	ldrh	r3, [r7, #18]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	dbe1      	blt.n	800357e <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 80035ba:	8afb      	ldrh	r3, [r7, #22]
 80035bc:	3301      	adds	r3, #1
 80035be:	82fb      	strh	r3, [r7, #22]
 80035c0:	8afa      	ldrh	r2, [r7, #22]
 80035c2:	8a7b      	ldrh	r3, [r7, #18]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d3d6      	bcc.n	8003576 <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	82fb      	strh	r3, [r7, #22]
 80035cc:	e022      	b.n	8003614 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	e018      	b.n	8003606 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 80035d4:	8afa      	ldrh	r2, [r7, #22]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80035dc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	885b      	ldrh	r3, [r3, #2]
 80035ee:	4619      	mov	r1, r3
 80035f0:	f000 f819 	bl	8003626 <CheckAdjacentPixels>
 80035f4:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	e00e      	b.n	800361e <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	8a7b      	ldrh	r3, [r7, #18]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	dbe2      	blt.n	80035d4 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800360e:	8afb      	ldrh	r3, [r7, #22]
 8003610:	3301      	adds	r3, #1
 8003612:	82fb      	strh	r3, [r7, #22]
 8003614:	8afa      	ldrh	r2, [r7, #22]
 8003616:	8abb      	ldrh	r3, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3d8      	bcc.n	80035ce <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 800361c:	68fb      	ldr	r3, [r7, #12]
       
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	460a      	mov	r2, r1
 8003630:	80fb      	strh	r3, [r7, #6]
 8003632:	4613      	mov	r3, r2
 8003634:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	88bb      	ldrh	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f113 0f21 	cmn.w	r3, #33	; 0x21
 8003644:	db06      	blt.n	8003654 <CheckAdjacentPixels+0x2e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f113 0f1e 	cmn.w	r3, #30
 800364c:	da02      	bge.n	8003654 <CheckAdjacentPixels+0x2e>
     {
         return -6;
 800364e:	f06f 0305 	mvn.w	r3, #5
 8003652:	e013      	b.n	800367c <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	db05      	blt.n	8003668 <CheckAdjacentPixels+0x42>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	dc02      	bgt.n	8003668 <CheckAdjacentPixels+0x42>
     {
         return -6;
 8003662:	f06f 0305 	mvn.w	r3, #5
 8003666:	e009      	b.n	800367c <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b1e      	cmp	r3, #30
 800366c:	dd05      	ble.n	800367a <CheckAdjacentPixels+0x54>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b21      	cmp	r3, #33	; 0x21
 8003672:	dc02      	bgt.n	800367a <CheckAdjacentPixels+0x54>
     {
         return -6;
 8003674:	f06f 0305 	mvn.w	r3, #5
 8003678:	e000      	b.n	800367c <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 800367a:	2300      	movs	r3, #0
 }
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <GetMedian>:
 
//------------------------------------------------------------------------------
 
float GetMedian(float *values, int n)
 {
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
    float temp;
    
    for(int i=0; i<n-1; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e034      	b.n	8003702 <GetMedian+0x7a>
    {
        for(int j=i+1; j<n; j++)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	e029      	b.n	80036f4 <GetMedian+0x6c>
        {
            if(values[j] < values[i]) 
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	ed93 7a00 	vldr	s14, [r3]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d515      	bpl.n	80036ee <GetMedian+0x66>
            {                
                temp = values[i];
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]
                values[i] = values[j];
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	441a      	add	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	440b      	add	r3, r1
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	601a      	str	r2, [r3, #0]
                values[j] = temp;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	601a      	str	r2, [r3, #0]
        for(int j=i+1; j<n; j++)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	3301      	adds	r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	dbd1      	blt.n	80036a0 <GetMedian+0x18>
    for(int i=0; i<n-1; i++)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	dbc5      	blt.n	8003698 <GetMedian+0x10>
            }
        }
    }
    
    if(n%2==0) 
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11e      	bne.n	8003754 <GetMedian+0xcc>
    {
        return ((values[n/2] + values[n/2 - 1]) / 2.0f);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	da00      	bge.n	800371e <GetMedian+0x96>
 800371c:	3301      	adds	r3, #1
 800371e:	105b      	asrs	r3, r3, #1
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	ed93 7a00 	vldr	s14, [r3]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	da00      	bge.n	8003732 <GetMedian+0xaa>
 8003730:	3301      	adds	r3, #1
 8003732:	105b      	asrs	r3, r3, #1
 8003734:	461a      	mov	r2, r3
 8003736:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800374e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003752:	e009      	b.n	8003768 <GetMedian+0xe0>
        
    } 
    else 
    {
        return values[n/2];
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	da00      	bge.n	800375c <GetMedian+0xd4>
 800375a:	3301      	adds	r3, #1
 800375c:	105b      	asrs	r3, r3, #1
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	edd3 7a00 	vldr	s15, [r3]
    }
    
 }           
 8003768:	eeb0 0a67 	vmov.f32	s0, s15
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <IsPixelBad>:

//------------------------------------------------------------------------------

int IsPixelBad(uint16_t pixel,paramsMLX90640 *params)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	6039      	str	r1, [r7, #0]
 8003780:	80fb      	strh	r3, [r7, #6]
    for(int i=0; i<5; i++)
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e017      	b.n	80037b8 <IsPixelBad+0x42>
    {
        if(pixel == params->outlierPixels[i] || pixel == params->brokenPixels[i])
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	885b      	ldrh	r3, [r3, #2]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	429a      	cmp	r2, r3
 800379a:	d008      	beq.n	80037ae <IsPixelBad+0x38>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80037a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d101      	bne.n	80037b2 <IsPixelBad+0x3c>
        {
            return 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e006      	b.n	80037c0 <IsPixelBad+0x4a>
    for(int i=0; i<5; i++)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3301      	adds	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	dde4      	ble.n	8003788 <IsPixelBad+0x12>
        }    
    }   
    
    return 0;     
 80037be:	2300      	movs	r3, #0
}     
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	; 0x30
 80037d0:	af04      	add	r7, sp, #16
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	4603      	mov	r3, r0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	460b      	mov	r3, r1
 80037da:	81bb      	strh	r3, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	b299      	uxth	r1, r3
 80037f4:	897b      	ldrh	r3, [r7, #10]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	89ba      	ldrh	r2, [r7, #12]
 80037fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003800:	9002      	str	r0, [sp, #8]
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2302      	movs	r3, #2
 800380a:	4817      	ldr	r0, [pc, #92]	; (8003868 <MLX90640_I2CRead+0x9c>)
 800380c:	f001 fc64 	bl	80050d8 <HAL_I2C_Mem_Read>
 8003810:	4603      	mov	r3, r0
 8003812:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <MLX90640_I2CRead+0x54>
	{
			return -1;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	e01f      	b.n	8003860 <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	e016      	b.n	8003854 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3301      	adds	r3, #1
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4413      	add	r3, r2
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	441a      	add	r2, r3
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	3301      	adds	r3, #1
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	440b      	add	r3, r1
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	7cfa      	ldrb	r2, [r7, #19]
 800384c:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3302      	adds	r3, #2
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	429a      	cmp	r2, r3
 800385c:	dbe3      	blt.n	8003826 <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 800385e:	2300      	movs	r3, #0
} 
 8003860:	4618      	mov	r0, r3
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20007144 	.word	0x20007144

0800386c <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af04      	add	r7, sp, #16
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
 8003876:	460b      	mov	r3, r1
 8003878:	80bb      	strh	r3, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	807b      	strh	r3, [r7, #2]

	uint8_t sa;
	int ack = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	72fb      	strb	r3, [r7, #11]

	cmd[0] = data >> 8;
 8003888:	887b      	ldrh	r3, [r7, #2]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	b29b      	uxth	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	723b      	strb	r3, [r7, #8]
	cmd[1] = data & 0x00FF;
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	727b      	strb	r3, [r7, #9]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 8003898:	7afb      	ldrb	r3, [r7, #11]
 800389a:	b299      	uxth	r1, r3
 800389c:	88ba      	ldrh	r2, [r7, #4]
 800389e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038a2:	9302      	str	r3, [sp, #8]
 80038a4:	2302      	movs	r3, #2
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2302      	movs	r3, #2
 80038b0:	480e      	ldr	r0, [pc, #56]	; (80038ec <MLX90640_I2CWrite+0x80>)
 80038b2:	f001 fafd 	bl	8004eb0 <HAL_I2C_Mem_Write>
 80038b6:	4603      	mov	r3, r0
 80038b8:	60fb      	str	r3, [r7, #12]

	if (ack != HAL_OK)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <MLX90640_I2CWrite+0x5a>
	{
			return -1;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e00e      	b.n	80038e4 <MLX90640_I2CWrite+0x78>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck);
 80038c6:	88b9      	ldrh	r1, [r7, #4]
 80038c8:	79f8      	ldrb	r0, [r7, #7]
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <MLX90640_I2CWrite+0x84>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	f7ff ff7d 	bl	80037cc <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <MLX90640_I2CWrite+0x84>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d002      	beq.n	80038e2 <MLX90640_I2CWrite+0x76>
	{
			return -2;
 80038dc:	f06f 0301 	mvn.w	r3, #1
 80038e0:	e000      	b.n	80038e4 <MLX90640_I2CWrite+0x78>
	}    
	
	return 0;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20007144 	.word	0x20007144
 80038f0:	2000711c 	.word	0x2000711c

080038f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <MX_CRC_Init+0x3c>)
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <MX_CRC_Init+0x40>)
 80038fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <MX_CRC_Init+0x3c>)
 8003900:	2200      	movs	r2, #0
 8003902:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <MX_CRC_Init+0x3c>)
 8003906:	2200      	movs	r2, #0
 8003908:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <MX_CRC_Init+0x3c>)
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <MX_CRC_Init+0x3c>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <MX_CRC_Init+0x3c>)
 8003918:	2201      	movs	r2, #1
 800391a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800391c:	4804      	ldr	r0, [pc, #16]	; (8003930 <MX_CRC_Init+0x3c>)
 800391e:	f000 ffa1 	bl	8004864 <HAL_CRC_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003928:	f000 fd04 	bl	8004334 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20007120 	.word	0x20007120
 8003934:	40023000 	.word	0x40023000

08003938 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_CRC_MspInit+0x38>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10b      	bne.n	8003962 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_CRC_MspInit+0x3c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_CRC_MspInit+0x3c>)
 8003950:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <HAL_CRC_MspInit+0x3c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023000 	.word	0x40023000
 8003974:	40023800 	.word	0x40023800

08003978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <MX_GPIO_Init+0x5c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <MX_GPIO_Init+0x5c>)
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <MX_GPIO_Init+0x5c>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <MX_GPIO_Init+0x5c>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <MX_GPIO_Init+0x5c>)
 800399c:	f043 0308 	orr.w	r3, r3, #8
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_GPIO_Init+0x5c>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_GPIO_Init+0x5c>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <MX_GPIO_Init+0x5c>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_GPIO_Init+0x5c>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]

}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800

080039d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <MX_I2C1_Init+0x74>)
 80039de:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <MX_I2C1_Init+0x78>)
 80039e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <MX_I2C1_Init+0x74>)
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <MX_I2C1_Init+0x7c>)
 80039e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <MX_I2C1_Init+0x74>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <MX_I2C1_Init+0x74>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <MX_I2C1_Init+0x74>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <MX_I2C1_Init+0x74>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <MX_I2C1_Init+0x74>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <MX_I2C1_Init+0x74>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <MX_I2C1_Init+0x74>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a12:	480e      	ldr	r0, [pc, #56]	; (8003a4c <MX_I2C1_Init+0x74>)
 8003a14:	f001 f9bc 	bl	8004d90 <HAL_I2C_Init>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a1e:	f000 fc89 	bl	8004334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a22:	2100      	movs	r1, #0
 8003a24:	4809      	ldr	r0, [pc, #36]	; (8003a4c <MX_I2C1_Init+0x74>)
 8003a26:	f001 ff0b 	bl	8005840 <HAL_I2CEx_ConfigAnalogFilter>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a30:	f000 fc80 	bl	8004334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a34:	2100      	movs	r1, #0
 8003a36:	4805      	ldr	r0, [pc, #20]	; (8003a4c <MX_I2C1_Init+0x74>)
 8003a38:	f001 ff4d 	bl	80058d6 <HAL_I2CEx_ConfigDigitalFilter>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003a42:	f000 fc77 	bl	8004334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20007144 	.word	0x20007144
 8003a50:	40005400 	.word	0x40005400
 8003a54:	6000030d 	.word	0x6000030d

08003a58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b0ae      	sub	sp, #184	; 0xb8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	2290      	movs	r2, #144	; 0x90
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00a fd03 	bl	800e484 <memset>
  if(i2cHandle->Instance==I2C1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <HAL_I2C_MspInit+0xb4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d13c      	bne.n	8003b02 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003a88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 fc8e 	bl	80063b8 <HAL_RCCEx_PeriphCLKConfig>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003aa2:	f000 fc47 	bl	8004334 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_I2C_MspInit+0xb8>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_I2C_MspInit+0xb8>)
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_I2C_MspInit+0xb8>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ac6:	2312      	movs	r3, #18
 8003ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ad8:	2304      	movs	r3, #4
 8003ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ade:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	480b      	ldr	r0, [pc, #44]	; (8003b14 <HAL_I2C_MspInit+0xbc>)
 8003ae6:	f000 ffa7 	bl	8004a38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_I2C_MspInit+0xb8>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <HAL_I2C_MspInit+0xb8>)
 8003af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_I2C_MspInit+0xb8>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b02:	bf00      	nop
 8003b04:	37b8      	adds	r7, #184	; 0xb8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40005400 	.word	0x40005400
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020400 	.word	0x40020400

08003b18 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b1c:	f3bf 8f4f 	dsb	sy
}
 8003b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b22:	f3bf 8f6f 	isb	sy
}
 8003b26:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003b28:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <SCB_EnableICache+0x48>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003b30:	f3bf 8f4f 	dsb	sy
}
 8003b34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b36:	f3bf 8f6f 	isb	sy
}
 8003b3a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <SCB_EnableICache+0x48>)
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <SCB_EnableICache+0x48>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b46:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b48:	f3bf 8f4f 	dsb	sy
}
 8003b4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b4e:	f3bf 8f6f 	isb	sy
}
 8003b52:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <SCB_EnableDCache+0x84>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003b72:	f3bf 8f4f 	dsb	sy
}
 8003b76:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <SCB_EnableDCache+0x84>)
 8003b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	0b5b      	lsrs	r3, r3, #13
 8003b84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b88:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b92:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003b9c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ba2:	4911      	ldr	r1, [pc, #68]	; (8003be8 <SCB_EnableDCache+0x84>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	60ba      	str	r2, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ef      	bne.n	8003b94 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e5a      	subs	r2, r3, #1
 8003bb8:	60fa      	str	r2, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e5      	bne.n	8003b8a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003bbe:	f3bf 8f4f 	dsb	sy
}
 8003bc2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <SCB_EnableDCache+0x84>)
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <SCB_EnableDCache+0x84>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bd0:	f3bf 8f4f 	dsb	sy
}
 8003bd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bd6:	f3bf 8f6f 	isb	sy
}
 8003bda:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	f6ad 4d08 	subw	sp, sp, #3080	; 0xc08
 8003bf2:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003bf4:	f7ff ff90 	bl	8003b18 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003bf8:	f7ff ffb4 	bl	8003b64 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bfc:	f000 fcef 	bl	80045de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c00:	f000 f8a4 	bl	8003d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c04:	f7ff feb8 	bl	8003978 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003c08:	f000 fc30 	bl	800446c <MX_USART3_UART_Init>
  MX_CRC_Init();
 8003c0c:	f7ff fe72 	bl	80038f4 <MX_CRC_Init>
  MX_I2C1_Init();
 8003c10:	f7ff fee2 	bl	80039d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  AI_Init();
 8003c14:	f000 f98c 	bl	8003f30 <AI_Init>

  MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate);
 8003c18:	2104      	movs	r1, #4
 8003c1a:	2033      	movs	r0, #51	; 0x33
 8003c1c:	f7fc fdc3 	bl	80007a6 <MLX90640_SetRefreshRate>
  MLX90640_SetChessMode(MLX90640_ADDR);
 8003c20:	2033      	movs	r0, #51	; 0x33
 8003c22:	f7fc fdef 	bl	8000804 <MLX90640_SetChessMode>

  status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640);
 8003c26:	493a      	ldr	r1, [pc, #232]	; (8003d10 <main+0x124>)
 8003c28:	2033      	movs	r0, #51	; 0x33
 8003c2a:	f7fc fcdf 	bl	80005ec <MLX90640_DumpEE>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4a38      	ldr	r2, [pc, #224]	; (8003d14 <main+0x128>)
 8003c32:	6013      	str	r3, [r2, #0]
  if (status != 0) printf("\r\nload system parameters error with code:%d\r\n",status);
 8003c34:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <main+0x128>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <main+0x5c>
 8003c3c:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <main+0x128>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	4835      	ldr	r0, [pc, #212]	; (8003d18 <main+0x12c>)
 8003c44:	f00a fad8 	bl	800e1f8 <iprintf>
  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 8003c48:	4934      	ldr	r1, [pc, #208]	; (8003d1c <main+0x130>)
 8003c4a:	4831      	ldr	r0, [pc, #196]	; (8003d10 <main+0x124>)
 8003c4c:	f7fc fd66 	bl	800071c <MLX90640_ExtractParameters>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4a30      	ldr	r2, [pc, #192]	; (8003d14 <main+0x128>)
 8003c54:	6013      	str	r3, [r2, #0]
  if (status != 0) printf("\r\nParameter extraction failed with error code:%d\r\n",status);
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <main+0x128>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <main+0x7e>
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <main+0x128>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4619      	mov	r1, r3
 8003c64:	482e      	ldr	r0, [pc, #184]	; (8003d20 <main+0x134>)
 8003c66:	f00a fac7 	bl	800e1f8 <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // I.0      (1,24,32,1)/float32     0.000   1.000    0.236    0.194 input_1
	  // O.0      (1,1,1,5)/float32       0.000   0.999    0.200    0.365 output_1
	  for(uint8_t i = 0; i < 2; i++){
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 3c07 	strb.w	r3, [r7, #3079]	; 0xc07
 8003c70:	e00b      	b.n	8003c8a <main+0x9e>
		  getFrame(frameBuffer);
 8003c72:	482c      	ldr	r0, [pc, #176]	; (8003d24 <main+0x138>)
 8003c74:	f000 fa46 	bl	8004104 <getFrame>
		  captureAndPreprocessFrame(frameBuffer, preprocessedFrame);
 8003c78:	492b      	ldr	r1, [pc, #172]	; (8003d28 <main+0x13c>)
 8003c7a:	482a      	ldr	r0, [pc, #168]	; (8003d24 <main+0x138>)
 8003c7c:	f000 f9c8 	bl	8004010 <captureAndPreprocessFrame>
	  for(uint8_t i = 0; i < 2; i++){
 8003c80:	f897 3c07 	ldrb.w	r3, [r7, #3079]	; 0xc07
 8003c84:	3301      	adds	r3, #1
 8003c86:	f887 3c07 	strb.w	r3, [r7, #3079]	; 0xc07
 8003c8a:	f897 3c07 	ldrb.w	r3, [r7, #3079]	; 0xc07
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d9ef      	bls.n	8003c72 <main+0x86>
	  }

	  float transformed_input[1][HEIGHT][WIDTH][1];
	  transform_to_4d(preprocessedFrame, transformed_input);
 8003c92:	463b      	mov	r3, r7
 8003c94:	4619      	mov	r1, r3
 8003c96:	4824      	ldr	r0, [pc, #144]	; (8003d28 <main+0x13c>)
 8003c98:	f000 f984 	bl	8003fa4 <transform_to_4d>


	  memcpy(data_ins[0], transformed_input, sizeof(float) * 1 * 24 * 32 * 1);
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <main+0x140>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f00a fc7b 	bl	800e5a2 <memcpy>


	  if (ai_model_run(model, ai_input, ai_output) != 1) {
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <main+0x144>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <main+0x148>)
 8003cb2:	6811      	ldr	r1, [r2, #0]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <main+0x14c>)
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f005 f9c5 	bl	8009048 <ai_model_run>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d00c      	beq.n	8003cde <main+0xf2>
	        ai_log_err(ai_model_get_error(model), "ai_model_run");
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <main+0x144>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f005 f8b7 	bl	8008e3c <ai_model_get_error>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	491a      	ldr	r1, [pc, #104]	; (8003d3c <main+0x150>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f8a8 	bl	8003e28 <ai_log_err>
	        return -1;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e012      	b.n	8003d04 <main+0x118>
	      }


	  output_value = (float*)data_outs[0];
 8003cde:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <main+0x154>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <main+0x158>)
 8003ce4:	6013      	str	r3, [r2, #0]

	  int max_index = argmax(output_value, output_size);
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <main+0x158>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2205      	movs	r2, #5
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f92c 	bl	8003f4c <argmax>
 8003cf4:	f8c7 0c00 	str.w	r0, [r7, #3072]	; 0xc00
	  printf("Max index: %d\n", max_index);
 8003cf8:	f8d7 1c00 	ldr.w	r1, [r7, #3072]	; 0xc00
 8003cfc:	4812      	ldr	r0, [pc, #72]	; (8003d48 <main+0x15c>)
 8003cfe:	f00a fa7b 	bl	800e1f8 <iprintf>
  {
 8003d02:	e7b2      	b.n	8003c6a <main+0x7e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	f607 4708 	addw	r7, r7, #3080	; 0xc08
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200131ac 	.word	0x200131ac
 8003d14:	20015030 	.word	0x20015030
 8003d18:	080107a0 	.word	0x080107a0
 8003d1c:	20015034 	.word	0x20015034
 8003d20:	080107d0 	.word	0x080107d0
 8003d24:	20013830 	.word	0x20013830
 8003d28:	20014430 	.word	0x20014430
 8003d2c:	20007198 	.word	0x20007198
 8003d30:	200131a0 	.word	0x200131a0
 8003d34:	200131a4 	.word	0x200131a4
 8003d38:	200131a8 	.word	0x200131a8
 8003d3c:	08010804 	.word	0x08010804
 8003d40:	2000719c 	.word	0x2000719c
 8003d44:	2001382c 	.word	0x2001382c
 8003d48:	08010814 	.word	0x08010814

08003d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b094      	sub	sp, #80	; 0x50
 8003d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	2234      	movs	r2, #52	; 0x34
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f00a fb92 	bl	800e484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d60:	f107 0308 	add.w	r3, r7, #8
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <SystemClock_Config+0xd4>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <SystemClock_Config+0xd4>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <SystemClock_Config+0xd4>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <SystemClock_Config+0xd8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <SystemClock_Config+0xd8>)
 8003d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <SystemClock_Config+0xd8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003da4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003da8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003daa:	2302      	movs	r3, #2
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003db4:	2304      	movs	r3, #4
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003db8:	23d8      	movs	r3, #216	; 0xd8
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dc8:	f107 031c 	add.w	r3, r7, #28
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fe1f 	bl	8005a10 <HAL_RCC_OscConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003dd8:	f000 faac 	bl	8004334 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ddc:	f001 fdc8 	bl	8005970 <HAL_PWREx_EnableOverDrive>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003de6:	f000 faa5 	bl	8004334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dea:	230f      	movs	r3, #15
 8003dec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dee:	2302      	movs	r3, #2
 8003df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003dfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003e02:	f107 0308 	add.w	r3, r7, #8
 8003e06:	2107      	movs	r1, #7
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 f8af 	bl	8005f6c <HAL_RCC_ClockConfig>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003e14:	f000 fa8e 	bl	8004334 <Error_Handler>
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3750      	adds	r7, #80	; 0x50
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000

08003e28 <ai_log_err>:

/* USER CODE BEGIN 4 */

static void ai_log_err(const ai_error err, const char *fct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8003e38:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003e3a:	461a      	mov	r2, r3
        err.type, err.code);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	4806      	ldr	r0, [pc, #24]	; (8003e60 <ai_log_err+0x38>)
 8003e46:	f00a f9d7 	bl	800e1f8 <iprintf>
 8003e4a:	e008      	b.n	8003e5e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003e4c:	793b      	ldrb	r3, [r7, #4]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003e56:	461a      	mov	r2, r3
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <ai_log_err+0x3c>)
 8003e5a:	f00a f9cd 	bl	800e1f8 <iprintf>

  do {} while (1);
 8003e5e:	e7fe      	b.n	8003e5e <ai_log_err+0x36>
 8003e60:	08010824 	.word	0x08010824
 8003e64:	08010858 	.word	0x08010858

08003e68 <ai_boostrap>:
  /* USER CODE END log */
}


static int ai_boostrap(ai_handle *act_addr)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_model_create_and_init(&model, act_addr, NULL);
 8003e70:	2200      	movs	r2, #0
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4828      	ldr	r0, [pc, #160]	; (8003f18 <ai_boostrap+0xb0>)
 8003e76:	f005 f803 	bl	8008e80 <ai_model_create_and_init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8003e7e:	7b3b      	ldrb	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_model_create_and_init");
 8003e84:	4925      	ldr	r1, [pc, #148]	; (8003f1c <ai_boostrap+0xb4>)
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff ffce 	bl	8003e28 <ai_log_err>
    return -1;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	e03e      	b.n	8003f10 <ai_boostrap+0xa8>
  }

  ai_input = ai_model_inputs_get(model, NULL);
 8003e92:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <ai_boostrap+0xb0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f005 f865 	bl	8008f68 <ai_model_inputs_get>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <ai_boostrap+0xb8>)
 8003ea2:	6013      	str	r3, [r2, #0]
  ai_output = ai_model_outputs_get(model, NULL);
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <ai_boostrap+0xb0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f005 f876 	bl	8008f9c <ai_model_outputs_get>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <ai_boostrap+0xbc>)
 8003eb4:	6013      	str	r3, [r2, #0]

#if defined(AI_MODEL_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_MODEL_IN_NUM; idx++) {
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e00f      	b.n	8003edc <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8003ebc:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <ai_boostrap+0xb8>)
 8003ebe:	6819      	ldr	r1, [r3, #0]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4916      	ldr	r1, [pc, #88]	; (8003f28 <ai_boostrap+0xc0>)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MODEL_IN_NUM; idx++) {
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	ddec      	ble.n	8003ebc <ai_boostrap+0x54>

#if defined(AI_MODEL_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_MODEL_OUT_NUM; idx++) {
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e00f      	b.n	8003f08 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <ai_boostrap+0xbc>)
 8003eea:	6819      	ldr	r1, [r3, #0]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	490c      	ldr	r1, [pc, #48]	; (8003f2c <ai_boostrap+0xc4>)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MODEL_OUT_NUM; idx++) {
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3301      	adds	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	ddec      	ble.n	8003ee8 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_MODEL_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200131a0 	.word	0x200131a0
 8003f1c:	08010888 	.word	0x08010888
 8003f20:	200131a4 	.word	0x200131a4
 8003f24:	200131a8 	.word	0x200131a8
 8003f28:	20007198 	.word	0x20007198
 8003f2c:	2000719c 	.word	0x2000719c

08003f30 <AI_Init>:

void AI_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8003f34:	4803      	ldr	r0, [pc, #12]	; (8003f44 <AI_Init+0x14>)
 8003f36:	f00a f9c5 	bl	800e2c4 <puts>

  ai_boostrap(data_activations0);
 8003f3a:	4803      	ldr	r0, [pc, #12]	; (8003f48 <AI_Init+0x18>)
 8003f3c:	f7ff ff94 	bl	8003e68 <ai_boostrap>
    /* USER CODE END 5 */
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	080108a4 	.word	0x080108a4
 8003f48:	20000000 	.word	0x20000000

08003f4c <argmax>:



int argmax(float* array, int size) {
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
    int max_index = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < size; i++) {
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	e015      	b.n	8003f8c <argmax+0x40>
        if (array[i] > array[max_index]) {
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	ed93 7a00 	vldr	s14, [r3]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	edd3 7a00 	vldr	s15, [r3]
 8003f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f80:	dd01      	ble.n	8003f86 <argmax+0x3a>
            max_index = i;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < size; i++) {
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	dbe5      	blt.n	8003f60 <argmax+0x14>
        }
    }
    return max_index;
 8003f94:	68fb      	ldr	r3, [r7, #12]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <transform_to_4d>:


void transform_to_4d(const float input[][WIDTH], float transformed_input[1][HEIGHT][WIDTH][1]) {
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
    for (int h = 0; h < HEIGHT; h++) {
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e021      	b.n	8003ff8 <transform_to_4d+0x54>
        for (int w = 0; w < WIDTH; w++) {
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	e018      	b.n	8003fec <transform_to_4d+0x48>
            // �??? ?��?? 값을 255.0?���??? ?��?��?�� 0?��?�� 1 ?��?��?�� 값으�??? ?��규화
            transformed_input[0][h][w][0] = input[h][w] / 255.0f;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	01db      	lsls	r3, r3, #7
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	441a      	add	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	ed93 7a00 	vldr	s14, [r3]
 8003fcc:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800400c <transform_to_4d+0x68>
 8003fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0159      	lsls	r1, r3, #5
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	440b      	add	r3, r1
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	edc3 7a00 	vstr	s15, [r3]
        for (int w = 0; w < WIDTH; w++) {
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b1f      	cmp	r3, #31
 8003ff0:	dde3      	ble.n	8003fba <transform_to_4d+0x16>
    for (int h = 0; h < HEIGHT; h++) {
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b17      	cmp	r3, #23
 8003ffc:	ddda      	ble.n	8003fb4 <transform_to_4d+0x10>
        }
    }
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	437f0000 	.word	0x437f0000

08004010 <captureAndPreprocessFrame>:

void captureAndPreprocessFrame(float (*frameBuffer)[WIDTH], float (*outputBuffer)[WIDTH]) {
 8004010:	b480      	push	{r7}
 8004012:	b08b      	sub	sp, #44	; 0x2c
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
    float minVal = FLT_MAX, maxVal = -FLT_MAX;
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <captureAndPreprocessFrame+0xec>)
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8004022:	623b      	str	r3, [r7, #32]

    // Find min and max values in the frame buffer
    for (int i = 0; i < HEIGHT; i++) {
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e02a      	b.n	8004080 <captureAndPreprocessFrame+0x70>
        for (int j = 0; j < WIDTH; j++) {
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e021      	b.n	8004074 <captureAndPreprocessFrame+0x64>
            float val = frameBuffer[i][j];
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	01db      	lsls	r3, r3, #7
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	441a      	add	r2, r3
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
            if (val < minVal) minVal = val;
 8004042:	ed97 7a03 	vldr	s14, [r7, #12]
 8004046:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800404a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800404e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004052:	d501      	bpl.n	8004058 <captureAndPreprocessFrame+0x48>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
            if (val > maxVal) maxVal = val;
 8004058:	ed97 7a03 	vldr	s14, [r7, #12]
 800405c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004068:	dd01      	ble.n	800406e <captureAndPreprocessFrame+0x5e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	623b      	str	r3, [r7, #32]
        for (int j = 0; j < WIDTH; j++) {
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3301      	adds	r3, #1
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b1f      	cmp	r3, #31
 8004078:	ddda      	ble.n	8004030 <captureAndPreprocessFrame+0x20>
    for (int i = 0; i < HEIGHT; i++) {
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3301      	adds	r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b17      	cmp	r3, #23
 8004084:	ddd1      	ble.n	800402a <captureAndPreprocessFrame+0x1a>
        }
    }

    // Scale frame buffer values to 0-255
    for (int i = 0; i < HEIGHT; i++) {
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e02d      	b.n	80040e8 <captureAndPreprocessFrame+0xd8>
        for (int j = 0; j < WIDTH; j++) {
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e024      	b.n	80040dc <captureAndPreprocessFrame+0xcc>
            outputBuffer[i][j] = (frameBuffer[i][j] - minVal) / (maxVal - minVal) * 255.0f;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	01db      	lsls	r3, r3, #7
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	441a      	add	r2, r3
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	ed93 7a00 	vldr	s14, [r3]
 80040a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80040ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80040b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	01db      	lsls	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	441a      	add	r2, r3
 80040c4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004100 <captureAndPreprocessFrame+0xf0>
 80040c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < WIDTH; j++) {
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3301      	adds	r3, #1
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b1f      	cmp	r3, #31
 80040e0:	ddd7      	ble.n	8004092 <captureAndPreprocessFrame+0x82>
    for (int i = 0; i < HEIGHT; i++) {
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b17      	cmp	r3, #23
 80040ec:	ddce      	ble.n	800408c <captureAndPreprocessFrame+0x7c>
        }
    }
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	372c      	adds	r7, #44	; 0x2c
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	7f7fffff 	.word	0x7f7fffff
 8004100:	437f0000 	.word	0x437f0000

08004104 <getFrame>:

void getFrame(float framebuf[HEIGHT][WIDTH]) {
 8004104:	b580      	push	{r7, lr}
 8004106:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 800410a:	af00      	add	r7, sp, #0
 800410c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004110:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8004114:	6018      	str	r0, [r3, #0]
    static uint16_t mlx90640Frame[834];
    float emissivity = 0.95;
 8004116:	4b7e      	ldr	r3, [pc, #504]	; (8004310 <getFrame+0x20c>)
 8004118:	f607 4214 	addw	r2, r7, #3092	; 0xc14
 800411c:	6013      	str	r3, [r2, #0]
    float tr = 23.15;
 800411e:	4b7d      	ldr	r3, [pc, #500]	; (8004314 <getFrame+0x210>)
 8004120:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8004124:	6013      	str	r3, [r2, #0]
    float mlx90640To[768]; // 32x24 pixels

    for (int i = 0; i < 2; i++) {
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 800412c:	e03f      	b.n	80041ae <getFrame+0xaa>
        int status = MLX90640_GetFrameData(MLX90640_ADDR, mlx90640Frame);
 800412e:	497a      	ldr	r1, [pc, #488]	; (8004318 <getFrame+0x214>)
 8004130:	2033      	movs	r0, #51	; 0x33
 8004132:	f7fc fa6e 	bl	8000612 <MLX90640_GetFrameData>
 8004136:	f8c7 0c08 	str.w	r0, [r7, #3080]	; 0xc08
        if (status < 0) {
 800413a:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 800413e:	2b00      	cmp	r3, #0
 8004140:	da05      	bge.n	800414e <getFrame+0x4a>
            printf("Frame data fetch error: %d\n", status);
 8004142:	f8d7 1c08 	ldr.w	r1, [r7, #3080]	; 0xc08
 8004146:	4875      	ldr	r0, [pc, #468]	; (800431c <getFrame+0x218>)
 8004148:	f00a f856 	bl	800e1f8 <iprintf>
 800414c:	e0db      	b.n	8004306 <getFrame+0x202>
            return;
        }
        tr = MLX90640_GetTa(mlx90640Frame, &mlx90640) - TA_SHIFT;
 800414e:	4974      	ldr	r1, [pc, #464]	; (8004320 <getFrame+0x21c>)
 8004150:	4871      	ldr	r0, [pc, #452]	; (8004318 <getFrame+0x214>)
 8004152:	f7fd f837 	bl	80011c4 <MLX90640_GetTa>
 8004156:	eef0 7a40 	vmov.f32	s15, s0
 800415a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800415e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004162:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004166:	edc3 7a00 	vstr	s15, [r3]
        MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
 800416a:	f107 0308 	add.w	r3, r7, #8
 800416e:	461a      	mov	r2, r3
 8004170:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8004174:	edd3 0a00 	vldr	s1, [r3]
 8004178:	f607 4314 	addw	r3, r7, #3092	; 0xc14
 800417c:	ed93 0a00 	vldr	s0, [r3]
 8004180:	4967      	ldr	r1, [pc, #412]	; (8004320 <getFrame+0x21c>)
 8004182:	4865      	ldr	r0, [pc, #404]	; (8004318 <getFrame+0x214>)
 8004184:	f7fc fb64 	bl	8000850 <MLX90640_CalculateTo>
        MLX90640_BadPixelsCorrection(mlx90640.brokenPixels, mlx90640To, 1, &mlx90640);
 8004188:	f107 0108 	add.w	r1, r7, #8
 800418c:	4b64      	ldr	r3, [pc, #400]	; (8004320 <getFrame+0x21c>)
 800418e:	2201      	movs	r2, #1
 8004190:	4864      	ldr	r0, [pc, #400]	; (8004324 <getFrame+0x220>)
 8004192:	f7fd f8a7 	bl	80012e4 <MLX90640_BadPixelsCorrection>
        MLX90640_BadPixelsCorrection(mlx90640.outlierPixels, mlx90640To, 1, &mlx90640);
 8004196:	f107 0108 	add.w	r1, r7, #8
 800419a:	4b61      	ldr	r3, [pc, #388]	; (8004320 <getFrame+0x21c>)
 800419c:	2201      	movs	r2, #1
 800419e:	4862      	ldr	r0, [pc, #392]	; (8004328 <getFrame+0x224>)
 80041a0:	f7fd f8a0 	bl	80012e4 <MLX90640_BadPixelsCorrection>
    for (int i = 0; i < 2; i++) {
 80041a4:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80041a8:	3301      	adds	r3, #1
 80041aa:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80041ae:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	ddbb      	ble.n	800412e <getFrame+0x2a>
    }

    float minTemp = FLT_MAX, maxTemp = -FLT_MAX;
 80041b6:	4b5d      	ldr	r3, [pc, #372]	; (800432c <getFrame+0x228>)
 80041b8:	f607 4228 	addw	r2, r7, #3112	; 0xc28
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80041c2:	f607 4224 	addw	r2, r7, #3108	; 0xc24
 80041c6:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < HEIGHT * WIDTH; i++) {
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80041ce:	e042      	b.n	8004256 <getFrame+0x152>
        if (mlx90640To[i] < minTemp) minTemp = mlx90640To[i];
 80041d0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80041d4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80041d8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 80041e8:	ed93 7a00 	vldr	s14, [r3]
 80041ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f4:	dd0b      	ble.n	800420e <getFrame+0x10a>
 80041f6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80041fa:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80041fe:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f607 4228 	addw	r2, r7, #3112	; 0xc28
 800420c:	6013      	str	r3, [r2, #0]
        if (mlx90640To[i] > maxTemp) maxTemp = mlx90640To[i];
 800420e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004212:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8004216:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004226:	ed93 7a00 	vldr	s14, [r3]
 800422a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800422e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004232:	d50b      	bpl.n	800424c <getFrame+0x148>
 8004234:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004238:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800423c:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f607 4224 	addw	r2, r7, #3108	; 0xc24
 800424a:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < HEIGHT * WIDTH; i++) {
 800424c:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8004250:	3301      	adds	r3, #1
 8004252:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8004256:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800425a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425e:	dbb7      	blt.n	80041d0 <getFrame+0xcc>
    }

    for (int i = 0; i < HEIGHT; i++) {
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8004266:	e04a      	b.n	80042fe <getFrame+0x1fa>
        for (int j = 0; j < WIDTH; j++) {
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 800426e:	e03d      	b.n	80042ec <getFrame+0x1e8>
            float temp = mlx90640To[i * WIDTH + j];
 8004270:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800427a:	4413      	add	r3, r2
 800427c:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 8004280:	f6a2 4228 	subw	r2, r2, #3112	; 0xc28
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f607 420c 	addw	r2, r7, #3084	; 0xc0c
 800428e:	6013      	str	r3, [r2, #0]
            // Scale temperatures to 0-255 range without normalizing to 0-1
            framebuf[i][j] = (temp - minTemp) / (maxTemp - minTemp) * 255.0;
 8004290:	f607 430c 	addw	r3, r7, #3084	; 0xc0c
 8004294:	ed93 7a00 	vldr	s14, [r3]
 8004298:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042a4:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80042a8:	ed93 7a00 	vldr	s14, [r3]
 80042ac:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042bc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80042c0:	01db      	lsls	r3, r3, #7
 80042c2:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 80042c6:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	441a      	add	r2, r3
 80042ce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004330 <getFrame+0x22c>
 80042d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < WIDTH; j++) {
 80042e2:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80042e6:	3301      	adds	r3, #1
 80042e8:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 80042ec:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80042f0:	2b1f      	cmp	r3, #31
 80042f2:	ddbd      	ble.n	8004270 <getFrame+0x16c>
    for (int i = 0; i < HEIGHT; i++) {
 80042f4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80042f8:	3301      	adds	r3, #1
 80042fa:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 80042fe:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8004302:	2b17      	cmp	r3, #23
 8004304:	ddb0      	ble.n	8004268 <getFrame+0x164>
        }
    }
}
 8004306:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	3f733333 	.word	0x3f733333
 8004314:	41b93333 	.word	0x41b93333
 8004318:	200162b0 	.word	0x200162b0
 800431c:	080108c4 	.word	0x080108c4
 8004320:	20015034 	.word	0x20015034
 8004324:	2001629c 	.word	0x2001629c
 8004328:	200162a6 	.word	0x200162a6
 800432c:	7f7fffff 	.word	0x7f7fffff
 8004330:	437f0000 	.word	0x437f0000

08004334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004338:	b672      	cpsid	i
}
 800433a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800433c:	e7fe      	b.n	800433c <Error_Handler+0x8>
	...

08004340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_MspInit+0x44>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <HAL_MspInit+0x44>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_MspInit+0x44>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	607b      	str	r3, [r7, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_MspInit+0x44>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	4a08      	ldr	r2, [pc, #32]	; (8004384 <HAL_MspInit+0x44>)
 8004364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004368:	6453      	str	r3, [r2, #68]	; 0x44
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_MspInit+0x44>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800

08004388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800438c:	e7fe      	b.n	800438c <NMI_Handler+0x4>

0800438e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800438e:	b480      	push	{r7}
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004392:	e7fe      	b.n	8004392 <HardFault_Handler+0x4>

08004394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004398:	e7fe      	b.n	8004398 <MemManage_Handler+0x4>

0800439a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800439e:	e7fe      	b.n	800439e <BusFault_Handler+0x4>

080043a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043a4:	e7fe      	b.n	80043a4 <UsageFault_Handler+0x4>

080043a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043d4:	f000 f940 	bl	8004658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}

080043dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <_sbrk+0x5c>)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <_sbrk+0x60>)
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_sbrk+0x64>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <_sbrk+0x64>)
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <_sbrk+0x68>)
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <_sbrk+0x64>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d207      	bcs.n	800441c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800440c:	f00a f89c 	bl	800e548 <__errno>
 8004410:	4603      	mov	r3, r0
 8004412:	220c      	movs	r2, #12
 8004414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e009      	b.n	8004430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_sbrk+0x64>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <_sbrk+0x64>)
 800442c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20080000 	.word	0x20080000
 800443c:	00000800 	.word	0x00000800
 8004440:	20016934 	.word	0x20016934
 8004444:	20017000 	.word	0x20017000

08004448 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <SystemInit+0x20>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <SystemInit+0x20>)
 8004454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004470:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <MX_USART3_UART_Init+0x5c>)
 8004474:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 8004478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800447c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800447e:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 8004480:	2200      	movs	r2, #0
 8004482:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 8004486:	2200      	movs	r2, #0
 8004488:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800448a:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 800448c:	2200      	movs	r2, #0
 800448e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 8004492:	220c      	movs	r2, #12
 8004494:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 8004498:	2200      	movs	r2, #0
 800449a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 800449e:	2200      	movs	r2, #0
 80044a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044ae:	4805      	ldr	r0, [pc, #20]	; (80044c4 <MX_USART3_UART_Init+0x58>)
 80044b0:	f002 fbaa 	bl	8006c08 <HAL_UART_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80044ba:	f7ff ff3b 	bl	8004334 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20016938 	.word	0x20016938
 80044c8:	40004800 	.word	0x40004800

080044cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b0ae      	sub	sp, #184	; 0xb8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	2290      	movs	r2, #144	; 0x90
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f009 ffc9 	bl	800e484 <memset>
  if(uartHandle->Instance==USART3)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_UART_MspInit+0xb4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d13c      	bne.n	8004576 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80044fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004500:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004502:	2300      	movs	r3, #0
 8004504:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004506:	f107 0314 	add.w	r3, r7, #20
 800450a:	4618      	mov	r0, r3
 800450c:	f001 ff54 	bl	80063b8 <HAL_RCCEx_PeriphCLKConfig>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004516:	f7ff ff0d 	bl	8004334 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_UART_MspInit+0xb8>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a19      	ldr	r2, [pc, #100]	; (8004584 <HAL_UART_MspInit+0xb8>)
 8004520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <HAL_UART_MspInit+0xb8>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_UART_MspInit+0xb8>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <HAL_UART_MspInit+0xb8>)
 8004538:	f043 0308 	orr.w	r3, r3, #8
 800453c:	6313      	str	r3, [r2, #48]	; 0x30
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_UART_MspInit+0xb8>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800454a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800454e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004552:	2302      	movs	r3, #2
 8004554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800455e:	2303      	movs	r3, #3
 8004560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004564:	2307      	movs	r3, #7
 8004566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800456a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800456e:	4619      	mov	r1, r3
 8004570:	4805      	ldr	r0, [pc, #20]	; (8004588 <HAL_UART_MspInit+0xbc>)
 8004572:	f000 fa61 	bl	8004a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004576:	bf00      	nop
 8004578:	37b8      	adds	r7, #184	; 0xb8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40004800 	.word	0x40004800
 8004584:	40023800 	.word	0x40023800
 8004588:	40020c00 	.word	0x40020c00

0800458c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800458c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004590:	480d      	ldr	r0, [pc, #52]	; (80045c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004592:	490e      	ldr	r1, [pc, #56]	; (80045cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004594:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004598:	e002      	b.n	80045a0 <LoopCopyDataInit>

0800459a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800459a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800459c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800459e:	3304      	adds	r3, #4

080045a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045a4:	d3f9      	bcc.n	800459a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045a6:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045a8:	4c0b      	ldr	r4, [pc, #44]	; (80045d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045ac:	e001      	b.n	80045b2 <LoopFillZerobss>

080045ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045b0:	3204      	adds	r2, #4

080045b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045b4:	d3fb      	bcc.n	80045ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045b6:	f7ff ff47 	bl	8004448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ba:	f009 ffcb 	bl	800e554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045be:	f7ff fb15 	bl	8003bec <main>
  bx  lr    
 80045c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80045c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045cc:	200070fc 	.word	0x200070fc
  ldr r2, =_sidata
 80045d0:	080a03f8 	.word	0x080a03f8
  ldr r2, =_sbss
 80045d4:	20007100 	.word	0x20007100
  ldr r4, =_ebss
 80045d8:	20016ffc 	.word	0x20016ffc

080045dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045dc:	e7fe      	b.n	80045dc <ADC_IRQHandler>

080045de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045e2:	2003      	movs	r0, #3
 80045e4:	f000 f90a 	bl	80047fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045e8:	200f      	movs	r0, #15
 80045ea:	f000 f805 	bl	80045f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045ee:	f7ff fea7 	bl	8004340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_InitTick+0x54>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <HAL_InitTick+0x58>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4619      	mov	r1, r3
 800460a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800460e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f917 	bl	800484a <HAL_SYSTICK_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e00e      	b.n	8004644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0f      	cmp	r3, #15
 800462a:	d80a      	bhi.n	8004642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800462c:	2200      	movs	r2, #0
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	f000 f8ed 	bl	8004812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004638:	4a06      	ldr	r2, [pc, #24]	; (8004654 <HAL_InitTick+0x5c>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000004 	.word	0x20000004
 8004650:	2000000c 	.word	0x2000000c
 8004654:	20000008 	.word	0x20000008

08004658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_IncTick+0x20>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_IncTick+0x24>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4413      	add	r3, r2
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <HAL_IncTick+0x24>)
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	2000000c 	.word	0x2000000c
 800467c:	200169c0 	.word	0x200169c0

08004680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return uwTick;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_GetTick+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	200169c0 	.word	0x200169c0

08004698 <__NVIC_SetPriorityGrouping>:
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <__NVIC_SetPriorityGrouping+0x40>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046b4:	4013      	ands	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <__NVIC_SetPriorityGrouping+0x44>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046c6:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <__NVIC_SetPriorityGrouping+0x40>)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	60d3      	str	r3, [r2, #12]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00
 80046dc:	05fa0000 	.word	0x05fa0000

080046e0 <__NVIC_GetPriorityGrouping>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <__NVIC_GetPriorityGrouping+0x18>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	f003 0307 	and.w	r3, r3, #7
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <__NVIC_SetPriority>:
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	db0a      	blt.n	8004726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	490c      	ldr	r1, [pc, #48]	; (8004748 <__NVIC_SetPriority+0x4c>)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	440b      	add	r3, r1
 8004720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004724:	e00a      	b.n	800473c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <__NVIC_SetPriority+0x50>)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	3b04      	subs	r3, #4
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	440b      	add	r3, r1
 800473a:	761a      	strb	r2, [r3, #24]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000e100 	.word	0xe000e100
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <NVIC_EncodePriority>:
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f1c3 0307 	rsb	r3, r3, #7
 800476a:	2b04      	cmp	r3, #4
 800476c:	bf28      	it	cs
 800476e:	2304      	movcs	r3, #4
 8004770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3304      	adds	r3, #4
 8004776:	2b06      	cmp	r3, #6
 8004778:	d902      	bls.n	8004780 <NVIC_EncodePriority+0x30>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3b03      	subs	r3, #3
 800477e:	e000      	b.n	8004782 <NVIC_EncodePriority+0x32>
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	401a      	ands	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004798:	f04f 31ff 	mov.w	r1, #4294967295
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	43d9      	mvns	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a8:	4313      	orrs	r3, r2
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c8:	d301      	bcc.n	80047ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00f      	b.n	80047ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <SysTick_Config+0x40>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047d6:	210f      	movs	r1, #15
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	f7ff ff8e 	bl	80046fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <SysTick_Config+0x40>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <SysTick_Config+0x40>)
 80047e8:	2207      	movs	r2, #7
 80047ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000e010 	.word	0xe000e010

080047fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff47 	bl	8004698 <__NVIC_SetPriorityGrouping>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	4603      	mov	r3, r0
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004824:	f7ff ff5c 	bl	80046e0 <__NVIC_GetPriorityGrouping>
 8004828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	6978      	ldr	r0, [r7, #20]
 8004830:	f7ff ff8e 	bl	8004750 <NVIC_EncodePriority>
 8004834:	4602      	mov	r2, r0
 8004836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff5d 	bl	80046fc <__NVIC_SetPriority>
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffb0 	bl	80047b8 <SysTick_Config>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e054      	b.n	8004920 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	7f5b      	ldrb	r3, [r3, #29]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff f856 	bl	8003938 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	791b      	ldrb	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a22      	ldr	r2, [pc, #136]	; (8004928 <HAL_CRC_Init+0xc4>)
 80048a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0218 	bic.w	r2, r2, #24
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	e00c      	b.n	80048ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6899      	ldr	r1, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	461a      	mov	r2, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f834 	bl	800492c <HAL_CRCEx_Polynomial_Set>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e028      	b.n	8004920 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	795b      	ldrb	r3, [r3, #5]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f04f 32ff 	mov.w	r2, #4294967295
 80048de:	611a      	str	r2, [r3, #16]
 80048e0:	e004      	b.n	80048ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6912      	ldr	r2, [r2, #16]
 80048ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	04c11db7 	.word	0x04c11db7

0800492c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800493c:	231f      	movs	r3, #31
 800493e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004940:	bf00      	nop
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1e5a      	subs	r2, r3, #1
 8004946:	613a      	str	r2, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <HAL_CRCEx_Polynomial_Set+0x34>
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b18      	cmp	r3, #24
 8004964:	d846      	bhi.n	80049f4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	080049fb 	.word	0x080049fb
 8004970:	080049f5 	.word	0x080049f5
 8004974:	080049f5 	.word	0x080049f5
 8004978:	080049f5 	.word	0x080049f5
 800497c:	080049f5 	.word	0x080049f5
 8004980:	080049f5 	.word	0x080049f5
 8004984:	080049f5 	.word	0x080049f5
 8004988:	080049f5 	.word	0x080049f5
 800498c:	080049e9 	.word	0x080049e9
 8004990:	080049f5 	.word	0x080049f5
 8004994:	080049f5 	.word	0x080049f5
 8004998:	080049f5 	.word	0x080049f5
 800499c:	080049f5 	.word	0x080049f5
 80049a0:	080049f5 	.word	0x080049f5
 80049a4:	080049f5 	.word	0x080049f5
 80049a8:	080049f5 	.word	0x080049f5
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	080049f5 	.word	0x080049f5
 80049b4:	080049f5 	.word	0x080049f5
 80049b8:	080049f5 	.word	0x080049f5
 80049bc:	080049f5 	.word	0x080049f5
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	080049f5 	.word	0x080049f5
 80049cc:	080049d1 	.word	0x080049d1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d913      	bls.n	80049fe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80049da:	e010      	b.n	80049fe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b07      	cmp	r3, #7
 80049e0:	d90f      	bls.n	8004a02 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80049e6:	e00c      	b.n	8004a02 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d90b      	bls.n	8004a06 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80049f2:	e008      	b.n	8004a06 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	e006      	b.n	8004a08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80049fa:	bf00      	nop
 80049fc:	e004      	b.n	8004a08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a06:	bf00      	nop
  }
  if (status == HAL_OK)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 0118 	bic.w	r1, r3, #24
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b089      	sub	sp, #36	; 0x24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	e175      	b.n	8004d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a58:	2201      	movs	r2, #1
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	f040 8164 	bne.w	8004d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d005      	beq.n	8004a8e <HAL_GPIO_Init+0x56>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d130      	bne.n	8004af0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	2203      	movs	r2, #3
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 0201 	and.w	r2, r3, #1
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d017      	beq.n	8004b2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	2203      	movs	r2, #3
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d123      	bne.n	8004b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	08da      	lsrs	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3208      	adds	r2, #8
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	220f      	movs	r2, #15
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	08da      	lsrs	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3208      	adds	r2, #8
 8004b7a:	69b9      	ldr	r1, [r7, #24]
 8004b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0203 	and.w	r2, r3, #3
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80be 	beq.w	8004d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc2:	4b66      	ldr	r3, [pc, #408]	; (8004d5c <HAL_GPIO_Init+0x324>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	4a65      	ldr	r2, [pc, #404]	; (8004d5c <HAL_GPIO_Init+0x324>)
 8004bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bce:	4b63      	ldr	r3, [pc, #396]	; (8004d5c <HAL_GPIO_Init+0x324>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004bda:	4a61      	ldr	r2, [pc, #388]	; (8004d60 <HAL_GPIO_Init+0x328>)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	3302      	adds	r3, #2
 8004be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_GPIO_Init+0x32c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d037      	beq.n	8004c76 <HAL_GPIO_Init+0x23e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a57      	ldr	r2, [pc, #348]	; (8004d68 <HAL_GPIO_Init+0x330>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d031      	beq.n	8004c72 <HAL_GPIO_Init+0x23a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a56      	ldr	r2, [pc, #344]	; (8004d6c <HAL_GPIO_Init+0x334>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02b      	beq.n	8004c6e <HAL_GPIO_Init+0x236>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a55      	ldr	r2, [pc, #340]	; (8004d70 <HAL_GPIO_Init+0x338>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d025      	beq.n	8004c6a <HAL_GPIO_Init+0x232>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a54      	ldr	r2, [pc, #336]	; (8004d74 <HAL_GPIO_Init+0x33c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01f      	beq.n	8004c66 <HAL_GPIO_Init+0x22e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a53      	ldr	r2, [pc, #332]	; (8004d78 <HAL_GPIO_Init+0x340>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d019      	beq.n	8004c62 <HAL_GPIO_Init+0x22a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a52      	ldr	r2, [pc, #328]	; (8004d7c <HAL_GPIO_Init+0x344>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_GPIO_Init+0x226>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a51      	ldr	r2, [pc, #324]	; (8004d80 <HAL_GPIO_Init+0x348>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00d      	beq.n	8004c5a <HAL_GPIO_Init+0x222>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a50      	ldr	r2, [pc, #320]	; (8004d84 <HAL_GPIO_Init+0x34c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <HAL_GPIO_Init+0x21e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4f      	ldr	r2, [pc, #316]	; (8004d88 <HAL_GPIO_Init+0x350>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_GPIO_Init+0x21a>
 8004c4e:	2309      	movs	r3, #9
 8004c50:	e012      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c52:	230a      	movs	r3, #10
 8004c54:	e010      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c56:	2308      	movs	r3, #8
 8004c58:	e00e      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c5a:	2307      	movs	r3, #7
 8004c5c:	e00c      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c5e:	2306      	movs	r3, #6
 8004c60:	e00a      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c62:	2305      	movs	r3, #5
 8004c64:	e008      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c66:	2304      	movs	r3, #4
 8004c68:	e006      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e004      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e002      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <HAL_GPIO_Init+0x240>
 8004c76:	2300      	movs	r3, #0
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	f002 0203 	and.w	r2, r2, #3
 8004c7e:	0092      	lsls	r2, r2, #2
 8004c80:	4093      	lsls	r3, r2
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c88:	4935      	ldr	r1, [pc, #212]	; (8004d60 <HAL_GPIO_Init+0x328>)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	089b      	lsrs	r3, r3, #2
 8004c8e:	3302      	adds	r3, #2
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c96:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cba:	4a34      	ldr	r2, [pc, #208]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cc0:	4b32      	ldr	r3, [pc, #200]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ce4:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cea:	4b28      	ldr	r3, [pc, #160]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d0e:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d14:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <HAL_GPIO_Init+0x354>)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3301      	adds	r3, #1
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	f67f ae86 	bls.w	8004a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	3724      	adds	r7, #36	; 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40013800 	.word	0x40013800
 8004d64:	40020000 	.word	0x40020000
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	40020800 	.word	0x40020800
 8004d70:	40020c00 	.word	0x40020c00
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40021400 	.word	0x40021400
 8004d7c:	40021800 	.word	0x40021800
 8004d80:	40021c00 	.word	0x40021c00
 8004d84:	40022000 	.word	0x40022000
 8004d88:	40022400 	.word	0x40022400
 8004d8c:	40013c00 	.word	0x40013c00

08004d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e07f      	b.n	8004ea2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fe fe4e 	bl	8003a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2224      	movs	r2, #36	; 0x24
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004de0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004df0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d107      	bne.n	8004e0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	e006      	b.n	8004e18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d104      	bne.n	8004e2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <HAL_I2C_Init+0x11c>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	02008000 	.word	0x02008000

08004eb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	817b      	strh	r3, [r7, #10]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	813b      	strh	r3, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	f040 80f9 	bne.w	80050ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_I2C_Mem_Write+0x34>
 8004ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d105      	bne.n	8004ef0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0ed      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_I2C_Mem_Write+0x4e>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0e6      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f06:	f7ff fbbb 	bl	8004680 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2319      	movs	r3, #25
 8004f12:	2201      	movs	r2, #1
 8004f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fac3 	bl	80054a4 <I2C_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0d1      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2221      	movs	r2, #33	; 0x21
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2240      	movs	r2, #64	; 0x40
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a3a      	ldr	r2, [r7, #32]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f50:	88f8      	ldrh	r0, [r7, #6]
 8004f52:	893a      	ldrh	r2, [r7, #8]
 8004f54:	8979      	ldrh	r1, [r7, #10]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4603      	mov	r3, r0
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f9d3 	bl	800530c <I2C_RequestMemoryWrite>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0a9      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2bff      	cmp	r3, #255	; 0xff
 8004f80:	d90e      	bls.n	8004fa0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	22ff      	movs	r2, #255	; 0xff
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	8979      	ldrh	r1, [r7, #10]
 8004f90:	2300      	movs	r3, #0
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fc1f 	bl	80057dc <I2C_TransferConfig>
 8004f9e:	e00f      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	8979      	ldrh	r1, [r7, #10]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 fc0e 	bl	80057dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 faad 	bl	8005524 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e07b      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d034      	beq.n	8005078 <HAL_I2C_Mem_Write+0x1c8>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d130      	bne.n	8005078 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	2200      	movs	r2, #0
 800501e:	2180      	movs	r1, #128	; 0x80
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fa3f 	bl	80054a4 <I2C_WaitOnFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e04d      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	2bff      	cmp	r3, #255	; 0xff
 8005038:	d90e      	bls.n	8005058 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	22ff      	movs	r2, #255	; 0xff
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005044:	b2da      	uxtb	r2, r3
 8005046:	8979      	ldrh	r1, [r7, #10]
 8005048:	2300      	movs	r3, #0
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 fbc3 	bl	80057dc <I2C_TransferConfig>
 8005056:	e00f      	b.n	8005078 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005066:	b2da      	uxtb	r2, r3
 8005068:	8979      	ldrh	r1, [r7, #10]
 800506a:	2300      	movs	r3, #0
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fbb2 	bl	80057dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d19e      	bne.n	8004fc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa8c 	bl	80055a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e01a      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2220      	movs	r2, #32
 800509c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <HAL_I2C_Mem_Write+0x224>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	fe00e800 	.word	0xfe00e800

080050d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	4608      	mov	r0, r1
 80050e2:	4611      	mov	r1, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	817b      	strh	r3, [r7, #10]
 80050ea:	460b      	mov	r3, r1
 80050ec:	813b      	strh	r3, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	f040 80fd 	bne.w	80052fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_I2C_Mem_Read+0x34>
 8005106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005112:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0f1      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_I2C_Mem_Read+0x4e>
 8005122:	2302      	movs	r3, #2
 8005124:	e0ea      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800512e:	f7ff faa7 	bl	8004680 <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2319      	movs	r3, #25
 800513a:	2201      	movs	r2, #1
 800513c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f9af 	bl	80054a4 <I2C_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0d5      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2222      	movs	r2, #34	; 0x22
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2240      	movs	r2, #64	; 0x40
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005178:	88f8      	ldrh	r0, [r7, #6]
 800517a:	893a      	ldrh	r2, [r7, #8]
 800517c:	8979      	ldrh	r1, [r7, #10]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	4603      	mov	r3, r0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f913 	bl	80053b4 <I2C_RequestMemoryRead>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0ad      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2bff      	cmp	r3, #255	; 0xff
 80051a8:	d90e      	bls.n	80051c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	8979      	ldrh	r1, [r7, #10]
 80051b8:	4b52      	ldr	r3, [pc, #328]	; (8005304 <HAL_I2C_Mem_Read+0x22c>)
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fb0b 	bl	80057dc <I2C_TransferConfig>
 80051c6:	e00f      	b.n	80051e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	8979      	ldrh	r1, [r7, #10]
 80051da:	4b4a      	ldr	r3, [pc, #296]	; (8005304 <HAL_I2C_Mem_Read+0x22c>)
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fafa 	bl	80057dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	2200      	movs	r2, #0
 80051f0:	2104      	movs	r1, #4
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f956 	bl	80054a4 <I2C_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07c      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d034      	beq.n	80052a8 <HAL_I2C_Mem_Read+0x1d0>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d130      	bne.n	80052a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	2200      	movs	r2, #0
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f927 	bl	80054a4 <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e04d      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	2bff      	cmp	r3, #255	; 0xff
 8005268:	d90e      	bls.n	8005288 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	22ff      	movs	r2, #255	; 0xff
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	b2da      	uxtb	r2, r3
 8005276:	8979      	ldrh	r1, [r7, #10]
 8005278:	2300      	movs	r3, #0
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 faab 	bl	80057dc <I2C_TransferConfig>
 8005286:	e00f      	b.n	80052a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005296:	b2da      	uxtb	r2, r3
 8005298:	8979      	ldrh	r1, [r7, #10]
 800529a:	2300      	movs	r3, #0
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fa9a 	bl	80057dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d19a      	bne.n	80051e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f974 	bl	80055a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e01a      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2220      	movs	r2, #32
 80052cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_I2C_Mem_Read+0x230>)
 80052da:	400b      	ands	r3, r1
 80052dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e000      	b.n	80052fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
  }
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	80002400 	.word	0x80002400
 8005308:	fe00e800 	.word	0xfe00e800

0800530c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	461a      	mov	r2, r3
 800531a:	4603      	mov	r3, r0
 800531c:	817b      	strh	r3, [r7, #10]
 800531e:	460b      	mov	r3, r1
 8005320:	813b      	strh	r3, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	8979      	ldrh	r1, [r7, #10]
 800532c:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <I2C_RequestMemoryWrite+0xa4>)
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 fa51 	bl	80057dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f8f0 	bl	8005524 <I2C_WaitOnTXISFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e02c      	b.n	80053a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005354:	893b      	ldrh	r3, [r7, #8]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	629a      	str	r2, [r3, #40]	; 0x28
 800535e:	e015      	b.n	800538c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005360:	893b      	ldrh	r3, [r7, #8]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b29b      	uxth	r3, r3
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f8d6 	bl	8005524 <I2C_WaitOnTXISFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e012      	b.n	80053a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005382:	893b      	ldrh	r3, [r7, #8]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2200      	movs	r2, #0
 8005394:	2180      	movs	r1, #128	; 0x80
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f884 	bl	80054a4 <I2C_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	80002000 	.word	0x80002000

080053b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	817b      	strh	r3, [r7, #10]
 80053c6:	460b      	mov	r3, r1
 80053c8:	813b      	strh	r3, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	8979      	ldrh	r1, [r7, #10]
 80053d4:	4b20      	ldr	r3, [pc, #128]	; (8005458 <I2C_RequestMemoryRead+0xa4>)
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f9fe 	bl	80057dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	69b9      	ldr	r1, [r7, #24]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f89d 	bl	8005524 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e02c      	b.n	800544e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d105      	bne.n	8005406 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053fa:	893b      	ldrh	r3, [r7, #8]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28
 8005404:	e015      	b.n	8005432 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	b29b      	uxth	r3, r3
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f883 	bl	8005524 <I2C_WaitOnTXISFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e012      	b.n	800544e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2200      	movs	r2, #0
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f831 	bl	80054a4 <I2C_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	80002000 	.word	0x80002000

0800545c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b02      	cmp	r3, #2
 8005470:	d103      	bne.n	800547a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d007      	beq.n	8005498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	619a      	str	r2, [r3, #24]
  }
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	4613      	mov	r3, r2
 80054b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b4:	e022      	b.n	80054fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d01e      	beq.n	80054fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7ff f8df 	bl	8004680 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d113      	bne.n	80054fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e00f      	b.n	800551c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4013      	ands	r3, r2
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	429a      	cmp	r2, r3
 8005518:	d0cd      	beq.n	80054b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005530:	e02c      	b.n	800558c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f870 	bl	800561c <I2C_IsErrorOccurred>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e02a      	b.n	800559c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d01e      	beq.n	800558c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7ff f897 	bl	8004680 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d113      	bne.n	800558c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e007      	b.n	800559c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d1cb      	bne.n	8005532 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b0:	e028      	b.n	8005604 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f830 	bl	800561c <I2C_IsErrorOccurred>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e026      	b.n	8005614 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7ff f85b 	bl	8004680 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d113      	bne.n	8005604 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e007      	b.n	8005614 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b20      	cmp	r3, #32
 8005610:	d1cf      	bne.n	80055b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	; 0x28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d068      	beq.n	800571a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2210      	movs	r2, #16
 800564e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005650:	e049      	b.n	80056e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d045      	beq.n	80056e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7ff f811 	bl	8004680 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <I2C_IsErrorOccurred+0x54>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d13a      	bne.n	80056e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005682:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800568e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005692:	d121      	bne.n	80056d8 <I2C_IsErrorOccurred+0xbc>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800569a:	d01d      	beq.n	80056d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800569c:	7cfb      	ldrb	r3, [r7, #19]
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d01a      	beq.n	80056d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056b2:	f7fe ffe5 	bl	8004680 <HAL_GetTick>
 80056b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b8:	e00e      	b.n	80056d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056ba:	f7fe ffe1 	bl	8004680 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b19      	cmp	r3, #25
 80056c6:	d907      	bls.n	80056d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	f043 0320 	orr.w	r3, r3, #32
 80056ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80056d6:	e006      	b.n	80056e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d1e9      	bne.n	80056ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d003      	beq.n	80056fc <I2C_IsErrorOccurred+0xe0>
 80056f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0aa      	beq.n	8005652 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2220      	movs	r2, #32
 800570a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	f043 0308 	orr.w	r3, r3, #8
 8005754:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800575e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	f043 0302 	orr.w	r3, r3, #2
 8005776:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01c      	beq.n	80057ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff fe63 	bl	800545c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <I2C_IsErrorOccurred+0x1bc>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80057ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3728      	adds	r7, #40	; 0x28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	fe00e800 	.word	0xfe00e800

080057dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	817b      	strh	r3, [r7, #10]
 80057ea:	4613      	mov	r3, r2
 80057ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ee:	897b      	ldrh	r3, [r7, #10]
 80057f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057f4:	7a7b      	ldrb	r3, [r7, #9]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	4313      	orrs	r3, r2
 8005806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800580a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	0d5b      	lsrs	r3, r3, #21
 8005816:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800581a:	4b08      	ldr	r3, [pc, #32]	; (800583c <I2C_TransferConfig+0x60>)
 800581c:	430b      	orrs	r3, r1
 800581e:	43db      	mvns	r3, r3
 8005820:	ea02 0103 	and.w	r1, r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	03ff63ff 	.word	0x03ff63ff

08005840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b20      	cmp	r3, #32
 8005854:	d138      	bne.n	80058c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005860:	2302      	movs	r3, #2
 8005862:	e032      	b.n	80058ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2224      	movs	r2, #36	; 0x24
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005892:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e000      	b.n	80058ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
  }
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d139      	bne.n	8005960 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e033      	b.n	8005962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2224      	movs	r2, #36	; 0x24
 8005906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005928:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	4b23      	ldr	r3, [pc, #140]	; (8005a08 <HAL_PWREx_EnableOverDrive+0x98>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <HAL_PWREx_EnableOverDrive+0x98>)
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005984:	6413      	str	r3, [r2, #64]	; 0x40
 8005986:	4b20      	ldr	r3, [pc, #128]	; (8005a08 <HAL_PWREx_EnableOverDrive+0x98>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005992:	4b1e      	ldr	r3, [pc, #120]	; (8005a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800599e:	f7fe fe6f 	bl	8004680 <HAL_GetTick>
 80059a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059a4:	e009      	b.n	80059ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059a6:	f7fe fe6b 	bl	8004680 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059b4:	d901      	bls.n	80059ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e022      	b.n	8005a00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059ba:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c6:	d1ee      	bne.n	80059a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a0f      	ldr	r2, [pc, #60]	; (8005a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059d4:	f7fe fe54 	bl	8004680 <HAL_GetTick>
 80059d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059da:	e009      	b.n	80059f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059dc:	f7fe fe50 	bl	8004680 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ea:	d901      	bls.n	80059f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e007      	b.n	8005a00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059fc:	d1ee      	bne.n	80059dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40007000 	.word	0x40007000

08005a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e29b      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8087 	beq.w	8005b42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a34:	4b96      	ldr	r3, [pc, #600]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 030c 	and.w	r3, r3, #12
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d00c      	beq.n	8005a5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a40:	4b93      	ldr	r3, [pc, #588]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d112      	bne.n	8005a72 <HAL_RCC_OscConfig+0x62>
 8005a4c:	4b90      	ldr	r3, [pc, #576]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a58:	d10b      	bne.n	8005a72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5a:	4b8d      	ldr	r3, [pc, #564]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d06c      	beq.n	8005b40 <HAL_RCC_OscConfig+0x130>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d168      	bne.n	8005b40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e275      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCC_OscConfig+0x7a>
 8005a7c:	4b84      	ldr	r3, [pc, #528]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a83      	ldr	r2, [pc, #524]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e02e      	b.n	8005ae8 <HAL_RCC_OscConfig+0xd8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0x9c>
 8005a92:	4b7f      	ldr	r3, [pc, #508]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a7e      	ldr	r2, [pc, #504]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	4b7c      	ldr	r3, [pc, #496]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a7b      	ldr	r2, [pc, #492]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e01d      	b.n	8005ae8 <HAL_RCC_OscConfig+0xd8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCC_OscConfig+0xc0>
 8005ab6:	4b76      	ldr	r3, [pc, #472]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a75      	ldr	r2, [pc, #468]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4b73      	ldr	r3, [pc, #460]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a72      	ldr	r2, [pc, #456]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e00b      	b.n	8005ae8 <HAL_RCC_OscConfig+0xd8>
 8005ad0:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6e      	ldr	r2, [pc, #440]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	4b6c      	ldr	r3, [pc, #432]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6b      	ldr	r2, [pc, #428]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d013      	beq.n	8005b18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fe fdc6 	bl	8004680 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af8:	f7fe fdc2 	bl	8004680 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b64      	cmp	r3, #100	; 0x64
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e229      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0a:	4b61      	ldr	r3, [pc, #388]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0xe8>
 8005b16:	e014      	b.n	8005b42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b18:	f7fe fdb2 	bl	8004680 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b20:	f7fe fdae 	bl	8004680 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	; 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e215      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b32:	4b57      	ldr	r3, [pc, #348]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0x110>
 8005b3e:	e000      	b.n	8005b42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d069      	beq.n	8005c22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b4e:	4b50      	ldr	r3, [pc, #320]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5a:	4b4d      	ldr	r3, [pc, #308]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d11c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x190>
 8005b66:	4b4a      	ldr	r3, [pc, #296]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d116      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b72:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_RCC_OscConfig+0x17a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d001      	beq.n	8005b8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e1e9      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	493d      	ldr	r1, [pc, #244]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9e:	e040      	b.n	8005c22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d023      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba8:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a38      	ldr	r2, [pc, #224]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fe fd64 	bl	8004680 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bbc:	f7fe fd60 	bl	8004680 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e1c7      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bce:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bda:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4929      	ldr	r1, [pc, #164]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]
 8005bee:	e018      	b.n	8005c22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf0:	4b27      	ldr	r3, [pc, #156]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a26      	ldr	r2, [pc, #152]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fe fd40 	bl	8004680 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c04:	f7fe fd3c 	bl	8004680 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e1a3      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c16:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d038      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d019      	beq.n	8005c6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c36:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c42:	f7fe fd1d 	bl	8004680 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4a:	f7fe fd19 	bl	8004680 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e180      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_RCC_OscConfig+0x23a>
 8005c68:	e01a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c76:	f7fe fd03 	bl	8004680 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c7c:	e00a      	b.n	8005c94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c7e:	f7fe fcff 	bl	8004680 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d903      	bls.n	8005c94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e166      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
 8005c90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c94:	4b92      	ldr	r3, [pc, #584]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ee      	bne.n	8005c7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80a4 	beq.w	8005df6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cae:	4b8c      	ldr	r3, [pc, #560]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	4b89      	ldr	r3, [pc, #548]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	4a88      	ldr	r2, [pc, #544]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc6:	4b86      	ldr	r3, [pc, #536]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	60bb      	str	r3, [r7, #8]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cd6:	4b83      	ldr	r3, [pc, #524]	; (8005ee4 <HAL_RCC_OscConfig+0x4d4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d118      	bne.n	8005d14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ce2:	4b80      	ldr	r3, [pc, #512]	; (8005ee4 <HAL_RCC_OscConfig+0x4d4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a7f      	ldr	r2, [pc, #508]	; (8005ee4 <HAL_RCC_OscConfig+0x4d4>)
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cee:	f7fe fcc7 	bl	8004680 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf6:	f7fe fcc3 	bl	8004680 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b64      	cmp	r3, #100	; 0x64
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e12a      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d08:	4b76      	ldr	r3, [pc, #472]	; (8005ee4 <HAL_RCC_OscConfig+0x4d4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCC_OscConfig+0x31a>
 8005d1c:	4b70      	ldr	r3, [pc, #448]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	4a6f      	ldr	r2, [pc, #444]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	6713      	str	r3, [r2, #112]	; 0x70
 8005d28:	e02d      	b.n	8005d86 <HAL_RCC_OscConfig+0x376>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0x33c>
 8005d32:	4b6b      	ldr	r3, [pc, #428]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	4a6a      	ldr	r2, [pc, #424]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3e:	4b68      	ldr	r3, [pc, #416]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	4a67      	ldr	r2, [pc, #412]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d44:	f023 0304 	bic.w	r3, r3, #4
 8005d48:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4a:	e01c      	b.n	8005d86 <HAL_RCC_OscConfig+0x376>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b05      	cmp	r3, #5
 8005d52:	d10c      	bne.n	8005d6e <HAL_RCC_OscConfig+0x35e>
 8005d54:	4b62      	ldr	r3, [pc, #392]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	4a61      	ldr	r2, [pc, #388]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d5a:	f043 0304 	orr.w	r3, r3, #4
 8005d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d60:	4b5f      	ldr	r3, [pc, #380]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	4a5e      	ldr	r2, [pc, #376]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d6c:	e00b      	b.n	8005d86 <HAL_RCC_OscConfig+0x376>
 8005d6e:	4b5c      	ldr	r3, [pc, #368]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	4a5b      	ldr	r2, [pc, #364]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	6713      	str	r3, [r2, #112]	; 0x70
 8005d7a:	4b59      	ldr	r3, [pc, #356]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	4a58      	ldr	r2, [pc, #352]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005d80:	f023 0304 	bic.w	r3, r3, #4
 8005d84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d015      	beq.n	8005dba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8e:	f7fe fc77 	bl	8004680 <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	e00a      	b.n	8005dac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d96:	f7fe fc73 	bl	8004680 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e0d8      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dac:	4b4c      	ldr	r3, [pc, #304]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0ee      	beq.n	8005d96 <HAL_RCC_OscConfig+0x386>
 8005db8:	e014      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dba:	f7fe fc61 	bl	8004680 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc0:	e00a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc2:	f7fe fc5d 	bl	8004680 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e0c2      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd8:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1ee      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d105      	bne.n	8005df6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dea:	4b3d      	ldr	r3, [pc, #244]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	4a3c      	ldr	r2, [pc, #240]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80ae 	beq.w	8005f5c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e00:	4b37      	ldr	r3, [pc, #220]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d06d      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d14b      	bne.n	8005eac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e14:	4b32      	ldr	r3, [pc, #200]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a31      	ldr	r2, [pc, #196]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fe fc2e 	bl	8004680 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fe fc2a 	bl	8004680 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e091      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	061b      	lsls	r3, r3, #24
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	071b      	lsls	r3, r3, #28
 8005e72:	491b      	ldr	r1, [pc, #108]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e78:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a18      	ldr	r2, [pc, #96]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fe fbfc 	bl	8004680 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fe fbf8 	bl	8004680 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e05f      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0x47c>
 8005eaa:	e057      	b.n	8005f5c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0b      	ldr	r2, [pc, #44]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fe fbe2 	bl	8004680 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fe fbde 	bl	8004680 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e045      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <HAL_RCC_OscConfig+0x4d0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4b0>
 8005ede:	e03d      	b.n	8005f5c <HAL_RCC_OscConfig+0x54c>
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ee8:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <HAL_RCC_OscConfig+0x558>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d030      	beq.n	8005f58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d129      	bne.n	8005f58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d122      	bne.n	8005f58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d119      	bne.n	8005f58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	3b01      	subs	r3, #1
 8005f32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d10f      	bne.n	8005f58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d107      	bne.n	8005f58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40023800 	.word	0x40023800

08005f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0d0      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f84:	4b6a      	ldr	r3, [pc, #424]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d910      	bls.n	8005fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f92:	4b67      	ldr	r3, [pc, #412]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 020f 	bic.w	r2, r3, #15
 8005f9a:	4965      	ldr	r1, [pc, #404]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa2:	4b63      	ldr	r3, [pc, #396]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0b8      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d020      	beq.n	8006002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fcc:	4b59      	ldr	r3, [pc, #356]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a58      	ldr	r2, [pc, #352]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fe4:	4b53      	ldr	r3, [pc, #332]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4a52      	ldr	r2, [pc, #328]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8005fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff0:	4b50      	ldr	r3, [pc, #320]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	494d      	ldr	r1, [pc, #308]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d040      	beq.n	8006090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d107      	bne.n	8006026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	4b47      	ldr	r3, [pc, #284]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d115      	bne.n	800604e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e07f      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d107      	bne.n	800603e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602e:	4b41      	ldr	r3, [pc, #260]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e073      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603e:	4b3d      	ldr	r3, [pc, #244]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e06b      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800604e:	4b39      	ldr	r3, [pc, #228]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f023 0203 	bic.w	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4936      	ldr	r1, [pc, #216]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006060:	f7fe fb0e 	bl	8004680 <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006066:	e00a      	b.n	800607e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006068:	f7fe fb0a 	bl	8004680 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	; 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e053      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607e:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 020c 	and.w	r2, r3, #12
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	429a      	cmp	r2, r3
 800608e:	d1eb      	bne.n	8006068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006090:	4b27      	ldr	r3, [pc, #156]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d210      	bcs.n	80060c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609e:	4b24      	ldr	r3, [pc, #144]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f023 020f 	bic.w	r2, r3, #15
 80060a6:	4922      	ldr	r1, [pc, #136]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e032      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060cc:	4b19      	ldr	r3, [pc, #100]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4916      	ldr	r1, [pc, #88]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d009      	beq.n	80060fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ea:	4b12      	ldr	r3, [pc, #72]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	490e      	ldr	r1, [pc, #56]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060fe:	f000 f821 	bl	8006144 <HAL_RCC_GetSysClockFreq>
 8006102:	4602      	mov	r2, r0
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	091b      	lsrs	r3, r3, #4
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	490a      	ldr	r1, [pc, #40]	; (8006138 <HAL_RCC_ClockConfig+0x1cc>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	4a09      	ldr	r2, [pc, #36]	; (800613c <HAL_RCC_ClockConfig+0x1d0>)
 8006118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <HAL_RCC_ClockConfig+0x1d4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe fa6a 	bl	80045f8 <HAL_InitTick>

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40023c00 	.word	0x40023c00
 8006134:	40023800 	.word	0x40023800
 8006138:	08010910 	.word	0x08010910
 800613c:	20000004 	.word	0x20000004
 8006140:	20000008 	.word	0x20000008

08006144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006148:	b094      	sub	sp, #80	; 0x50
 800614a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	647b      	str	r3, [r7, #68]	; 0x44
 8006150:	2300      	movs	r3, #0
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006154:	2300      	movs	r3, #0
 8006156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800615c:	4b79      	ldr	r3, [pc, #484]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 030c 	and.w	r3, r3, #12
 8006164:	2b08      	cmp	r3, #8
 8006166:	d00d      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x40>
 8006168:	2b08      	cmp	r3, #8
 800616a:	f200 80e1 	bhi.w	8006330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0x34>
 8006172:	2b04      	cmp	r3, #4
 8006174:	d003      	beq.n	800617e <HAL_RCC_GetSysClockFreq+0x3a>
 8006176:	e0db      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006178:	4b73      	ldr	r3, [pc, #460]	; (8006348 <HAL_RCC_GetSysClockFreq+0x204>)
 800617a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800617c:	e0db      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800617e:	4b73      	ldr	r3, [pc, #460]	; (800634c <HAL_RCC_GetSysClockFreq+0x208>)
 8006180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006182:	e0d8      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006184:	4b6f      	ldr	r3, [pc, #444]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800618c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800618e:	4b6d      	ldr	r3, [pc, #436]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d063      	beq.n	8006262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619a:	4b6a      	ldr	r3, [pc, #424]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	099b      	lsrs	r3, r3, #6
 80061a0:	2200      	movs	r2, #0
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061b6:	4622      	mov	r2, r4
 80061b8:	462b      	mov	r3, r5
 80061ba:	f04f 0000 	mov.w	r0, #0
 80061be:	f04f 0100 	mov.w	r1, #0
 80061c2:	0159      	lsls	r1, r3, #5
 80061c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c8:	0150      	lsls	r0, r2, #5
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4621      	mov	r1, r4
 80061d0:	1a51      	subs	r1, r2, r1
 80061d2:	6139      	str	r1, [r7, #16]
 80061d4:	4629      	mov	r1, r5
 80061d6:	eb63 0301 	sbc.w	r3, r3, r1
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061e8:	4659      	mov	r1, fp
 80061ea:	018b      	lsls	r3, r1, #6
 80061ec:	4651      	mov	r1, sl
 80061ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061f2:	4651      	mov	r1, sl
 80061f4:	018a      	lsls	r2, r1, #6
 80061f6:	4651      	mov	r1, sl
 80061f8:	ebb2 0801 	subs.w	r8, r2, r1
 80061fc:	4659      	mov	r1, fp
 80061fe:	eb63 0901 	sbc.w	r9, r3, r1
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800620e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006216:	4690      	mov	r8, r2
 8006218:	4699      	mov	r9, r3
 800621a:	4623      	mov	r3, r4
 800621c:	eb18 0303 	adds.w	r3, r8, r3
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	462b      	mov	r3, r5
 8006224:	eb49 0303 	adc.w	r3, r9, r3
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006236:	4629      	mov	r1, r5
 8006238:	024b      	lsls	r3, r1, #9
 800623a:	4621      	mov	r1, r4
 800623c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006240:	4621      	mov	r1, r4
 8006242:	024a      	lsls	r2, r1, #9
 8006244:	4610      	mov	r0, r2
 8006246:	4619      	mov	r1, r3
 8006248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624a:	2200      	movs	r2, #0
 800624c:	62bb      	str	r3, [r7, #40]	; 0x28
 800624e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006254:	f7fa f84c 	bl	80002f0 <__aeabi_uldivmod>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4613      	mov	r3, r2
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	e058      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006262:	4b38      	ldr	r3, [pc, #224]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	099b      	lsrs	r3, r3, #6
 8006268:	2200      	movs	r2, #0
 800626a:	4618      	mov	r0, r3
 800626c:	4611      	mov	r1, r2
 800626e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	2300      	movs	r3, #0
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
 8006278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	f04f 0000 	mov.w	r0, #0
 8006284:	f04f 0100 	mov.w	r1, #0
 8006288:	0159      	lsls	r1, r3, #5
 800628a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800628e:	0150      	lsls	r0, r2, #5
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4641      	mov	r1, r8
 8006296:	ebb2 0a01 	subs.w	sl, r2, r1
 800629a:	4649      	mov	r1, r9
 800629c:	eb63 0b01 	sbc.w	fp, r3, r1
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062b4:	ebb2 040a 	subs.w	r4, r2, sl
 80062b8:	eb63 050b 	sbc.w	r5, r3, fp
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	00eb      	lsls	r3, r5, #3
 80062c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ca:	00e2      	lsls	r2, r4, #3
 80062cc:	4614      	mov	r4, r2
 80062ce:	461d      	mov	r5, r3
 80062d0:	4643      	mov	r3, r8
 80062d2:	18e3      	adds	r3, r4, r3
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	464b      	mov	r3, r9
 80062d8:	eb45 0303 	adc.w	r3, r5, r3
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062ea:	4629      	mov	r1, r5
 80062ec:	028b      	lsls	r3, r1, #10
 80062ee:	4621      	mov	r1, r4
 80062f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062f4:	4621      	mov	r1, r4
 80062f6:	028a      	lsls	r2, r1, #10
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fe:	2200      	movs	r2, #0
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	61fa      	str	r2, [r7, #28]
 8006304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006308:	f7f9 fff2 	bl	80002f0 <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4613      	mov	r3, r2
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	3301      	adds	r3, #1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800632e:	e002      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCC_GetSysClockFreq+0x204>)
 8006332:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006338:	4618      	mov	r0, r3
 800633a:	3750      	adds	r7, #80	; 0x50
 800633c:	46bd      	mov	sp, r7
 800633e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	00f42400 	.word	0x00f42400
 800634c:	007a1200 	.word	0x007a1200

08006350 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_RCC_GetHCLKFreq+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000004 	.word	0x20000004

08006368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800636c:	f7ff fff0 	bl	8006350 <HAL_RCC_GetHCLKFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	0a9b      	lsrs	r3, r3, #10
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	4903      	ldr	r1, [pc, #12]	; (800638c <HAL_RCC_GetPCLK1Freq+0x24>)
 800637e:	5ccb      	ldrb	r3, [r1, r3]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40023800 	.word	0x40023800
 800638c:	08010920 	.word	0x08010920

08006390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006394:	f7ff ffdc 	bl	8006350 <HAL_RCC_GetHCLKFreq>
 8006398:	4602      	mov	r2, r0
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	0b5b      	lsrs	r3, r3, #13
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	4903      	ldr	r1, [pc, #12]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063a6:	5ccb      	ldrb	r3, [r1, r3]
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40023800 	.word	0x40023800
 80063b4:	08010920 	.word	0x08010920

080063b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d012      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063e0:	4b69      	ldr	r3, [pc, #420]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a68      	ldr	r2, [pc, #416]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063ea:	6093      	str	r3, [r2, #8]
 80063ec:	4b66      	ldr	r3, [pc, #408]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	4964      	ldr	r1, [pc, #400]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d017      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006412:	4b5d      	ldr	r3, [pc, #372]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006420:	4959      	ldr	r1, [pc, #356]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006430:	d101      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006432:	2301      	movs	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800643e:	2301      	movs	r3, #1
 8006440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d017      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800644e:	4b4e      	ldr	r3, [pc, #312]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	494a      	ldr	r1, [pc, #296]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800646c:	d101      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800646e:	2301      	movs	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800647a:	2301      	movs	r3, #1
 800647c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800648a:	2301      	movs	r3, #1
 800648c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 808b 	beq.w	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800649c:	4b3a      	ldr	r3, [pc, #232]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	4a39      	ldr	r2, [pc, #228]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a6:	6413      	str	r3, [r2, #64]	; 0x40
 80064a8:	4b37      	ldr	r3, [pc, #220]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064b4:	4b35      	ldr	r3, [pc, #212]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a34      	ldr	r2, [pc, #208]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c0:	f7fe f8de 	bl	8004680 <HAL_GetTick>
 80064c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c8:	f7fe f8da 	bl	8004680 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b64      	cmp	r3, #100	; 0x64
 80064d4:	d901      	bls.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e38f      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064da:	4b2c      	ldr	r3, [pc, #176]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064e6:	4b28      	ldr	r3, [pc, #160]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d035      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	429a      	cmp	r2, r3
 8006502:	d02e      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006504:	4b20      	ldr	r3, [pc, #128]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800650e:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006518:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800651a:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006524:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b01      	cmp	r3, #1
 8006536:	d114      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fe f8a2 	bl	8004680 <HAL_GetTick>
 800653c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653e:	e00a      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006540:	f7fe f89e 	bl	8004680 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f241 3288 	movw	r2, #5000	; 0x1388
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e351      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ee      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656e:	d111      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800657e:	400b      	ands	r3, r1
 8006580:	4901      	ldr	r1, [pc, #4]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
 8006586:	e00b      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006588:	40023800 	.word	0x40023800
 800658c:	40007000 	.word	0x40007000
 8006590:	0ffffcff 	.word	0x0ffffcff
 8006594:	4bac      	ldr	r3, [pc, #688]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	4aab      	ldr	r2, [pc, #684]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800659a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800659e:	6093      	str	r3, [r2, #8]
 80065a0:	4ba9      	ldr	r3, [pc, #676]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ac:	49a6      	ldr	r1, [pc, #664]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065be:	4ba2      	ldr	r3, [pc, #648]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c4:	4aa0      	ldr	r2, [pc, #640]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065ce:	4b9e      	ldr	r3, [pc, #632]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	499b      	ldr	r1, [pc, #620]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065ec:	4b96      	ldr	r3, [pc, #600]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fa:	4993      	ldr	r1, [pc, #588]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800660e:	4b8e      	ldr	r3, [pc, #568]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006614:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800661c:	498a      	ldr	r1, [pc, #552]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006630:	4b85      	ldr	r3, [pc, #532]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663e:	4982      	ldr	r1, [pc, #520]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006640:	4313      	orrs	r3, r2
 8006642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006652:	4b7d      	ldr	r3, [pc, #500]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	4979      	ldr	r1, [pc, #484]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006674:	4b74      	ldr	r3, [pc, #464]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667a:	f023 0203 	bic.w	r2, r3, #3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	4971      	ldr	r1, [pc, #452]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006696:	4b6c      	ldr	r3, [pc, #432]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669c:	f023 020c 	bic.w	r2, r3, #12
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a4:	4968      	ldr	r1, [pc, #416]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066b8:	4b63      	ldr	r3, [pc, #396]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c6:	4960      	ldr	r1, [pc, #384]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066da:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	4957      	ldr	r1, [pc, #348]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066fc:	4b52      	ldr	r3, [pc, #328]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670a:	494f      	ldr	r1, [pc, #316]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800670c:	4313      	orrs	r3, r2
 800670e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800671e:	4b4a      	ldr	r3, [pc, #296]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006724:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	4946      	ldr	r1, [pc, #280]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006740:	4b41      	ldr	r3, [pc, #260]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	493e      	ldr	r1, [pc, #248]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006762:	4b39      	ldr	r3, [pc, #228]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006770:	4935      	ldr	r1, [pc, #212]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006784:	4b30      	ldr	r3, [pc, #192]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006792:	492d      	ldr	r1, [pc, #180]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d011      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067a6:	4b28      	ldr	r3, [pc, #160]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b4:	4924      	ldr	r1, [pc, #144]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c4:	d101      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067d6:	2301      	movs	r3, #1
 80067d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f4:	4914      	ldr	r1, [pc, #80]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006818:	490b      	ldr	r1, [pc, #44]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800681a:	4313      	orrs	r3, r2
 800681c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00f      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800682e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006832:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800683c:	4902      	ldr	r1, [pc, #8]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006844:	e002      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006846:	bf00      	nop
 8006848:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006858:	4b8a      	ldr	r3, [pc, #552]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800685a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800685e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	4986      	ldr	r1, [pc, #536]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800687c:	4b81      	ldr	r3, [pc, #516]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800687e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006882:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800688c:	497d      	ldr	r1, [pc, #500]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d006      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80d6 	beq.w	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068a8:	4b76      	ldr	r3, [pc, #472]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a75      	ldr	r2, [pc, #468]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b4:	f7fd fee4 	bl	8004680 <HAL_GetTick>
 80068b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068bc:	f7fd fee0 	bl	8004680 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b64      	cmp	r3, #100	; 0x64
 80068c8:	d901      	bls.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e195      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ce:	4b6d      	ldr	r3, [pc, #436]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f0      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d021      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d11d      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068ee:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068fc:	4b61      	ldr	r3, [pc, #388]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006902:	0e1b      	lsrs	r3, r3, #24
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	019a      	lsls	r2, r3, #6
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	431a      	orrs	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	061b      	lsls	r3, r3, #24
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	071b      	lsls	r3, r3, #28
 8006922:	4958      	ldr	r1, [pc, #352]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006924:	4313      	orrs	r3, r2
 8006926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d00a      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006948:	2b00      	cmp	r3, #0
 800694a:	d02e      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006954:	d129      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006956:	4b4b      	ldr	r3, [pc, #300]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006964:	4b47      	ldr	r3, [pc, #284]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696a:	0f1b      	lsrs	r3, r3, #28
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	019a      	lsls	r2, r3, #6
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	061b      	lsls	r3, r3, #24
 8006984:	431a      	orrs	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	071b      	lsls	r3, r3, #28
 800698a:	493e      	ldr	r1, [pc, #248]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006992:	4b3c      	ldr	r3, [pc, #240]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006998:	f023 021f 	bic.w	r2, r3, #31
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	3b01      	subs	r3, #1
 80069a2:	4938      	ldr	r1, [pc, #224]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01d      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069bc:	0e1b      	lsrs	r3, r3, #24
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069c4:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ca:	0f1b      	lsrs	r3, r3, #28
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	019a      	lsls	r2, r3, #6
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	431a      	orrs	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	061b      	lsls	r3, r3, #24
 80069e4:	431a      	orrs	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	071b      	lsls	r3, r3, #28
 80069ea:	4926      	ldr	r1, [pc, #152]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d011      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	019a      	lsls	r2, r3, #6
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	041b      	lsls	r3, r3, #16
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	071b      	lsls	r3, r3, #28
 8006a1a:	491a      	ldr	r1, [pc, #104]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a22:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a2e:	f7fd fe27 	bl	8004680 <HAL_GetTick>
 8006a32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a34:	e008      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a36:	f7fd fe23 	bl	8004680 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b64      	cmp	r3, #100	; 0x64
 8006a42:	d901      	bls.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e0d8      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a48:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	f040 80ce 	bne.w	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a68:	f7fd fe0a 	bl	8004680 <HAL_GetTick>
 8006a6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a6e:	e00b      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a70:	f7fd fe06 	bl	8004680 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d904      	bls.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e0bb      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006a82:	bf00      	nop
 8006a84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a88:	4b5e      	ldr	r3, [pc, #376]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a94:	d0ec      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02e      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d12a      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006abe:	4b51      	ldr	r3, [pc, #324]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006acc:	4b4d      	ldr	r3, [pc, #308]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	0f1b      	lsrs	r3, r3, #28
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	019a      	lsls	r2, r3, #6
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	061b      	lsls	r3, r3, #24
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	071b      	lsls	r3, r3, #28
 8006af2:	4944      	ldr	r1, [pc, #272]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006afa:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	493d      	ldr	r1, [pc, #244]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d022      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b28:	d11d      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b2a:	4b36      	ldr	r3, [pc, #216]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	0e1b      	lsrs	r3, r3, #24
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b38:	4b32      	ldr	r3, [pc, #200]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3e:	0f1b      	lsrs	r3, r3, #28
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	019a      	lsls	r2, r3, #6
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	431a      	orrs	r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	061b      	lsls	r3, r3, #24
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	071b      	lsls	r3, r3, #28
 8006b5e:	4929      	ldr	r1, [pc, #164]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d028      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b72:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b78:	0e1b      	lsrs	r3, r3, #24
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b80:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b86:	0c1b      	lsrs	r3, r3, #16
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	019a      	lsls	r2, r3, #6
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	041b      	lsls	r3, r3, #16
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	061b      	lsls	r3, r3, #24
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	071b      	lsls	r3, r3, #28
 8006ba6:	4917      	ldr	r1, [pc, #92]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006bae:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4911      	ldr	r1, [pc, #68]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a0e      	ldr	r2, [pc, #56]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd0:	f7fd fd56 	bl	8004680 <HAL_GetTick>
 8006bd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bd8:	f7fd fd52 	bl	8004680 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b64      	cmp	r3, #100	; 0x64
 8006be4:	d901      	bls.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e007      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf6:	d1ef      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40023800 	.word	0x40023800

08006c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e040      	b.n	8006c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fd fc4e 	bl	80044cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	; 0x24
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f82c 	bl	8006ca4 <UART_SetConfig>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e022      	b.n	8006c9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa84 	bl	800716c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb0b 	bl	80072b0 <UART_CheckIdleState>
 8006c9a:	4603      	mov	r3, r0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4ba6      	ldr	r3, [pc, #664]	; (8006f68 <UART_SetConfig+0x2c4>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	6979      	ldr	r1, [r7, #20]
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a94      	ldr	r2, [pc, #592]	; (8006f6c <UART_SetConfig+0x2c8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d120      	bne.n	8006d62 <UART_SetConfig+0xbe>
 8006d20:	4b93      	ldr	r3, [pc, #588]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d816      	bhi.n	8006d5c <UART_SetConfig+0xb8>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x90>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d45 	.word	0x08006d45
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d4b 	.word	0x08006d4b
 8006d40:	08006d57 	.word	0x08006d57
 8006d44:	2301      	movs	r3, #1
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e150      	b.n	8006fec <UART_SetConfig+0x348>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e14d      	b.n	8006fec <UART_SetConfig+0x348>
 8006d50:	2304      	movs	r3, #4
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e14a      	b.n	8006fec <UART_SetConfig+0x348>
 8006d56:	2308      	movs	r3, #8
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e147      	b.n	8006fec <UART_SetConfig+0x348>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e144      	b.n	8006fec <UART_SetConfig+0x348>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a83      	ldr	r2, [pc, #524]	; (8006f74 <UART_SetConfig+0x2d0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d132      	bne.n	8006dd2 <UART_SetConfig+0x12e>
 8006d6c:	4b80      	ldr	r3, [pc, #512]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f003 030c 	and.w	r3, r3, #12
 8006d76:	2b0c      	cmp	r3, #12
 8006d78:	d828      	bhi.n	8006dcc <UART_SetConfig+0x128>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0xdc>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006db5 	.word	0x08006db5
 8006d84:	08006dcd 	.word	0x08006dcd
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006dc1 	.word	0x08006dc1
 8006d94:	08006dcd 	.word	0x08006dcd
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006dcd 	.word	0x08006dcd
 8006da0:	08006dbb 	.word	0x08006dbb
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006dcd 	.word	0x08006dcd
 8006db0:	08006dc7 	.word	0x08006dc7
 8006db4:	2300      	movs	r3, #0
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e118      	b.n	8006fec <UART_SetConfig+0x348>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	e115      	b.n	8006fec <UART_SetConfig+0x348>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e112      	b.n	8006fec <UART_SetConfig+0x348>
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e10f      	b.n	8006fec <UART_SetConfig+0x348>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e10c      	b.n	8006fec <UART_SetConfig+0x348>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a68      	ldr	r2, [pc, #416]	; (8006f78 <UART_SetConfig+0x2d4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d120      	bne.n	8006e1e <UART_SetConfig+0x17a>
 8006ddc:	4b64      	ldr	r3, [pc, #400]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006de6:	2b30      	cmp	r3, #48	; 0x30
 8006de8:	d013      	beq.n	8006e12 <UART_SetConfig+0x16e>
 8006dea:	2b30      	cmp	r3, #48	; 0x30
 8006dec:	d814      	bhi.n	8006e18 <UART_SetConfig+0x174>
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d009      	beq.n	8006e06 <UART_SetConfig+0x162>
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d810      	bhi.n	8006e18 <UART_SetConfig+0x174>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <UART_SetConfig+0x15c>
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d006      	beq.n	8006e0c <UART_SetConfig+0x168>
 8006dfe:	e00b      	b.n	8006e18 <UART_SetConfig+0x174>
 8006e00:	2300      	movs	r3, #0
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e0f2      	b.n	8006fec <UART_SetConfig+0x348>
 8006e06:	2302      	movs	r3, #2
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e0ef      	b.n	8006fec <UART_SetConfig+0x348>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e0ec      	b.n	8006fec <UART_SetConfig+0x348>
 8006e12:	2308      	movs	r3, #8
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	e0e9      	b.n	8006fec <UART_SetConfig+0x348>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	77fb      	strb	r3, [r7, #31]
 8006e1c:	e0e6      	b.n	8006fec <UART_SetConfig+0x348>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a56      	ldr	r2, [pc, #344]	; (8006f7c <UART_SetConfig+0x2d8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d120      	bne.n	8006e6a <UART_SetConfig+0x1c6>
 8006e28:	4b51      	ldr	r3, [pc, #324]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e32:	2bc0      	cmp	r3, #192	; 0xc0
 8006e34:	d013      	beq.n	8006e5e <UART_SetConfig+0x1ba>
 8006e36:	2bc0      	cmp	r3, #192	; 0xc0
 8006e38:	d814      	bhi.n	8006e64 <UART_SetConfig+0x1c0>
 8006e3a:	2b80      	cmp	r3, #128	; 0x80
 8006e3c:	d009      	beq.n	8006e52 <UART_SetConfig+0x1ae>
 8006e3e:	2b80      	cmp	r3, #128	; 0x80
 8006e40:	d810      	bhi.n	8006e64 <UART_SetConfig+0x1c0>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <UART_SetConfig+0x1a8>
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d006      	beq.n	8006e58 <UART_SetConfig+0x1b4>
 8006e4a:	e00b      	b.n	8006e64 <UART_SetConfig+0x1c0>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e0cc      	b.n	8006fec <UART_SetConfig+0x348>
 8006e52:	2302      	movs	r3, #2
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e0c9      	b.n	8006fec <UART_SetConfig+0x348>
 8006e58:	2304      	movs	r3, #4
 8006e5a:	77fb      	strb	r3, [r7, #31]
 8006e5c:	e0c6      	b.n	8006fec <UART_SetConfig+0x348>
 8006e5e:	2308      	movs	r3, #8
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e0c3      	b.n	8006fec <UART_SetConfig+0x348>
 8006e64:	2310      	movs	r3, #16
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e0c0      	b.n	8006fec <UART_SetConfig+0x348>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a44      	ldr	r2, [pc, #272]	; (8006f80 <UART_SetConfig+0x2dc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d125      	bne.n	8006ec0 <UART_SetConfig+0x21c>
 8006e74:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e82:	d017      	beq.n	8006eb4 <UART_SetConfig+0x210>
 8006e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e88:	d817      	bhi.n	8006eba <UART_SetConfig+0x216>
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8e:	d00b      	beq.n	8006ea8 <UART_SetConfig+0x204>
 8006e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e94:	d811      	bhi.n	8006eba <UART_SetConfig+0x216>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <UART_SetConfig+0x1fe>
 8006e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9e:	d006      	beq.n	8006eae <UART_SetConfig+0x20a>
 8006ea0:	e00b      	b.n	8006eba <UART_SetConfig+0x216>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e0a1      	b.n	8006fec <UART_SetConfig+0x348>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e09e      	b.n	8006fec <UART_SetConfig+0x348>
 8006eae:	2304      	movs	r3, #4
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e09b      	b.n	8006fec <UART_SetConfig+0x348>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e098      	b.n	8006fec <UART_SetConfig+0x348>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e095      	b.n	8006fec <UART_SetConfig+0x348>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <UART_SetConfig+0x2e0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d125      	bne.n	8006f16 <UART_SetConfig+0x272>
 8006eca:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ed8:	d017      	beq.n	8006f0a <UART_SetConfig+0x266>
 8006eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ede:	d817      	bhi.n	8006f10 <UART_SetConfig+0x26c>
 8006ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee4:	d00b      	beq.n	8006efe <UART_SetConfig+0x25a>
 8006ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eea:	d811      	bhi.n	8006f10 <UART_SetConfig+0x26c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <UART_SetConfig+0x254>
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef4:	d006      	beq.n	8006f04 <UART_SetConfig+0x260>
 8006ef6:	e00b      	b.n	8006f10 <UART_SetConfig+0x26c>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e076      	b.n	8006fec <UART_SetConfig+0x348>
 8006efe:	2302      	movs	r3, #2
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e073      	b.n	8006fec <UART_SetConfig+0x348>
 8006f04:	2304      	movs	r3, #4
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e070      	b.n	8006fec <UART_SetConfig+0x348>
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e06d      	b.n	8006fec <UART_SetConfig+0x348>
 8006f10:	2310      	movs	r3, #16
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e06a      	b.n	8006fec <UART_SetConfig+0x348>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1b      	ldr	r2, [pc, #108]	; (8006f88 <UART_SetConfig+0x2e4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d138      	bne.n	8006f92 <UART_SetConfig+0x2ee>
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f2e:	d017      	beq.n	8006f60 <UART_SetConfig+0x2bc>
 8006f30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f34:	d82a      	bhi.n	8006f8c <UART_SetConfig+0x2e8>
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3a:	d00b      	beq.n	8006f54 <UART_SetConfig+0x2b0>
 8006f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f40:	d824      	bhi.n	8006f8c <UART_SetConfig+0x2e8>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <UART_SetConfig+0x2aa>
 8006f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4a:	d006      	beq.n	8006f5a <UART_SetConfig+0x2b6>
 8006f4c:	e01e      	b.n	8006f8c <UART_SetConfig+0x2e8>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e04b      	b.n	8006fec <UART_SetConfig+0x348>
 8006f54:	2302      	movs	r3, #2
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e048      	b.n	8006fec <UART_SetConfig+0x348>
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e045      	b.n	8006fec <UART_SetConfig+0x348>
 8006f60:	2308      	movs	r3, #8
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e042      	b.n	8006fec <UART_SetConfig+0x348>
 8006f66:	bf00      	nop
 8006f68:	efff69f3 	.word	0xefff69f3
 8006f6c:	40011000 	.word	0x40011000
 8006f70:	40023800 	.word	0x40023800
 8006f74:	40004400 	.word	0x40004400
 8006f78:	40004800 	.word	0x40004800
 8006f7c:	40004c00 	.word	0x40004c00
 8006f80:	40005000 	.word	0x40005000
 8006f84:	40011400 	.word	0x40011400
 8006f88:	40007800 	.word	0x40007800
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e02c      	b.n	8006fec <UART_SetConfig+0x348>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a72      	ldr	r2, [pc, #456]	; (8007160 <UART_SetConfig+0x4bc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d125      	bne.n	8006fe8 <UART_SetConfig+0x344>
 8006f9c:	4b71      	ldr	r3, [pc, #452]	; (8007164 <UART_SetConfig+0x4c0>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006faa:	d017      	beq.n	8006fdc <UART_SetConfig+0x338>
 8006fac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fb0:	d817      	bhi.n	8006fe2 <UART_SetConfig+0x33e>
 8006fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb6:	d00b      	beq.n	8006fd0 <UART_SetConfig+0x32c>
 8006fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fbc:	d811      	bhi.n	8006fe2 <UART_SetConfig+0x33e>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <UART_SetConfig+0x326>
 8006fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc6:	d006      	beq.n	8006fd6 <UART_SetConfig+0x332>
 8006fc8:	e00b      	b.n	8006fe2 <UART_SetConfig+0x33e>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	77fb      	strb	r3, [r7, #31]
 8006fce:	e00d      	b.n	8006fec <UART_SetConfig+0x348>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	77fb      	strb	r3, [r7, #31]
 8006fd4:	e00a      	b.n	8006fec <UART_SetConfig+0x348>
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	77fb      	strb	r3, [r7, #31]
 8006fda:	e007      	b.n	8006fec <UART_SetConfig+0x348>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	77fb      	strb	r3, [r7, #31]
 8006fe0:	e004      	b.n	8006fec <UART_SetConfig+0x348>
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	77fb      	strb	r3, [r7, #31]
 8006fe6:	e001      	b.n	8006fec <UART_SetConfig+0x348>
 8006fe8:	2310      	movs	r3, #16
 8006fea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff4:	d15b      	bne.n	80070ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ff6:	7ffb      	ldrb	r3, [r7, #31]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d828      	bhi.n	800704e <UART_SetConfig+0x3aa>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x360>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	0800704f 	.word	0x0800704f
 8007014:	0800703f 	.word	0x0800703f
 8007018:	0800704f 	.word	0x0800704f
 800701c:	0800704f 	.word	0x0800704f
 8007020:	0800704f 	.word	0x0800704f
 8007024:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007028:	f7ff f99e 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 800702c:	61b8      	str	r0, [r7, #24]
        break;
 800702e:	e013      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007030:	f7ff f9ae 	bl	8006390 <HAL_RCC_GetPCLK2Freq>
 8007034:	61b8      	str	r0, [r7, #24]
        break;
 8007036:	e00f      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b4b      	ldr	r3, [pc, #300]	; (8007168 <UART_SetConfig+0x4c4>)
 800703a:	61bb      	str	r3, [r7, #24]
        break;
 800703c:	e00c      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7ff f881 	bl	8006144 <HAL_RCC_GetSysClockFreq>
 8007042:	61b8      	str	r0, [r7, #24]
        break;
 8007044:	e008      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704a:	61bb      	str	r3, [r7, #24]
        break;
 800704c:	e004      	b.n	8007058 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	77bb      	strb	r3, [r7, #30]
        break;
 8007056:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d074      	beq.n	8007148 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	005a      	lsls	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d916      	bls.n	80070a8 <UART_SetConfig+0x404>
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007080:	d212      	bcs.n	80070a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f023 030f 	bic.w	r3, r3, #15
 800708a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	b29b      	uxth	r3, r3
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	b29a      	uxth	r2, r3
 8007098:	89fb      	ldrh	r3, [r7, #14]
 800709a:	4313      	orrs	r3, r2
 800709c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	89fa      	ldrh	r2, [r7, #14]
 80070a4:	60da      	str	r2, [r3, #12]
 80070a6:	e04f      	b.n	8007148 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	77bb      	strb	r3, [r7, #30]
 80070ac:	e04c      	b.n	8007148 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ae:	7ffb      	ldrb	r3, [r7, #31]
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d828      	bhi.n	8007106 <UART_SetConfig+0x462>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0x418>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	08007107 	.word	0x08007107
 80070cc:	080070f7 	.word	0x080070f7
 80070d0:	08007107 	.word	0x08007107
 80070d4:	08007107 	.word	0x08007107
 80070d8:	08007107 	.word	0x08007107
 80070dc:	080070ff 	.word	0x080070ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e0:	f7ff f942 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 80070e4:	61b8      	str	r0, [r7, #24]
        break;
 80070e6:	e013      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e8:	f7ff f952 	bl	8006390 <HAL_RCC_GetPCLK2Freq>
 80070ec:	61b8      	str	r0, [r7, #24]
        break;
 80070ee:	e00f      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <UART_SetConfig+0x4c4>)
 80070f2:	61bb      	str	r3, [r7, #24]
        break;
 80070f4:	e00c      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f6:	f7ff f825 	bl	8006144 <HAL_RCC_GetSysClockFreq>
 80070fa:	61b8      	str	r0, [r7, #24]
        break;
 80070fc:	e008      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007102:	61bb      	str	r3, [r7, #24]
        break;
 8007104:	e004      	b.n	8007110 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	77bb      	strb	r3, [r7, #30]
        break;
 800710e:	bf00      	nop
    }

    if (pclk != 0U)
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d018      	beq.n	8007148 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	085a      	lsrs	r2, r3, #1
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	441a      	add	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b0f      	cmp	r3, #15
 800712e:	d909      	bls.n	8007144 <UART_SetConfig+0x4a0>
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007136:	d205      	bcs.n	8007144 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60da      	str	r2, [r3, #12]
 8007142:	e001      	b.n	8007148 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007154:	7fbb      	ldrb	r3, [r7, #30]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40007c00 	.word	0x40007c00
 8007164:	40023800 	.word	0x40023800
 8007168:	00f42400 	.word	0x00f42400

0800716c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01a      	beq.n	8007282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726a:	d10a      	bne.n	8007282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
  }
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c0:	f7fd f9de 	bl	8004680 <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d10e      	bne.n	80072f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f831 	bl	800734a <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e027      	b.n	8007342 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d10e      	bne.n	800731e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f81b 	bl	800734a <UART_WaitOnFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e011      	b.n	8007342 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b09c      	sub	sp, #112	; 0x70
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	4613      	mov	r3, r2
 8007358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735a:	e0a7      	b.n	80074ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800735c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	f000 80a3 	beq.w	80074ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007366:	f7fd f98b 	bl	8004680 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007372:	429a      	cmp	r2, r3
 8007374:	d302      	bcc.n	800737c <UART_WaitOnFlagUntilTimeout+0x32>
 8007376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007378:	2b00      	cmp	r3, #0
 800737a:	d13f      	bne.n	80073fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800738a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007390:	667b      	str	r3, [r7, #100]	; 0x64
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800739c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e6      	bne.n	800737c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	663b      	str	r3, [r7, #96]	; 0x60
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80073d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e5      	bne.n	80073ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e068      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b00      	cmp	r3, #0
 8007408:	d050      	beq.n	80074ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007418:	d148      	bne.n	80074ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007422:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
 8007444:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e6      	bne.n	8007424 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	613b      	str	r3, [r7, #16]
   return(result);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	66bb      	str	r3, [r7, #104]	; 0x68
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007476:	623a      	str	r2, [r7, #32]
 8007478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	69f9      	ldr	r1, [r7, #28]
 800747c:	6a3a      	ldr	r2, [r7, #32]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	61bb      	str	r3, [r7, #24]
   return(result);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e010      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4013      	ands	r3, r2
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	bf0c      	ite	eq
 80074bc:	2301      	moveq	r3, #1
 80074be:	2300      	movne	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	f43f af48 	beq.w	800735c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3770      	adds	r7, #112	; 0x70
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_model_activations_map, 1, params)) {
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	2101      	movs	r1, #1
 80074e6:	4898      	ldr	r0, [pc, #608]	; (8007748 <model_configure_activations+0x270>)
 80074e8:	f001 fe90 	bl	800920c <ai_platform_get_activations_map>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 8678 	beq.w	80081e4 <model_configure_activations+0xd0c>
    /* Updating activations (byte) offsets */
    
    serving_default_input_30_output_array.data = AI_PTR(g_model_activations_map[0] + 18432);
 80074f4:	4b94      	ldr	r3, [pc, #592]	; (8007748 <model_configure_activations+0x270>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80074fc:	4a93      	ldr	r2, [pc, #588]	; (800774c <model_configure_activations+0x274>)
 80074fe:	6093      	str	r3, [r2, #8]
    serving_default_input_30_output_array.data_start = AI_PTR(g_model_activations_map[0] + 18432);
 8007500:	4b91      	ldr	r3, [pc, #580]	; (8007748 <model_configure_activations+0x270>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007508:	4a90      	ldr	r2, [pc, #576]	; (800774c <model_configure_activations+0x274>)
 800750a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_model_activations_map[0] + 21504);
 800750c:	4b8e      	ldr	r3, [pc, #568]	; (8007748 <model_configure_activations+0x270>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8007514:	4a8e      	ldr	r2, [pc, #568]	; (8007750 <model_configure_activations+0x278>)
 8007516:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_model_activations_map[0] + 21504);
 8007518:	4b8b      	ldr	r3, [pc, #556]	; (8007748 <model_configure_activations+0x270>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8007520:	4a8b      	ldr	r2, [pc, #556]	; (8007750 <model_configure_activations+0x278>)
 8007522:	60d3      	str	r3, [r2, #12]
    
    nl_1_output_array.data = AI_PTR(g_model_activations_map[0] + 18432);
 8007524:	4b88      	ldr	r3, [pc, #544]	; (8007748 <model_configure_activations+0x270>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800752c:	4a89      	ldr	r2, [pc, #548]	; (8007754 <model_configure_activations+0x27c>)
 800752e:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(g_model_activations_map[0] + 18432);
 8007530:	4b85      	ldr	r3, [pc, #532]	; (8007748 <model_configure_activations+0x270>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007538:	4a86      	ldr	r2, [pc, #536]	; (8007754 <model_configure_activations+0x27c>)
 800753a:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_output_array.data = AI_PTR(g_model_activations_map[0] + 15360);
 800753c:	4b82      	ldr	r3, [pc, #520]	; (8007748 <model_configure_activations+0x270>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007544:	4a84      	ldr	r2, [pc, #528]	; (8007758 <model_configure_activations+0x280>)
 8007546:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_model_activations_map[0] + 15360);
 8007548:	4b7f      	ldr	r3, [pc, #508]	; (8007748 <model_configure_activations+0x270>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007550:	4a81      	ldr	r2, [pc, #516]	; (8007758 <model_configure_activations+0x280>)
 8007552:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_output_array.data = AI_PTR(g_model_activations_map[0] + 18432);
 8007554:	4b7c      	ldr	r3, [pc, #496]	; (8007748 <model_configure_activations+0x270>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800755c:	4a7f      	ldr	r2, [pc, #508]	; (800775c <model_configure_activations+0x284>)
 800755e:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_model_activations_map[0] + 18432);
 8007560:	4b79      	ldr	r3, [pc, #484]	; (8007748 <model_configure_activations+0x270>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007568:	4a7c      	ldr	r2, [pc, #496]	; (800775c <model_configure_activations+0x284>)
 800756a:	60d3      	str	r3, [r2, #12]
    
    nl_4_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 800756c:	4b76      	ldr	r3, [pc, #472]	; (8007748 <model_configure_activations+0x270>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007574:	4a7a      	ldr	r2, [pc, #488]	; (8007760 <model_configure_activations+0x288>)
 8007576:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 8007578:	4b73      	ldr	r3, [pc, #460]	; (8007748 <model_configure_activations+0x270>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007580:	4a77      	ldr	r2, [pc, #476]	; (8007760 <model_configure_activations+0x288>)
 8007582:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_output_array.data = AI_PTR(g_model_activations_map[0] + 18432);
 8007584:	4b70      	ldr	r3, [pc, #448]	; (8007748 <model_configure_activations+0x270>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800758c:	4a75      	ldr	r2, [pc, #468]	; (8007764 <model_configure_activations+0x28c>)
 800758e:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_model_activations_map[0] + 18432);
 8007590:	4b6d      	ldr	r3, [pc, #436]	; (8007748 <model_configure_activations+0x270>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007598:	4a72      	ldr	r2, [pc, #456]	; (8007764 <model_configure_activations+0x28c>)
 800759a:	60d3      	str	r3, [r2, #12]
    
    split_6_output0_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 800759c:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <model_configure_activations+0x270>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80075a4:	4a70      	ldr	r2, [pc, #448]	; (8007768 <model_configure_activations+0x290>)
 80075a6:	6093      	str	r3, [r2, #8]
    split_6_output0_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 80075a8:	4b67      	ldr	r3, [pc, #412]	; (8007748 <model_configure_activations+0x270>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80075b0:	4a6d      	ldr	r2, [pc, #436]	; (8007768 <model_configure_activations+0x290>)
 80075b2:	60d3      	str	r3, [r2, #12]
    
    split_6_output1_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80075b4:	4b64      	ldr	r3, [pc, #400]	; (8007748 <model_configure_activations+0x270>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075bc:	4a6b      	ldr	r2, [pc, #428]	; (800776c <model_configure_activations+0x294>)
 80075be:	6093      	str	r3, [r2, #8]
    split_6_output1_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80075c0:	4b61      	ldr	r3, [pc, #388]	; (8007748 <model_configure_activations+0x270>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075c8:	4a68      	ldr	r2, [pc, #416]	; (800776c <model_configure_activations+0x294>)
 80075ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 80075cc:	4b5e      	ldr	r3, [pc, #376]	; (8007748 <model_configure_activations+0x270>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80075d4:	4a66      	ldr	r2, [pc, #408]	; (8007770 <model_configure_activations+0x298>)
 80075d6:	6093      	str	r3, [r2, #8]
    conv2d_21_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 80075d8:	4b5b      	ldr	r3, [pc, #364]	; (8007748 <model_configure_activations+0x270>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80075e0:	4a63      	ldr	r2, [pc, #396]	; (8007770 <model_configure_activations+0x298>)
 80075e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80075e4:	4b58      	ldr	r3, [pc, #352]	; (8007748 <model_configure_activations+0x270>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075ec:	4a61      	ldr	r2, [pc, #388]	; (8007774 <model_configure_activations+0x29c>)
 80075ee:	6093      	str	r3, [r2, #8]
    conv2d_22_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 80075f0:	4b55      	ldr	r3, [pc, #340]	; (8007748 <model_configure_activations+0x270>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075f8:	4a5e      	ldr	r2, [pc, #376]	; (8007774 <model_configure_activations+0x29c>)
 80075fa:	60d3      	str	r3, [r2, #12]
    
    nl_23_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 80075fc:	4b52      	ldr	r3, [pc, #328]	; (8007748 <model_configure_activations+0x270>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007604:	4a5c      	ldr	r2, [pc, #368]	; (8007778 <model_configure_activations+0x2a0>)
 8007606:	6093      	str	r3, [r2, #8]
    nl_23_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 8007608:	4b4f      	ldr	r3, [pc, #316]	; (8007748 <model_configure_activations+0x270>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007610:	4a59      	ldr	r2, [pc, #356]	; (8007778 <model_configure_activations+0x2a0>)
 8007612:	60d3      	str	r3, [r2, #12]
    
    eltwise_24_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 8007614:	4b4c      	ldr	r3, [pc, #304]	; (8007748 <model_configure_activations+0x270>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800761c:	4a57      	ldr	r2, [pc, #348]	; (800777c <model_configure_activations+0x2a4>)
 800761e:	6093      	str	r3, [r2, #8]
    eltwise_24_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 8007620:	4b49      	ldr	r3, [pc, #292]	; (8007748 <model_configure_activations+0x270>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007628:	4a54      	ldr	r2, [pc, #336]	; (800777c <model_configure_activations+0x2a4>)
 800762a:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 800762c:	4b46      	ldr	r3, [pc, #280]	; (8007748 <model_configure_activations+0x270>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007634:	4a52      	ldr	r2, [pc, #328]	; (8007780 <model_configure_activations+0x2a8>)
 8007636:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 8007638:	4b43      	ldr	r3, [pc, #268]	; (8007748 <model_configure_activations+0x270>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007640:	4a4f      	ldr	r2, [pc, #316]	; (8007780 <model_configure_activations+0x2a8>)
 8007642:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007644:	4b40      	ldr	r3, [pc, #256]	; (8007748 <model_configure_activations+0x270>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a4e      	ldr	r2, [pc, #312]	; (8007784 <model_configure_activations+0x2ac>)
 800764a:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 800764c:	4b3e      	ldr	r3, [pc, #248]	; (8007748 <model_configure_activations+0x270>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a4c      	ldr	r2, [pc, #304]	; (8007784 <model_configure_activations+0x2ac>)
 8007652:	60d3      	str	r3, [r2, #12]
    
    nl_9_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 8007654:	4b3c      	ldr	r3, [pc, #240]	; (8007748 <model_configure_activations+0x270>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800765c:	4a4a      	ldr	r2, [pc, #296]	; (8007788 <model_configure_activations+0x2b0>)
 800765e:	6093      	str	r3, [r2, #8]
    nl_9_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 8007660:	4b39      	ldr	r3, [pc, #228]	; (8007748 <model_configure_activations+0x270>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007668:	4a47      	ldr	r2, [pc, #284]	; (8007788 <model_configure_activations+0x2b0>)
 800766a:	60d3      	str	r3, [r2, #12]
    
    eltwise_10_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 800766c:	4b36      	ldr	r3, [pc, #216]	; (8007748 <model_configure_activations+0x270>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007674:	4a45      	ldr	r2, [pc, #276]	; (800778c <model_configure_activations+0x2b4>)
 8007676:	6093      	str	r3, [r2, #8]
    eltwise_10_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 8007678:	4b33      	ldr	r3, [pc, #204]	; (8007748 <model_configure_activations+0x270>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007680:	4a42      	ldr	r2, [pc, #264]	; (800778c <model_configure_activations+0x2b4>)
 8007682:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_output_array.data = AI_PTR(g_model_activations_map[0] + 9216);
 8007684:	4b30      	ldr	r3, [pc, #192]	; (8007748 <model_configure_activations+0x270>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800768c:	4a40      	ldr	r2, [pc, #256]	; (8007790 <model_configure_activations+0x2b8>)
 800768e:	6093      	str	r3, [r2, #8]
    conv2d_11_output_array.data_start = AI_PTR(g_model_activations_map[0] + 9216);
 8007690:	4b2d      	ldr	r3, [pc, #180]	; (8007748 <model_configure_activations+0x270>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007698:	4a3d      	ldr	r2, [pc, #244]	; (8007790 <model_configure_activations+0x2b8>)
 800769a:	60d3      	str	r3, [r2, #12]
    
    nl_12_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 800769c:	4b2a      	ldr	r3, [pc, #168]	; (8007748 <model_configure_activations+0x270>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076a4:	4a3b      	ldr	r2, [pc, #236]	; (8007794 <model_configure_activations+0x2bc>)
 80076a6:	6093      	str	r3, [r2, #8]
    nl_12_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <model_configure_activations+0x270>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076b0:	4a38      	ldr	r2, [pc, #224]	; (8007794 <model_configure_activations+0x2bc>)
 80076b2:	60d3      	str	r3, [r2, #12]
    
    eltwise_13_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 80076b4:	4b24      	ldr	r3, [pc, #144]	; (8007748 <model_configure_activations+0x270>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076bc:	4a36      	ldr	r2, [pc, #216]	; (8007798 <model_configure_activations+0x2c0>)
 80076be:	6093      	str	r3, [r2, #8]
    eltwise_13_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 80076c0:	4b21      	ldr	r3, [pc, #132]	; (8007748 <model_configure_activations+0x270>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076c8:	4a33      	ldr	r2, [pc, #204]	; (8007798 <model_configure_activations+0x2c0>)
 80076ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_output_array.data = AI_PTR(g_model_activations_map[0] + 9216);
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <model_configure_activations+0x270>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80076d4:	4a31      	ldr	r2, [pc, #196]	; (800779c <model_configure_activations+0x2c4>)
 80076d6:	6093      	str	r3, [r2, #8]
    conv2d_14_output_array.data_start = AI_PTR(g_model_activations_map[0] + 9216);
 80076d8:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <model_configure_activations+0x270>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80076e0:	4a2e      	ldr	r2, [pc, #184]	; (800779c <model_configure_activations+0x2c4>)
 80076e2:	60d3      	str	r3, [r2, #12]
    
    nl_15_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 80076e4:	4b18      	ldr	r3, [pc, #96]	; (8007748 <model_configure_activations+0x270>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076ec:	4a2c      	ldr	r2, [pc, #176]	; (80077a0 <model_configure_activations+0x2c8>)
 80076ee:	6093      	str	r3, [r2, #8]
    nl_15_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 80076f0:	4b15      	ldr	r3, [pc, #84]	; (8007748 <model_configure_activations+0x270>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076f8:	4a29      	ldr	r2, [pc, #164]	; (80077a0 <model_configure_activations+0x2c8>)
 80076fa:	60d3      	str	r3, [r2, #12]
    
    eltwise_16_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <model_configure_activations+0x270>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007704:	4a27      	ldr	r2, [pc, #156]	; (80077a4 <model_configure_activations+0x2cc>)
 8007706:	6093      	str	r3, [r2, #8]
    eltwise_16_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 8007708:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <model_configure_activations+0x270>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007710:	4a24      	ldr	r2, [pc, #144]	; (80077a4 <model_configure_activations+0x2cc>)
 8007712:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_output_array.data = AI_PTR(g_model_activations_map[0] + 36864);
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <model_configure_activations+0x270>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800771c:	4a22      	ldr	r2, [pc, #136]	; (80077a8 <model_configure_activations+0x2d0>)
 800771e:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_model_activations_map[0] + 36864);
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <model_configure_activations+0x270>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8007728:	4a1f      	ldr	r2, [pc, #124]	; (80077a8 <model_configure_activations+0x2d0>)
 800772a:	60d3      	str	r3, [r2, #12]
    
    nl_18_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <model_configure_activations+0x270>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1e      	ldr	r2, [pc, #120]	; (80077ac <model_configure_activations+0x2d4>)
 8007732:	6093      	str	r3, [r2, #8]
    nl_18_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007734:	4b04      	ldr	r3, [pc, #16]	; (8007748 <model_configure_activations+0x270>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1c      	ldr	r2, [pc, #112]	; (80077ac <model_configure_activations+0x2d4>)
 800773a:	60d3      	str	r3, [r2, #12]
    
    eltwise_19_output_array.data = AI_PTR(g_model_activations_map[0] + 36864);
 800773c:	4b02      	ldr	r3, [pc, #8]	; (8007748 <model_configure_activations+0x270>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8007744:	e034      	b.n	80077b0 <model_configure_activations+0x2d8>
 8007746:	bf00      	nop
 8007748:	200169c4 	.word	0x200169c4
 800774c:	200003a0 	.word	0x200003a0
 8007750:	200003b0 	.word	0x200003b0
 8007754:	200003c0 	.word	0x200003c0
 8007758:	200003d0 	.word	0x200003d0
 800775c:	200003e0 	.word	0x200003e0
 8007760:	200003f0 	.word	0x200003f0
 8007764:	20000400 	.word	0x20000400
 8007768:	20000410 	.word	0x20000410
 800776c:	20000420 	.word	0x20000420
 8007770:	20000430 	.word	0x20000430
 8007774:	20000440 	.word	0x20000440
 8007778:	20000450 	.word	0x20000450
 800777c:	20000460 	.word	0x20000460
 8007780:	20000470 	.word	0x20000470
 8007784:	20000480 	.word	0x20000480
 8007788:	20000490 	.word	0x20000490
 800778c:	200004a0 	.word	0x200004a0
 8007790:	200004b0 	.word	0x200004b0
 8007794:	200004c0 	.word	0x200004c0
 8007798:	200004d0 	.word	0x200004d0
 800779c:	200004e0 	.word	0x200004e0
 80077a0:	200004f0 	.word	0x200004f0
 80077a4:	20000500 	.word	0x20000500
 80077a8:	20000510 	.word	0x20000510
 80077ac:	20000520 	.word	0x20000520
 80077b0:	4a94      	ldr	r2, [pc, #592]	; (8007a04 <model_configure_activations+0x52c>)
 80077b2:	6093      	str	r3, [r2, #8]
    eltwise_19_output_array.data_start = AI_PTR(g_model_activations_map[0] + 36864);
 80077b4:	4b94      	ldr	r3, [pc, #592]	; (8007a08 <model_configure_activations+0x530>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80077bc:	4a91      	ldr	r2, [pc, #580]	; (8007a04 <model_configure_activations+0x52c>)
 80077be:	60d3      	str	r3, [r2, #12]
    
    eltwise_20_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80077c0:	4b91      	ldr	r3, [pc, #580]	; (8007a08 <model_configure_activations+0x530>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a91      	ldr	r2, [pc, #580]	; (8007a0c <model_configure_activations+0x534>)
 80077c6:	6093      	str	r3, [r2, #8]
    eltwise_20_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80077c8:	4b8f      	ldr	r3, [pc, #572]	; (8007a08 <model_configure_activations+0x530>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a8f      	ldr	r2, [pc, #572]	; (8007a0c <model_configure_activations+0x534>)
 80077ce:	60d3      	str	r3, [r2, #12]
    
    concat_25_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 80077d0:	4b8d      	ldr	r3, [pc, #564]	; (8007a08 <model_configure_activations+0x530>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80077d8:	4a8d      	ldr	r2, [pc, #564]	; (8007a10 <model_configure_activations+0x538>)
 80077da:	6093      	str	r3, [r2, #8]
    concat_25_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 80077dc:	4b8a      	ldr	r3, [pc, #552]	; (8007a08 <model_configure_activations+0x530>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80077e4:	4a8a      	ldr	r2, [pc, #552]	; (8007a10 <model_configure_activations+0x538>)
 80077e6:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80077e8:	4b87      	ldr	r3, [pc, #540]	; (8007a08 <model_configure_activations+0x530>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a89      	ldr	r2, [pc, #548]	; (8007a14 <model_configure_activations+0x53c>)
 80077ee:	6093      	str	r3, [r2, #8]
    conv2d_26_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80077f0:	4b85      	ldr	r3, [pc, #532]	; (8007a08 <model_configure_activations+0x530>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a87      	ldr	r2, [pc, #540]	; (8007a14 <model_configure_activations+0x53c>)
 80077f6:	60d3      	str	r3, [r2, #12]
    
    nl_27_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 80077f8:	4b83      	ldr	r3, [pc, #524]	; (8007a08 <model_configure_activations+0x530>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007800:	4a85      	ldr	r2, [pc, #532]	; (8007a18 <model_configure_activations+0x540>)
 8007802:	6093      	str	r3, [r2, #8]
    nl_27_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 8007804:	4b80      	ldr	r3, [pc, #512]	; (8007a08 <model_configure_activations+0x530>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800780c:	4a82      	ldr	r2, [pc, #520]	; (8007a18 <model_configure_activations+0x540>)
 800780e:	60d3      	str	r3, [r2, #12]
    
    eltwise_28_output_array.data = AI_PTR(g_model_activations_map[0] + 24576);
 8007810:	4b7d      	ldr	r3, [pc, #500]	; (8007a08 <model_configure_activations+0x530>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007818:	4a80      	ldr	r2, [pc, #512]	; (8007a1c <model_configure_activations+0x544>)
 800781a:	6093      	str	r3, [r2, #8]
    eltwise_28_output_array.data_start = AI_PTR(g_model_activations_map[0] + 24576);
 800781c:	4b7a      	ldr	r3, [pc, #488]	; (8007a08 <model_configure_activations+0x530>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007824:	4a7d      	ldr	r2, [pc, #500]	; (8007a1c <model_configure_activations+0x544>)
 8007826:	60d3      	str	r3, [r2, #12]
    
    pool_30_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007828:	4b77      	ldr	r3, [pc, #476]	; (8007a08 <model_configure_activations+0x530>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a7c      	ldr	r2, [pc, #496]	; (8007a20 <model_configure_activations+0x548>)
 800782e:	6093      	str	r3, [r2, #8]
    pool_30_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007830:	4b75      	ldr	r3, [pc, #468]	; (8007a08 <model_configure_activations+0x530>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a7a      	ldr	r2, [pc, #488]	; (8007a20 <model_configure_activations+0x548>)
 8007836:	60d3      	str	r3, [r2, #12]
    
    pool_29_output_array.data = AI_PTR(g_model_activations_map[0] + 64);
 8007838:	4b73      	ldr	r3, [pc, #460]	; (8007a08 <model_configure_activations+0x530>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3340      	adds	r3, #64	; 0x40
 800783e:	4a79      	ldr	r2, [pc, #484]	; (8007a24 <model_configure_activations+0x54c>)
 8007840:	6093      	str	r3, [r2, #8]
    pool_29_output_array.data_start = AI_PTR(g_model_activations_map[0] + 64);
 8007842:	4b71      	ldr	r3, [pc, #452]	; (8007a08 <model_configure_activations+0x530>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3340      	adds	r3, #64	; 0x40
 8007848:	4a76      	ldr	r2, [pc, #472]	; (8007a24 <model_configure_activations+0x54c>)
 800784a:	60d3      	str	r3, [r2, #12]
    
    concat_31_output_array.data = AI_PTR(g_model_activations_map[0] + 128);
 800784c:	4b6e      	ldr	r3, [pc, #440]	; (8007a08 <model_configure_activations+0x530>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3380      	adds	r3, #128	; 0x80
 8007852:	4a75      	ldr	r2, [pc, #468]	; (8007a28 <model_configure_activations+0x550>)
 8007854:	6093      	str	r3, [r2, #8]
    concat_31_output_array.data_start = AI_PTR(g_model_activations_map[0] + 128);
 8007856:	4b6c      	ldr	r3, [pc, #432]	; (8007a08 <model_configure_activations+0x530>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3380      	adds	r3, #128	; 0x80
 800785c:	4a72      	ldr	r2, [pc, #456]	; (8007a28 <model_configure_activations+0x550>)
 800785e:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007860:	4b69      	ldr	r3, [pc, #420]	; (8007a08 <model_configure_activations+0x530>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a71      	ldr	r2, [pc, #452]	; (8007a2c <model_configure_activations+0x554>)
 8007866:	6093      	str	r3, [r2, #8]
    conv2d_32_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007868:	4b67      	ldr	r3, [pc, #412]	; (8007a08 <model_configure_activations+0x530>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6f      	ldr	r2, [pc, #444]	; (8007a2c <model_configure_activations+0x554>)
 800786e:	60d3      	str	r3, [r2, #12]
    
    nl_33_output_array.data = AI_PTR(g_model_activations_map[0] + 4);
 8007870:	4b65      	ldr	r3, [pc, #404]	; (8007a08 <model_configure_activations+0x530>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3304      	adds	r3, #4
 8007876:	4a6e      	ldr	r2, [pc, #440]	; (8007a30 <model_configure_activations+0x558>)
 8007878:	6093      	str	r3, [r2, #8]
    nl_33_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4);
 800787a:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <model_configure_activations+0x530>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3304      	adds	r3, #4
 8007880:	4a6b      	ldr	r2, [pc, #428]	; (8007a30 <model_configure_activations+0x558>)
 8007882:	60d3      	str	r3, [r2, #12]
    
    eltwise_34_output_array.data = AI_PTR(g_model_activations_map[0] + 8);
 8007884:	4b60      	ldr	r3, [pc, #384]	; (8007a08 <model_configure_activations+0x530>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	4a6a      	ldr	r2, [pc, #424]	; (8007a34 <model_configure_activations+0x55c>)
 800788c:	6093      	str	r3, [r2, #8]
    eltwise_34_output_array.data_start = AI_PTR(g_model_activations_map[0] + 8);
 800788e:	4b5e      	ldr	r3, [pc, #376]	; (8007a08 <model_configure_activations+0x530>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	4a67      	ldr	r2, [pc, #412]	; (8007a34 <model_configure_activations+0x55c>)
 8007896:	60d3      	str	r3, [r2, #12]
    
    reduce_36_output_array.data = AI_PTR(g_model_activations_map[0] + 12296);
 8007898:	4b5b      	ldr	r3, [pc, #364]	; (8007a08 <model_configure_activations+0x530>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f243 0308 	movw	r3, #12296	; 0x3008
 80078a0:	4413      	add	r3, r2
 80078a2:	4a65      	ldr	r2, [pc, #404]	; (8007a38 <model_configure_activations+0x560>)
 80078a4:	6093      	str	r3, [r2, #8]
    reduce_36_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12296);
 80078a6:	4b58      	ldr	r3, [pc, #352]	; (8007a08 <model_configure_activations+0x530>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	f243 0308 	movw	r3, #12296	; 0x3008
 80078ae:	4413      	add	r3, r2
 80078b0:	4a61      	ldr	r2, [pc, #388]	; (8007a38 <model_configure_activations+0x560>)
 80078b2:	60d3      	str	r3, [r2, #12]
    
    reduce_36_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 13064);
 80078b4:	4b54      	ldr	r3, [pc, #336]	; (8007a08 <model_configure_activations+0x530>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f243 3308 	movw	r3, #13064	; 0x3308
 80078bc:	4413      	add	r3, r2
 80078be:	4a5f      	ldr	r2, [pc, #380]	; (8007a3c <model_configure_activations+0x564>)
 80078c0:	6093      	str	r3, [r2, #8]
    reduce_36_Mul_output_array.data_start = AI_PTR(g_model_activations_map[0] + 13064);
 80078c2:	4b51      	ldr	r3, [pc, #324]	; (8007a08 <model_configure_activations+0x530>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	f243 3308 	movw	r3, #13064	; 0x3308
 80078ca:	4413      	add	r3, r2
 80078cc:	4a5b      	ldr	r2, [pc, #364]	; (8007a3c <model_configure_activations+0x564>)
 80078ce:	60d3      	str	r3, [r2, #12]
    
    reduce_35_output_array.data = AI_PTR(g_model_activations_map[0] + 12296);
 80078d0:	4b4d      	ldr	r3, [pc, #308]	; (8007a08 <model_configure_activations+0x530>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	f243 0308 	movw	r3, #12296	; 0x3008
 80078d8:	4413      	add	r3, r2
 80078da:	4a59      	ldr	r2, [pc, #356]	; (8007a40 <model_configure_activations+0x568>)
 80078dc:	6093      	str	r3, [r2, #8]
    reduce_35_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12296);
 80078de:	4b4a      	ldr	r3, [pc, #296]	; (8007a08 <model_configure_activations+0x530>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	f243 0308 	movw	r3, #12296	; 0x3008
 80078e6:	4413      	add	r3, r2
 80078e8:	4a55      	ldr	r2, [pc, #340]	; (8007a40 <model_configure_activations+0x568>)
 80078ea:	60d3      	str	r3, [r2, #12]
    
    concat_37_output_array.data = AI_PTR(g_model_activations_map[0] + 13832);
 80078ec:	4b46      	ldr	r3, [pc, #280]	; (8007a08 <model_configure_activations+0x530>)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	f243 6308 	movw	r3, #13832	; 0x3608
 80078f4:	4413      	add	r3, r2
 80078f6:	4a53      	ldr	r2, [pc, #332]	; (8007a44 <model_configure_activations+0x56c>)
 80078f8:	6093      	str	r3, [r2, #8]
    concat_37_output_array.data_start = AI_PTR(g_model_activations_map[0] + 13832);
 80078fa:	4b43      	ldr	r3, [pc, #268]	; (8007a08 <model_configure_activations+0x530>)
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	f243 6308 	movw	r3, #13832	; 0x3608
 8007902:	4413      	add	r3, r2
 8007904:	4a4f      	ldr	r2, [pc, #316]	; (8007a44 <model_configure_activations+0x56c>)
 8007906:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_output_array.data = AI_PTR(g_model_activations_map[0] + 12296);
 8007908:	4b3f      	ldr	r3, [pc, #252]	; (8007a08 <model_configure_activations+0x530>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f243 0308 	movw	r3, #12296	; 0x3008
 8007910:	4413      	add	r3, r2
 8007912:	4a4d      	ldr	r2, [pc, #308]	; (8007a48 <model_configure_activations+0x570>)
 8007914:	6093      	str	r3, [r2, #8]
    conv2d_38_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12296);
 8007916:	4b3c      	ldr	r3, [pc, #240]	; (8007a08 <model_configure_activations+0x530>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	f243 0308 	movw	r3, #12296	; 0x3008
 800791e:	4413      	add	r3, r2
 8007920:	4a49      	ldr	r2, [pc, #292]	; (8007a48 <model_configure_activations+0x570>)
 8007922:	60d3      	str	r3, [r2, #12]
    
    nl_39_output_array.data = AI_PTR(g_model_activations_map[0] + 13064);
 8007924:	4b38      	ldr	r3, [pc, #224]	; (8007a08 <model_configure_activations+0x530>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	f243 3308 	movw	r3, #13064	; 0x3308
 800792c:	4413      	add	r3, r2
 800792e:	4a47      	ldr	r2, [pc, #284]	; (8007a4c <model_configure_activations+0x574>)
 8007930:	6093      	str	r3, [r2, #8]
    nl_39_output_array.data_start = AI_PTR(g_model_activations_map[0] + 13064);
 8007932:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <model_configure_activations+0x530>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	f243 3308 	movw	r3, #13064	; 0x3308
 800793a:	4413      	add	r3, r2
 800793c:	4a43      	ldr	r2, [pc, #268]	; (8007a4c <model_configure_activations+0x574>)
 800793e:	60d3      	str	r3, [r2, #12]
    
    eltwise_40_output_array.data = AI_PTR(g_model_activations_map[0] + 13832);
 8007940:	4b31      	ldr	r3, [pc, #196]	; (8007a08 <model_configure_activations+0x530>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	f243 6308 	movw	r3, #13832	; 0x3608
 8007948:	4413      	add	r3, r2
 800794a:	4a41      	ldr	r2, [pc, #260]	; (8007a50 <model_configure_activations+0x578>)
 800794c:	6093      	str	r3, [r2, #8]
    eltwise_40_output_array.data_start = AI_PTR(g_model_activations_map[0] + 13832);
 800794e:	4b2e      	ldr	r3, [pc, #184]	; (8007a08 <model_configure_activations+0x530>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	f243 6308 	movw	r3, #13832	; 0x3608
 8007956:	4413      	add	r3, r2
 8007958:	4a3d      	ldr	r2, [pc, #244]	; (8007a50 <model_configure_activations+0x578>)
 800795a:	60d3      	str	r3, [r2, #12]
    
    conv2d_41_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800795c:	4b2a      	ldr	r3, [pc, #168]	; (8007a08 <model_configure_activations+0x530>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a3c      	ldr	r2, [pc, #240]	; (8007a54 <model_configure_activations+0x57c>)
 8007962:	6093      	str	r3, [r2, #8]
    conv2d_41_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007964:	4b28      	ldr	r3, [pc, #160]	; (8007a08 <model_configure_activations+0x530>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a3a      	ldr	r2, [pc, #232]	; (8007a54 <model_configure_activations+0x57c>)
 800796a:	60d3      	str	r3, [r2, #12]
    
    nl_42_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 800796c:	4b26      	ldr	r3, [pc, #152]	; (8007a08 <model_configure_activations+0x530>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007974:	4a38      	ldr	r2, [pc, #224]	; (8007a58 <model_configure_activations+0x580>)
 8007976:	6093      	str	r3, [r2, #8]
    nl_42_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 8007978:	4b23      	ldr	r3, [pc, #140]	; (8007a08 <model_configure_activations+0x530>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007980:	4a35      	ldr	r2, [pc, #212]	; (8007a58 <model_configure_activations+0x580>)
 8007982:	60d3      	str	r3, [r2, #12]
    
    eltwise_43_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 8007984:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <model_configure_activations+0x530>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800798c:	4a33      	ldr	r2, [pc, #204]	; (8007a5c <model_configure_activations+0x584>)
 800798e:	6093      	str	r3, [r2, #8]
    eltwise_43_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 8007990:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <model_configure_activations+0x530>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007998:	4a30      	ldr	r2, [pc, #192]	; (8007a5c <model_configure_activations+0x584>)
 800799a:	60d3      	str	r3, [r2, #12]
    
    split_44_output0_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800799c:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <model_configure_activations+0x530>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a2f      	ldr	r2, [pc, #188]	; (8007a60 <model_configure_activations+0x588>)
 80079a2:	6093      	str	r3, [r2, #8]
    split_44_output0_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80079a4:	4b18      	ldr	r3, [pc, #96]	; (8007a08 <model_configure_activations+0x530>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2d      	ldr	r2, [pc, #180]	; (8007a60 <model_configure_activations+0x588>)
 80079aa:	60d3      	str	r3, [r2, #12]
    
    split_44_output1_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 80079ac:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <model_configure_activations+0x530>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80079b4:	4a2b      	ldr	r2, [pc, #172]	; (8007a64 <model_configure_activations+0x58c>)
 80079b6:	6093      	str	r3, [r2, #8]
    split_44_output1_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 80079b8:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <model_configure_activations+0x530>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80079c0:	4a28      	ldr	r2, [pc, #160]	; (8007a64 <model_configure_activations+0x58c>)
 80079c2:	60d3      	str	r3, [r2, #12]
    
    conv2d_59_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 80079c4:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <model_configure_activations+0x530>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80079cc:	4a26      	ldr	r2, [pc, #152]	; (8007a68 <model_configure_activations+0x590>)
 80079ce:	6093      	str	r3, [r2, #8]
    conv2d_59_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 80079d0:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <model_configure_activations+0x530>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80079d8:	4a23      	ldr	r2, [pc, #140]	; (8007a68 <model_configure_activations+0x590>)
 80079da:	60d3      	str	r3, [r2, #12]
    
    conv2d_60_output_array.data = AI_PTR(g_model_activations_map[0] + 9216);
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <model_configure_activations+0x530>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80079e4:	4a21      	ldr	r2, [pc, #132]	; (8007a6c <model_configure_activations+0x594>)
 80079e6:	6093      	str	r3, [r2, #8]
    conv2d_60_output_array.data_start = AI_PTR(g_model_activations_map[0] + 9216);
 80079e8:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <model_configure_activations+0x530>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80079f0:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <model_configure_activations+0x594>)
 80079f2:	60d3      	str	r3, [r2, #12]
    
    nl_61_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 80079f4:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <model_configure_activations+0x530>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80079fc:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <model_configure_activations+0x598>)
 80079fe:	6093      	str	r3, [r2, #8]
 8007a00:	e038      	b.n	8007a74 <model_configure_activations+0x59c>
 8007a02:	bf00      	nop
 8007a04:	20000530 	.word	0x20000530
 8007a08:	200169c4 	.word	0x200169c4
 8007a0c:	20000540 	.word	0x20000540
 8007a10:	20000550 	.word	0x20000550
 8007a14:	20000560 	.word	0x20000560
 8007a18:	20000570 	.word	0x20000570
 8007a1c:	20000580 	.word	0x20000580
 8007a20:	20000590 	.word	0x20000590
 8007a24:	200005a0 	.word	0x200005a0
 8007a28:	200005b0 	.word	0x200005b0
 8007a2c:	200005c0 	.word	0x200005c0
 8007a30:	200005d0 	.word	0x200005d0
 8007a34:	200005e0 	.word	0x200005e0
 8007a38:	200005f0 	.word	0x200005f0
 8007a3c:	20000600 	.word	0x20000600
 8007a40:	20000610 	.word	0x20000610
 8007a44:	20000620 	.word	0x20000620
 8007a48:	20000630 	.word	0x20000630
 8007a4c:	20000640 	.word	0x20000640
 8007a50:	20000650 	.word	0x20000650
 8007a54:	20000660 	.word	0x20000660
 8007a58:	20000670 	.word	0x20000670
 8007a5c:	20000680 	.word	0x20000680
 8007a60:	20000690 	.word	0x20000690
 8007a64:	200006a0 	.word	0x200006a0
 8007a68:	200006b0 	.word	0x200006b0
 8007a6c:	200006c0 	.word	0x200006c0
 8007a70:	200006d0 	.word	0x200006d0
    nl_61_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8007a74:	4b91      	ldr	r3, [pc, #580]	; (8007cbc <model_configure_activations+0x7e4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007a7c:	4a90      	ldr	r2, [pc, #576]	; (8007cc0 <model_configure_activations+0x7e8>)
 8007a7e:	60d3      	str	r3, [r2, #12]
    
    eltwise_62_output_array.data = AI_PTR(g_model_activations_map[0] + 15360);
 8007a80:	4b8e      	ldr	r3, [pc, #568]	; (8007cbc <model_configure_activations+0x7e4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007a88:	4a8e      	ldr	r2, [pc, #568]	; (8007cc4 <model_configure_activations+0x7ec>)
 8007a8a:	6093      	str	r3, [r2, #8]
    eltwise_62_output_array.data_start = AI_PTR(g_model_activations_map[0] + 15360);
 8007a8c:	4b8b      	ldr	r3, [pc, #556]	; (8007cbc <model_configure_activations+0x7e4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007a94:	4a8b      	ldr	r2, [pc, #556]	; (8007cc4 <model_configure_activations+0x7ec>)
 8007a96:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8007a98:	4b88      	ldr	r3, [pc, #544]	; (8007cbc <model_configure_activations+0x7e4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007aa0:	4a89      	ldr	r2, [pc, #548]	; (8007cc8 <model_configure_activations+0x7f0>)
 8007aa2:	6093      	str	r3, [r2, #8]
    conv2d_45_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8007aa4:	4b85      	ldr	r3, [pc, #532]	; (8007cbc <model_configure_activations+0x7e4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007aac:	4a86      	ldr	r2, [pc, #536]	; (8007cc8 <model_configure_activations+0x7f0>)
 8007aae:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 8007ab0:	4b82      	ldr	r3, [pc, #520]	; (8007cbc <model_configure_activations+0x7e4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007ab8:	4a84      	ldr	r2, [pc, #528]	; (8007ccc <model_configure_activations+0x7f4>)
 8007aba:	6093      	str	r3, [r2, #8]
    conv2d_46_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 8007abc:	4b7f      	ldr	r3, [pc, #508]	; (8007cbc <model_configure_activations+0x7e4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007ac4:	4a81      	ldr	r2, [pc, #516]	; (8007ccc <model_configure_activations+0x7f4>)
 8007ac6:	60d3      	str	r3, [r2, #12]
    
    nl_47_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007ac8:	4b7c      	ldr	r3, [pc, #496]	; (8007cbc <model_configure_activations+0x7e4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a80      	ldr	r2, [pc, #512]	; (8007cd0 <model_configure_activations+0x7f8>)
 8007ace:	6093      	str	r3, [r2, #8]
    nl_47_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007ad0:	4b7a      	ldr	r3, [pc, #488]	; (8007cbc <model_configure_activations+0x7e4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a7e      	ldr	r2, [pc, #504]	; (8007cd0 <model_configure_activations+0x7f8>)
 8007ad6:	60d3      	str	r3, [r2, #12]
    
    eltwise_48_output_array.data = AI_PTR(g_model_activations_map[0] + 21504);
 8007ad8:	4b78      	ldr	r3, [pc, #480]	; (8007cbc <model_configure_activations+0x7e4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8007ae0:	4a7c      	ldr	r2, [pc, #496]	; (8007cd4 <model_configure_activations+0x7fc>)
 8007ae2:	6093      	str	r3, [r2, #8]
    eltwise_48_output_array.data_start = AI_PTR(g_model_activations_map[0] + 21504);
 8007ae4:	4b75      	ldr	r3, [pc, #468]	; (8007cbc <model_configure_activations+0x7e4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8007aec:	4a79      	ldr	r2, [pc, #484]	; (8007cd4 <model_configure_activations+0x7fc>)
 8007aee:	60d3      	str	r3, [r2, #12]
    
    conv2d_49_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007af0:	4b72      	ldr	r3, [pc, #456]	; (8007cbc <model_configure_activations+0x7e4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a78      	ldr	r2, [pc, #480]	; (8007cd8 <model_configure_activations+0x800>)
 8007af6:	6093      	str	r3, [r2, #8]
    conv2d_49_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007af8:	4b70      	ldr	r3, [pc, #448]	; (8007cbc <model_configure_activations+0x7e4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a76      	ldr	r2, [pc, #472]	; (8007cd8 <model_configure_activations+0x800>)
 8007afe:	60d3      	str	r3, [r2, #12]
    
    nl_50_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8007b00:	4b6e      	ldr	r3, [pc, #440]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007b08:	4a74      	ldr	r2, [pc, #464]	; (8007cdc <model_configure_activations+0x804>)
 8007b0a:	6093      	str	r3, [r2, #8]
    nl_50_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8007b0c:	4b6b      	ldr	r3, [pc, #428]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007b14:	4a71      	ldr	r2, [pc, #452]	; (8007cdc <model_configure_activations+0x804>)
 8007b16:	60d3      	str	r3, [r2, #12]
    
    eltwise_51_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8007b18:	4b68      	ldr	r3, [pc, #416]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007b20:	4a6f      	ldr	r2, [pc, #444]	; (8007ce0 <model_configure_activations+0x808>)
 8007b22:	6093      	str	r3, [r2, #8]
    eltwise_51_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8007b24:	4b65      	ldr	r3, [pc, #404]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007b2c:	4a6c      	ldr	r2, [pc, #432]	; (8007ce0 <model_configure_activations+0x808>)
 8007b2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_52_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007b30:	4b62      	ldr	r3, [pc, #392]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a6b      	ldr	r2, [pc, #428]	; (8007ce4 <model_configure_activations+0x80c>)
 8007b36:	6093      	str	r3, [r2, #8]
    conv2d_52_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007b38:	4b60      	ldr	r3, [pc, #384]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a69      	ldr	r2, [pc, #420]	; (8007ce4 <model_configure_activations+0x80c>)
 8007b3e:	60d3      	str	r3, [r2, #12]
    
    nl_53_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8007b40:	4b5e      	ldr	r3, [pc, #376]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007b48:	4a67      	ldr	r2, [pc, #412]	; (8007ce8 <model_configure_activations+0x810>)
 8007b4a:	6093      	str	r3, [r2, #8]
    nl_53_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8007b4c:	4b5b      	ldr	r3, [pc, #364]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007b54:	4a64      	ldr	r2, [pc, #400]	; (8007ce8 <model_configure_activations+0x810>)
 8007b56:	60d3      	str	r3, [r2, #12]
    
    eltwise_54_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8007b58:	4b58      	ldr	r3, [pc, #352]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007b60:	4a62      	ldr	r2, [pc, #392]	; (8007cec <model_configure_activations+0x814>)
 8007b62:	6093      	str	r3, [r2, #8]
    eltwise_54_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8007b64:	4b55      	ldr	r3, [pc, #340]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007b6c:	4a5f      	ldr	r2, [pc, #380]	; (8007cec <model_configure_activations+0x814>)
 8007b6e:	60d3      	str	r3, [r2, #12]
    
    conv2d_55_output_array.data = AI_PTR(g_model_activations_map[0] + 4608);
 8007b70:	4b52      	ldr	r3, [pc, #328]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8007b78:	4a5d      	ldr	r2, [pc, #372]	; (8007cf0 <model_configure_activations+0x818>)
 8007b7a:	6093      	str	r3, [r2, #8]
    conv2d_55_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4608);
 8007b7c:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8007b84:	4a5a      	ldr	r2, [pc, #360]	; (8007cf0 <model_configure_activations+0x818>)
 8007b86:	60d3      	str	r3, [r2, #12]
    
    nl_56_output_array.data = AI_PTR(g_model_activations_map[0] + 27648);
 8007b88:	4b4c      	ldr	r3, [pc, #304]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8007b90:	4a58      	ldr	r2, [pc, #352]	; (8007cf4 <model_configure_activations+0x81c>)
 8007b92:	6093      	str	r3, [r2, #8]
    nl_56_output_array.data_start = AI_PTR(g_model_activations_map[0] + 27648);
 8007b94:	4b49      	ldr	r3, [pc, #292]	; (8007cbc <model_configure_activations+0x7e4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8007b9c:	4a55      	ldr	r2, [pc, #340]	; (8007cf4 <model_configure_activations+0x81c>)
 8007b9e:	60d3      	str	r3, [r2, #12]
    
    eltwise_57_output_array.data = AI_PTR(g_model_activations_map[0] + 33792);
 8007ba0:	4b46      	ldr	r3, [pc, #280]	; (8007cbc <model_configure_activations+0x7e4>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
 8007ba8:	4a53      	ldr	r2, [pc, #332]	; (8007cf8 <model_configure_activations+0x820>)
 8007baa:	6093      	str	r3, [r2, #8]
    eltwise_57_output_array.data_start = AI_PTR(g_model_activations_map[0] + 33792);
 8007bac:	4b43      	ldr	r3, [pc, #268]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
 8007bb4:	4a50      	ldr	r2, [pc, #320]	; (8007cf8 <model_configure_activations+0x820>)
 8007bb6:	60d3      	str	r3, [r2, #12]
    
    eltwise_58_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007bb8:	4b40      	ldr	r3, [pc, #256]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a4f      	ldr	r2, [pc, #316]	; (8007cfc <model_configure_activations+0x824>)
 8007bbe:	6093      	str	r3, [r2, #8]
    eltwise_58_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007bc0:	4b3e      	ldr	r3, [pc, #248]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a4d      	ldr	r2, [pc, #308]	; (8007cfc <model_configure_activations+0x824>)
 8007bc6:	60d3      	str	r3, [r2, #12]
    
    concat_63_output_array.data = AI_PTR(g_model_activations_map[0] + 21504);
 8007bc8:	4b3c      	ldr	r3, [pc, #240]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8007bd0:	4a4b      	ldr	r2, [pc, #300]	; (8007d00 <model_configure_activations+0x828>)
 8007bd2:	6093      	str	r3, [r2, #8]
    concat_63_output_array.data_start = AI_PTR(g_model_activations_map[0] + 21504);
 8007bd4:	4b39      	ldr	r3, [pc, #228]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8007bdc:	4a48      	ldr	r2, [pc, #288]	; (8007d00 <model_configure_activations+0x828>)
 8007bde:	60d3      	str	r3, [r2, #12]
    
    conv2d_64_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007be0:	4b36      	ldr	r3, [pc, #216]	; (8007cbc <model_configure_activations+0x7e4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a47      	ldr	r2, [pc, #284]	; (8007d04 <model_configure_activations+0x82c>)
 8007be6:	6093      	str	r3, [r2, #8]
    conv2d_64_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007be8:	4b34      	ldr	r3, [pc, #208]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a45      	ldr	r2, [pc, #276]	; (8007d04 <model_configure_activations+0x82c>)
 8007bee:	60d3      	str	r3, [r2, #12]
    
    nl_65_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 8007bf0:	4b32      	ldr	r3, [pc, #200]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007bf8:	4a43      	ldr	r2, [pc, #268]	; (8007d08 <model_configure_activations+0x830>)
 8007bfa:	6093      	str	r3, [r2, #8]
    nl_65_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 8007bfc:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <model_configure_activations+0x7e4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007c04:	4a40      	ldr	r2, [pc, #256]	; (8007d08 <model_configure_activations+0x830>)
 8007c06:	60d3      	str	r3, [r2, #12]
    
    eltwise_66_output_array.data = AI_PTR(g_model_activations_map[0] + 12288);
 8007c08:	4b2c      	ldr	r3, [pc, #176]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007c10:	4a3e      	ldr	r2, [pc, #248]	; (8007d0c <model_configure_activations+0x834>)
 8007c12:	6093      	str	r3, [r2, #8]
    eltwise_66_output_array.data_start = AI_PTR(g_model_activations_map[0] + 12288);
 8007c14:	4b29      	ldr	r3, [pc, #164]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007c1c:	4a3b      	ldr	r2, [pc, #236]	; (8007d0c <model_configure_activations+0x834>)
 8007c1e:	60d3      	str	r3, [r2, #12]
    
    pool_68_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007c20:	4b26      	ldr	r3, [pc, #152]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a3a      	ldr	r2, [pc, #232]	; (8007d10 <model_configure_activations+0x838>)
 8007c26:	6093      	str	r3, [r2, #8]
    pool_68_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007c28:	4b24      	ldr	r3, [pc, #144]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a38      	ldr	r2, [pc, #224]	; (8007d10 <model_configure_activations+0x838>)
 8007c2e:	60d3      	str	r3, [r2, #12]
    
    pool_67_output_array.data = AI_PTR(g_model_activations_map[0] + 128);
 8007c30:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3380      	adds	r3, #128	; 0x80
 8007c36:	4a37      	ldr	r2, [pc, #220]	; (8007d14 <model_configure_activations+0x83c>)
 8007c38:	6093      	str	r3, [r2, #8]
    pool_67_output_array.data_start = AI_PTR(g_model_activations_map[0] + 128);
 8007c3a:	4b20      	ldr	r3, [pc, #128]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3380      	adds	r3, #128	; 0x80
 8007c40:	4a34      	ldr	r2, [pc, #208]	; (8007d14 <model_configure_activations+0x83c>)
 8007c42:	60d3      	str	r3, [r2, #12]
    
    concat_69_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 8007c44:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c4c:	4a32      	ldr	r2, [pc, #200]	; (8007d18 <model_configure_activations+0x840>)
 8007c4e:	6093      	str	r3, [r2, #8]
    concat_69_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 8007c50:	4b1a      	ldr	r3, [pc, #104]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c58:	4a2f      	ldr	r2, [pc, #188]	; (8007d18 <model_configure_activations+0x840>)
 8007c5a:	60d3      	str	r3, [r2, #12]
    
    conv2d_70_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007c5c:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2e      	ldr	r2, [pc, #184]	; (8007d1c <model_configure_activations+0x844>)
 8007c62:	6093      	str	r3, [r2, #8]
    conv2d_70_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007c64:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a2c      	ldr	r2, [pc, #176]	; (8007d1c <model_configure_activations+0x844>)
 8007c6a:	60d3      	str	r3, [r2, #12]
    
    nl_71_output_array.data = AI_PTR(g_model_activations_map[0] + 4);
 8007c6c:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4a2b      	ldr	r2, [pc, #172]	; (8007d20 <model_configure_activations+0x848>)
 8007c74:	6093      	str	r3, [r2, #8]
    nl_71_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4);
 8007c76:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4a28      	ldr	r2, [pc, #160]	; (8007d20 <model_configure_activations+0x848>)
 8007c7e:	60d3      	str	r3, [r2, #12]
    
    eltwise_72_output_array.data = AI_PTR(g_model_activations_map[0] + 8);
 8007c80:	4b0e      	ldr	r3, [pc, #56]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	4a27      	ldr	r2, [pc, #156]	; (8007d24 <model_configure_activations+0x84c>)
 8007c88:	6093      	str	r3, [r2, #8]
    eltwise_72_output_array.data_start = AI_PTR(g_model_activations_map[0] + 8);
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	4a24      	ldr	r2, [pc, #144]	; (8007d24 <model_configure_activations+0x84c>)
 8007c92:	60d3      	str	r3, [r2, #12]
    
    reduce_74_output_array.data = AI_PTR(g_model_activations_map[0] + 6152);
 8007c94:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <model_configure_activations+0x7e4>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	f641 0308 	movw	r3, #6152	; 0x1808
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4a22      	ldr	r2, [pc, #136]	; (8007d28 <model_configure_activations+0x850>)
 8007ca0:	6093      	str	r3, [r2, #8]
    reduce_74_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6152);
 8007ca2:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <model_configure_activations+0x7e4>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	f641 0308 	movw	r3, #6152	; 0x1808
 8007caa:	4413      	add	r3, r2
 8007cac:	4a1e      	ldr	r2, [pc, #120]	; (8007d28 <model_configure_activations+0x850>)
 8007cae:	60d3      	str	r3, [r2, #12]
    
    reduce_74_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 6344);
 8007cb0:	4b02      	ldr	r3, [pc, #8]	; (8007cbc <model_configure_activations+0x7e4>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	f641 03c8 	movw	r3, #6344	; 0x18c8
 8007cb8:	4413      	add	r3, r2
 8007cba:	e037      	b.n	8007d2c <model_configure_activations+0x854>
 8007cbc:	200169c4 	.word	0x200169c4
 8007cc0:	200006d0 	.word	0x200006d0
 8007cc4:	200006e0 	.word	0x200006e0
 8007cc8:	200006f0 	.word	0x200006f0
 8007ccc:	20000700 	.word	0x20000700
 8007cd0:	20000710 	.word	0x20000710
 8007cd4:	20000720 	.word	0x20000720
 8007cd8:	20000730 	.word	0x20000730
 8007cdc:	20000740 	.word	0x20000740
 8007ce0:	20000750 	.word	0x20000750
 8007ce4:	20000760 	.word	0x20000760
 8007ce8:	20000770 	.word	0x20000770
 8007cec:	20000780 	.word	0x20000780
 8007cf0:	20000790 	.word	0x20000790
 8007cf4:	200007a0 	.word	0x200007a0
 8007cf8:	200007b0 	.word	0x200007b0
 8007cfc:	200007c0 	.word	0x200007c0
 8007d00:	200007d0 	.word	0x200007d0
 8007d04:	200007e0 	.word	0x200007e0
 8007d08:	200007f0 	.word	0x200007f0
 8007d0c:	20000800 	.word	0x20000800
 8007d10:	20000810 	.word	0x20000810
 8007d14:	20000820 	.word	0x20000820
 8007d18:	20000830 	.word	0x20000830
 8007d1c:	20000840 	.word	0x20000840
 8007d20:	20000850 	.word	0x20000850
 8007d24:	20000860 	.word	0x20000860
 8007d28:	20000870 	.word	0x20000870
 8007d2c:	4a95      	ldr	r2, [pc, #596]	; (8007f84 <model_configure_activations+0xaac>)
 8007d2e:	6093      	str	r3, [r2, #8]
    reduce_74_Mul_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6344);
 8007d30:	4b95      	ldr	r3, [pc, #596]	; (8007f88 <model_configure_activations+0xab0>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	f641 03c8 	movw	r3, #6344	; 0x18c8
 8007d38:	4413      	add	r3, r2
 8007d3a:	4a92      	ldr	r2, [pc, #584]	; (8007f84 <model_configure_activations+0xaac>)
 8007d3c:	60d3      	str	r3, [r2, #12]
    
    reduce_73_output_array.data = AI_PTR(g_model_activations_map[0] + 6152);
 8007d3e:	4b92      	ldr	r3, [pc, #584]	; (8007f88 <model_configure_activations+0xab0>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	f641 0308 	movw	r3, #6152	; 0x1808
 8007d46:	4413      	add	r3, r2
 8007d48:	4a90      	ldr	r2, [pc, #576]	; (8007f8c <model_configure_activations+0xab4>)
 8007d4a:	6093      	str	r3, [r2, #8]
    reduce_73_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6152);
 8007d4c:	4b8e      	ldr	r3, [pc, #568]	; (8007f88 <model_configure_activations+0xab0>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	f641 0308 	movw	r3, #6152	; 0x1808
 8007d54:	4413      	add	r3, r2
 8007d56:	4a8d      	ldr	r2, [pc, #564]	; (8007f8c <model_configure_activations+0xab4>)
 8007d58:	60d3      	str	r3, [r2, #12]
    
    concat_75_output_array.data = AI_PTR(g_model_activations_map[0] + 6536);
 8007d5a:	4b8b      	ldr	r3, [pc, #556]	; (8007f88 <model_configure_activations+0xab0>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	f641 1388 	movw	r3, #6536	; 0x1988
 8007d62:	4413      	add	r3, r2
 8007d64:	4a8a      	ldr	r2, [pc, #552]	; (8007f90 <model_configure_activations+0xab8>)
 8007d66:	6093      	str	r3, [r2, #8]
    concat_75_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6536);
 8007d68:	4b87      	ldr	r3, [pc, #540]	; (8007f88 <model_configure_activations+0xab0>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f641 1388 	movw	r3, #6536	; 0x1988
 8007d70:	4413      	add	r3, r2
 8007d72:	4a87      	ldr	r2, [pc, #540]	; (8007f90 <model_configure_activations+0xab8>)
 8007d74:	60d3      	str	r3, [r2, #12]
    
    conv2d_76_output_array.data = AI_PTR(g_model_activations_map[0] + 6152);
 8007d76:	4b84      	ldr	r3, [pc, #528]	; (8007f88 <model_configure_activations+0xab0>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	f641 0308 	movw	r3, #6152	; 0x1808
 8007d7e:	4413      	add	r3, r2
 8007d80:	4a84      	ldr	r2, [pc, #528]	; (8007f94 <model_configure_activations+0xabc>)
 8007d82:	6093      	str	r3, [r2, #8]
    conv2d_76_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6152);
 8007d84:	4b80      	ldr	r3, [pc, #512]	; (8007f88 <model_configure_activations+0xab0>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	f641 0308 	movw	r3, #6152	; 0x1808
 8007d8c:	4413      	add	r3, r2
 8007d8e:	4a81      	ldr	r2, [pc, #516]	; (8007f94 <model_configure_activations+0xabc>)
 8007d90:	60d3      	str	r3, [r2, #12]
    
    nl_77_output_array.data = AI_PTR(g_model_activations_map[0] + 6344);
 8007d92:	4b7d      	ldr	r3, [pc, #500]	; (8007f88 <model_configure_activations+0xab0>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	f641 03c8 	movw	r3, #6344	; 0x18c8
 8007d9a:	4413      	add	r3, r2
 8007d9c:	4a7e      	ldr	r2, [pc, #504]	; (8007f98 <model_configure_activations+0xac0>)
 8007d9e:	6093      	str	r3, [r2, #8]
    nl_77_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6344);
 8007da0:	4b79      	ldr	r3, [pc, #484]	; (8007f88 <model_configure_activations+0xab0>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	f641 03c8 	movw	r3, #6344	; 0x18c8
 8007da8:	4413      	add	r3, r2
 8007daa:	4a7b      	ldr	r2, [pc, #492]	; (8007f98 <model_configure_activations+0xac0>)
 8007dac:	60d3      	str	r3, [r2, #12]
    
    eltwise_78_output_array.data = AI_PTR(g_model_activations_map[0] + 6536);
 8007dae:	4b76      	ldr	r3, [pc, #472]	; (8007f88 <model_configure_activations+0xab0>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	f641 1388 	movw	r3, #6536	; 0x1988
 8007db6:	4413      	add	r3, r2
 8007db8:	4a78      	ldr	r2, [pc, #480]	; (8007f9c <model_configure_activations+0xac4>)
 8007dba:	6093      	str	r3, [r2, #8]
    eltwise_78_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6536);
 8007dbc:	4b72      	ldr	r3, [pc, #456]	; (8007f88 <model_configure_activations+0xab0>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	f641 1388 	movw	r3, #6536	; 0x1988
 8007dc4:	4413      	add	r3, r2
 8007dc6:	4a75      	ldr	r2, [pc, #468]	; (8007f9c <model_configure_activations+0xac4>)
 8007dc8:	60d3      	str	r3, [r2, #12]
    
    conv2d_79_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007dca:	4b6f      	ldr	r3, [pc, #444]	; (8007f88 <model_configure_activations+0xab0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a74      	ldr	r2, [pc, #464]	; (8007fa0 <model_configure_activations+0xac8>)
 8007dd0:	6093      	str	r3, [r2, #8]
    conv2d_79_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007dd2:	4b6d      	ldr	r3, [pc, #436]	; (8007f88 <model_configure_activations+0xab0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a72      	ldr	r2, [pc, #456]	; (8007fa0 <model_configure_activations+0xac8>)
 8007dd8:	60d3      	str	r3, [r2, #12]
    
    nl_80_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8007dda:	4b6b      	ldr	r3, [pc, #428]	; (8007f88 <model_configure_activations+0xab0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007de2:	4a70      	ldr	r2, [pc, #448]	; (8007fa4 <model_configure_activations+0xacc>)
 8007de4:	6093      	str	r3, [r2, #8]
    nl_80_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8007de6:	4b68      	ldr	r3, [pc, #416]	; (8007f88 <model_configure_activations+0xab0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007dee:	4a6d      	ldr	r2, [pc, #436]	; (8007fa4 <model_configure_activations+0xacc>)
 8007df0:	60d3      	str	r3, [r2, #12]
    
    eltwise_81_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 8007df2:	4b65      	ldr	r3, [pc, #404]	; (8007f88 <model_configure_activations+0xab0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007dfa:	4a6b      	ldr	r2, [pc, #428]	; (8007fa8 <model_configure_activations+0xad0>)
 8007dfc:	6093      	str	r3, [r2, #8]
    eltwise_81_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 8007dfe:	4b62      	ldr	r3, [pc, #392]	; (8007f88 <model_configure_activations+0xab0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007e06:	4a68      	ldr	r2, [pc, #416]	; (8007fa8 <model_configure_activations+0xad0>)
 8007e08:	60d3      	str	r3, [r2, #12]
    
    split_82_output0_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007e0a:	4b5f      	ldr	r3, [pc, #380]	; (8007f88 <model_configure_activations+0xab0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a67      	ldr	r2, [pc, #412]	; (8007fac <model_configure_activations+0xad4>)
 8007e10:	6093      	str	r3, [r2, #8]
    split_82_output0_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007e12:	4b5d      	ldr	r3, [pc, #372]	; (8007f88 <model_configure_activations+0xab0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a65      	ldr	r2, [pc, #404]	; (8007fac <model_configure_activations+0xad4>)
 8007e18:	60d3      	str	r3, [r2, #12]
    
    split_82_output1_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8007e1a:	4b5b      	ldr	r3, [pc, #364]	; (8007f88 <model_configure_activations+0xab0>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007e22:	4a63      	ldr	r2, [pc, #396]	; (8007fb0 <model_configure_activations+0xad8>)
 8007e24:	6093      	str	r3, [r2, #8]
    split_82_output1_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8007e26:	4b58      	ldr	r3, [pc, #352]	; (8007f88 <model_configure_activations+0xab0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007e2e:	4a60      	ldr	r2, [pc, #384]	; (8007fb0 <model_configure_activations+0xad8>)
 8007e30:	60d3      	str	r3, [r2, #12]
    
    conv2d_97_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8007e32:	4b55      	ldr	r3, [pc, #340]	; (8007f88 <model_configure_activations+0xab0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007e3a:	4a5e      	ldr	r2, [pc, #376]	; (8007fb4 <model_configure_activations+0xadc>)
 8007e3c:	6093      	str	r3, [r2, #8]
    conv2d_97_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8007e3e:	4b52      	ldr	r3, [pc, #328]	; (8007f88 <model_configure_activations+0xab0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007e46:	4a5b      	ldr	r2, [pc, #364]	; (8007fb4 <model_configure_activations+0xadc>)
 8007e48:	60d3      	str	r3, [r2, #12]
    
    conv2d_98_output_array.data = AI_PTR(g_model_activations_map[0] + 4608);
 8007e4a:	4b4f      	ldr	r3, [pc, #316]	; (8007f88 <model_configure_activations+0xab0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8007e52:	4a59      	ldr	r2, [pc, #356]	; (8007fb8 <model_configure_activations+0xae0>)
 8007e54:	6093      	str	r3, [r2, #8]
    conv2d_98_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4608);
 8007e56:	4b4c      	ldr	r3, [pc, #304]	; (8007f88 <model_configure_activations+0xab0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8007e5e:	4a56      	ldr	r2, [pc, #344]	; (8007fb8 <model_configure_activations+0xae0>)
 8007e60:	60d3      	str	r3, [r2, #12]
    
    nl_99_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8007e62:	4b49      	ldr	r3, [pc, #292]	; (8007f88 <model_configure_activations+0xab0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007e6a:	4a54      	ldr	r2, [pc, #336]	; (8007fbc <model_configure_activations+0xae4>)
 8007e6c:	6093      	str	r3, [r2, #8]
    nl_99_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8007e6e:	4b46      	ldr	r3, [pc, #280]	; (8007f88 <model_configure_activations+0xab0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007e76:	4a51      	ldr	r2, [pc, #324]	; (8007fbc <model_configure_activations+0xae4>)
 8007e78:	60d3      	str	r3, [r2, #12]
    
    eltwise_100_output_array.data = AI_PTR(g_model_activations_map[0] + 7680);
 8007e7a:	4b43      	ldr	r3, [pc, #268]	; (8007f88 <model_configure_activations+0xab0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8007e82:	4a4f      	ldr	r2, [pc, #316]	; (8007fc0 <model_configure_activations+0xae8>)
 8007e84:	6093      	str	r3, [r2, #8]
    eltwise_100_output_array.data_start = AI_PTR(g_model_activations_map[0] + 7680);
 8007e86:	4b40      	ldr	r3, [pc, #256]	; (8007f88 <model_configure_activations+0xab0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8007e8e:	4a4c      	ldr	r2, [pc, #304]	; (8007fc0 <model_configure_activations+0xae8>)
 8007e90:	60d3      	str	r3, [r2, #12]
    
    conv2d_83_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8007e92:	4b3d      	ldr	r3, [pc, #244]	; (8007f88 <model_configure_activations+0xab0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007e9a:	4a4a      	ldr	r2, [pc, #296]	; (8007fc4 <model_configure_activations+0xaec>)
 8007e9c:	6093      	str	r3, [r2, #8]
    conv2d_83_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8007e9e:	4b3a      	ldr	r3, [pc, #232]	; (8007f88 <model_configure_activations+0xab0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007ea6:	4a47      	ldr	r2, [pc, #284]	; (8007fc4 <model_configure_activations+0xaec>)
 8007ea8:	60d3      	str	r3, [r2, #12]
    
    conv2d_84_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8007eaa:	4b37      	ldr	r3, [pc, #220]	; (8007f88 <model_configure_activations+0xab0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007eb2:	4a45      	ldr	r2, [pc, #276]	; (8007fc8 <model_configure_activations+0xaf0>)
 8007eb4:	6093      	str	r3, [r2, #8]
    conv2d_84_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8007eb6:	4b34      	ldr	r3, [pc, #208]	; (8007f88 <model_configure_activations+0xab0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007ebe:	4a42      	ldr	r2, [pc, #264]	; (8007fc8 <model_configure_activations+0xaf0>)
 8007ec0:	60d3      	str	r3, [r2, #12]
    
    nl_85_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007ec2:	4b31      	ldr	r3, [pc, #196]	; (8007f88 <model_configure_activations+0xab0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a41      	ldr	r2, [pc, #260]	; (8007fcc <model_configure_activations+0xaf4>)
 8007ec8:	6093      	str	r3, [r2, #8]
    nl_85_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007eca:	4b2f      	ldr	r3, [pc, #188]	; (8007f88 <model_configure_activations+0xab0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a3f      	ldr	r2, [pc, #252]	; (8007fcc <model_configure_activations+0xaf4>)
 8007ed0:	60d3      	str	r3, [r2, #12]
    
    eltwise_86_output_array.data = AI_PTR(g_model_activations_map[0] + 10752);
 8007ed2:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <model_configure_activations+0xab0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8007eda:	4a3d      	ldr	r2, [pc, #244]	; (8007fd0 <model_configure_activations+0xaf8>)
 8007edc:	6093      	str	r3, [r2, #8]
    eltwise_86_output_array.data_start = AI_PTR(g_model_activations_map[0] + 10752);
 8007ede:	4b2a      	ldr	r3, [pc, #168]	; (8007f88 <model_configure_activations+0xab0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8007ee6:	4a3a      	ldr	r2, [pc, #232]	; (8007fd0 <model_configure_activations+0xaf8>)
 8007ee8:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007eea:	4b27      	ldr	r3, [pc, #156]	; (8007f88 <model_configure_activations+0xab0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a39      	ldr	r2, [pc, #228]	; (8007fd4 <model_configure_activations+0xafc>)
 8007ef0:	6093      	str	r3, [r2, #8]
    conv2d_87_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007ef2:	4b25      	ldr	r3, [pc, #148]	; (8007f88 <model_configure_activations+0xab0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a37      	ldr	r2, [pc, #220]	; (8007fd4 <model_configure_activations+0xafc>)
 8007ef8:	60d3      	str	r3, [r2, #12]
    
    nl_88_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 8007efa:	4b23      	ldr	r3, [pc, #140]	; (8007f88 <model_configure_activations+0xab0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f02:	4a35      	ldr	r2, [pc, #212]	; (8007fd8 <model_configure_activations+0xb00>)
 8007f04:	6093      	str	r3, [r2, #8]
    nl_88_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 8007f06:	4b20      	ldr	r3, [pc, #128]	; (8007f88 <model_configure_activations+0xab0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f0e:	4a32      	ldr	r2, [pc, #200]	; (8007fd8 <model_configure_activations+0xb00>)
 8007f10:	60d3      	str	r3, [r2, #12]
    
    eltwise_89_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8007f12:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <model_configure_activations+0xab0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007f1a:	4a30      	ldr	r2, [pc, #192]	; (8007fdc <model_configure_activations+0xb04>)
 8007f1c:	6093      	str	r3, [r2, #8]
    eltwise_89_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8007f1e:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <model_configure_activations+0xab0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007f26:	4a2d      	ldr	r2, [pc, #180]	; (8007fdc <model_configure_activations+0xb04>)
 8007f28:	60d3      	str	r3, [r2, #12]
    
    conv2d_90_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8007f2a:	4b17      	ldr	r3, [pc, #92]	; (8007f88 <model_configure_activations+0xab0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <model_configure_activations+0xb08>)
 8007f30:	6093      	str	r3, [r2, #8]
    conv2d_90_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <model_configure_activations+0xab0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a2a      	ldr	r2, [pc, #168]	; (8007fe0 <model_configure_activations+0xb08>)
 8007f38:	60d3      	str	r3, [r2, #12]
    
    nl_91_output_array.data = AI_PTR(g_model_activations_map[0] + 768);
 8007f3a:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <model_configure_activations+0xab0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f42:	4a28      	ldr	r2, [pc, #160]	; (8007fe4 <model_configure_activations+0xb0c>)
 8007f44:	6093      	str	r3, [r2, #8]
    nl_91_output_array.data_start = AI_PTR(g_model_activations_map[0] + 768);
 8007f46:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <model_configure_activations+0xab0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f4e:	4a25      	ldr	r2, [pc, #148]	; (8007fe4 <model_configure_activations+0xb0c>)
 8007f50:	60d3      	str	r3, [r2, #12]
    
    eltwise_92_output_array.data = AI_PTR(g_model_activations_map[0] + 1536);
 8007f52:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <model_configure_activations+0xab0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007f5a:	4a23      	ldr	r2, [pc, #140]	; (8007fe8 <model_configure_activations+0xb10>)
 8007f5c:	6093      	str	r3, [r2, #8]
    eltwise_92_output_array.data_start = AI_PTR(g_model_activations_map[0] + 1536);
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <model_configure_activations+0xab0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007f66:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <model_configure_activations+0xb10>)
 8007f68:	60d3      	str	r3, [r2, #12]
    
    conv2d_93_output_array.data = AI_PTR(g_model_activations_map[0] + 2304);
 8007f6a:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <model_configure_activations+0xab0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f72:	4a1e      	ldr	r2, [pc, #120]	; (8007fec <model_configure_activations+0xb14>)
 8007f74:	6093      	str	r3, [r2, #8]
    conv2d_93_output_array.data_start = AI_PTR(g_model_activations_map[0] + 2304);
 8007f76:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <model_configure_activations+0xab0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <model_configure_activations+0xb14>)
 8007f80:	60d3      	str	r3, [r2, #12]
 8007f82:	e035      	b.n	8007ff0 <model_configure_activations+0xb18>
 8007f84:	20000880 	.word	0x20000880
 8007f88:	200169c4 	.word	0x200169c4
 8007f8c:	20000890 	.word	0x20000890
 8007f90:	200008a0 	.word	0x200008a0
 8007f94:	200008b0 	.word	0x200008b0
 8007f98:	200008c0 	.word	0x200008c0
 8007f9c:	200008d0 	.word	0x200008d0
 8007fa0:	200008e0 	.word	0x200008e0
 8007fa4:	200008f0 	.word	0x200008f0
 8007fa8:	20000900 	.word	0x20000900
 8007fac:	20000910 	.word	0x20000910
 8007fb0:	20000920 	.word	0x20000920
 8007fb4:	20000930 	.word	0x20000930
 8007fb8:	20000940 	.word	0x20000940
 8007fbc:	20000950 	.word	0x20000950
 8007fc0:	20000960 	.word	0x20000960
 8007fc4:	20000970 	.word	0x20000970
 8007fc8:	20000980 	.word	0x20000980
 8007fcc:	20000990 	.word	0x20000990
 8007fd0:	200009a0 	.word	0x200009a0
 8007fd4:	200009b0 	.word	0x200009b0
 8007fd8:	200009c0 	.word	0x200009c0
 8007fdc:	200009d0 	.word	0x200009d0
 8007fe0:	200009e0 	.word	0x200009e0
 8007fe4:	200009f0 	.word	0x200009f0
 8007fe8:	20000a00 	.word	0x20000a00
 8007fec:	20000a10 	.word	0x20000a10
    
    nl_94_output_array.data = AI_PTR(g_model_activations_map[0] + 13824);
 8007ff0:	4b81      	ldr	r3, [pc, #516]	; (80081f8 <model_configure_activations+0xd20>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8007ff8:	4a80      	ldr	r2, [pc, #512]	; (80081fc <model_configure_activations+0xd24>)
 8007ffa:	6093      	str	r3, [r2, #8]
    nl_94_output_array.data_start = AI_PTR(g_model_activations_map[0] + 13824);
 8007ffc:	4b7e      	ldr	r3, [pc, #504]	; (80081f8 <model_configure_activations+0xd20>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8008004:	4a7d      	ldr	r2, [pc, #500]	; (80081fc <model_configure_activations+0xd24>)
 8008006:	60d3      	str	r3, [r2, #12]
    
    eltwise_95_output_array.data = AI_PTR(g_model_activations_map[0] + 16896);
 8008008:	4b7b      	ldr	r3, [pc, #492]	; (80081f8 <model_configure_activations+0xd20>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8008010:	4a7b      	ldr	r2, [pc, #492]	; (8008200 <model_configure_activations+0xd28>)
 8008012:	6093      	str	r3, [r2, #8]
    eltwise_95_output_array.data_start = AI_PTR(g_model_activations_map[0] + 16896);
 8008014:	4b78      	ldr	r3, [pc, #480]	; (80081f8 <model_configure_activations+0xd20>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800801c:	4a78      	ldr	r2, [pc, #480]	; (8008200 <model_configure_activations+0xd28>)
 800801e:	60d3      	str	r3, [r2, #12]
    
    eltwise_96_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8008020:	4b75      	ldr	r3, [pc, #468]	; (80081f8 <model_configure_activations+0xd20>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a77      	ldr	r2, [pc, #476]	; (8008204 <model_configure_activations+0xd2c>)
 8008026:	6093      	str	r3, [r2, #8]
    eltwise_96_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8008028:	4b73      	ldr	r3, [pc, #460]	; (80081f8 <model_configure_activations+0xd20>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a75      	ldr	r2, [pc, #468]	; (8008204 <model_configure_activations+0xd2c>)
 800802e:	60d3      	str	r3, [r2, #12]
    
    concat_101_output_array.data = AI_PTR(g_model_activations_map[0] + 10752);
 8008030:	4b71      	ldr	r3, [pc, #452]	; (80081f8 <model_configure_activations+0xd20>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008038:	4a73      	ldr	r2, [pc, #460]	; (8008208 <model_configure_activations+0xd30>)
 800803a:	6093      	str	r3, [r2, #8]
    concat_101_output_array.data_start = AI_PTR(g_model_activations_map[0] + 10752);
 800803c:	4b6e      	ldr	r3, [pc, #440]	; (80081f8 <model_configure_activations+0xd20>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008044:	4a70      	ldr	r2, [pc, #448]	; (8008208 <model_configure_activations+0xd30>)
 8008046:	60d3      	str	r3, [r2, #12]
    
    conv2d_102_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8008048:	4b6b      	ldr	r3, [pc, #428]	; (80081f8 <model_configure_activations+0xd20>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a6f      	ldr	r2, [pc, #444]	; (800820c <model_configure_activations+0xd34>)
 800804e:	6093      	str	r3, [r2, #8]
    conv2d_102_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8008050:	4b69      	ldr	r3, [pc, #420]	; (80081f8 <model_configure_activations+0xd20>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a6d      	ldr	r2, [pc, #436]	; (800820c <model_configure_activations+0xd34>)
 8008056:	60d3      	str	r3, [r2, #12]
    
    nl_103_output_array.data = AI_PTR(g_model_activations_map[0] + 3072);
 8008058:	4b67      	ldr	r3, [pc, #412]	; (80081f8 <model_configure_activations+0xd20>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008060:	4a6b      	ldr	r2, [pc, #428]	; (8008210 <model_configure_activations+0xd38>)
 8008062:	6093      	str	r3, [r2, #8]
    nl_103_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3072);
 8008064:	4b64      	ldr	r3, [pc, #400]	; (80081f8 <model_configure_activations+0xd20>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800806c:	4a68      	ldr	r2, [pc, #416]	; (8008210 <model_configure_activations+0xd38>)
 800806e:	60d3      	str	r3, [r2, #12]
    
    eltwise_104_output_array.data = AI_PTR(g_model_activations_map[0] + 6144);
 8008070:	4b61      	ldr	r3, [pc, #388]	; (80081f8 <model_configure_activations+0xd20>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008078:	4a66      	ldr	r2, [pc, #408]	; (8008214 <model_configure_activations+0xd3c>)
 800807a:	6093      	str	r3, [r2, #8]
    eltwise_104_output_array.data_start = AI_PTR(g_model_activations_map[0] + 6144);
 800807c:	4b5e      	ldr	r3, [pc, #376]	; (80081f8 <model_configure_activations+0xd20>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008084:	4a63      	ldr	r2, [pc, #396]	; (8008214 <model_configure_activations+0xd3c>)
 8008086:	60d3      	str	r3, [r2, #12]
    
    pool_106_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 8008088:	4b5b      	ldr	r3, [pc, #364]	; (80081f8 <model_configure_activations+0xd20>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a62      	ldr	r2, [pc, #392]	; (8008218 <model_configure_activations+0xd40>)
 800808e:	6093      	str	r3, [r2, #8]
    pool_106_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8008090:	4b59      	ldr	r3, [pc, #356]	; (80081f8 <model_configure_activations+0xd20>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a60      	ldr	r2, [pc, #384]	; (8008218 <model_configure_activations+0xd40>)
 8008096:	60d3      	str	r3, [r2, #12]
    
    pool_105_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 8008098:	4b57      	ldr	r3, [pc, #348]	; (80081f8 <model_configure_activations+0xd20>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80080a0:	4a5e      	ldr	r2, [pc, #376]	; (800821c <model_configure_activations+0xd44>)
 80080a2:	6093      	str	r3, [r2, #8]
    pool_105_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 80080a4:	4b54      	ldr	r3, [pc, #336]	; (80081f8 <model_configure_activations+0xd20>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80080ac:	4a5b      	ldr	r2, [pc, #364]	; (800821c <model_configure_activations+0xd44>)
 80080ae:	60d3      	str	r3, [r2, #12]
    
    concat_107_output_array.data = AI_PTR(g_model_activations_map[0] + 512);
 80080b0:	4b51      	ldr	r3, [pc, #324]	; (80081f8 <model_configure_activations+0xd20>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80080b8:	4a59      	ldr	r2, [pc, #356]	; (8008220 <model_configure_activations+0xd48>)
 80080ba:	6093      	str	r3, [r2, #8]
    concat_107_output_array.data_start = AI_PTR(g_model_activations_map[0] + 512);
 80080bc:	4b4e      	ldr	r3, [pc, #312]	; (80081f8 <model_configure_activations+0xd20>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80080c4:	4a56      	ldr	r2, [pc, #344]	; (8008220 <model_configure_activations+0xd48>)
 80080c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_108_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80080c8:	4b4b      	ldr	r3, [pc, #300]	; (80081f8 <model_configure_activations+0xd20>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a55      	ldr	r2, [pc, #340]	; (8008224 <model_configure_activations+0xd4c>)
 80080ce:	6093      	str	r3, [r2, #8]
    conv2d_108_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80080d0:	4b49      	ldr	r3, [pc, #292]	; (80081f8 <model_configure_activations+0xd20>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a53      	ldr	r2, [pc, #332]	; (8008224 <model_configure_activations+0xd4c>)
 80080d6:	60d3      	str	r3, [r2, #12]
    
    nl_109_output_array.data = AI_PTR(g_model_activations_map[0] + 4);
 80080d8:	4b47      	ldr	r3, [pc, #284]	; (80081f8 <model_configure_activations+0xd20>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3304      	adds	r3, #4
 80080de:	4a52      	ldr	r2, [pc, #328]	; (8008228 <model_configure_activations+0xd50>)
 80080e0:	6093      	str	r3, [r2, #8]
    nl_109_output_array.data_start = AI_PTR(g_model_activations_map[0] + 4);
 80080e2:	4b45      	ldr	r3, [pc, #276]	; (80081f8 <model_configure_activations+0xd20>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4a4f      	ldr	r2, [pc, #316]	; (8008228 <model_configure_activations+0xd50>)
 80080ea:	60d3      	str	r3, [r2, #12]
    
    eltwise_110_output_array.data = AI_PTR(g_model_activations_map[0] + 8);
 80080ec:	4b42      	ldr	r3, [pc, #264]	; (80081f8 <model_configure_activations+0xd20>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3308      	adds	r3, #8
 80080f2:	4a4e      	ldr	r2, [pc, #312]	; (800822c <model_configure_activations+0xd54>)
 80080f4:	6093      	str	r3, [r2, #8]
    eltwise_110_output_array.data_start = AI_PTR(g_model_activations_map[0] + 8);
 80080f6:	4b40      	ldr	r3, [pc, #256]	; (80081f8 <model_configure_activations+0xd20>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3308      	adds	r3, #8
 80080fc:	4a4b      	ldr	r2, [pc, #300]	; (800822c <model_configure_activations+0xd54>)
 80080fe:	60d3      	str	r3, [r2, #12]
    
    reduce_112_output_array.data = AI_PTR(g_model_activations_map[0] + 3080);
 8008100:	4b3d      	ldr	r3, [pc, #244]	; (80081f8 <model_configure_activations+0xd20>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8008108:	4a49      	ldr	r2, [pc, #292]	; (8008230 <model_configure_activations+0xd58>)
 800810a:	6093      	str	r3, [r2, #8]
    reduce_112_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3080);
 800810c:	4b3a      	ldr	r3, [pc, #232]	; (80081f8 <model_configure_activations+0xd20>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8008114:	4a46      	ldr	r2, [pc, #280]	; (8008230 <model_configure_activations+0xd58>)
 8008116:	60d3      	str	r3, [r2, #12]
    
    reduce_112_Mul_output_array.data = AI_PTR(g_model_activations_map[0] + 3128);
 8008118:	4b37      	ldr	r3, [pc, #220]	; (80081f8 <model_configure_activations+0xd20>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8008120:	4a44      	ldr	r2, [pc, #272]	; (8008234 <model_configure_activations+0xd5c>)
 8008122:	6093      	str	r3, [r2, #8]
    reduce_112_Mul_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3128);
 8008124:	4b34      	ldr	r3, [pc, #208]	; (80081f8 <model_configure_activations+0xd20>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800812c:	4a41      	ldr	r2, [pc, #260]	; (8008234 <model_configure_activations+0xd5c>)
 800812e:	60d3      	str	r3, [r2, #12]
    
    reduce_111_output_array.data = AI_PTR(g_model_activations_map[0] + 3080);
 8008130:	4b31      	ldr	r3, [pc, #196]	; (80081f8 <model_configure_activations+0xd20>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8008138:	4a3f      	ldr	r2, [pc, #252]	; (8008238 <model_configure_activations+0xd60>)
 800813a:	6093      	str	r3, [r2, #8]
    reduce_111_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3080);
 800813c:	4b2e      	ldr	r3, [pc, #184]	; (80081f8 <model_configure_activations+0xd20>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8008144:	4a3c      	ldr	r2, [pc, #240]	; (8008238 <model_configure_activations+0xd60>)
 8008146:	60d3      	str	r3, [r2, #12]
    
    concat_113_output_array.data = AI_PTR(g_model_activations_map[0] + 3176);
 8008148:	4b2b      	ldr	r3, [pc, #172]	; (80081f8 <model_configure_activations+0xd20>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8008150:	4a3a      	ldr	r2, [pc, #232]	; (800823c <model_configure_activations+0xd64>)
 8008152:	6093      	str	r3, [r2, #8]
    concat_113_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3176);
 8008154:	4b28      	ldr	r3, [pc, #160]	; (80081f8 <model_configure_activations+0xd20>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 800815c:	4a37      	ldr	r2, [pc, #220]	; (800823c <model_configure_activations+0xd64>)
 800815e:	60d3      	str	r3, [r2, #12]
    
    conv2d_114_output_array.data = AI_PTR(g_model_activations_map[0] + 3080);
 8008160:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <model_configure_activations+0xd20>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8008168:	4a35      	ldr	r2, [pc, #212]	; (8008240 <model_configure_activations+0xd68>)
 800816a:	6093      	str	r3, [r2, #8]
    conv2d_114_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3080);
 800816c:	4b22      	ldr	r3, [pc, #136]	; (80081f8 <model_configure_activations+0xd20>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8008174:	4a32      	ldr	r2, [pc, #200]	; (8008240 <model_configure_activations+0xd68>)
 8008176:	60d3      	str	r3, [r2, #12]
    
    nl_115_output_array.data = AI_PTR(g_model_activations_map[0] + 3128);
 8008178:	4b1f      	ldr	r3, [pc, #124]	; (80081f8 <model_configure_activations+0xd20>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8008180:	4a30      	ldr	r2, [pc, #192]	; (8008244 <model_configure_activations+0xd6c>)
 8008182:	6093      	str	r3, [r2, #8]
    nl_115_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3128);
 8008184:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <model_configure_activations+0xd20>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800818c:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <model_configure_activations+0xd6c>)
 800818e:	60d3      	str	r3, [r2, #12]
    
    eltwise_116_output_array.data = AI_PTR(g_model_activations_map[0] + 3176);
 8008190:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <model_configure_activations+0xd20>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8008198:	4a2b      	ldr	r2, [pc, #172]	; (8008248 <model_configure_activations+0xd70>)
 800819a:	6093      	str	r3, [r2, #8]
    eltwise_116_output_array.data_start = AI_PTR(g_model_activations_map[0] + 3176);
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <model_configure_activations+0xd20>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 80081a4:	4a28      	ldr	r2, [pc, #160]	; (8008248 <model_configure_activations+0xd70>)
 80081a6:	60d3      	str	r3, [r2, #12]
    
    pool_117_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80081a8:	4b13      	ldr	r3, [pc, #76]	; (80081f8 <model_configure_activations+0xd20>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a27      	ldr	r2, [pc, #156]	; (800824c <model_configure_activations+0xd74>)
 80081ae:	6093      	str	r3, [r2, #8]
    pool_117_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80081b0:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <model_configure_activations+0xd20>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a25      	ldr	r2, [pc, #148]	; (800824c <model_configure_activations+0xd74>)
 80081b6:	60d3      	str	r3, [r2, #12]
    
    gemm_118_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 80081b8:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <model_configure_activations+0xd20>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081c0:	4a23      	ldr	r2, [pc, #140]	; (8008250 <model_configure_activations+0xd78>)
 80081c2:	6093      	str	r3, [r2, #8]
    gemm_118_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <model_configure_activations+0xd20>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081cc:	4a20      	ldr	r2, [pc, #128]	; (8008250 <model_configure_activations+0xd78>)
 80081ce:	60d3      	str	r3, [r2, #12]
    
    nl_119_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80081d0:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <model_configure_activations+0xd20>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a1f      	ldr	r2, [pc, #124]	; (8008254 <model_configure_activations+0xd7c>)
 80081d6:	6093      	str	r3, [r2, #8]
    nl_119_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80081d8:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <model_configure_activations+0xd20>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <model_configure_activations+0xd7c>)
 80081de:	60d3      	str	r3, [r2, #12]
    
    return true;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e005      	b.n	80081f0 <model_configure_activations+0xd18>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80081e4:	2213      	movs	r2, #19
 80081e6:	2130      	movs	r1, #48	; 0x30
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f98d 	bl	8009508 <ai_platform_network_set_error>
  return false;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200169c4 	.word	0x200169c4
 80081fc:	20000a20 	.word	0x20000a20
 8008200:	20000a30 	.word	0x20000a30
 8008204:	20000a40 	.word	0x20000a40
 8008208:	20000a50 	.word	0x20000a50
 800820c:	20000a60 	.word	0x20000a60
 8008210:	20000a70 	.word	0x20000a70
 8008214:	20000a80 	.word	0x20000a80
 8008218:	20000a90 	.word	0x20000a90
 800821c:	20000aa0 	.word	0x20000aa0
 8008220:	20000ab0 	.word	0x20000ab0
 8008224:	20000ac0 	.word	0x20000ac0
 8008228:	20000ad0 	.word	0x20000ad0
 800822c:	20000ae0 	.word	0x20000ae0
 8008230:	20000af0 	.word	0x20000af0
 8008234:	20000b00 	.word	0x20000b00
 8008238:	20000b10 	.word	0x20000b10
 800823c:	20000b20 	.word	0x20000b20
 8008240:	20000b30 	.word	0x20000b30
 8008244:	20000b40 	.word	0x20000b40
 8008248:	20000b50 	.word	0x20000b50
 800824c:	20000b60 	.word	0x20000b60
 8008250:	20000b70 	.word	0x20000b70
 8008254:	20000b80 	.word	0x20000b80

08008258 <model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_model_weights_map, 1, params)) {
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	2101      	movs	r1, #1
 8008266:	489a      	ldr	r0, [pc, #616]	; (80084d0 <model_configure_weights+0x278>)
 8008268:	f000 ff78 	bl	800915c <ai_platform_get_weights_map>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 85c4 	beq.w	8008dfc <model_configure_weights+0xba4>
    /* Updating weights (byte) offsets */
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8008274:	4b97      	ldr	r3, [pc, #604]	; (80084d4 <model_configure_weights+0x27c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800827c:	4a95      	ldr	r2, [pc, #596]	; (80084d4 <model_configure_weights+0x27c>)
 800827e:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_model_weights_map[0] + 0);
 8008280:	4b93      	ldr	r3, [pc, #588]	; (80084d0 <model_configure_weights+0x278>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a93      	ldr	r2, [pc, #588]	; (80084d4 <model_configure_weights+0x27c>)
 8008286:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 0);
 8008288:	4b91      	ldr	r3, [pc, #580]	; (80084d0 <model_configure_weights+0x278>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a91      	ldr	r2, [pc, #580]	; (80084d4 <model_configure_weights+0x27c>)
 800828e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8008290:	4b91      	ldr	r3, [pc, #580]	; (80084d8 <model_configure_weights+0x280>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008298:	4a8f      	ldr	r2, [pc, #572]	; (80084d8 <model_configure_weights+0x280>)
 800829a:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_model_weights_map[0] + 288);
 800829c:	4b8c      	ldr	r3, [pc, #560]	; (80084d0 <model_configure_weights+0x278>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80082a4:	4a8c      	ldr	r2, [pc, #560]	; (80084d8 <model_configure_weights+0x280>)
 80082a6:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 288);
 80082a8:	4b89      	ldr	r3, [pc, #548]	; (80084d0 <model_configure_weights+0x278>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80082b0:	4a89      	ldr	r2, [pc, #548]	; (80084d8 <model_configure_weights+0x280>)
 80082b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80082b4:	4b89      	ldr	r3, [pc, #548]	; (80084dc <model_configure_weights+0x284>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082bc:	4a87      	ldr	r2, [pc, #540]	; (80084dc <model_configure_weights+0x284>)
 80082be:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_model_weights_map[0] + 320);
 80082c0:	4b83      	ldr	r3, [pc, #524]	; (80084d0 <model_configure_weights+0x278>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80082c8:	4a84      	ldr	r2, [pc, #528]	; (80084dc <model_configure_weights+0x284>)
 80082ca:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 320);
 80082cc:	4b80      	ldr	r3, [pc, #512]	; (80084d0 <model_configure_weights+0x278>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80082d4:	4a81      	ldr	r2, [pc, #516]	; (80084dc <model_configure_weights+0x284>)
 80082d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80082d8:	4b81      	ldr	r3, [pc, #516]	; (80084e0 <model_configure_weights+0x288>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082e0:	4a7f      	ldr	r2, [pc, #508]	; (80084e0 <model_configure_weights+0x288>)
 80082e2:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_model_weights_map[0] + 832);
 80082e4:	4b7a      	ldr	r3, [pc, #488]	; (80084d0 <model_configure_weights+0x278>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80082ec:	4a7c      	ldr	r2, [pc, #496]	; (80084e0 <model_configure_weights+0x288>)
 80082ee:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 832);
 80082f0:	4b77      	ldr	r3, [pc, #476]	; (80084d0 <model_configure_weights+0x278>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80082f8:	4a79      	ldr	r2, [pc, #484]	; (80084e0 <model_configure_weights+0x288>)
 80082fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80082fc:	4b79      	ldr	r3, [pc, #484]	; (80084e4 <model_configure_weights+0x28c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008304:	4a77      	ldr	r2, [pc, #476]	; (80084e4 <model_configure_weights+0x28c>)
 8008306:	6013      	str	r3, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_model_weights_map[0] + 896);
 8008308:	4b71      	ldr	r3, [pc, #452]	; (80084d0 <model_configure_weights+0x278>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8008310:	4a74      	ldr	r2, [pc, #464]	; (80084e4 <model_configure_weights+0x28c>)
 8008312:	6093      	str	r3, [r2, #8]
    conv2d_11_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 896);
 8008314:	4b6e      	ldr	r3, [pc, #440]	; (80084d0 <model_configure_weights+0x278>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800831c:	4a71      	ldr	r2, [pc, #452]	; (80084e4 <model_configure_weights+0x28c>)
 800831e:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8008320:	4b71      	ldr	r3, [pc, #452]	; (80084e8 <model_configure_weights+0x290>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008328:	4a6f      	ldr	r2, [pc, #444]	; (80084e8 <model_configure_weights+0x290>)
 800832a:	6013      	str	r3, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_model_weights_map[0] + 1152);
 800832c:	4b68      	ldr	r3, [pc, #416]	; (80084d0 <model_configure_weights+0x278>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008334:	4a6c      	ldr	r2, [pc, #432]	; (80084e8 <model_configure_weights+0x290>)
 8008336:	6093      	str	r3, [r2, #8]
    conv2d_11_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 1152);
 8008338:	4b65      	ldr	r3, [pc, #404]	; (80084d0 <model_configure_weights+0x278>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008340:	4a69      	ldr	r2, [pc, #420]	; (80084e8 <model_configure_weights+0x290>)
 8008342:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8008344:	4b69      	ldr	r3, [pc, #420]	; (80084ec <model_configure_weights+0x294>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800834c:	4a67      	ldr	r2, [pc, #412]	; (80084ec <model_configure_weights+0x294>)
 800834e:	6013      	str	r3, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_model_weights_map[0] + 1168);
 8008350:	4b5f      	ldr	r3, [pc, #380]	; (80084d0 <model_configure_weights+0x278>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8008358:	4a64      	ldr	r2, [pc, #400]	; (80084ec <model_configure_weights+0x294>)
 800835a:	6093      	str	r3, [r2, #8]
    conv2d_14_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 1168);
 800835c:	4b5c      	ldr	r3, [pc, #368]	; (80084d0 <model_configure_weights+0x278>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8008364:	4a61      	ldr	r2, [pc, #388]	; (80084ec <model_configure_weights+0x294>)
 8008366:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8008368:	4b61      	ldr	r3, [pc, #388]	; (80084f0 <model_configure_weights+0x298>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008370:	4a5f      	ldr	r2, [pc, #380]	; (80084f0 <model_configure_weights+0x298>)
 8008372:	6013      	str	r3, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_model_weights_map[0] + 1744);
 8008374:	4b56      	ldr	r3, [pc, #344]	; (80084d0 <model_configure_weights+0x278>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800837c:	4a5c      	ldr	r2, [pc, #368]	; (80084f0 <model_configure_weights+0x298>)
 800837e:	6093      	str	r3, [r2, #8]
    conv2d_14_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 1744);
 8008380:	4b53      	ldr	r3, [pc, #332]	; (80084d0 <model_configure_weights+0x278>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8008388:	4a59      	ldr	r2, [pc, #356]	; (80084f0 <model_configure_weights+0x298>)
 800838a:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800838c:	4b59      	ldr	r3, [pc, #356]	; (80084f4 <model_configure_weights+0x29c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008394:	4a57      	ldr	r2, [pc, #348]	; (80084f4 <model_configure_weights+0x29c>)
 8008396:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_model_weights_map[0] + 1760);
 8008398:	4b4d      	ldr	r3, [pc, #308]	; (80084d0 <model_configure_weights+0x278>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80083a0:	4a54      	ldr	r2, [pc, #336]	; (80084f4 <model_configure_weights+0x29c>)
 80083a2:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 1760);
 80083a4:	4b4a      	ldr	r3, [pc, #296]	; (80084d0 <model_configure_weights+0x278>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80083ac:	4a51      	ldr	r2, [pc, #324]	; (80084f4 <model_configure_weights+0x29c>)
 80083ae:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80083b0:	4b51      	ldr	r3, [pc, #324]	; (80084f8 <model_configure_weights+0x2a0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083b8:	4a4f      	ldr	r2, [pc, #316]	; (80084f8 <model_configure_weights+0x2a0>)
 80083ba:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_model_weights_map[0] + 2016);
 80083bc:	4b44      	ldr	r3, [pc, #272]	; (80084d0 <model_configure_weights+0x278>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80083c4:	4a4c      	ldr	r2, [pc, #304]	; (80084f8 <model_configure_weights+0x2a0>)
 80083c6:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 2016);
 80083c8:	4b41      	ldr	r3, [pc, #260]	; (80084d0 <model_configure_weights+0x278>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80083d0:	4a49      	ldr	r2, [pc, #292]	; (80084f8 <model_configure_weights+0x2a0>)
 80083d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80083d4:	4b49      	ldr	r3, [pc, #292]	; (80084fc <model_configure_weights+0x2a4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083dc:	4a47      	ldr	r2, [pc, #284]	; (80084fc <model_configure_weights+0x2a4>)
 80083de:	6013      	str	r3, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_model_weights_map[0] + 2080);
 80083e0:	4b3b      	ldr	r3, [pc, #236]	; (80084d0 <model_configure_weights+0x278>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80083e8:	4a44      	ldr	r2, [pc, #272]	; (80084fc <model_configure_weights+0x2a4>)
 80083ea:	6093      	str	r3, [r2, #8]
    conv2d_26_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 2080);
 80083ec:	4b38      	ldr	r3, [pc, #224]	; (80084d0 <model_configure_weights+0x278>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80083f4:	4a41      	ldr	r2, [pc, #260]	; (80084fc <model_configure_weights+0x2a4>)
 80083f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80083f8:	4b41      	ldr	r3, [pc, #260]	; (8008500 <model_configure_weights+0x2a8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008400:	4a3f      	ldr	r2, [pc, #252]	; (8008500 <model_configure_weights+0x2a8>)
 8008402:	6013      	str	r3, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_model_weights_map[0] + 20512);
 8008404:	4b32      	ldr	r3, [pc, #200]	; (80084d0 <model_configure_weights+0x278>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	f245 0320 	movw	r3, #20512	; 0x5020
 800840c:	4413      	add	r3, r2
 800840e:	4a3c      	ldr	r2, [pc, #240]	; (8008500 <model_configure_weights+0x2a8>)
 8008410:	6093      	str	r3, [r2, #8]
    conv2d_26_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 20512);
 8008412:	4b2f      	ldr	r3, [pc, #188]	; (80084d0 <model_configure_weights+0x278>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	f245 0320 	movw	r3, #20512	; 0x5020
 800841a:	4413      	add	r3, r2
 800841c:	4a38      	ldr	r2, [pc, #224]	; (8008500 <model_configure_weights+0x2a8>)
 800841e:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8008420:	4b38      	ldr	r3, [pc, #224]	; (8008504 <model_configure_weights+0x2ac>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008428:	4a36      	ldr	r2, [pc, #216]	; (8008504 <model_configure_weights+0x2ac>)
 800842a:	6013      	str	r3, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_model_weights_map[0] + 20576);
 800842c:	4b28      	ldr	r3, [pc, #160]	; (80084d0 <model_configure_weights+0x278>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	f245 0360 	movw	r3, #20576	; 0x5060
 8008434:	4413      	add	r3, r2
 8008436:	4a33      	ldr	r2, [pc, #204]	; (8008504 <model_configure_weights+0x2ac>)
 8008438:	6093      	str	r3, [r2, #8]
    conv2d_32_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 20576);
 800843a:	4b25      	ldr	r3, [pc, #148]	; (80084d0 <model_configure_weights+0x278>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	f245 0360 	movw	r3, #20576	; 0x5060
 8008442:	4413      	add	r3, r2
 8008444:	4a2f      	ldr	r2, [pc, #188]	; (8008504 <model_configure_weights+0x2ac>)
 8008446:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8008448:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <model_configure_weights+0x2b0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008450:	4a2d      	ldr	r2, [pc, #180]	; (8008508 <model_configure_weights+0x2b0>)
 8008452:	6013      	str	r3, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(g_model_weights_map[0] + 26848);
 8008454:	4b1e      	ldr	r3, [pc, #120]	; (80084d0 <model_configure_weights+0x278>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	f646 03e0 	movw	r3, #26848	; 0x68e0
 800845c:	4413      	add	r3, r2
 800845e:	4a2a      	ldr	r2, [pc, #168]	; (8008508 <model_configure_weights+0x2b0>)
 8008460:	6093      	str	r3, [r2, #8]
    conv2d_32_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 26848);
 8008462:	4b1b      	ldr	r3, [pc, #108]	; (80084d0 <model_configure_weights+0x278>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	f646 03e0 	movw	r3, #26848	; 0x68e0
 800846a:	4413      	add	r3, r2
 800846c:	4a26      	ldr	r2, [pc, #152]	; (8008508 <model_configure_weights+0x2b0>)
 800846e:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8008470:	4b26      	ldr	r3, [pc, #152]	; (800850c <model_configure_weights+0x2b4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008478:	4a24      	ldr	r2, [pc, #144]	; (800850c <model_configure_weights+0x2b4>)
 800847a:	6013      	str	r3, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_model_weights_map[0] + 26852);
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <model_configure_weights+0x278>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	f646 03e4 	movw	r3, #26852	; 0x68e4
 8008484:	4413      	add	r3, r2
 8008486:	4a21      	ldr	r2, [pc, #132]	; (800850c <model_configure_weights+0x2b4>)
 8008488:	6093      	str	r3, [r2, #8]
    conv2d_38_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 26852);
 800848a:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <model_configure_weights+0x278>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	f646 03e4 	movw	r3, #26852	; 0x68e4
 8008492:	4413      	add	r3, r2
 8008494:	4a1d      	ldr	r2, [pc, #116]	; (800850c <model_configure_weights+0x2b4>)
 8008496:	60d3      	str	r3, [r2, #12]
    
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8008498:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <model_configure_weights+0x2b8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084a0:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <model_configure_weights+0x2b8>)
 80084a2:	6013      	str	r3, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(g_model_weights_map[0] + 27244);
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <model_configure_weights+0x278>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	f646 236c 	movw	r3, #27244	; 0x6a6c
 80084ac:	4413      	add	r3, r2
 80084ae:	4a18      	ldr	r2, [pc, #96]	; (8008510 <model_configure_weights+0x2b8>)
 80084b0:	6093      	str	r3, [r2, #8]
    conv2d_41_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 27244);
 80084b2:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <model_configure_weights+0x278>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	f646 236c 	movw	r3, #27244	; 0x6a6c
 80084ba:	4413      	add	r3, r2
 80084bc:	4a14      	ldr	r2, [pc, #80]	; (8008510 <model_configure_weights+0x2b8>)
 80084be:	60d3      	str	r3, [r2, #12]
    
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80084c0:	4b14      	ldr	r3, [pc, #80]	; (8008514 <model_configure_weights+0x2bc>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084c8:	4a12      	ldr	r2, [pc, #72]	; (8008514 <model_configure_weights+0x2bc>)
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e024      	b.n	8008518 <model_configure_weights+0x2c0>
 80084ce:	bf00      	nop
 80084d0:	200169c8 	.word	0x200169c8
 80084d4:	20000010 	.word	0x20000010
 80084d8:	20000020 	.word	0x20000020
 80084dc:	20000030 	.word	0x20000030
 80084e0:	20000040 	.word	0x20000040
 80084e4:	20000050 	.word	0x20000050
 80084e8:	20000060 	.word	0x20000060
 80084ec:	20000070 	.word	0x20000070
 80084f0:	20000080 	.word	0x20000080
 80084f4:	20000090 	.word	0x20000090
 80084f8:	200000a0 	.word	0x200000a0
 80084fc:	200000b0 	.word	0x200000b0
 8008500:	200000c0 	.word	0x200000c0
 8008504:	200000d0 	.word	0x200000d0
 8008508:	200000e0 	.word	0x200000e0
 800850c:	200000f0 	.word	0x200000f0
 8008510:	20000100 	.word	0x20000100
 8008514:	20000110 	.word	0x20000110
    conv2d_41_bias_array.data = AI_PTR(g_model_weights_map[0] + 45676);
 8008518:	4b9f      	ldr	r3, [pc, #636]	; (8008798 <model_configure_weights+0x540>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	f24b 236c 	movw	r3, #45676	; 0xb26c
 8008520:	4413      	add	r3, r2
 8008522:	4a9e      	ldr	r2, [pc, #632]	; (800879c <model_configure_weights+0x544>)
 8008524:	6093      	str	r3, [r2, #8]
    conv2d_41_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 45676);
 8008526:	4b9c      	ldr	r3, [pc, #624]	; (8008798 <model_configure_weights+0x540>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	f24b 236c 	movw	r3, #45676	; 0xb26c
 800852e:	4413      	add	r3, r2
 8008530:	4a9a      	ldr	r2, [pc, #616]	; (800879c <model_configure_weights+0x544>)
 8008532:	60d3      	str	r3, [r2, #12]
    
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8008534:	4b9a      	ldr	r3, [pc, #616]	; (80087a0 <model_configure_weights+0x548>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800853c:	4a98      	ldr	r2, [pc, #608]	; (80087a0 <model_configure_weights+0x548>)
 800853e:	6013      	str	r3, [r2, #0]
    conv2d_59_weights_array.data = AI_PTR(g_model_weights_map[0] + 45804);
 8008540:	4b95      	ldr	r3, [pc, #596]	; (8008798 <model_configure_weights+0x540>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	f24b 23ec 	movw	r3, #45804	; 0xb2ec
 8008548:	4413      	add	r3, r2
 800854a:	4a95      	ldr	r2, [pc, #596]	; (80087a0 <model_configure_weights+0x548>)
 800854c:	6093      	str	r3, [r2, #8]
    conv2d_59_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 45804);
 800854e:	4b92      	ldr	r3, [pc, #584]	; (8008798 <model_configure_weights+0x540>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	f24b 23ec 	movw	r3, #45804	; 0xb2ec
 8008556:	4413      	add	r3, r2
 8008558:	4a91      	ldr	r2, [pc, #580]	; (80087a0 <model_configure_weights+0x548>)
 800855a:	60d3      	str	r3, [r2, #12]
    
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 800855c:	4b91      	ldr	r3, [pc, #580]	; (80087a4 <model_configure_weights+0x54c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008564:	4a8f      	ldr	r2, [pc, #572]	; (80087a4 <model_configure_weights+0x54c>)
 8008566:	6013      	str	r3, [r2, #0]
    conv2d_59_bias_array.data = AI_PTR(g_model_weights_map[0] + 46380);
 8008568:	4b8b      	ldr	r3, [pc, #556]	; (8008798 <model_configure_weights+0x540>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f24b 532c 	movw	r3, #46380	; 0xb52c
 8008570:	4413      	add	r3, r2
 8008572:	4a8c      	ldr	r2, [pc, #560]	; (80087a4 <model_configure_weights+0x54c>)
 8008574:	6093      	str	r3, [r2, #8]
    conv2d_59_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 46380);
 8008576:	4b88      	ldr	r3, [pc, #544]	; (8008798 <model_configure_weights+0x540>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	f24b 532c 	movw	r3, #46380	; 0xb52c
 800857e:	4413      	add	r3, r2
 8008580:	4a88      	ldr	r2, [pc, #544]	; (80087a4 <model_configure_weights+0x54c>)
 8008582:	60d3      	str	r3, [r2, #12]
    
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8008584:	4b88      	ldr	r3, [pc, #544]	; (80087a8 <model_configure_weights+0x550>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800858c:	4a86      	ldr	r2, [pc, #536]	; (80087a8 <model_configure_weights+0x550>)
 800858e:	6013      	str	r3, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(g_model_weights_map[0] + 46444);
 8008590:	4b81      	ldr	r3, [pc, #516]	; (8008798 <model_configure_weights+0x540>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	f24b 536c 	movw	r3, #46444	; 0xb56c
 8008598:	4413      	add	r3, r2
 800859a:	4a83      	ldr	r2, [pc, #524]	; (80087a8 <model_configure_weights+0x550>)
 800859c:	6093      	str	r3, [r2, #8]
    conv2d_60_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 46444);
 800859e:	4b7e      	ldr	r3, [pc, #504]	; (8008798 <model_configure_weights+0x540>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	f24b 536c 	movw	r3, #46444	; 0xb56c
 80085a6:	4413      	add	r3, r2
 80085a8:	4a7f      	ldr	r2, [pc, #508]	; (80087a8 <model_configure_weights+0x550>)
 80085aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 80085ac:	4b7f      	ldr	r3, [pc, #508]	; (80087ac <model_configure_weights+0x554>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085b4:	4a7d      	ldr	r2, [pc, #500]	; (80087ac <model_configure_weights+0x554>)
 80085b6:	6013      	str	r3, [r2, #0]
    conv2d_60_bias_array.data = AI_PTR(g_model_weights_map[0] + 48492);
 80085b8:	4b77      	ldr	r3, [pc, #476]	; (8008798 <model_configure_weights+0x540>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	f64b 536c 	movw	r3, #48492	; 0xbd6c
 80085c0:	4413      	add	r3, r2
 80085c2:	4a7a      	ldr	r2, [pc, #488]	; (80087ac <model_configure_weights+0x554>)
 80085c4:	6093      	str	r3, [r2, #8]
    conv2d_60_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 48492);
 80085c6:	4b74      	ldr	r3, [pc, #464]	; (8008798 <model_configure_weights+0x540>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	f64b 536c 	movw	r3, #48492	; 0xbd6c
 80085ce:	4413      	add	r3, r2
 80085d0:	4a76      	ldr	r2, [pc, #472]	; (80087ac <model_configure_weights+0x554>)
 80085d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 80085d4:	4b76      	ldr	r3, [pc, #472]	; (80087b0 <model_configure_weights+0x558>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085dc:	4a74      	ldr	r2, [pc, #464]	; (80087b0 <model_configure_weights+0x558>)
 80085de:	6013      	str	r3, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(g_model_weights_map[0] + 48620);
 80085e0:	4b6d      	ldr	r3, [pc, #436]	; (8008798 <model_configure_weights+0x540>)
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	f64b 53ec 	movw	r3, #48620	; 0xbdec
 80085e8:	4413      	add	r3, r2
 80085ea:	4a71      	ldr	r2, [pc, #452]	; (80087b0 <model_configure_weights+0x558>)
 80085ec:	6093      	str	r3, [r2, #8]
    conv2d_45_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 48620);
 80085ee:	4b6a      	ldr	r3, [pc, #424]	; (8008798 <model_configure_weights+0x540>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	f64b 53ec 	movw	r3, #48620	; 0xbdec
 80085f6:	4413      	add	r3, r2
 80085f8:	4a6d      	ldr	r2, [pc, #436]	; (80087b0 <model_configure_weights+0x558>)
 80085fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 80085fc:	4b6d      	ldr	r3, [pc, #436]	; (80087b4 <model_configure_weights+0x55c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008604:	4a6b      	ldr	r2, [pc, #428]	; (80087b4 <model_configure_weights+0x55c>)
 8008606:	6013      	str	r3, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(g_model_weights_map[0] + 49196);
 8008608:	4b63      	ldr	r3, [pc, #396]	; (8008798 <model_configure_weights+0x540>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	f24c 032c 	movw	r3, #49196	; 0xc02c
 8008610:	4413      	add	r3, r2
 8008612:	4a68      	ldr	r2, [pc, #416]	; (80087b4 <model_configure_weights+0x55c>)
 8008614:	6093      	str	r3, [r2, #8]
    conv2d_45_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 49196);
 8008616:	4b60      	ldr	r3, [pc, #384]	; (8008798 <model_configure_weights+0x540>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	f24c 032c 	movw	r3, #49196	; 0xc02c
 800861e:	4413      	add	r3, r2
 8008620:	4a64      	ldr	r2, [pc, #400]	; (80087b4 <model_configure_weights+0x55c>)
 8008622:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8008624:	4b64      	ldr	r3, [pc, #400]	; (80087b8 <model_configure_weights+0x560>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800862c:	4a62      	ldr	r2, [pc, #392]	; (80087b8 <model_configure_weights+0x560>)
 800862e:	6013      	str	r3, [r2, #0]
    conv2d_46_weights_array.data = AI_PTR(g_model_weights_map[0] + 49260);
 8008630:	4b59      	ldr	r3, [pc, #356]	; (8008798 <model_configure_weights+0x540>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	f24c 036c 	movw	r3, #49260	; 0xc06c
 8008638:	4413      	add	r3, r2
 800863a:	4a5f      	ldr	r2, [pc, #380]	; (80087b8 <model_configure_weights+0x560>)
 800863c:	6093      	str	r3, [r2, #8]
    conv2d_46_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 49260);
 800863e:	4b56      	ldr	r3, [pc, #344]	; (8008798 <model_configure_weights+0x540>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f24c 036c 	movw	r3, #49260	; 0xc06c
 8008646:	4413      	add	r3, r2
 8008648:	4a5b      	ldr	r2, [pc, #364]	; (80087b8 <model_configure_weights+0x560>)
 800864a:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 800864c:	4b5b      	ldr	r3, [pc, #364]	; (80087bc <model_configure_weights+0x564>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008654:	4a59      	ldr	r2, [pc, #356]	; (80087bc <model_configure_weights+0x564>)
 8008656:	6013      	str	r3, [r2, #0]
    conv2d_46_bias_array.data = AI_PTR(g_model_weights_map[0] + 51308);
 8008658:	4b4f      	ldr	r3, [pc, #316]	; (8008798 <model_configure_weights+0x540>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	f64c 036c 	movw	r3, #51308	; 0xc86c
 8008660:	4413      	add	r3, r2
 8008662:	4a56      	ldr	r2, [pc, #344]	; (80087bc <model_configure_weights+0x564>)
 8008664:	6093      	str	r3, [r2, #8]
    conv2d_46_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 51308);
 8008666:	4b4c      	ldr	r3, [pc, #304]	; (8008798 <model_configure_weights+0x540>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	f64c 036c 	movw	r3, #51308	; 0xc86c
 800866e:	4413      	add	r3, r2
 8008670:	4a52      	ldr	r2, [pc, #328]	; (80087bc <model_configure_weights+0x564>)
 8008672:	60d3      	str	r3, [r2, #12]
    
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8008674:	4b52      	ldr	r3, [pc, #328]	; (80087c0 <model_configure_weights+0x568>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800867c:	4a50      	ldr	r2, [pc, #320]	; (80087c0 <model_configure_weights+0x568>)
 800867e:	6013      	str	r3, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(g_model_weights_map[0] + 51436);
 8008680:	4b45      	ldr	r3, [pc, #276]	; (8008798 <model_configure_weights+0x540>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
 8008688:	4413      	add	r3, r2
 800868a:	4a4d      	ldr	r2, [pc, #308]	; (80087c0 <model_configure_weights+0x568>)
 800868c:	6093      	str	r3, [r2, #8]
    conv2d_49_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 51436);
 800868e:	4b42      	ldr	r3, [pc, #264]	; (8008798 <model_configure_weights+0x540>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
 8008696:	4413      	add	r3, r2
 8008698:	4a49      	ldr	r2, [pc, #292]	; (80087c0 <model_configure_weights+0x568>)
 800869a:	60d3      	str	r3, [r2, #12]
    
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 800869c:	4b49      	ldr	r3, [pc, #292]	; (80087c4 <model_configure_weights+0x56c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086a4:	4a47      	ldr	r2, [pc, #284]	; (80087c4 <model_configure_weights+0x56c>)
 80086a6:	6013      	str	r3, [r2, #0]
    conv2d_49_bias_array.data = AI_PTR(g_model_weights_map[0] + 52460);
 80086a8:	4b3b      	ldr	r3, [pc, #236]	; (8008798 <model_configure_weights+0x540>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	f64c 43ec 	movw	r3, #52460	; 0xccec
 80086b0:	4413      	add	r3, r2
 80086b2:	4a44      	ldr	r2, [pc, #272]	; (80087c4 <model_configure_weights+0x56c>)
 80086b4:	6093      	str	r3, [r2, #8]
    conv2d_49_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 52460);
 80086b6:	4b38      	ldr	r3, [pc, #224]	; (8008798 <model_configure_weights+0x540>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	f64c 43ec 	movw	r3, #52460	; 0xccec
 80086be:	4413      	add	r3, r2
 80086c0:	4a40      	ldr	r2, [pc, #256]	; (80087c4 <model_configure_weights+0x56c>)
 80086c2:	60d3      	str	r3, [r2, #12]
    
    conv2d_52_weights_array.format |= AI_FMT_FLAG_CONST;
 80086c4:	4b40      	ldr	r3, [pc, #256]	; (80087c8 <model_configure_weights+0x570>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086cc:	4a3e      	ldr	r2, [pc, #248]	; (80087c8 <model_configure_weights+0x570>)
 80086ce:	6013      	str	r3, [r2, #0]
    conv2d_52_weights_array.data = AI_PTR(g_model_weights_map[0] + 52492);
 80086d0:	4b31      	ldr	r3, [pc, #196]	; (8008798 <model_configure_weights+0x540>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	f64c 530c 	movw	r3, #52492	; 0xcd0c
 80086d8:	4413      	add	r3, r2
 80086da:	4a3b      	ldr	r2, [pc, #236]	; (80087c8 <model_configure_weights+0x570>)
 80086dc:	6093      	str	r3, [r2, #8]
    conv2d_52_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 52492);
 80086de:	4b2e      	ldr	r3, [pc, #184]	; (8008798 <model_configure_weights+0x540>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	f64c 530c 	movw	r3, #52492	; 0xcd0c
 80086e6:	4413      	add	r3, r2
 80086e8:	4a37      	ldr	r2, [pc, #220]	; (80087c8 <model_configure_weights+0x570>)
 80086ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_52_bias_array.format |= AI_FMT_FLAG_CONST;
 80086ec:	4b37      	ldr	r3, [pc, #220]	; (80087cc <model_configure_weights+0x574>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f4:	4a35      	ldr	r2, [pc, #212]	; (80087cc <model_configure_weights+0x574>)
 80086f6:	6013      	str	r3, [r2, #0]
    conv2d_52_bias_array.data = AI_PTR(g_model_weights_map[0] + 54796);
 80086f8:	4b27      	ldr	r3, [pc, #156]	; (8008798 <model_configure_weights+0x540>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	f24d 630c 	movw	r3, #54796	; 0xd60c
 8008700:	4413      	add	r3, r2
 8008702:	4a32      	ldr	r2, [pc, #200]	; (80087cc <model_configure_weights+0x574>)
 8008704:	6093      	str	r3, [r2, #8]
    conv2d_52_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 54796);
 8008706:	4b24      	ldr	r3, [pc, #144]	; (8008798 <model_configure_weights+0x540>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	f24d 630c 	movw	r3, #54796	; 0xd60c
 800870e:	4413      	add	r3, r2
 8008710:	4a2e      	ldr	r2, [pc, #184]	; (80087cc <model_configure_weights+0x574>)
 8008712:	60d3      	str	r3, [r2, #12]
    
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8008714:	4b2e      	ldr	r3, [pc, #184]	; (80087d0 <model_configure_weights+0x578>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800871c:	4a2c      	ldr	r2, [pc, #176]	; (80087d0 <model_configure_weights+0x578>)
 800871e:	6013      	str	r3, [r2, #0]
    conv2d_55_weights_array.data = AI_PTR(g_model_weights_map[0] + 54828);
 8008720:	4b1d      	ldr	r3, [pc, #116]	; (8008798 <model_configure_weights+0x540>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	f24d 632c 	movw	r3, #54828	; 0xd62c
 8008728:	4413      	add	r3, r2
 800872a:	4a29      	ldr	r2, [pc, #164]	; (80087d0 <model_configure_weights+0x578>)
 800872c:	6093      	str	r3, [r2, #8]
    conv2d_55_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 54828);
 800872e:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <model_configure_weights+0x540>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	f24d 632c 	movw	r3, #54828	; 0xd62c
 8008736:	4413      	add	r3, r2
 8008738:	4a25      	ldr	r2, [pc, #148]	; (80087d0 <model_configure_weights+0x578>)
 800873a:	60d3      	str	r3, [r2, #12]
    
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 800873c:	4b25      	ldr	r3, [pc, #148]	; (80087d4 <model_configure_weights+0x57c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008744:	4a23      	ldr	r2, [pc, #140]	; (80087d4 <model_configure_weights+0x57c>)
 8008746:	6013      	str	r3, [r2, #0]
    conv2d_55_bias_array.data = AI_PTR(g_model_weights_map[0] + 55852);
 8008748:	4b13      	ldr	r3, [pc, #76]	; (8008798 <model_configure_weights+0x540>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f64d 232c 	movw	r3, #55852	; 0xda2c
 8008750:	4413      	add	r3, r2
 8008752:	4a20      	ldr	r2, [pc, #128]	; (80087d4 <model_configure_weights+0x57c>)
 8008754:	6093      	str	r3, [r2, #8]
    conv2d_55_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 55852);
 8008756:	4b10      	ldr	r3, [pc, #64]	; (8008798 <model_configure_weights+0x540>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	f64d 232c 	movw	r3, #55852	; 0xda2c
 800875e:	4413      	add	r3, r2
 8008760:	4a1c      	ldr	r2, [pc, #112]	; (80087d4 <model_configure_weights+0x57c>)
 8008762:	60d3      	str	r3, [r2, #12]
    
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8008764:	4b1c      	ldr	r3, [pc, #112]	; (80087d8 <model_configure_weights+0x580>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800876c:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <model_configure_weights+0x580>)
 800876e:	6013      	str	r3, [r2, #0]
    conv2d_64_weights_array.data = AI_PTR(g_model_weights_map[0] + 55980);
 8008770:	4b09      	ldr	r3, [pc, #36]	; (8008798 <model_configure_weights+0x540>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	f64d 23ac 	movw	r3, #55980	; 0xdaac
 8008778:	4413      	add	r3, r2
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <model_configure_weights+0x580>)
 800877c:	6093      	str	r3, [r2, #8]
    conv2d_64_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 55980);
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <model_configure_weights+0x540>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	f64d 23ac 	movw	r3, #55980	; 0xdaac
 8008786:	4413      	add	r3, r2
 8008788:	4a13      	ldr	r2, [pc, #76]	; (80087d8 <model_configure_weights+0x580>)
 800878a:	60d3      	str	r3, [r2, #12]
    
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 800878c:	4b13      	ldr	r3, [pc, #76]	; (80087dc <model_configure_weights+0x584>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008794:	e024      	b.n	80087e0 <model_configure_weights+0x588>
 8008796:	bf00      	nop
 8008798:	200169c8 	.word	0x200169c8
 800879c:	20000110 	.word	0x20000110
 80087a0:	20000120 	.word	0x20000120
 80087a4:	20000130 	.word	0x20000130
 80087a8:	20000140 	.word	0x20000140
 80087ac:	20000150 	.word	0x20000150
 80087b0:	20000160 	.word	0x20000160
 80087b4:	20000170 	.word	0x20000170
 80087b8:	20000180 	.word	0x20000180
 80087bc:	20000190 	.word	0x20000190
 80087c0:	200001a0 	.word	0x200001a0
 80087c4:	200001b0 	.word	0x200001b0
 80087c8:	200001c0 	.word	0x200001c0
 80087cc:	200001d0 	.word	0x200001d0
 80087d0:	200001e0 	.word	0x200001e0
 80087d4:	200001f0 	.word	0x200001f0
 80087d8:	20000200 	.word	0x20000200
 80087dc:	20000210 	.word	0x20000210
 80087e0:	4a8e      	ldr	r2, [pc, #568]	; (8008a1c <model_configure_weights+0x7c4>)
 80087e2:	6013      	str	r3, [r2, #0]
    conv2d_64_bias_array.data = AI_PTR(g_model_weights_map[0] + 129708);
 80087e4:	4b8e      	ldr	r3, [pc, #568]	; (8008a20 <model_configure_weights+0x7c8>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4b8e      	ldr	r3, [pc, #568]	; (8008a24 <model_configure_weights+0x7cc>)
 80087ea:	4413      	add	r3, r2
 80087ec:	4a8b      	ldr	r2, [pc, #556]	; (8008a1c <model_configure_weights+0x7c4>)
 80087ee:	6093      	str	r3, [r2, #8]
    conv2d_64_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 129708);
 80087f0:	4b8b      	ldr	r3, [pc, #556]	; (8008a20 <model_configure_weights+0x7c8>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	4b8b      	ldr	r3, [pc, #556]	; (8008a24 <model_configure_weights+0x7cc>)
 80087f6:	4413      	add	r3, r2
 80087f8:	4a88      	ldr	r2, [pc, #544]	; (8008a1c <model_configure_weights+0x7c4>)
 80087fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_70_weights_array.format |= AI_FMT_FLAG_CONST;
 80087fc:	4b8a      	ldr	r3, [pc, #552]	; (8008a28 <model_configure_weights+0x7d0>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008804:	4a88      	ldr	r2, [pc, #544]	; (8008a28 <model_configure_weights+0x7d0>)
 8008806:	6013      	str	r3, [r2, #0]
    conv2d_70_weights_array.data = AI_PTR(g_model_weights_map[0] + 129836);
 8008808:	4b85      	ldr	r3, [pc, #532]	; (8008a20 <model_configure_weights+0x7c8>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	4b87      	ldr	r3, [pc, #540]	; (8008a2c <model_configure_weights+0x7d4>)
 800880e:	4413      	add	r3, r2
 8008810:	4a85      	ldr	r2, [pc, #532]	; (8008a28 <model_configure_weights+0x7d0>)
 8008812:	6093      	str	r3, [r2, #8]
    conv2d_70_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 129836);
 8008814:	4b82      	ldr	r3, [pc, #520]	; (8008a20 <model_configure_weights+0x7c8>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4b84      	ldr	r3, [pc, #528]	; (8008a2c <model_configure_weights+0x7d4>)
 800881a:	4413      	add	r3, r2
 800881c:	4a82      	ldr	r2, [pc, #520]	; (8008a28 <model_configure_weights+0x7d0>)
 800881e:	60d3      	str	r3, [r2, #12]
    
    conv2d_76_weights_array.format |= AI_FMT_FLAG_CONST;
 8008820:	4b83      	ldr	r3, [pc, #524]	; (8008a30 <model_configure_weights+0x7d8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008828:	4a81      	ldr	r2, [pc, #516]	; (8008a30 <model_configure_weights+0x7d8>)
 800882a:	6013      	str	r3, [r2, #0]
    conv2d_76_weights_array.data = AI_PTR(g_model_weights_map[0] + 142380);
 800882c:	4b7c      	ldr	r3, [pc, #496]	; (8008a20 <model_configure_weights+0x7c8>)
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	4b80      	ldr	r3, [pc, #512]	; (8008a34 <model_configure_weights+0x7dc>)
 8008832:	4413      	add	r3, r2
 8008834:	4a7e      	ldr	r2, [pc, #504]	; (8008a30 <model_configure_weights+0x7d8>)
 8008836:	6093      	str	r3, [r2, #8]
    conv2d_76_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 142380);
 8008838:	4b79      	ldr	r3, [pc, #484]	; (8008a20 <model_configure_weights+0x7c8>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4b7d      	ldr	r3, [pc, #500]	; (8008a34 <model_configure_weights+0x7dc>)
 800883e:	4413      	add	r3, r2
 8008840:	4a7b      	ldr	r2, [pc, #492]	; (8008a30 <model_configure_weights+0x7d8>)
 8008842:	60d3      	str	r3, [r2, #12]
    
    conv2d_79_weights_array.format |= AI_FMT_FLAG_CONST;
 8008844:	4b7c      	ldr	r3, [pc, #496]	; (8008a38 <model_configure_weights+0x7e0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800884c:	4a7a      	ldr	r2, [pc, #488]	; (8008a38 <model_configure_weights+0x7e0>)
 800884e:	6013      	str	r3, [r2, #0]
    conv2d_79_weights_array.data = AI_PTR(g_model_weights_map[0] + 142772);
 8008850:	4b73      	ldr	r3, [pc, #460]	; (8008a20 <model_configure_weights+0x7c8>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	4b79      	ldr	r3, [pc, #484]	; (8008a3c <model_configure_weights+0x7e4>)
 8008856:	4413      	add	r3, r2
 8008858:	4a77      	ldr	r2, [pc, #476]	; (8008a38 <model_configure_weights+0x7e0>)
 800885a:	6093      	str	r3, [r2, #8]
    conv2d_79_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 142772);
 800885c:	4b70      	ldr	r3, [pc, #448]	; (8008a20 <model_configure_weights+0x7c8>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <model_configure_weights+0x7e4>)
 8008862:	4413      	add	r3, r2
 8008864:	4a74      	ldr	r2, [pc, #464]	; (8008a38 <model_configure_weights+0x7e0>)
 8008866:	60d3      	str	r3, [r2, #12]
    
    conv2d_79_bias_array.format |= AI_FMT_FLAG_CONST;
 8008868:	4b75      	ldr	r3, [pc, #468]	; (8008a40 <model_configure_weights+0x7e8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008870:	4a73      	ldr	r2, [pc, #460]	; (8008a40 <model_configure_weights+0x7e8>)
 8008872:	6013      	str	r3, [r2, #0]
    conv2d_79_bias_array.data = AI_PTR(g_model_weights_map[0] + 216500);
 8008874:	4b6a      	ldr	r3, [pc, #424]	; (8008a20 <model_configure_weights+0x7c8>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	4b72      	ldr	r3, [pc, #456]	; (8008a44 <model_configure_weights+0x7ec>)
 800887a:	4413      	add	r3, r2
 800887c:	4a70      	ldr	r2, [pc, #448]	; (8008a40 <model_configure_weights+0x7e8>)
 800887e:	6093      	str	r3, [r2, #8]
    conv2d_79_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 216500);
 8008880:	4b67      	ldr	r3, [pc, #412]	; (8008a20 <model_configure_weights+0x7c8>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	4b6f      	ldr	r3, [pc, #444]	; (8008a44 <model_configure_weights+0x7ec>)
 8008886:	4413      	add	r3, r2
 8008888:	4a6d      	ldr	r2, [pc, #436]	; (8008a40 <model_configure_weights+0x7e8>)
 800888a:	60d3      	str	r3, [r2, #12]
    
    conv2d_97_weights_array.format |= AI_FMT_FLAG_CONST;
 800888c:	4b6e      	ldr	r3, [pc, #440]	; (8008a48 <model_configure_weights+0x7f0>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008894:	4a6c      	ldr	r2, [pc, #432]	; (8008a48 <model_configure_weights+0x7f0>)
 8008896:	6013      	str	r3, [r2, #0]
    conv2d_97_weights_array.data = AI_PTR(g_model_weights_map[0] + 216756);
 8008898:	4b61      	ldr	r3, [pc, #388]	; (8008a20 <model_configure_weights+0x7c8>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	4b6b      	ldr	r3, [pc, #428]	; (8008a4c <model_configure_weights+0x7f4>)
 800889e:	4413      	add	r3, r2
 80088a0:	4a69      	ldr	r2, [pc, #420]	; (8008a48 <model_configure_weights+0x7f0>)
 80088a2:	6093      	str	r3, [r2, #8]
    conv2d_97_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 216756);
 80088a4:	4b5e      	ldr	r3, [pc, #376]	; (8008a20 <model_configure_weights+0x7c8>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	4b68      	ldr	r3, [pc, #416]	; (8008a4c <model_configure_weights+0x7f4>)
 80088aa:	4413      	add	r3, r2
 80088ac:	4a66      	ldr	r2, [pc, #408]	; (8008a48 <model_configure_weights+0x7f0>)
 80088ae:	60d3      	str	r3, [r2, #12]
    
    conv2d_97_bias_array.format |= AI_FMT_FLAG_CONST;
 80088b0:	4b67      	ldr	r3, [pc, #412]	; (8008a50 <model_configure_weights+0x7f8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088b8:	4a65      	ldr	r2, [pc, #404]	; (8008a50 <model_configure_weights+0x7f8>)
 80088ba:	6013      	str	r3, [r2, #0]
    conv2d_97_bias_array.data = AI_PTR(g_model_weights_map[0] + 217908);
 80088bc:	4b58      	ldr	r3, [pc, #352]	; (8008a20 <model_configure_weights+0x7c8>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	4b64      	ldr	r3, [pc, #400]	; (8008a54 <model_configure_weights+0x7fc>)
 80088c2:	4413      	add	r3, r2
 80088c4:	4a62      	ldr	r2, [pc, #392]	; (8008a50 <model_configure_weights+0x7f8>)
 80088c6:	6093      	str	r3, [r2, #8]
    conv2d_97_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 217908);
 80088c8:	4b55      	ldr	r3, [pc, #340]	; (8008a20 <model_configure_weights+0x7c8>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4b61      	ldr	r3, [pc, #388]	; (8008a54 <model_configure_weights+0x7fc>)
 80088ce:	4413      	add	r3, r2
 80088d0:	4a5f      	ldr	r2, [pc, #380]	; (8008a50 <model_configure_weights+0x7f8>)
 80088d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_98_weights_array.format |= AI_FMT_FLAG_CONST;
 80088d4:	4b60      	ldr	r3, [pc, #384]	; (8008a58 <model_configure_weights+0x800>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088dc:	4a5e      	ldr	r2, [pc, #376]	; (8008a58 <model_configure_weights+0x800>)
 80088de:	6013      	str	r3, [r2, #0]
    conv2d_98_weights_array.data = AI_PTR(g_model_weights_map[0] + 218036);
 80088e0:	4b4f      	ldr	r3, [pc, #316]	; (8008a20 <model_configure_weights+0x7c8>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	4b5d      	ldr	r3, [pc, #372]	; (8008a5c <model_configure_weights+0x804>)
 80088e6:	4413      	add	r3, r2
 80088e8:	4a5b      	ldr	r2, [pc, #364]	; (8008a58 <model_configure_weights+0x800>)
 80088ea:	6093      	str	r3, [r2, #8]
    conv2d_98_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 218036);
 80088ec:	4b4c      	ldr	r3, [pc, #304]	; (8008a20 <model_configure_weights+0x7c8>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	4b5a      	ldr	r3, [pc, #360]	; (8008a5c <model_configure_weights+0x804>)
 80088f2:	4413      	add	r3, r2
 80088f4:	4a58      	ldr	r2, [pc, #352]	; (8008a58 <model_configure_weights+0x800>)
 80088f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_98_bias_array.format |= AI_FMT_FLAG_CONST;
 80088f8:	4b59      	ldr	r3, [pc, #356]	; (8008a60 <model_configure_weights+0x808>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008900:	4a57      	ldr	r2, [pc, #348]	; (8008a60 <model_configure_weights+0x808>)
 8008902:	6013      	str	r3, [r2, #0]
    conv2d_98_bias_array.data = AI_PTR(g_model_weights_map[0] + 226228);
 8008904:	4b46      	ldr	r3, [pc, #280]	; (8008a20 <model_configure_weights+0x7c8>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4b56      	ldr	r3, [pc, #344]	; (8008a64 <model_configure_weights+0x80c>)
 800890a:	4413      	add	r3, r2
 800890c:	4a54      	ldr	r2, [pc, #336]	; (8008a60 <model_configure_weights+0x808>)
 800890e:	6093      	str	r3, [r2, #8]
    conv2d_98_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 226228);
 8008910:	4b43      	ldr	r3, [pc, #268]	; (8008a20 <model_configure_weights+0x7c8>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	4b53      	ldr	r3, [pc, #332]	; (8008a64 <model_configure_weights+0x80c>)
 8008916:	4413      	add	r3, r2
 8008918:	4a51      	ldr	r2, [pc, #324]	; (8008a60 <model_configure_weights+0x808>)
 800891a:	60d3      	str	r3, [r2, #12]
    
    conv2d_83_weights_array.format |= AI_FMT_FLAG_CONST;
 800891c:	4b52      	ldr	r3, [pc, #328]	; (8008a68 <model_configure_weights+0x810>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008924:	4a50      	ldr	r2, [pc, #320]	; (8008a68 <model_configure_weights+0x810>)
 8008926:	6013      	str	r3, [r2, #0]
    conv2d_83_weights_array.data = AI_PTR(g_model_weights_map[0] + 226484);
 8008928:	4b3d      	ldr	r3, [pc, #244]	; (8008a20 <model_configure_weights+0x7c8>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4b4f      	ldr	r3, [pc, #316]	; (8008a6c <model_configure_weights+0x814>)
 800892e:	4413      	add	r3, r2
 8008930:	4a4d      	ldr	r2, [pc, #308]	; (8008a68 <model_configure_weights+0x810>)
 8008932:	6093      	str	r3, [r2, #8]
    conv2d_83_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 226484);
 8008934:	4b3a      	ldr	r3, [pc, #232]	; (8008a20 <model_configure_weights+0x7c8>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	4b4c      	ldr	r3, [pc, #304]	; (8008a6c <model_configure_weights+0x814>)
 800893a:	4413      	add	r3, r2
 800893c:	4a4a      	ldr	r2, [pc, #296]	; (8008a68 <model_configure_weights+0x810>)
 800893e:	60d3      	str	r3, [r2, #12]
    
    conv2d_83_bias_array.format |= AI_FMT_FLAG_CONST;
 8008940:	4b4b      	ldr	r3, [pc, #300]	; (8008a70 <model_configure_weights+0x818>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008948:	4a49      	ldr	r2, [pc, #292]	; (8008a70 <model_configure_weights+0x818>)
 800894a:	6013      	str	r3, [r2, #0]
    conv2d_83_bias_array.data = AI_PTR(g_model_weights_map[0] + 227636);
 800894c:	4b34      	ldr	r3, [pc, #208]	; (8008a20 <model_configure_weights+0x7c8>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	4b48      	ldr	r3, [pc, #288]	; (8008a74 <model_configure_weights+0x81c>)
 8008952:	4413      	add	r3, r2
 8008954:	4a46      	ldr	r2, [pc, #280]	; (8008a70 <model_configure_weights+0x818>)
 8008956:	6093      	str	r3, [r2, #8]
    conv2d_83_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 227636);
 8008958:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <model_configure_weights+0x7c8>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	4b45      	ldr	r3, [pc, #276]	; (8008a74 <model_configure_weights+0x81c>)
 800895e:	4413      	add	r3, r2
 8008960:	4a43      	ldr	r2, [pc, #268]	; (8008a70 <model_configure_weights+0x818>)
 8008962:	60d3      	str	r3, [r2, #12]
    
    conv2d_84_weights_array.format |= AI_FMT_FLAG_CONST;
 8008964:	4b44      	ldr	r3, [pc, #272]	; (8008a78 <model_configure_weights+0x820>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800896c:	4a42      	ldr	r2, [pc, #264]	; (8008a78 <model_configure_weights+0x820>)
 800896e:	6013      	str	r3, [r2, #0]
    conv2d_84_weights_array.data = AI_PTR(g_model_weights_map[0] + 227764);
 8008970:	4b2b      	ldr	r3, [pc, #172]	; (8008a20 <model_configure_weights+0x7c8>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	4b41      	ldr	r3, [pc, #260]	; (8008a7c <model_configure_weights+0x824>)
 8008976:	4413      	add	r3, r2
 8008978:	4a3f      	ldr	r2, [pc, #252]	; (8008a78 <model_configure_weights+0x820>)
 800897a:	6093      	str	r3, [r2, #8]
    conv2d_84_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 227764);
 800897c:	4b28      	ldr	r3, [pc, #160]	; (8008a20 <model_configure_weights+0x7c8>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	4b3e      	ldr	r3, [pc, #248]	; (8008a7c <model_configure_weights+0x824>)
 8008982:	4413      	add	r3, r2
 8008984:	4a3c      	ldr	r2, [pc, #240]	; (8008a78 <model_configure_weights+0x820>)
 8008986:	60d3      	str	r3, [r2, #12]
    
    conv2d_84_bias_array.format |= AI_FMT_FLAG_CONST;
 8008988:	4b3d      	ldr	r3, [pc, #244]	; (8008a80 <model_configure_weights+0x828>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008990:	4a3b      	ldr	r2, [pc, #236]	; (8008a80 <model_configure_weights+0x828>)
 8008992:	6013      	str	r3, [r2, #0]
    conv2d_84_bias_array.data = AI_PTR(g_model_weights_map[0] + 235956);
 8008994:	4b22      	ldr	r3, [pc, #136]	; (8008a20 <model_configure_weights+0x7c8>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	4b3a      	ldr	r3, [pc, #232]	; (8008a84 <model_configure_weights+0x82c>)
 800899a:	4413      	add	r3, r2
 800899c:	4a38      	ldr	r2, [pc, #224]	; (8008a80 <model_configure_weights+0x828>)
 800899e:	6093      	str	r3, [r2, #8]
    conv2d_84_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 235956);
 80089a0:	4b1f      	ldr	r3, [pc, #124]	; (8008a20 <model_configure_weights+0x7c8>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	4b37      	ldr	r3, [pc, #220]	; (8008a84 <model_configure_weights+0x82c>)
 80089a6:	4413      	add	r3, r2
 80089a8:	4a35      	ldr	r2, [pc, #212]	; (8008a80 <model_configure_weights+0x828>)
 80089aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 80089ac:	4b36      	ldr	r3, [pc, #216]	; (8008a88 <model_configure_weights+0x830>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089b4:	4a34      	ldr	r2, [pc, #208]	; (8008a88 <model_configure_weights+0x830>)
 80089b6:	6013      	str	r3, [r2, #0]
    conv2d_87_weights_array.data = AI_PTR(g_model_weights_map[0] + 236212);
 80089b8:	4b19      	ldr	r3, [pc, #100]	; (8008a20 <model_configure_weights+0x7c8>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <model_configure_weights+0x834>)
 80089be:	4413      	add	r3, r2
 80089c0:	4a31      	ldr	r2, [pc, #196]	; (8008a88 <model_configure_weights+0x830>)
 80089c2:	6093      	str	r3, [r2, #8]
    conv2d_87_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 236212);
 80089c4:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <model_configure_weights+0x7c8>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	4b30      	ldr	r3, [pc, #192]	; (8008a8c <model_configure_weights+0x834>)
 80089ca:	4413      	add	r3, r2
 80089cc:	4a2e      	ldr	r2, [pc, #184]	; (8008a88 <model_configure_weights+0x830>)
 80089ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_bias_array.format |= AI_FMT_FLAG_CONST;
 80089d0:	4b2f      	ldr	r3, [pc, #188]	; (8008a90 <model_configure_weights+0x838>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d8:	4a2d      	ldr	r2, [pc, #180]	; (8008a90 <model_configure_weights+0x838>)
 80089da:	6013      	str	r3, [r2, #0]
    conv2d_87_bias_array.data = AI_PTR(g_model_weights_map[0] + 240308);
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <model_configure_weights+0x7c8>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b2c      	ldr	r3, [pc, #176]	; (8008a94 <model_configure_weights+0x83c>)
 80089e2:	4413      	add	r3, r2
 80089e4:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <model_configure_weights+0x838>)
 80089e6:	6093      	str	r3, [r2, #8]
    conv2d_87_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 240308);
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <model_configure_weights+0x7c8>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	4b29      	ldr	r3, [pc, #164]	; (8008a94 <model_configure_weights+0x83c>)
 80089ee:	4413      	add	r3, r2
 80089f0:	4a27      	ldr	r2, [pc, #156]	; (8008a90 <model_configure_weights+0x838>)
 80089f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_90_weights_array.format |= AI_FMT_FLAG_CONST;
 80089f4:	4b28      	ldr	r3, [pc, #160]	; (8008a98 <model_configure_weights+0x840>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089fc:	4a26      	ldr	r2, [pc, #152]	; (8008a98 <model_configure_weights+0x840>)
 80089fe:	6013      	str	r3, [r2, #0]
    conv2d_90_weights_array.data = AI_PTR(g_model_weights_map[0] + 240372);
 8008a00:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <model_configure_weights+0x7c8>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	4b25      	ldr	r3, [pc, #148]	; (8008a9c <model_configure_weights+0x844>)
 8008a06:	4413      	add	r3, r2
 8008a08:	4a23      	ldr	r2, [pc, #140]	; (8008a98 <model_configure_weights+0x840>)
 8008a0a:	6093      	str	r3, [r2, #8]
    conv2d_90_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 240372);
 8008a0c:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <model_configure_weights+0x7c8>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <model_configure_weights+0x844>)
 8008a12:	4413      	add	r3, r2
 8008a14:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <model_configure_weights+0x840>)
 8008a16:	60d3      	str	r3, [r2, #12]
 8008a18:	e042      	b.n	8008aa0 <model_configure_weights+0x848>
 8008a1a:	bf00      	nop
 8008a1c:	20000210 	.word	0x20000210
 8008a20:	200169c8 	.word	0x200169c8
 8008a24:	0001faac 	.word	0x0001faac
 8008a28:	20000220 	.word	0x20000220
 8008a2c:	0001fb2c 	.word	0x0001fb2c
 8008a30:	20000230 	.word	0x20000230
 8008a34:	00022c2c 	.word	0x00022c2c
 8008a38:	20000240 	.word	0x20000240
 8008a3c:	00022db4 	.word	0x00022db4
 8008a40:	20000250 	.word	0x20000250
 8008a44:	00034db4 	.word	0x00034db4
 8008a48:	20000260 	.word	0x20000260
 8008a4c:	00034eb4 	.word	0x00034eb4
 8008a50:	20000270 	.word	0x20000270
 8008a54:	00035334 	.word	0x00035334
 8008a58:	20000280 	.word	0x20000280
 8008a5c:	000353b4 	.word	0x000353b4
 8008a60:	20000290 	.word	0x20000290
 8008a64:	000373b4 	.word	0x000373b4
 8008a68:	200002a0 	.word	0x200002a0
 8008a6c:	000374b4 	.word	0x000374b4
 8008a70:	200002b0 	.word	0x200002b0
 8008a74:	00037934 	.word	0x00037934
 8008a78:	200002c0 	.word	0x200002c0
 8008a7c:	000379b4 	.word	0x000379b4
 8008a80:	200002d0 	.word	0x200002d0
 8008a84:	000399b4 	.word	0x000399b4
 8008a88:	200002e0 	.word	0x200002e0
 8008a8c:	00039ab4 	.word	0x00039ab4
 8008a90:	200002f0 	.word	0x200002f0
 8008a94:	0003aab4 	.word	0x0003aab4
 8008a98:	20000300 	.word	0x20000300
 8008a9c:	0003aaf4 	.word	0x0003aaf4
    
    conv2d_90_bias_array.format |= AI_FMT_FLAG_CONST;
 8008aa0:	4b8e      	ldr	r3, [pc, #568]	; (8008cdc <model_configure_weights+0xa84>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aa8:	4a8c      	ldr	r2, [pc, #560]	; (8008cdc <model_configure_weights+0xa84>)
 8008aaa:	6013      	str	r3, [r2, #0]
    conv2d_90_bias_array.data = AI_PTR(g_model_weights_map[0] + 249588);
 8008aac:	4b8c      	ldr	r3, [pc, #560]	; (8008ce0 <model_configure_weights+0xa88>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	4b8c      	ldr	r3, [pc, #560]	; (8008ce4 <model_configure_weights+0xa8c>)
 8008ab2:	4413      	add	r3, r2
 8008ab4:	4a89      	ldr	r2, [pc, #548]	; (8008cdc <model_configure_weights+0xa84>)
 8008ab6:	6093      	str	r3, [r2, #8]
    conv2d_90_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 249588);
 8008ab8:	4b89      	ldr	r3, [pc, #548]	; (8008ce0 <model_configure_weights+0xa88>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	4b89      	ldr	r3, [pc, #548]	; (8008ce4 <model_configure_weights+0xa8c>)
 8008abe:	4413      	add	r3, r2
 8008ac0:	4a86      	ldr	r2, [pc, #536]	; (8008cdc <model_configure_weights+0xa84>)
 8008ac2:	60d3      	str	r3, [r2, #12]
    
    conv2d_93_weights_array.format |= AI_FMT_FLAG_CONST;
 8008ac4:	4b88      	ldr	r3, [pc, #544]	; (8008ce8 <model_configure_weights+0xa90>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008acc:	4a86      	ldr	r2, [pc, #536]	; (8008ce8 <model_configure_weights+0xa90>)
 8008ace:	6013      	str	r3, [r2, #0]
    conv2d_93_weights_array.data = AI_PTR(g_model_weights_map[0] + 249652);
 8008ad0:	4b83      	ldr	r3, [pc, #524]	; (8008ce0 <model_configure_weights+0xa88>)
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	4b85      	ldr	r3, [pc, #532]	; (8008cec <model_configure_weights+0xa94>)
 8008ad6:	4413      	add	r3, r2
 8008ad8:	4a83      	ldr	r2, [pc, #524]	; (8008ce8 <model_configure_weights+0xa90>)
 8008ada:	6093      	str	r3, [r2, #8]
    conv2d_93_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 249652);
 8008adc:	4b80      	ldr	r3, [pc, #512]	; (8008ce0 <model_configure_weights+0xa88>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	4b82      	ldr	r3, [pc, #520]	; (8008cec <model_configure_weights+0xa94>)
 8008ae2:	4413      	add	r3, r2
 8008ae4:	4a80      	ldr	r2, [pc, #512]	; (8008ce8 <model_configure_weights+0xa90>)
 8008ae6:	60d3      	str	r3, [r2, #12]
    
    conv2d_93_bias_array.format |= AI_FMT_FLAG_CONST;
 8008ae8:	4b81      	ldr	r3, [pc, #516]	; (8008cf0 <model_configure_weights+0xa98>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008af0:	4a7f      	ldr	r2, [pc, #508]	; (8008cf0 <model_configure_weights+0xa98>)
 8008af2:	6013      	str	r3, [r2, #0]
    conv2d_93_bias_array.data = AI_PTR(g_model_weights_map[0] + 253748);
 8008af4:	4b7a      	ldr	r3, [pc, #488]	; (8008ce0 <model_configure_weights+0xa88>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	4b7e      	ldr	r3, [pc, #504]	; (8008cf4 <model_configure_weights+0xa9c>)
 8008afa:	4413      	add	r3, r2
 8008afc:	4a7c      	ldr	r2, [pc, #496]	; (8008cf0 <model_configure_weights+0xa98>)
 8008afe:	6093      	str	r3, [r2, #8]
    conv2d_93_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 253748);
 8008b00:	4b77      	ldr	r3, [pc, #476]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <model_configure_weights+0xa9c>)
 8008b06:	4413      	add	r3, r2
 8008b08:	4a79      	ldr	r2, [pc, #484]	; (8008cf0 <model_configure_weights+0xa98>)
 8008b0a:	60d3      	str	r3, [r2, #12]
    
    conv2d_102_weights_array.format |= AI_FMT_FLAG_CONST;
 8008b0c:	4b7a      	ldr	r3, [pc, #488]	; (8008cf8 <model_configure_weights+0xaa0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b14:	4a78      	ldr	r2, [pc, #480]	; (8008cf8 <model_configure_weights+0xaa0>)
 8008b16:	6013      	str	r3, [r2, #0]
    conv2d_102_weights_array.data = AI_PTR(g_model_weights_map[0] + 254004);
 8008b18:	4b71      	ldr	r3, [pc, #452]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b77      	ldr	r3, [pc, #476]	; (8008cfc <model_configure_weights+0xaa4>)
 8008b1e:	4413      	add	r3, r2
 8008b20:	4a75      	ldr	r2, [pc, #468]	; (8008cf8 <model_configure_weights+0xaa0>)
 8008b22:	6093      	str	r3, [r2, #8]
    conv2d_102_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 254004);
 8008b24:	4b6e      	ldr	r3, [pc, #440]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	4b74      	ldr	r3, [pc, #464]	; (8008cfc <model_configure_weights+0xaa4>)
 8008b2a:	4413      	add	r3, r2
 8008b2c:	4a72      	ldr	r2, [pc, #456]	; (8008cf8 <model_configure_weights+0xaa0>)
 8008b2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_102_bias_array.format |= AI_FMT_FLAG_CONST;
 8008b30:	4b73      	ldr	r3, [pc, #460]	; (8008d00 <model_configure_weights+0xaa8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b38:	4a71      	ldr	r2, [pc, #452]	; (8008d00 <model_configure_weights+0xaa8>)
 8008b3a:	6013      	str	r3, [r2, #0]
    conv2d_102_bias_array.data = AI_PTR(g_model_weights_map[0] + 548916);
 8008b3c:	4b68      	ldr	r3, [pc, #416]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4b70      	ldr	r3, [pc, #448]	; (8008d04 <model_configure_weights+0xaac>)
 8008b42:	4413      	add	r3, r2
 8008b44:	4a6e      	ldr	r2, [pc, #440]	; (8008d00 <model_configure_weights+0xaa8>)
 8008b46:	6093      	str	r3, [r2, #8]
    conv2d_102_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 548916);
 8008b48:	4b65      	ldr	r3, [pc, #404]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	4b6d      	ldr	r3, [pc, #436]	; (8008d04 <model_configure_weights+0xaac>)
 8008b4e:	4413      	add	r3, r2
 8008b50:	4a6b      	ldr	r2, [pc, #428]	; (8008d00 <model_configure_weights+0xaa8>)
 8008b52:	60d3      	str	r3, [r2, #12]
    
    conv2d_108_weights_array.format |= AI_FMT_FLAG_CONST;
 8008b54:	4b6c      	ldr	r3, [pc, #432]	; (8008d08 <model_configure_weights+0xab0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b5c:	4a6a      	ldr	r2, [pc, #424]	; (8008d08 <model_configure_weights+0xab0>)
 8008b5e:	6013      	str	r3, [r2, #0]
    conv2d_108_weights_array.data = AI_PTR(g_model_weights_map[0] + 549172);
 8008b60:	4b5f      	ldr	r3, [pc, #380]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	4b69      	ldr	r3, [pc, #420]	; (8008d0c <model_configure_weights+0xab4>)
 8008b66:	4413      	add	r3, r2
 8008b68:	4a67      	ldr	r2, [pc, #412]	; (8008d08 <model_configure_weights+0xab0>)
 8008b6a:	6093      	str	r3, [r2, #8]
    conv2d_108_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 549172);
 8008b6c:	4b5c      	ldr	r3, [pc, #368]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	4b66      	ldr	r3, [pc, #408]	; (8008d0c <model_configure_weights+0xab4>)
 8008b72:	4413      	add	r3, r2
 8008b74:	4a64      	ldr	r2, [pc, #400]	; (8008d08 <model_configure_weights+0xab0>)
 8008b76:	60d3      	str	r3, [r2, #12]
    
    conv2d_114_weights_array.format |= AI_FMT_FLAG_CONST;
 8008b78:	4b65      	ldr	r3, [pc, #404]	; (8008d10 <model_configure_weights+0xab8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b80:	4a63      	ldr	r2, [pc, #396]	; (8008d10 <model_configure_weights+0xab8>)
 8008b82:	6013      	str	r3, [r2, #0]
    conv2d_114_weights_array.data = AI_PTR(g_model_weights_map[0] + 574260);
 8008b84:	4b56      	ldr	r3, [pc, #344]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	4b62      	ldr	r3, [pc, #392]	; (8008d14 <model_configure_weights+0xabc>)
 8008b8a:	4413      	add	r3, r2
 8008b8c:	4a60      	ldr	r2, [pc, #384]	; (8008d10 <model_configure_weights+0xab8>)
 8008b8e:	6093      	str	r3, [r2, #8]
    conv2d_114_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 574260);
 8008b90:	4b53      	ldr	r3, [pc, #332]	; (8008ce0 <model_configure_weights+0xa88>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4b5f      	ldr	r3, [pc, #380]	; (8008d14 <model_configure_weights+0xabc>)
 8008b96:	4413      	add	r3, r2
 8008b98:	4a5d      	ldr	r2, [pc, #372]	; (8008d10 <model_configure_weights+0xab8>)
 8008b9a:	60d3      	str	r3, [r2, #12]
    
    gemm_118_weights_array.format |= AI_FMT_FLAG_CONST;
 8008b9c:	4b5e      	ldr	r3, [pc, #376]	; (8008d18 <model_configure_weights+0xac0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ba4:	4a5c      	ldr	r2, [pc, #368]	; (8008d18 <model_configure_weights+0xac0>)
 8008ba6:	6013      	str	r3, [r2, #0]
    gemm_118_weights_array.data = AI_PTR(g_model_weights_map[0] + 574652);
 8008ba8:	4b4d      	ldr	r3, [pc, #308]	; (8008ce0 <model_configure_weights+0xa88>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b5b      	ldr	r3, [pc, #364]	; (8008d1c <model_configure_weights+0xac4>)
 8008bae:	4413      	add	r3, r2
 8008bb0:	4a59      	ldr	r2, [pc, #356]	; (8008d18 <model_configure_weights+0xac0>)
 8008bb2:	6093      	str	r3, [r2, #8]
    gemm_118_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 574652);
 8008bb4:	4b4a      	ldr	r3, [pc, #296]	; (8008ce0 <model_configure_weights+0xa88>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	4b58      	ldr	r3, [pc, #352]	; (8008d1c <model_configure_weights+0xac4>)
 8008bba:	4413      	add	r3, r2
 8008bbc:	4a56      	ldr	r2, [pc, #344]	; (8008d18 <model_configure_weights+0xac0>)
 8008bbe:	60d3      	str	r3, [r2, #12]
    
    gemm_118_bias_array.format |= AI_FMT_FLAG_CONST;
 8008bc0:	4b57      	ldr	r3, [pc, #348]	; (8008d20 <model_configure_weights+0xac8>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bc8:	4a55      	ldr	r2, [pc, #340]	; (8008d20 <model_configure_weights+0xac8>)
 8008bca:	6013      	str	r3, [r2, #0]
    gemm_118_bias_array.data = AI_PTR(g_model_weights_map[0] + 575932);
 8008bcc:	4b44      	ldr	r3, [pc, #272]	; (8008ce0 <model_configure_weights+0xa88>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4b54      	ldr	r3, [pc, #336]	; (8008d24 <model_configure_weights+0xacc>)
 8008bd2:	4413      	add	r3, r2
 8008bd4:	4a52      	ldr	r2, [pc, #328]	; (8008d20 <model_configure_weights+0xac8>)
 8008bd6:	6093      	str	r3, [r2, #8]
    gemm_118_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 575932);
 8008bd8:	4b41      	ldr	r3, [pc, #260]	; (8008ce0 <model_configure_weights+0xa88>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b51      	ldr	r3, [pc, #324]	; (8008d24 <model_configure_weights+0xacc>)
 8008bde:	4413      	add	r3, r2
 8008be0:	4a4f      	ldr	r2, [pc, #316]	; (8008d20 <model_configure_weights+0xac8>)
 8008be2:	60d3      	str	r3, [r2, #12]
    
    reduce_112_Placeholder_array.format |= AI_FMT_FLAG_CONST;
 8008be4:	4b50      	ldr	r3, [pc, #320]	; (8008d28 <model_configure_weights+0xad0>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bec:	4a4e      	ldr	r2, [pc, #312]	; (8008d28 <model_configure_weights+0xad0>)
 8008bee:	6013      	str	r3, [r2, #0]
    reduce_112_Placeholder_array.data = AI_PTR(g_model_weights_map[0] + 575952);
 8008bf0:	4b3b      	ldr	r3, [pc, #236]	; (8008ce0 <model_configure_weights+0xa88>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	4b4d      	ldr	r3, [pc, #308]	; (8008d2c <model_configure_weights+0xad4>)
 8008bf6:	4413      	add	r3, r2
 8008bf8:	4a4b      	ldr	r2, [pc, #300]	; (8008d28 <model_configure_weights+0xad0>)
 8008bfa:	6093      	str	r3, [r2, #8]
    reduce_112_Placeholder_array.data_start = AI_PTR(g_model_weights_map[0] + 575952);
 8008bfc:	4b38      	ldr	r3, [pc, #224]	; (8008ce0 <model_configure_weights+0xa88>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	4b4a      	ldr	r3, [pc, #296]	; (8008d2c <model_configure_weights+0xad4>)
 8008c02:	4413      	add	r3, r2
 8008c04:	4a48      	ldr	r2, [pc, #288]	; (8008d28 <model_configure_weights+0xad0>)
 8008c06:	60d3      	str	r3, [r2, #12]
    
    reduce_74_Placeholder_array.format |= AI_FMT_FLAG_CONST;
 8008c08:	4b49      	ldr	r3, [pc, #292]	; (8008d30 <model_configure_weights+0xad8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c10:	4a47      	ldr	r2, [pc, #284]	; (8008d30 <model_configure_weights+0xad8>)
 8008c12:	6013      	str	r3, [r2, #0]
    reduce_74_Placeholder_array.data = AI_PTR(g_model_weights_map[0] + 575956);
 8008c14:	4b32      	ldr	r3, [pc, #200]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	4b46      	ldr	r3, [pc, #280]	; (8008d34 <model_configure_weights+0xadc>)
 8008c1a:	4413      	add	r3, r2
 8008c1c:	4a44      	ldr	r2, [pc, #272]	; (8008d30 <model_configure_weights+0xad8>)
 8008c1e:	6093      	str	r3, [r2, #8]
    reduce_74_Placeholder_array.data_start = AI_PTR(g_model_weights_map[0] + 575956);
 8008c20:	4b2f      	ldr	r3, [pc, #188]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	4b43      	ldr	r3, [pc, #268]	; (8008d34 <model_configure_weights+0xadc>)
 8008c26:	4413      	add	r3, r2
 8008c28:	4a41      	ldr	r2, [pc, #260]	; (8008d30 <model_configure_weights+0xad8>)
 8008c2a:	60d3      	str	r3, [r2, #12]
    
    reduce_36_Placeholder_array.format |= AI_FMT_FLAG_CONST;
 8008c2c:	4b42      	ldr	r3, [pc, #264]	; (8008d38 <model_configure_weights+0xae0>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c34:	4a40      	ldr	r2, [pc, #256]	; (8008d38 <model_configure_weights+0xae0>)
 8008c36:	6013      	str	r3, [r2, #0]
    reduce_36_Placeholder_array.data = AI_PTR(g_model_weights_map[0] + 575960);
 8008c38:	4b29      	ldr	r3, [pc, #164]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	4b3f      	ldr	r3, [pc, #252]	; (8008d3c <model_configure_weights+0xae4>)
 8008c3e:	4413      	add	r3, r2
 8008c40:	4a3d      	ldr	r2, [pc, #244]	; (8008d38 <model_configure_weights+0xae0>)
 8008c42:	6093      	str	r3, [r2, #8]
    reduce_36_Placeholder_array.data_start = AI_PTR(g_model_weights_map[0] + 575960);
 8008c44:	4b26      	ldr	r3, [pc, #152]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	4b3c      	ldr	r3, [pc, #240]	; (8008d3c <model_configure_weights+0xae4>)
 8008c4a:	4413      	add	r3, r2
 8008c4c:	4a3a      	ldr	r2, [pc, #232]	; (8008d38 <model_configure_weights+0xae0>)
 8008c4e:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8008c50:	4b3b      	ldr	r3, [pc, #236]	; (8008d40 <model_configure_weights+0xae8>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c58:	4a39      	ldr	r2, [pc, #228]	; (8008d40 <model_configure_weights+0xae8>)
 8008c5a:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_model_weights_map[0] + 575964);
 8008c5c:	4b20      	ldr	r3, [pc, #128]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	4b38      	ldr	r3, [pc, #224]	; (8008d44 <model_configure_weights+0xaec>)
 8008c62:	4413      	add	r3, r2
 8008c64:	4a36      	ldr	r2, [pc, #216]	; (8008d40 <model_configure_weights+0xae8>)
 8008c66:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 575964);
 8008c68:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	4b35      	ldr	r3, [pc, #212]	; (8008d44 <model_configure_weights+0xaec>)
 8008c6e:	4413      	add	r3, r2
 8008c70:	4a33      	ldr	r2, [pc, #204]	; (8008d40 <model_configure_weights+0xae8>)
 8008c72:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8008c74:	4b34      	ldr	r3, [pc, #208]	; (8008d48 <model_configure_weights+0xaf0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c7c:	4a32      	ldr	r2, [pc, #200]	; (8008d48 <model_configure_weights+0xaf0>)
 8008c7e:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_model_weights_map[0] + 576540);
 8008c80:	4b17      	ldr	r3, [pc, #92]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <model_configure_weights+0xaf4>)
 8008c86:	4413      	add	r3, r2
 8008c88:	4a2f      	ldr	r2, [pc, #188]	; (8008d48 <model_configure_weights+0xaf0>)
 8008c8a:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 576540);
 8008c8c:	4b14      	ldr	r3, [pc, #80]	; (8008ce0 <model_configure_weights+0xa88>)
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	4b2e      	ldr	r3, [pc, #184]	; (8008d4c <model_configure_weights+0xaf4>)
 8008c92:	4413      	add	r3, r2
 8008c94:	4a2c      	ldr	r2, [pc, #176]	; (8008d48 <model_configure_weights+0xaf0>)
 8008c96:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8008c98:	4b2d      	ldr	r3, [pc, #180]	; (8008d50 <model_configure_weights+0xaf8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ca0:	4a2b      	ldr	r2, [pc, #172]	; (8008d50 <model_configure_weights+0xaf8>)
 8008ca2:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_model_weights_map[0] + 576556);
 8008ca4:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <model_configure_weights+0xa88>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <model_configure_weights+0xafc>)
 8008caa:	4413      	add	r3, r2
 8008cac:	4a28      	ldr	r2, [pc, #160]	; (8008d50 <model_configure_weights+0xaf8>)
 8008cae:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 576556);
 8008cb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <model_configure_weights+0xa88>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <model_configure_weights+0xafc>)
 8008cb6:	4413      	add	r3, r2
 8008cb8:	4a25      	ldr	r2, [pc, #148]	; (8008d50 <model_configure_weights+0xaf8>)
 8008cba:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8008cbc:	4b26      	ldr	r3, [pc, #152]	; (8008d58 <model_configure_weights+0xb00>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cc4:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <model_configure_weights+0xb00>)
 8008cc6:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_model_weights_map[0] + 578860);
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <model_configure_weights+0xa88>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <model_configure_weights+0xb04>)
 8008cce:	4413      	add	r3, r2
 8008cd0:	4a21      	ldr	r2, [pc, #132]	; (8008d58 <model_configure_weights+0xb00>)
 8008cd2:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 578860);
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <model_configure_weights+0xa88>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	e042      	b.n	8008d60 <model_configure_weights+0xb08>
 8008cda:	bf00      	nop
 8008cdc:	20000310 	.word	0x20000310
 8008ce0:	200169c8 	.word	0x200169c8
 8008ce4:	0003cef4 	.word	0x0003cef4
 8008ce8:	20000320 	.word	0x20000320
 8008cec:	0003cf34 	.word	0x0003cf34
 8008cf0:	20000330 	.word	0x20000330
 8008cf4:	0003df34 	.word	0x0003df34
 8008cf8:	20000340 	.word	0x20000340
 8008cfc:	0003e034 	.word	0x0003e034
 8008d00:	20000350 	.word	0x20000350
 8008d04:	00086034 	.word	0x00086034
 8008d08:	20000360 	.word	0x20000360
 8008d0c:	00086134 	.word	0x00086134
 8008d10:	20000370 	.word	0x20000370
 8008d14:	0008c334 	.word	0x0008c334
 8008d18:	20000380 	.word	0x20000380
 8008d1c:	0008c4bc 	.word	0x0008c4bc
 8008d20:	20000390 	.word	0x20000390
 8008d24:	0008c9bc 	.word	0x0008c9bc
 8008d28:	20000b90 	.word	0x20000b90
 8008d2c:	0008c9d0 	.word	0x0008c9d0
 8008d30:	20000ba0 	.word	0x20000ba0
 8008d34:	0008c9d4 	.word	0x0008c9d4
 8008d38:	20000bb0 	.word	0x20000bb0
 8008d3c:	0008c9d8 	.word	0x0008c9d8
 8008d40:	20000bc0 	.word	0x20000bc0
 8008d44:	0008c9dc 	.word	0x0008c9dc
 8008d48:	20000bd0 	.word	0x20000bd0
 8008d4c:	0008cc1c 	.word	0x0008cc1c
 8008d50:	20000be0 	.word	0x20000be0
 8008d54:	0008cc2c 	.word	0x0008cc2c
 8008d58:	20000bf0 	.word	0x20000bf0
 8008d5c:	0008d52c 	.word	0x0008d52c
 8008d60:	4b2b      	ldr	r3, [pc, #172]	; (8008e10 <model_configure_weights+0xbb8>)
 8008d62:	4413      	add	r3, r2
 8008d64:	4a2b      	ldr	r2, [pc, #172]	; (8008e14 <model_configure_weights+0xbbc>)
 8008d66:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8008d68:	4b2b      	ldr	r3, [pc, #172]	; (8008e18 <model_configure_weights+0xbc0>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d70:	4a29      	ldr	r2, [pc, #164]	; (8008e18 <model_configure_weights+0xbc0>)
 8008d72:	6013      	str	r3, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_model_weights_map[0] + 578924);
 8008d74:	4b29      	ldr	r3, [pc, #164]	; (8008e1c <model_configure_weights+0xbc4>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	4b29      	ldr	r3, [pc, #164]	; (8008e20 <model_configure_weights+0xbc8>)
 8008d7a:	4413      	add	r3, r2
 8008d7c:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <model_configure_weights+0xbc0>)
 8008d7e:	6093      	str	r3, [r2, #8]
    conv2d_21_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 578924);
 8008d80:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <model_configure_weights+0xbc4>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b26      	ldr	r3, [pc, #152]	; (8008e20 <model_configure_weights+0xbc8>)
 8008d86:	4413      	add	r3, r2
 8008d88:	4a23      	ldr	r2, [pc, #140]	; (8008e18 <model_configure_weights+0xbc0>)
 8008d8a:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8008d8c:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <model_configure_weights+0xbcc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d94:	4a23      	ldr	r2, [pc, #140]	; (8008e24 <model_configure_weights+0xbcc>)
 8008d96:	6013      	str	r3, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_model_weights_map[0] + 579212);
 8008d98:	4b20      	ldr	r3, [pc, #128]	; (8008e1c <model_configure_weights+0xbc4>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b22      	ldr	r3, [pc, #136]	; (8008e28 <model_configure_weights+0xbd0>)
 8008d9e:	4413      	add	r3, r2
 8008da0:	4a20      	ldr	r2, [pc, #128]	; (8008e24 <model_configure_weights+0xbcc>)
 8008da2:	6093      	str	r3, [r2, #8]
    conv2d_21_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 579212);
 8008da4:	4b1d      	ldr	r3, [pc, #116]	; (8008e1c <model_configure_weights+0xbc4>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4b1f      	ldr	r3, [pc, #124]	; (8008e28 <model_configure_weights+0xbd0>)
 8008daa:	4413      	add	r3, r2
 8008dac:	4a1d      	ldr	r2, [pc, #116]	; (8008e24 <model_configure_weights+0xbcc>)
 8008dae:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8008db0:	4b1e      	ldr	r3, [pc, #120]	; (8008e2c <model_configure_weights+0xbd4>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008db8:	4a1c      	ldr	r2, [pc, #112]	; (8008e2c <model_configure_weights+0xbd4>)
 8008dba:	6013      	str	r3, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_model_weights_map[0] + 579244);
 8008dbc:	4b17      	ldr	r3, [pc, #92]	; (8008e1c <model_configure_weights+0xbc4>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <model_configure_weights+0xbd8>)
 8008dc2:	4413      	add	r3, r2
 8008dc4:	4a19      	ldr	r2, [pc, #100]	; (8008e2c <model_configure_weights+0xbd4>)
 8008dc6:	6093      	str	r3, [r2, #8]
    conv2d_22_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 579244);
 8008dc8:	4b14      	ldr	r3, [pc, #80]	; (8008e1c <model_configure_weights+0xbc4>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b18      	ldr	r3, [pc, #96]	; (8008e30 <model_configure_weights+0xbd8>)
 8008dce:	4413      	add	r3, r2
 8008dd0:	4a16      	ldr	r2, [pc, #88]	; (8008e2c <model_configure_weights+0xbd4>)
 8008dd2:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8008dd4:	4b17      	ldr	r3, [pc, #92]	; (8008e34 <model_configure_weights+0xbdc>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ddc:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <model_configure_weights+0xbdc>)
 8008dde:	6013      	str	r3, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_model_weights_map[0] + 579756);
 8008de0:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <model_configure_weights+0xbc4>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <model_configure_weights+0xbe0>)
 8008de6:	4413      	add	r3, r2
 8008de8:	4a12      	ldr	r2, [pc, #72]	; (8008e34 <model_configure_weights+0xbdc>)
 8008dea:	6093      	str	r3, [r2, #8]
    conv2d_22_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 579756);
 8008dec:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <model_configure_weights+0xbc4>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <model_configure_weights+0xbe0>)
 8008df2:	4413      	add	r3, r2
 8008df4:	4a0f      	ldr	r2, [pc, #60]	; (8008e34 <model_configure_weights+0xbdc>)
 8008df6:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e005      	b.n	8008e08 <model_configure_weights+0xbb0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008dfc:	2212      	movs	r2, #18
 8008dfe:	2130      	movs	r1, #48	; 0x30
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fb81 	bl	8009508 <ai_platform_network_set_error>
  return false;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	0008d52c 	.word	0x0008d52c
 8008e14:	20000bf0 	.word	0x20000bf0
 8008e18:	20000c00 	.word	0x20000c00
 8008e1c:	200169c8 	.word	0x200169c8
 8008e20:	0008d56c 	.word	0x0008d56c
 8008e24:	20000c10 	.word	0x20000c10
 8008e28:	0008d68c 	.word	0x0008d68c
 8008e2c:	20000c20 	.word	0x20000c20
 8008e30:	0008d6ac 	.word	0x0008d6ac
 8008e34:	20000c30 	.word	0x20000c30
 8008e38:	0008d8ac 	.word	0x0008d8ac

08008e3c <ai_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_model_get_error(ai_handle network)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fa53 	bl	80092f0 <ai_platform_network_get_error>
 8008e4a:	4603      	mov	r3, r0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <ai_model_create>:

AI_API_ENTRY
ai_error ai_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	2305      	movs	r3, #5
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	2301      	movs	r3, #1
 8008e68:	4a04      	ldr	r2, [pc, #16]	; (8008e7c <ai_model_create+0x28>)
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fe65 	bl	8009b3c <ai_platform_network_create>
 8008e72:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20006e90 	.word	0x20006e90

08008e80 <ai_model_create_and_init>:

AI_API_ENTRY
ai_error ai_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b096      	sub	sp, #88	; 0x58
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_model_create(network, AI_MODEL_DATA_CONFIG);
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff ffe0 	bl	8008e54 <ai_model_create>
 8008e94:	4603      	mov	r3, r0
 8008e96:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8008e98:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <ai_model_create_and_init+0x24>
        return err;
 8008ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea2:	e05d      	b.n	8008f60 <ai_model_create_and_init+0xe0>
    if (ai_model_data_params_get(&params) != true) {
 8008ea4:	f107 0314 	add.w	r3, r7, #20
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 f8dd 	bl	8009068 <ai_model_data_params_get>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	f083 0301 	eor.w	r3, r3, #1
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d008      	beq.n	8008ecc <ai_model_create_and_init+0x4c>
        err = ai_model_get_error(*network);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff ffbc 	bl	8008e3c <ai_model_get_error>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8008ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eca:	e049      	b.n	8008f60 <ai_model_create_and_init+0xe0>
    }
#if defined(AI_MODEL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d016      	beq.n	8008f00 <ai_model_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ed6:	e00e      	b.n	8008ef6 <ai_model_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	f107 0314 	add.w	r3, r7, #20
 8008ee8:	330c      	adds	r3, #12
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f922 	bl	8009134 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008efc:	4293      	cmp	r3, r2
 8008efe:	dbeb      	blt.n	8008ed8 <ai_model_create_and_init+0x58>
    }
#endif
#if defined(AI_MODEL_DATA_WEIGHTS_COUNT)
    if (weights) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d016      	beq.n	8008f34 <ai_model_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008f06:	2300      	movs	r3, #0
 8008f08:	653b      	str	r3, [r7, #80]	; 0x50
 8008f0a:	e00e      	b.n	8008f2a <ai_model_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008f0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	4413      	add	r3, r2
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f908 	bl	8009134 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f26:	3301      	adds	r3, #1
 8008f28:	653b      	str	r3, [r7, #80]	; 0x50
 8008f2a:	8b7b      	ldrh	r3, [r7, #26]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f30:	4293      	cmp	r3, r2
 8008f32:	dbeb      	blt.n	8008f0c <ai_model_create_and_init+0x8c>
    }
#endif
    if (ai_model_init(*network, &params) != true) {
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f107 0214 	add.w	r2, r7, #20
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 f846 	bl	8008fd0 <ai_model_init>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f083 0301 	eor.w	r3, r3, #1
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d006      	beq.n	8008f5e <ai_model_create_and_init+0xde>
        err = ai_model_get_error(*network);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff ff71 	bl	8008e3c <ai_model_get_error>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8008f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3758      	adds	r7, #88	; 0x58
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <ai_model_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d104      	bne.n	8008f82 <ai_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008f78:	4b06      	ldr	r3, [pc, #24]	; (8008f94 <ai_model_inputs_get+0x2c>)
 8008f7a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a06      	ldr	r2, [pc, #24]	; (8008f98 <ai_model_inputs_get+0x30>)
 8008f80:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fac5 	bl	8009514 <ai_platform_inputs_get>
 8008f8a:	4603      	mov	r3, r0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20006e90 	.word	0x20006e90
 8008f98:	a1c00100 	.word	0xa1c00100

08008f9c <ai_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <ai_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <ai_model_outputs_get+0x2c>)
 8008fae:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a06      	ldr	r2, [pc, #24]	; (8008fcc <ai_model_outputs_get+0x30>)
 8008fb4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fc37 	bl	800982c <ai_platform_outputs_get>
 8008fbe:	4603      	mov	r3, r0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20006e90 	.word	0x20006e90
 8008fcc:	a1c00100 	.word	0xa1c00100

08008fd0 <ai_model_init>:
}

AI_API_ENTRY
ai_bool ai_model_init(
  ai_handle network, const ai_network_params* params)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 ff87 	bl	8009ef0 <ai_platform_network_init>
 8008fe2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <ai_model_init+0x1e>
 8008fea:	2300      	movs	r3, #0
 8008fec:	e028      	b.n	8009040 <ai_model_init+0x70>

  ai_bool ok = true;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	72fb      	strb	r3, [r7, #11]
  ok &= model_configure_weights(net_ctx, params);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f7ff f92f 	bl	8008258 <model_configure_weights>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	4013      	ands	r3, r2
 8009002:	2b00      	cmp	r3, #0
 8009004:	bf14      	ite	ne
 8009006:	2301      	movne	r3, #1
 8009008:	2300      	moveq	r3, #0
 800900a:	72fb      	strb	r3, [r7, #11]
  ok &= model_configure_activations(net_ctx, params);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7fe fa62 	bl	80074d8 <model_configure_activations>
 8009014:	4603      	mov	r3, r0
 8009016:	461a      	mov	r2, r3
 8009018:	7afb      	ldrb	r3, [r7, #11]
 800901a:	4013      	ands	r3, r2
 800901c:	2b00      	cmp	r3, #0
 800901e:	bf14      	ite	ne
 8009020:	2301      	movne	r3, #1
 8009022:	2300      	moveq	r3, #0
 8009024:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 f8fe 	bl	800a228 <ai_platform_network_post_init>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	4013      	ands	r3, r2
 8009034:	2b00      	cmp	r3, #0
 8009036:	bf14      	ite	ne
 8009038:	2301      	movne	r3, #1
 800903a:	2300      	moveq	r3, #0
 800903c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800903e:	7afb      	ldrb	r3, [r7, #11]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <ai_model_run>:


AI_API_ENTRY
ai_i32 ai_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f001 fa0f 	bl	800a47c <ai_platform_network_process>
 800905e:	4603      	mov	r3, r0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <ai_model_data_params_get>:
 * @ingroup model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_model_data_params_get(ai_network_params* params)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <ai_model_data_params_get+0x12>
 8009076:	2300      	movs	r3, #0
 8009078:	e016      	b.n	80090a8 <ai_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800907a:	4a0d      	ldr	r2, [pc, #52]	; (80090b0 <ai_model_data_params_get+0x48>)
 800907c:	f107 0310 	add.w	r3, r7, #16
 8009080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009084:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODEL_DATA_ACTIVATIONS_COUNT, g_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8009088:	4a0a      	ldr	r2, [pc, #40]	; (80090b4 <ai_model_data_params_get+0x4c>)
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009092:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODEL_DATA_WEIGHTS_COUNT, g_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8009096:	f107 0210 	add.w	r2, r7, #16
 800909a:	f107 0308 	add.w	r3, r7, #8
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f90b 	bl	80092bc <ai_platform_bind_network_params>
 80090a6:	4603      	mov	r3, r0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	08010900 	.word	0x08010900
 80090b4:	08010908 	.word	0x08010908

080090b8 <ai_buffer_get_size>:
 80090b8:	b368      	cbz	r0, 8009116 <ai_buffer_get_size+0x5e>
 80090ba:	4b17      	ldr	r3, [pc, #92]	; (8009118 <ai_buffer_get_size+0x60>)
 80090bc:	4a17      	ldr	r2, [pc, #92]	; (800911c <ai_buffer_get_size+0x64>)
 80090be:	b410      	push	{r4}
 80090c0:	6804      	ldr	r4, [r0, #0]
 80090c2:	4023      	ands	r3, r4
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d123      	bne.n	8009110 <ai_buffer_get_size+0x58>
 80090c8:	b311      	cbz	r1, 8009110 <ai_buffer_get_size+0x58>
 80090ca:	6984      	ldr	r4, [r0, #24]
 80090cc:	6862      	ldr	r2, [r4, #4]
 80090ce:	321f      	adds	r2, #31
 80090d0:	f022 021f 	bic.w	r2, r2, #31
 80090d4:	7d03      	ldrb	r3, [r0, #20]
 80090d6:	6941      	ldr	r1, [r0, #20]
 80090d8:	f1a3 0301 	sub.w	r3, r3, #1
 80090dc:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80090e0:	fab3 f383 	clz	r3, r3
 80090e4:	095b      	lsrs	r3, r3, #5
 80090e6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80090ea:	da0c      	bge.n	8009106 <ai_buffer_get_size+0x4e>
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d103      	bne.n	80090f8 <ai_buffer_get_size+0x40>
 80090f0:	2802      	cmp	r0, #2
 80090f2:	f04f 0302 	mov.w	r3, #2
 80090f6:	d006      	beq.n	8009106 <ai_buffer_get_size+0x4e>
 80090f8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80090fc:	3301      	adds	r3, #1
 80090fe:	4298      	cmp	r0, r3
 8009100:	fb01 f202 	mul.w	r2, r1, r2
 8009104:	d1f2      	bne.n	80090ec <ai_buffer_get_size+0x34>
 8009106:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800910a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	6984      	ldr	r4, [r0, #24]
 8009112:	6862      	ldr	r2, [r4, #4]
 8009114:	e7de      	b.n	80090d4 <ai_buffer_get_size+0x1c>
 8009116:	4770      	bx	lr
 8009118:	017fffff 	.word	0x017fffff
 800911c:	000400c0 	.word	0x000400c0

08009120 <ai_buffer_array_sane>:
 8009120:	b138      	cbz	r0, 8009132 <ai_buffer_array_sane+0x12>
 8009122:	6843      	ldr	r3, [r0, #4]
 8009124:	b123      	cbz	r3, 8009130 <ai_buffer_array_sane+0x10>
 8009126:	8840      	ldrh	r0, [r0, #2]
 8009128:	3800      	subs	r0, #0
 800912a:	bf18      	it	ne
 800912c:	2001      	movne	r0, #1
 800912e:	4770      	bx	lr
 8009130:	4618      	mov	r0, r3
 8009132:	4770      	bx	lr

08009134 <ai_buffer_array_item_set_address>:
 8009134:	b150      	cbz	r0, 800914c <ai_buffer_array_item_set_address+0x18>
 8009136:	6843      	ldr	r3, [r0, #4]
 8009138:	b14b      	cbz	r3, 800914e <ai_buffer_array_item_set_address+0x1a>
 800913a:	8840      	ldrh	r0, [r0, #2]
 800913c:	b900      	cbnz	r0, 8009140 <ai_buffer_array_item_set_address+0xc>
 800913e:	4770      	bx	lr
 8009140:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009144:	2001      	movs	r0, #1
 8009146:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800914a:	604a      	str	r2, [r1, #4]
 800914c:	4770      	bx	lr
 800914e:	4618      	mov	r0, r3
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <_ai_platform_acquire_crc>:
 8009154:	2001      	movs	r0, #1
 8009156:	4770      	bx	lr

08009158 <_ai_platform_release_crc>:
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop

0800915c <ai_platform_get_weights_map>:
 800915c:	2900      	cmp	r1, #0
 800915e:	bf18      	it	ne
 8009160:	2800      	cmpne	r0, #0
 8009162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009164:	bf0c      	ite	eq
 8009166:	2401      	moveq	r4, #1
 8009168:	2400      	movne	r4, #0
 800916a:	2a00      	cmp	r2, #0
 800916c:	bf08      	it	eq
 800916e:	f044 0401 	orreq.w	r4, r4, #1
 8009172:	b114      	cbz	r4, 800917a <ai_platform_get_weights_map+0x1e>
 8009174:	2400      	movs	r4, #0
 8009176:	4620      	mov	r0, r4
 8009178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800917a:	4616      	mov	r6, r2
 800917c:	4b22      	ldr	r3, [pc, #136]	; (8009208 <ai_platform_get_weights_map+0xac>)
 800917e:	6812      	ldr	r2, [r2, #0]
 8009180:	4605      	mov	r5, r0
 8009182:	460f      	mov	r7, r1
 8009184:	429a      	cmp	r2, r3
 8009186:	d022      	beq.n	80091ce <ai_platform_get_weights_map+0x72>
 8009188:	6870      	ldr	r0, [r6, #4]
 800918a:	2800      	cmp	r0, #0
 800918c:	d0f2      	beq.n	8009174 <ai_platform_get_weights_map+0x18>
 800918e:	6806      	ldr	r6, [r0, #0]
 8009190:	429e      	cmp	r6, r3
 8009192:	d006      	beq.n	80091a2 <ai_platform_get_weights_map+0x46>
 8009194:	f1a1 0401 	sub.w	r4, r1, #1
 8009198:	6028      	str	r0, [r5, #0]
 800919a:	fab4 f484 	clz	r4, r4
 800919e:	0964      	lsrs	r4, r4, #5
 80091a0:	e7e9      	b.n	8009176 <ai_platform_get_weights_map+0x1a>
 80091a2:	3d04      	subs	r5, #4
 80091a4:	4602      	mov	r2, r0
 80091a6:	4621      	mov	r1, r4
 80091a8:	e000      	b.n	80091ac <ai_platform_get_weights_map+0x50>
 80091aa:	4619      	mov	r1, r3
 80091ac:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80091b0:	42b3      	cmp	r3, r6
 80091b2:	d025      	beq.n	8009200 <ai_platform_get_weights_map+0xa4>
 80091b4:	f845 3f04 	str.w	r3, [r5, #4]!
 80091b8:	1c4b      	adds	r3, r1, #1
 80091ba:	429f      	cmp	r7, r3
 80091bc:	d8f5      	bhi.n	80091aa <ai_platform_get_weights_map+0x4e>
 80091be:	d1da      	bne.n	8009176 <ai_platform_get_weights_map+0x1a>
 80091c0:	3102      	adds	r1, #2
 80091c2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80091c6:	42b3      	cmp	r3, r6
 80091c8:	d1d5      	bne.n	8009176 <ai_platform_get_weights_map+0x1a>
 80091ca:	2401      	movs	r4, #1
 80091cc:	e7d3      	b.n	8009176 <ai_platform_get_weights_map+0x1a>
 80091ce:	1d30      	adds	r0, r6, #4
 80091d0:	f7ff ffa6 	bl	8009120 <ai_buffer_array_sane>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d0cd      	beq.n	8009174 <ai_platform_get_weights_map+0x18>
 80091d8:	88f3      	ldrh	r3, [r6, #6]
 80091da:	429f      	cmp	r7, r3
 80091dc:	d1ca      	bne.n	8009174 <ai_platform_get_weights_map+0x18>
 80091de:	3d04      	subs	r5, #4
 80091e0:	4622      	mov	r2, r4
 80091e2:	68b3      	ldr	r3, [r6, #8]
 80091e4:	4423      	add	r3, r4
 80091e6:	341c      	adds	r4, #28
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	b123      	cbz	r3, 80091f6 <ai_platform_get_weights_map+0x9a>
 80091ec:	3201      	adds	r2, #1
 80091ee:	f845 3f04 	str.w	r3, [r5, #4]!
 80091f2:	4297      	cmp	r7, r2
 80091f4:	d8f5      	bhi.n	80091e2 <ai_platform_get_weights_map+0x86>
 80091f6:	1abc      	subs	r4, r7, r2
 80091f8:	fab4 f484 	clz	r4, r4
 80091fc:	0964      	lsrs	r4, r4, #5
 80091fe:	e7ba      	b.n	8009176 <ai_platform_get_weights_map+0x1a>
 8009200:	428f      	cmp	r7, r1
 8009202:	d1b8      	bne.n	8009176 <ai_platform_get_weights_map+0x1a>
 8009204:	e7e1      	b.n	80091ca <ai_platform_get_weights_map+0x6e>
 8009206:	bf00      	nop
 8009208:	a1facade 	.word	0xa1facade

0800920c <ai_platform_get_activations_map>:
 800920c:	2900      	cmp	r1, #0
 800920e:	bf18      	it	ne
 8009210:	2800      	cmpne	r0, #0
 8009212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009214:	bf0c      	ite	eq
 8009216:	2401      	moveq	r4, #1
 8009218:	2400      	movne	r4, #0
 800921a:	2a00      	cmp	r2, #0
 800921c:	bf08      	it	eq
 800921e:	f044 0401 	orreq.w	r4, r4, #1
 8009222:	b114      	cbz	r4, 800922a <ai_platform_get_activations_map+0x1e>
 8009224:	2400      	movs	r4, #0
 8009226:	4620      	mov	r0, r4
 8009228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800922a:	4616      	mov	r6, r2
 800922c:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <ai_platform_get_activations_map+0xac>)
 800922e:	6812      	ldr	r2, [r2, #0]
 8009230:	4605      	mov	r5, r0
 8009232:	460f      	mov	r7, r1
 8009234:	429a      	cmp	r2, r3
 8009236:	d022      	beq.n	800927e <ai_platform_get_activations_map+0x72>
 8009238:	6a30      	ldr	r0, [r6, #32]
 800923a:	2800      	cmp	r0, #0
 800923c:	d0f2      	beq.n	8009224 <ai_platform_get_activations_map+0x18>
 800923e:	6806      	ldr	r6, [r0, #0]
 8009240:	429e      	cmp	r6, r3
 8009242:	d006      	beq.n	8009252 <ai_platform_get_activations_map+0x46>
 8009244:	f1a1 0401 	sub.w	r4, r1, #1
 8009248:	6028      	str	r0, [r5, #0]
 800924a:	fab4 f484 	clz	r4, r4
 800924e:	0964      	lsrs	r4, r4, #5
 8009250:	e7e9      	b.n	8009226 <ai_platform_get_activations_map+0x1a>
 8009252:	3d04      	subs	r5, #4
 8009254:	4602      	mov	r2, r0
 8009256:	4621      	mov	r1, r4
 8009258:	e000      	b.n	800925c <ai_platform_get_activations_map+0x50>
 800925a:	4619      	mov	r1, r3
 800925c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009260:	42b3      	cmp	r3, r6
 8009262:	d026      	beq.n	80092b2 <ai_platform_get_activations_map+0xa6>
 8009264:	f845 3f04 	str.w	r3, [r5, #4]!
 8009268:	1c4b      	adds	r3, r1, #1
 800926a:	429f      	cmp	r7, r3
 800926c:	d8f5      	bhi.n	800925a <ai_platform_get_activations_map+0x4e>
 800926e:	d1da      	bne.n	8009226 <ai_platform_get_activations_map+0x1a>
 8009270:	3102      	adds	r1, #2
 8009272:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8009276:	42b3      	cmp	r3, r6
 8009278:	d1d5      	bne.n	8009226 <ai_platform_get_activations_map+0x1a>
 800927a:	2401      	movs	r4, #1
 800927c:	e7d3      	b.n	8009226 <ai_platform_get_activations_map+0x1a>
 800927e:	f106 000c 	add.w	r0, r6, #12
 8009282:	f7ff ff4d 	bl	8009120 <ai_buffer_array_sane>
 8009286:	2800      	cmp	r0, #0
 8009288:	d0cc      	beq.n	8009224 <ai_platform_get_activations_map+0x18>
 800928a:	89f3      	ldrh	r3, [r6, #14]
 800928c:	429f      	cmp	r7, r3
 800928e:	d1c9      	bne.n	8009224 <ai_platform_get_activations_map+0x18>
 8009290:	3d04      	subs	r5, #4
 8009292:	4622      	mov	r2, r4
 8009294:	6933      	ldr	r3, [r6, #16]
 8009296:	4423      	add	r3, r4
 8009298:	341c      	adds	r4, #28
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	b123      	cbz	r3, 80092a8 <ai_platform_get_activations_map+0x9c>
 800929e:	3201      	adds	r2, #1
 80092a0:	f845 3f04 	str.w	r3, [r5, #4]!
 80092a4:	4297      	cmp	r7, r2
 80092a6:	d8f5      	bhi.n	8009294 <ai_platform_get_activations_map+0x88>
 80092a8:	1abc      	subs	r4, r7, r2
 80092aa:	fab4 f484 	clz	r4, r4
 80092ae:	0964      	lsrs	r4, r4, #5
 80092b0:	e7b9      	b.n	8009226 <ai_platform_get_activations_map+0x1a>
 80092b2:	428f      	cmp	r7, r1
 80092b4:	d1b7      	bne.n	8009226 <ai_platform_get_activations_map+0x1a>
 80092b6:	e7e0      	b.n	800927a <ai_platform_get_activations_map+0x6e>
 80092b8:	a1facade 	.word	0xa1facade

080092bc <ai_platform_bind_network_params>:
 80092bc:	2a00      	cmp	r2, #0
 80092be:	bf18      	it	ne
 80092c0:	2900      	cmpne	r1, #0
 80092c2:	d010      	beq.n	80092e6 <ai_platform_bind_network_params+0x2a>
 80092c4:	b178      	cbz	r0, 80092e6 <ai_platform_bind_network_params+0x2a>
 80092c6:	4603      	mov	r3, r0
 80092c8:	4808      	ldr	r0, [pc, #32]	; (80092ec <ai_platform_bind_network_params+0x30>)
 80092ca:	f103 0c0c 	add.w	ip, r3, #12
 80092ce:	f843 0b04 	str.w	r0, [r3], #4
 80092d2:	c903      	ldmia	r1, {r0, r1}
 80092d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80092d8:	2301      	movs	r3, #1
 80092da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80092de:	e88c 0003 	stmia.w	ip, {r0, r1}
 80092e2:	4618      	mov	r0, r3
 80092e4:	4770      	bx	lr
 80092e6:	2300      	movs	r3, #0
 80092e8:	4618      	mov	r0, r3
 80092ea:	4770      	bx	lr
 80092ec:	a1facade 	.word	0xa1facade

080092f0 <ai_platform_network_get_error>:
 80092f0:	b510      	push	{r4, lr}
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d03f      	beq.n	8009376 <ai_platform_network_get_error+0x86>
 80092f6:	4b7d      	ldr	r3, [pc, #500]	; (80094ec <ai_platform_network_get_error+0x1fc>)
 80092f8:	4604      	mov	r4, r0
 80092fa:	6802      	ldr	r2, [r0, #0]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d13a      	bne.n	8009376 <ai_platform_network_get_error+0x86>
 8009300:	f7ff ff28 	bl	8009154 <_ai_platform_acquire_crc>
 8009304:	4b7a      	ldr	r3, [pc, #488]	; (80094f0 <ai_platform_network_get_error+0x200>)
 8009306:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009310:	189a      	adds	r2, r3, r2
 8009312:	2a01      	cmp	r2, #1
 8009314:	f240 8086 	bls.w	8009424 <ai_platform_network_get_error+0x134>
 8009318:	f240 4249 	movw	r2, #1097	; 0x449
 800931c:	4293      	cmp	r3, r2
 800931e:	f000 8081 	beq.w	8009424 <ai_platform_network_get_error+0x134>
 8009322:	4a74      	ldr	r2, [pc, #464]	; (80094f4 <ai_platform_network_get_error+0x204>)
 8009324:	6813      	ldr	r3, [r2, #0]
 8009326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800932a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800932e:	f000 8087 	beq.w	8009440 <ai_platform_network_get_error+0x150>
 8009332:	6813      	ldr	r3, [r2, #0]
 8009334:	f240 4183 	movw	r1, #1155	; 0x483
 8009338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800933c:	428b      	cmp	r3, r1
 800933e:	f000 80a9 	beq.w	8009494 <ai_platform_network_get_error+0x1a4>
 8009342:	6813      	ldr	r3, [r2, #0]
 8009344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009348:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800934c:	f000 80c0 	beq.w	80094d0 <ai_platform_network_get_error+0x1e0>
 8009350:	6813      	ldr	r3, [r2, #0]
 8009352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 8082 	bne.w	8009460 <ai_platform_network_get_error+0x170>
 800935c:	4a66      	ldr	r2, [pc, #408]	; (80094f8 <ai_platform_network_get_error+0x208>)
 800935e:	2301      	movs	r3, #1
 8009360:	6093      	str	r3, [r2, #8]
 8009362:	6893      	ldr	r3, [r2, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1fc      	bne.n	8009362 <ai_platform_network_get_error+0x72>
 8009368:	4964      	ldr	r1, [pc, #400]	; (80094fc <ai_platform_network_get_error+0x20c>)
 800936a:	4b65      	ldr	r3, [pc, #404]	; (8009500 <ai_platform_network_get_error+0x210>)
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	6812      	ldr	r2, [r2, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d075      	beq.n	8009460 <ai_platform_network_get_error+0x170>
 8009374:	e7fe      	b.n	8009374 <ai_platform_network_get_error+0x84>
 8009376:	f7ff feed 	bl	8009154 <_ai_platform_acquire_crc>
 800937a:	4b5d      	ldr	r3, [pc, #372]	; (80094f0 <ai_platform_network_get_error+0x200>)
 800937c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009386:	185a      	adds	r2, r3, r1
 8009388:	2a01      	cmp	r2, #1
 800938a:	d929      	bls.n	80093e0 <ai_platform_network_get_error+0xf0>
 800938c:	f240 4249 	movw	r2, #1097	; 0x449
 8009390:	4293      	cmp	r3, r2
 8009392:	d025      	beq.n	80093e0 <ai_platform_network_get_error+0xf0>
 8009394:	4a57      	ldr	r2, [pc, #348]	; (80094f4 <ai_platform_network_get_error+0x204>)
 8009396:	6813      	ldr	r3, [r2, #0]
 8009398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800939c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80093a0:	d02b      	beq.n	80093fa <ai_platform_network_get_error+0x10a>
 80093a2:	6813      	ldr	r3, [r2, #0]
 80093a4:	f240 4183 	movw	r1, #1155	; 0x483
 80093a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093ac:	428b      	cmp	r3, r1
 80093ae:	d060      	beq.n	8009472 <ai_platform_network_get_error+0x182>
 80093b0:	6813      	ldr	r3, [r2, #0]
 80093b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093b6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80093ba:	d07c      	beq.n	80094b6 <ai_platform_network_get_error+0x1c6>
 80093bc:	6813      	ldr	r3, [r2, #0]
 80093be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d129      	bne.n	800941a <ai_platform_network_get_error+0x12a>
 80093c6:	4a4c      	ldr	r2, [pc, #304]	; (80094f8 <ai_platform_network_get_error+0x208>)
 80093c8:	2301      	movs	r3, #1
 80093ca:	6093      	str	r3, [r2, #8]
 80093cc:	6893      	ldr	r3, [r2, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1fc      	bne.n	80093cc <ai_platform_network_get_error+0xdc>
 80093d2:	494a      	ldr	r1, [pc, #296]	; (80094fc <ai_platform_network_get_error+0x20c>)
 80093d4:	4b4a      	ldr	r3, [pc, #296]	; (8009500 <ai_platform_network_get_error+0x210>)
 80093d6:	6011      	str	r1, [r2, #0]
 80093d8:	6812      	ldr	r2, [r2, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d01d      	beq.n	800941a <ai_platform_network_get_error+0x12a>
 80093de:	e7fe      	b.n	80093de <ai_platform_network_get_error+0xee>
 80093e0:	4a45      	ldr	r2, [pc, #276]	; (80094f8 <ai_platform_network_get_error+0x208>)
 80093e2:	2301      	movs	r3, #1
 80093e4:	6093      	str	r3, [r2, #8]
 80093e6:	6893      	ldr	r3, [r2, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1fc      	bne.n	80093e6 <ai_platform_network_get_error+0xf6>
 80093ec:	4943      	ldr	r1, [pc, #268]	; (80094fc <ai_platform_network_get_error+0x20c>)
 80093ee:	4b44      	ldr	r3, [pc, #272]	; (8009500 <ai_platform_network_get_error+0x210>)
 80093f0:	6011      	str	r1, [r2, #0]
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d010      	beq.n	800941a <ai_platform_network_get_error+0x12a>
 80093f8:	e7fe      	b.n	80093f8 <ai_platform_network_get_error+0x108>
 80093fa:	4a42      	ldr	r2, [pc, #264]	; (8009504 <ai_platform_network_get_error+0x214>)
 80093fc:	2301      	movs	r3, #1
 80093fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009402:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1fb      	bne.n	8009402 <ai_platform_network_get_error+0x112>
 800940a:	493c      	ldr	r1, [pc, #240]	; (80094fc <ai_platform_network_get_error+0x20c>)
 800940c:	4b3c      	ldr	r3, [pc, #240]	; (8009500 <ai_platform_network_get_error+0x210>)
 800940e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009412:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009416:	429a      	cmp	r2, r3
 8009418:	d111      	bne.n	800943e <ai_platform_network_get_error+0x14e>
 800941a:	f7ff fe9d 	bl	8009158 <_ai_platform_release_crc>
 800941e:	f241 0010 	movw	r0, #4112	; 0x1010
 8009422:	bd10      	pop	{r4, pc}
 8009424:	4a34      	ldr	r2, [pc, #208]	; (80094f8 <ai_platform_network_get_error+0x208>)
 8009426:	2301      	movs	r3, #1
 8009428:	6093      	str	r3, [r2, #8]
 800942a:	6893      	ldr	r3, [r2, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1fc      	bne.n	800942a <ai_platform_network_get_error+0x13a>
 8009430:	4932      	ldr	r1, [pc, #200]	; (80094fc <ai_platform_network_get_error+0x20c>)
 8009432:	4b33      	ldr	r3, [pc, #204]	; (8009500 <ai_platform_network_get_error+0x210>)
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	6812      	ldr	r2, [r2, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d011      	beq.n	8009460 <ai_platform_network_get_error+0x170>
 800943c:	e7fe      	b.n	800943c <ai_platform_network_get_error+0x14c>
 800943e:	e7fe      	b.n	800943e <ai_platform_network_get_error+0x14e>
 8009440:	4a30      	ldr	r2, [pc, #192]	; (8009504 <ai_platform_network_get_error+0x214>)
 8009442:	2301      	movs	r3, #1
 8009444:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009448:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1fb      	bne.n	8009448 <ai_platform_network_get_error+0x158>
 8009450:	492a      	ldr	r1, [pc, #168]	; (80094fc <ai_platform_network_get_error+0x20c>)
 8009452:	4b2b      	ldr	r3, [pc, #172]	; (8009500 <ai_platform_network_get_error+0x210>)
 8009454:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009458:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800945c:	429a      	cmp	r2, r3
 800945e:	d107      	bne.n	8009470 <ai_platform_network_get_error+0x180>
 8009460:	f7ff fe7a 	bl	8009158 <_ai_platform_release_crc>
 8009464:	f104 0010 	add.w	r0, r4, #16
 8009468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800946c:	f001 bae4 	b.w	800aa38 <core_get_error>
 8009470:	e7fe      	b.n	8009470 <ai_platform_network_get_error+0x180>
 8009472:	4a24      	ldr	r2, [pc, #144]	; (8009504 <ai_platform_network_get_error+0x214>)
 8009474:	2301      	movs	r3, #1
 8009476:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800947a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1fb      	bne.n	800947a <ai_platform_network_get_error+0x18a>
 8009482:	491e      	ldr	r1, [pc, #120]	; (80094fc <ai_platform_network_get_error+0x20c>)
 8009484:	4b1e      	ldr	r3, [pc, #120]	; (8009500 <ai_platform_network_get_error+0x210>)
 8009486:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800948a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800948e:	429a      	cmp	r2, r3
 8009490:	d0c3      	beq.n	800941a <ai_platform_network_get_error+0x12a>
 8009492:	e7fe      	b.n	8009492 <ai_platform_network_get_error+0x1a2>
 8009494:	4a1b      	ldr	r2, [pc, #108]	; (8009504 <ai_platform_network_get_error+0x214>)
 8009496:	2301      	movs	r3, #1
 8009498:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800949c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1fb      	bne.n	800949c <ai_platform_network_get_error+0x1ac>
 80094a4:	4915      	ldr	r1, [pc, #84]	; (80094fc <ai_platform_network_get_error+0x20c>)
 80094a6:	4b16      	ldr	r3, [pc, #88]	; (8009500 <ai_platform_network_get_error+0x210>)
 80094a8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80094ac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d0d5      	beq.n	8009460 <ai_platform_network_get_error+0x170>
 80094b4:	e7fe      	b.n	80094b4 <ai_platform_network_get_error+0x1c4>
 80094b6:	4a10      	ldr	r2, [pc, #64]	; (80094f8 <ai_platform_network_get_error+0x208>)
 80094b8:	2301      	movs	r3, #1
 80094ba:	6093      	str	r3, [r2, #8]
 80094bc:	6893      	ldr	r3, [r2, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1fc      	bne.n	80094bc <ai_platform_network_get_error+0x1cc>
 80094c2:	490e      	ldr	r1, [pc, #56]	; (80094fc <ai_platform_network_get_error+0x20c>)
 80094c4:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <ai_platform_network_get_error+0x210>)
 80094c6:	6011      	str	r1, [r2, #0]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d0a5      	beq.n	800941a <ai_platform_network_get_error+0x12a>
 80094ce:	e7fe      	b.n	80094ce <ai_platform_network_get_error+0x1de>
 80094d0:	4a09      	ldr	r2, [pc, #36]	; (80094f8 <ai_platform_network_get_error+0x208>)
 80094d2:	2301      	movs	r3, #1
 80094d4:	6093      	str	r3, [r2, #8]
 80094d6:	6893      	ldr	r3, [r2, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1fc      	bne.n	80094d6 <ai_platform_network_get_error+0x1e6>
 80094dc:	4907      	ldr	r1, [pc, #28]	; (80094fc <ai_platform_network_get_error+0x20c>)
 80094de:	4b08      	ldr	r3, [pc, #32]	; (8009500 <ai_platform_network_get_error+0x210>)
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d0bb      	beq.n	8009460 <ai_platform_network_get_error+0x170>
 80094e8:	e7fe      	b.n	80094e8 <ai_platform_network_get_error+0x1f8>
 80094ea:	bf00      	nop
 80094ec:	a1c00100 	.word	0xa1c00100
 80094f0:	e0042000 	.word	0xe0042000
 80094f4:	5c001000 	.word	0x5c001000
 80094f8:	40023000 	.word	0x40023000
 80094fc:	f407a5c2 	.word	0xf407a5c2
 8009500:	b5e8b5cd 	.word	0xb5e8b5cd
 8009504:	58024000 	.word	0x58024000

08009508 <ai_platform_network_set_error>:
 8009508:	b110      	cbz	r0, 8009510 <ai_platform_network_set_error+0x8>
 800950a:	3010      	adds	r0, #16
 800950c:	f001 ba9a 	b.w	800aa44 <core_set_error>
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop

08009514 <ai_platform_inputs_get>:
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	b085      	sub	sp, #20
 800951a:	9102      	str	r1, [sp, #8]
 800951c:	2800      	cmp	r0, #0
 800951e:	f000 8093 	beq.w	8009648 <ai_platform_inputs_get+0x134>
 8009522:	4baa      	ldr	r3, [pc, #680]	; (80097cc <ai_platform_inputs_get+0x2b8>)
 8009524:	4681      	mov	r9, r0
 8009526:	6802      	ldr	r2, [r0, #0]
 8009528:	429a      	cmp	r2, r3
 800952a:	f040 808d 	bne.w	8009648 <ai_platform_inputs_get+0x134>
 800952e:	f7ff fe11 	bl	8009154 <_ai_platform_acquire_crc>
 8009532:	4ba7      	ldr	r3, [pc, #668]	; (80097d0 <ai_platform_inputs_get+0x2bc>)
 8009534:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800953e:	189a      	adds	r2, r3, r2
 8009540:	2a01      	cmp	r2, #1
 8009542:	f240 80da 	bls.w	80096fa <ai_platform_inputs_get+0x1e6>
 8009546:	f240 4249 	movw	r2, #1097	; 0x449
 800954a:	4293      	cmp	r3, r2
 800954c:	f000 80d5 	beq.w	80096fa <ai_platform_inputs_get+0x1e6>
 8009550:	4aa0      	ldr	r2, [pc, #640]	; (80097d4 <ai_platform_inputs_get+0x2c0>)
 8009552:	6813      	ldr	r3, [r2, #0]
 8009554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009558:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800955c:	f000 80dc 	beq.w	8009718 <ai_platform_inputs_get+0x204>
 8009560:	6813      	ldr	r3, [r2, #0]
 8009562:	f240 4183 	movw	r1, #1155	; 0x483
 8009566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800956a:	428b      	cmp	r3, r1
 800956c:	f000 810e 	beq.w	800978c <ai_platform_inputs_get+0x278>
 8009570:	6813      	ldr	r3, [r2, #0]
 8009572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009576:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800957a:	f000 8143 	beq.w	8009804 <ai_platform_inputs_get+0x2f0>
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 8113 	beq.w	80097b0 <ai_platform_inputs_get+0x29c>
 800958a:	f7ff fde5 	bl	8009158 <_ai_platform_release_crc>
 800958e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80d2 	beq.w	800973c <ai_platform_inputs_get+0x228>
 8009598:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800959c:	f1ba 0f00 	cmp.w	sl, #0
 80095a0:	f000 80cc 	beq.w	800973c <ai_platform_inputs_get+0x228>
 80095a4:	2100      	movs	r1, #0
 80095a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80095aa:	460d      	mov	r5, r1
 80095ac:	4689      	mov	r9, r1
 80095ae:	e016      	b.n	80095de <ai_platform_inputs_get+0xca>
 80095b0:	9a01      	ldr	r2, [sp, #4]
 80095b2:	2301      	movs	r3, #1
 80095b4:	f848 3002 	str.w	r3, [r8, r2]
 80095b8:	69b2      	ldr	r2, [r6, #24]
 80095ba:	f04f 0301 	mov.w	r3, #1
 80095be:	6856      	ldr	r6, [r2, #4]
 80095c0:	3501      	adds	r5, #1
 80095c2:	f109 091c 	add.w	r9, r9, #28
 80095c6:	7523      	strb	r3, [r4, #20]
 80095c8:	2300      	movs	r3, #0
 80095ca:	6962      	ldr	r2, [r4, #20]
 80095cc:	60a7      	str	r7, [r4, #8]
 80095ce:	f36b 221f 	bfi	r2, fp, #8, #24
 80095d2:	6126      	str	r6, [r4, #16]
 80095d4:	61a1      	str	r1, [r4, #24]
 80095d6:	60e3      	str	r3, [r4, #12]
 80095d8:	6162      	str	r2, [r4, #20]
 80095da:	e9c4 0c00 	strd	r0, ip, [r4]
 80095de:	f8ba 3000 	ldrh.w	r3, [sl]
 80095e2:	b2ac      	uxth	r4, r5
 80095e4:	42ab      	cmp	r3, r5
 80095e6:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80095ea:	9301      	str	r3, [sp, #4]
 80095ec:	f240 80b5 	bls.w	800975a <ai_platform_inputs_get+0x246>
 80095f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 80b0 	beq.w	800975a <ai_platform_inputs_get+0x246>
 80095fa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80095fe:	2e00      	cmp	r6, #0
 8009600:	f000 80ab 	beq.w	800975a <ai_platform_inputs_get+0x246>
 8009604:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009608:	69b2      	ldr	r2, [r6, #24]
 800960a:	68f1      	ldr	r1, [r6, #12]
 800960c:	6810      	ldr	r0, [r2, #0]
 800960e:	9100      	str	r1, [sp, #0]
 8009610:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8009614:	68b3      	ldr	r3, [r6, #8]
 8009616:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800961a:	444c      	add	r4, r9
 800961c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8009620:	f003 fec2 	bl	800d3a8 <ai_array_to_buffer_fmt>
 8009624:	69b2      	ldr	r2, [r6, #24]
 8009626:	9900      	ldr	r1, [sp, #0]
 8009628:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800962c:	2f00      	cmp	r7, #0
 800962e:	d0c4      	beq.n	80095ba <ai_platform_inputs_get+0xa6>
 8009630:	2200      	movs	r2, #0
 8009632:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8009636:	6832      	ldr	r2, [r6, #0]
 8009638:	607a      	str	r2, [r7, #4]
 800963a:	b112      	cbz	r2, 8009642 <ai_platform_inputs_get+0x12e>
 800963c:	8852      	ldrh	r2, [r2, #2]
 800963e:	2a00      	cmp	r2, #0
 8009640:	d1b6      	bne.n	80095b0 <ai_platform_inputs_get+0x9c>
 8009642:	69b2      	ldr	r2, [r6, #24]
 8009644:	2700      	movs	r7, #0
 8009646:	e7b8      	b.n	80095ba <ai_platform_inputs_get+0xa6>
 8009648:	f7ff fd84 	bl	8009154 <_ai_platform_acquire_crc>
 800964c:	4b60      	ldr	r3, [pc, #384]	; (80097d0 <ai_platform_inputs_get+0x2bc>)
 800964e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009658:	185a      	adds	r2, r3, r1
 800965a:	2a01      	cmp	r2, #1
 800965c:	d92a      	bls.n	80096b4 <ai_platform_inputs_get+0x1a0>
 800965e:	f240 4249 	movw	r2, #1097	; 0x449
 8009662:	4293      	cmp	r3, r2
 8009664:	d026      	beq.n	80096b4 <ai_platform_inputs_get+0x1a0>
 8009666:	4a5b      	ldr	r2, [pc, #364]	; (80097d4 <ai_platform_inputs_get+0x2c0>)
 8009668:	6813      	ldr	r3, [r2, #0]
 800966a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800966e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009672:	d02c      	beq.n	80096ce <ai_platform_inputs_get+0x1ba>
 8009674:	6813      	ldr	r3, [r2, #0]
 8009676:	f240 4183 	movw	r1, #1155	; 0x483
 800967a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800967e:	428b      	cmp	r3, r1
 8009680:	d073      	beq.n	800976a <ai_platform_inputs_get+0x256>
 8009682:	6813      	ldr	r3, [r2, #0]
 8009684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009688:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800968c:	f000 80ac 	beq.w	80097e8 <ai_platform_inputs_get+0x2d4>
 8009690:	6813      	ldr	r3, [r2, #0]
 8009692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009696:	2b00      	cmp	r3, #0
 8009698:	d129      	bne.n	80096ee <ai_platform_inputs_get+0x1da>
 800969a:	4a4f      	ldr	r2, [pc, #316]	; (80097d8 <ai_platform_inputs_get+0x2c4>)
 800969c:	2301      	movs	r3, #1
 800969e:	6093      	str	r3, [r2, #8]
 80096a0:	6893      	ldr	r3, [r2, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1fc      	bne.n	80096a0 <ai_platform_inputs_get+0x18c>
 80096a6:	494d      	ldr	r1, [pc, #308]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 80096a8:	4b4d      	ldr	r3, [pc, #308]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 80096aa:	6011      	str	r1, [r2, #0]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d01d      	beq.n	80096ee <ai_platform_inputs_get+0x1da>
 80096b2:	e7fe      	b.n	80096b2 <ai_platform_inputs_get+0x19e>
 80096b4:	4a48      	ldr	r2, [pc, #288]	; (80097d8 <ai_platform_inputs_get+0x2c4>)
 80096b6:	2301      	movs	r3, #1
 80096b8:	6093      	str	r3, [r2, #8]
 80096ba:	6893      	ldr	r3, [r2, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1fc      	bne.n	80096ba <ai_platform_inputs_get+0x1a6>
 80096c0:	4946      	ldr	r1, [pc, #280]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 80096c2:	4b47      	ldr	r3, [pc, #284]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 80096c4:	6011      	str	r1, [r2, #0]
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d010      	beq.n	80096ee <ai_platform_inputs_get+0x1da>
 80096cc:	e7fe      	b.n	80096cc <ai_platform_inputs_get+0x1b8>
 80096ce:	4a45      	ldr	r2, [pc, #276]	; (80097e4 <ai_platform_inputs_get+0x2d0>)
 80096d0:	2301      	movs	r3, #1
 80096d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80096d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1fb      	bne.n	80096d6 <ai_platform_inputs_get+0x1c2>
 80096de:	493f      	ldr	r1, [pc, #252]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 80096e0:	4b3f      	ldr	r3, [pc, #252]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 80096e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80096e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d113      	bne.n	8009716 <ai_platform_inputs_get+0x202>
 80096ee:	f7ff fd33 	bl	8009158 <_ai_platform_release_crc>
 80096f2:	2000      	movs	r0, #0
 80096f4:	b005      	add	sp, #20
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	4a37      	ldr	r2, [pc, #220]	; (80097d8 <ai_platform_inputs_get+0x2c4>)
 80096fc:	2301      	movs	r3, #1
 80096fe:	6093      	str	r3, [r2, #8]
 8009700:	6893      	ldr	r3, [r2, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1fc      	bne.n	8009700 <ai_platform_inputs_get+0x1ec>
 8009706:	4b35      	ldr	r3, [pc, #212]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	4b35      	ldr	r3, [pc, #212]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 800970c:	6812      	ldr	r2, [r2, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	f43f af3b 	beq.w	800958a <ai_platform_inputs_get+0x76>
 8009714:	e7fe      	b.n	8009714 <ai_platform_inputs_get+0x200>
 8009716:	e7fe      	b.n	8009716 <ai_platform_inputs_get+0x202>
 8009718:	4a32      	ldr	r2, [pc, #200]	; (80097e4 <ai_platform_inputs_get+0x2d0>)
 800971a:	2301      	movs	r3, #1
 800971c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009720:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1fb      	bne.n	8009720 <ai_platform_inputs_get+0x20c>
 8009728:	4b2c      	ldr	r3, [pc, #176]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 800972a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800972e:	4b2c      	ldr	r3, [pc, #176]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 8009730:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009734:	429a      	cmp	r2, r3
 8009736:	f43f af28 	beq.w	800958a <ai_platform_inputs_get+0x76>
 800973a:	e7fe      	b.n	800973a <ai_platform_inputs_get+0x226>
 800973c:	2400      	movs	r4, #0
 800973e:	2218      	movs	r2, #24
 8009740:	2111      	movs	r1, #17
 8009742:	f109 0010 	add.w	r0, r9, #16
 8009746:	f001 f97d 	bl	800aa44 <core_set_error>
 800974a:	4620      	mov	r0, r4
 800974c:	9b02      	ldr	r3, [sp, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0d0      	beq.n	80096f4 <ai_platform_inputs_get+0x1e0>
 8009752:	801c      	strh	r4, [r3, #0]
 8009754:	b005      	add	sp, #20
 8009756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800975e:	2c00      	cmp	r4, #0
 8009760:	d0ec      	beq.n	800973c <ai_platform_inputs_get+0x228>
 8009762:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009766:	6858      	ldr	r0, [r3, #4]
 8009768:	e7f0      	b.n	800974c <ai_platform_inputs_get+0x238>
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <ai_platform_inputs_get+0x2d0>)
 800976c:	2301      	movs	r3, #1
 800976e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009772:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1fb      	bne.n	8009772 <ai_platform_inputs_get+0x25e>
 800977a:	4918      	ldr	r1, [pc, #96]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 800977c:	4b18      	ldr	r3, [pc, #96]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 800977e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009782:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009786:	429a      	cmp	r2, r3
 8009788:	d0b1      	beq.n	80096ee <ai_platform_inputs_get+0x1da>
 800978a:	e7fe      	b.n	800978a <ai_platform_inputs_get+0x276>
 800978c:	4a15      	ldr	r2, [pc, #84]	; (80097e4 <ai_platform_inputs_get+0x2d0>)
 800978e:	2301      	movs	r3, #1
 8009790:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009794:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1fb      	bne.n	8009794 <ai_platform_inputs_get+0x280>
 800979c:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 800979e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80097a2:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 80097a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097a8:	429a      	cmp	r2, r3
 80097aa:	f43f aeee 	beq.w	800958a <ai_platform_inputs_get+0x76>
 80097ae:	e7fe      	b.n	80097ae <ai_platform_inputs_get+0x29a>
 80097b0:	4a09      	ldr	r2, [pc, #36]	; (80097d8 <ai_platform_inputs_get+0x2c4>)
 80097b2:	2301      	movs	r3, #1
 80097b4:	6093      	str	r3, [r2, #8]
 80097b6:	6893      	ldr	r3, [r2, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1fc      	bne.n	80097b6 <ai_platform_inputs_get+0x2a2>
 80097bc:	4b07      	ldr	r3, [pc, #28]	; (80097dc <ai_platform_inputs_get+0x2c8>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <ai_platform_inputs_get+0x2cc>)
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	f43f aee0 	beq.w	800958a <ai_platform_inputs_get+0x76>
 80097ca:	e7fe      	b.n	80097ca <ai_platform_inputs_get+0x2b6>
 80097cc:	a1c00100 	.word	0xa1c00100
 80097d0:	e0042000 	.word	0xe0042000
 80097d4:	5c001000 	.word	0x5c001000
 80097d8:	40023000 	.word	0x40023000
 80097dc:	f407a5c2 	.word	0xf407a5c2
 80097e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80097e4:	58024000 	.word	0x58024000
 80097e8:	4a0d      	ldr	r2, [pc, #52]	; (8009820 <ai_platform_inputs_get+0x30c>)
 80097ea:	2301      	movs	r3, #1
 80097ec:	6093      	str	r3, [r2, #8]
 80097ee:	6893      	ldr	r3, [r2, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1fc      	bne.n	80097ee <ai_platform_inputs_get+0x2da>
 80097f4:	490b      	ldr	r1, [pc, #44]	; (8009824 <ai_platform_inputs_get+0x310>)
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <ai_platform_inputs_get+0x314>)
 80097f8:	6011      	str	r1, [r2, #0]
 80097fa:	6812      	ldr	r2, [r2, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	f43f af76 	beq.w	80096ee <ai_platform_inputs_get+0x1da>
 8009802:	e7fe      	b.n	8009802 <ai_platform_inputs_get+0x2ee>
 8009804:	4a06      	ldr	r2, [pc, #24]	; (8009820 <ai_platform_inputs_get+0x30c>)
 8009806:	2301      	movs	r3, #1
 8009808:	6093      	str	r3, [r2, #8]
 800980a:	6893      	ldr	r3, [r2, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1fc      	bne.n	800980a <ai_platform_inputs_get+0x2f6>
 8009810:	4b04      	ldr	r3, [pc, #16]	; (8009824 <ai_platform_inputs_get+0x310>)
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <ai_platform_inputs_get+0x314>)
 8009816:	6812      	ldr	r2, [r2, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	f43f aeb6 	beq.w	800958a <ai_platform_inputs_get+0x76>
 800981e:	e7fe      	b.n	800981e <ai_platform_inputs_get+0x30a>
 8009820:	40023000 	.word	0x40023000
 8009824:	f407a5c2 	.word	0xf407a5c2
 8009828:	b5e8b5cd 	.word	0xb5e8b5cd

0800982c <ai_platform_outputs_get>:
 800982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	b085      	sub	sp, #20
 8009832:	9102      	str	r1, [sp, #8]
 8009834:	2800      	cmp	r0, #0
 8009836:	f000 808f 	beq.w	8009958 <ai_platform_outputs_get+0x12c>
 800983a:	4ba8      	ldr	r3, [pc, #672]	; (8009adc <ai_platform_outputs_get+0x2b0>)
 800983c:	4681      	mov	r9, r0
 800983e:	6802      	ldr	r2, [r0, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	f040 8089 	bne.w	8009958 <ai_platform_outputs_get+0x12c>
 8009846:	f7ff fc85 	bl	8009154 <_ai_platform_acquire_crc>
 800984a:	4ba5      	ldr	r3, [pc, #660]	; (8009ae0 <ai_platform_outputs_get+0x2b4>)
 800984c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009856:	189a      	adds	r2, r3, r2
 8009858:	2a01      	cmp	r2, #1
 800985a:	f240 80d6 	bls.w	8009a0a <ai_platform_outputs_get+0x1de>
 800985e:	f240 4249 	movw	r2, #1097	; 0x449
 8009862:	4293      	cmp	r3, r2
 8009864:	f000 80d1 	beq.w	8009a0a <ai_platform_outputs_get+0x1de>
 8009868:	4a9e      	ldr	r2, [pc, #632]	; (8009ae4 <ai_platform_outputs_get+0x2b8>)
 800986a:	6813      	ldr	r3, [r2, #0]
 800986c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009870:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009874:	f000 80d8 	beq.w	8009a28 <ai_platform_outputs_get+0x1fc>
 8009878:	6813      	ldr	r3, [r2, #0]
 800987a:	f240 4183 	movw	r1, #1155	; 0x483
 800987e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009882:	428b      	cmp	r3, r1
 8009884:	f000 8109 	beq.w	8009a9a <ai_platform_outputs_get+0x26e>
 8009888:	6813      	ldr	r3, [r2, #0]
 800988a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800988e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009892:	f000 813f 	beq.w	8009b14 <ai_platform_outputs_get+0x2e8>
 8009896:	6813      	ldr	r3, [r2, #0]
 8009898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 810e 	beq.w	8009abe <ai_platform_outputs_get+0x292>
 80098a2:	f7ff fc59 	bl	8009158 <_ai_platform_release_crc>
 80098a6:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	f240 80db 	bls.w	8009a66 <ai_platform_outputs_get+0x23a>
 80098b0:	2100      	movs	r1, #0
 80098b2:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80098b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80098ba:	460d      	mov	r5, r1
 80098bc:	4689      	mov	r9, r1
 80098be:	e016      	b.n	80098ee <ai_platform_outputs_get+0xc2>
 80098c0:	9a01      	ldr	r2, [sp, #4]
 80098c2:	2301      	movs	r3, #1
 80098c4:	f848 3002 	str.w	r3, [r8, r2]
 80098c8:	69b2      	ldr	r2, [r6, #24]
 80098ca:	f04f 0301 	mov.w	r3, #1
 80098ce:	6856      	ldr	r6, [r2, #4]
 80098d0:	3501      	adds	r5, #1
 80098d2:	f109 091c 	add.w	r9, r9, #28
 80098d6:	7523      	strb	r3, [r4, #20]
 80098d8:	2300      	movs	r3, #0
 80098da:	6962      	ldr	r2, [r4, #20]
 80098dc:	60a7      	str	r7, [r4, #8]
 80098de:	f36b 221f 	bfi	r2, fp, #8, #24
 80098e2:	6126      	str	r6, [r4, #16]
 80098e4:	61a1      	str	r1, [r4, #24]
 80098e6:	60e3      	str	r3, [r4, #12]
 80098e8:	6162      	str	r2, [r4, #20]
 80098ea:	e9c4 0c00 	strd	r0, ip, [r4]
 80098ee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80098f2:	b2ac      	uxth	r4, r5
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	f240 80a6 	bls.w	8009a4c <ai_platform_outputs_get+0x220>
 8009900:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 80a1 	beq.w	8009a4c <ai_platform_outputs_get+0x220>
 800990a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800990e:	2e00      	cmp	r6, #0
 8009910:	f000 809c 	beq.w	8009a4c <ai_platform_outputs_get+0x220>
 8009914:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009918:	69b2      	ldr	r2, [r6, #24]
 800991a:	68f1      	ldr	r1, [r6, #12]
 800991c:	6810      	ldr	r0, [r2, #0]
 800991e:	9100      	str	r1, [sp, #0]
 8009920:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8009924:	68b3      	ldr	r3, [r6, #8]
 8009926:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800992a:	444c      	add	r4, r9
 800992c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8009930:	f003 fd3a 	bl	800d3a8 <ai_array_to_buffer_fmt>
 8009934:	69b2      	ldr	r2, [r6, #24]
 8009936:	9900      	ldr	r1, [sp, #0]
 8009938:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800993c:	2f00      	cmp	r7, #0
 800993e:	d0c4      	beq.n	80098ca <ai_platform_outputs_get+0x9e>
 8009940:	2200      	movs	r2, #0
 8009942:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8009946:	6832      	ldr	r2, [r6, #0]
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	b112      	cbz	r2, 8009952 <ai_platform_outputs_get+0x126>
 800994c:	8852      	ldrh	r2, [r2, #2]
 800994e:	2a00      	cmp	r2, #0
 8009950:	d1b6      	bne.n	80098c0 <ai_platform_outputs_get+0x94>
 8009952:	69b2      	ldr	r2, [r6, #24]
 8009954:	2700      	movs	r7, #0
 8009956:	e7b8      	b.n	80098ca <ai_platform_outputs_get+0x9e>
 8009958:	f7ff fbfc 	bl	8009154 <_ai_platform_acquire_crc>
 800995c:	4b60      	ldr	r3, [pc, #384]	; (8009ae0 <ai_platform_outputs_get+0x2b4>)
 800995e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009968:	185a      	adds	r2, r3, r1
 800996a:	2a01      	cmp	r2, #1
 800996c:	d92a      	bls.n	80099c4 <ai_platform_outputs_get+0x198>
 800996e:	f240 4249 	movw	r2, #1097	; 0x449
 8009972:	4293      	cmp	r3, r2
 8009974:	d026      	beq.n	80099c4 <ai_platform_outputs_get+0x198>
 8009976:	4a5b      	ldr	r2, [pc, #364]	; (8009ae4 <ai_platform_outputs_get+0x2b8>)
 8009978:	6813      	ldr	r3, [r2, #0]
 800997a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800997e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009982:	d02c      	beq.n	80099de <ai_platform_outputs_get+0x1b2>
 8009984:	6813      	ldr	r3, [r2, #0]
 8009986:	f240 4183 	movw	r1, #1155	; 0x483
 800998a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800998e:	428b      	cmp	r3, r1
 8009990:	d072      	beq.n	8009a78 <ai_platform_outputs_get+0x24c>
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009998:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800999c:	f000 80ac 	beq.w	8009af8 <ai_platform_outputs_get+0x2cc>
 80099a0:	6813      	ldr	r3, [r2, #0]
 80099a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d129      	bne.n	80099fe <ai_platform_outputs_get+0x1d2>
 80099aa:	4a4f      	ldr	r2, [pc, #316]	; (8009ae8 <ai_platform_outputs_get+0x2bc>)
 80099ac:	2301      	movs	r3, #1
 80099ae:	6093      	str	r3, [r2, #8]
 80099b0:	6893      	ldr	r3, [r2, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1fc      	bne.n	80099b0 <ai_platform_outputs_get+0x184>
 80099b6:	494d      	ldr	r1, [pc, #308]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 80099b8:	4b4d      	ldr	r3, [pc, #308]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 80099ba:	6011      	str	r1, [r2, #0]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d01d      	beq.n	80099fe <ai_platform_outputs_get+0x1d2>
 80099c2:	e7fe      	b.n	80099c2 <ai_platform_outputs_get+0x196>
 80099c4:	4a48      	ldr	r2, [pc, #288]	; (8009ae8 <ai_platform_outputs_get+0x2bc>)
 80099c6:	2301      	movs	r3, #1
 80099c8:	6093      	str	r3, [r2, #8]
 80099ca:	6893      	ldr	r3, [r2, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1fc      	bne.n	80099ca <ai_platform_outputs_get+0x19e>
 80099d0:	4946      	ldr	r1, [pc, #280]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 80099d2:	4b47      	ldr	r3, [pc, #284]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d010      	beq.n	80099fe <ai_platform_outputs_get+0x1d2>
 80099dc:	e7fe      	b.n	80099dc <ai_platform_outputs_get+0x1b0>
 80099de:	4a45      	ldr	r2, [pc, #276]	; (8009af4 <ai_platform_outputs_get+0x2c8>)
 80099e0:	2301      	movs	r3, #1
 80099e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80099e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1fb      	bne.n	80099e6 <ai_platform_outputs_get+0x1ba>
 80099ee:	493f      	ldr	r1, [pc, #252]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 80099f0:	4b3f      	ldr	r3, [pc, #252]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 80099f2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80099f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d113      	bne.n	8009a26 <ai_platform_outputs_get+0x1fa>
 80099fe:	f7ff fbab 	bl	8009158 <_ai_platform_release_crc>
 8009a02:	2000      	movs	r0, #0
 8009a04:	b005      	add	sp, #20
 8009a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0a:	4a37      	ldr	r2, [pc, #220]	; (8009ae8 <ai_platform_outputs_get+0x2bc>)
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6093      	str	r3, [r2, #8]
 8009a10:	6893      	ldr	r3, [r2, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1fc      	bne.n	8009a10 <ai_platform_outputs_get+0x1e4>
 8009a16:	4b35      	ldr	r3, [pc, #212]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	4b35      	ldr	r3, [pc, #212]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 8009a1c:	6812      	ldr	r2, [r2, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	f43f af3f 	beq.w	80098a2 <ai_platform_outputs_get+0x76>
 8009a24:	e7fe      	b.n	8009a24 <ai_platform_outputs_get+0x1f8>
 8009a26:	e7fe      	b.n	8009a26 <ai_platform_outputs_get+0x1fa>
 8009a28:	4a32      	ldr	r2, [pc, #200]	; (8009af4 <ai_platform_outputs_get+0x2c8>)
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1fb      	bne.n	8009a30 <ai_platform_outputs_get+0x204>
 8009a38:	4b2c      	ldr	r3, [pc, #176]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 8009a3a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009a3e:	4b2c      	ldr	r3, [pc, #176]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 8009a40:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009a44:	429a      	cmp	r2, r3
 8009a46:	f43f af2c 	beq.w	80098a2 <ai_platform_outputs_get+0x76>
 8009a4a:	e7fe      	b.n	8009a4a <ai_platform_outputs_get+0x21e>
 8009a4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009a50:	b14c      	cbz	r4, 8009a66 <ai_platform_outputs_get+0x23a>
 8009a52:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009a56:	6858      	ldr	r0, [r3, #4]
 8009a58:	9b02      	ldr	r3, [sp, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0d2      	beq.n	8009a04 <ai_platform_outputs_get+0x1d8>
 8009a5e:	801c      	strh	r4, [r3, #0]
 8009a60:	b005      	add	sp, #20
 8009a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a66:	2400      	movs	r4, #0
 8009a68:	2218      	movs	r2, #24
 8009a6a:	2111      	movs	r1, #17
 8009a6c:	f109 0010 	add.w	r0, r9, #16
 8009a70:	f000 ffe8 	bl	800aa44 <core_set_error>
 8009a74:	4620      	mov	r0, r4
 8009a76:	e7ef      	b.n	8009a58 <ai_platform_outputs_get+0x22c>
 8009a78:	4a1e      	ldr	r2, [pc, #120]	; (8009af4 <ai_platform_outputs_get+0x2c8>)
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1fb      	bne.n	8009a80 <ai_platform_outputs_get+0x254>
 8009a88:	4918      	ldr	r1, [pc, #96]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 8009a8a:	4b19      	ldr	r3, [pc, #100]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 8009a8c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009a90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d0b2      	beq.n	80099fe <ai_platform_outputs_get+0x1d2>
 8009a98:	e7fe      	b.n	8009a98 <ai_platform_outputs_get+0x26c>
 8009a9a:	4a16      	ldr	r2, [pc, #88]	; (8009af4 <ai_platform_outputs_get+0x2c8>)
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009aa2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1fb      	bne.n	8009aa2 <ai_platform_outputs_get+0x276>
 8009aaa:	4b10      	ldr	r3, [pc, #64]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 8009aac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009ab0:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 8009ab2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	f43f aef3 	beq.w	80098a2 <ai_platform_outputs_get+0x76>
 8009abc:	e7fe      	b.n	8009abc <ai_platform_outputs_get+0x290>
 8009abe:	4a0a      	ldr	r2, [pc, #40]	; (8009ae8 <ai_platform_outputs_get+0x2bc>)
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	6093      	str	r3, [r2, #8]
 8009ac4:	6893      	ldr	r3, [r2, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1fc      	bne.n	8009ac4 <ai_platform_outputs_get+0x298>
 8009aca:	4b08      	ldr	r3, [pc, #32]	; (8009aec <ai_platform_outputs_get+0x2c0>)
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <ai_platform_outputs_get+0x2c4>)
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	f43f aee5 	beq.w	80098a2 <ai_platform_outputs_get+0x76>
 8009ad8:	e7fe      	b.n	8009ad8 <ai_platform_outputs_get+0x2ac>
 8009ada:	bf00      	nop
 8009adc:	a1c00100 	.word	0xa1c00100
 8009ae0:	e0042000 	.word	0xe0042000
 8009ae4:	5c001000 	.word	0x5c001000
 8009ae8:	40023000 	.word	0x40023000
 8009aec:	f407a5c2 	.word	0xf407a5c2
 8009af0:	b5e8b5cd 	.word	0xb5e8b5cd
 8009af4:	58024000 	.word	0x58024000
 8009af8:	4a0d      	ldr	r2, [pc, #52]	; (8009b30 <ai_platform_outputs_get+0x304>)
 8009afa:	2301      	movs	r3, #1
 8009afc:	6093      	str	r3, [r2, #8]
 8009afe:	6893      	ldr	r3, [r2, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1fc      	bne.n	8009afe <ai_platform_outputs_get+0x2d2>
 8009b04:	490b      	ldr	r1, [pc, #44]	; (8009b34 <ai_platform_outputs_get+0x308>)
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <ai_platform_outputs_get+0x30c>)
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	6812      	ldr	r2, [r2, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	f43f af76 	beq.w	80099fe <ai_platform_outputs_get+0x1d2>
 8009b12:	e7fe      	b.n	8009b12 <ai_platform_outputs_get+0x2e6>
 8009b14:	4a06      	ldr	r2, [pc, #24]	; (8009b30 <ai_platform_outputs_get+0x304>)
 8009b16:	2301      	movs	r3, #1
 8009b18:	6093      	str	r3, [r2, #8]
 8009b1a:	6893      	ldr	r3, [r2, #8]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1fc      	bne.n	8009b1a <ai_platform_outputs_get+0x2ee>
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <ai_platform_outputs_get+0x308>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <ai_platform_outputs_get+0x30c>)
 8009b26:	6812      	ldr	r2, [r2, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	f43f aeba 	beq.w	80098a2 <ai_platform_outputs_get+0x76>
 8009b2e:	e7fe      	b.n	8009b2e <ai_platform_outputs_get+0x302>
 8009b30:	40023000 	.word	0x40023000
 8009b34:	f407a5c2 	.word	0xf407a5c2
 8009b38:	b5e8b5cd 	.word	0xb5e8b5cd

08009b3c <ai_platform_network_create>:
 8009b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b40:	b083      	sub	sp, #12
 8009b42:	4604      	mov	r4, r0
 8009b44:	4615      	mov	r5, r2
 8009b46:	461e      	mov	r6, r3
 8009b48:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8009b4c:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8009b50:	f7ff fb00 	bl	8009154 <_ai_platform_acquire_crc>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f000 80bd 	beq.w	8009cd4 <ai_platform_network_create+0x198>
 8009b5a:	4ba5      	ldr	r3, [pc, #660]	; (8009df0 <ai_platform_network_create+0x2b4>)
 8009b5c:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8009b60:	4601      	mov	r1, r0
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b68:	eb03 020c 	add.w	r2, r3, ip
 8009b6c:	2a01      	cmp	r2, #1
 8009b6e:	f240 80a8 	bls.w	8009cc2 <ai_platform_network_create+0x186>
 8009b72:	f240 4249 	movw	r2, #1097	; 0x449
 8009b76:	4293      	cmp	r3, r2
 8009b78:	f000 80a3 	beq.w	8009cc2 <ai_platform_network_create+0x186>
 8009b7c:	4a9d      	ldr	r2, [pc, #628]	; (8009df4 <ai_platform_network_create+0x2b8>)
 8009b7e:	6813      	ldr	r3, [r2, #0]
 8009b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b84:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009b88:	f000 80b9 	beq.w	8009cfe <ai_platform_network_create+0x1c2>
 8009b8c:	6813      	ldr	r3, [r2, #0]
 8009b8e:	f240 4c83 	movw	ip, #1155	; 0x483
 8009b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b96:	4563      	cmp	r3, ip
 8009b98:	f000 80a1 	beq.w	8009cde <ai_platform_network_create+0x1a2>
 8009b9c:	6813      	ldr	r3, [r2, #0]
 8009b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ba2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009ba6:	f000 8153 	beq.w	8009e50 <ai_platform_network_create+0x314>
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f040 808d 	bne.w	8009cd0 <ai_platform_network_create+0x194>
 8009bb6:	4a90      	ldr	r2, [pc, #576]	; (8009df8 <ai_platform_network_create+0x2bc>)
 8009bb8:	2318      	movs	r3, #24
 8009bba:	6093      	str	r3, [r2, #8]
 8009bbc:	6893      	ldr	r3, [r2, #8]
 8009bbe:	2b18      	cmp	r3, #24
 8009bc0:	f040 8086 	bne.w	8009cd0 <ai_platform_network_create+0x194>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	6093      	str	r3, [r2, #8]
 8009bc8:	6893      	ldr	r3, [r2, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1fc      	bne.n	8009bc8 <ai_platform_network_create+0x8c>
 8009bce:	4608      	mov	r0, r1
 8009bd0:	f7ff fac2 	bl	8009158 <_ai_platform_release_crc>
 8009bd4:	f7ff fabe 	bl	8009154 <_ai_platform_acquire_crc>
 8009bd8:	4b85      	ldr	r3, [pc, #532]	; (8009df0 <ai_platform_network_create+0x2b4>)
 8009bda:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009be4:	189a      	adds	r2, r3, r2
 8009be6:	2a01      	cmp	r2, #1
 8009be8:	f240 809f 	bls.w	8009d2a <ai_platform_network_create+0x1ee>
 8009bec:	f240 4249 	movw	r2, #1097	; 0x449
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	f000 809a 	beq.w	8009d2a <ai_platform_network_create+0x1ee>
 8009bf6:	4a7f      	ldr	r2, [pc, #508]	; (8009df4 <ai_platform_network_create+0x2b8>)
 8009bf8:	6813      	ldr	r3, [r2, #0]
 8009bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bfe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009c02:	f000 80a0 	beq.w	8009d46 <ai_platform_network_create+0x20a>
 8009c06:	6813      	ldr	r3, [r2, #0]
 8009c08:	f240 4183 	movw	r1, #1155	; 0x483
 8009c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c10:	428b      	cmp	r3, r1
 8009c12:	f000 80bf 	beq.w	8009d94 <ai_platform_network_create+0x258>
 8009c16:	6813      	ldr	r3, [r2, #0]
 8009c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c1c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009c20:	f000 8123 	beq.w	8009e6a <ai_platform_network_create+0x32e>
 8009c24:	6813      	ldr	r3, [r2, #0]
 8009c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 80c4 	beq.w	8009db8 <ai_platform_network_create+0x27c>
 8009c30:	f7ff fa92 	bl	8009158 <_ai_platform_release_crc>
 8009c34:	2c00      	cmp	r4, #0
 8009c36:	f000 80aa 	beq.w	8009d8e <ai_platform_network_create+0x252>
 8009c3a:	4b70      	ldr	r3, [pc, #448]	; (8009dfc <ai_platform_network_create+0x2c0>)
 8009c3c:	602b      	str	r3, [r5, #0]
 8009c3e:	6025      	str	r5, [r4, #0]
 8009c40:	f000 fef8 	bl	800aa34 <core_init>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f000 8090 	beq.w	8009d6a <ai_platform_network_create+0x22e>
 8009c4a:	f7ff fa83 	bl	8009154 <_ai_platform_acquire_crc>
 8009c4e:	4b68      	ldr	r3, [pc, #416]	; (8009df0 <ai_platform_network_create+0x2b4>)
 8009c50:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c5a:	185a      	adds	r2, r3, r1
 8009c5c:	2a01      	cmp	r2, #1
 8009c5e:	f240 80b9 	bls.w	8009dd4 <ai_platform_network_create+0x298>
 8009c62:	f240 4249 	movw	r2, #1097	; 0x449
 8009c66:	4293      	cmp	r3, r2
 8009c68:	f000 80b4 	beq.w	8009dd4 <ai_platform_network_create+0x298>
 8009c6c:	4a61      	ldr	r2, [pc, #388]	; (8009df4 <ai_platform_network_create+0x2b8>)
 8009c6e:	6813      	ldr	r3, [r2, #0]
 8009c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c74:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009c78:	f000 80c8 	beq.w	8009e0c <ai_platform_network_create+0x2d0>
 8009c7c:	6813      	ldr	r3, [r2, #0]
 8009c7e:	f240 4183 	movw	r1, #1155	; 0x483
 8009c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c86:	428b      	cmp	r3, r1
 8009c88:	f000 8107 	beq.w	8009e9a <ai_platform_network_create+0x35e>
 8009c8c:	6813      	ldr	r3, [r2, #0]
 8009c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c92:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009c96:	f000 8111 	beq.w	8009ebc <ai_platform_network_create+0x380>
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f040 80c3 	bne.w	8009e2c <ai_platform_network_create+0x2f0>
 8009ca6:	4b54      	ldr	r3, [pc, #336]	; (8009df8 <ai_platform_network_create+0x2bc>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	609a      	str	r2, [r3, #8]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	d1fc      	bne.n	8009cac <ai_platform_network_create+0x170>
 8009cb2:	4a53      	ldr	r2, [pc, #332]	; (8009e00 <ai_platform_network_create+0x2c4>)
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	4b52      	ldr	r3, [pc, #328]	; (8009e04 <ai_platform_network_create+0x2c8>)
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	f000 80b6 	beq.w	8009e2c <ai_platform_network_create+0x2f0>
 8009cc0:	e7fe      	b.n	8009cc0 <ai_platform_network_create+0x184>
 8009cc2:	4b4d      	ldr	r3, [pc, #308]	; (8009df8 <ai_platform_network_create+0x2bc>)
 8009cc4:	2218      	movs	r2, #24
 8009cc6:	609a      	str	r2, [r3, #8]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	2a18      	cmp	r2, #24
 8009ccc:	d027      	beq.n	8009d1e <ai_platform_network_create+0x1e2>
 8009cce:	4608      	mov	r0, r1
 8009cd0:	f7ff fa42 	bl	8009158 <_ai_platform_release_crc>
 8009cd4:	f244 1033 	movw	r0, #16691	; 0x4133
 8009cd8:	b003      	add	sp, #12
 8009cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cde:	4a4a      	ldr	r2, [pc, #296]	; (8009e08 <ai_platform_network_create+0x2cc>)
 8009ce0:	2318      	movs	r3, #24
 8009ce2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009ce6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009cea:	2b18      	cmp	r3, #24
 8009cec:	d1f0      	bne.n	8009cd0 <ai_platform_network_create+0x194>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009cf4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1fb      	bne.n	8009cf4 <ai_platform_network_create+0x1b8>
 8009cfc:	e767      	b.n	8009bce <ai_platform_network_create+0x92>
 8009cfe:	4a42      	ldr	r2, [pc, #264]	; (8009e08 <ai_platform_network_create+0x2cc>)
 8009d00:	2318      	movs	r3, #24
 8009d02:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009d06:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009d0a:	2b18      	cmp	r3, #24
 8009d0c:	d1e0      	bne.n	8009cd0 <ai_platform_network_create+0x194>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009d14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1fb      	bne.n	8009d14 <ai_platform_network_create+0x1d8>
 8009d1c:	e757      	b.n	8009bce <ai_platform_network_create+0x92>
 8009d1e:	2201      	movs	r2, #1
 8009d20:	609a      	str	r2, [r3, #8]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	d1fc      	bne.n	8009d22 <ai_platform_network_create+0x1e6>
 8009d28:	e751      	b.n	8009bce <ai_platform_network_create+0x92>
 8009d2a:	4a33      	ldr	r2, [pc, #204]	; (8009df8 <ai_platform_network_create+0x2bc>)
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	6093      	str	r3, [r2, #8]
 8009d30:	6891      	ldr	r1, [r2, #8]
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d1fc      	bne.n	8009d30 <ai_platform_network_create+0x1f4>
 8009d36:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <ai_platform_network_create+0x2c4>)
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	4b32      	ldr	r3, [pc, #200]	; (8009e04 <ai_platform_network_create+0x2c8>)
 8009d3c:	6812      	ldr	r2, [r2, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	f43f af76 	beq.w	8009c30 <ai_platform_network_create+0xf4>
 8009d44:	e7fe      	b.n	8009d44 <ai_platform_network_create+0x208>
 8009d46:	4a30      	ldr	r2, [pc, #192]	; (8009e08 <ai_platform_network_create+0x2cc>)
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009d4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1fb      	bne.n	8009d4e <ai_platform_network_create+0x212>
 8009d56:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <ai_platform_network_create+0x2c4>)
 8009d58:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009d5c:	4b29      	ldr	r3, [pc, #164]	; (8009e04 <ai_platform_network_create+0x2c8>)
 8009d5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009d62:	429a      	cmp	r2, r3
 8009d64:	f43f af64 	beq.w	8009c30 <ai_platform_network_create+0xf4>
 8009d68:	e7fe      	b.n	8009d68 <ai_platform_network_create+0x22c>
 8009d6a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	2410      	movs	r4, #16
 8009d74:	4642      	mov	r2, r8
 8009d76:	4639      	mov	r1, r7
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f003 fbb9 	bl	800d4f0 <ai_version_get>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2000      	movs	r0, #0
 8009d82:	64ab      	str	r3, [r5, #72]	; 0x48
 8009d84:	f369 0007 	bfi	r0, r9, #0, #8
 8009d88:	f364 201f 	bfi	r0, r4, #8, #24
 8009d8c:	e7a4      	b.n	8009cd8 <ai_platform_network_create+0x19c>
 8009d8e:	f241 0010 	movw	r0, #4112	; 0x1010
 8009d92:	e7a1      	b.n	8009cd8 <ai_platform_network_create+0x19c>
 8009d94:	4a1c      	ldr	r2, [pc, #112]	; (8009e08 <ai_platform_network_create+0x2cc>)
 8009d96:	2301      	movs	r3, #1
 8009d98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009d9c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1fb      	bne.n	8009d9c <ai_platform_network_create+0x260>
 8009da4:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <ai_platform_network_create+0x2c4>)
 8009da6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009daa:	4b16      	ldr	r3, [pc, #88]	; (8009e04 <ai_platform_network_create+0x2c8>)
 8009dac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009db0:	429a      	cmp	r2, r3
 8009db2:	f43f af3d 	beq.w	8009c30 <ai_platform_network_create+0xf4>
 8009db6:	e7fe      	b.n	8009db6 <ai_platform_network_create+0x27a>
 8009db8:	4a0f      	ldr	r2, [pc, #60]	; (8009df8 <ai_platform_network_create+0x2bc>)
 8009dba:	2301      	movs	r3, #1
 8009dbc:	6093      	str	r3, [r2, #8]
 8009dbe:	6893      	ldr	r3, [r2, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1fc      	bne.n	8009dbe <ai_platform_network_create+0x282>
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <ai_platform_network_create+0x2c4>)
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	4b0e      	ldr	r3, [pc, #56]	; (8009e04 <ai_platform_network_create+0x2c8>)
 8009dca:	6812      	ldr	r2, [r2, #0]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	f43f af2f 	beq.w	8009c30 <ai_platform_network_create+0xf4>
 8009dd2:	e7fe      	b.n	8009dd2 <ai_platform_network_create+0x296>
 8009dd4:	4a08      	ldr	r2, [pc, #32]	; (8009df8 <ai_platform_network_create+0x2bc>)
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	6093      	str	r3, [r2, #8]
 8009dda:	6893      	ldr	r3, [r2, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1fc      	bne.n	8009dda <ai_platform_network_create+0x29e>
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <ai_platform_network_create+0x2c4>)
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	4b07      	ldr	r3, [pc, #28]	; (8009e04 <ai_platform_network_create+0x2c8>)
 8009de6:	6812      	ldr	r2, [r2, #0]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d01f      	beq.n	8009e2c <ai_platform_network_create+0x2f0>
 8009dec:	e7fe      	b.n	8009dec <ai_platform_network_create+0x2b0>
 8009dee:	bf00      	nop
 8009df0:	e0042000 	.word	0xe0042000
 8009df4:	5c001000 	.word	0x5c001000
 8009df8:	40023000 	.word	0x40023000
 8009dfc:	a1c00100 	.word	0xa1c00100
 8009e00:	f407a5c2 	.word	0xf407a5c2
 8009e04:	b5e8b5cd 	.word	0xb5e8b5cd
 8009e08:	58024000 	.word	0x58024000
 8009e0c:	4a33      	ldr	r2, [pc, #204]	; (8009edc <ai_platform_network_create+0x3a0>)
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009e14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1fb      	bne.n	8009e14 <ai_platform_network_create+0x2d8>
 8009e1c:	4b30      	ldr	r3, [pc, #192]	; (8009ee0 <ai_platform_network_create+0x3a4>)
 8009e1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009e22:	4b30      	ldr	r3, [pc, #192]	; (8009ee4 <ai_platform_network_create+0x3a8>)
 8009e24:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d12c      	bne.n	8009e86 <ai_platform_network_create+0x34a>
 8009e2c:	f7ff f994 	bl	8009158 <_ai_platform_release_crc>
 8009e30:	2200      	movs	r2, #0
 8009e32:	4639      	mov	r1, r7
 8009e34:	4630      	mov	r0, r6
 8009e36:	f003 fb5b 	bl	800d4f0 <ai_version_get>
 8009e3a:	4681      	mov	r9, r0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2105      	movs	r1, #5
 8009e40:	2001      	movs	r0, #1
 8009e42:	f003 fb55 	bl	800d4f0 <ai_version_get>
 8009e46:	4581      	cmp	r9, r0
 8009e48:	d01e      	beq.n	8009e88 <ai_platform_network_create+0x34c>
 8009e4a:	f04f 0901 	mov.w	r9, #1
 8009e4e:	e78e      	b.n	8009d6e <ai_platform_network_create+0x232>
 8009e50:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <ai_platform_network_create+0x3ac>)
 8009e52:	2218      	movs	r2, #24
 8009e54:	609a      	str	r2, [r3, #8]
 8009e56:	689a      	ldr	r2, [r3, #8]
 8009e58:	2a18      	cmp	r2, #24
 8009e5a:	f47f af39 	bne.w	8009cd0 <ai_platform_network_create+0x194>
 8009e5e:	2201      	movs	r2, #1
 8009e60:	609a      	str	r2, [r3, #8]
 8009e62:	689a      	ldr	r2, [r3, #8]
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	d1fc      	bne.n	8009e62 <ai_platform_network_create+0x326>
 8009e68:	e6b1      	b.n	8009bce <ai_platform_network_create+0x92>
 8009e6a:	4a1f      	ldr	r2, [pc, #124]	; (8009ee8 <ai_platform_network_create+0x3ac>)
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	6093      	str	r3, [r2, #8]
 8009e70:	6893      	ldr	r3, [r2, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1fc      	bne.n	8009e70 <ai_platform_network_create+0x334>
 8009e76:	4b1a      	ldr	r3, [pc, #104]	; (8009ee0 <ai_platform_network_create+0x3a4>)
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <ai_platform_network_create+0x3a8>)
 8009e7c:	6812      	ldr	r2, [r2, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	f43f aed6 	beq.w	8009c30 <ai_platform_network_create+0xf4>
 8009e84:	e7fe      	b.n	8009e84 <ai_platform_network_create+0x348>
 8009e86:	e7fe      	b.n	8009e86 <ai_platform_network_create+0x34a>
 8009e88:	4b18      	ldr	r3, [pc, #96]	; (8009eec <ai_platform_network_create+0x3b0>)
 8009e8a:	a801      	add	r0, sp, #4
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	f000 fde5 	bl	800aa5c <ai_check_custom_types>
 8009e92:	b300      	cbz	r0, 8009ed6 <ai_platform_network_create+0x39a>
 8009e94:	2400      	movs	r4, #0
 8009e96:	46a1      	mov	r9, r4
 8009e98:	e76c      	b.n	8009d74 <ai_platform_network_create+0x238>
 8009e9a:	4b10      	ldr	r3, [pc, #64]	; (8009edc <ai_platform_network_create+0x3a0>)
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009ea2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	d1fb      	bne.n	8009ea2 <ai_platform_network_create+0x366>
 8009eaa:	4a0d      	ldr	r2, [pc, #52]	; (8009ee0 <ai_platform_network_create+0x3a4>)
 8009eac:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009eb0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009eb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <ai_platform_network_create+0x3a8>)
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d0b8      	beq.n	8009e2c <ai_platform_network_create+0x2f0>
 8009eba:	e7fe      	b.n	8009eba <ai_platform_network_create+0x37e>
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <ai_platform_network_create+0x3ac>)
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	609a      	str	r2, [r3, #8]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	d1fc      	bne.n	8009ec2 <ai_platform_network_create+0x386>
 8009ec8:	4a05      	ldr	r2, [pc, #20]	; (8009ee0 <ai_platform_network_create+0x3a4>)
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <ai_platform_network_create+0x3a8>)
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d0ab      	beq.n	8009e2c <ai_platform_network_create+0x2f0>
 8009ed4:	e7fe      	b.n	8009ed4 <ai_platform_network_create+0x398>
 8009ed6:	f04f 0902 	mov.w	r9, #2
 8009eda:	e748      	b.n	8009d6e <ai_platform_network_create+0x232>
 8009edc:	58024000 	.word	0x58024000
 8009ee0:	f407a5c2 	.word	0xf407a5c2
 8009ee4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ee8:	40023000 	.word	0x40023000
 8009eec:	84048403 	.word	0x84048403

08009ef0 <ai_platform_network_init>:
 8009ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d052      	beq.n	8009f9e <ai_platform_network_init+0xae>
 8009ef8:	4bab      	ldr	r3, [pc, #684]	; (800a1a8 <ai_platform_network_init+0x2b8>)
 8009efa:	4604      	mov	r4, r0
 8009efc:	6802      	ldr	r2, [r0, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d14d      	bne.n	8009f9e <ai_platform_network_init+0xae>
 8009f02:	460d      	mov	r5, r1
 8009f04:	f7ff f926 	bl	8009154 <_ai_platform_acquire_crc>
 8009f08:	4ba8      	ldr	r3, [pc, #672]	; (800a1ac <ai_platform_network_init+0x2bc>)
 8009f0a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f14:	189a      	adds	r2, r3, r2
 8009f16:	2a01      	cmp	r2, #1
 8009f18:	f240 809b 	bls.w	800a052 <ai_platform_network_init+0x162>
 8009f1c:	f240 4249 	movw	r2, #1097	; 0x449
 8009f20:	4293      	cmp	r3, r2
 8009f22:	f000 8096 	beq.w	800a052 <ai_platform_network_init+0x162>
 8009f26:	4aa2      	ldr	r2, [pc, #648]	; (800a1b0 <ai_platform_network_init+0x2c0>)
 8009f28:	6813      	ldr	r3, [r2, #0]
 8009f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f2e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009f32:	f000 809d 	beq.w	800a070 <ai_platform_network_init+0x180>
 8009f36:	6813      	ldr	r3, [r2, #0]
 8009f38:	f240 4183 	movw	r1, #1155	; 0x483
 8009f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f40:	428b      	cmp	r3, r1
 8009f42:	f000 80e4 	beq.w	800a10e <ai_platform_network_init+0x21e>
 8009f46:	6813      	ldr	r3, [r2, #0]
 8009f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f4c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009f50:	f000 811b 	beq.w	800a18a <ai_platform_network_init+0x29a>
 8009f54:	6813      	ldr	r3, [r2, #0]
 8009f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 80f9 	beq.w	800a152 <ai_platform_network_init+0x262>
 8009f60:	f7ff f8fa 	bl	8009158 <_ai_platform_release_crc>
 8009f64:	2d00      	cmp	r5, #0
 8009f66:	f000 8147 	beq.w	800a1f8 <ai_platform_network_init+0x308>
 8009f6a:	4b92      	ldr	r3, [pc, #584]	; (800a1b4 <ai_platform_network_init+0x2c4>)
 8009f6c:	682a      	ldr	r2, [r5, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	f040 8090 	bne.w	800a094 <ai_platform_network_init+0x1a4>
 8009f74:	692b      	ldr	r3, [r5, #16]
 8009f76:	89ae      	ldrh	r6, [r5, #12]
 8009f78:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8009f7c:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8009f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f82:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8009f86:	2303      	movs	r3, #3
 8009f88:	84a6      	strh	r6, [r4, #36]	; 0x24
 8009f8a:	4626      	mov	r6, r4
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8009f92:	60e3      	str	r3, [r4, #12]
 8009f94:	f000 fd8a 	bl	800aaac <ai_layers_init_all>
 8009f98:	4630      	mov	r0, r6
 8009f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9e:	f7ff f8d9 	bl	8009154 <_ai_platform_acquire_crc>
 8009fa2:	4b82      	ldr	r3, [pc, #520]	; (800a1ac <ai_platform_network_init+0x2bc>)
 8009fa4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fae:	185a      	adds	r2, r3, r1
 8009fb0:	2a01      	cmp	r2, #1
 8009fb2:	d92b      	bls.n	800a00c <ai_platform_network_init+0x11c>
 8009fb4:	f240 4249 	movw	r2, #1097	; 0x449
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d027      	beq.n	800a00c <ai_platform_network_init+0x11c>
 8009fbc:	4a7c      	ldr	r2, [pc, #496]	; (800a1b0 <ai_platform_network_init+0x2c0>)
 8009fbe:	6813      	ldr	r3, [r2, #0]
 8009fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fc4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009fc8:	d02d      	beq.n	800a026 <ai_platform_network_init+0x136>
 8009fca:	6813      	ldr	r3, [r2, #0]
 8009fcc:	f240 4183 	movw	r1, #1155	; 0x483
 8009fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fd4:	428b      	cmp	r3, r1
 8009fd6:	f000 8089 	beq.w	800a0ec <ai_platform_network_init+0x1fc>
 8009fda:	6813      	ldr	r3, [r2, #0]
 8009fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fe0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009fe4:	f000 80c3 	beq.w	800a16e <ai_platform_network_init+0x27e>
 8009fe8:	6813      	ldr	r3, [r2, #0]
 8009fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d129      	bne.n	800a046 <ai_platform_network_init+0x156>
 8009ff2:	4a71      	ldr	r2, [pc, #452]	; (800a1b8 <ai_platform_network_init+0x2c8>)
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	6093      	str	r3, [r2, #8]
 8009ff8:	6893      	ldr	r3, [r2, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1fc      	bne.n	8009ff8 <ai_platform_network_init+0x108>
 8009ffe:	496f      	ldr	r1, [pc, #444]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a000:	4b6f      	ldr	r3, [pc, #444]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a002:	6011      	str	r1, [r2, #0]
 800a004:	6812      	ldr	r2, [r2, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d01d      	beq.n	800a046 <ai_platform_network_init+0x156>
 800a00a:	e7fe      	b.n	800a00a <ai_platform_network_init+0x11a>
 800a00c:	4a6a      	ldr	r2, [pc, #424]	; (800a1b8 <ai_platform_network_init+0x2c8>)
 800a00e:	2301      	movs	r3, #1
 800a010:	6093      	str	r3, [r2, #8]
 800a012:	6893      	ldr	r3, [r2, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1fc      	bne.n	800a012 <ai_platform_network_init+0x122>
 800a018:	4968      	ldr	r1, [pc, #416]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a01a:	4b69      	ldr	r3, [pc, #420]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a01c:	6011      	str	r1, [r2, #0]
 800a01e:	6812      	ldr	r2, [r2, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d010      	beq.n	800a046 <ai_platform_network_init+0x156>
 800a024:	e7fe      	b.n	800a024 <ai_platform_network_init+0x134>
 800a026:	4a67      	ldr	r2, [pc, #412]	; (800a1c4 <ai_platform_network_init+0x2d4>)
 800a028:	2301      	movs	r3, #1
 800a02a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a02e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1fb      	bne.n	800a02e <ai_platform_network_init+0x13e>
 800a036:	4961      	ldr	r1, [pc, #388]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a038:	4b61      	ldr	r3, [pc, #388]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a03a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a03e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a042:	429a      	cmp	r2, r3
 800a044:	d113      	bne.n	800a06e <ai_platform_network_init+0x17e>
 800a046:	2600      	movs	r6, #0
 800a048:	f7ff f886 	bl	8009158 <_ai_platform_release_crc>
 800a04c:	4630      	mov	r0, r6
 800a04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a052:	4a59      	ldr	r2, [pc, #356]	; (800a1b8 <ai_platform_network_init+0x2c8>)
 800a054:	2301      	movs	r3, #1
 800a056:	6093      	str	r3, [r2, #8]
 800a058:	6893      	ldr	r3, [r2, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1fc      	bne.n	800a058 <ai_platform_network_init+0x168>
 800a05e:	4b57      	ldr	r3, [pc, #348]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	4b57      	ldr	r3, [pc, #348]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a064:	6812      	ldr	r2, [r2, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	f43f af7a 	beq.w	8009f60 <ai_platform_network_init+0x70>
 800a06c:	e7fe      	b.n	800a06c <ai_platform_network_init+0x17c>
 800a06e:	e7fe      	b.n	800a06e <ai_platform_network_init+0x17e>
 800a070:	4a54      	ldr	r2, [pc, #336]	; (800a1c4 <ai_platform_network_init+0x2d4>)
 800a072:	2301      	movs	r3, #1
 800a074:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a078:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1fb      	bne.n	800a078 <ai_platform_network_init+0x188>
 800a080:	4b4e      	ldr	r3, [pc, #312]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a082:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a086:	4b4e      	ldr	r3, [pc, #312]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a088:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a08c:	429a      	cmp	r2, r3
 800a08e:	f43f af67 	beq.w	8009f60 <ai_platform_network_init+0x70>
 800a092:	e7fe      	b.n	800a092 <ai_platform_network_init+0x1a2>
 800a094:	2101      	movs	r1, #1
 800a096:	4628      	mov	r0, r5
 800a098:	f105 081c 	add.w	r8, r5, #28
 800a09c:	686e      	ldr	r6, [r5, #4]
 800a09e:	f7ff f80b 	bl	80090b8 <ai_buffer_get_size>
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a0ac:	f7ff f804 	bl	80090b8 <ai_buffer_get_size>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	d13e      	bne.n	800a132 <ai_platform_network_init+0x242>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f000 808e 	beq.w	800a1d6 <ai_platform_network_init+0x2e6>
 800a0ba:	f1b9 0f00 	cmp.w	r9, #0
 800a0be:	f000 8094 	beq.w	800a1ea <ai_platform_network_init+0x2fa>
 800a0c2:	f04f 0c01 	mov.w	ip, #1
 800a0c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a0c8:	2600      	movs	r6, #0
 800a0ca:	83e7      	strh	r7, [r4, #30]
 800a0cc:	4563      	cmp	r3, ip
 800a0ce:	83a6      	strh	r6, [r4, #28]
 800a0d0:	d37a      	bcc.n	800a1c8 <ai_platform_network_init+0x2d8>
 800a0d2:	f1bc 0f00 	cmp.w	ip, #0
 800a0d6:	f000 809c 	beq.w	800a212 <ai_platform_network_init+0x322>
 800a0da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a0dc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800a0e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0e2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a0e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a0ea:	e74c      	b.n	8009f86 <ai_platform_network_init+0x96>
 800a0ec:	4a35      	ldr	r2, [pc, #212]	; (800a1c4 <ai_platform_network_init+0x2d4>)
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a0f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1fb      	bne.n	800a0f4 <ai_platform_network_init+0x204>
 800a0fc:	492f      	ldr	r1, [pc, #188]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a0fe:	4b30      	ldr	r3, [pc, #192]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a100:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a104:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a108:	429a      	cmp	r2, r3
 800a10a:	d09c      	beq.n	800a046 <ai_platform_network_init+0x156>
 800a10c:	e7fe      	b.n	800a10c <ai_platform_network_init+0x21c>
 800a10e:	4a2d      	ldr	r2, [pc, #180]	; (800a1c4 <ai_platform_network_init+0x2d4>)
 800a110:	2301      	movs	r3, #1
 800a112:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a116:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1fb      	bne.n	800a116 <ai_platform_network_init+0x226>
 800a11e:	4b27      	ldr	r3, [pc, #156]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a120:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a124:	4b26      	ldr	r3, [pc, #152]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a126:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f43f af18 	beq.w	8009f60 <ai_platform_network_init+0x70>
 800a130:	e7fe      	b.n	800a130 <ai_platform_network_init+0x240>
 800a132:	2800      	cmp	r0, #0
 800a134:	d153      	bne.n	800a1de <ai_platform_network_init+0x2ee>
 800a136:	4680      	mov	r8, r0
 800a138:	4684      	mov	ip, r0
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d063      	beq.n	800a206 <ai_platform_network_init+0x316>
 800a13e:	8be6      	ldrh	r6, [r4, #30]
 800a140:	2e00      	cmp	r6, #0
 800a142:	d168      	bne.n	800a216 <ai_platform_network_init+0x326>
 800a144:	2212      	movs	r2, #18
 800a146:	2116      	movs	r1, #22
 800a148:	f104 0010 	add.w	r0, r4, #16
 800a14c:	f000 fc7a 	bl	800aa44 <core_set_error>
 800a150:	e77c      	b.n	800a04c <ai_platform_network_init+0x15c>
 800a152:	4a19      	ldr	r2, [pc, #100]	; (800a1b8 <ai_platform_network_init+0x2c8>)
 800a154:	2301      	movs	r3, #1
 800a156:	6093      	str	r3, [r2, #8]
 800a158:	6893      	ldr	r3, [r2, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1fc      	bne.n	800a158 <ai_platform_network_init+0x268>
 800a15e:	4b17      	ldr	r3, [pc, #92]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	4b17      	ldr	r3, [pc, #92]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	f43f aefa 	beq.w	8009f60 <ai_platform_network_init+0x70>
 800a16c:	e7fe      	b.n	800a16c <ai_platform_network_init+0x27c>
 800a16e:	4a12      	ldr	r2, [pc, #72]	; (800a1b8 <ai_platform_network_init+0x2c8>)
 800a170:	2301      	movs	r3, #1
 800a172:	6093      	str	r3, [r2, #8]
 800a174:	6893      	ldr	r3, [r2, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1fc      	bne.n	800a174 <ai_platform_network_init+0x284>
 800a17a:	4910      	ldr	r1, [pc, #64]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a17c:	4b10      	ldr	r3, [pc, #64]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a17e:	6011      	str	r1, [r2, #0]
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	f43f af5f 	beq.w	800a046 <ai_platform_network_init+0x156>
 800a188:	e7fe      	b.n	800a188 <ai_platform_network_init+0x298>
 800a18a:	4a0b      	ldr	r2, [pc, #44]	; (800a1b8 <ai_platform_network_init+0x2c8>)
 800a18c:	2301      	movs	r3, #1
 800a18e:	6093      	str	r3, [r2, #8]
 800a190:	6893      	ldr	r3, [r2, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1fc      	bne.n	800a190 <ai_platform_network_init+0x2a0>
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <ai_platform_network_init+0x2cc>)
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <ai_platform_network_init+0x2d0>)
 800a19c:	6812      	ldr	r2, [r2, #0]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	f43f aede 	beq.w	8009f60 <ai_platform_network_init+0x70>
 800a1a4:	e7fe      	b.n	800a1a4 <ai_platform_network_init+0x2b4>
 800a1a6:	bf00      	nop
 800a1a8:	a1c00100 	.word	0xa1c00100
 800a1ac:	e0042000 	.word	0xe0042000
 800a1b0:	5c001000 	.word	0x5c001000
 800a1b4:	a1facade 	.word	0xa1facade
 800a1b8:	40023000 	.word	0x40023000
 800a1bc:	f407a5c2 	.word	0xf407a5c2
 800a1c0:	b5e8b5cd 	.word	0xb5e8b5cd
 800a1c4:	58024000 	.word	0x58024000
 800a1c8:	2213      	movs	r2, #19
 800a1ca:	2116      	movs	r1, #22
 800a1cc:	f104 0010 	add.w	r0, r4, #16
 800a1d0:	f000 fc38 	bl	800aa44 <core_set_error>
 800a1d4:	e73a      	b.n	800a04c <ai_platform_network_init+0x15c>
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	4680      	mov	r8, r0
 800a1da:	4684      	mov	ip, r0
 800a1dc:	e773      	b.n	800a0c6 <ai_platform_network_init+0x1d6>
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	d002      	beq.n	800a1ea <ai_platform_network_init+0x2fa>
 800a1e4:	f04f 0c01 	mov.w	ip, #1
 800a1e8:	e7a7      	b.n	800a13a <ai_platform_network_init+0x24a>
 800a1ea:	2110      	movs	r1, #16
 800a1ec:	2213      	movs	r2, #19
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	1860      	adds	r0, r4, r1
 800a1f2:	f000 fc27 	bl	800aa44 <core_set_error>
 800a1f6:	e729      	b.n	800a04c <ai_platform_network_init+0x15c>
 800a1f8:	2110      	movs	r1, #16
 800a1fa:	2211      	movs	r2, #17
 800a1fc:	462e      	mov	r6, r5
 800a1fe:	1860      	adds	r0, r4, r1
 800a200:	f000 fc20 	bl	800aa44 <core_set_error>
 800a204:	e722      	b.n	800a04c <ai_platform_network_init+0x15c>
 800a206:	2110      	movs	r1, #16
 800a208:	2212      	movs	r2, #18
 800a20a:	1860      	adds	r0, r4, r1
 800a20c:	f000 fc1a 	bl	800aa44 <core_set_error>
 800a210:	e71c      	b.n	800a04c <ai_platform_network_init+0x15c>
 800a212:	4666      	mov	r6, ip
 800a214:	e6b7      	b.n	8009f86 <ai_platform_network_init+0x96>
 800a216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a218:	6a26      	ldr	r6, [r4, #32]
 800a21a:	2701      	movs	r7, #1
 800a21c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a21e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a222:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a226:	e74e      	b.n	800a0c6 <ai_platform_network_init+0x1d6>

0800a228 <ai_platform_network_post_init>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d04e      	beq.n	800a2cc <ai_platform_network_post_init+0xa4>
 800a22e:	4b8c      	ldr	r3, [pc, #560]	; (800a460 <ai_platform_network_post_init+0x238>)
 800a230:	4604      	mov	r4, r0
 800a232:	6802      	ldr	r2, [r0, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d149      	bne.n	800a2cc <ai_platform_network_post_init+0xa4>
 800a238:	f7fe ff8c 	bl	8009154 <_ai_platform_acquire_crc>
 800a23c:	4b89      	ldr	r3, [pc, #548]	; (800a464 <ai_platform_network_post_init+0x23c>)
 800a23e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a248:	189a      	adds	r2, r3, r2
 800a24a:	2a01      	cmp	r2, #1
 800a24c:	f240 8095 	bls.w	800a37a <ai_platform_network_post_init+0x152>
 800a250:	f240 4249 	movw	r2, #1097	; 0x449
 800a254:	4293      	cmp	r3, r2
 800a256:	f000 8090 	beq.w	800a37a <ai_platform_network_post_init+0x152>
 800a25a:	4a83      	ldr	r2, [pc, #524]	; (800a468 <ai_platform_network_post_init+0x240>)
 800a25c:	6813      	ldr	r3, [r2, #0]
 800a25e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a262:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a266:	f000 8096 	beq.w	800a396 <ai_platform_network_post_init+0x16e>
 800a26a:	6813      	ldr	r3, [r2, #0]
 800a26c:	f240 4183 	movw	r1, #1155	; 0x483
 800a270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a274:	428b      	cmp	r3, r1
 800a276:	f000 80b8 	beq.w	800a3ea <ai_platform_network_post_init+0x1c2>
 800a27a:	6813      	ldr	r3, [r2, #0]
 800a27c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a280:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800a284:	f000 80de 	beq.w	800a444 <ai_platform_network_post_init+0x21c>
 800a288:	6813      	ldr	r3, [r2, #0]
 800a28a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 80bd 	beq.w	800a40e <ai_platform_network_post_init+0x1e6>
 800a294:	f7fe ff60 	bl	8009158 <_ai_platform_release_crc>
 800a298:	68e3      	ldr	r3, [r4, #12]
 800a29a:	f013 0502 	ands.w	r5, r3, #2
 800a29e:	f000 808c 	beq.w	800a3ba <ai_platform_network_post_init+0x192>
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f000 fc10 	bl	800aac8 <ai_layers_post_init_all>
 800a2a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2aa:	b16b      	cbz	r3, 800a2c8 <ai_platform_network_post_init+0xa0>
 800a2ac:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a2ae:	e007      	b.n	800a2c0 <ai_platform_network_post_init+0x98>
 800a2b0:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800a2b4:	4798      	blx	r3
 800a2b6:	692b      	ldr	r3, [r5, #16]
 800a2b8:	b133      	cbz	r3, 800a2c8 <ai_platform_network_post_init+0xa0>
 800a2ba:	42ab      	cmp	r3, r5
 800a2bc:	461d      	mov	r5, r3
 800a2be:	d003      	beq.n	800a2c8 <ai_platform_network_post_init+0xa0>
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	d1f3      	bne.n	800a2b0 <ai_platform_network_post_init+0x88>
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	f7fe ff42 	bl	8009154 <_ai_platform_acquire_crc>
 800a2d0:	4b64      	ldr	r3, [pc, #400]	; (800a464 <ai_platform_network_post_init+0x23c>)
 800a2d2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2dc:	185a      	adds	r2, r3, r1
 800a2de:	2a01      	cmp	r2, #1
 800a2e0:	d92a      	bls.n	800a338 <ai_platform_network_post_init+0x110>
 800a2e2:	f240 4249 	movw	r2, #1097	; 0x449
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d026      	beq.n	800a338 <ai_platform_network_post_init+0x110>
 800a2ea:	4a5f      	ldr	r2, [pc, #380]	; (800a468 <ai_platform_network_post_init+0x240>)
 800a2ec:	6813      	ldr	r3, [r2, #0]
 800a2ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a2f6:	d02c      	beq.n	800a352 <ai_platform_network_post_init+0x12a>
 800a2f8:	6813      	ldr	r3, [r2, #0]
 800a2fa:	f240 4183 	movw	r1, #1155	; 0x483
 800a2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a302:	428b      	cmp	r3, r1
 800a304:	d060      	beq.n	800a3c8 <ai_platform_network_post_init+0x1a0>
 800a306:	6813      	ldr	r3, [r2, #0]
 800a308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a30c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800a310:	f000 808b 	beq.w	800a42a <ai_platform_network_post_init+0x202>
 800a314:	6813      	ldr	r3, [r2, #0]
 800a316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d129      	bne.n	800a372 <ai_platform_network_post_init+0x14a>
 800a31e:	4a53      	ldr	r2, [pc, #332]	; (800a46c <ai_platform_network_post_init+0x244>)
 800a320:	2301      	movs	r3, #1
 800a322:	6093      	str	r3, [r2, #8]
 800a324:	6893      	ldr	r3, [r2, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1fc      	bne.n	800a324 <ai_platform_network_post_init+0xfc>
 800a32a:	4951      	ldr	r1, [pc, #324]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a32c:	4b51      	ldr	r3, [pc, #324]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a32e:	6011      	str	r1, [r2, #0]
 800a330:	6812      	ldr	r2, [r2, #0]
 800a332:	429a      	cmp	r2, r3
 800a334:	d01d      	beq.n	800a372 <ai_platform_network_post_init+0x14a>
 800a336:	e7fe      	b.n	800a336 <ai_platform_network_post_init+0x10e>
 800a338:	4a4c      	ldr	r2, [pc, #304]	; (800a46c <ai_platform_network_post_init+0x244>)
 800a33a:	2301      	movs	r3, #1
 800a33c:	6093      	str	r3, [r2, #8]
 800a33e:	6893      	ldr	r3, [r2, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1fc      	bne.n	800a33e <ai_platform_network_post_init+0x116>
 800a344:	494a      	ldr	r1, [pc, #296]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a346:	4b4b      	ldr	r3, [pc, #300]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a348:	6011      	str	r1, [r2, #0]
 800a34a:	6812      	ldr	r2, [r2, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d010      	beq.n	800a372 <ai_platform_network_post_init+0x14a>
 800a350:	e7fe      	b.n	800a350 <ai_platform_network_post_init+0x128>
 800a352:	4a49      	ldr	r2, [pc, #292]	; (800a478 <ai_platform_network_post_init+0x250>)
 800a354:	2301      	movs	r3, #1
 800a356:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a35a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1fb      	bne.n	800a35a <ai_platform_network_post_init+0x132>
 800a362:	4943      	ldr	r1, [pc, #268]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a364:	4b43      	ldr	r3, [pc, #268]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a366:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a36a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a36e:	429a      	cmp	r2, r3
 800a370:	d110      	bne.n	800a394 <ai_platform_network_post_init+0x16c>
 800a372:	f7fe fef1 	bl	8009158 <_ai_platform_release_crc>
 800a376:	2000      	movs	r0, #0
 800a378:	bd38      	pop	{r3, r4, r5, pc}
 800a37a:	4a3c      	ldr	r2, [pc, #240]	; (800a46c <ai_platform_network_post_init+0x244>)
 800a37c:	2301      	movs	r3, #1
 800a37e:	6093      	str	r3, [r2, #8]
 800a380:	6893      	ldr	r3, [r2, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1fc      	bne.n	800a380 <ai_platform_network_post_init+0x158>
 800a386:	493a      	ldr	r1, [pc, #232]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a388:	4b3a      	ldr	r3, [pc, #232]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a38a:	6011      	str	r1, [r2, #0]
 800a38c:	6812      	ldr	r2, [r2, #0]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d080      	beq.n	800a294 <ai_platform_network_post_init+0x6c>
 800a392:	e7fe      	b.n	800a392 <ai_platform_network_post_init+0x16a>
 800a394:	e7fe      	b.n	800a394 <ai_platform_network_post_init+0x16c>
 800a396:	4a38      	ldr	r2, [pc, #224]	; (800a478 <ai_platform_network_post_init+0x250>)
 800a398:	2301      	movs	r3, #1
 800a39a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a39e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1fb      	bne.n	800a39e <ai_platform_network_post_init+0x176>
 800a3a6:	4932      	ldr	r1, [pc, #200]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a3a8:	4b32      	ldr	r3, [pc, #200]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a3aa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a3ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	f43f af6e 	beq.w	800a294 <ai_platform_network_post_init+0x6c>
 800a3b8:	e7fe      	b.n	800a3b8 <ai_platform_network_post_init+0x190>
 800a3ba:	2210      	movs	r2, #16
 800a3bc:	2111      	movs	r1, #17
 800a3be:	18a0      	adds	r0, r4, r2
 800a3c0:	f000 fb40 	bl	800aa44 <core_set_error>
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	4a2b      	ldr	r2, [pc, #172]	; (800a478 <ai_platform_network_post_init+0x250>)
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a3d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1fb      	bne.n	800a3d0 <ai_platform_network_post_init+0x1a8>
 800a3d8:	4925      	ldr	r1, [pc, #148]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a3da:	4b26      	ldr	r3, [pc, #152]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a3dc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a3e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d0c4      	beq.n	800a372 <ai_platform_network_post_init+0x14a>
 800a3e8:	e7fe      	b.n	800a3e8 <ai_platform_network_post_init+0x1c0>
 800a3ea:	4a23      	ldr	r2, [pc, #140]	; (800a478 <ai_platform_network_post_init+0x250>)
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a3f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1fb      	bne.n	800a3f2 <ai_platform_network_post_init+0x1ca>
 800a3fa:	491d      	ldr	r1, [pc, #116]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a3fc:	4b1d      	ldr	r3, [pc, #116]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a3fe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a402:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a406:	429a      	cmp	r2, r3
 800a408:	f43f af44 	beq.w	800a294 <ai_platform_network_post_init+0x6c>
 800a40c:	e7fe      	b.n	800a40c <ai_platform_network_post_init+0x1e4>
 800a40e:	4a17      	ldr	r2, [pc, #92]	; (800a46c <ai_platform_network_post_init+0x244>)
 800a410:	2301      	movs	r3, #1
 800a412:	6093      	str	r3, [r2, #8]
 800a414:	6893      	ldr	r3, [r2, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1fc      	bne.n	800a414 <ai_platform_network_post_init+0x1ec>
 800a41a:	4915      	ldr	r1, [pc, #84]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a41c:	4b15      	ldr	r3, [pc, #84]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a41e:	6011      	str	r1, [r2, #0]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	429a      	cmp	r2, r3
 800a424:	f43f af36 	beq.w	800a294 <ai_platform_network_post_init+0x6c>
 800a428:	e7fe      	b.n	800a428 <ai_platform_network_post_init+0x200>
 800a42a:	4a10      	ldr	r2, [pc, #64]	; (800a46c <ai_platform_network_post_init+0x244>)
 800a42c:	2301      	movs	r3, #1
 800a42e:	6093      	str	r3, [r2, #8]
 800a430:	6893      	ldr	r3, [r2, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1fc      	bne.n	800a430 <ai_platform_network_post_init+0x208>
 800a436:	490e      	ldr	r1, [pc, #56]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a438:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a43a:	6011      	str	r1, [r2, #0]
 800a43c:	6812      	ldr	r2, [r2, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d097      	beq.n	800a372 <ai_platform_network_post_init+0x14a>
 800a442:	e7fe      	b.n	800a442 <ai_platform_network_post_init+0x21a>
 800a444:	4a09      	ldr	r2, [pc, #36]	; (800a46c <ai_platform_network_post_init+0x244>)
 800a446:	2301      	movs	r3, #1
 800a448:	6093      	str	r3, [r2, #8]
 800a44a:	6893      	ldr	r3, [r2, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1fc      	bne.n	800a44a <ai_platform_network_post_init+0x222>
 800a450:	4907      	ldr	r1, [pc, #28]	; (800a470 <ai_platform_network_post_init+0x248>)
 800a452:	4b08      	ldr	r3, [pc, #32]	; (800a474 <ai_platform_network_post_init+0x24c>)
 800a454:	6011      	str	r1, [r2, #0]
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	f43f af1b 	beq.w	800a294 <ai_platform_network_post_init+0x6c>
 800a45e:	e7fe      	b.n	800a45e <ai_platform_network_post_init+0x236>
 800a460:	a1c00100 	.word	0xa1c00100
 800a464:	e0042000 	.word	0xe0042000
 800a468:	5c001000 	.word	0x5c001000
 800a46c:	40023000 	.word	0x40023000
 800a470:	f407a5c2 	.word	0xf407a5c2
 800a474:	b5e8b5cd 	.word	0xb5e8b5cd
 800a478:	58024000 	.word	0x58024000

0800a47c <ai_platform_network_process>:
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	b085      	sub	sp, #20
 800a482:	460e      	mov	r6, r1
 800a484:	4605      	mov	r5, r0
 800a486:	9201      	str	r2, [sp, #4]
 800a488:	b120      	cbz	r0, 800a494 <ai_platform_network_process+0x18>
 800a48a:	4b24      	ldr	r3, [pc, #144]	; (800a51c <ai_platform_network_process+0xa0>)
 800a48c:	6802      	ldr	r2, [r0, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	bf18      	it	ne
 800a492:	2500      	movne	r5, #0
 800a494:	f7fe fe5e 	bl	8009154 <_ai_platform_acquire_crc>
 800a498:	4b21      	ldr	r3, [pc, #132]	; (800a520 <ai_platform_network_process+0xa4>)
 800a49a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4a4:	185a      	adds	r2, r3, r1
 800a4a6:	2a01      	cmp	r2, #1
 800a4a8:	d92b      	bls.n	800a502 <ai_platform_network_process+0x86>
 800a4aa:	f240 4249 	movw	r2, #1097	; 0x449
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d027      	beq.n	800a502 <ai_platform_network_process+0x86>
 800a4b2:	4a1c      	ldr	r2, [pc, #112]	; (800a524 <ai_platform_network_process+0xa8>)
 800a4b4:	6813      	ldr	r3, [r2, #0]
 800a4b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4ba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a4be:	d039      	beq.n	800a534 <ai_platform_network_process+0xb8>
 800a4c0:	6813      	ldr	r3, [r2, #0]
 800a4c2:	f240 4183 	movw	r1, #1155	; 0x483
 800a4c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4ca:	428b      	cmp	r3, r1
 800a4cc:	f000 819c 	beq.w	800a808 <ai_platform_network_process+0x38c>
 800a4d0:	6813      	ldr	r3, [r2, #0]
 800a4d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4d6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800a4da:	f000 8179 	beq.w	800a7d0 <ai_platform_network_process+0x354>
 800a4de:	6813      	ldr	r3, [r2, #0]
 800a4e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d136      	bne.n	800a556 <ai_platform_network_process+0xda>
 800a4e8:	4a0f      	ldr	r2, [pc, #60]	; (800a528 <ai_platform_network_process+0xac>)
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	6093      	str	r3, [r2, #8]
 800a4ee:	6893      	ldr	r3, [r2, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1fc      	bne.n	800a4ee <ai_platform_network_process+0x72>
 800a4f4:	4b0d      	ldr	r3, [pc, #52]	; (800a52c <ai_platform_network_process+0xb0>)
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <ai_platform_network_process+0xb4>)
 800a4fa:	6812      	ldr	r2, [r2, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d02a      	beq.n	800a556 <ai_platform_network_process+0xda>
 800a500:	e7fe      	b.n	800a500 <ai_platform_network_process+0x84>
 800a502:	4a09      	ldr	r2, [pc, #36]	; (800a528 <ai_platform_network_process+0xac>)
 800a504:	2301      	movs	r3, #1
 800a506:	6093      	str	r3, [r2, #8]
 800a508:	6893      	ldr	r3, [r2, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1fc      	bne.n	800a508 <ai_platform_network_process+0x8c>
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <ai_platform_network_process+0xb0>)
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	4b07      	ldr	r3, [pc, #28]	; (800a530 <ai_platform_network_process+0xb4>)
 800a514:	6812      	ldr	r2, [r2, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d01d      	beq.n	800a556 <ai_platform_network_process+0xda>
 800a51a:	e7fe      	b.n	800a51a <ai_platform_network_process+0x9e>
 800a51c:	a1c00100 	.word	0xa1c00100
 800a520:	e0042000 	.word	0xe0042000
 800a524:	5c001000 	.word	0x5c001000
 800a528:	40023000 	.word	0x40023000
 800a52c:	f407a5c2 	.word	0xf407a5c2
 800a530:	b5e8b5cd 	.word	0xb5e8b5cd
 800a534:	4ab0      	ldr	r2, [pc, #704]	; (800a7f8 <ai_platform_network_process+0x37c>)
 800a536:	2301      	movs	r3, #1
 800a538:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a53c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1fb      	bne.n	800a53c <ai_platform_network_process+0xc0>
 800a544:	4bad      	ldr	r3, [pc, #692]	; (800a7fc <ai_platform_network_process+0x380>)
 800a546:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a54a:	4bad      	ldr	r3, [pc, #692]	; (800a800 <ai_platform_network_process+0x384>)
 800a54c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a550:	429a      	cmp	r2, r3
 800a552:	f040 812b 	bne.w	800a7ac <ai_platform_network_process+0x330>
 800a556:	f7fe fdff 	bl	8009158 <_ai_platform_release_crc>
 800a55a:	2d00      	cmp	r5, #0
 800a55c:	f000 8172 	beq.w	800a844 <ai_platform_network_process+0x3c8>
 800a560:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 8123 	beq.w	800a7ae <ai_platform_network_process+0x332>
 800a568:	68eb      	ldr	r3, [r5, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	616a      	str	r2, [r5, #20]
 800a576:	2b03      	cmp	r3, #3
 800a578:	f040 811f 	bne.w	800a7ba <ai_platform_network_process+0x33e>
 800a57c:	2e00      	cmp	r6, #0
 800a57e:	f000 8156 	beq.w	800a82e <ai_platform_network_process+0x3b2>
 800a582:	fab8 f788 	clz	r7, r8
 800a586:	097f      	lsrs	r7, r7, #5
 800a588:	f1b8 0f00 	cmp.w	r8, #0
 800a58c:	f000 814f 	beq.w	800a82e <ai_platform_network_process+0x3b2>
 800a590:	f8b8 3000 	ldrh.w	r3, [r8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 814a 	beq.w	800a82e <ai_platform_network_process+0x3b2>
 800a59a:	69b3      	ldr	r3, [r6, #24]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800a5a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d072      	beq.n	800a690 <ai_platform_network_process+0x214>
 800a5aa:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a5ae:	2c00      	cmp	r4, #0
 800a5b0:	d06e      	beq.n	800a690 <ai_platform_network_process+0x214>
 800a5b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5b6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800a5ba:	f8d3 a000 	ldr.w	sl, [r3]
 800a5be:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800a5c2:	f000 8133 	beq.w	800a82c <ai_platform_network_process+0x3b0>
 800a5c6:	69a3      	ldr	r3, [r4, #24]
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	685d      	ldr	r5, [r3, #4]
 800a5ce:	f7fe fd73 	bl	80090b8 <ai_buffer_get_size>
 800a5d2:	4285      	cmp	r5, r0
 800a5d4:	f0c0 8138 	bcc.w	800a848 <ai_platform_network_process+0x3cc>
 800a5d8:	68e0      	ldr	r0, [r4, #12]
 800a5da:	69b1      	ldr	r1, [r6, #24]
 800a5dc:	68c2      	ldr	r2, [r0, #12]
 800a5de:	68cb      	ldr	r3, [r1, #12]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	f040 8131 	bne.w	800a848 <ai_platform_network_process+0x3cc>
 800a5e6:	6882      	ldr	r2, [r0, #8]
 800a5e8:	688b      	ldr	r3, [r1, #8]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	f040 812c 	bne.w	800a848 <ai_platform_network_process+0x3cc>
 800a5f0:	6842      	ldr	r2, [r0, #4]
 800a5f2:	684b      	ldr	r3, [r1, #4]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	f040 8127 	bne.w	800a848 <ai_platform_network_process+0x3cc>
 800a5fa:	69a3      	ldr	r3, [r4, #24]
 800a5fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a600:	f002 ff66 	bl	800d4d0 <ai_array_get_data_byte_size>
 800a604:	4605      	mov	r5, r0
 800a606:	4620      	mov	r0, r4
 800a608:	f002 ff78 	bl	800d4fc <get_tensor_byte_size>
 800a60c:	4285      	cmp	r5, r0
 800a60e:	f0c0 811b 	bcc.w	800a848 <ai_platform_network_process+0x3cc>
 800a612:	69a3      	ldr	r3, [r4, #24]
 800a614:	6818      	ldr	r0, [r3, #0]
 800a616:	f002 fec7 	bl	800d3a8 <ai_array_to_buffer_fmt>
 800a61a:	6833      	ldr	r3, [r6, #0]
 800a61c:	4058      	eors	r0, r3
 800a61e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800a622:	f040 81c8 	bne.w	800a9b6 <ai_platform_network_process+0x53a>
 800a626:	6873      	ldr	r3, [r6, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 81bb 	beq.w	800a9a4 <ai_platform_network_process+0x528>
 800a62e:	69b3      	ldr	r3, [r6, #24]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 81c8 	beq.w	800a9c8 <ai_platform_network_process+0x54c>
 800a638:	9a02      	ldr	r2, [sp, #8]
 800a63a:	4620      	mov	r0, r4
 800a63c:	3701      	adds	r7, #1
 800a63e:	361c      	adds	r6, #28
 800a640:	429a      	cmp	r2, r3
 800a642:	bf38      	it	cc
 800a644:	461a      	movcc	r2, r3
 800a646:	9202      	str	r2, [sp, #8]
 800a648:	f002 ff58 	bl	800d4fc <get_tensor_byte_size>
 800a64c:	f8c9 0008 	str.w	r0, [r9, #8]
 800a650:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	fb00 f303 	mul.w	r3, r0, r3
 800a65a:	f8c9 300c 	str.w	r3, [r9, #12]
 800a65e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800a662:	440b      	add	r3, r1
 800a664:	f8c9 1004 	str.w	r1, [r9, #4]
 800a668:	f84a 300b 	str.w	r3, [sl, fp]
 800a66c:	69a0      	ldr	r0, [r4, #24]
 800a66e:	6803      	ldr	r3, [r0, #0]
 800a670:	009a      	lsls	r2, r3, #2
 800a672:	f100 80bb 	bmi.w	800a7ec <ai_platform_network_process+0x370>
 800a676:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a67a:	1a9b      	subs	r3, r3, r2
 800a67c:	4419      	add	r1, r3
 800a67e:	6081      	str	r1, [r0, #8]
 800a680:	69a3      	ldr	r3, [r4, #24]
 800a682:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a686:	60da      	str	r2, [r3, #12]
 800a688:	f8b8 3000 	ldrh.w	r3, [r8]
 800a68c:	42bb      	cmp	r3, r7
 800a68e:	d888      	bhi.n	800a5a2 <ai_platform_network_process+0x126>
 800a690:	9d03      	ldr	r5, [sp, #12]
 800a692:	9b01      	ldr	r3, [sp, #4]
 800a694:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 819f 	beq.w	800a9da <ai_platform_network_process+0x55e>
 800a69c:	2a01      	cmp	r2, #1
 800a69e:	f240 8179 	bls.w	800a994 <ai_platform_network_process+0x518>
 800a6a2:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800a6a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8172 	beq.w	800a994 <ai_platform_network_process+0x518>
 800a6b0:	9e01      	ldr	r6, [sp, #4]
 800a6b2:	2700      	movs	r7, #0
 800a6b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80d3 	beq.w	800a864 <ai_platform_network_process+0x3e8>
 800a6be:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a6c2:	2c00      	cmp	r4, #0
 800a6c4:	f000 80ce 	beq.w	800a864 <ai_platform_network_process+0x3e8>
 800a6c8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a6cc:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800a6d0:	f8d3 8000 	ldr.w	r8, [r3]
 800a6d4:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800a6d8:	f000 819d 	beq.w	800aa16 <ai_platform_network_process+0x59a>
 800a6dc:	69a3      	ldr	r3, [r4, #24]
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	f7fe fce7 	bl	80090b8 <ai_buffer_get_size>
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	4283      	cmp	r3, r0
 800a6ee:	f0c0 8151 	bcc.w	800a994 <ai_platform_network_process+0x518>
 800a6f2:	68e0      	ldr	r0, [r4, #12]
 800a6f4:	69b1      	ldr	r1, [r6, #24]
 800a6f6:	68c2      	ldr	r2, [r0, #12]
 800a6f8:	68cb      	ldr	r3, [r1, #12]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	f040 814a 	bne.w	800a994 <ai_platform_network_process+0x518>
 800a700:	6882      	ldr	r2, [r0, #8]
 800a702:	688b      	ldr	r3, [r1, #8]
 800a704:	429a      	cmp	r2, r3
 800a706:	f040 8145 	bne.w	800a994 <ai_platform_network_process+0x518>
 800a70a:	6842      	ldr	r2, [r0, #4]
 800a70c:	684b      	ldr	r3, [r1, #4]
 800a70e:	429a      	cmp	r2, r3
 800a710:	f040 8140 	bne.w	800a994 <ai_platform_network_process+0x518>
 800a714:	69a3      	ldr	r3, [r4, #24]
 800a716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a71a:	f002 fed9 	bl	800d4d0 <ai_array_get_data_byte_size>
 800a71e:	9001      	str	r0, [sp, #4]
 800a720:	4620      	mov	r0, r4
 800a722:	f002 feeb 	bl	800d4fc <get_tensor_byte_size>
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	4283      	cmp	r3, r0
 800a72a:	f0c0 8133 	bcc.w	800a994 <ai_platform_network_process+0x518>
 800a72e:	69a3      	ldr	r3, [r4, #24]
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f002 fe39 	bl	800d3a8 <ai_array_to_buffer_fmt>
 800a736:	6833      	ldr	r3, [r6, #0]
 800a738:	4058      	eors	r0, r3
 800a73a:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800a73e:	f040 815a 	bne.w	800a9f6 <ai_platform_network_process+0x57a>
 800a742:	6873      	ldr	r3, [r6, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 814e 	beq.w	800a9e6 <ai_platform_network_process+0x56a>
 800a74a:	69b3      	ldr	r3, [r6, #24]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 8159 	beq.w	800aa06 <ai_platform_network_process+0x58a>
 800a754:	9a02      	ldr	r2, [sp, #8]
 800a756:	4620      	mov	r0, r4
 800a758:	3701      	adds	r7, #1
 800a75a:	361c      	adds	r6, #28
 800a75c:	429a      	cmp	r2, r3
 800a75e:	bf38      	it	cc
 800a760:	461a      	movcc	r2, r3
 800a762:	9202      	str	r2, [sp, #8]
 800a764:	f002 feca 	bl	800d4fc <get_tensor_byte_size>
 800a768:	f8ca 0008 	str.w	r0, [sl, #8]
 800a76c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	fb00 f303 	mul.w	r3, r0, r3
 800a776:	f8ca 300c 	str.w	r3, [sl, #12]
 800a77a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800a77e:	440b      	add	r3, r1
 800a780:	f8ca 1004 	str.w	r1, [sl, #4]
 800a784:	f848 300b 	str.w	r3, [r8, fp]
 800a788:	69a0      	ldr	r0, [r4, #24]
 800a78a:	6803      	ldr	r3, [r0, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	d464      	bmi.n	800a85a <ai_platform_network_process+0x3de>
 800a790:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	4419      	add	r1, r3
 800a798:	6081      	str	r1, [r0, #8]
 800a79a:	69a3      	ldr	r3, [r4, #24]
 800a79c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a7a0:	60da      	str	r2, [r3, #12]
 800a7a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a7a6:	429f      	cmp	r7, r3
 800a7a8:	d384      	bcc.n	800a6b4 <ai_platform_network_process+0x238>
 800a7aa:	e05b      	b.n	800a864 <ai_platform_network_process+0x3e8>
 800a7ac:	e7fe      	b.n	800a7ac <ai_platform_network_process+0x330>
 800a7ae:	68ea      	ldr	r2, [r5, #12]
 800a7b0:	616b      	str	r3, [r5, #20]
 800a7b2:	f002 0203 	and.w	r2, r2, #3
 800a7b6:	2a03      	cmp	r2, #3
 800a7b8:	d039      	beq.n	800a82e <ai_platform_network_process+0x3b2>
 800a7ba:	2230      	movs	r2, #48	; 0x30
 800a7bc:	2111      	movs	r1, #17
 800a7be:	f105 0010 	add.w	r0, r5, #16
 800a7c2:	2400      	movs	r4, #0
 800a7c4:	f000 f93e 	bl	800aa44 <core_set_error>
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	b005      	add	sp, #20
 800a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d0:	4a0c      	ldr	r2, [pc, #48]	; (800a804 <ai_platform_network_process+0x388>)
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	6093      	str	r3, [r2, #8]
 800a7d6:	6893      	ldr	r3, [r2, #8]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1fc      	bne.n	800a7d6 <ai_platform_network_process+0x35a>
 800a7dc:	4b07      	ldr	r3, [pc, #28]	; (800a7fc <ai_platform_network_process+0x380>)
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <ai_platform_network_process+0x384>)
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	f43f aeb6 	beq.w	800a556 <ai_platform_network_process+0xda>
 800a7ea:	e7fe      	b.n	800a7ea <ai_platform_network_process+0x36e>
 800a7ec:	f8b8 3000 	ldrh.w	r3, [r8]
 800a7f0:	429f      	cmp	r7, r3
 800a7f2:	f4ff aed6 	bcc.w	800a5a2 <ai_platform_network_process+0x126>
 800a7f6:	e74b      	b.n	800a690 <ai_platform_network_process+0x214>
 800a7f8:	58024000 	.word	0x58024000
 800a7fc:	f407a5c2 	.word	0xf407a5c2
 800a800:	b5e8b5cd 	.word	0xb5e8b5cd
 800a804:	40023000 	.word	0x40023000
 800a808:	4a87      	ldr	r2, [pc, #540]	; (800aa28 <ai_platform_network_process+0x5ac>)
 800a80a:	2301      	movs	r3, #1
 800a80c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a810:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1fb      	bne.n	800a810 <ai_platform_network_process+0x394>
 800a818:	4b84      	ldr	r3, [pc, #528]	; (800aa2c <ai_platform_network_process+0x5b0>)
 800a81a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a81e:	4b84      	ldr	r3, [pc, #528]	; (800aa30 <ai_platform_network_process+0x5b4>)
 800a820:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a824:	429a      	cmp	r2, r3
 800a826:	f43f ae96 	beq.w	800a556 <ai_platform_network_process+0xda>
 800a82a:	e7fe      	b.n	800a82a <ai_platform_network_process+0x3ae>
 800a82c:	9d03      	ldr	r5, [sp, #12]
 800a82e:	2400      	movs	r4, #0
 800a830:	2217      	movs	r2, #23
 800a832:	2112      	movs	r1, #18
 800a834:	f105 0010 	add.w	r0, r5, #16
 800a838:	f000 f904 	bl	800aa44 <core_set_error>
 800a83c:	4620      	mov	r0, r4
 800a83e:	b005      	add	sp, #20
 800a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a844:	462c      	mov	r4, r5
 800a846:	e7bf      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800a848:	9d03      	ldr	r5, [sp, #12]
 800a84a:	2218      	movs	r2, #24
 800a84c:	2112      	movs	r1, #18
 800a84e:	2400      	movs	r4, #0
 800a850:	f105 0010 	add.w	r0, r5, #16
 800a854:	f000 f8f6 	bl	800aa44 <core_set_error>
 800a858:	e7b6      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800a85a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a85e:	429f      	cmp	r7, r3
 800a860:	f4ff af28 	bcc.w	800a6b4 <ai_platform_network_process+0x238>
 800a864:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a868:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800a86a:	82ab      	strh	r3, [r5, #20]
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	f040 808b 	bne.w	800a988 <ai_platform_network_process+0x50c>
 800a872:	4616      	mov	r6, r2
 800a874:	4617      	mov	r7, r2
 800a876:	8aec      	ldrh	r4, [r5, #22]
 800a878:	429c      	cmp	r4, r3
 800a87a:	d2a5      	bcs.n	800a7c8 <ai_platform_network_process+0x34c>
 800a87c:	46ab      	mov	fp, r5
 800a87e:	2e00      	cmp	r6, #0
 800a880:	d030      	beq.n	800a8e4 <ai_platform_network_process+0x468>
 800a882:	f04f 0800 	mov.w	r8, #0
 800a886:	e014      	b.n	800a8b2 <ai_platform_network_process+0x436>
 800a888:	6882      	ldr	r2, [r0, #8]
 800a88a:	68c5      	ldr	r5, [r0, #12]
 800a88c:	6863      	ldr	r3, [r4, #4]
 800a88e:	1b52      	subs	r2, r2, r5
 800a890:	4413      	add	r3, r2
 800a892:	6083      	str	r3, [r0, #8]
 800a894:	698b      	ldr	r3, [r1, #24]
 800a896:	6862      	ldr	r2, [r4, #4]
 800a898:	60da      	str	r2, [r3, #12]
 800a89a:	f859 200a 	ldr.w	r2, [r9, sl]
 800a89e:	f108 0801 	add.w	r8, r8, #1
 800a8a2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a8a6:	440b      	add	r3, r1
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d301      	bcc.n	800a8b0 <ai_platform_network_process+0x434>
 800a8ac:	68e3      	ldr	r3, [r4, #12]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	6063      	str	r3, [r4, #4]
 800a8b2:	8833      	ldrh	r3, [r6, #0]
 800a8b4:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a8b8:	4543      	cmp	r3, r8
 800a8ba:	d913      	bls.n	800a8e4 <ai_platform_network_process+0x468>
 800a8bc:	6873      	ldr	r3, [r6, #4]
 800a8be:	b18b      	cbz	r3, 800a8e4 <ai_platform_network_process+0x468>
 800a8c0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800a8c4:	b171      	cbz	r1, 800a8e4 <ai_platform_network_process+0x468>
 800a8c6:	6988      	ldr	r0, [r1, #24]
 800a8c8:	68b2      	ldr	r2, [r6, #8]
 800a8ca:	6803      	ldr	r3, [r0, #0]
 800a8cc:	f8d2 9000 	ldr.w	r9, [r2]
 800a8d0:	009d      	lsls	r5, r3, #2
 800a8d2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800a8d6:	d5d7      	bpl.n	800a888 <ai_platform_network_process+0x40c>
 800a8d8:	6881      	ldr	r1, [r0, #8]
 800a8da:	68a2      	ldr	r2, [r4, #8]
 800a8dc:	6860      	ldr	r0, [r4, #4]
 800a8de:	f002 fc93 	bl	800d208 <st_int8_copy>
 800a8e2:	e7da      	b.n	800a89a <ai_platform_network_process+0x41e>
 800a8e4:	4658      	mov	r0, fp
 800a8e6:	f000 f903 	bl	800aaf0 <ai_layers_forward_all>
 800a8ea:	2f00      	cmp	r7, #0
 800a8ec:	d03d      	beq.n	800a96a <ai_platform_network_process+0x4ee>
 800a8ee:	2400      	movs	r4, #0
 800a8f0:	e016      	b.n	800a920 <ai_platform_network_process+0x4a4>
 800a8f2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800a8f6:	f859 100a 	ldr.w	r1, [r9, sl]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	428b      	cmp	r3, r1
 800a8fe:	d302      	bcc.n	800a906 <ai_platform_network_process+0x48a>
 800a900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a904:	1acb      	subs	r3, r1, r3
 800a906:	f8c8 3004 	str.w	r3, [r8, #4]
 800a90a:	6981      	ldr	r1, [r0, #24]
 800a90c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a910:	1b52      	subs	r2, r2, r5
 800a912:	4413      	add	r3, r2
 800a914:	608b      	str	r3, [r1, #8]
 800a916:	6983      	ldr	r3, [r0, #24]
 800a918:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a91c:	60da      	str	r2, [r3, #12]
 800a91e:	3401      	adds	r4, #1
 800a920:	883b      	ldrh	r3, [r7, #0]
 800a922:	42a3      	cmp	r3, r4
 800a924:	d921      	bls.n	800a96a <ai_platform_network_process+0x4ee>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	b1fb      	cbz	r3, 800a96a <ai_platform_network_process+0x4ee>
 800a92a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a92e:	b1e0      	cbz	r0, 800a96a <ai_platform_network_process+0x4ee>
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800a936:	6983      	ldr	r3, [r0, #24]
 800a938:	f8d2 9000 	ldr.w	r9, [r2]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	d5d5      	bpl.n	800a8f2 <ai_platform_network_process+0x476>
 800a946:	6898      	ldr	r0, [r3, #8]
 800a948:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800a94c:	f002 fc5c 	bl	800d208 <st_int8_copy>
 800a950:	f859 200a 	ldr.w	r2, [r9, sl]
 800a954:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800a958:	440b      	add	r3, r1
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d302      	bcc.n	800a964 <ai_platform_network_process+0x4e8>
 800a95e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	f8c8 3004 	str.w	r3, [r8, #4]
 800a968:	e7d9      	b.n	800a91e <ai_platform_network_process+0x4a2>
 800a96a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800a96e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800a972:	3401      	adds	r4, #1
 800a974:	b2a4      	uxth	r4, r4
 800a976:	42a3      	cmp	r3, r4
 800a978:	f8ab 4016 	strh.w	r4, [fp, #22]
 800a97c:	f63f af7f 	bhi.w	800a87e <ai_platform_network_process+0x402>
 800a980:	4620      	mov	r0, r4
 800a982:	b005      	add	sp, #20
 800a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	2a01      	cmp	r2, #1
 800a98a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800a98c:	d029      	beq.n	800a9e2 <ai_platform_network_process+0x566>
 800a98e:	f106 070c 	add.w	r7, r6, #12
 800a992:	e770      	b.n	800a876 <ai_platform_network_process+0x3fa>
 800a994:	2218      	movs	r2, #24
 800a996:	2113      	movs	r1, #19
 800a998:	f105 0010 	add.w	r0, r5, #16
 800a99c:	2400      	movs	r4, #0
 800a99e:	f000 f851 	bl	800aa44 <core_set_error>
 800a9a2:	e711      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800a9a4:	9d03      	ldr	r5, [sp, #12]
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	2217      	movs	r2, #23
 800a9aa:	2112      	movs	r1, #18
 800a9ac:	f105 0010 	add.w	r0, r5, #16
 800a9b0:	f000 f848 	bl	800aa44 <core_set_error>
 800a9b4:	e708      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800a9b6:	9d03      	ldr	r5, [sp, #12]
 800a9b8:	2219      	movs	r2, #25
 800a9ba:	2112      	movs	r1, #18
 800a9bc:	2400      	movs	r4, #0
 800a9be:	f105 0010 	add.w	r0, r5, #16
 800a9c2:	f000 f83f 	bl	800aa44 <core_set_error>
 800a9c6:	e6ff      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800a9c8:	9d03      	ldr	r5, [sp, #12]
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	2221      	movs	r2, #33	; 0x21
 800a9ce:	2112      	movs	r1, #18
 800a9d0:	f105 0010 	add.w	r0, r5, #16
 800a9d4:	f000 f836 	bl	800aa44 <core_set_error>
 800a9d8:	e6f6      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800a9da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a9de:	82ab      	strh	r3, [r5, #20]
 800a9e0:	e744      	b.n	800a86c <ai_platform_network_process+0x3f0>
 800a9e2:	2700      	movs	r7, #0
 800a9e4:	e747      	b.n	800a876 <ai_platform_network_process+0x3fa>
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	2217      	movs	r2, #23
 800a9ea:	2113      	movs	r1, #19
 800a9ec:	f105 0010 	add.w	r0, r5, #16
 800a9f0:	f000 f828 	bl	800aa44 <core_set_error>
 800a9f4:	e6e8      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800a9f6:	2219      	movs	r2, #25
 800a9f8:	2113      	movs	r1, #19
 800a9fa:	f105 0010 	add.w	r0, r5, #16
 800a9fe:	2400      	movs	r4, #0
 800aa00:	f000 f820 	bl	800aa44 <core_set_error>
 800aa04:	e6e0      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800aa06:	4604      	mov	r4, r0
 800aa08:	2221      	movs	r2, #33	; 0x21
 800aa0a:	2113      	movs	r1, #19
 800aa0c:	f105 0010 	add.w	r0, r5, #16
 800aa10:	f000 f818 	bl	800aa44 <core_set_error>
 800aa14:	e6d8      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800aa16:	2217      	movs	r2, #23
 800aa18:	2113      	movs	r1, #19
 800aa1a:	f105 0010 	add.w	r0, r5, #16
 800aa1e:	4654      	mov	r4, sl
 800aa20:	f000 f810 	bl	800aa44 <core_set_error>
 800aa24:	e6d0      	b.n	800a7c8 <ai_platform_network_process+0x34c>
 800aa26:	bf00      	nop
 800aa28:	58024000 	.word	0x58024000
 800aa2c:	f407a5c2 	.word	0xf407a5c2
 800aa30:	b5e8b5cd 	.word	0xb5e8b5cd

0800aa34 <core_init>:
 800aa34:	2001      	movs	r0, #1
 800aa36:	4770      	bx	lr

0800aa38 <core_get_error>:
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	6800      	ldr	r0, [r0, #0]
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop

0800aa44 <core_set_error>:
 800aa44:	4603      	mov	r3, r0
 800aa46:	7800      	ldrb	r0, [r0, #0]
 800aa48:	b108      	cbz	r0, 800aa4e <core_set_error+0xa>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	4770      	bx	lr
 800aa4e:	7019      	strb	r1, [r3, #0]
 800aa50:	2001      	movs	r0, #1
 800aa52:	6819      	ldr	r1, [r3, #0]
 800aa54:	f362 211f 	bfi	r1, r2, #8, #24
 800aa58:	6019      	str	r1, [r3, #0]
 800aa5a:	4770      	bx	lr

0800aa5c <ai_check_custom_types>:
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	4b12      	ldr	r3, [pc, #72]	; (800aaa8 <ai_check_custom_types+0x4c>)
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	b118      	cbz	r0, 800aa6c <ai_check_custom_types+0x10>
 800aa64:	7803      	ldrb	r3, [r0, #0]
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d002      	beq.n	800aa70 <ai_check_custom_types+0x14>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	b002      	add	sp, #8
 800aa6e:	4770      	bx	lr
 800aa70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d004      	beq.n	800aa82 <ai_check_custom_types+0x26>
 800aa78:	2001      	movs	r0, #1
 800aa7a:	f080 0001 	eor.w	r0, r0, #1
 800aa7e:	b002      	add	sp, #8
 800aa80:	4770      	bx	lr
 800aa82:	7842      	ldrb	r2, [r0, #1]
 800aa84:	3001      	adds	r0, #1
 800aa86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d1f4      	bne.n	800aa78 <ai_check_custom_types+0x1c>
 800aa8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800aa92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d1ee      	bne.n	800aa78 <ai_check_custom_types+0x1c>
 800aa9a:	7842      	ldrb	r2, [r0, #1]
 800aa9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d1e9      	bne.n	800aa78 <ai_check_custom_types+0x1c>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e7e8      	b.n	800aa7a <ai_check_custom_types+0x1e>
 800aaa8:	84048403 	.word	0x84048403

0800aaac <ai_layers_init_all>:
 800aaac:	2100      	movs	r1, #0
 800aaae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aab0:	b13b      	cbz	r3, 800aac2 <ai_layers_init_all+0x16>
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	3101      	adds	r1, #1
 800aab6:	60d8      	str	r0, [r3, #12]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	4613      	mov	r3, r2
 800aabc:	d001      	beq.n	800aac2 <ai_layers_init_all+0x16>
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	d1f6      	bne.n	800aab0 <ai_layers_init_all+0x4>
 800aac2:	4608      	mov	r0, r1
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop

0800aac8 <ai_layers_post_init_all>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	2500      	movs	r5, #0
 800aacc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800aace:	b16c      	cbz	r4, 800aaec <ai_layers_post_init_all+0x24>
 800aad0:	6863      	ldr	r3, [r4, #4]
 800aad2:	07db      	lsls	r3, r3, #31
 800aad4:	d504      	bpl.n	800aae0 <ai_layers_post_init_all+0x18>
 800aad6:	6a23      	ldr	r3, [r4, #32]
 800aad8:	4620      	mov	r0, r4
 800aada:	b10b      	cbz	r3, 800aae0 <ai_layers_post_init_all+0x18>
 800aadc:	3501      	adds	r5, #1
 800aade:	4798      	blx	r3
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	461c      	mov	r4, r3
 800aae6:	d001      	beq.n	800aaec <ai_layers_post_init_all+0x24>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1f0      	bne.n	800aace <ai_layers_post_init_all+0x6>
 800aaec:	4628      	mov	r0, r5
 800aaee:	bd38      	pop	{r3, r4, r5, pc}

0800aaf0 <ai_layers_forward_all>:
 800aaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800aaf8:	4604      	mov	r4, r0
 800aafa:	f1b8 0f00 	cmp.w	r8, #0
 800aafe:	d02a      	beq.n	800ab56 <ai_layers_forward_all+0x66>
 800ab00:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ab02:	6381      	str	r1, [r0, #56]	; 0x38
 800ab04:	b319      	cbz	r1, 800ab4e <ai_layers_forward_all+0x5e>
 800ab06:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ab08:	2001      	movs	r0, #1
 800ab0a:	47c0      	blx	r8
 800ab0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ab0e:	b1f6      	cbz	r6, 800ab4e <ai_layers_forward_all+0x5e>
 800ab10:	2700      	movs	r7, #0
 800ab12:	4631      	mov	r1, r6
 800ab14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ab16:	2002      	movs	r0, #2
 800ab18:	47c0      	blx	r8
 800ab1a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	696b      	ldr	r3, [r5, #20]
 800ab20:	4798      	blx	r3
 800ab22:	692e      	ldr	r6, [r5, #16]
 800ab24:	2003      	movs	r0, #3
 800ab26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ab28:	42b5      	cmp	r5, r6
 800ab2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab2c:	d007      	beq.n	800ab3e <ai_layers_forward_all+0x4e>
 800ab2e:	47c0      	blx	r8
 800ab30:	3701      	adds	r7, #1
 800ab32:	63a6      	str	r6, [r4, #56]	; 0x38
 800ab34:	2e00      	cmp	r6, #0
 800ab36:	d1ec      	bne.n	800ab12 <ai_layers_forward_all+0x22>
 800ab38:	4638      	mov	r0, r7
 800ab3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab3e:	2003      	movs	r0, #3
 800ab40:	3701      	adds	r7, #1
 800ab42:	47c0      	blx	r8
 800ab44:	2300      	movs	r3, #0
 800ab46:	4638      	mov	r0, r7
 800ab48:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4e:	2700      	movs	r7, #0
 800ab50:	4638      	mov	r0, r7
 800ab52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab56:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ab58:	6385      	str	r5, [r0, #56]	; 0x38
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	d0f7      	beq.n	800ab4e <ai_layers_forward_all+0x5e>
 800ab5e:	4647      	mov	r7, r8
 800ab60:	696b      	ldr	r3, [r5, #20]
 800ab62:	4628      	mov	r0, r5
 800ab64:	4798      	blx	r3
 800ab66:	462b      	mov	r3, r5
 800ab68:	692d      	ldr	r5, [r5, #16]
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	d004      	beq.n	800ab78 <ai_layers_forward_all+0x88>
 800ab6e:	3701      	adds	r7, #1
 800ab70:	63a5      	str	r5, [r4, #56]	; 0x38
 800ab72:	2d00      	cmp	r5, #0
 800ab74:	d1f4      	bne.n	800ab60 <ai_layers_forward_all+0x70>
 800ab76:	e7df      	b.n	800ab38 <ai_layers_forward_all+0x48>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	3701      	adds	r7, #1
 800ab7c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab7e:	e7db      	b.n	800ab38 <ai_layers_forward_all+0x48>

0800ab80 <ai_dict_decompress_f32>:
 800ab80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab84:	9d08      	ldr	r5, [sp, #32]
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ab8c:	d00e      	beq.n	800abac <ai_dict_decompress_f32+0x2c>
 800ab8e:	2b08      	cmp	r3, #8
 800ab90:	d10a      	bne.n	800aba8 <ai_dict_decompress_f32+0x28>
 800ab92:	42a8      	cmp	r0, r5
 800ab94:	d208      	bcs.n	800aba8 <ai_dict_decompress_f32+0x28>
 800ab96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f840 3b04 	str.w	r3, [r0], #4
 800aba4:	4285      	cmp	r5, r0
 800aba6:	d8f6      	bhi.n	800ab96 <ai_dict_decompress_f32+0x16>
 800aba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abac:	9b07      	ldr	r3, [sp, #28]
 800abae:	085e      	lsrs	r6, r3, #1
 800abb0:	f003 0701 	and.w	r7, r3, #1
 800abb4:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800abb8:	f106 38ff 	add.w	r8, r6, #4294967295
 800abbc:	42a8      	cmp	r0, r5
 800abbe:	d2f3      	bcs.n	800aba8 <ai_dict_decompress_f32+0x28>
 800abc0:	b33e      	cbz	r6, 800ac12 <ai_dict_decompress_f32+0x92>
 800abc2:	f100 0e08 	add.w	lr, r0, #8
 800abc6:	f101 3cff 	add.w	ip, r1, #4294967295
 800abca:	eb01 0408 	add.w	r4, r1, r8
 800abce:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800abd2:	f10e 0e08 	add.w	lr, lr, #8
 800abd6:	091b      	lsrs	r3, r3, #4
 800abd8:	4564      	cmp	r4, ip
 800abda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f84e 3c10 	str.w	r3, [lr, #-16]
 800abe4:	f89c 3000 	ldrb.w	r3, [ip]
 800abe8:	f003 030f 	and.w	r3, r3, #15
 800abec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800abf6:	d1ea      	bne.n	800abce <ai_dict_decompress_f32+0x4e>
 800abf8:	4431      	add	r1, r6
 800abfa:	4448      	add	r0, r9
 800abfc:	2f00      	cmp	r7, #0
 800abfe:	d0dd      	beq.n	800abbc <ai_dict_decompress_f32+0x3c>
 800ac00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac04:	091b      	lsrs	r3, r3, #4
 800ac06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f840 3b04 	str.w	r3, [r0], #4
 800ac10:	e7d4      	b.n	800abbc <ai_dict_decompress_f32+0x3c>
 800ac12:	2f00      	cmp	r7, #0
 800ac14:	d1f4      	bne.n	800ac00 <ai_dict_decompress_f32+0x80>
 800ac16:	42a8      	cmp	r0, r5
 800ac18:	d3fd      	bcc.n	800ac16 <ai_dict_decompress_f32+0x96>
 800ac1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac1e:	bf00      	nop

0800ac20 <forward_conv2d_if32of32wf32>:
 800ac20:	6982      	ldr	r2, [r0, #24]
 800ac22:	8813      	ldrh	r3, [r2, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8092 	beq.w	800ad4e <forward_conv2d_if32of32wf32+0x12e>
 800ac2a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800ac2e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800ac32:	b102      	cbz	r2, 800ac36 <forward_conv2d_if32of32wf32+0x16>
 800ac34:	6812      	ldr	r2, [r2, #0]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	f000 80b3 	beq.w	800ada2 <forward_conv2d_if32of32wf32+0x182>
 800ac3c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800ac40:	b101      	cbz	r1, 800ac44 <forward_conv2d_if32of32wf32+0x24>
 800ac42:	6809      	ldr	r1, [r1, #0]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	f000 8084 	beq.w	800ad52 <forward_conv2d_if32of32wf32+0x132>
 800ac4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4e:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800ac52:	b0a1      	sub	sp, #132	; 0x84
 800ac54:	2e00      	cmp	r6, #0
 800ac56:	f000 809d 	beq.w	800ad94 <forward_conv2d_if32of32wf32+0x174>
 800ac5a:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 800ac5e:	6834      	ldr	r4, [r6, #0]
 800ac60:	2d01      	cmp	r5, #1
 800ac62:	f240 8099 	bls.w	800ad98 <forward_conv2d_if32of32wf32+0x178>
 800ac66:	6876      	ldr	r6, [r6, #4]
 800ac68:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800ac6c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800ac70:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ac74:	6992      	ldr	r2, [r2, #24]
 800ac76:	9713      	str	r7, [sp, #76]	; 0x4c
 800ac78:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800ac7c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800ac80:	9714      	str	r7, [sp, #80]	; 0x50
 800ac82:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800ac86:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800ac8a:	9715      	str	r7, [sp, #84]	; 0x54
 800ac8c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800ac90:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800ac94:	9716      	str	r7, [sp, #88]	; 0x58
 800ac96:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800ac9a:	69a2      	ldr	r2, [r4, #24]
 800ac9c:	9717      	str	r7, [sp, #92]	; 0x5c
 800ac9e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800aca2:	9718      	str	r7, [sp, #96]	; 0x60
 800aca4:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 800aca6:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800acaa:	9719      	str	r7, [sp, #100]	; 0x64
 800acac:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 800acae:	69c0      	ldr	r0, [r0, #28]
 800acb0:	971a      	str	r7, [sp, #104]	; 0x68
 800acb2:	901f      	str	r0, [sp, #124]	; 0x7c
 800acb4:	f8be 0000 	ldrh.w	r0, [lr]
 800acb8:	901b      	str	r0, [sp, #108]	; 0x6c
 800acba:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800acbe:	901c      	str	r0, [sp, #112]	; 0x70
 800acc0:	b2a8      	uxth	r0, r5
 800acc2:	901d      	str	r0, [sp, #116]	; 0x74
 800acc4:	b2a0      	uxth	r0, r4
 800acc6:	901e      	str	r0, [sp, #120]	; 0x78
 800acc8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800accc:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 800acd0:	b10e      	cbz	r6, 800acd6 <forward_conv2d_if32of32wf32+0xb6>
 800acd2:	69b0      	ldr	r0, [r6, #24]
 800acd4:	6886      	ldr	r6, [r0, #8]
 800acd6:	b2a4      	uxth	r4, r4
 800acd8:	6989      	ldr	r1, [r1, #24]
 800acda:	f108 30ff 	add.w	r0, r8, #4294967295
 800acde:	b2ad      	uxth	r5, r5
 800ace0:	3c01      	subs	r4, #1
 800ace2:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800ace6:	3d01      	subs	r5, #1
 800ace8:	6811      	ldr	r1, [r2, #0]
 800acea:	fb00 8404 	mla	r4, r0, r4, r8
 800acee:	1e78      	subs	r0, r7, #1
 800acf0:	fb00 7505 	mla	r5, r0, r5, r7
 800acf4:	f3c1 4043 	ubfx	r0, r1, #17, #4
 800acf8:	2804      	cmp	r0, #4
 800acfa:	d02d      	beq.n	800ad58 <forward_conv2d_if32of32wf32+0x138>
 800acfc:	2808      	cmp	r0, #8
 800acfe:	d02b      	beq.n	800ad58 <forward_conv2d_if32of32wf32+0x138>
 800ad00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad02:	464a      	mov	r2, r9
 800ad04:	940c      	str	r4, [sp, #48]	; 0x30
 800ad06:	4651      	mov	r1, sl
 800ad08:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ad0a:	4658      	mov	r0, fp
 800ad0c:	9706      	str	r7, [sp, #24]
 800ad0e:	940f      	str	r4, [sp, #60]	; 0x3c
 800ad10:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 800ad14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ad16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ad22:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800ad26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad28:	9305      	str	r3, [sp, #20]
 800ad2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad30:	9303      	str	r3, [sp, #12]
 800ad32:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad34:	9302      	str	r3, [sp, #8]
 800ad36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad40:	9310      	str	r3, [sp, #64]	; 0x40
 800ad42:	4633      	mov	r3, r6
 800ad44:	f001 fde4 	bl	800c910 <forward_lite_conv2d_if32of32wf32>
 800ad48:	b021      	add	sp, #132	; 0x84
 800ad4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	deff      	udf	#255	; 0xff
 800ad52:	2300      	movs	r3, #0
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	deff      	udf	#255	; 0xff
 800ad58:	68d2      	ldr	r2, [r2, #12]
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	d0d0      	beq.n	800ad00 <forward_conv2d_if32of32wf32+0xe0>
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d022      	beq.n	800ada8 <forward_conv2d_if32of32wf32+0x188>
 800ad62:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800ad66:	b1cb      	cbz	r3, 800ad9c <forward_conv2d_if32of32wf32+0x17c>
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	b1bb      	cbz	r3, 800ad9c <forward_conv2d_if32of32wf32+0x17c>
 800ad6c:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800ad70:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 800ad74:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800ad78:	410b      	asrs	r3, r1
 800ad7a:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	9101      	str	r1, [sp, #4]
 800ad82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ad84:	9100      	str	r1, [sp, #0]
 800ad86:	4649      	mov	r1, r9
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	bf18      	it	ne
 800ad8c:	4681      	movne	r9, r0
 800ad8e:	f7ff fef7 	bl	800ab80 <ai_dict_decompress_f32>
 800ad92:	e7b5      	b.n	800ad00 <forward_conv2d_if32of32wf32+0xe0>
 800ad94:	4634      	mov	r4, r6
 800ad96:	e767      	b.n	800ac68 <forward_conv2d_if32of32wf32+0x48>
 800ad98:	2600      	movs	r6, #0
 800ad9a:	e765      	b.n	800ac68 <forward_conv2d_if32of32wf32+0x48>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	deff      	udf	#255	; 0xff
 800ada2:	2300      	movs	r3, #0
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	deff      	udf	#255	; 0xff
 800ada8:	2300      	movs	r3, #0
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	deff      	udf	#255	; 0xff
 800adae:	bf00      	nop

0800adb0 <forward_dw_if32of32wf32>:
 800adb0:	6982      	ldr	r2, [r0, #24]
 800adb2:	8813      	ldrh	r3, [r2, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 8092 	beq.w	800aede <forward_dw_if32of32wf32+0x12e>
 800adba:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800adbe:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800adc2:	b102      	cbz	r2, 800adc6 <forward_dw_if32of32wf32+0x16>
 800adc4:	6812      	ldr	r2, [r2, #0]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	f000 80b3 	beq.w	800af32 <forward_dw_if32of32wf32+0x182>
 800adcc:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800add0:	b101      	cbz	r1, 800add4 <forward_dw_if32of32wf32+0x24>
 800add2:	6809      	ldr	r1, [r1, #0]
 800add4:	2b02      	cmp	r3, #2
 800add6:	f000 8084 	beq.w	800aee2 <forward_dw_if32of32wf32+0x132>
 800adda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adde:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800ade2:	b0a1      	sub	sp, #132	; 0x84
 800ade4:	2e00      	cmp	r6, #0
 800ade6:	f000 809d 	beq.w	800af24 <forward_dw_if32of32wf32+0x174>
 800adea:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 800adee:	6834      	ldr	r4, [r6, #0]
 800adf0:	2d01      	cmp	r5, #1
 800adf2:	f240 8099 	bls.w	800af28 <forward_dw_if32of32wf32+0x178>
 800adf6:	6876      	ldr	r6, [r6, #4]
 800adf8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800adfc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800ae00:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ae04:	6992      	ldr	r2, [r2, #24]
 800ae06:	9713      	str	r7, [sp, #76]	; 0x4c
 800ae08:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800ae0c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800ae10:	9714      	str	r7, [sp, #80]	; 0x50
 800ae12:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800ae16:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800ae1a:	9715      	str	r7, [sp, #84]	; 0x54
 800ae1c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800ae20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800ae24:	9716      	str	r7, [sp, #88]	; 0x58
 800ae26:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800ae2a:	69a2      	ldr	r2, [r4, #24]
 800ae2c:	9717      	str	r7, [sp, #92]	; 0x5c
 800ae2e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800ae32:	9718      	str	r7, [sp, #96]	; 0x60
 800ae34:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 800ae36:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800ae3a:	9719      	str	r7, [sp, #100]	; 0x64
 800ae3c:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 800ae3e:	69c0      	ldr	r0, [r0, #28]
 800ae40:	971a      	str	r7, [sp, #104]	; 0x68
 800ae42:	901f      	str	r0, [sp, #124]	; 0x7c
 800ae44:	f8be 0000 	ldrh.w	r0, [lr]
 800ae48:	901b      	str	r0, [sp, #108]	; 0x6c
 800ae4a:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800ae4e:	901c      	str	r0, [sp, #112]	; 0x70
 800ae50:	b2a8      	uxth	r0, r5
 800ae52:	901d      	str	r0, [sp, #116]	; 0x74
 800ae54:	b2a0      	uxth	r0, r4
 800ae56:	901e      	str	r0, [sp, #120]	; 0x78
 800ae58:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800ae5c:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 800ae60:	b10e      	cbz	r6, 800ae66 <forward_dw_if32of32wf32+0xb6>
 800ae62:	69b0      	ldr	r0, [r6, #24]
 800ae64:	6886      	ldr	r6, [r0, #8]
 800ae66:	b2a4      	uxth	r4, r4
 800ae68:	6989      	ldr	r1, [r1, #24]
 800ae6a:	f108 30ff 	add.w	r0, r8, #4294967295
 800ae6e:	b2ad      	uxth	r5, r5
 800ae70:	3c01      	subs	r4, #1
 800ae72:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800ae76:	3d01      	subs	r5, #1
 800ae78:	6811      	ldr	r1, [r2, #0]
 800ae7a:	fb00 8404 	mla	r4, r0, r4, r8
 800ae7e:	1e78      	subs	r0, r7, #1
 800ae80:	fb00 7505 	mla	r5, r0, r5, r7
 800ae84:	f3c1 4043 	ubfx	r0, r1, #17, #4
 800ae88:	2804      	cmp	r0, #4
 800ae8a:	d02d      	beq.n	800aee8 <forward_dw_if32of32wf32+0x138>
 800ae8c:	2808      	cmp	r0, #8
 800ae8e:	d02b      	beq.n	800aee8 <forward_dw_if32of32wf32+0x138>
 800ae90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae92:	464a      	mov	r2, r9
 800ae94:	940c      	str	r4, [sp, #48]	; 0x30
 800ae96:	4651      	mov	r1, sl
 800ae98:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ae9a:	4658      	mov	r0, fp
 800ae9c:	9706      	str	r7, [sp, #24]
 800ae9e:	940f      	str	r4, [sp, #60]	; 0x3c
 800aea0:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 800aea4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aea6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aeaa:	930a      	str	r3, [sp, #40]	; 0x28
 800aeac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeae:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aeb2:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800aeb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aeb8:	9305      	str	r3, [sp, #20]
 800aeba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aec0:	9303      	str	r3, [sp, #12]
 800aec2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aec8:	9301      	str	r3, [sp, #4]
 800aeca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aed0:	9310      	str	r3, [sp, #64]	; 0x40
 800aed2:	4633      	mov	r3, r6
 800aed4:	f001 fe7c 	bl	800cbd0 <forward_lite_dw_if32of32wf32>
 800aed8:	b021      	add	sp, #132	; 0x84
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	deff      	udf	#255	; 0xff
 800aee2:	2300      	movs	r3, #0
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	deff      	udf	#255	; 0xff
 800aee8:	68d2      	ldr	r2, [r2, #12]
 800aeea:	2a00      	cmp	r2, #0
 800aeec:	d0d0      	beq.n	800ae90 <forward_dw_if32of32wf32+0xe0>
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d022      	beq.n	800af38 <forward_dw_if32of32wf32+0x188>
 800aef2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800aef6:	b1cb      	cbz	r3, 800af2c <forward_dw_if32of32wf32+0x17c>
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	b1bb      	cbz	r3, 800af2c <forward_dw_if32of32wf32+0x17c>
 800aefc:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800af00:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 800af04:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800af08:	410b      	asrs	r3, r1
 800af0a:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	9101      	str	r1, [sp, #4]
 800af12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af14:	9100      	str	r1, [sp, #0]
 800af16:	4649      	mov	r1, r9
 800af18:	2800      	cmp	r0, #0
 800af1a:	bf18      	it	ne
 800af1c:	4681      	movne	r9, r0
 800af1e:	f7ff fe2f 	bl	800ab80 <ai_dict_decompress_f32>
 800af22:	e7b5      	b.n	800ae90 <forward_dw_if32of32wf32+0xe0>
 800af24:	4634      	mov	r4, r6
 800af26:	e767      	b.n	800adf8 <forward_dw_if32of32wf32+0x48>
 800af28:	2600      	movs	r6, #0
 800af2a:	e765      	b.n	800adf8 <forward_dw_if32of32wf32+0x48>
 800af2c:	2300      	movs	r3, #0
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	deff      	udf	#255	; 0xff
 800af32:	2300      	movs	r3, #0
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	deff      	udf	#255	; 0xff
 800af38:	2300      	movs	r3, #0
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	deff      	udf	#255	; 0xff
 800af3e:	bf00      	nop

0800af40 <forward_dense>:
 800af40:	6983      	ldr	r3, [r0, #24]
 800af42:	881a      	ldrh	r2, [r3, #0]
 800af44:	2a00      	cmp	r2, #0
 800af46:	f000 80f0 	beq.w	800b12a <forward_dense+0x1ea>
 800af4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4e:	ed2d 8b02 	vpush	{d8}
 800af52:	6858      	ldr	r0, [r3, #4]
 800af54:	b09b      	sub	sp, #108	; 0x6c
 800af56:	6845      	ldr	r5, [r0, #4]
 800af58:	b105      	cbz	r5, 800af5c <forward_dense+0x1c>
 800af5a:	682d      	ldr	r5, [r5, #0]
 800af5c:	2a01      	cmp	r2, #1
 800af5e:	f000 840a 	beq.w	800b776 <forward_dense+0x836>
 800af62:	6906      	ldr	r6, [r0, #16]
 800af64:	b106      	cbz	r6, 800af68 <forward_dense+0x28>
 800af66:	6836      	ldr	r6, [r6, #0]
 800af68:	2a02      	cmp	r2, #2
 800af6a:	f000 80e0 	beq.w	800b12e <forward_dense+0x1ee>
 800af6e:	69c3      	ldr	r3, [r0, #28]
 800af70:	930d      	str	r3, [sp, #52]	; 0x34
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 83f1 	beq.w	800b75a <forward_dense+0x81a>
 800af78:	4619      	mov	r1, r3
 800af7a:	8b03      	ldrh	r3, [r0, #24]
 800af7c:	6809      	ldr	r1, [r1, #0]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	910f      	str	r1, [sp, #60]	; 0x3c
 800af82:	f240 83ec 	bls.w	800b75e <forward_dense+0x81e>
 800af86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	930d      	str	r3, [sp, #52]	; 0x34
 800af8c:	460b      	mov	r3, r1
 800af8e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800af92:	2a03      	cmp	r2, #3
 800af94:	68eb      	ldr	r3, [r5, #12]
 800af96:	68f7      	ldr	r7, [r6, #12]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	687c      	ldr	r4, [r7, #4]
 800af9c:	9317      	str	r3, [sp, #92]	; 0x5c
 800af9e:	f8d8 3000 	ldr.w	r3, [r8]
 800afa2:	4621      	mov	r1, r4
 800afa4:	9419      	str	r4, [sp, #100]	; 0x64
 800afa6:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800afaa:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800afae:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800afb2:	fb01 f404 	mul.w	r4, r1, r4
 800afb6:	fa4e f10c 	asr.w	r1, lr, ip
 800afba:	9116      	str	r1, [sp, #88]	; 0x58
 800afbc:	f000 83d8 	beq.w	800b770 <forward_dense+0x830>
 800afc0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800afc2:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	f000 83c2 	beq.w	800b750 <forward_dense+0x810>
 800afcc:	6812      	ldr	r2, [r2, #0]
 800afce:	2a00      	cmp	r2, #0
 800afd0:	f000 83be 	beq.w	800b750 <forward_dense+0x810>
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800afda:	f000 83a8 	beq.w	800b72e <forward_dense+0x7ee>
 800afde:	2b08      	cmp	r3, #8
 800afe0:	f000 83a5 	beq.w	800b72e <forward_dense+0x7ee>
 800afe4:	f04f 0a00 	mov.w	sl, #0
 800afe8:	69ab      	ldr	r3, [r5, #24]
 800afea:	fb07 f404 	mul.w	r4, r7, r4
 800afee:	69b2      	ldr	r2, [r6, #24]
 800aff0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800aff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aff6:	6892      	ldr	r2, [r2, #8]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800affe:	9206      	str	r2, [sp, #24]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	428a      	cmp	r2, r1
 800b004:	9110      	str	r1, [sp, #64]	; 0x40
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b00a:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800b00e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b012:	900e      	str	r0, [sp, #56]	; 0x38
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	f080 8380 	bcs.w	800b71a <forward_dense+0x7da>
 800b01a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b01c:	4654      	mov	r4, sl
 800b01e:	4bb9      	ldr	r3, [pc, #740]	; (800b304 <forward_dense+0x3c4>)
 800b020:	46ca      	mov	sl, r9
 800b022:	08d0      	lsrs	r0, r2, #3
 800b024:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800b308 <forward_dense+0x3c8>
 800b028:	4413      	add	r3, r2
 800b02a:	9009      	str	r0, [sp, #36]	; 0x24
 800b02c:	0099      	lsls	r1, r3, #2
 800b02e:	f022 0301 	bic.w	r3, r2, #1
 800b032:	f002 0201 	and.w	r2, r2, #1
 800b036:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b03a:	9118      	str	r1, [sp, #96]	; 0x60
 800b03c:	920a      	str	r2, [sp, #40]	; 0x28
 800b03e:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800b042:	9305      	str	r3, [sp, #20]
 800b044:	f101 0320 	add.w	r3, r1, #32
 800b048:	9207      	str	r2, [sp, #28]
 800b04a:	9311      	str	r3, [sp, #68]	; 0x44
 800b04c:	444b      	add	r3, r9
 800b04e:	469b      	mov	fp, r3
 800b050:	930b      	str	r3, [sp, #44]	; 0x2c
 800b052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	689a      	ldr	r2, [r3, #8]
 800b058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b05a:	b10b      	cbz	r3, 800b060 <forward_dense+0x120>
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2c00      	cmp	r4, #0
 800b062:	f000 834b 	beq.w	800b6fc <forward_dense+0x7bc>
 800b066:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b068:	2904      	cmp	r1, #4
 800b06a:	f000 826a 	beq.w	800b542 <forward_dense+0x602>
 800b06e:	9903      	ldr	r1, [sp, #12]
 800b070:	9806      	ldr	r0, [sp, #24]
 800b072:	4281      	cmp	r1, r0
 800b074:	f240 8356 	bls.w	800b724 <forward_dense+0x7e4>
 800b078:	4686      	mov	lr, r0
 800b07a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b07c:	eb00 090a 	add.w	r9, r0, sl
 800b080:	0941      	lsrs	r1, r0, #5
 800b082:	f10a 0004 	add.w	r0, sl, #4
 800b086:	f8cd 9020 	str.w	r9, [sp, #32]
 800b08a:	9012      	str	r0, [sp, #72]	; 0x48
 800b08c:	1c48      	adds	r0, r1, #1
 800b08e:	00c9      	lsls	r1, r1, #3
 800b090:	3110      	adds	r1, #16
 800b092:	9115      	str	r1, [sp, #84]	; 0x54
 800b094:	00c1      	lsls	r1, r0, #3
 800b096:	9113      	str	r1, [sp, #76]	; 0x4c
 800b098:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800b09c:	9114      	str	r1, [sp, #80]	; 0x50
 800b09e:	f1a9 0104 	sub.w	r1, r9, #4
 800b0a2:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800b0a6:	910c      	str	r1, [sp, #48]	; 0x30
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 8128 	beq.w	800b2fe <forward_dense+0x3be>
 800b0ae:	ecb3 5a01 	vldmia	r3!, {s10}
 800b0b2:	f1b9 0f07 	cmp.w	r9, #7
 800b0b6:	d83d      	bhi.n	800b134 <forward_dense+0x1f4>
 800b0b8:	45da      	cmp	sl, fp
 800b0ba:	d211      	bcs.n	800b0e0 <forward_dense+0x1a0>
 800b0bc:	eddf 7a92 	vldr	s15, [pc, #584]	; 800b308 <forward_dense+0x3c8>
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	4615      	mov	r5, r2
 800b0c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b0c8:	ecb0 7a01 	vldmia	r0!, {s14}
 800b0cc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b0d0:	4558      	cmp	r0, fp
 800b0d2:	edd1 6a00 	vldr	s13, [r1]
 800b0d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b0da:	d3f3      	bcc.n	800b0c4 <forward_dense+0x184>
 800b0dc:	ee35 5a27 	vadd.f32	s10, s10, s15
 800b0e0:	9904      	ldr	r1, [sp, #16]
 800b0e2:	ecae 5a01 	vstmia	lr!, {s10}
 800b0e6:	440a      	add	r2, r1
 800b0e8:	9903      	ldr	r1, [sp, #12]
 800b0ea:	458e      	cmp	lr, r1
 800b0ec:	d3dc      	bcc.n	800b0a8 <forward_dense+0x168>
 800b0ee:	9a06      	ldr	r2, [sp, #24]
 800b0f0:	1a8b      	subs	r3, r1, r2
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	f023 0303 	bic.w	r3, r3, #3
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	18d3      	adds	r3, r2, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	9306      	str	r3, [sp, #24]
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b104:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b106:	4413      	add	r3, r2
 800b108:	9a07      	ldr	r2, [sp, #28]
 800b10a:	4281      	cmp	r1, r0
 800b10c:	9303      	str	r3, [sp, #12]
 800b10e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b110:	441a      	add	r2, r3
 800b112:	449b      	add	fp, r3
 800b114:	9207      	str	r2, [sp, #28]
 800b116:	9a05      	ldr	r2, [sp, #20]
 800b118:	441a      	add	r2, r3
 800b11a:	9205      	str	r2, [sp, #20]
 800b11c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b11e:	4692      	mov	sl, r2
 800b120:	f080 82fb 	bcs.w	800b71a <forward_dense+0x7da>
 800b124:	441a      	add	r2, r3
 800b126:	920b      	str	r2, [sp, #44]	; 0x2c
 800b128:	e793      	b.n	800b052 <forward_dense+0x112>
 800b12a:	6853      	ldr	r3, [r2, #4]
 800b12c:	deff      	udf	#255	; 0xff
 800b12e:	2300      	movs	r3, #0
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	deff      	udf	#255	; 0xff
 800b134:	f002 0103 	and.w	r1, r2, #3
 800b138:	2902      	cmp	r1, #2
 800b13a:	f000 81e6 	beq.w	800b50a <forward_dense+0x5ca>
 800b13e:	2903      	cmp	r1, #3
 800b140:	f000 80e4 	beq.w	800b30c <forward_dense+0x3cc>
 800b144:	2901      	cmp	r1, #1
 800b146:	f000 81ef 	beq.w	800b528 <forward_dense+0x5e8>
 800b14a:	9908      	ldr	r1, [sp, #32]
 800b14c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b308 <forward_dense+0x3c8>
 800b150:	458a      	cmp	sl, r1
 800b152:	f200 82e9 	bhi.w	800b728 <forward_dense+0x7e8>
 800b156:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b158:	f102 0108 	add.w	r1, r2, #8
 800b15c:	f10a 0020 	add.w	r0, sl, #32
 800b160:	18ae      	adds	r6, r5, r2
 800b162:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800b166:	3108      	adds	r1, #8
 800b168:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800b16c:	3020      	adds	r0, #32
 800b16e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b172:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800b176:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800b17a:	edd5 7a00 	vldr	s15, [r5]
 800b17e:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800b182:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800b186:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800b18a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b18e:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800b192:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800b196:	edd5 2a00 	vldr	s5, [r5]
 800b19a:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800b19e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b1a2:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800b1a6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b1aa:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800b1ae:	ed95 3a00 	vldr	s6, [r5]
 800b1b2:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800b1b6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b1ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b1be:	edd5 3a00 	vldr	s7, [r5]
 800b1c2:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800b1c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b1ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b1ce:	ed95 4a00 	vldr	s8, [r5]
 800b1d2:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800b1d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b1da:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b1de:	edd5 4a00 	vldr	s9, [r5]
 800b1e2:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800b1e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b1ea:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800b1ee:	edd5 5a00 	vldr	s11, [r5]
 800b1f2:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800b1f6:	428e      	cmp	r6, r1
 800b1f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b1fc:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b200:	ed95 6a00 	vldr	s12, [r5]
 800b204:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b20c:	d1a9      	bne.n	800b162 <forward_dense+0x222>
 800b20e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b210:	1850      	adds	r0, r2, r1
 800b212:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b214:	4559      	cmp	r1, fp
 800b216:	d26f      	bcs.n	800b2f8 <forward_dense+0x3b8>
 800b218:	7805      	ldrb	r5, [r0, #0]
 800b21a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b21e:	edd5 7a00 	vldr	s15, [r5]
 800b222:	460d      	mov	r5, r1
 800b224:	ecf5 6a01 	vldmia	r5!, {s13}
 800b228:	45ab      	cmp	fp, r5
 800b22a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b22e:	d963      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b230:	7845      	ldrb	r5, [r0, #1]
 800b232:	edd1 6a01 	vldr	s13, [r1, #4]
 800b236:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b23a:	edd5 7a00 	vldr	s15, [r5]
 800b23e:	f101 0508 	add.w	r5, r1, #8
 800b242:	45ab      	cmp	fp, r5
 800b244:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b248:	d956      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b24a:	7885      	ldrb	r5, [r0, #2]
 800b24c:	edd1 6a02 	vldr	s13, [r1, #8]
 800b250:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b254:	edd5 7a00 	vldr	s15, [r5]
 800b258:	f101 050c 	add.w	r5, r1, #12
 800b25c:	45ab      	cmp	fp, r5
 800b25e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b262:	d949      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b264:	78c5      	ldrb	r5, [r0, #3]
 800b266:	edd1 6a03 	vldr	s13, [r1, #12]
 800b26a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b26e:	edd5 7a00 	vldr	s15, [r5]
 800b272:	f101 0510 	add.w	r5, r1, #16
 800b276:	45ab      	cmp	fp, r5
 800b278:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b27c:	d93c      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b27e:	7905      	ldrb	r5, [r0, #4]
 800b280:	edd1 6a04 	vldr	s13, [r1, #16]
 800b284:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b288:	edd5 7a00 	vldr	s15, [r5]
 800b28c:	f101 0514 	add.w	r5, r1, #20
 800b290:	45ab      	cmp	fp, r5
 800b292:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b296:	d92f      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b298:	7945      	ldrb	r5, [r0, #5]
 800b29a:	edd1 6a05 	vldr	s13, [r1, #20]
 800b29e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b2a2:	edd5 7a00 	vldr	s15, [r5]
 800b2a6:	f101 0518 	add.w	r5, r1, #24
 800b2aa:	45ab      	cmp	fp, r5
 800b2ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b2b0:	d922      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b2b2:	7985      	ldrb	r5, [r0, #6]
 800b2b4:	edd1 6a06 	vldr	s13, [r1, #24]
 800b2b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b2bc:	edd5 7a00 	vldr	s15, [r5]
 800b2c0:	f101 051c 	add.w	r5, r1, #28
 800b2c4:	45ab      	cmp	fp, r5
 800b2c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b2ca:	d915      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b2cc:	79c5      	ldrb	r5, [r0, #7]
 800b2ce:	edd1 6a07 	vldr	s13, [r1, #28]
 800b2d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b2d6:	edd5 7a00 	vldr	s15, [r5]
 800b2da:	f101 0520 	add.w	r5, r1, #32
 800b2de:	45ab      	cmp	fp, r5
 800b2e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b2e4:	d908      	bls.n	800b2f8 <forward_dense+0x3b8>
 800b2e6:	edd1 7a08 	vldr	s15, [r1, #32]
 800b2ea:	7a01      	ldrb	r1, [r0, #8]
 800b2ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b2f0:	edd1 6a00 	vldr	s13, [r1]
 800b2f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b2f8:	ee35 5a07 	vadd.f32	s10, s10, s14
 800b2fc:	e6f0      	b.n	800b0e0 <forward_dense+0x1a0>
 800b2fe:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800b308 <forward_dense+0x3c8>
 800b302:	e6d6      	b.n	800b0b2 <forward_dense+0x172>
 800b304:	3ffffff8 	.word	0x3ffffff8
 800b308:	00000000 	.word	0x00000000
 800b30c:	eeb0 7a48 	vmov.f32	s14, s16
 800b310:	4650      	mov	r0, sl
 800b312:	4611      	mov	r1, r2
 800b314:	468c      	mov	ip, r1
 800b316:	4606      	mov	r6, r0
 800b318:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800b31c:	ecf6 7a01 	vldmia	r6!, {s15}
 800b320:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b324:	edd5 6a00 	vldr	s13, [r5]
 800b328:	9d08      	ldr	r5, [sp, #32]
 800b32a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b32e:	42ae      	cmp	r6, r5
 800b330:	d866      	bhi.n	800b400 <forward_dense+0x4c0>
 800b332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b334:	f101 0711 	add.w	r7, r1, #17
 800b338:	3109      	adds	r1, #9
 800b33a:	eba5 0800 	sub.w	r8, r5, r0
 800b33e:	3024      	adds	r0, #36	; 0x24
 800b340:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800b344:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800b348:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800b34c:	3108      	adds	r1, #8
 800b34e:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800b352:	3020      	adds	r0, #32
 800b354:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b358:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800b35c:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800b360:	edd5 7a00 	vldr	s15, [r5]
 800b364:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800b368:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800b36c:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800b370:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b374:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800b378:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800b37c:	edd5 2a00 	vldr	s5, [r5]
 800b380:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800b384:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b388:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800b38c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b390:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800b394:	ed95 3a00 	vldr	s6, [r5]
 800b398:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800b39c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b3a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b3a4:	edd5 3a00 	vldr	s7, [r5]
 800b3a8:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800b3ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b3b0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b3b4:	ed95 4a00 	vldr	s8, [r5]
 800b3b8:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800b3bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b3c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b3c4:	edd5 4a00 	vldr	s9, [r5]
 800b3c8:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800b3cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b3d0:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800b3d4:	edd5 5a00 	vldr	s11, [r5]
 800b3d8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800b3dc:	428f      	cmp	r7, r1
 800b3de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b3e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b3e6:	ed95 6a00 	vldr	s12, [r5]
 800b3ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b3ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3f2:	d1a9      	bne.n	800b348 <forward_dense+0x408>
 800b3f4:	f108 0801 	add.w	r8, r8, #1
 800b3f8:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800b3fc:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800b400:	455e      	cmp	r6, fp
 800b402:	f4bf af79 	bcs.w	800b2f8 <forward_dense+0x3b8>
 800b406:	f89c 1000 	ldrb.w	r1, [ip]
 800b40a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b40e:	edd1 7a00 	vldr	s15, [r1]
 800b412:	4631      	mov	r1, r6
 800b414:	ecf1 6a01 	vldmia	r1!, {s13}
 800b418:	458b      	cmp	fp, r1
 800b41a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b41e:	f67f af6b 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b422:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800b426:	edd6 6a01 	vldr	s13, [r6, #4]
 800b42a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b42e:	edd1 7a00 	vldr	s15, [r1]
 800b432:	f106 0108 	add.w	r1, r6, #8
 800b436:	458b      	cmp	fp, r1
 800b438:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b43c:	f67f af5c 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b440:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800b444:	edd6 6a02 	vldr	s13, [r6, #8]
 800b448:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b44c:	edd1 7a00 	vldr	s15, [r1]
 800b450:	f106 010c 	add.w	r1, r6, #12
 800b454:	458b      	cmp	fp, r1
 800b456:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b45a:	f67f af4d 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b45e:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800b462:	edd6 6a03 	vldr	s13, [r6, #12]
 800b466:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b46a:	edd1 7a00 	vldr	s15, [r1]
 800b46e:	f106 0110 	add.w	r1, r6, #16
 800b472:	458b      	cmp	fp, r1
 800b474:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b478:	f67f af3e 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b47c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800b480:	edd6 6a04 	vldr	s13, [r6, #16]
 800b484:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b488:	edd1 7a00 	vldr	s15, [r1]
 800b48c:	f106 0114 	add.w	r1, r6, #20
 800b490:	458b      	cmp	fp, r1
 800b492:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b496:	f67f af2f 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b49a:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800b49e:	edd6 6a05 	vldr	s13, [r6, #20]
 800b4a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b4a6:	edd1 7a00 	vldr	s15, [r1]
 800b4aa:	f106 0118 	add.w	r1, r6, #24
 800b4ae:	458b      	cmp	fp, r1
 800b4b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4b4:	f67f af20 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b4b8:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800b4bc:	edd6 6a06 	vldr	s13, [r6, #24]
 800b4c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b4c4:	edd1 7a00 	vldr	s15, [r1]
 800b4c8:	f106 011c 	add.w	r1, r6, #28
 800b4cc:	458b      	cmp	fp, r1
 800b4ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4d2:	f67f af11 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b4d6:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800b4da:	edd6 6a07 	vldr	s13, [r6, #28]
 800b4de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b4e2:	edd1 7a00 	vldr	s15, [r1]
 800b4e6:	f106 0120 	add.w	r1, r6, #32
 800b4ea:	458b      	cmp	fp, r1
 800b4ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4f0:	f67f af02 	bls.w	800b2f8 <forward_dense+0x3b8>
 800b4f4:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800b4f8:	edd6 7a08 	vldr	s15, [r6, #32]
 800b4fc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b500:	edd1 6a00 	vldr	s13, [r1]
 800b504:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b508:	e6f6      	b.n	800b2f8 <forward_dense+0x3b8>
 800b50a:	eeb0 7a48 	vmov.f32	s14, s16
 800b50e:	4650      	mov	r0, sl
 800b510:	4611      	mov	r1, r2
 800b512:	f811 5b01 	ldrb.w	r5, [r1], #1
 800b516:	ecf0 7a01 	vldmia	r0!, {s15}
 800b51a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b51e:	edd5 6a00 	vldr	s13, [r5]
 800b522:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b526:	e6f5      	b.n	800b314 <forward_dense+0x3d4>
 800b528:	4611      	mov	r1, r2
 800b52a:	edda 7a00 	vldr	s15, [sl]
 800b52e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b530:	f811 5b01 	ldrb.w	r5, [r1], #1
 800b534:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b538:	ed95 7a00 	vldr	s14, [r5]
 800b53c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b540:	e7e7      	b.n	800b512 <forward_dense+0x5d2>
 800b542:	9803      	ldr	r0, [sp, #12]
 800b544:	9906      	ldr	r1, [sp, #24]
 800b546:	4288      	cmp	r0, r1
 800b548:	f67f adda 	bls.w	800b100 <forward_dense+0x1c0>
 800b54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b54e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800b552:	468b      	mov	fp, r1
 800b554:	f100 0c01 	add.w	ip, r0, #1
 800b558:	9805      	ldr	r0, [sp, #20]
 800b55a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b55e:	3801      	subs	r0, #1
 800b560:	9008      	str	r0, [sp, #32]
 800b562:	2b00      	cmp	r3, #0
 800b564:	f000 80bf 	beq.w	800b6e6 <forward_dense+0x7a6>
 800b568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b56a:	ecf3 2a01 	vldmia	r3!, {s5}
 800b56e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800b308 <forward_dense+0x3c8>
 800b572:	2900      	cmp	r1, #0
 800b574:	f000 80bf 	beq.w	800b6f6 <forward_dense+0x7b6>
 800b578:	1d10      	adds	r0, r2, #4
 800b57a:	f10a 0120 	add.w	r1, sl, #32
 800b57e:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800b582:	3004      	adds	r0, #4
 800b584:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800b588:	3120      	adds	r1, #32
 800b58a:	f007 0e0f 	and.w	lr, r7, #15
 800b58e:	093f      	lsrs	r7, r7, #4
 800b590:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800b594:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800b598:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800b59c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800b5a0:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800b5a4:	edde 7a00 	vldr	s15, [lr]
 800b5a8:	ed97 3a00 	vldr	s6, [r7]
 800b5ac:	0937      	lsrs	r7, r6, #4
 800b5ae:	ee67 7a82 	vmul.f32	s15, s15, s4
 800b5b2:	f006 060f 	and.w	r6, r6, #15
 800b5b6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800b5ba:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800b5be:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b5c2:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800b5c6:	eee3 7a04 	vfma.f32	s15, s6, s8
 800b5ca:	ed97 3a00 	vldr	s6, [r7]
 800b5ce:	ed96 4a00 	vldr	s8, [r6]
 800b5d2:	092e      	lsrs	r6, r5, #4
 800b5d4:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800b5d8:	f005 050f 	and.w	r5, r5, #15
 800b5dc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b5e0:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800b5e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b5e8:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800b5ec:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800b5f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b5f4:	eee4 7a05 	vfma.f32	s15, s8, s10
 800b5f8:	ed96 4a00 	vldr	s8, [r6]
 800b5fc:	ed95 5a00 	vldr	s10, [r5]
 800b600:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800b604:	4560      	cmp	r0, ip
 800b606:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800b60a:	f005 050f 	and.w	r5, r5, #15
 800b60e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b612:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b616:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b61a:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b61e:	ed96 5a00 	vldr	s10, [r6]
 800b622:	ed95 6a00 	vldr	s12, [r5]
 800b626:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b62a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b62e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b632:	d1a4      	bne.n	800b57e <forward_dense+0x63e>
 800b634:	f1ac 0804 	sub.w	r8, ip, #4
 800b638:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800b63c:	9905      	ldr	r1, [sp, #20]
 800b63e:	458e      	cmp	lr, r1
 800b640:	d229      	bcs.n	800b696 <forward_dense+0x756>
 800b642:	9908      	ldr	r1, [sp, #32]
 800b644:	f10e 0008 	add.w	r0, lr, #8
 800b648:	f108 36ff 	add.w	r6, r8, #4294967295
 800b64c:	eba1 070e 	sub.w	r7, r1, lr
 800b650:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800b654:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800b658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b65c:	3008      	adds	r0, #8
 800b65e:	ed50 5a03 	vldr	s11, [r0, #-12]
 800b662:	f001 050f 	and.w	r5, r1, #15
 800b666:	0909      	lsrs	r1, r1, #4
 800b668:	ed50 6a04 	vldr	s13, [r0, #-16]
 800b66c:	42b7      	cmp	r7, r6
 800b66e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b672:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b676:	edd5 7a00 	vldr	s15, [r5]
 800b67a:	ed91 6a00 	vldr	s12, [r1]
 800b67e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b682:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b68a:	d1e5      	bne.n	800b658 <forward_dense+0x718>
 800b68c:	f109 0901 	add.w	r9, r9, #1
 800b690:	44c8      	add	r8, r9
 800b692:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800b696:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b698:	b1c1      	cbz	r1, 800b6cc <forward_dense+0x78c>
 800b69a:	f898 1000 	ldrb.w	r1, [r8]
 800b69e:	edde 7a00 	vldr	s15, [lr]
 800b6a2:	0909      	lsrs	r1, r1, #4
 800b6a4:	9804      	ldr	r0, [sp, #16]
 800b6a6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b6aa:	4402      	add	r2, r0
 800b6ac:	4484      	add	ip, r0
 800b6ae:	edd1 6a00 	vldr	s13, [r1]
 800b6b2:	9903      	ldr	r1, [sp, #12]
 800b6b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6b8:	ee72 2a87 	vadd.f32	s5, s5, s14
 800b6bc:	eceb 2a01 	vstmia	fp!, {s5}
 800b6c0:	4559      	cmp	r1, fp
 800b6c2:	f63f af4e 	bhi.w	800b562 <forward_dense+0x622>
 800b6c6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800b6ca:	e510      	b.n	800b0ee <forward_dense+0x1ae>
 800b6cc:	9904      	ldr	r1, [sp, #16]
 800b6ce:	ee32 7a87 	vadd.f32	s14, s5, s14
 800b6d2:	440a      	add	r2, r1
 800b6d4:	448c      	add	ip, r1
 800b6d6:	9903      	ldr	r1, [sp, #12]
 800b6d8:	ecab 7a01 	vstmia	fp!, {s14}
 800b6dc:	458b      	cmp	fp, r1
 800b6de:	d2f2      	bcs.n	800b6c6 <forward_dense+0x786>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f47f af41 	bne.w	800b568 <forward_dense+0x628>
 800b6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6e8:	eef0 2a48 	vmov.f32	s5, s16
 800b6ec:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800b77c <forward_dense+0x83c>
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	f47f af41 	bne.w	800b578 <forward_dense+0x638>
 800b6f6:	46d6      	mov	lr, sl
 800b6f8:	4690      	mov	r8, r2
 800b6fa:	e79f      	b.n	800b63c <forward_dense+0x6fc>
 800b6fc:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b6fe:	4651      	mov	r1, sl
 800b700:	9d06      	ldr	r5, [sp, #24]
 800b702:	9001      	str	r0, [sp, #4]
 800b704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b706:	9000      	str	r0, [sp, #0]
 800b708:	4628      	mov	r0, r5
 800b70a:	f001 fc55 	bl	800cfb8 <forward_lite_dense_if32of32wf32>
 800b70e:	462b      	mov	r3, r5
 800b710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b712:	4413      	add	r3, r2
 800b714:	4619      	mov	r1, r3
 800b716:	9306      	str	r3, [sp, #24]
 800b718:	e4f2      	b.n	800b100 <forward_dense+0x1c0>
 800b71a:	b01b      	add	sp, #108	; 0x6c
 800b71c:	ecbd 8b02 	vpop	{d8}
 800b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b724:	4601      	mov	r1, r0
 800b726:	e4eb      	b.n	800b100 <forward_dense+0x1c0>
 800b728:	4651      	mov	r1, sl
 800b72a:	4610      	mov	r0, r2
 800b72c:	e572      	b.n	800b214 <forward_dense+0x2d4>
 800b72e:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800b732:	f1b9 0f00 	cmp.w	r9, #0
 800b736:	d016      	beq.n	800b766 <forward_dense+0x826>
 800b738:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b73c:	f001 fea0 	bl	800d480 <ai_array_get_byte_size>
 800b740:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800b744:	4602      	mov	r2, r0
 800b746:	4640      	mov	r0, r8
 800b748:	4651      	mov	r1, sl
 800b74a:	f001 fd5d 	bl	800d208 <st_int8_copy>
 800b74e:	e44b      	b.n	800afe8 <forward_dense+0xa8>
 800b750:	2b04      	cmp	r3, #4
 800b752:	d00a      	beq.n	800b76a <forward_dense+0x82a>
 800b754:	f04f 0900 	mov.w	r9, #0
 800b758:	e441      	b.n	800afde <forward_dense+0x9e>
 800b75a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b75c:	e417      	b.n	800af8e <forward_dense+0x4e>
 800b75e:	2300      	movs	r3, #0
 800b760:	930d      	str	r3, [sp, #52]	; 0x34
 800b762:	460b      	mov	r3, r1
 800b764:	e413      	b.n	800af8e <forward_dense+0x4e>
 800b766:	46c2      	mov	sl, r8
 800b768:	e43e      	b.n	800afe8 <forward_dense+0xa8>
 800b76a:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800b76e:	e43b      	b.n	800afe8 <forward_dense+0xa8>
 800b770:	2300      	movs	r3, #0
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	deff      	udf	#255	; 0xff
 800b776:	2300      	movs	r3, #0
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	deff      	udf	#255	; 0xff
 800b77c:	00000000 	.word	0x00000000

0800b780 <forward_split>:
 800b780:	6983      	ldr	r3, [r0, #24]
 800b782:	8819      	ldrh	r1, [r3, #0]
 800b784:	b909      	cbnz	r1, 800b78a <forward_split+0xa>
 800b786:	684b      	ldr	r3, [r1, #4]
 800b788:	deff      	udf	#255	; 0xff
 800b78a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78e:	685d      	ldr	r5, [r3, #4]
 800b790:	2901      	cmp	r1, #1
 800b792:	b089      	sub	sp, #36	; 0x24
 800b794:	686b      	ldr	r3, [r5, #4]
 800b796:	bf14      	ite	ne
 800b798:	f105 090c 	addne.w	r9, r5, #12
 800b79c:	f04f 0900 	moveq.w	r9, #0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 80a4 	beq.w	800b8ee <forward_split+0x16e>
 800b7a6:	681c      	ldr	r4, [r3, #0]
 800b7a8:	2902      	cmp	r1, #2
 800b7aa:	69c3      	ldr	r3, [r0, #28]
 800b7ac:	6962      	ldr	r2, [r4, #20]
 800b7ae:	f8d2 b004 	ldr.w	fp, [r2, #4]
 800b7b2:	f240 8099 	bls.w	800b8e8 <forward_split+0x168>
 800b7b6:	69e9      	ldr	r1, [r5, #28]
 800b7b8:	2900      	cmp	r1, #0
 800b7ba:	d06b      	beq.n	800b894 <forward_split+0x114>
 800b7bc:	680a      	ldr	r2, [r1, #0]
 800b7be:	9202      	str	r2, [sp, #8]
 800b7c0:	f1b9 0f00 	cmp.w	r9, #0
 800b7c4:	d078      	beq.n	800b8b8 <forward_split+0x138>
 800b7c6:	f8b9 1000 	ldrh.w	r1, [r9]
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	d067      	beq.n	800b89e <forward_split+0x11e>
 800b7ce:	6991      	ldr	r1, [r2, #24]
 800b7d0:	688a      	ldr	r2, [r1, #8]
 800b7d2:	9204      	str	r2, [sp, #16]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	9205      	str	r2, [sp, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d06b      	beq.n	800b8b4 <forward_split+0x134>
 800b7dc:	68e1      	ldr	r1, [r4, #12]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 800b7e4:	3904      	subs	r1, #4
 800b7e6:	3d04      	subs	r5, #4
 800b7e8:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800b7ec:	428d      	cmp	r5, r1
 800b7ee:	fb00 f202 	mul.w	r2, r0, r2
 800b7f2:	d1f9      	bne.n	800b7e8 <forward_split+0x68>
 800b7f4:	68a1      	ldr	r1, [r4, #8]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	9203      	str	r2, [sp, #12]
 800b7fa:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800b7fe:	f3c1 2517 	ubfx	r5, r1, #8, #24
 800b802:	d26a      	bcs.n	800b8da <forward_split+0x15a>
 800b804:	68e0      	ldr	r0, [r4, #12]
 800b806:	2201      	movs	r2, #1
 800b808:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b80c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800b810:	f853 1b04 	ldr.w	r1, [r3], #4
 800b814:	4298      	cmp	r0, r3
 800b816:	fb01 f202 	mul.w	r2, r1, r2
 800b81a:	d1f9      	bne.n	800b810 <forward_split+0x90>
 800b81c:	69a3      	ldr	r3, [r4, #24]
 800b81e:	9207      	str	r2, [sp, #28]
 800b820:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800b824:	2a00      	cmp	r2, #0
 800b826:	d053      	beq.n	800b8d0 <forward_split+0x150>
 800b828:	f1b9 0f00 	cmp.w	r9, #0
 800b82c:	d050      	beq.n	800b8d0 <forward_split+0x150>
 800b82e:	2300      	movs	r3, #0
 800b830:	f8b9 1000 	ldrh.w	r1, [r9]
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	9306      	str	r3, [sp, #24]
 800b838:	2700      	movs	r7, #0
 800b83a:	46da      	mov	sl, fp
 800b83c:	42b9      	cmp	r1, r7
 800b83e:	d93d      	bls.n	800b8bc <forward_split+0x13c>
 800b840:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d039      	beq.n	800b8bc <forward_split+0x13c>
 800b848:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d035      	beq.n	800b8bc <forward_split+0x13c>
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	689c      	ldr	r4, [r3, #8]
 800b854:	9b02      	ldr	r3, [sp, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d03d      	beq.n	800b8d6 <forward_split+0x156>
 800b85a:	9b04      	ldr	r3, [sp, #16]
 800b85c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	fb03 f606 	mul.w	r6, r3, r6
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	fb03 f306 	mul.w	r3, r3, r6
 800b86c:	b176      	cbz	r6, 800b88c <forward_split+0x10c>
 800b86e:	441c      	add	r4, r3
 800b870:	46c3      	mov	fp, r8
 800b872:	2500      	movs	r5, #0
 800b874:	3501      	adds	r5, #1
 800b876:	4621      	mov	r1, r4
 800b878:	4658      	mov	r0, fp
 800b87a:	4652      	mov	r2, sl
 800b87c:	f001 fcc4 	bl	800d208 <st_int8_copy>
 800b880:	42ae      	cmp	r6, r5
 800b882:	4454      	add	r4, sl
 800b884:	44d3      	add	fp, sl
 800b886:	d1f5      	bne.n	800b874 <forward_split+0xf4>
 800b888:	f8b9 1000 	ldrh.w	r1, [r9]
 800b88c:	fb0a 8806 	mla	r8, sl, r6, r8
 800b890:	3701      	adds	r7, #1
 800b892:	e7d3      	b.n	800b83c <forward_split+0xbc>
 800b894:	f1b9 0f00 	cmp.w	r9, #0
 800b898:	d025      	beq.n	800b8e6 <forward_split+0x166>
 800b89a:	f8b9 1000 	ldrh.w	r1, [r9]
 800b89e:	68e0      	ldr	r0, [r4, #12]
 800b8a0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b8a4:	fbb0 f2f1 	udiv	r2, r0, r1
 800b8a8:	9205      	str	r2, [sp, #20]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	9202      	str	r2, [sp, #8]
 800b8ae:	9204      	str	r2, [sp, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d193      	bne.n	800b7dc <forward_split+0x5c>
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	e79d      	b.n	800b7f4 <forward_split+0x74>
 800b8b8:	4649      	mov	r1, r9
 800b8ba:	e786      	b.n	800b7ca <forward_split+0x4a>
 800b8bc:	9a01      	ldr	r2, [sp, #4]
 800b8be:	46d3      	mov	fp, sl
 800b8c0:	9b06      	ldr	r3, [sp, #24]
 800b8c2:	4452      	add	r2, sl
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	9201      	str	r2, [sp, #4]
 800b8c8:	9a07      	ldr	r2, [sp, #28]
 800b8ca:	9306      	str	r3, [sp, #24]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d8b3      	bhi.n	800b838 <forward_split+0xb8>
 800b8d0:	b009      	add	sp, #36	; 0x24
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	9e05      	ldr	r6, [sp, #20]
 800b8d8:	e7c2      	b.n	800b860 <forward_split+0xe0>
 800b8da:	69a3      	ldr	r3, [r4, #24]
 800b8dc:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	9307      	str	r3, [sp, #28]
 800b8e4:	e7a0      	b.n	800b828 <forward_split+0xa8>
 800b8e6:	deff      	udf	#255	; 0xff
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	deff      	udf	#255	; 0xff
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	deff      	udf	#255	; 0xff
 800b8f2:	bf00      	nop

0800b8f4 <forward_concat>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	ed2d 8b06 	vpush	{d8-d10}
 800b8fc:	6982      	ldr	r2, [r0, #24]
 800b8fe:	b087      	sub	sp, #28
 800b900:	8813      	ldrh	r3, [r2, #0]
 800b902:	9002      	str	r0, [sp, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 827e 	beq.w	800be06 <forward_concat+0x512>
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	6856      	ldr	r6, [r2, #4]
 800b90e:	f000 827a 	beq.w	800be06 <forward_concat+0x512>
 800b912:	6933      	ldr	r3, [r6, #16]
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	b10b      	cbz	r3, 800b91c <forward_concat+0x28>
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	8830      	ldrh	r0, [r6, #0]
 800b91e:	2300      	movs	r3, #0
 800b920:	4604      	mov	r4, r0
 800b922:	4619      	mov	r1, r3
 800b924:	e00c      	b.n	800b940 <forward_concat+0x4c>
 800b926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b92a:	b172      	cbz	r2, 800b94a <forward_concat+0x56>
 800b92c:	6992      	ldr	r2, [r2, #24]
 800b92e:	3301      	adds	r3, #1
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800b936:	2a01      	cmp	r2, #1
 800b938:	bf0c      	ite	eq
 800b93a:	2201      	moveq	r2, #1
 800b93c:	2202      	movne	r2, #2
 800b93e:	4311      	orrs	r1, r2
 800b940:	4298      	cmp	r0, r3
 800b942:	d002      	beq.n	800b94a <forward_concat+0x56>
 800b944:	6872      	ldr	r2, [r6, #4]
 800b946:	2a00      	cmp	r2, #0
 800b948:	d1ed      	bne.n	800b926 <forward_concat+0x32>
 800b94a:	9b01      	ldr	r3, [sp, #4]
 800b94c:	699a      	ldr	r2, [r3, #24]
 800b94e:	6813      	ldr	r3, [r2, #0]
 800b950:	6897      	ldr	r7, [r2, #8]
 800b952:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800b956:	2a01      	cmp	r2, #1
 800b958:	d134      	bne.n	800b9c4 <forward_concat+0xd0>
 800b95a:	2901      	cmp	r1, #1
 800b95c:	d139      	bne.n	800b9d2 <forward_concat+0xde>
 800b95e:	f04f 0b00 	mov.w	fp, #0
 800b962:	455c      	cmp	r4, fp
 800b964:	d930      	bls.n	800b9c8 <forward_concat+0xd4>
 800b966:	6873      	ldr	r3, [r6, #4]
 800b968:	b373      	cbz	r3, 800b9c8 <forward_concat+0xd4>
 800b96a:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 800b96e:	b35c      	cbz	r4, 800b9c8 <forward_concat+0xd4>
 800b970:	69a3      	ldr	r3, [r4, #24]
 800b972:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b976:	f001 fd83 	bl	800d480 <ai_array_get_byte_size>
 800b97a:	69a1      	ldr	r1, [r4, #24]
 800b97c:	6965      	ldr	r5, [r4, #20]
 800b97e:	68e2      	ldr	r2, [r4, #12]
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	688c      	ldr	r4, [r1, #8]
 800b984:	9901      	ldr	r1, [sp, #4]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	eb04 0800 	add.w	r8, r4, r0
 800b98c:	68c9      	ldr	r1, [r1, #12]
 800b98e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800b992:	4544      	cmp	r4, r8
 800b994:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b99c:	fb02 f905 	mul.w	r9, r2, r5
 800b9a0:	fb03 f505 	mul.w	r5, r3, r5
 800b9a4:	d209      	bcs.n	800b9ba <forward_concat+0xc6>
 800b9a6:	46ba      	mov	sl, r7
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	444c      	add	r4, r9
 800b9ac:	4651      	mov	r1, sl
 800b9ae:	464a      	mov	r2, r9
 800b9b0:	f001 fc2a 	bl	800d208 <st_int8_copy>
 800b9b4:	45a0      	cmp	r8, r4
 800b9b6:	44aa      	add	sl, r5
 800b9b8:	d8f6      	bhi.n	800b9a8 <forward_concat+0xb4>
 800b9ba:	444f      	add	r7, r9
 800b9bc:	f10b 0b01 	add.w	fp, fp, #1
 800b9c0:	8834      	ldrh	r4, [r6, #0]
 800b9c2:	e7ce      	b.n	800b962 <forward_concat+0x6e>
 800b9c4:	2901      	cmp	r1, #1
 800b9c6:	d108      	bne.n	800b9da <forward_concat+0xe6>
 800b9c8:	b007      	add	sp, #28
 800b9ca:	ecbd 8b06 	vpop	{d8-d10}
 800b9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d2:	2a01      	cmp	r2, #1
 800b9d4:	d1f6      	bne.n	800b9c4 <forward_concat+0xd0>
 800b9d6:	078a      	lsls	r2, r1, #30
 800b9d8:	d4f6      	bmi.n	800b9c8 <forward_concat+0xd4>
 800b9da:	9a01      	ldr	r2, [sp, #4]
 800b9dc:	6811      	ldr	r1, [r2, #0]
 800b9de:	460c      	mov	r4, r1
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	f000 81fa 	beq.w	800bdda <forward_concat+0x4e6>
 800b9e6:	684a      	ldr	r2, [r1, #4]
 800b9e8:	2a00      	cmp	r2, #0
 800b9ea:	f000 81f6 	beq.w	800bdda <forward_concat+0x4e6>
 800b9ee:	8849      	ldrh	r1, [r1, #2]
 800b9f0:	2900      	cmp	r1, #0
 800b9f2:	f000 81f2 	beq.w	800bdda <forward_concat+0x4e6>
 800b9f6:	6812      	ldr	r2, [r2, #0]
 800b9f8:	edd2 8a00 	vldr	s17, [r2]
 800b9fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba00:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800ba04:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800ba08:	9603      	str	r6, [sp, #12]
 800ba0a:	9305      	str	r3, [sp, #20]
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 800ba12:	ed9f 8ab7 	vldr	s16, [pc, #732]	; 800bcf0 <forward_concat+0x3fc>
 800ba16:	ed9f 9ab7 	vldr	s18, [pc, #732]	; 800bcf4 <forward_concat+0x400>
 800ba1a:	4626      	mov	r6, r4
 800ba1c:	4699      	mov	r9, r3
 800ba1e:	4548      	cmp	r0, r9
 800ba20:	d9d2      	bls.n	800b9c8 <forward_concat+0xd4>
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0ce      	beq.n	800b9c8 <forward_concat+0xd4>
 800ba2a:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0ca      	beq.n	800b9c8 <forward_concat+0xd4>
 800ba32:	9a02      	ldr	r2, [sp, #8]
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	69d0      	ldr	r0, [r2, #28]
 800ba38:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
 800ba3c:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 800ba40:	68d9      	ldr	r1, [r3, #12]
 800ba42:	9b01      	ldr	r3, [sp, #4]
 800ba44:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ba48:	6894      	ldr	r4, [r2, #8]
 800ba4a:	fb01 fb05 	mul.w	fp, r1, r5
 800ba4e:	68d9      	ldr	r1, [r3, #12]
 800ba50:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ba54:	fb01 f505 	mul.w	r5, r1, r5
 800ba58:	e9d2 8100 	ldrd	r8, r1, [r2]
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	f001 fd0f 	bl	800d480 <ai_array_get_byte_size>
 800ba62:	f3c8 4243 	ubfx	r2, r8, #17, #4
 800ba66:	9b04      	ldr	r3, [sp, #16]
 800ba68:	eb04 0800 	add.w	r8, r4, r0
 800ba6c:	2a01      	cmp	r2, #1
 800ba6e:	d05f      	beq.n	800bb30 <forward_concat+0x23c>
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	2a00      	cmp	r2, #0
 800ba74:	f000 80d1 	beq.w	800bc1a <forward_concat+0x326>
 800ba78:	6851      	ldr	r1, [r2, #4]
 800ba7a:	2900      	cmp	r1, #0
 800ba7c:	f000 812f 	beq.w	800bcde <forward_concat+0x3ea>
 800ba80:	8850      	ldrh	r0, [r2, #2]
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f000 8128 	beq.w	800bcd8 <forward_concat+0x3e4>
 800ba88:	680b      	ldr	r3, [r1, #0]
 800ba8a:	edd3 6a00 	vldr	s13, [r3]
 800ba8e:	684b      	ldr	r3, [r1, #4]
 800ba90:	f993 0000 	ldrsb.w	r0, [r3]
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	f000 80c6 	beq.w	800bc26 <forward_concat+0x332>
 800ba9a:	6873      	ldr	r3, [r6, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 8122 	beq.w	800bce6 <forward_concat+0x3f2>
 800baa2:	8871      	ldrh	r1, [r6, #2]
 800baa4:	b111      	cbz	r1, 800baac <forward_concat+0x1b8>
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	f993 1000 	ldrsb.w	r1, [r3]
 800baac:	eef4 8a66 	vcmp.f32	s17, s13
 800bab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab4:	bf0c      	ite	eq
 800bab6:	2301      	moveq	r3, #1
 800bab8:	2300      	movne	r3, #0
 800baba:	4288      	cmp	r0, r1
 800babc:	d102      	bne.n	800bac4 <forward_concat+0x1d0>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f040 80b3 	bne.w	800bc2a <forward_concat+0x336>
 800bac4:	9905      	ldr	r1, [sp, #20]
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d17c      	bne.n	800bbc4 <forward_concat+0x2d0>
 800baca:	2a00      	cmp	r2, #0
 800bacc:	f000 8188 	beq.w	800bde0 <forward_concat+0x4ec>
 800bad0:	6851      	ldr	r1, [r2, #4]
 800bad2:	2900      	cmp	r1, #0
 800bad4:	f000 817a 	beq.w	800bdcc <forward_concat+0x4d8>
 800bad8:	8852      	ldrh	r2, [r2, #2]
 800bada:	2a00      	cmp	r2, #0
 800badc:	f000 8176 	beq.w	800bdcc <forward_concat+0x4d8>
 800bae0:	684a      	ldr	r2, [r1, #4]
 800bae2:	f892 c000 	ldrb.w	ip, [r2]
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	f000 8175 	beq.w	800bdd6 <forward_concat+0x4e2>
 800baec:	6871      	ldr	r1, [r6, #4]
 800baee:	2900      	cmp	r1, #0
 800baf0:	f000 817c 	beq.w	800bdec <forward_concat+0x4f8>
 800baf4:	8872      	ldrh	r2, [r6, #2]
 800baf6:	b10a      	cbz	r2, 800bafc <forward_concat+0x208>
 800baf8:	684a      	ldr	r2, [r1, #4]
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	4594      	cmp	ip, r2
 800bafe:	f040 80fd 	bne.w	800bcfc <forward_concat+0x408>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 80fa 	beq.w	800bcfc <forward_concat+0x408>
 800bb08:	4544      	cmp	r4, r8
 800bb0a:	d209      	bcs.n	800bb20 <forward_concat+0x22c>
 800bb0c:	46ba      	mov	sl, r7
 800bb0e:	4620      	mov	r0, r4
 800bb10:	445c      	add	r4, fp
 800bb12:	4651      	mov	r1, sl
 800bb14:	465a      	mov	r2, fp
 800bb16:	f001 fb77 	bl	800d208 <st_int8_copy>
 800bb1a:	45a0      	cmp	r8, r4
 800bb1c:	44aa      	add	sl, r5
 800bb1e:	d8f6      	bhi.n	800bb0e <forward_concat+0x21a>
 800bb20:	eb07 0e0b 	add.w	lr, r7, fp
 800bb24:	4677      	mov	r7, lr
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	f109 0901 	add.w	r9, r9, #1
 800bb2c:	8818      	ldrh	r0, [r3, #0]
 800bb2e:	e776      	b.n	800ba1e <forward_concat+0x12a>
 800bb30:	f1bb 0f00 	cmp.w	fp, #0
 800bb34:	4659      	mov	r1, fp
 800bb36:	9b05      	ldr	r3, [sp, #20]
 800bb38:	bfb8      	it	lt
 800bb3a:	f10b 0103 	addlt.w	r1, fp, #3
 800bb3e:	1089      	asrs	r1, r1, #2
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f040 8082 	bne.w	800bc4a <forward_concat+0x356>
 800bb46:	2e00      	cmp	r6, #0
 800bb48:	f000 80cf 	beq.w	800bcea <forward_concat+0x3f6>
 800bb4c:	6873      	ldr	r3, [r6, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f000 80cb 	beq.w	800bcea <forward_concat+0x3f6>
 800bb54:	8872      	ldrh	r2, [r6, #2]
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	f000 80c7 	beq.w	800bcea <forward_concat+0x3f6>
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	ee06 3a90 	vmov	s13, r3
 800bb64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bb68:	ee76 6a8a 	vadd.f32	s13, s13, s20
 800bb6c:	4544      	cmp	r4, r8
 800bb6e:	d227      	bcs.n	800bbc0 <forward_concat+0x2cc>
 800bb70:	f1bb 0f03 	cmp.w	fp, #3
 800bb74:	eba5 0501 	sub.w	r5, r5, r1
 800bb78:	dd22      	ble.n	800bbc0 <forward_concat+0x2cc>
 800bb7a:	46be      	mov	lr, r7
 800bb7c:	46f4      	mov	ip, lr
 800bb7e:	4620      	mov	r0, r4
 800bb80:	2200      	movs	r2, #0
 800bb82:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bb86:	eef0 7a66 	vmov.f32	s15, s13
 800bb8a:	ee07 3a10 	vmov	s14, r3
 800bb8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb92:	eee7 7a29 	vfma.f32	s15, s14, s19
 800bb96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb9a:	ee17 3a90 	vmov	r3, s15
 800bb9e:	f383 0308 	usat	r3, #8, r3
 800bba2:	3201      	adds	r2, #1
 800bba4:	f80c 3b01 	strb.w	r3, [ip], #1
 800bba8:	4291      	cmp	r1, r2
 800bbaa:	dcea      	bgt.n	800bb82 <forward_concat+0x28e>
 800bbac:	f1bb 0f03 	cmp.w	fp, #3
 800bbb0:	bfcc      	ite	gt
 800bbb2:	460b      	movgt	r3, r1
 800bbb4:	2301      	movle	r3, #1
 800bbb6:	441c      	add	r4, r3
 800bbb8:	442b      	add	r3, r5
 800bbba:	45a0      	cmp	r8, r4
 800bbbc:	449e      	add	lr, r3
 800bbbe:	d8dd      	bhi.n	800bb7c <forward_concat+0x288>
 800bbc0:	440f      	add	r7, r1
 800bbc2:	e7b0      	b.n	800bb26 <forward_concat+0x232>
 800bbc4:	b142      	cbz	r2, 800bbd8 <forward_concat+0x2e4>
 800bbc6:	6851      	ldr	r1, [r2, #4]
 800bbc8:	2900      	cmp	r1, #0
 800bbca:	f000 8111 	beq.w	800bdf0 <forward_concat+0x4fc>
 800bbce:	8852      	ldrh	r2, [r2, #2]
 800bbd0:	b112      	cbz	r2, 800bbd8 <forward_concat+0x2e4>
 800bbd2:	684a      	ldr	r2, [r1, #4]
 800bbd4:	f992 2000 	ldrsb.w	r2, [r2]
 800bbd8:	2e00      	cmp	r6, #0
 800bbda:	f000 8103 	beq.w	800bde4 <forward_concat+0x4f0>
 800bbde:	6870      	ldr	r0, [r6, #4]
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	f000 8101 	beq.w	800bde8 <forward_concat+0x4f4>
 800bbe6:	8871      	ldrh	r1, [r6, #2]
 800bbe8:	b111      	cbz	r1, 800bbf0 <forward_concat+0x2fc>
 800bbea:	6841      	ldr	r1, [r0, #4]
 800bbec:	f991 1000 	ldrsb.w	r1, [r1]
 800bbf0:	428a      	cmp	r2, r1
 800bbf2:	f040 80b3 	bne.w	800bd5c <forward_concat+0x468>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f000 80b0 	beq.w	800bd5c <forward_concat+0x468>
 800bbfc:	4544      	cmp	r4, r8
 800bbfe:	d28f      	bcs.n	800bb20 <forward_concat+0x22c>
 800bc00:	46ba      	mov	sl, r7
 800bc02:	4620      	mov	r0, r4
 800bc04:	445c      	add	r4, fp
 800bc06:	4651      	mov	r1, sl
 800bc08:	465a      	mov	r2, fp
 800bc0a:	f001 fafd 	bl	800d208 <st_int8_copy>
 800bc0e:	45a0      	cmp	r8, r4
 800bc10:	44aa      	add	sl, r5
 800bc12:	d8f6      	bhi.n	800bc02 <forward_concat+0x30e>
 800bc14:	eb07 0e0b 	add.w	lr, r7, fp
 800bc18:	e784      	b.n	800bb24 <forward_concat+0x230>
 800bc1a:	eef0 6a49 	vmov.f32	s13, s18
 800bc1e:	4610      	mov	r0, r2
 800bc20:	2e00      	cmp	r6, #0
 800bc22:	f47f af3a 	bne.w	800ba9a <forward_concat+0x1a6>
 800bc26:	4631      	mov	r1, r6
 800bc28:	e740      	b.n	800baac <forward_concat+0x1b8>
 800bc2a:	4544      	cmp	r4, r8
 800bc2c:	f4bf af78 	bcs.w	800bb20 <forward_concat+0x22c>
 800bc30:	46ba      	mov	sl, r7
 800bc32:	4620      	mov	r0, r4
 800bc34:	445c      	add	r4, fp
 800bc36:	4651      	mov	r1, sl
 800bc38:	465a      	mov	r2, fp
 800bc3a:	f001 fae5 	bl	800d208 <st_int8_copy>
 800bc3e:	45a0      	cmp	r8, r4
 800bc40:	44aa      	add	sl, r5
 800bc42:	d8f6      	bhi.n	800bc32 <forward_concat+0x33e>
 800bc44:	eb07 0e0b 	add.w	lr, r7, fp
 800bc48:	e76c      	b.n	800bb24 <forward_concat+0x230>
 800bc4a:	2e00      	cmp	r6, #0
 800bc4c:	f000 80d2 	beq.w	800bdf4 <forward_concat+0x500>
 800bc50:	6873      	ldr	r3, [r6, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 80d4 	beq.w	800be00 <forward_concat+0x50c>
 800bc58:	8872      	ldrh	r2, [r6, #2]
 800bc5a:	2a00      	cmp	r2, #0
 800bc5c:	f000 80cd 	beq.w	800bdfa <forward_concat+0x506>
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	f993 3000 	ldrsb.w	r3, [r3]
 800bc66:	ee06 3a90 	vmov	s13, r3
 800bc6a:	4544      	cmp	r4, r8
 800bc6c:	d2a8      	bcs.n	800bbc0 <forward_concat+0x2cc>
 800bc6e:	f1bb 0f03 	cmp.w	fp, #3
 800bc72:	eba5 0501 	sub.w	r5, r5, r1
 800bc76:	dda3      	ble.n	800bbc0 <forward_concat+0x2cc>
 800bc78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bc7c:	46be      	mov	lr, r7
 800bc7e:	46f4      	mov	ip, lr
 800bc80:	4620      	mov	r0, r4
 800bc82:	2200      	movs	r2, #0
 800bc84:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bc88:	eef0 7a66 	vmov.f32	s15, s13
 800bc8c:	ee07 3a10 	vmov	s14, r3
 800bc90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc94:	eee7 7a29 	vfma.f32	s15, s14, s19
 800bc98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca0:	bf4c      	ite	mi
 800bca2:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 800bca6:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 800bcaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcae:	ee17 3a90 	vmov	r3, s15
 800bcb2:	f303 0307 	ssat	r3, #8, r3
 800bcb6:	3201      	adds	r2, #1
 800bcb8:	f80c 3b01 	strb.w	r3, [ip], #1
 800bcbc:	4291      	cmp	r1, r2
 800bcbe:	dce1      	bgt.n	800bc84 <forward_concat+0x390>
 800bcc0:	f1bb 0f03 	cmp.w	fp, #3
 800bcc4:	bfcc      	ite	gt
 800bcc6:	460b      	movgt	r3, r1
 800bcc8:	2301      	movle	r3, #1
 800bcca:	441c      	add	r4, r3
 800bccc:	442b      	add	r3, r5
 800bcce:	45a0      	cmp	r8, r4
 800bcd0:	449e      	add	lr, r3
 800bcd2:	d8d4      	bhi.n	800bc7e <forward_concat+0x38a>
 800bcd4:	440f      	add	r7, r1
 800bcd6:	e726      	b.n	800bb26 <forward_concat+0x232>
 800bcd8:	eef0 6a49 	vmov.f32	s13, s18
 800bcdc:	e6da      	b.n	800ba94 <forward_concat+0x1a0>
 800bcde:	eef0 6a49 	vmov.f32	s13, s18
 800bce2:	4608      	mov	r0, r1
 800bce4:	e6d6      	b.n	800ba94 <forward_concat+0x1a0>
 800bce6:	4619      	mov	r1, r3
 800bce8:	e6e0      	b.n	800baac <forward_concat+0x1b8>
 800bcea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bcee:	e73d      	b.n	800bb6c <forward_concat+0x278>
 800bcf0:	3efffffc 	.word	0x3efffffc
	...
 800bcfc:	4544      	cmp	r4, r8
 800bcfe:	ee69 6aa6 	vmul.f32	s13, s19, s13
 800bd02:	f4bf af0d 	bcs.w	800bb20 <forward_concat+0x22c>
 800bd06:	f1bb 0f00 	cmp.w	fp, #0
 800bd0a:	f77f af09 	ble.w	800bb20 <forward_concat+0x22c>
 800bd0e:	ee07 2a90 	vmov	s15, r2
 800bd12:	eb07 0e0b 	add.w	lr, r7, fp
 800bd16:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800bd1a:	4670      	mov	r0, lr
 800bd1c:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800bd20:	463a      	mov	r2, r7
 800bd22:	4621      	mov	r1, r4
 800bd24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd28:	eeb0 7a46 	vmov.f32	s14, s12
 800bd2c:	eba3 030c 	sub.w	r3, r3, ip
 800bd30:	ee07 3a90 	vmov	s15, r3
 800bd34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd38:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bd3c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800bd40:	ee17 3a90 	vmov	r3, s15
 800bd44:	f383 0308 	usat	r3, #8, r3
 800bd48:	f802 3b01 	strb.w	r3, [r2], #1
 800bd4c:	4282      	cmp	r2, r0
 800bd4e:	d1e9      	bne.n	800bd24 <forward_concat+0x430>
 800bd50:	445c      	add	r4, fp
 800bd52:	442f      	add	r7, r5
 800bd54:	4428      	add	r0, r5
 800bd56:	4544      	cmp	r4, r8
 800bd58:	d3e2      	bcc.n	800bd20 <forward_concat+0x42c>
 800bd5a:	e6e3      	b.n	800bb24 <forward_concat+0x230>
 800bd5c:	4544      	cmp	r4, r8
 800bd5e:	ee69 6aa6 	vmul.f32	s13, s19, s13
 800bd62:	f4bf aedd 	bcs.w	800bb20 <forward_concat+0x22c>
 800bd66:	f1bb 0f00 	cmp.w	fp, #0
 800bd6a:	f77f aed9 	ble.w	800bb20 <forward_concat+0x22c>
 800bd6e:	ee07 1a90 	vmov	s15, r1
 800bd72:	eb04 000b 	add.w	r0, r4, fp
 800bd76:	46bc      	mov	ip, r7
 800bd78:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	46e6      	mov	lr, ip
 800bd80:	f914 3b01 	ldrsb.w	r3, [r4], #1
 800bd84:	1a9b      	subs	r3, r3, r2
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd8e:	eef0 7a46 	vmov.f32	s15, s12
 800bd92:	eee7 7a26 	vfma.f32	s15, s14, s13
 800bd96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd9e:	bf4c      	ite	mi
 800bda0:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 800bda4:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 800bda8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdac:	ee17 3a90 	vmov	r3, s15
 800bdb0:	f303 0307 	ssat	r3, #8, r3
 800bdb4:	428c      	cmp	r4, r1
 800bdb6:	f80e 3b01 	strb.w	r3, [lr], #1
 800bdba:	d1e1      	bne.n	800bd80 <forward_concat+0x48c>
 800bdbc:	4540      	cmp	r0, r8
 800bdbe:	44ac      	add	ip, r5
 800bdc0:	4459      	add	r1, fp
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	f4bf aeac 	bcs.w	800bb20 <forward_concat+0x22c>
 800bdc8:	4458      	add	r0, fp
 800bdca:	e7d8      	b.n	800bd7e <forward_concat+0x48a>
 800bdcc:	f8dd c014 	ldr.w	ip, [sp, #20]
 800bdd0:	2e00      	cmp	r6, #0
 800bdd2:	f47f ae8b 	bne.w	800baec <forward_concat+0x1f8>
 800bdd6:	4632      	mov	r2, r6
 800bdd8:	e690      	b.n	800bafc <forward_concat+0x208>
 800bdda:	ed5f 8a39 	vldr	s17, [pc, #-228]	; 800bcf8 <forward_concat+0x404>
 800bdde:	e60d      	b.n	800b9fc <forward_concat+0x108>
 800bde0:	468c      	mov	ip, r1
 800bde2:	e680      	b.n	800bae6 <forward_concat+0x1f2>
 800bde4:	4631      	mov	r1, r6
 800bde6:	e703      	b.n	800bbf0 <forward_concat+0x2fc>
 800bde8:	4601      	mov	r1, r0
 800bdea:	e701      	b.n	800bbf0 <forward_concat+0x2fc>
 800bdec:	460a      	mov	r2, r1
 800bdee:	e685      	b.n	800bafc <forward_concat+0x208>
 800bdf0:	460a      	mov	r2, r1
 800bdf2:	e6f1      	b.n	800bbd8 <forward_concat+0x2e4>
 800bdf4:	ee06 6a90 	vmov	s13, r6
 800bdf8:	e737      	b.n	800bc6a <forward_concat+0x376>
 800bdfa:	ee06 2a90 	vmov	s13, r2
 800bdfe:	e734      	b.n	800bc6a <forward_concat+0x376>
 800be00:	ee06 3a90 	vmov	s13, r3
 800be04:	e731      	b.n	800bc6a <forward_concat+0x376>
 800be06:	2300      	movs	r3, #0
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	deff      	udf	#255	; 0xff

0800be0c <forward_eltwise>:
 800be0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be10:	6982      	ldr	r2, [r0, #24]
 800be12:	b09d      	sub	sp, #116	; 0x74
 800be14:	8811      	ldrh	r1, [r2, #0]
 800be16:	9003      	str	r0, [sp, #12]
 800be18:	2900      	cmp	r1, #0
 800be1a:	f000 80c7 	beq.w	800bfac <forward_eltwise+0x1a0>
 800be1e:	6853      	ldr	r3, [r2, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8116 	beq.w	800c052 <forward_eltwise+0x246>
 800be26:	8818      	ldrh	r0, [r3, #0]
 800be28:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800be2c:	f1b8 0f00 	cmp.w	r8, #0
 800be30:	d001      	beq.n	800be36 <forward_eltwise+0x2a>
 800be32:	f8d8 8000 	ldr.w	r8, [r8]
 800be36:	2901      	cmp	r1, #1
 800be38:	f000 810f 	beq.w	800c05a <forward_eltwise+0x24e>
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	b10b      	cbz	r3, 800be46 <forward_eltwise+0x3a>
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	2300      	movs	r3, #0
 800be48:	2801      	cmp	r0, #1
 800be4a:	930d      	str	r3, [sp, #52]	; 0x34
 800be4c:	9312      	str	r3, [sp, #72]	; 0x48
 800be4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800be50:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800be54:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800be58:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800be5c:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800be60:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 800be64:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800be68:	ab0d      	add	r3, sp, #52	; 0x34
 800be6a:	9308      	str	r3, [sp, #32]
 800be6c:	ab12      	add	r3, sp, #72	; 0x48
 800be6e:	930a      	str	r3, [sp, #40]	; 0x28
 800be70:	ab17      	add	r3, sp, #92	; 0x5c
 800be72:	930c      	str	r3, [sp, #48]	; 0x30
 800be74:	f240 5302 	movw	r3, #1282	; 0x502
 800be78:	9307      	str	r3, [sp, #28]
 800be7a:	9309      	str	r3, [sp, #36]	; 0x24
 800be7c:	f240 5301 	movw	r3, #1281	; 0x501
 800be80:	930b      	str	r3, [sp, #44]	; 0x2c
 800be82:	9b03      	ldr	r3, [sp, #12]
 800be84:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 800be88:	9304      	str	r3, [sp, #16]
 800be8a:	f240 80d8 	bls.w	800c03e <forward_eltwise+0x232>
 800be8e:	0083      	lsls	r3, r0, #2
 800be90:	9305      	str	r3, [sp, #20]
 800be92:	2304      	movs	r3, #4
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	8813      	ldrh	r3, [r2, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 80e1 	beq.w	800c060 <forward_eltwise+0x254>
 800be9e:	6853      	ldr	r3, [r2, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f000 80d7 	beq.w	800c056 <forward_eltwise+0x24a>
 800bea8:	9a01      	ldr	r2, [sp, #4]
 800beaa:	f108 0108 	add.w	r1, r8, #8
 800beae:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800beb2:	f853 a002 	ldr.w	sl, [r3, r2]
 800beb6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800beba:	f10a 0908 	add.w	r9, sl, #8
 800bebe:	4043      	eors	r3, r0
 800bec0:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 800bec4:	d10f      	bne.n	800bee6 <forward_eltwise+0xda>
 800bec6:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800beca:	2800      	cmp	r0, #0
 800becc:	f000 8097 	beq.w	800bffe <forward_eltwise+0x1f2>
 800bed0:	3801      	subs	r0, #1
 800bed2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800bed6:	f8da 300c 	ldr.w	r3, [sl, #12]
 800beda:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800bede:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d0f1      	beq.n	800beca <forward_eltwise+0xbe>
 800bee6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800beea:	464a      	mov	r2, r9
 800beec:	a80b      	add	r0, sp, #44	; 0x2c
 800beee:	9102      	str	r1, [sp, #8]
 800bef0:	689d      	ldr	r5, [r3, #8]
 800bef2:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bef6:	689c      	ldr	r4, [r3, #8]
 800bef8:	9b00      	ldr	r3, [sp, #0]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	689e      	ldr	r6, [r3, #8]
 800befe:	f001 fb13 	bl	800d528 <core_get_broadcasted_shape>
 800bf02:	f8da 2014 	ldr.w	r2, [sl, #20]
 800bf06:	a807      	add	r0, sp, #28
 800bf08:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bf0c:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800bf10:	9a00      	ldr	r2, [sp, #0]
 800bf12:	9902      	ldr	r1, [sp, #8]
 800bf14:	6952      	ldr	r2, [r2, #20]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800bf1c:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf1e:	f001 fb2b 	bl	800d578 <core_compute_offsets>
 800bf22:	4653      	mov	r3, sl
 800bf24:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf26:	4649      	mov	r1, r9
 800bf28:	a809      	add	r0, sp, #36	; 0x24
 800bf2a:	f001 fb25 	bl	800d578 <core_compute_offsets>
 800bf2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf30:	68d3      	ldr	r3, [r2, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d058      	beq.n	800bfe8 <forward_eltwise+0x1dc>
 800bf36:	2300      	movs	r3, #0
 800bf38:	6891      	ldr	r1, [r2, #8]
 800bf3a:	9302      	str	r3, [sp, #8]
 800bf3c:	2900      	cmp	r1, #0
 800bf3e:	d053      	beq.n	800bfe8 <forward_eltwise+0x1dc>
 800bf40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bf42:	f04f 0b00 	mov.w	fp, #0
 800bf46:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800bf4a:	f04f 0a00 	mov.w	sl, #0
 800bf4e:	2804      	cmp	r0, #4
 800bf50:	bf8c      	ite	hi
 800bf52:	6913      	ldrhi	r3, [r2, #16]
 800bf54:	2301      	movls	r3, #1
 800bf56:	459a      	cmp	sl, r3
 800bf58:	d22a      	bcs.n	800bfb0 <forward_eltwise+0x1a4>
 800bf5a:	6851      	ldr	r1, [r2, #4]
 800bf5c:	b1a9      	cbz	r1, 800bf8a <forward_eltwise+0x17e>
 800bf5e:	f04f 0900 	mov.w	r9, #0
 800bf62:	4622      	mov	r2, r4
 800bf64:	4629      	mov	r1, r5
 800bf66:	4630      	mov	r0, r6
 800bf68:	f109 0901 	add.w	r9, r9, #1
 800bf6c:	47b8      	blx	r7
 800bf6e:	9b08      	ldr	r3, [sp, #32]
 800bf70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf72:	4446      	add	r6, r8
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	441d      	add	r5, r3
 800bf78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	441c      	add	r4, r3
 800bf7e:	6853      	ldr	r3, [r2, #4]
 800bf80:	454b      	cmp	r3, r9
 800bf82:	d8ee      	bhi.n	800bf62 <forward_eltwise+0x156>
 800bf84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf86:	f3c3 2017 	ubfx	r0, r3, #8, #24
 800bf8a:	9907      	ldr	r1, [sp, #28]
 800bf8c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800bf90:	d302      	bcc.n	800bf98 <forward_eltwise+0x18c>
 800bf92:	9908      	ldr	r1, [sp, #32]
 800bf94:	690b      	ldr	r3, [r1, #16]
 800bf96:	441d      	add	r5, r3
 800bf98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf9a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800bf9e:	d302      	bcc.n	800bfa6 <forward_eltwise+0x19a>
 800bfa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfa2:	690b      	ldr	r3, [r1, #16]
 800bfa4:	441c      	add	r4, r3
 800bfa6:	f10a 0a01 	add.w	sl, sl, #1
 800bfaa:	e7d0      	b.n	800bf4e <forward_eltwise+0x142>
 800bfac:	684b      	ldr	r3, [r1, #4]
 800bfae:	deff      	udf	#255	; 0xff
 800bfb0:	9b08      	ldr	r3, [sp, #32]
 800bfb2:	f10b 0b01 	add.w	fp, fp, #1
 800bfb6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800bfba:	6899      	ldr	r1, [r3, #8]
 800bfbc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800bfc0:	440d      	add	r5, r1
 800bfc2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800bfc6:	45dc      	cmp	ip, fp
 800bfc8:	440c      	add	r4, r1
 800bfca:	d8be      	bhi.n	800bf4a <forward_eltwise+0x13e>
 800bfcc:	68d8      	ldr	r0, [r3, #12]
 800bfce:	469e      	mov	lr, r3
 800bfd0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800bfd4:	4661      	mov	r1, ip
 800bfd6:	4405      	add	r5, r0
 800bfd8:	441c      	add	r4, r3
 800bfda:	9b02      	ldr	r3, [sp, #8]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	4618      	mov	r0, r3
 800bfe0:	9302      	str	r3, [sp, #8]
 800bfe2:	68d3      	ldr	r3, [r2, #12]
 800bfe4:	4283      	cmp	r3, r0
 800bfe6:	d8a9      	bhi.n	800bf3c <forward_eltwise+0x130>
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	9a05      	ldr	r2, [sp, #20]
 800bfec:	3304      	adds	r3, #4
 800bfee:	4293      	cmp	r3, r2
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	d024      	beq.n	800c03e <forward_eltwise+0x232>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	f8dd 8000 	ldr.w	r8, [sp]
 800bffa:	699a      	ldr	r2, [r3, #24]
 800bffc:	e74b      	b.n	800be96 <forward_eltwise+0x8a>
 800bffe:	9b00      	ldr	r3, [sp, #0]
 800c000:	464a      	mov	r2, r9
 800c002:	f8da 0018 	ldr.w	r0, [sl, #24]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f8d8 4018 	ldr.w	r4, [r8, #24]
 800c00c:	6885      	ldr	r5, [r0, #8]
 800c00e:	a80b      	add	r0, sp, #44	; 0x2c
 800c010:	689e      	ldr	r6, [r3, #8]
 800c012:	68a4      	ldr	r4, [r4, #8]
 800c014:	f001 fa88 	bl	800d528 <core_get_broadcasted_shape>
 800c018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c01a:	0a1b      	lsrs	r3, r3, #8
 800c01c:	d012      	beq.n	800c044 <forward_eltwise+0x238>
 800c01e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c020:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800c024:	2301      	movs	r3, #1
 800c026:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c02a:	4290      	cmp	r0, r2
 800c02c:	fb01 f303 	mul.w	r3, r1, r3
 800c030:	d1f9      	bne.n	800c026 <forward_eltwise+0x21a>
 800c032:	4621      	mov	r1, r4
 800c034:	462a      	mov	r2, r5
 800c036:	4630      	mov	r0, r6
 800c038:	9c04      	ldr	r4, [sp, #16]
 800c03a:	47a0      	blx	r4
 800c03c:	e7d4      	b.n	800bfe8 <forward_eltwise+0x1dc>
 800c03e:	b01d      	add	sp, #116	; 0x74
 800c040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c044:	4621      	mov	r1, r4
 800c046:	2301      	movs	r3, #1
 800c048:	462a      	mov	r2, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	9c04      	ldr	r4, [sp, #16]
 800c04e:	47a0      	blx	r4
 800c050:	e7ca      	b.n	800bfe8 <forward_eltwise+0x1dc>
 800c052:	4618      	mov	r0, r3
 800c054:	e6e8      	b.n	800be28 <forward_eltwise+0x1c>
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	deff      	udf	#255	; 0xff
 800c05a:	2300      	movs	r3, #0
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	deff      	udf	#255	; 0xff
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	deff      	udf	#255	; 0xff

0800c064 <forward_reduce>:
 800c064:	6982      	ldr	r2, [r0, #24]
 800c066:	8813      	ldrh	r3, [r2, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 8086 	beq.w	800c17a <forward_reduce+0x116>
 800c06e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c072:	6852      	ldr	r2, [r2, #4]
 800c074:	b08b      	sub	sp, #44	; 0x2c
 800c076:	6856      	ldr	r6, [r2, #4]
 800c078:	b106      	cbz	r6, 800c07c <forward_reduce+0x18>
 800c07a:	6836      	ldr	r6, [r6, #0]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d07e      	beq.n	800c17e <forward_reduce+0x11a>
 800c080:	6913      	ldr	r3, [r2, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d07e      	beq.n	800c184 <forward_reduce+0x120>
 800c086:	681d      	ldr	r5, [r3, #0]
 800c088:	6972      	ldr	r2, [r6, #20]
 800c08a:	f105 0108 	add.w	r1, r5, #8
 800c08e:	6857      	ldr	r7, [r2, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	e9d0 3807 	ldrd	r3, r8, [r0, #28]
 800c096:	a803      	add	r0, sp, #12
 800c098:	9301      	str	r3, [sp, #4]
 800c09a:	696b      	ldr	r3, [r5, #20]
 800c09c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c0a0:	ab05      	add	r3, sp, #20
 800c0a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0a4:	9304      	str	r3, [sp, #16]
 800c0a6:	f240 5302 	movw	r3, #1282	; 0x502
 800c0aa:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800c0ae:	e9cd 2207 	strd	r2, r2, [sp, #28]
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	f106 0208 	add.w	r2, r6, #8
 800c0b8:	463b      	mov	r3, r7
 800c0ba:	f001 fa5d 	bl	800d578 <core_compute_offsets>
 800c0be:	69aa      	ldr	r2, [r5, #24]
 800c0c0:	69b3      	ldr	r3, [r6, #24]
 800c0c2:	e9d2 2401 	ldrd	r2, r4, [r2, #4]
 800c0c6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800c0ca:	fb02 4209 	mla	r2, r2, r9, r4
 800c0ce:	4294      	cmp	r4, r2
 800c0d0:	d20d      	bcs.n	800c0ee <forward_reduce+0x8a>
 800c0d2:	46a2      	mov	sl, r4
 800c0d4:	9b01      	ldr	r3, [sp, #4]
 800c0d6:	4651      	mov	r1, sl
 800c0d8:	464a      	mov	r2, r9
 800c0da:	44ca      	add	sl, r9
 800c0dc:	6898      	ldr	r0, [r3, #8]
 800c0de:	f001 f893 	bl	800d208 <st_int8_copy>
 800c0e2:	69aa      	ldr	r2, [r5, #24]
 800c0e4:	6852      	ldr	r2, [r2, #4]
 800c0e6:	fb02 4209 	mla	r2, r2, r9, r4
 800c0ea:	4592      	cmp	sl, r2
 800c0ec:	d3f2      	bcc.n	800c0d4 <forward_reduce+0x70>
 800c0ee:	68f2      	ldr	r2, [r6, #12]
 800c0f0:	68d1      	ldr	r1, [r2, #12]
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	d03e      	beq.n	800c174 <forward_reduce+0x110>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	6895      	ldr	r5, [r2, #8]
 800c0fa:	9301      	str	r3, [sp, #4]
 800c0fc:	2d00      	cmp	r5, #0
 800c0fe:	d039      	beq.n	800c174 <forward_reduce+0x110>
 800c100:	68b1      	ldr	r1, [r6, #8]
 800c102:	f04f 0a00 	mov.w	sl, #0
 800c106:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800c10a:	f04f 0900 	mov.w	r9, #0
 800c10e:	2904      	cmp	r1, #4
 800c110:	bf8c      	ite	hi
 800c112:	6910      	ldrhi	r0, [r2, #16]
 800c114:	2001      	movls	r0, #1
 800c116:	4581      	cmp	r9, r0
 800c118:	d21c      	bcs.n	800c154 <forward_reduce+0xf0>
 800c11a:	6850      	ldr	r0, [r2, #4]
 800c11c:	b180      	cbz	r0, 800c140 <forward_reduce+0xdc>
 800c11e:	2500      	movs	r5, #0
 800c120:	465a      	mov	r2, fp
 800c122:	4621      	mov	r1, r4
 800c124:	4620      	mov	r0, r4
 800c126:	3501      	adds	r5, #1
 800c128:	47c0      	blx	r8
 800c12a:	9904      	ldr	r1, [sp, #16]
 800c12c:	68f2      	ldr	r2, [r6, #12]
 800c12e:	44bb      	add	fp, r7
 800c130:	6848      	ldr	r0, [r1, #4]
 800c132:	6851      	ldr	r1, [r2, #4]
 800c134:	4404      	add	r4, r0
 800c136:	42a9      	cmp	r1, r5
 800c138:	d8f2      	bhi.n	800c120 <forward_reduce+0xbc>
 800c13a:	68b1      	ldr	r1, [r6, #8]
 800c13c:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800c140:	9803      	ldr	r0, [sp, #12]
 800c142:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 800c146:	d302      	bcc.n	800c14e <forward_reduce+0xea>
 800c148:	9804      	ldr	r0, [sp, #16]
 800c14a:	6900      	ldr	r0, [r0, #16]
 800c14c:	4404      	add	r4, r0
 800c14e:	f109 0901 	add.w	r9, r9, #1
 800c152:	e7dc      	b.n	800c10e <forward_reduce+0xaa>
 800c154:	9b04      	ldr	r3, [sp, #16]
 800c156:	f10a 0a01 	add.w	sl, sl, #1
 800c15a:	6895      	ldr	r5, [r2, #8]
 800c15c:	6898      	ldr	r0, [r3, #8]
 800c15e:	4555      	cmp	r5, sl
 800c160:	4404      	add	r4, r0
 800c162:	d8d2      	bhi.n	800c10a <forward_reduce+0xa6>
 800c164:	68d8      	ldr	r0, [r3, #12]
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	68d1      	ldr	r1, [r2, #12]
 800c16a:	4404      	add	r4, r0
 800c16c:	3301      	adds	r3, #1
 800c16e:	428b      	cmp	r3, r1
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	d3c3      	bcc.n	800c0fc <forward_reduce+0x98>
 800c174:	b00b      	add	sp, #44	; 0x2c
 800c176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	deff      	udf	#255	; 0xff
 800c17e:	2300      	movs	r3, #0
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	deff      	udf	#255	; 0xff
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	deff      	udf	#255	; 0xff

0800c188 <forward_sigmoid>:
 800c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18a:	ed2d 8b02 	vpush	{d8}
 800c18e:	6982      	ldr	r2, [r0, #24]
 800c190:	8813      	ldrh	r3, [r2, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d03b      	beq.n	800c20e <forward_sigmoid+0x86>
 800c196:	6852      	ldr	r2, [r2, #4]
 800c198:	6854      	ldr	r4, [r2, #4]
 800c19a:	b104      	cbz	r4, 800c19e <forward_sigmoid+0x16>
 800c19c:	6824      	ldr	r4, [r4, #0]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d034      	beq.n	800c20c <forward_sigmoid+0x84>
 800c1a2:	6915      	ldr	r5, [r2, #16]
 800c1a4:	b105      	cbz	r5, 800c1a8 <forward_sigmoid+0x20>
 800c1a6:	682d      	ldr	r5, [r5, #0]
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	0a1b      	lsrs	r3, r3, #8
 800c1ac:	d031      	beq.n	800c212 <forward_sigmoid+0x8a>
 800c1ae:	68e0      	ldr	r0, [r4, #12]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c1b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1ba:	4298      	cmp	r0, r3
 800c1bc:	fb01 f202 	mul.w	r2, r1, r2
 800c1c0:	d1f9      	bne.n	800c1b6 <forward_sigmoid+0x2e>
 800c1c2:	69a7      	ldr	r7, [r4, #24]
 800c1c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c1c8:	69a9      	ldr	r1, [r5, #24]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	688e      	ldr	r6, [r1, #8]
 800c1d0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c1d4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800c1d8:	42aa      	cmp	r2, r5
 800c1da:	d814      	bhi.n	800c206 <forward_sigmoid+0x7e>
 800c1dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c1e0:	3504      	adds	r5, #4
 800c1e2:	3604      	adds	r6, #4
 800c1e4:	462c      	mov	r4, r5
 800c1e6:	ed35 0a01 	vldmdb	r5!, {s0}
 800c1ea:	eeb1 0a40 	vneg.f32	s0, s0
 800c1ee:	3c08      	subs	r4, #8
 800c1f0:	f004 f9de 	bl	80105b0 <expf>
 800c1f4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c1f8:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800c1fc:	ed66 7a01 	vstmdb	r6!, {s15}
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	42a3      	cmp	r3, r4
 800c204:	d9ee      	bls.n	800c1e4 <forward_sigmoid+0x5c>
 800c206:	ecbd 8b02 	vpop	{d8}
 800c20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20c:	2300      	movs	r3, #0
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	deff      	udf	#255	; 0xff
 800c212:	69ab      	ldr	r3, [r5, #24]
 800c214:	69a7      	ldr	r7, [r4, #24]
 800c216:	689e      	ldr	r6, [r3, #8]
 800c218:	68bd      	ldr	r5, [r7, #8]
 800c21a:	e7df      	b.n	800c1dc <forward_sigmoid+0x54>

0800c21c <forward_sm>:
 800c21c:	6982      	ldr	r2, [r0, #24]
 800c21e:	8813      	ldrh	r3, [r2, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d078      	beq.n	800c316 <forward_sm+0xfa>
 800c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	ed2d 8b04 	vpush	{d8-d9}
 800c22c:	6852      	ldr	r2, [r2, #4]
 800c22e:	b085      	sub	sp, #20
 800c230:	6854      	ldr	r4, [r2, #4]
 800c232:	b104      	cbz	r4, 800c236 <forward_sm+0x1a>
 800c234:	6824      	ldr	r4, [r4, #0]
 800c236:	2b01      	cmp	r3, #1
 800c238:	d072      	beq.n	800c320 <forward_sm+0x104>
 800c23a:	6913      	ldr	r3, [r2, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d072      	beq.n	800c326 <forward_sm+0x10a>
 800c240:	681e      	ldr	r6, [r3, #0]
 800c242:	68a3      	ldr	r3, [r4, #8]
 800c244:	68e0      	ldr	r0, [r4, #12]
 800c246:	68f2      	ldr	r2, [r6, #12]
 800c248:	0a1b      	lsrs	r3, r3, #8
 800c24a:	6845      	ldr	r5, [r0, #4]
 800c24c:	6857      	ldr	r7, [r2, #4]
 800c24e:	d064      	beq.n	800c31a <forward_sm+0xfe>
 800c250:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c254:	2201      	movs	r2, #1
 800c256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c25a:	4298      	cmp	r0, r3
 800c25c:	fb01 f202 	mul.w	r2, r1, r2
 800c260:	d1f9      	bne.n	800c256 <forward_sm+0x3a>
 800c262:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800c266:	69a2      	ldr	r2, [r4, #24]
 800c268:	69b3      	ldr	r3, [r6, #24]
 800c26a:	6892      	ldr	r2, [r2, #8]
 800c26c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800c270:	eb02 0309 	add.w	r3, r2, r9
 800c274:	429a      	cmp	r2, r3
 800c276:	9301      	str	r3, [sp, #4]
 800c278:	d248      	bcs.n	800c30c <forward_sm+0xf0>
 800c27a:	00bb      	lsls	r3, r7, #2
 800c27c:	2d01      	cmp	r5, #1
 800c27e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800c282:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c286:	9303      	str	r3, [sp, #12]
 800c288:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800c28c:	463e      	mov	r6, r7
 800c28e:	ed92 8a00 	vldr	s16, [r2]
 800c292:	9302      	str	r3, [sp, #8]
 800c294:	d937      	bls.n	800c306 <forward_sm+0xea>
 800c296:	1d13      	adds	r3, r2, #4
 800c298:	ecf3 7a01 	vldmia	r3!, {s15}
 800c29c:	429e      	cmp	r6, r3
 800c29e:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800c2a2:	d1f9      	bne.n	800c298 <forward_sm+0x7c>
 800c2a4:	4692      	mov	sl, r2
 800c2a6:	46c3      	mov	fp, r8
 800c2a8:	46c1      	mov	r9, r8
 800c2aa:	eddf 8a20 	vldr	s17, [pc, #128]	; 800c32c <forward_sm+0x110>
 800c2ae:	2400      	movs	r4, #0
 800c2b0:	ecba 0a01 	vldmia	sl!, {s0}
 800c2b4:	3401      	adds	r4, #1
 800c2b6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c2ba:	f004 f979 	bl	80105b0 <expf>
 800c2be:	42a5      	cmp	r5, r4
 800c2c0:	ee78 8a80 	vadd.f32	s17, s17, s0
 800c2c4:	eca9 0a01 	vstmia	r9!, {s0}
 800c2c8:	d8f2      	bhi.n	800c2b0 <forward_sm+0x94>
 800c2ca:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d2:	d00b      	beq.n	800c2ec <forward_sm+0xd0>
 800c2d4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800c2d8:	2300      	movs	r3, #0
 800c2da:	eddb 7a00 	vldr	s15, [fp]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	429d      	cmp	r5, r3
 800c2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e6:	eceb 7a01 	vstmia	fp!, {s15}
 800c2ea:	d8f6      	bhi.n	800c2da <forward_sm+0xbe>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	463a      	mov	r2, r7
 800c2f0:	9901      	ldr	r1, [sp, #4]
 800c2f2:	4498      	add	r8, r3
 800c2f4:	9b02      	ldr	r3, [sp, #8]
 800c2f6:	42b9      	cmp	r1, r7
 800c2f8:	441e      	add	r6, r3
 800c2fa:	d907      	bls.n	800c30c <forward_sm+0xf0>
 800c2fc:	2d01      	cmp	r5, #1
 800c2fe:	441f      	add	r7, r3
 800c300:	ed92 8a00 	vldr	s16, [r2]
 800c304:	d8c7      	bhi.n	800c296 <forward_sm+0x7a>
 800c306:	2d00      	cmp	r5, #0
 800c308:	d0f0      	beq.n	800c2ec <forward_sm+0xd0>
 800c30a:	e7cb      	b.n	800c2a4 <forward_sm+0x88>
 800c30c:	b005      	add	sp, #20
 800c30e:	ecbd 8b04 	vpop	{d8-d9}
 800c312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	deff      	udf	#255	; 0xff
 800c31a:	f04f 0904 	mov.w	r9, #4
 800c31e:	e7a2      	b.n	800c266 <forward_sm+0x4a>
 800c320:	2300      	movs	r3, #0
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	deff      	udf	#255	; 0xff
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	deff      	udf	#255	; 0xff
 800c32a:	bf00      	nop
 800c32c:	00000000 	.word	0x00000000

0800c330 <forward_mp>:
 800c330:	6983      	ldr	r3, [r0, #24]
 800c332:	881a      	ldrh	r2, [r3, #0]
 800c334:	2a00      	cmp	r2, #0
 800c336:	f000 80bc 	beq.w	800c4b2 <forward_mp+0x182>
 800c33a:	6859      	ldr	r1, [r3, #4]
 800c33c:	684b      	ldr	r3, [r1, #4]
 800c33e:	b103      	cbz	r3, 800c342 <forward_mp+0x12>
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2a01      	cmp	r2, #1
 800c344:	f000 80ba 	beq.w	800c4bc <forward_mp+0x18c>
 800c348:	690a      	ldr	r2, [r1, #16]
 800c34a:	2a00      	cmp	r2, #0
 800c34c:	f000 80b9 	beq.w	800c4c2 <forward_mp+0x192>
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	6811      	ldr	r1, [r2, #0]
 800c356:	b093      	sub	sp, #76	; 0x4c
 800c358:	68ca      	ldr	r2, [r1, #12]
 800c35a:	6989      	ldr	r1, [r1, #24]
 800c35c:	68d4      	ldr	r4, [r2, #12]
 800c35e:	6895      	ldr	r5, [r2, #8]
 800c360:	688a      	ldr	r2, [r1, #8]
 800c362:	68d9      	ldr	r1, [r3, #12]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	9200      	str	r2, [sp, #0]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800c36c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800c370:	930e      	str	r3, [sp, #56]	; 0x38
 800c372:	9408      	str	r4, [sp, #32]
 800c374:	9504      	str	r5, [sp, #16]
 800c376:	e9d2 3600 	ldrd	r3, r6, [r2]
 800c37a:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800c37e:	69c1      	ldr	r1, [r0, #28]
 800c380:	f1c3 0a00 	rsb	sl, r3, #0
 800c384:	960d      	str	r6, [sp, #52]	; 0x34
 800c386:	9109      	str	r1, [sp, #36]	; 0x24
 800c388:	6a01      	ldr	r1, [r0, #32]
 800c38a:	9705      	str	r7, [sp, #20]
 800c38c:	910a      	str	r1, [sp, #40]	; 0x28
 800c38e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c390:	910b      	str	r1, [sp, #44]	; 0x2c
 800c392:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c394:	910c      	str	r1, [sp, #48]	; 0x30
 800c396:	2c00      	cmp	r4, #0
 800c398:	f000 8088 	beq.w	800c4ac <forward_mp+0x17c>
 800c39c:	441a      	add	r2, r3
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800c3a4:	f04f 0b00 	mov.w	fp, #0
 800c3a8:	fb09 f303 	mul.w	r3, r9, r3
 800c3ac:	9201      	str	r2, [sp, #4]
 800c3ae:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800c3b2:	4273      	negs	r3, r6
 800c3b4:	9310      	str	r3, [sp, #64]	; 0x40
 800c3b6:	fb05 f307 	mul.w	r3, r5, r7
 800c3ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3be:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800c3c2:	9901      	ldr	r1, [sp, #4]
 800c3c4:	9307      	str	r3, [sp, #28]
 800c3c6:	428a      	cmp	r2, r1
 800c3c8:	bf94      	ite	ls
 800c3ca:	eb0a 0e02 	addls.w	lr, sl, r2
 800c3ce:	eb0a 0e01 	addhi.w	lr, sl, r1
 800c3d2:	9a04      	ldr	r2, [sp, #16]
 800c3d4:	2a00      	cmp	r2, #0
 800c3d6:	d05f      	beq.n	800c498 <forward_mp+0x168>
 800c3d8:	9a05      	ldr	r2, [sp, #20]
 800c3da:	9d00      	ldr	r5, [sp, #0]
 800c3dc:	fb02 f303 	mul.w	r3, r2, r3
 800c3e0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c3e4:	9303      	str	r3, [sp, #12]
 800c3e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3e8:	18d3      	adds	r3, r2, r3
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	9302      	str	r3, [sp, #8]
 800c3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3f0:	9206      	str	r2, [sp, #24]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	469b      	mov	fp, r3
 800c3f6:	db5e      	blt.n	800c4b6 <forward_mp+0x186>
 800c3f8:	9a03      	ldr	r2, [sp, #12]
 800c3fa:	18d6      	adds	r6, r2, r3
 800c3fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3fe:	9902      	ldr	r1, [sp, #8]
 800c400:	fb06 2607 	mla	r6, r6, r7, r2
 800c404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c406:	428a      	cmp	r2, r1
 800c408:	bf94      	ite	ls
 800c40a:	eb0b 0402 	addls.w	r4, fp, r2
 800c40e:	eb0b 0401 	addhi.w	r4, fp, r1
 800c412:	1ae4      	subs	r4, r4, r3
 800c414:	f1b9 0f00 	cmp.w	r9, #0
 800c418:	d008      	beq.n	800c42c <forward_mp+0xfc>
 800c41a:	4633      	mov	r3, r6
 800c41c:	462a      	mov	r2, r5
 800c41e:	19b9      	adds	r1, r7, r6
 800c420:	f853 0b04 	ldr.w	r0, [r3], #4
 800c424:	4299      	cmp	r1, r3
 800c426:	f842 0b04 	str.w	r0, [r2], #4
 800c42a:	d1f9      	bne.n	800c420 <forward_mp+0xf0>
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	459e      	cmp	lr, r3
 800c430:	dd1f      	ble.n	800c472 <forward_mp+0x142>
 800c432:	469c      	mov	ip, r3
 800c434:	fb07 6404 	mla	r4, r7, r4, r6
 800c438:	42a6      	cmp	r6, r4
 800c43a:	d214      	bcs.n	800c466 <forward_mp+0x136>
 800c43c:	f1b9 0f00 	cmp.w	r9, #0
 800c440:	d011      	beq.n	800c466 <forward_mp+0x136>
 800c442:	19f1      	adds	r1, r6, r7
 800c444:	4630      	mov	r0, r6
 800c446:	4602      	mov	r2, r0
 800c448:	462b      	mov	r3, r5
 800c44a:	ecf2 7a01 	vldmia	r2!, {s15}
 800c44e:	ed93 7a00 	vldr	s14, [r3]
 800c452:	428a      	cmp	r2, r1
 800c454:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800c458:	ece3 7a01 	vstmia	r3!, {s15}
 800c45c:	d1f5      	bne.n	800c44a <forward_mp+0x11a>
 800c45e:	4438      	add	r0, r7
 800c460:	4439      	add	r1, r7
 800c462:	42a0      	cmp	r0, r4
 800c464:	d3ef      	bcc.n	800c446 <forward_mp+0x116>
 800c466:	f10c 0c01 	add.w	ip, ip, #1
 800c46a:	4446      	add	r6, r8
 800c46c:	4444      	add	r4, r8
 800c46e:	45e6      	cmp	lr, ip
 800c470:	d1e2      	bne.n	800c438 <forward_mp+0x108>
 800c472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c474:	443d      	add	r5, r7
 800c476:	9802      	ldr	r0, [sp, #8]
 800c478:	9a06      	ldr	r2, [sp, #24]
 800c47a:	eb01 030b 	add.w	r3, r1, fp
 800c47e:	1a41      	subs	r1, r0, r1
 800c480:	3201      	adds	r2, #1
 800c482:	9102      	str	r1, [sp, #8]
 800c484:	9904      	ldr	r1, [sp, #16]
 800c486:	9206      	str	r2, [sp, #24]
 800c488:	4291      	cmp	r1, r2
 800c48a:	d1b2      	bne.n	800c3f2 <forward_mp+0xc2>
 800c48c:	9b00      	ldr	r3, [sp, #0]
 800c48e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c490:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800c494:	4413      	add	r3, r2
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c49a:	f10b 0b01 	add.w	fp, fp, #1
 800c49e:	9a01      	ldr	r2, [sp, #4]
 800c4a0:	449a      	add	sl, r3
 800c4a2:	1ad3      	subs	r3, r2, r3
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	9b08      	ldr	r3, [sp, #32]
 800c4a8:	455b      	cmp	r3, fp
 800c4aa:	d187      	bne.n	800c3bc <forward_mp+0x8c>
 800c4ac:	b013      	add	sp, #76	; 0x4c
 800c4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b2:	6853      	ldr	r3, [r2, #4]
 800c4b4:	deff      	udf	#255	; 0xff
 800c4b6:	9e03      	ldr	r6, [sp, #12]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	e79f      	b.n	800c3fc <forward_mp+0xcc>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	deff      	udf	#255	; 0xff
 800c4c2:	68d3      	ldr	r3, [r2, #12]
 800c4c4:	deff      	udf	#255	; 0xff
 800c4c6:	bf00      	nop

0800c4c8 <forward_ap>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	6983      	ldr	r3, [r0, #24]
 800c4ce:	b09b      	sub	sp, #108	; 0x6c
 800c4d0:	881a      	ldrh	r2, [r3, #0]
 800c4d2:	900f      	str	r0, [sp, #60]	; 0x3c
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	f000 80f4 	beq.w	800c6c2 <forward_ap+0x1fa>
 800c4da:	6859      	ldr	r1, [r3, #4]
 800c4dc:	684b      	ldr	r3, [r1, #4]
 800c4de:	b103      	cbz	r3, 800c4e2 <forward_ap+0x1a>
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2a01      	cmp	r2, #1
 800c4e4:	f000 80f8 	beq.w	800c6d8 <forward_ap+0x210>
 800c4e8:	690a      	ldr	r2, [r1, #16]
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	f000 80f7 	beq.w	800c6de <forward_ap+0x216>
 800c4f0:	6811      	ldr	r1, [r2, #0]
 800c4f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c4f4:	68ca      	ldr	r2, [r1, #12]
 800c4f6:	6989      	ldr	r1, [r1, #24]
 800c4f8:	68d4      	ldr	r4, [r2, #12]
 800c4fa:	6895      	ldr	r5, [r2, #8]
 800c4fc:	688a      	ldr	r2, [r1, #8]
 800c4fe:	68d9      	ldr	r1, [r3, #12]
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	9205      	str	r2, [sp, #20]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800c508:	9315      	str	r3, [sp, #84]	; 0x54
 800c50a:	9410      	str	r4, [sp, #64]	; 0x40
 800c50c:	9509      	str	r5, [sp, #36]	; 0x24
 800c50e:	e9d2 3600 	ldrd	r3, r6, [r2]
 800c512:	e9d1 7c02 	ldrd	r7, ip, [r1, #8]
 800c516:	6a02      	ldr	r2, [r0, #32]
 800c518:	970a      	str	r7, [sp, #40]	; 0x28
 800c51a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c51c:	684f      	ldr	r7, [r1, #4]
 800c51e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800c520:	69c1      	ldr	r1, [r0, #28]
 800c522:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c524:	9614      	str	r6, [sp, #80]	; 0x50
 800c526:	9013      	str	r0, [sp, #76]	; 0x4c
 800c528:	4258      	negs	r0, r3
 800c52a:	9111      	str	r1, [sp, #68]	; 0x44
 800c52c:	9212      	str	r2, [sp, #72]	; 0x48
 800c52e:	9003      	str	r0, [sp, #12]
 800c530:	2c00      	cmp	r4, #0
 800c532:	f000 80c3 	beq.w	800c6bc <forward_ap+0x1f4>
 800c536:	eb0c 0003 	add.w	r0, ip, r3
 800c53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c53c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c53e:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800c542:	fb07 f303 	mul.w	r3, r7, r3
 800c546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c54a:	9004      	str	r0, [sp, #16]
 800c54c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800c550:	fb02 f301 	mul.w	r3, r2, r1
 800c554:	9316      	str	r3, [sp, #88]	; 0x58
 800c556:	4273      	negs	r3, r6
 800c558:	9317      	str	r3, [sp, #92]	; 0x5c
 800c55a:	fb05 f30a 	mul.w	r3, r5, sl
 800c55e:	463d      	mov	r5, r7
 800c560:	9319      	str	r3, [sp, #100]	; 0x64
 800c562:	2300      	movs	r3, #0
 800c564:	930c      	str	r3, [sp, #48]	; 0x30
 800c566:	9b03      	ldr	r3, [sp, #12]
 800c568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c56a:	9804      	ldr	r0, [sp, #16]
 800c56c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c570:	4281      	cmp	r1, r0
 800c572:	bf94      	ite	ls
 800c574:	185b      	addls	r3, r3, r1
 800c576:	181b      	addhi	r3, r3, r0
 800c578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c57a:	920e      	str	r2, [sp, #56]	; 0x38
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	2900      	cmp	r1, #0
 800c580:	f000 808e 	beq.w	800c6a0 <forward_ap+0x1d8>
 800c584:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	fb00 f102 	mul.w	r1, r0, r2
 800c58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c58e:	9318      	str	r3, [sp, #96]	; 0x60
 800c590:	1882      	adds	r2, r0, r2
 800c592:	9b05      	ldr	r3, [sp, #20]
 800c594:	9108      	str	r1, [sp, #32]
 800c596:	4698      	mov	r8, r3
 800c598:	eb03 010a 	add.w	r1, r3, sl
 800c59c:	9207      	str	r2, [sp, #28]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5a2:	930d      	str	r3, [sp, #52]	; 0x34
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	9206      	str	r2, [sp, #24]
 800c5a8:	f2c0 8093 	blt.w	800c6d2 <forward_ap+0x20a>
 800c5ac:	9b08      	ldr	r3, [sp, #32]
 800c5ae:	189c      	adds	r4, r3, r2
 800c5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5b2:	9806      	ldr	r0, [sp, #24]
 800c5b4:	fb04 340a 	mla	r4, r4, sl, r3
 800c5b8:	9e07      	ldr	r6, [sp, #28]
 800c5ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5bc:	42b3      	cmp	r3, r6
 800c5be:	bf94      	ite	ls
 800c5c0:	18c0      	addls	r0, r0, r3
 800c5c2:	1980      	addhi	r0, r0, r6
 800c5c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5c6:	eba2 0e00 	sub.w	lr, r2, r0
 800c5ca:	1a82      	subs	r2, r0, r2
 800c5cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5d0:	9200      	str	r2, [sp, #0]
 800c5d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5d4:	fb02 fe0e 	mul.w	lr, r2, lr
 800c5d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	bf08      	it	eq
 800c5de:	4672      	moveq	r2, lr
 800c5e0:	9b01      	ldr	r3, [sp, #4]
 800c5e2:	9202      	str	r2, [sp, #8]
 800c5e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	dd48      	ble.n	800c67c <forward_ap+0x1b4>
 800c5ea:	9b00      	ldr	r3, [sp, #0]
 800c5ec:	4694      	mov	ip, r2
 800c5ee:	2700      	movs	r7, #0
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	fb0a 4003 	mla	r0, sl, r3, r4
 800c5f6:	9b00      	ldr	r3, [sp, #0]
 800c5f8:	441f      	add	r7, r3
 800c5fa:	45be      	cmp	lr, r7
 800c5fc:	d063      	beq.n	800c6c6 <forward_ap+0x1fe>
 800c5fe:	42a0      	cmp	r0, r4
 800c600:	d933      	bls.n	800c66a <forward_ap+0x1a2>
 800c602:	2600      	movs	r6, #0
 800c604:	4623      	mov	r3, r4
 800c606:	eb0a 0b04 	add.w	fp, sl, r4
 800c60a:	b145      	cbz	r5, 800c61e <forward_ap+0x156>
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	d05e      	beq.n	800c6ce <forward_ap+0x206>
 800c610:	4642      	mov	r2, r8
 800c612:	ecf3 7a01 	vldmia	r3!, {s15}
 800c616:	459b      	cmp	fp, r3
 800c618:	ece2 7a01 	vstmia	r2!, {s15}
 800c61c:	d1f9      	bne.n	800c612 <forward_ap+0x14a>
 800c61e:	46a3      	mov	fp, r4
 800c620:	44d3      	add	fp, sl
 800c622:	4558      	cmp	r0, fp
 800c624:	d910      	bls.n	800c648 <forward_ap+0x180>
 800c626:	2d00      	cmp	r5, #0
 800c628:	d0fa      	beq.n	800c620 <forward_ap+0x158>
 800c62a:	4643      	mov	r3, r8
 800c62c:	465a      	mov	r2, fp
 800c62e:	ed93 7a00 	vldr	s14, [r3]
 800c632:	ecf2 7a01 	vldmia	r2!, {s15}
 800c636:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c63a:	ece3 7a01 	vstmia	r3!, {s15}
 800c63e:	428b      	cmp	r3, r1
 800c640:	d1f5      	bne.n	800c62e <forward_ap+0x166>
 800c642:	44d3      	add	fp, sl
 800c644:	4558      	cmp	r0, fp
 800c646:	d8ee      	bhi.n	800c626 <forward_ap+0x15e>
 800c648:	b17e      	cbz	r6, 800c66a <forward_ap+0x1a2>
 800c64a:	ee07 6a90 	vmov	s15, r6
 800c64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c656:	b145      	cbz	r5, 800c66a <forward_ap+0x1a2>
 800c658:	4643      	mov	r3, r8
 800c65a:	edd3 7a00 	vldr	s15, [r3]
 800c65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c662:	ece3 7a01 	vstmia	r3!, {s15}
 800c666:	4299      	cmp	r1, r3
 800c668:	d1f7      	bne.n	800c65a <forward_ap+0x192>
 800c66a:	f10c 0c01 	add.w	ip, ip, #1
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	444c      	add	r4, r9
 800c672:	4448      	add	r0, r9
 800c674:	4563      	cmp	r3, ip
 800c676:	f04f 0200 	mov.w	r2, #0
 800c67a:	d1bc      	bne.n	800c5f6 <forward_ap+0x12e>
 800c67c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c67e:	44d0      	add	r8, sl
 800c680:	9c07      	ldr	r4, [sp, #28]
 800c682:	4451      	add	r1, sl
 800c684:	9a06      	ldr	r2, [sp, #24]
 800c686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c688:	4402      	add	r2, r0
 800c68a:	1a20      	subs	r0, r4, r0
 800c68c:	3301      	adds	r3, #1
 800c68e:	9007      	str	r0, [sp, #28]
 800c690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c692:	930d      	str	r3, [sp, #52]	; 0x34
 800c694:	4298      	cmp	r0, r3
 800c696:	d185      	bne.n	800c5a4 <forward_ap+0xdc>
 800c698:	9b05      	ldr	r3, [sp, #20]
 800c69a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c69c:	4413      	add	r3, r2
 800c69e:	9305      	str	r3, [sp, #20]
 800c6a0:	9a03      	ldr	r2, [sp, #12]
 800c6a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c6a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6a6:	440a      	add	r2, r1
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	9203      	str	r2, [sp, #12]
 800c6ac:	9a04      	ldr	r2, [sp, #16]
 800c6ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c6b0:	1a52      	subs	r2, r2, r1
 800c6b2:	9204      	str	r2, [sp, #16]
 800c6b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	f47f af55 	bne.w	800c566 <forward_ap+0x9e>
 800c6bc:	b01b      	add	sp, #108	; 0x6c
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c2:	6853      	ldr	r3, [r2, #4]
 800c6c4:	deff      	udf	#255	; 0xff
 800c6c6:	42a0      	cmp	r0, r4
 800c6c8:	9e02      	ldr	r6, [sp, #8]
 800c6ca:	d89b      	bhi.n	800c604 <forward_ap+0x13c>
 800c6cc:	e7bc      	b.n	800c648 <forward_ap+0x180>
 800c6ce:	46a3      	mov	fp, r4
 800c6d0:	e7ab      	b.n	800c62a <forward_ap+0x162>
 800c6d2:	9c08      	ldr	r4, [sp, #32]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	e76b      	b.n	800c5b0 <forward_ap+0xe8>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	deff      	udf	#255	; 0xff
 800c6de:	68d3      	ldr	r3, [r2, #12]
 800c6e0:	deff      	udf	#255	; 0xff
 800c6e2:	bf00      	nop

0800c6e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	ed2d 8b0c 	vpush	{d8-d13}
 800c6ec:	b08d      	sub	sp, #52	; 0x34
 800c6ee:	461d      	mov	r5, r3
 800c6f0:	9003      	str	r0, [sp, #12]
 800c6f2:	9207      	str	r2, [sp, #28]
 800c6f4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800c6f6:	9308      	str	r3, [sp, #32]
 800c6f8:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800c6fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6fe:	910b      	str	r1, [sp, #44]	; 0x2c
 800c700:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
 800c704:	fb00 f002 	mul.w	r0, r0, r2
 800c708:	9004      	str	r0, [sp, #16]
 800c70a:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 800c70e:	9009      	str	r0, [sp, #36]	; 0x24
 800c710:	2c00      	cmp	r4, #0
 800c712:	f000 80ed 	beq.w	800c8f0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 800c716:	009c      	lsls	r4, r3, #2
 800c718:	fb00 f305 	mul.w	r3, r0, r5
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	9405      	str	r4, [sp, #20]
 800c720:	9306      	str	r3, [sp, #24]
 800c722:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c724:	fb03 f305 	mul.w	r3, r3, r5
 800c728:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c730:	425b      	negs	r3, r3
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	2300      	movs	r3, #0
 800c736:	9302      	str	r3, [sp, #8]
 800c738:	00ab      	lsls	r3, r5, #2
 800c73a:	930a      	str	r3, [sp, #40]	; 0x28
 800c73c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f2c0 80dd 	blt.w	800c8fe <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 800c744:	9e01      	ldr	r6, [sp, #4]
 800c746:	2000      	movs	r0, #0
 800c748:	9d04      	ldr	r5, [sp, #16]
 800c74a:	9b07      	ldr	r3, [sp, #28]
 800c74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c74e:	9900      	ldr	r1, [sp, #0]
 800c750:	fb05 3502 	mla	r5, r5, r2, r3
 800c754:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c756:	440b      	add	r3, r1
 800c758:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c75a:	428b      	cmp	r3, r1
 800c75c:	bf94      	ite	ls
 800c75e:	ebc0 0003 	rsbls	r0, r0, r3
 800c762:	ebc0 0001 	rsbhi	r0, r0, r1
 800c766:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c768:	f1bb 0f00 	cmp.w	fp, #0
 800c76c:	eba3 0a00 	sub.w	sl, r3, r0
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	eba1 0900 	sub.w	r9, r1, r0
 800c776:	fb03 f000 	mul.w	r0, r3, r0
 800c77a:	f340 80c6 	ble.w	800c90a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 800c77e:	f020 040f 	bic.w	r4, r0, #15
 800c782:	eeb0 7a40 	vmov.f32	s14, s0
 800c786:	fb02 fa0a 	mul.w	sl, r2, sl
 800c78a:	f04f 0c00 	mov.w	ip, #0
 800c78e:	f104 38ff 	add.w	r8, r4, #4294967295
 800c792:	fb02 f909 	mul.w	r9, r2, r9
 800c796:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c79a:	f108 0801 	add.w	r8, r8, #1
 800c79e:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800c7a2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800c7a6:	2c00      	cmp	r4, #0
 800c7a8:	f340 80a7 	ble.w	800c8fa <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 800c7ac:	f106 0240 	add.w	r2, r6, #64	; 0x40
 800c7b0:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800c7ba:	3110      	adds	r1, #16
 800c7bc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800c7c0:	3340      	adds	r3, #64	; 0x40
 800c7c2:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 800c7c6:	42a1      	cmp	r1, r4
 800c7c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7cc:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800c7d0:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800c7d4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800c7d8:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800c7dc:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c7e0:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 800c7e4:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 800c7e8:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 800c7ec:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 800c7f0:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 800c7f4:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 800c7f8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c7fc:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 800c800:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 800c804:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 800c808:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 800c80c:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800c810:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 800c814:	eeed 7aa6 	vfma.f32	s15, s27, s13
 800c818:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800c81c:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800c820:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800c824:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 800c828:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800c82c:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800c830:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800c834:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800c838:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800c83c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800c840:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800c844:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800c848:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800c84c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800c850:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800c854:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800c858:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800c85c:	eeea 7a29 	vfma.f32	s15, s20, s19
 800c860:	eee9 7a28 	vfma.f32	s15, s18, s17
 800c864:	eee8 7a20 	vfma.f32	s15, s16, s1
 800c868:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c86c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c870:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c874:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c878:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c87c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c880:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c884:	db97      	blt.n	800c7b6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 800c886:	4476      	add	r6, lr
 800c888:	4475      	add	r5, lr
 800c88a:	4647      	mov	r7, r8
 800c88c:	42b8      	cmp	r0, r7
 800c88e:	dd10      	ble.n	800c8b2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 800c890:	463b      	mov	r3, r7
 800c892:	4631      	mov	r1, r6
 800c894:	462a      	mov	r2, r5
 800c896:	3301      	adds	r3, #1
 800c898:	ecf2 6a01 	vldmia	r2!, {s13}
 800c89c:	ecf1 7a01 	vldmia	r1!, {s15}
 800c8a0:	4298      	cmp	r0, r3
 800c8a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c8a6:	d1f6      	bne.n	800c896 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 800c8a8:	1bc7      	subs	r7, r0, r7
 800c8aa:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800c8ae:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800c8b2:	f10c 0c01 	add.w	ip, ip, #1
 800c8b6:	4456      	add	r6, sl
 800c8b8:	444d      	add	r5, r9
 800c8ba:	45dc      	cmp	ip, fp
 800c8bc:	f47f af73 	bne.w	800c7a6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 800c8c0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800c8c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c4:	9a03      	ldr	r2, [sp, #12]
 800c8c6:	4401      	add	r1, r0
 800c8c8:	9b02      	ldr	r3, [sp, #8]
 800c8ca:	ed82 7a00 	vstr	s14, [r2]
 800c8ce:	9128      	str	r1, [sp, #160]	; 0xa0
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	9905      	ldr	r1, [sp, #20]
 800c8d4:	9302      	str	r3, [sp, #8]
 800c8d6:	440a      	add	r2, r1
 800c8d8:	9906      	ldr	r1, [sp, #24]
 800c8da:	9203      	str	r2, [sp, #12]
 800c8dc:	9a00      	ldr	r2, [sp, #0]
 800c8de:	1a12      	subs	r2, r2, r0
 800c8e0:	9200      	str	r2, [sp, #0]
 800c8e2:	9a01      	ldr	r2, [sp, #4]
 800c8e4:	440a      	add	r2, r1
 800c8e6:	9201      	str	r2, [sp, #4]
 800c8e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	f47f af26 	bne.w	800c73c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 800c8f0:	b00d      	add	sp, #52	; 0x34
 800c8f2:	ecbd 8b0c 	vpop	{d8-d13}
 800c8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fa:	2700      	movs	r7, #0
 800c8fc:	e7c6      	b.n	800c88c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 800c8fe:	9a00      	ldr	r2, [sp, #0]
 800c900:	9b04      	ldr	r3, [sp, #16]
 800c902:	4610      	mov	r0, r2
 800c904:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c906:	189d      	adds	r5, r3, r2
 800c908:	e71f      	b.n	800c74a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 800c90a:	eeb0 7a40 	vmov.f32	s14, s0
 800c90e:	e7d7      	b.n	800c8c0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

0800c910 <forward_lite_conv2d_if32of32wf32>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	ed2d 8b02 	vpush	{d8}
 800c918:	b09f      	sub	sp, #124	; 0x7c
 800c91a:	4686      	mov	lr, r0
 800c91c:	4694      	mov	ip, r2
 800c91e:	af08      	add	r7, sp, #32
 800c920:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 800c924:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c926:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 800c92a:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 800c92e:	424e      	negs	r6, r1
 800c930:	64fc      	str	r4, [r7, #76]	; 0x4c
 800c932:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	613a      	str	r2, [r7, #16]
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c93c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c940:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 800c944:	617d      	str	r5, [r7, #20]
 800c946:	633e      	str	r6, [r7, #48]	; 0x30
 800c948:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	f000 8092 	beq.w	800ca76 <forward_lite_conv2d_if32of32wf32+0x166>
 800c952:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800c956:	6379      	str	r1, [r7, #52]	; 0x34
 800c958:	fb04 f202 	mul.w	r2, r4, r2
 800c95c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c960:	4244      	negs	r4, r0
 800c962:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 800cbcc <forward_lite_conv2d_if32of32wf32+0x2bc>
 800c966:	653c      	str	r4, [r7, #80]	; 0x50
 800c968:	fb03 f402 	mul.w	r4, r3, r2
 800c96c:	fb03 f201 	mul.w	r2, r3, r1
 800c970:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c978:	63bc      	str	r4, [r7, #56]	; 0x38
 800c97a:	fb01 f10a 	mul.w	r1, r1, sl
 800c97e:	0089      	lsls	r1, r1, #2
 800c980:	61b9      	str	r1, [r7, #24]
 800c982:	fb05 f102 	mul.w	r1, r5, r2
 800c986:	4655      	mov	r5, sl
 800c988:	fb06 f202 	mul.w	r2, r6, r2
 800c98c:	46da      	mov	sl, fp
 800c98e:	0089      	lsls	r1, r1, #2
 800c990:	61f9      	str	r1, [r7, #28]
 800c992:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 800c996:	f10b 0207 	add.w	r2, fp, #7
 800c99a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c99c:	f022 0107 	bic.w	r1, r2, #7
 800c9a0:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 800c9a4:	60f9      	str	r1, [r7, #12]
 800c9a6:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 800c9aa:	60ba      	str	r2, [r7, #8]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	6239      	str	r1, [r7, #32]
 800c9b0:	627a      	str	r2, [r7, #36]	; 0x24
 800c9b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b4:	2a00      	cmp	r2, #0
 800c9b6:	f2c0 80d5 	blt.w	800cb64 <forward_lite_conv2d_if32of32wf32+0x254>
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 800c9c0:	657a      	str	r2, [r7, #84]	; 0x54
 800c9c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c9c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c9c8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800c9cc:	440a      	add	r2, r1
 800c9ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9d0:	4282      	cmp	r2, r0
 800c9d2:	bf94      	ite	ls
 800c9d4:	ebc1 0102 	rsbls	r1, r1, r2
 800c9d8:	ebc1 0100 	rsbhi	r1, r1, r0
 800c9dc:	6a3a      	ldr	r2, [r7, #32]
 800c9de:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800c9e2:	6439      	str	r1, [r7, #64]	; 0x40
 800c9e4:	d24d      	bcs.n	800ca82 <forward_lite_conv2d_if32of32wf32+0x172>
 800c9e6:	b385      	cbz	r5, 800ca4a <forward_lite_conv2d_if32of32wf32+0x13a>
 800c9e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	f000 80bf 	beq.w	800cb6e <forward_lite_conv2d_if32of32wf32+0x25e>
 800c9f0:	4659      	mov	r1, fp
 800c9f2:	4691      	mov	r9, r2
 800c9f4:	46d3      	mov	fp, sl
 800c9f6:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800c9fa:	693e      	ldr	r6, [r7, #16]
 800c9fc:	2400      	movs	r4, #0
 800c9fe:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 800ca02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca04:	3401      	adds	r4, #1
 800ca06:	ecb9 0a01 	vldmia	r9!, {s0}
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	9207      	str	r2, [sp, #28]
 800ca0e:	f108 0804 	add.w	r8, r8, #4
 800ca12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca14:	e9cd a205 	strd	sl, r2, [sp, #20]
 800ca18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca1a:	9204      	str	r2, [sp, #16]
 800ca1c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ca20:	9203      	str	r2, [sp, #12]
 800ca22:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca26:	9202      	str	r2, [sp, #8]
 800ca28:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ca2c:	e9cd 5200 	strd	r5, r2, [sp]
 800ca30:	4632      	mov	r2, r6
 800ca32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca36:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca38:	445e      	add	r6, fp
 800ca3a:	f7ff fe53 	bl	800c6e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800ca3e:	42a5      	cmp	r5, r4
 800ca40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ca42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca46:	d1dc      	bne.n	800ca02 <forward_lite_conv2d_if32of32wf32+0xf2>
 800ca48:	46da      	mov	sl, fp
 800ca4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca4c:	69b8      	ldr	r0, [r7, #24]
 800ca4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca50:	4401      	add	r1, r0
 800ca52:	6978      	ldr	r0, [r7, #20]
 800ca54:	3201      	adds	r2, #1
 800ca56:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ca58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca5a:	627a      	str	r2, [r7, #36]	; 0x24
 800ca5c:	4401      	add	r1, r0
 800ca5e:	6339      	str	r1, [r7, #48]	; 0x30
 800ca60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca62:	1a09      	subs	r1, r1, r0
 800ca64:	69f8      	ldr	r0, [r7, #28]
 800ca66:	6379      	str	r1, [r7, #52]	; 0x34
 800ca68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca6a:	4401      	add	r1, r0
 800ca6c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ca6e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ca72:	4291      	cmp	r1, r2
 800ca74:	d19d      	bne.n	800c9b2 <forward_lite_conv2d_if32of32wf32+0xa2>
 800ca76:	375c      	adds	r7, #92	; 0x5c
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	ecbd 8b02 	vpop	{d8}
 800ca7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca82:	466a      	mov	r2, sp
 800ca84:	ee08 2a90 	vmov	s17, r2
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	ebad 0d02 	sub.w	sp, sp, r2
 800ca8e:	aa08      	add	r2, sp, #32
 800ca90:	2d00      	cmp	r5, #0
 800ca92:	d03d      	beq.n	800cb10 <forward_lite_conv2d_if32of32wf32+0x200>
 800ca94:	6938      	ldr	r0, [r7, #16]
 800ca96:	4659      	mov	r1, fp
 800ca98:	68bc      	ldr	r4, [r7, #8]
 800ca9a:	46ab      	mov	fp, r5
 800ca9c:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 800caa0:	f04f 0800 	mov.w	r8, #0
 800caa4:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800caa6:	4605      	mov	r5, r0
 800caa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800caaa:	b138      	cbz	r0, 800cabc <forward_lite_conv2d_if32of32wf32+0x1ac>
 800caac:	4628      	mov	r0, r5
 800caae:	4694      	mov	ip, r2
 800cab0:	f850 eb04 	ldr.w	lr, [r0], #4
 800cab4:	42a0      	cmp	r0, r4
 800cab6:	f84c eb04 	str.w	lr, [ip], #4
 800caba:	d1f9      	bne.n	800cab0 <forward_lite_conv2d_if32of32wf32+0x1a0>
 800cabc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cabe:	f108 0801 	add.w	r8, r8, #1
 800cac2:	b348      	cbz	r0, 800cb18 <forward_lite_conv2d_if32of32wf32+0x208>
 800cac4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cac6:	4455      	add	r5, sl
 800cac8:	ecb6 0a01 	vldmia	r6!, {s0}
 800cacc:	4454      	add	r4, sl
 800cace:	9007      	str	r0, [sp, #28]
 800cad0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cad2:	9006      	str	r0, [sp, #24]
 800cad4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cad6:	9005      	str	r0, [sp, #20]
 800cad8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cada:	9004      	str	r0, [sp, #16]
 800cadc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800cae0:	9003      	str	r0, [sp, #12]
 800cae2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800cae6:	9002      	str	r0, [sp, #8]
 800cae8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800caec:	e9cd b000 	strd	fp, r0, [sp]
 800caf0:	4648      	mov	r0, r9
 800caf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800caf6:	f109 0904 	add.w	r9, r9, #4
 800cafa:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 800cafe:	f7ff fdf1 	bl	800c6e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800cb02:	45d8      	cmp	r8, fp
 800cb04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb08:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 800cb0c:	d1cc      	bne.n	800caa8 <forward_lite_conv2d_if32of32wf32+0x198>
 800cb0e:	465d      	mov	r5, fp
 800cb10:	ee18 2a90 	vmov	r2, s17
 800cb14:	4695      	mov	sp, r2
 800cb16:	e798      	b.n	800ca4a <forward_lite_conv2d_if32of32wf32+0x13a>
 800cb18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cb1a:	eeb0 0a48 	vmov.f32	s0, s16
 800cb1e:	4455      	add	r5, sl
 800cb20:	4454      	add	r4, sl
 800cb22:	9007      	str	r0, [sp, #28]
 800cb24:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cb26:	9006      	str	r0, [sp, #24]
 800cb28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cb2a:	9005      	str	r0, [sp, #20]
 800cb2c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cb2e:	9004      	str	r0, [sp, #16]
 800cb30:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800cb34:	9003      	str	r0, [sp, #12]
 800cb36:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800cb3a:	9002      	str	r0, [sp, #8]
 800cb3c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cb40:	e9cd b000 	strd	fp, r0, [sp]
 800cb44:	4648      	mov	r0, r9
 800cb46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb4a:	f109 0904 	add.w	r9, r9, #4
 800cb4e:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 800cb52:	f7ff fdc7 	bl	800c6e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800cb56:	45c3      	cmp	fp, r8
 800cb58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb5c:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 800cb60:	d1a2      	bne.n	800caa8 <forward_lite_conv2d_if32of32wf32+0x198>
 800cb62:	e7d4      	b.n	800cb0e <forward_lite_conv2d_if32of32wf32+0x1fe>
 800cb64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb66:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800cb6a:	657a      	str	r2, [r7, #84]	; 0x54
 800cb6c:	e729      	b.n	800c9c2 <forward_lite_conv2d_if32of32wf32+0xb2>
 800cb6e:	4659      	mov	r1, fp
 800cb70:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800cb74:	46d3      	mov	fp, sl
 800cb76:	693e      	ldr	r6, [r7, #16]
 800cb78:	4614      	mov	r4, r2
 800cb7a:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 800cb7e:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 800cb82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb84:	3401      	adds	r4, #1
 800cb86:	4640      	mov	r0, r8
 800cb88:	eeb0 0a48 	vmov.f32	s0, s16
 800cb8c:	9207      	str	r2, [sp, #28]
 800cb8e:	f108 0804 	add.w	r8, r8, #4
 800cb92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb94:	f8cd 9010 	str.w	r9, [sp, #16]
 800cb98:	e9cd a205 	strd	sl, r2, [sp, #20]
 800cb9c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cba0:	9203      	str	r2, [sp, #12]
 800cba2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cba6:	9202      	str	r2, [sp, #8]
 800cba8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cbac:	e9cd 5200 	strd	r5, r2, [sp]
 800cbb0:	4632      	mov	r2, r6
 800cbb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cbb6:	6579      	str	r1, [r7, #84]	; 0x54
 800cbb8:	445e      	add	r6, fp
 800cbba:	f7ff fd93 	bl	800c6e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800cbbe:	42a5      	cmp	r5, r4
 800cbc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cbc6:	d1dc      	bne.n	800cb82 <forward_lite_conv2d_if32of32wf32+0x272>
 800cbc8:	e73e      	b.n	800ca48 <forward_lite_conv2d_if32of32wf32+0x138>
 800cbca:	bf00      	nop
 800cbcc:	00000000 	.word	0x00000000

0800cbd0 <forward_lite_dw_if32of32wf32>:
 800cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	b0a5      	sub	sp, #148	; 0x94
 800cbd6:	9111      	str	r1, [sp, #68]	; 0x44
 800cbd8:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
 800cbdc:	9320      	str	r3, [sp, #128]	; 0x80
 800cbde:	9122      	str	r1, [sp, #136]	; 0x88
 800cbe0:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 800cbe4:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 800cbe8:	9219      	str	r2, [sp, #100]	; 0x64
 800cbea:	9123      	str	r1, [sp, #140]	; 0x8c
 800cbec:	4259      	negs	r1, r3
 800cbee:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	; 0xd8
 800cbf2:	910f      	str	r1, [sp, #60]	; 0x3c
 800cbf4:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800cbf6:	901f      	str	r0, [sp, #124]	; 0x7c
 800cbf8:	9221      	str	r2, [sp, #132]	; 0x84
 800cbfa:	2900      	cmp	r1, #0
 800cbfc:	f000 8137 	beq.w	800ce6e <forward_lite_dw_if32of32wf32+0x29e>
 800cc00:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800cc02:	4252      	negs	r2, r2
 800cc04:	9310      	str	r3, [sp, #64]	; 0x40
 800cc06:	921c      	str	r2, [sp, #112]	; 0x70
 800cc08:	00ca      	lsls	r2, r1, #3
 800cc0a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800cc0c:	008f      	lsls	r7, r1, #2
 800cc0e:	9201      	str	r2, [sp, #4]
 800cc10:	ea4f 1801 	mov.w	r8, r1, lsl #4
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800cc18:	ed9f 3aa1 	vldr	s6, [pc, #644]	; 800cea0 <forward_lite_dw_if32of32wf32+0x2d0>
 800cc1c:	46bb      	mov	fp, r7
 800cc1e:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc20:	46c1      	mov	r9, r8
 800cc22:	fb02 f303 	mul.w	r3, r2, r3
 800cc26:	931e      	str	r3, [sp, #120]	; 0x78
 800cc28:	2300      	movs	r3, #0
 800cc2a:	9312      	str	r3, [sp, #72]	; 0x48
 800cc2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cc2e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800cc30:	2800      	cmp	r0, #0
 800cc32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc34:	eb02 0103 	add.w	r1, r2, r3
 800cc38:	bfb8      	it	lt
 800cc3a:	461a      	movlt	r2, r3
 800cc3c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800cc3e:	bfa8      	it	ge
 800cc40:	2200      	movge	r2, #0
 800cc42:	4299      	cmp	r1, r3
 800cc44:	bf28      	it	cs
 800cc46:	4619      	movcs	r1, r3
 800cc48:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f000 8101 	beq.w	800ce52 <forward_lite_dw_if32of32wf32+0x282>
 800cc50:	1a53      	subs	r3, r2, r1
 800cc52:	eba1 0e02 	sub.w	lr, r1, r2
 800cc56:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800cc58:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800cc5c:	46f2      	mov	sl, lr
 800cc5e:	440b      	add	r3, r1
 800cc60:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800cc62:	fb01 f303 	mul.w	r3, r1, r3
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	9309      	str	r3, [sp, #36]	; 0x24
 800cc6a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 800cc6e:	fbb3 f1f1 	udiv	r1, r3, r1
 800cc72:	1813      	adds	r3, r2, r0
 800cc74:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800cc76:	9116      	str	r1, [sp, #88]	; 0x58
 800cc78:	fb02 f200 	mul.w	r2, r2, r0
 800cc7c:	9215      	str	r2, [sp, #84]	; 0x54
 800cc7e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800cc80:	fb02 f303 	mul.w	r3, r2, r3
 800cc84:	931d      	str	r3, [sp, #116]	; 0x74
 800cc86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc88:	930d      	str	r3, [sp, #52]	; 0x34
 800cc8a:	008b      	lsls	r3, r1, #2
 800cc8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc90:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc94:	930a      	str	r3, [sp, #40]	; 0x28
 800cc96:	2300      	movs	r3, #0
 800cc98:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f2c0 80fa 	blt.w	800ce96 <forward_lite_dw_if32of32wf32+0x2c6>
 800cca2:	2500      	movs	r5, #0
 800cca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cca6:	462a      	mov	r2, r5
 800cca8:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800ccaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ccac:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800ccae:	1808      	adds	r0, r1, r0
 800ccb0:	993b      	ldr	r1, [sp, #236]	; 0xec
 800ccb2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800ccb4:	4288      	cmp	r0, r1
 800ccb6:	bf28      	it	cs
 800ccb8:	4608      	movcs	r0, r1
 800ccba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccbc:	1a80      	subs	r0, r0, r2
 800ccbe:	190c      	adds	r4, r1, r4
 800ccc0:	2e00      	cmp	r6, #0
 800ccc2:	f000 80d9 	beq.w	800ce78 <forward_lite_dw_if32of32wf32+0x2a8>
 800ccc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccc8:	960c      	str	r6, [sp, #48]	; 0x30
 800ccca:	4296      	cmp	r6, r2
 800cccc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ccce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccd2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800ccd4:	fe43 3a22 	vseleq.f32	s7, s6, s5
 800ccd8:	1a11      	subs	r1, r2, r0
 800ccda:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ccdc:	fb02 f101 	mul.w	r1, r2, r1
 800cce0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800cce2:	1a12      	subs	r2, r2, r0
 800cce4:	442c      	add	r4, r5
 800cce6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800cce8:	fb0b 5404 	mla	r4, fp, r4, r5
 800ccec:	eb04 050b 	add.w	r5, r4, fp
 800ccf0:	9407      	str	r4, [sp, #28]
 800ccf2:	42ac      	cmp	r4, r5
 800ccf4:	9514      	str	r5, [sp, #80]	; 0x50
 800ccf6:	f080 8096 	bcs.w	800ce26 <forward_lite_dw_if32of32wf32+0x256>
 800ccfa:	0089      	lsls	r1, r1, #2
 800ccfc:	f020 0803 	bic.w	r8, r0, #3
 800cd00:	0092      	lsls	r2, r2, #2
 800cd02:	9102      	str	r1, [sp, #8]
 800cd04:	9203      	str	r2, [sp, #12]
 800cd06:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
 800cd0a:	428a      	cmp	r2, r1
 800cd0c:	f0c0 808b 	bcc.w	800ce26 <forward_lite_dw_if32of32wf32+0x256>
 800cd10:	2901      	cmp	r1, #1
 800cd12:	f040 80c7 	bne.w	800cea4 <forward_lite_dw_if32of32wf32+0x2d4>
 800cd16:	f108 32ff 	add.w	r2, r8, #4294967295
 800cd1a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800cd1c:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
 800cd20:	0891      	lsrs	r1, r2, #2
 800cd22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd24:	4422      	add	r2, r4
 800cd26:	9208      	str	r2, [sp, #32]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	920e      	str	r2, [sp, #56]	; 0x38
 800cd2c:	1c4a      	adds	r2, r1, #1
 800cd2e:	fb01 9109 	mla	r1, r1, r9, r9
 800cd32:	e9dd ce02 	ldrd	ip, lr, [sp, #8]
 800cd36:	9106      	str	r1, [sp, #24]
 800cd38:	0111      	lsls	r1, r2, #4
 800cd3a:	0092      	lsls	r2, r2, #2
 800cd3c:	9105      	str	r1, [sp, #20]
 800cd3e:	9204      	str	r2, [sp, #16]
 800cd40:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd44:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800cd48:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd4a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800cd4e:	9202      	str	r2, [sp, #8]
 800cd50:	ecb7 7a01 	vldmia	r7!, {s14}
 800cd54:	f1ba 0f00 	cmp.w	sl, #0
 800cd58:	ee23 7a87 	vmul.f32	s14, s7, s14
 800cd5c:	dd4a      	ble.n	800cdf4 <forward_lite_dw_if32of32wf32+0x224>
 800cd5e:	9a07      	ldr	r2, [sp, #28]
 800cd60:	2600      	movs	r6, #0
 800cd62:	f1b8 0f00 	cmp.w	r8, #0
 800cd66:	f340 8085 	ble.w	800ce74 <forward_lite_dw_if32of32wf32+0x2a4>
 800cd6a:	9c01      	ldr	r4, [sp, #4]
 800cd6c:	f103 0110 	add.w	r1, r3, #16
 800cd70:	f04f 0b00 	mov.w	fp, #0
 800cd74:	1915      	adds	r5, r2, r4
 800cd76:	4614      	mov	r4, r2
 800cd78:	ed51 6a03 	vldr	s13, [r1, #-12]
 800cd7c:	f10b 0b04 	add.w	fp, fp, #4
 800cd80:	edd4 7a01 	vldr	s15, [r4, #4]
 800cd84:	3110      	adds	r1, #16
 800cd86:	ed94 4a00 	vldr	s8, [r4]
 800cd8a:	45c3      	cmp	fp, r8
 800cd8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd90:	ed51 4a08 	vldr	s9, [r1, #-32]	; 0xffffffe0
 800cd94:	ed95 5a00 	vldr	s10, [r5]
 800cd98:	444c      	add	r4, r9
 800cd9a:	ed51 5a06 	vldr	s11, [r1, #-24]	; 0xffffffe8
 800cd9e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cda2:	ed95 6a01 	vldr	s12, [r5, #4]
 800cda6:	ed51 6a05 	vldr	s13, [r1, #-20]	; 0xffffffec
 800cdaa:	444d      	add	r5, r9
 800cdac:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cdb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cdb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdb8:	dbde      	blt.n	800cd78 <forward_lite_dw_if32of32wf32+0x1a8>
 800cdba:	9906      	ldr	r1, [sp, #24]
 800cdbc:	440a      	add	r2, r1
 800cdbe:	9905      	ldr	r1, [sp, #20]
 800cdc0:	440b      	add	r3, r1
 800cdc2:	9904      	ldr	r1, [sp, #16]
 800cdc4:	4288      	cmp	r0, r1
 800cdc6:	dd10      	ble.n	800cdea <forward_lite_dw_if32of32wf32+0x21a>
 800cdc8:	460c      	mov	r4, r1
 800cdca:	4693      	mov	fp, r2
 800cdcc:	461d      	mov	r5, r3
 800cdce:	3401      	adds	r4, #1
 800cdd0:	ecfb 6a01 	vldmia	fp!, {s13}
 800cdd4:	ecf5 7a01 	vldmia	r5!, {s15}
 800cdd8:	42a0      	cmp	r0, r4
 800cdda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cdde:	d1f6      	bne.n	800cdce <forward_lite_dw_if32of32wf32+0x1fe>
 800cde0:	1a41      	subs	r1, r0, r1
 800cde2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cde6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800cdea:	3601      	adds	r6, #1
 800cdec:	4462      	add	r2, ip
 800cdee:	4473      	add	r3, lr
 800cdf0:	45b2      	cmp	sl, r6
 800cdf2:	d1b6      	bne.n	800cd62 <forward_lite_dw_if32of32wf32+0x192>
 800cdf4:	9a02      	ldr	r2, [sp, #8]
 800cdf6:	eca2 7a01 	vstmia	r2!, {s14}
 800cdfa:	9202      	str	r2, [sp, #8]
 800cdfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdfe:	4413      	add	r3, r2
 800ce00:	9a08      	ldr	r2, [sp, #32]
 800ce02:	42ba      	cmp	r2, r7
 800ce04:	d1a4      	bne.n	800cd50 <forward_lite_dw_if32of32wf32+0x180>
 800ce06:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ce08:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800ce0a:	9a07      	ldr	r2, [sp, #28]
 800ce0c:	4421      	add	r1, r4
 800ce0e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800ce10:	3204      	adds	r2, #4
 800ce12:	910e      	str	r1, [sp, #56]	; 0x38
 800ce14:	9908      	ldr	r1, [sp, #32]
 800ce16:	9207      	str	r2, [sp, #28]
 800ce18:	4421      	add	r1, r4
 800ce1a:	9108      	str	r1, [sp, #32]
 800ce1c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ce1e:	428a      	cmp	r2, r1
 800ce20:	d38e      	bcc.n	800cd40 <forward_lite_dw_if32of32wf32+0x170>
 800ce22:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 800ce26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce28:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ce2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce2c:	440a      	add	r2, r1
 800ce2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ce30:	3301      	adds	r3, #1
 800ce32:	920a      	str	r2, [sp, #40]	; 0x28
 800ce34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce36:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce38:	440a      	add	r2, r1
 800ce3a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce3e:	1a52      	subs	r2, r2, r1
 800ce40:	920d      	str	r2, [sp, #52]	; 0x34
 800ce42:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ce44:	429a      	cmp	r2, r3
 800ce46:	f47f af28 	bne.w	800cc9a <forward_lite_dw_if32of32wf32+0xca>
 800ce4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ce4e:	4413      	add	r3, r2
 800ce50:	9311      	str	r3, [sp, #68]	; 0x44
 800ce52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce54:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800ce56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce58:	440a      	add	r2, r1
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ce5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce60:	9312      	str	r3, [sp, #72]	; 0x48
 800ce62:	1a52      	subs	r2, r2, r1
 800ce64:	9210      	str	r2, [sp, #64]	; 0x40
 800ce66:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	f47f aedf 	bne.w	800cc2c <forward_lite_dw_if32of32wf32+0x5c>
 800ce6e:	b025      	add	sp, #148	; 0x94
 800ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce74:	2100      	movs	r1, #0
 800ce76:	e7a5      	b.n	800cdc4 <forward_lite_dw_if32of32wf32+0x1f4>
 800ce78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ce7a:	eef0 3a43 	vmov.f32	s7, s6
 800ce7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce84:	920c      	str	r2, [sp, #48]	; 0x30
 800ce86:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800ce88:	1a11      	subs	r1, r2, r0
 800ce8a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ce8c:	fb02 f101 	mul.w	r1, r2, r1
 800ce90:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800ce92:	1a12      	subs	r2, r2, r0
 800ce94:	e726      	b.n	800cce4 <forward_lite_dw_if32of32wf32+0x114>
 800ce96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ce98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce9a:	462a      	mov	r2, r5
 800ce9c:	442b      	add	r3, r5
 800ce9e:	e703      	b.n	800cca8 <forward_lite_dw_if32of32wf32+0xd8>
 800cea0:	00000000 	.word	0x00000000
 800cea4:	f108 31ff 	add.w	r1, r8, #4294967295
 800cea8:	2400      	movs	r4, #0
 800ceaa:	0889      	lsrs	r1, r1, #2
 800ceac:	940e      	str	r4, [sp, #56]	; 0x38
 800ceae:	941a      	str	r4, [sp, #104]	; 0x68
 800ceb0:	1c4a      	adds	r2, r1, #1
 800ceb2:	fb01 9109 	mla	r1, r1, r9, r9
 800ceb6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800ceba:	9105      	str	r1, [sp, #20]
 800cebc:	0111      	lsls	r1, r2, #4
 800cebe:	9104      	str	r1, [sp, #16]
 800cec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cec2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cec4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800cec6:	440a      	add	r2, r1
 800cec8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ceca:	190d      	adds	r5, r1, r4
 800cecc:	920e      	str	r2, [sp, #56]	; 0x38
 800cece:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ced2:	9506      	str	r5, [sp, #24]
 800ced4:	0092      	lsls	r2, r2, #2
 800ced6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ced8:	9118      	str	r1, [sp, #96]	; 0x60
 800ceda:	192c      	adds	r4, r5, r4
 800cedc:	921a      	str	r2, [sp, #104]	; 0x68
 800cede:	9408      	str	r4, [sp, #32]
 800cee0:	9a06      	ldr	r2, [sp, #24]
 800cee2:	f1ba 0f00 	cmp.w	sl, #0
 800cee6:	ecb2 7a01 	vldmia	r2!, {s14}
 800ceea:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ceee:	9206      	str	r2, [sp, #24]
 800cef0:	dd4f      	ble.n	800cf92 <forward_lite_dw_if32of32wf32+0x3c2>
 800cef2:	9907      	ldr	r1, [sp, #28]
 800cef4:	2700      	movs	r7, #0
 800cef6:	f1b8 0f00 	cmp.w	r8, #0
 800cefa:	dd5b      	ble.n	800cfb4 <forward_lite_dw_if32of32wf32+0x3e4>
 800cefc:	9c01      	ldr	r4, [sp, #4]
 800cefe:	f103 0210 	add.w	r2, r3, #16
 800cf02:	2600      	movs	r6, #0
 800cf04:	190d      	adds	r5, r1, r4
 800cf06:	460c      	mov	r4, r1
 800cf08:	eb04 0c0b 	add.w	ip, r4, fp
 800cf0c:	ed12 4a03 	vldr	s8, [r2, #-12]
 800cf10:	ed52 4a04 	vldr	s9, [r2, #-16]
 800cf14:	3604      	adds	r6, #4
 800cf16:	eddc 7a00 	vldr	s15, [ip]
 800cf1a:	eb05 0c0b 	add.w	ip, r5, fp
 800cf1e:	ed94 5a00 	vldr	s10, [r4]
 800cf22:	4546      	cmp	r6, r8
 800cf24:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cf28:	edd5 6a00 	vldr	s13, [r5]
 800cf2c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800cf30:	444c      	add	r4, r9
 800cf32:	ed12 6a01 	vldr	s12, [r2, #-4]
 800cf36:	444d      	add	r5, r9
 800cf38:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cf3c:	f102 0210 	add.w	r2, r2, #16
 800cf40:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800cf44:	eddc 6a00 	vldr	s13, [ip]
 800cf48:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cf4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf50:	dbda      	blt.n	800cf08 <forward_lite_dw_if32of32wf32+0x338>
 800cf52:	9a05      	ldr	r2, [sp, #20]
 800cf54:	4411      	add	r1, r2
 800cf56:	9a04      	ldr	r2, [sp, #16]
 800cf58:	4413      	add	r3, r2
 800cf5a:	4672      	mov	r2, lr
 800cf5c:	4290      	cmp	r0, r2
 800cf5e:	dd11      	ble.n	800cf84 <forward_lite_dw_if32of32wf32+0x3b4>
 800cf60:	4615      	mov	r5, r2
 800cf62:	460c      	mov	r4, r1
 800cf64:	461e      	mov	r6, r3
 800cf66:	3501      	adds	r5, #1
 800cf68:	edd4 7a00 	vldr	s15, [r4]
 800cf6c:	ecf6 6a01 	vldmia	r6!, {s13}
 800cf70:	445c      	add	r4, fp
 800cf72:	4285      	cmp	r5, r0
 800cf74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf78:	d1f5      	bne.n	800cf66 <forward_lite_dw_if32of32wf32+0x396>
 800cf7a:	1a82      	subs	r2, r0, r2
 800cf7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cf80:	fb02 110b 	mla	r1, r2, fp, r1
 800cf84:	9a02      	ldr	r2, [sp, #8]
 800cf86:	3701      	adds	r7, #1
 800cf88:	4411      	add	r1, r2
 800cf8a:	4557      	cmp	r7, sl
 800cf8c:	9a03      	ldr	r2, [sp, #12]
 800cf8e:	4413      	add	r3, r2
 800cf90:	d1b1      	bne.n	800cef6 <forward_lite_dw_if32of32wf32+0x326>
 800cf92:	9a08      	ldr	r2, [sp, #32]
 800cf94:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf96:	eca2 7a01 	vstmia	r2!, {s14}
 800cf9a:	9208      	str	r2, [sp, #32]
 800cf9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf9e:	4413      	add	r3, r2
 800cfa0:	9a06      	ldr	r2, [sp, #24]
 800cfa2:	428a      	cmp	r2, r1
 800cfa4:	d19c      	bne.n	800cee0 <forward_lite_dw_if32of32wf32+0x310>
 800cfa6:	9a07      	ldr	r2, [sp, #28]
 800cfa8:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cfaa:	3204      	adds	r2, #4
 800cfac:	428a      	cmp	r2, r1
 800cfae:	9207      	str	r2, [sp, #28]
 800cfb0:	d386      	bcc.n	800cec0 <forward_lite_dw_if32of32wf32+0x2f0>
 800cfb2:	e738      	b.n	800ce26 <forward_lite_dw_if32of32wf32+0x256>
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	e7d1      	b.n	800cf5c <forward_lite_dw_if32of32wf32+0x38c>

0800cfb8 <forward_lite_dense_if32of32wf32>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	ed2d 8b0c 	vpush	{d8-d13}
 800cfc0:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800cfc4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800cfc8:	4287      	cmp	r7, r0
 800cfca:	f240 8105 	bls.w	800d1d8 <forward_lite_dense_if32of32wf32+0x220>
 800cfce:	f1a6 0810 	sub.w	r8, r6, #16
 800cfd2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	f006 0b0f 	and.w	fp, r6, #15
 800cfdc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800cfe0:	f108 0801 	add.w	r8, r8, #1
 800cfe4:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800cfe8:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800cfec:	2e0f      	cmp	r6, #15
 800cfee:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800d204 <forward_lite_dense_if32of32wf32+0x24c>
 800cff2:	f240 8102 	bls.w	800d1fa <forward_lite_dense_if32of32wf32+0x242>
 800cff6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800cffa:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800cffe:	46b6      	mov	lr, r6
 800d000:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800d004:	f1ae 0e10 	sub.w	lr, lr, #16
 800d008:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800d00c:	3440      	adds	r4, #64	; 0x40
 800d00e:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800d012:	f1be 0f0f 	cmp.w	lr, #15
 800d016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d01a:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800d01e:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800d022:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800d026:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800d02a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d02e:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800d032:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800d036:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800d03a:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800d03e:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800d042:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800d046:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d04a:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800d04e:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800d052:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800d056:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800d05a:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800d05e:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800d062:	eeed 7a26 	vfma.f32	s15, s26, s13
 800d066:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800d06a:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800d06e:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800d072:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800d076:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800d07a:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800d07e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800d082:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800d086:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800d08a:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800d08e:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800d092:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800d096:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800d09a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d09e:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800d0a2:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800d0a6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800d0aa:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d0ae:	eee8 7a88 	vfma.f32	s15, s17, s16
 800d0b2:	eee0 7a20 	vfma.f32	s15, s0, s1
 800d0b6:	eee1 7a21 	vfma.f32	s15, s2, s3
 800d0ba:	eee2 7a22 	vfma.f32	s15, s4, s5
 800d0be:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d0c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d0c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d0ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d0ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0d2:	d895      	bhi.n	800d000 <forward_lite_dense_if32of32wf32+0x48>
 800d0d4:	eb02 0e0a 	add.w	lr, r2, sl
 800d0d8:	465c      	mov	r4, fp
 800d0da:	46c4      	mov	ip, r8
 800d0dc:	2c00      	cmp	r4, #0
 800d0de:	d075      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d0e0:	eddc 6a00 	vldr	s13, [ip]
 800d0e4:	2c01      	cmp	r4, #1
 800d0e6:	edde 7a00 	vldr	s15, [lr]
 800d0ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d0ee:	d06d      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d0f0:	eddc 6a01 	vldr	s13, [ip, #4]
 800d0f4:	2c02      	cmp	r4, #2
 800d0f6:	edde 7a01 	vldr	s15, [lr, #4]
 800d0fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d0fe:	d065      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d100:	eddc 6a02 	vldr	s13, [ip, #8]
 800d104:	2c03      	cmp	r4, #3
 800d106:	edde 7a02 	vldr	s15, [lr, #8]
 800d10a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d10e:	d05d      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d110:	eddc 6a03 	vldr	s13, [ip, #12]
 800d114:	2c04      	cmp	r4, #4
 800d116:	edde 7a03 	vldr	s15, [lr, #12]
 800d11a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d11e:	d055      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d120:	eddc 6a04 	vldr	s13, [ip, #16]
 800d124:	2c05      	cmp	r4, #5
 800d126:	edde 7a04 	vldr	s15, [lr, #16]
 800d12a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d12e:	d04d      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d130:	eddc 6a05 	vldr	s13, [ip, #20]
 800d134:	2c06      	cmp	r4, #6
 800d136:	edde 7a05 	vldr	s15, [lr, #20]
 800d13a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d13e:	d045      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d140:	eddc 6a06 	vldr	s13, [ip, #24]
 800d144:	2c07      	cmp	r4, #7
 800d146:	edde 7a06 	vldr	s15, [lr, #24]
 800d14a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d14e:	d03d      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d150:	eddc 6a07 	vldr	s13, [ip, #28]
 800d154:	2c08      	cmp	r4, #8
 800d156:	edde 7a07 	vldr	s15, [lr, #28]
 800d15a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d15e:	d035      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d160:	eddc 6a08 	vldr	s13, [ip, #32]
 800d164:	2c09      	cmp	r4, #9
 800d166:	edde 7a08 	vldr	s15, [lr, #32]
 800d16a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d16e:	d02d      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d170:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800d174:	2c0a      	cmp	r4, #10
 800d176:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800d17a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d17e:	d025      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d180:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800d184:	2c0b      	cmp	r4, #11
 800d186:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800d18a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d18e:	d01d      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d190:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800d194:	2c0c      	cmp	r4, #12
 800d196:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800d19a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d19e:	d015      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d1a0:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800d1a4:	3c0d      	subs	r4, #13
 800d1a6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800d1aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1ae:	d00d      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d1b0:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800d1b4:	2c01      	cmp	r4, #1
 800d1b6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800d1ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1be:	d005      	beq.n	800d1cc <forward_lite_dense_if32of32wf32+0x214>
 800d1c0:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800d1c4:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800d1c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1cc:	eca5 7a01 	vstmia	r5!, {s14}
 800d1d0:	42af      	cmp	r7, r5
 800d1d2:	444a      	add	r2, r9
 800d1d4:	f63f af0a 	bhi.w	800cfec <forward_lite_dense_if32of32wf32+0x34>
 800d1d8:	b15b      	cbz	r3, 800d1f2 <forward_lite_dense_if32of32wf32+0x23a>
 800d1da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d1dc:	b14a      	cbz	r2, 800d1f2 <forward_lite_dense_if32of32wf32+0x23a>
 800d1de:	edd0 7a00 	vldr	s15, [r0]
 800d1e2:	ecb3 7a01 	vldmia	r3!, {s14}
 800d1e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1ea:	ece0 7a01 	vstmia	r0!, {s15}
 800d1ee:	4287      	cmp	r7, r0
 800d1f0:	d1f5      	bne.n	800d1de <forward_lite_dense_if32of32wf32+0x226>
 800d1f2:	ecbd 8b0c 	vpop	{d8-d13}
 800d1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fa:	4634      	mov	r4, r6
 800d1fc:	4696      	mov	lr, r2
 800d1fe:	468c      	mov	ip, r1
 800d200:	e76c      	b.n	800d0dc <forward_lite_dense_if32of32wf32+0x124>
 800d202:	bf00      	nop
 800d204:	00000000 	.word	0x00000000

0800d208 <st_int8_copy>:
 800d208:	4288      	cmp	r0, r1
 800d20a:	d010      	beq.n	800d22e <st_int8_copy+0x26>
 800d20c:	b17a      	cbz	r2, 800d22e <st_int8_copy+0x26>
 800d20e:	4288      	cmp	r0, r1
 800d210:	eb00 0302 	add.w	r3, r0, r2
 800d214:	d20c      	bcs.n	800d230 <st_int8_copy+0x28>
 800d216:	428b      	cmp	r3, r1
 800d218:	d90a      	bls.n	800d230 <st_int8_copy+0x28>
 800d21a:	4283      	cmp	r3, r0
 800d21c:	440a      	add	r2, r1
 800d21e:	d906      	bls.n	800d22e <st_int8_copy+0x26>
 800d220:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800d224:	4283      	cmp	r3, r0
 800d226:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800d22a:	d1f9      	bne.n	800d220 <st_int8_copy+0x18>
 800d22c:	4770      	bx	lr
 800d22e:	4770      	bx	lr
 800d230:	078b      	lsls	r3, r1, #30
 800d232:	d102      	bne.n	800d23a <st_int8_copy+0x32>
 800d234:	e008      	b.n	800d248 <st_int8_copy+0x40>
 800d236:	2a00      	cmp	r2, #0
 800d238:	d04d      	beq.n	800d2d6 <st_int8_copy+0xce>
 800d23a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800d23e:	3a01      	subs	r2, #1
 800d240:	f801 3b01 	strb.w	r3, [r1], #1
 800d244:	078b      	lsls	r3, r1, #30
 800d246:	d1f6      	bne.n	800d236 <st_int8_copy+0x2e>
 800d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24c:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800d250:	d05e      	beq.n	800d310 <st_int8_copy+0x108>
 800d252:	ea40 0301 	orr.w	r3, r0, r1
 800d256:	075b      	lsls	r3, r3, #29
 800d258:	d13e      	bne.n	800d2d8 <st_int8_copy+0xd0>
 800d25a:	f10e 33ff 	add.w	r3, lr, #4294967295
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d93a      	bls.n	800d2d8 <st_int8_copy+0xd0>
 800d262:	f100 0310 	add.w	r3, r0, #16
 800d266:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800d26a:	f101 0c10 	add.w	ip, r1, #16
 800d26e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800d272:	3310      	adds	r3, #16
 800d274:	f10c 0c10 	add.w	ip, ip, #16
 800d278:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800d27c:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800d280:	4573      	cmp	r3, lr
 800d282:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800d286:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800d28a:	d1f2      	bne.n	800d272 <st_int8_copy+0x6a>
 800d28c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800d290:	4421      	add	r1, r4
 800d292:	4420      	add	r0, r4
 800d294:	f002 0203 	and.w	r2, r2, #3
 800d298:	b16b      	cbz	r3, 800d2b6 <st_int8_copy+0xae>
 800d29a:	6804      	ldr	r4, [r0, #0]
 800d29c:	600c      	str	r4, [r1, #0]
 800d29e:	1e5c      	subs	r4, r3, #1
 800d2a0:	d005      	beq.n	800d2ae <st_int8_copy+0xa6>
 800d2a2:	6845      	ldr	r5, [r0, #4]
 800d2a4:	2c01      	cmp	r4, #1
 800d2a6:	604d      	str	r5, [r1, #4]
 800d2a8:	d001      	beq.n	800d2ae <st_int8_copy+0xa6>
 800d2aa:	6884      	ldr	r4, [r0, #8]
 800d2ac:	608c      	str	r4, [r1, #8]
 800d2ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d2b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d2b6:	b162      	cbz	r2, 800d2d2 <st_int8_copy+0xca>
 800d2b8:	f990 3000 	ldrsb.w	r3, [r0]
 800d2bc:	3a01      	subs	r2, #1
 800d2be:	700b      	strb	r3, [r1, #0]
 800d2c0:	d007      	beq.n	800d2d2 <st_int8_copy+0xca>
 800d2c2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d2c6:	2a01      	cmp	r2, #1
 800d2c8:	704b      	strb	r3, [r1, #1]
 800d2ca:	d002      	beq.n	800d2d2 <st_int8_copy+0xca>
 800d2cc:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800d2d0:	708b      	strb	r3, [r1, #2]
 800d2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d6:	4770      	bx	lr
 800d2d8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800d2dc:	460b      	mov	r3, r1
 800d2de:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800d2e2:	4684      	mov	ip, r0
 800d2e4:	f8dc 8000 	ldr.w	r8, [ip]
 800d2e8:	3310      	adds	r3, #16
 800d2ea:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800d2ee:	f10c 0c10 	add.w	ip, ip, #16
 800d2f2:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800d2f6:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800d2fa:	f843 8c10 	str.w	r8, [r3, #-16]
 800d2fe:	f843 7c0c 	str.w	r7, [r3, #-12]
 800d302:	f843 6c08 	str.w	r6, [r3, #-8]
 800d306:	f843 5c04 	str.w	r5, [r3, #-4]
 800d30a:	459e      	cmp	lr, r3
 800d30c:	d1ea      	bne.n	800d2e4 <st_int8_copy+0xdc>
 800d30e:	e7bd      	b.n	800d28c <st_int8_copy+0x84>
 800d310:	0893      	lsrs	r3, r2, #2
 800d312:	f002 0203 	and.w	r2, r2, #3
 800d316:	e7bf      	b.n	800d298 <st_int8_copy+0x90>

0800d318 <ai_sum>:
 800d318:	edd1 7a00 	vldr	s15, [r1]
 800d31c:	ed92 7a00 	vldr	s14, [r2]
 800d320:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d324:	edc0 7a00 	vstr	s15, [r0]
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop

0800d32c <ai_sum_f32>:
 800d32c:	edd1 7a00 	vldr	s15, [r1]
 800d330:	ed92 7a00 	vldr	s14, [r2]
 800d334:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d338:	edc0 7a00 	vstr	s15, [r0]
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop

0800d340 <ai_sum_buffer_f32>:
 800d340:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d344:	4298      	cmp	r0, r3
 800d346:	d209      	bcs.n	800d35c <ai_sum_buffer_f32+0x1c>
 800d348:	ecf1 7a01 	vldmia	r1!, {s15}
 800d34c:	ecb2 7a01 	vldmia	r2!, {s14}
 800d350:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d354:	ece0 7a01 	vstmia	r0!, {s15}
 800d358:	4283      	cmp	r3, r0
 800d35a:	d8f5      	bhi.n	800d348 <ai_sum_buffer_f32+0x8>
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop

0800d360 <ai_mul_f32>:
 800d360:	edd1 7a00 	vldr	s15, [r1]
 800d364:	ed92 7a00 	vldr	s14, [r2]
 800d368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d36c:	edc0 7a00 	vstr	s15, [r0]
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop

0800d374 <ai_mul_buffer_f32>:
 800d374:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d378:	4298      	cmp	r0, r3
 800d37a:	d209      	bcs.n	800d390 <ai_mul_buffer_f32+0x1c>
 800d37c:	ecf1 7a01 	vldmia	r1!, {s15}
 800d380:	ecb2 7a01 	vldmia	r2!, {s14}
 800d384:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d388:	ece0 7a01 	vstmia	r0!, {s15}
 800d38c:	4283      	cmp	r3, r0
 800d38e:	d8f5      	bhi.n	800d37c <ai_mul_buffer_f32+0x8>
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop

0800d394 <ai_max>:
 800d394:	edd2 7a00 	vldr	s15, [r2]
 800d398:	ed91 7a00 	vldr	s14, [r1]
 800d39c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800d3a0:	edc0 7a00 	vstr	s15, [r0]
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop

0800d3a8 <ai_array_to_buffer_fmt>:
 800d3a8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d050      	beq.n	800d452 <ai_array_to_buffer_fmt+0xaa>
 800d3b0:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800d3b4:	4b29      	ldr	r3, [pc, #164]	; (800d45c <ai_array_to_buffer_fmt+0xb4>)
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d00b      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d3ba:	dc1c      	bgt.n	800d3f6 <ai_array_to_buffer_fmt+0x4e>
 800d3bc:	4b28      	ldr	r3, [pc, #160]	; (800d460 <ai_array_to_buffer_fmt+0xb8>)
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d007      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d3c2:	dd0b      	ble.n	800d3dc <ai_array_to_buffer_fmt+0x34>
 800d3c4:	4b27      	ldr	r3, [pc, #156]	; (800d464 <ai_array_to_buffer_fmt+0xbc>)
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d003      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d3ca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d131      	bne.n	800d436 <ai_array_to_buffer_fmt+0x8e>
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d3d8:	4318      	orrs	r0, r3
 800d3da:	4770      	bx	lr
 800d3dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d0f6      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d3e4:	dd2c      	ble.n	800d440 <ai_array_to_buffer_fmt+0x98>
 800d3e6:	4b20      	ldr	r3, [pc, #128]	; (800d468 <ai_array_to_buffer_fmt+0xc0>)
 800d3e8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	bf18      	it	ne
 800d3f0:	2340      	movne	r3, #64	; 0x40
 800d3f2:	4318      	orrs	r0, r3
 800d3f4:	4770      	bx	lr
 800d3f6:	4b1d      	ldr	r3, [pc, #116]	; (800d46c <ai_array_to_buffer_fmt+0xc4>)
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d0ea      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d3fc:	dd0e      	ble.n	800d41c <ai_array_to_buffer_fmt+0x74>
 800d3fe:	4b1c      	ldr	r3, [pc, #112]	; (800d470 <ai_array_to_buffer_fmt+0xc8>)
 800d400:	429a      	cmp	r2, r3
 800d402:	d0e6      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d404:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800d408:	429a      	cmp	r2, r3
 800d40a:	d0e2      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d40c:	4b19      	ldr	r3, [pc, #100]	; (800d474 <ai_array_to_buffer_fmt+0xcc>)
 800d40e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d412:	429a      	cmp	r2, r3
 800d414:	bf18      	it	ne
 800d416:	2340      	movne	r3, #64	; 0x40
 800d418:	4318      	orrs	r0, r3
 800d41a:	4770      	bx	lr
 800d41c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d420:	429a      	cmp	r2, r3
 800d422:	d0d6      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d424:	3307      	adds	r3, #7
 800d426:	429a      	cmp	r2, r3
 800d428:	d0d3      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d42a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800d42e:	429a      	cmp	r2, r3
 800d430:	bf18      	it	ne
 800d432:	2340      	movne	r3, #64	; 0x40
 800d434:	e7ce      	b.n	800d3d4 <ai_array_to_buffer_fmt+0x2c>
 800d436:	4b10      	ldr	r3, [pc, #64]	; (800d478 <ai_array_to_buffer_fmt+0xd0>)
 800d438:	429a      	cmp	r2, r3
 800d43a:	bf18      	it	ne
 800d43c:	2340      	movne	r3, #64	; 0x40
 800d43e:	e7c9      	b.n	800d3d4 <ai_array_to_buffer_fmt+0x2c>
 800d440:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d444:	429a      	cmp	r2, r3
 800d446:	d0c4      	beq.n	800d3d2 <ai_array_to_buffer_fmt+0x2a>
 800d448:	3380      	adds	r3, #128	; 0x80
 800d44a:	429a      	cmp	r2, r3
 800d44c:	bf18      	it	ne
 800d44e:	2340      	movne	r3, #64	; 0x40
 800d450:	e7c0      	b.n	800d3d4 <ai_array_to_buffer_fmt+0x2c>
 800d452:	4b0a      	ldr	r3, [pc, #40]	; (800d47c <ai_array_to_buffer_fmt+0xd4>)
 800d454:	4003      	ands	r3, r0
 800d456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d45a:	e7bb      	b.n	800d3d4 <ai_array_to_buffer_fmt+0x2c>
 800d45c:	00840040 	.word	0x00840040
 800d460:	00040840 	.word	0x00040840
 800d464:	00041040 	.word	0x00041040
 800d468:	00040447 	.word	0x00040447
 800d46c:	00840840 	.word	0x00840840
 800d470:	00841040 	.word	0x00841040
 800d474:	0084084f 	.word	0x0084084f
 800d478:	0004084f 	.word	0x0004084f
 800d47c:	00803fff 	.word	0x00803fff

0800d480 <ai_array_get_byte_size>:
 800d480:	b319      	cbz	r1, 800d4ca <ai_array_get_byte_size+0x4a>
 800d482:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d486:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800d48a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800d48e:	11c0      	asrs	r0, r0, #7
 800d490:	fb03 f101 	mul.w	r1, r3, r1
 800d494:	2a04      	cmp	r2, #4
 800d496:	f101 0107 	add.w	r1, r1, #7
 800d49a:	f021 0107 	bic.w	r1, r1, #7
 800d49e:	fa21 f10c 	lsr.w	r1, r1, ip
 800d4a2:	d00b      	beq.n	800d4bc <ai_array_get_byte_size+0x3c>
 800d4a4:	2a08      	cmp	r2, #8
 800d4a6:	d002      	beq.n	800d4ae <ai_array_get_byte_size+0x2e>
 800d4a8:	3107      	adds	r1, #7
 800d4aa:	08c8      	lsrs	r0, r1, #3
 800d4ac:	4770      	bx	lr
 800d4ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d4b2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800d4b6:	3107      	adds	r1, #7
 800d4b8:	08c8      	lsrs	r0, r1, #3
 800d4ba:	4770      	bx	lr
 800d4bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d4c0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800d4c4:	3107      	adds	r1, #7
 800d4c6:	08c8      	lsrs	r0, r1, #3
 800d4c8:	4770      	bx	lr
 800d4ca:	4608      	mov	r0, r1
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop

0800d4d0 <ai_array_get_data_byte_size>:
 800d4d0:	b161      	cbz	r1, 800d4ec <ai_array_get_data_byte_size+0x1c>
 800d4d2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d4d6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800d4da:	fb03 f101 	mul.w	r1, r3, r1
 800d4de:	1dc8      	adds	r0, r1, #7
 800d4e0:	f020 0007 	bic.w	r0, r0, #7
 800d4e4:	40d0      	lsrs	r0, r2
 800d4e6:	3007      	adds	r0, #7
 800d4e8:	08c0      	lsrs	r0, r0, #3
 800d4ea:	4770      	bx	lr
 800d4ec:	4608      	mov	r0, r1
 800d4ee:	4770      	bx	lr

0800d4f0 <ai_version_get>:
 800d4f0:	0212      	lsls	r2, r2, #8
 800d4f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d4f6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800d4fa:	4770      	bx	lr

0800d4fc <get_tensor_byte_size>:
 800d4fc:	b430      	push	{r4, r5}
 800d4fe:	6985      	ldr	r5, [r0, #24]
 800d500:	68c4      	ldr	r4, [r0, #12]
 800d502:	6941      	ldr	r1, [r0, #20]
 800d504:	4b06      	ldr	r3, [pc, #24]	; (800d520 <get_tensor_byte_size+0x24>)
 800d506:	6828      	ldr	r0, [r5, #0]
 800d508:	4a06      	ldr	r2, [pc, #24]	; (800d524 <get_tensor_byte_size+0x28>)
 800d50a:	4003      	ands	r3, r0
 800d50c:	68c9      	ldr	r1, [r1, #12]
 800d50e:	68e0      	ldr	r0, [r4, #12]
 800d510:	4293      	cmp	r3, r2
 800d512:	fb01 f000 	mul.w	r0, r1, r0
 800d516:	d101      	bne.n	800d51c <get_tensor_byte_size+0x20>
 800d518:	3007      	adds	r0, #7
 800d51a:	08c0      	lsrs	r0, r0, #3
 800d51c:	bc30      	pop	{r4, r5}
 800d51e:	4770      	bx	lr
 800d520:	017fffff 	.word	0x017fffff
 800d524:	000400c0 	.word	0x000400c0

0800d528 <core_get_broadcasted_shape>:
 800d528:	b470      	push	{r4, r5, r6}
 800d52a:	6804      	ldr	r4, [r0, #0]
 800d52c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800d530:	b304      	cbz	r4, 800d574 <core_get_broadcasted_shape+0x4c>
 800d532:	4623      	mov	r3, r4
 800d534:	3b01      	subs	r3, #1
 800d536:	429c      	cmp	r4, r3
 800d538:	d917      	bls.n	800d56a <core_get_broadcasted_shape+0x42>
 800d53a:	6815      	ldr	r5, [r2, #0]
 800d53c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d540:	2401      	movs	r4, #1
 800d542:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800d546:	d202      	bcs.n	800d54e <core_get_broadcasted_shape+0x26>
 800d548:	6854      	ldr	r4, [r2, #4]
 800d54a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800d54e:	680e      	ldr	r6, [r1, #0]
 800d550:	2501      	movs	r5, #1
 800d552:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800d556:	d202      	bcs.n	800d55e <core_get_broadcasted_shape+0x36>
 800d558:	684d      	ldr	r5, [r1, #4]
 800d55a:	f855 500c 	ldr.w	r5, [r5, ip]
 800d55e:	42ac      	cmp	r4, r5
 800d560:	bf38      	it	cc
 800d562:	462c      	movcc	r4, r5
 800d564:	6845      	ldr	r5, [r0, #4]
 800d566:	f845 400c 	str.w	r4, [r5, ip]
 800d56a:	b11b      	cbz	r3, 800d574 <core_get_broadcasted_shape+0x4c>
 800d56c:	6804      	ldr	r4, [r0, #0]
 800d56e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800d572:	e7df      	b.n	800d534 <core_get_broadcasted_shape+0xc>
 800d574:	bc70      	pop	{r4, r5, r6}
 800d576:	4770      	bx	lr

0800d578 <core_compute_offsets>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	e9d1 5c00 	ldrd	r5, ip, [r1]
 800d580:	6857      	ldr	r7, [r2, #4]
 800d582:	b085      	sub	sp, #20
 800d584:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800d588:	687e      	ldr	r6, [r7, #4]
 800d58a:	1ba1      	subs	r1, r4, r6
 800d58c:	bf18      	it	ne
 800d58e:	2101      	movne	r1, #1
 800d590:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800d594:	9103      	str	r1, [sp, #12]
 800d596:	d378      	bcc.n	800d68a <core_compute_offsets+0x112>
 800d598:	f8dc 9010 	ldr.w	r9, [ip, #16]
 800d59c:	fb09 fe04 	mul.w	lr, r9, r4
 800d5a0:	6812      	ldr	r2, [r2, #0]
 800d5a2:	f8d0 b000 	ldr.w	fp, [r0]
 800d5a6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800d5aa:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 800d5ae:	bf2c      	ite	cs
 800d5b0:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 800d5b4:	f04f 0a01 	movcc.w	sl, #1
 800d5b8:	9201      	str	r2, [sp, #4]
 800d5ba:	ebb9 0c0a 	subs.w	ip, r9, sl
 800d5be:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 800d5c2:	bf18      	it	ne
 800d5c4:	f04f 0c01 	movne.w	ip, #1
 800d5c8:	ebb5 0708 	subs.w	r7, r5, r8
 800d5cc:	9202      	str	r2, [sp, #8]
 800d5ce:	f3cb 2217 	ubfx	r2, fp, #8, #24
 800d5d2:	bf18      	it	ne
 800d5d4:	2701      	movne	r7, #1
 800d5d6:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 800d5da:	d321      	bcc.n	800d620 <core_compute_offsets+0xa8>
 800d5dc:	42b4      	cmp	r4, r6
 800d5de:	bf0c      	ite	eq
 800d5e0:	461a      	moveq	r2, r3
 800d5e2:	2200      	movne	r2, #0
 800d5e4:	6841      	ldr	r1, [r0, #4]
 800d5e6:	604a      	str	r2, [r1, #4]
 800d5e8:	f8d0 b000 	ldr.w	fp, [r0]
 800d5ec:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 800d5f0:	f3cb 2217 	ubfx	r2, fp, #8, #24
 800d5f4:	d314      	bcc.n	800d620 <core_compute_offsets+0xa8>
 800d5f6:	9a03      	ldr	r2, [sp, #12]
 800d5f8:	45d1      	cmp	r9, sl
 800d5fa:	bf14      	ite	ne
 800d5fc:	2200      	movne	r2, #0
 800d5fe:	f002 0201 	andeq.w	r2, r2, #1
 800d602:	42b4      	cmp	r4, r6
 800d604:	bf14      	ite	ne
 800d606:	f04f 0900 	movne.w	r9, #0
 800d60a:	f00c 0901 	andeq.w	r9, ip, #1
 800d60e:	6846      	ldr	r6, [r0, #4]
 800d610:	fb04 2219 	mls	r2, r4, r9, r2
 800d614:	fb03 f202 	mul.w	r2, r3, r2
 800d618:	6132      	str	r2, [r6, #16]
 800d61a:	6802      	ldr	r2, [r0, #0]
 800d61c:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800d620:	2a02      	cmp	r2, #2
 800d622:	fb0e f607 	mul.w	r6, lr, r7
 800d626:	d911      	bls.n	800d64c <core_compute_offsets+0xd4>
 800d628:	9a03      	ldr	r2, [sp, #12]
 800d62a:	4545      	cmp	r5, r8
 800d62c:	bf14      	ite	ne
 800d62e:	2200      	movne	r2, #0
 800d630:	f002 0201 	andeq.w	r2, r2, #1
 800d634:	ea0c 0202 	and.w	r2, ip, r2
 800d638:	1b92      	subs	r2, r2, r6
 800d63a:	fb04 240c 	mla	r4, r4, ip, r2
 800d63e:	6842      	ldr	r2, [r0, #4]
 800d640:	fb03 f404 	mul.w	r4, r3, r4
 800d644:	6094      	str	r4, [r2, #8]
 800d646:	6802      	ldr	r2, [r0, #0]
 800d648:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800d64c:	e9dd 4101 	ldrd	r4, r1, [sp, #4]
 800d650:	428c      	cmp	r4, r1
 800d652:	d118      	bne.n	800d686 <core_compute_offsets+0x10e>
 800d654:	b1bf      	cbz	r7, 800d686 <core_compute_offsets+0x10e>
 800d656:	9903      	ldr	r1, [sp, #12]
 800d658:	ea01 010c 	and.w	r1, r1, ip
 800d65c:	2a03      	cmp	r2, #3
 800d65e:	d90f      	bls.n	800d680 <core_compute_offsets+0x108>
 800d660:	fb0e f505 	mul.w	r5, lr, r5
 800d664:	e9dd 2401 	ldrd	r2, r4, [sp, #4]
 800d668:	ebb2 0c04 	subs.w	ip, r2, r4
 800d66c:	6842      	ldr	r2, [r0, #4]
 800d66e:	bf18      	it	ne
 800d670:	f04f 0c01 	movne.w	ip, #1
 800d674:	fb0c 1115 	mls	r1, ip, r5, r1
 800d678:	440e      	add	r6, r1
 800d67a:	fb06 f303 	mul.w	r3, r6, r3
 800d67e:	60d3      	str	r3, [r2, #12]
 800d680:	b005      	add	sp, #20
 800d682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d686:	2100      	movs	r1, #0
 800d688:	e7e8      	b.n	800d65c <core_compute_offsets+0xe4>
 800d68a:	46a6      	mov	lr, r4
 800d68c:	f04f 0901 	mov.w	r9, #1
 800d690:	e786      	b.n	800d5a0 <core_compute_offsets+0x28>
 800d692:	bf00      	nop

0800d694 <malloc>:
 800d694:	4b02      	ldr	r3, [pc, #8]	; (800d6a0 <malloc+0xc>)
 800d696:	4601      	mov	r1, r0
 800d698:	6818      	ldr	r0, [r3, #0]
 800d69a:	f000 b823 	b.w	800d6e4 <_malloc_r>
 800d69e:	bf00      	nop
 800d6a0:	20006f8c 	.word	0x20006f8c

0800d6a4 <sbrk_aligned>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	4e0e      	ldr	r6, [pc, #56]	; (800d6e0 <sbrk_aligned+0x3c>)
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	6831      	ldr	r1, [r6, #0]
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	b911      	cbnz	r1, 800d6b6 <sbrk_aligned+0x12>
 800d6b0:	f000 ff28 	bl	800e504 <_sbrk_r>
 800d6b4:	6030      	str	r0, [r6, #0]
 800d6b6:	4621      	mov	r1, r4
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	f000 ff23 	bl	800e504 <_sbrk_r>
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	d00a      	beq.n	800d6d8 <sbrk_aligned+0x34>
 800d6c2:	1cc4      	adds	r4, r0, #3
 800d6c4:	f024 0403 	bic.w	r4, r4, #3
 800d6c8:	42a0      	cmp	r0, r4
 800d6ca:	d007      	beq.n	800d6dc <sbrk_aligned+0x38>
 800d6cc:	1a21      	subs	r1, r4, r0
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f000 ff18 	bl	800e504 <_sbrk_r>
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	d101      	bne.n	800d6dc <sbrk_aligned+0x38>
 800d6d8:	f04f 34ff 	mov.w	r4, #4294967295
 800d6dc:	4620      	mov	r0, r4
 800d6de:	bd70      	pop	{r4, r5, r6, pc}
 800d6e0:	20016eb4 	.word	0x20016eb4

0800d6e4 <_malloc_r>:
 800d6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6e8:	1ccd      	adds	r5, r1, #3
 800d6ea:	f025 0503 	bic.w	r5, r5, #3
 800d6ee:	3508      	adds	r5, #8
 800d6f0:	2d0c      	cmp	r5, #12
 800d6f2:	bf38      	it	cc
 800d6f4:	250c      	movcc	r5, #12
 800d6f6:	2d00      	cmp	r5, #0
 800d6f8:	4607      	mov	r7, r0
 800d6fa:	db01      	blt.n	800d700 <_malloc_r+0x1c>
 800d6fc:	42a9      	cmp	r1, r5
 800d6fe:	d905      	bls.n	800d70c <_malloc_r+0x28>
 800d700:	230c      	movs	r3, #12
 800d702:	603b      	str	r3, [r7, #0]
 800d704:	2600      	movs	r6, #0
 800d706:	4630      	mov	r0, r6
 800d708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d7e0 <_malloc_r+0xfc>
 800d710:	f000 f868 	bl	800d7e4 <__malloc_lock>
 800d714:	f8d8 3000 	ldr.w	r3, [r8]
 800d718:	461c      	mov	r4, r3
 800d71a:	bb5c      	cbnz	r4, 800d774 <_malloc_r+0x90>
 800d71c:	4629      	mov	r1, r5
 800d71e:	4638      	mov	r0, r7
 800d720:	f7ff ffc0 	bl	800d6a4 <sbrk_aligned>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	4604      	mov	r4, r0
 800d728:	d155      	bne.n	800d7d6 <_malloc_r+0xf2>
 800d72a:	f8d8 4000 	ldr.w	r4, [r8]
 800d72e:	4626      	mov	r6, r4
 800d730:	2e00      	cmp	r6, #0
 800d732:	d145      	bne.n	800d7c0 <_malloc_r+0xdc>
 800d734:	2c00      	cmp	r4, #0
 800d736:	d048      	beq.n	800d7ca <_malloc_r+0xe6>
 800d738:	6823      	ldr	r3, [r4, #0]
 800d73a:	4631      	mov	r1, r6
 800d73c:	4638      	mov	r0, r7
 800d73e:	eb04 0903 	add.w	r9, r4, r3
 800d742:	f000 fedf 	bl	800e504 <_sbrk_r>
 800d746:	4581      	cmp	r9, r0
 800d748:	d13f      	bne.n	800d7ca <_malloc_r+0xe6>
 800d74a:	6821      	ldr	r1, [r4, #0]
 800d74c:	1a6d      	subs	r5, r5, r1
 800d74e:	4629      	mov	r1, r5
 800d750:	4638      	mov	r0, r7
 800d752:	f7ff ffa7 	bl	800d6a4 <sbrk_aligned>
 800d756:	3001      	adds	r0, #1
 800d758:	d037      	beq.n	800d7ca <_malloc_r+0xe6>
 800d75a:	6823      	ldr	r3, [r4, #0]
 800d75c:	442b      	add	r3, r5
 800d75e:	6023      	str	r3, [r4, #0]
 800d760:	f8d8 3000 	ldr.w	r3, [r8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d038      	beq.n	800d7da <_malloc_r+0xf6>
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	42a2      	cmp	r2, r4
 800d76c:	d12b      	bne.n	800d7c6 <_malloc_r+0xe2>
 800d76e:	2200      	movs	r2, #0
 800d770:	605a      	str	r2, [r3, #4]
 800d772:	e00f      	b.n	800d794 <_malloc_r+0xb0>
 800d774:	6822      	ldr	r2, [r4, #0]
 800d776:	1b52      	subs	r2, r2, r5
 800d778:	d41f      	bmi.n	800d7ba <_malloc_r+0xd6>
 800d77a:	2a0b      	cmp	r2, #11
 800d77c:	d917      	bls.n	800d7ae <_malloc_r+0xca>
 800d77e:	1961      	adds	r1, r4, r5
 800d780:	42a3      	cmp	r3, r4
 800d782:	6025      	str	r5, [r4, #0]
 800d784:	bf18      	it	ne
 800d786:	6059      	strne	r1, [r3, #4]
 800d788:	6863      	ldr	r3, [r4, #4]
 800d78a:	bf08      	it	eq
 800d78c:	f8c8 1000 	streq.w	r1, [r8]
 800d790:	5162      	str	r2, [r4, r5]
 800d792:	604b      	str	r3, [r1, #4]
 800d794:	4638      	mov	r0, r7
 800d796:	f104 060b 	add.w	r6, r4, #11
 800d79a:	f000 f829 	bl	800d7f0 <__malloc_unlock>
 800d79e:	f026 0607 	bic.w	r6, r6, #7
 800d7a2:	1d23      	adds	r3, r4, #4
 800d7a4:	1af2      	subs	r2, r6, r3
 800d7a6:	d0ae      	beq.n	800d706 <_malloc_r+0x22>
 800d7a8:	1b9b      	subs	r3, r3, r6
 800d7aa:	50a3      	str	r3, [r4, r2]
 800d7ac:	e7ab      	b.n	800d706 <_malloc_r+0x22>
 800d7ae:	42a3      	cmp	r3, r4
 800d7b0:	6862      	ldr	r2, [r4, #4]
 800d7b2:	d1dd      	bne.n	800d770 <_malloc_r+0x8c>
 800d7b4:	f8c8 2000 	str.w	r2, [r8]
 800d7b8:	e7ec      	b.n	800d794 <_malloc_r+0xb0>
 800d7ba:	4623      	mov	r3, r4
 800d7bc:	6864      	ldr	r4, [r4, #4]
 800d7be:	e7ac      	b.n	800d71a <_malloc_r+0x36>
 800d7c0:	4634      	mov	r4, r6
 800d7c2:	6876      	ldr	r6, [r6, #4]
 800d7c4:	e7b4      	b.n	800d730 <_malloc_r+0x4c>
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	e7cc      	b.n	800d764 <_malloc_r+0x80>
 800d7ca:	230c      	movs	r3, #12
 800d7cc:	603b      	str	r3, [r7, #0]
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	f000 f80e 	bl	800d7f0 <__malloc_unlock>
 800d7d4:	e797      	b.n	800d706 <_malloc_r+0x22>
 800d7d6:	6025      	str	r5, [r4, #0]
 800d7d8:	e7dc      	b.n	800d794 <_malloc_r+0xb0>
 800d7da:	605b      	str	r3, [r3, #4]
 800d7dc:	deff      	udf	#255	; 0xff
 800d7de:	bf00      	nop
 800d7e0:	20016eb0 	.word	0x20016eb0

0800d7e4 <__malloc_lock>:
 800d7e4:	4801      	ldr	r0, [pc, #4]	; (800d7ec <__malloc_lock+0x8>)
 800d7e6:	f000 beda 	b.w	800e59e <__retarget_lock_acquire_recursive>
 800d7ea:	bf00      	nop
 800d7ec:	20016ff8 	.word	0x20016ff8

0800d7f0 <__malloc_unlock>:
 800d7f0:	4801      	ldr	r0, [pc, #4]	; (800d7f8 <__malloc_unlock+0x8>)
 800d7f2:	f000 bed5 	b.w	800e5a0 <__retarget_lock_release_recursive>
 800d7f6:	bf00      	nop
 800d7f8:	20016ff8 	.word	0x20016ff8

0800d7fc <__cvt>:
 800d7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7fe:	ed2d 8b02 	vpush	{d8}
 800d802:	eeb0 8b40 	vmov.f64	d8, d0
 800d806:	b085      	sub	sp, #20
 800d808:	4617      	mov	r7, r2
 800d80a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d80c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d80e:	ee18 2a90 	vmov	r2, s17
 800d812:	f025 0520 	bic.w	r5, r5, #32
 800d816:	2a00      	cmp	r2, #0
 800d818:	bfb6      	itet	lt
 800d81a:	222d      	movlt	r2, #45	; 0x2d
 800d81c:	2200      	movge	r2, #0
 800d81e:	eeb1 8b40 	vneglt.f64	d8, d0
 800d822:	2d46      	cmp	r5, #70	; 0x46
 800d824:	460c      	mov	r4, r1
 800d826:	701a      	strb	r2, [r3, #0]
 800d828:	d004      	beq.n	800d834 <__cvt+0x38>
 800d82a:	2d45      	cmp	r5, #69	; 0x45
 800d82c:	d100      	bne.n	800d830 <__cvt+0x34>
 800d82e:	3401      	adds	r4, #1
 800d830:	2102      	movs	r1, #2
 800d832:	e000      	b.n	800d836 <__cvt+0x3a>
 800d834:	2103      	movs	r1, #3
 800d836:	ab03      	add	r3, sp, #12
 800d838:	9301      	str	r3, [sp, #4]
 800d83a:	ab02      	add	r3, sp, #8
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	4622      	mov	r2, r4
 800d840:	4633      	mov	r3, r6
 800d842:	eeb0 0b48 	vmov.f64	d0, d8
 800d846:	f000 ff43 	bl	800e6d0 <_dtoa_r>
 800d84a:	2d47      	cmp	r5, #71	; 0x47
 800d84c:	d101      	bne.n	800d852 <__cvt+0x56>
 800d84e:	07fb      	lsls	r3, r7, #31
 800d850:	d51a      	bpl.n	800d888 <__cvt+0x8c>
 800d852:	2d46      	cmp	r5, #70	; 0x46
 800d854:	eb00 0204 	add.w	r2, r0, r4
 800d858:	d10c      	bne.n	800d874 <__cvt+0x78>
 800d85a:	7803      	ldrb	r3, [r0, #0]
 800d85c:	2b30      	cmp	r3, #48	; 0x30
 800d85e:	d107      	bne.n	800d870 <__cvt+0x74>
 800d860:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d868:	bf1c      	itt	ne
 800d86a:	f1c4 0401 	rsbne	r4, r4, #1
 800d86e:	6034      	strne	r4, [r6, #0]
 800d870:	6833      	ldr	r3, [r6, #0]
 800d872:	441a      	add	r2, r3
 800d874:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87c:	bf08      	it	eq
 800d87e:	9203      	streq	r2, [sp, #12]
 800d880:	2130      	movs	r1, #48	; 0x30
 800d882:	9b03      	ldr	r3, [sp, #12]
 800d884:	4293      	cmp	r3, r2
 800d886:	d307      	bcc.n	800d898 <__cvt+0x9c>
 800d888:	9b03      	ldr	r3, [sp, #12]
 800d88a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d88c:	1a1b      	subs	r3, r3, r0
 800d88e:	6013      	str	r3, [r2, #0]
 800d890:	b005      	add	sp, #20
 800d892:	ecbd 8b02 	vpop	{d8}
 800d896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d898:	1c5c      	adds	r4, r3, #1
 800d89a:	9403      	str	r4, [sp, #12]
 800d89c:	7019      	strb	r1, [r3, #0]
 800d89e:	e7f0      	b.n	800d882 <__cvt+0x86>

0800d8a0 <__exponent>:
 800d8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2900      	cmp	r1, #0
 800d8a6:	bfb8      	it	lt
 800d8a8:	4249      	neglt	r1, r1
 800d8aa:	f803 2b02 	strb.w	r2, [r3], #2
 800d8ae:	bfb4      	ite	lt
 800d8b0:	222d      	movlt	r2, #45	; 0x2d
 800d8b2:	222b      	movge	r2, #43	; 0x2b
 800d8b4:	2909      	cmp	r1, #9
 800d8b6:	7042      	strb	r2, [r0, #1]
 800d8b8:	dd2a      	ble.n	800d910 <__exponent+0x70>
 800d8ba:	f10d 0207 	add.w	r2, sp, #7
 800d8be:	4617      	mov	r7, r2
 800d8c0:	260a      	movs	r6, #10
 800d8c2:	4694      	mov	ip, r2
 800d8c4:	fb91 f5f6 	sdiv	r5, r1, r6
 800d8c8:	fb06 1415 	mls	r4, r6, r5, r1
 800d8cc:	3430      	adds	r4, #48	; 0x30
 800d8ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	2c63      	cmp	r4, #99	; 0x63
 800d8d6:	f102 32ff 	add.w	r2, r2, #4294967295
 800d8da:	4629      	mov	r1, r5
 800d8dc:	dcf1      	bgt.n	800d8c2 <__exponent+0x22>
 800d8de:	3130      	adds	r1, #48	; 0x30
 800d8e0:	f1ac 0402 	sub.w	r4, ip, #2
 800d8e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d8e8:	1c41      	adds	r1, r0, #1
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	42ba      	cmp	r2, r7
 800d8ee:	d30a      	bcc.n	800d906 <__exponent+0x66>
 800d8f0:	f10d 0209 	add.w	r2, sp, #9
 800d8f4:	eba2 020c 	sub.w	r2, r2, ip
 800d8f8:	42bc      	cmp	r4, r7
 800d8fa:	bf88      	it	hi
 800d8fc:	2200      	movhi	r2, #0
 800d8fe:	4413      	add	r3, r2
 800d900:	1a18      	subs	r0, r3, r0
 800d902:	b003      	add	sp, #12
 800d904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d906:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d90a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d90e:	e7ed      	b.n	800d8ec <__exponent+0x4c>
 800d910:	2330      	movs	r3, #48	; 0x30
 800d912:	3130      	adds	r1, #48	; 0x30
 800d914:	7083      	strb	r3, [r0, #2]
 800d916:	70c1      	strb	r1, [r0, #3]
 800d918:	1d03      	adds	r3, r0, #4
 800d91a:	e7f1      	b.n	800d900 <__exponent+0x60>
 800d91c:	0000      	movs	r0, r0
	...

0800d920 <_printf_float>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	b08b      	sub	sp, #44	; 0x2c
 800d926:	460c      	mov	r4, r1
 800d928:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d92c:	4616      	mov	r6, r2
 800d92e:	461f      	mov	r7, r3
 800d930:	4605      	mov	r5, r0
 800d932:	f000 fdaf 	bl	800e494 <_localeconv_r>
 800d936:	f8d0 b000 	ldr.w	fp, [r0]
 800d93a:	4658      	mov	r0, fp
 800d93c:	f7f2 fcd0 	bl	80002e0 <strlen>
 800d940:	2300      	movs	r3, #0
 800d942:	9308      	str	r3, [sp, #32]
 800d944:	f8d8 3000 	ldr.w	r3, [r8]
 800d948:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d94c:	6822      	ldr	r2, [r4, #0]
 800d94e:	3307      	adds	r3, #7
 800d950:	f023 0307 	bic.w	r3, r3, #7
 800d954:	f103 0108 	add.w	r1, r3, #8
 800d958:	f8c8 1000 	str.w	r1, [r8]
 800d95c:	ed93 0b00 	vldr	d0, [r3]
 800d960:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800dbc0 <_printf_float+0x2a0>
 800d964:	eeb0 7bc0 	vabs.f64	d7, d0
 800d968:	eeb4 7b46 	vcmp.f64	d7, d6
 800d96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d970:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800d974:	4682      	mov	sl, r0
 800d976:	dd24      	ble.n	800d9c2 <_printf_float+0xa2>
 800d978:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d980:	d502      	bpl.n	800d988 <_printf_float+0x68>
 800d982:	232d      	movs	r3, #45	; 0x2d
 800d984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d988:	498f      	ldr	r1, [pc, #572]	; (800dbc8 <_printf_float+0x2a8>)
 800d98a:	4b90      	ldr	r3, [pc, #576]	; (800dbcc <_printf_float+0x2ac>)
 800d98c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d990:	bf94      	ite	ls
 800d992:	4688      	movls	r8, r1
 800d994:	4698      	movhi	r8, r3
 800d996:	2303      	movs	r3, #3
 800d998:	6123      	str	r3, [r4, #16]
 800d99a:	f022 0204 	bic.w	r2, r2, #4
 800d99e:	2300      	movs	r3, #0
 800d9a0:	6022      	str	r2, [r4, #0]
 800d9a2:	9304      	str	r3, [sp, #16]
 800d9a4:	9700      	str	r7, [sp, #0]
 800d9a6:	4633      	mov	r3, r6
 800d9a8:	aa09      	add	r2, sp, #36	; 0x24
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	f000 f9d1 	bl	800dd54 <_printf_common>
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	f040 808a 	bne.w	800dacc <_printf_float+0x1ac>
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	b00b      	add	sp, #44	; 0x2c
 800d9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c2:	eeb4 0b40 	vcmp.f64	d0, d0
 800d9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ca:	d709      	bvc.n	800d9e0 <_printf_float+0xc0>
 800d9cc:	ee10 3a90 	vmov	r3, s1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	bfbc      	itt	lt
 800d9d4:	232d      	movlt	r3, #45	; 0x2d
 800d9d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d9da:	497d      	ldr	r1, [pc, #500]	; (800dbd0 <_printf_float+0x2b0>)
 800d9dc:	4b7d      	ldr	r3, [pc, #500]	; (800dbd4 <_printf_float+0x2b4>)
 800d9de:	e7d5      	b.n	800d98c <_printf_float+0x6c>
 800d9e0:	6863      	ldr	r3, [r4, #4]
 800d9e2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d9e6:	9104      	str	r1, [sp, #16]
 800d9e8:	1c59      	adds	r1, r3, #1
 800d9ea:	d13c      	bne.n	800da66 <_printf_float+0x146>
 800d9ec:	2306      	movs	r3, #6
 800d9ee:	6063      	str	r3, [r4, #4]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	9303      	str	r3, [sp, #12]
 800d9f4:	ab08      	add	r3, sp, #32
 800d9f6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d9fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d9fe:	ab07      	add	r3, sp, #28
 800da00:	6861      	ldr	r1, [r4, #4]
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	6022      	str	r2, [r4, #0]
 800da06:	f10d 031b 	add.w	r3, sp, #27
 800da0a:	4628      	mov	r0, r5
 800da0c:	f7ff fef6 	bl	800d7fc <__cvt>
 800da10:	9b04      	ldr	r3, [sp, #16]
 800da12:	9907      	ldr	r1, [sp, #28]
 800da14:	2b47      	cmp	r3, #71	; 0x47
 800da16:	4680      	mov	r8, r0
 800da18:	d108      	bne.n	800da2c <_printf_float+0x10c>
 800da1a:	1cc8      	adds	r0, r1, #3
 800da1c:	db02      	blt.n	800da24 <_printf_float+0x104>
 800da1e:	6863      	ldr	r3, [r4, #4]
 800da20:	4299      	cmp	r1, r3
 800da22:	dd41      	ble.n	800daa8 <_printf_float+0x188>
 800da24:	f1a9 0902 	sub.w	r9, r9, #2
 800da28:	fa5f f989 	uxtb.w	r9, r9
 800da2c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800da30:	d820      	bhi.n	800da74 <_printf_float+0x154>
 800da32:	3901      	subs	r1, #1
 800da34:	464a      	mov	r2, r9
 800da36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da3a:	9107      	str	r1, [sp, #28]
 800da3c:	f7ff ff30 	bl	800d8a0 <__exponent>
 800da40:	9a08      	ldr	r2, [sp, #32]
 800da42:	9004      	str	r0, [sp, #16]
 800da44:	1813      	adds	r3, r2, r0
 800da46:	2a01      	cmp	r2, #1
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	dc02      	bgt.n	800da52 <_printf_float+0x132>
 800da4c:	6822      	ldr	r2, [r4, #0]
 800da4e:	07d2      	lsls	r2, r2, #31
 800da50:	d501      	bpl.n	800da56 <_printf_float+0x136>
 800da52:	3301      	adds	r3, #1
 800da54:	6123      	str	r3, [r4, #16]
 800da56:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0a2      	beq.n	800d9a4 <_printf_float+0x84>
 800da5e:	232d      	movs	r3, #45	; 0x2d
 800da60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da64:	e79e      	b.n	800d9a4 <_printf_float+0x84>
 800da66:	9904      	ldr	r1, [sp, #16]
 800da68:	2947      	cmp	r1, #71	; 0x47
 800da6a:	d1c1      	bne.n	800d9f0 <_printf_float+0xd0>
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1bf      	bne.n	800d9f0 <_printf_float+0xd0>
 800da70:	2301      	movs	r3, #1
 800da72:	e7bc      	b.n	800d9ee <_printf_float+0xce>
 800da74:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800da78:	d118      	bne.n	800daac <_printf_float+0x18c>
 800da7a:	2900      	cmp	r1, #0
 800da7c:	6863      	ldr	r3, [r4, #4]
 800da7e:	dd0b      	ble.n	800da98 <_printf_float+0x178>
 800da80:	6121      	str	r1, [r4, #16]
 800da82:	b913      	cbnz	r3, 800da8a <_printf_float+0x16a>
 800da84:	6822      	ldr	r2, [r4, #0]
 800da86:	07d0      	lsls	r0, r2, #31
 800da88:	d502      	bpl.n	800da90 <_printf_float+0x170>
 800da8a:	3301      	adds	r3, #1
 800da8c:	440b      	add	r3, r1
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	2300      	movs	r3, #0
 800da92:	65a1      	str	r1, [r4, #88]	; 0x58
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	e7de      	b.n	800da56 <_printf_float+0x136>
 800da98:	b913      	cbnz	r3, 800daa0 <_printf_float+0x180>
 800da9a:	6822      	ldr	r2, [r4, #0]
 800da9c:	07d2      	lsls	r2, r2, #31
 800da9e:	d501      	bpl.n	800daa4 <_printf_float+0x184>
 800daa0:	3302      	adds	r3, #2
 800daa2:	e7f4      	b.n	800da8e <_printf_float+0x16e>
 800daa4:	2301      	movs	r3, #1
 800daa6:	e7f2      	b.n	800da8e <_printf_float+0x16e>
 800daa8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800daac:	9b08      	ldr	r3, [sp, #32]
 800daae:	4299      	cmp	r1, r3
 800dab0:	db05      	blt.n	800dabe <_printf_float+0x19e>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	6121      	str	r1, [r4, #16]
 800dab6:	07d8      	lsls	r0, r3, #31
 800dab8:	d5ea      	bpl.n	800da90 <_printf_float+0x170>
 800daba:	1c4b      	adds	r3, r1, #1
 800dabc:	e7e7      	b.n	800da8e <_printf_float+0x16e>
 800dabe:	2900      	cmp	r1, #0
 800dac0:	bfd4      	ite	le
 800dac2:	f1c1 0202 	rsble	r2, r1, #2
 800dac6:	2201      	movgt	r2, #1
 800dac8:	4413      	add	r3, r2
 800daca:	e7e0      	b.n	800da8e <_printf_float+0x16e>
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	055a      	lsls	r2, r3, #21
 800dad0:	d407      	bmi.n	800dae2 <_printf_float+0x1c2>
 800dad2:	6923      	ldr	r3, [r4, #16]
 800dad4:	4642      	mov	r2, r8
 800dad6:	4631      	mov	r1, r6
 800dad8:	4628      	mov	r0, r5
 800dada:	47b8      	blx	r7
 800dadc:	3001      	adds	r0, #1
 800dade:	d12a      	bne.n	800db36 <_printf_float+0x216>
 800dae0:	e76a      	b.n	800d9b8 <_printf_float+0x98>
 800dae2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dae6:	f240 80e0 	bls.w	800dcaa <_printf_float+0x38a>
 800daea:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800daee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	d133      	bne.n	800db60 <_printf_float+0x240>
 800daf8:	4a37      	ldr	r2, [pc, #220]	; (800dbd8 <_printf_float+0x2b8>)
 800dafa:	2301      	movs	r3, #1
 800dafc:	4631      	mov	r1, r6
 800dafe:	4628      	mov	r0, r5
 800db00:	47b8      	blx	r7
 800db02:	3001      	adds	r0, #1
 800db04:	f43f af58 	beq.w	800d9b8 <_printf_float+0x98>
 800db08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	db02      	blt.n	800db16 <_printf_float+0x1f6>
 800db10:	6823      	ldr	r3, [r4, #0]
 800db12:	07d8      	lsls	r0, r3, #31
 800db14:	d50f      	bpl.n	800db36 <_printf_float+0x216>
 800db16:	4653      	mov	r3, sl
 800db18:	465a      	mov	r2, fp
 800db1a:	4631      	mov	r1, r6
 800db1c:	4628      	mov	r0, r5
 800db1e:	47b8      	blx	r7
 800db20:	3001      	adds	r0, #1
 800db22:	f43f af49 	beq.w	800d9b8 <_printf_float+0x98>
 800db26:	f04f 0800 	mov.w	r8, #0
 800db2a:	f104 091a 	add.w	r9, r4, #26
 800db2e:	9b08      	ldr	r3, [sp, #32]
 800db30:	3b01      	subs	r3, #1
 800db32:	4543      	cmp	r3, r8
 800db34:	dc09      	bgt.n	800db4a <_printf_float+0x22a>
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	079b      	lsls	r3, r3, #30
 800db3a:	f100 8106 	bmi.w	800dd4a <_printf_float+0x42a>
 800db3e:	68e0      	ldr	r0, [r4, #12]
 800db40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db42:	4298      	cmp	r0, r3
 800db44:	bfb8      	it	lt
 800db46:	4618      	movlt	r0, r3
 800db48:	e738      	b.n	800d9bc <_printf_float+0x9c>
 800db4a:	2301      	movs	r3, #1
 800db4c:	464a      	mov	r2, r9
 800db4e:	4631      	mov	r1, r6
 800db50:	4628      	mov	r0, r5
 800db52:	47b8      	blx	r7
 800db54:	3001      	adds	r0, #1
 800db56:	f43f af2f 	beq.w	800d9b8 <_printf_float+0x98>
 800db5a:	f108 0801 	add.w	r8, r8, #1
 800db5e:	e7e6      	b.n	800db2e <_printf_float+0x20e>
 800db60:	9b07      	ldr	r3, [sp, #28]
 800db62:	2b00      	cmp	r3, #0
 800db64:	dc3a      	bgt.n	800dbdc <_printf_float+0x2bc>
 800db66:	4a1c      	ldr	r2, [pc, #112]	; (800dbd8 <_printf_float+0x2b8>)
 800db68:	2301      	movs	r3, #1
 800db6a:	4631      	mov	r1, r6
 800db6c:	4628      	mov	r0, r5
 800db6e:	47b8      	blx	r7
 800db70:	3001      	adds	r0, #1
 800db72:	f43f af21 	beq.w	800d9b8 <_printf_float+0x98>
 800db76:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	d102      	bne.n	800db84 <_printf_float+0x264>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	07d9      	lsls	r1, r3, #31
 800db82:	d5d8      	bpl.n	800db36 <_printf_float+0x216>
 800db84:	4653      	mov	r3, sl
 800db86:	465a      	mov	r2, fp
 800db88:	4631      	mov	r1, r6
 800db8a:	4628      	mov	r0, r5
 800db8c:	47b8      	blx	r7
 800db8e:	3001      	adds	r0, #1
 800db90:	f43f af12 	beq.w	800d9b8 <_printf_float+0x98>
 800db94:	f04f 0900 	mov.w	r9, #0
 800db98:	f104 0a1a 	add.w	sl, r4, #26
 800db9c:	9b07      	ldr	r3, [sp, #28]
 800db9e:	425b      	negs	r3, r3
 800dba0:	454b      	cmp	r3, r9
 800dba2:	dc01      	bgt.n	800dba8 <_printf_float+0x288>
 800dba4:	9b08      	ldr	r3, [sp, #32]
 800dba6:	e795      	b.n	800dad4 <_printf_float+0x1b4>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	4652      	mov	r2, sl
 800dbac:	4631      	mov	r1, r6
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b8      	blx	r7
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	f43f af00 	beq.w	800d9b8 <_printf_float+0x98>
 800dbb8:	f109 0901 	add.w	r9, r9, #1
 800dbbc:	e7ee      	b.n	800db9c <_printf_float+0x27c>
 800dbbe:	bf00      	nop
 800dbc0:	ffffffff 	.word	0xffffffff
 800dbc4:	7fefffff 	.word	0x7fefffff
 800dbc8:	0809e670 	.word	0x0809e670
 800dbcc:	0809e674 	.word	0x0809e674
 800dbd0:	0809e678 	.word	0x0809e678
 800dbd4:	0809e67c 	.word	0x0809e67c
 800dbd8:	0809e680 	.word	0x0809e680
 800dbdc:	9a08      	ldr	r2, [sp, #32]
 800dbde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	bfa8      	it	ge
 800dbe4:	461a      	movge	r2, r3
 800dbe6:	2a00      	cmp	r2, #0
 800dbe8:	4691      	mov	r9, r2
 800dbea:	dc38      	bgt.n	800dc5e <_printf_float+0x33e>
 800dbec:	2300      	movs	r3, #0
 800dbee:	9305      	str	r3, [sp, #20]
 800dbf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbf4:	f104 021a 	add.w	r2, r4, #26
 800dbf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbfa:	9905      	ldr	r1, [sp, #20]
 800dbfc:	9304      	str	r3, [sp, #16]
 800dbfe:	eba3 0309 	sub.w	r3, r3, r9
 800dc02:	428b      	cmp	r3, r1
 800dc04:	dc33      	bgt.n	800dc6e <_printf_float+0x34e>
 800dc06:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	db3c      	blt.n	800dc88 <_printf_float+0x368>
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	07da      	lsls	r2, r3, #31
 800dc12:	d439      	bmi.n	800dc88 <_printf_float+0x368>
 800dc14:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800dc18:	eba2 0903 	sub.w	r9, r2, r3
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	1ad2      	subs	r2, r2, r3
 800dc20:	4591      	cmp	r9, r2
 800dc22:	bfa8      	it	ge
 800dc24:	4691      	movge	r9, r2
 800dc26:	f1b9 0f00 	cmp.w	r9, #0
 800dc2a:	dc35      	bgt.n	800dc98 <_printf_float+0x378>
 800dc2c:	f04f 0800 	mov.w	r8, #0
 800dc30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc34:	f104 0a1a 	add.w	sl, r4, #26
 800dc38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dc3c:	1a9b      	subs	r3, r3, r2
 800dc3e:	eba3 0309 	sub.w	r3, r3, r9
 800dc42:	4543      	cmp	r3, r8
 800dc44:	f77f af77 	ble.w	800db36 <_printf_float+0x216>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	4652      	mov	r2, sl
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	4628      	mov	r0, r5
 800dc50:	47b8      	blx	r7
 800dc52:	3001      	adds	r0, #1
 800dc54:	f43f aeb0 	beq.w	800d9b8 <_printf_float+0x98>
 800dc58:	f108 0801 	add.w	r8, r8, #1
 800dc5c:	e7ec      	b.n	800dc38 <_printf_float+0x318>
 800dc5e:	4613      	mov	r3, r2
 800dc60:	4631      	mov	r1, r6
 800dc62:	4642      	mov	r2, r8
 800dc64:	4628      	mov	r0, r5
 800dc66:	47b8      	blx	r7
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d1bf      	bne.n	800dbec <_printf_float+0x2cc>
 800dc6c:	e6a4      	b.n	800d9b8 <_printf_float+0x98>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	4631      	mov	r1, r6
 800dc72:	4628      	mov	r0, r5
 800dc74:	9204      	str	r2, [sp, #16]
 800dc76:	47b8      	blx	r7
 800dc78:	3001      	adds	r0, #1
 800dc7a:	f43f ae9d 	beq.w	800d9b8 <_printf_float+0x98>
 800dc7e:	9b05      	ldr	r3, [sp, #20]
 800dc80:	9a04      	ldr	r2, [sp, #16]
 800dc82:	3301      	adds	r3, #1
 800dc84:	9305      	str	r3, [sp, #20]
 800dc86:	e7b7      	b.n	800dbf8 <_printf_float+0x2d8>
 800dc88:	4653      	mov	r3, sl
 800dc8a:	465a      	mov	r2, fp
 800dc8c:	4631      	mov	r1, r6
 800dc8e:	4628      	mov	r0, r5
 800dc90:	47b8      	blx	r7
 800dc92:	3001      	adds	r0, #1
 800dc94:	d1be      	bne.n	800dc14 <_printf_float+0x2f4>
 800dc96:	e68f      	b.n	800d9b8 <_printf_float+0x98>
 800dc98:	9a04      	ldr	r2, [sp, #16]
 800dc9a:	464b      	mov	r3, r9
 800dc9c:	4442      	add	r2, r8
 800dc9e:	4631      	mov	r1, r6
 800dca0:	4628      	mov	r0, r5
 800dca2:	47b8      	blx	r7
 800dca4:	3001      	adds	r0, #1
 800dca6:	d1c1      	bne.n	800dc2c <_printf_float+0x30c>
 800dca8:	e686      	b.n	800d9b8 <_printf_float+0x98>
 800dcaa:	9a08      	ldr	r2, [sp, #32]
 800dcac:	2a01      	cmp	r2, #1
 800dcae:	dc01      	bgt.n	800dcb4 <_printf_float+0x394>
 800dcb0:	07db      	lsls	r3, r3, #31
 800dcb2:	d537      	bpl.n	800dd24 <_printf_float+0x404>
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	4642      	mov	r2, r8
 800dcb8:	4631      	mov	r1, r6
 800dcba:	4628      	mov	r0, r5
 800dcbc:	47b8      	blx	r7
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	f43f ae7a 	beq.w	800d9b8 <_printf_float+0x98>
 800dcc4:	4653      	mov	r3, sl
 800dcc6:	465a      	mov	r2, fp
 800dcc8:	4631      	mov	r1, r6
 800dcca:	4628      	mov	r0, r5
 800dccc:	47b8      	blx	r7
 800dcce:	3001      	adds	r0, #1
 800dcd0:	f43f ae72 	beq.w	800d9b8 <_printf_float+0x98>
 800dcd4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dcd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce0:	9b08      	ldr	r3, [sp, #32]
 800dce2:	d01a      	beq.n	800dd1a <_printf_float+0x3fa>
 800dce4:	3b01      	subs	r3, #1
 800dce6:	f108 0201 	add.w	r2, r8, #1
 800dcea:	4631      	mov	r1, r6
 800dcec:	4628      	mov	r0, r5
 800dcee:	47b8      	blx	r7
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	d10e      	bne.n	800dd12 <_printf_float+0x3f2>
 800dcf4:	e660      	b.n	800d9b8 <_printf_float+0x98>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	464a      	mov	r2, r9
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	47b8      	blx	r7
 800dd00:	3001      	adds	r0, #1
 800dd02:	f43f ae59 	beq.w	800d9b8 <_printf_float+0x98>
 800dd06:	f108 0801 	add.w	r8, r8, #1
 800dd0a:	9b08      	ldr	r3, [sp, #32]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	4543      	cmp	r3, r8
 800dd10:	dcf1      	bgt.n	800dcf6 <_printf_float+0x3d6>
 800dd12:	9b04      	ldr	r3, [sp, #16]
 800dd14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dd18:	e6dd      	b.n	800dad6 <_printf_float+0x1b6>
 800dd1a:	f04f 0800 	mov.w	r8, #0
 800dd1e:	f104 091a 	add.w	r9, r4, #26
 800dd22:	e7f2      	b.n	800dd0a <_printf_float+0x3ea>
 800dd24:	2301      	movs	r3, #1
 800dd26:	4642      	mov	r2, r8
 800dd28:	e7df      	b.n	800dcea <_printf_float+0x3ca>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	464a      	mov	r2, r9
 800dd2e:	4631      	mov	r1, r6
 800dd30:	4628      	mov	r0, r5
 800dd32:	47b8      	blx	r7
 800dd34:	3001      	adds	r0, #1
 800dd36:	f43f ae3f 	beq.w	800d9b8 <_printf_float+0x98>
 800dd3a:	f108 0801 	add.w	r8, r8, #1
 800dd3e:	68e3      	ldr	r3, [r4, #12]
 800dd40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd42:	1a5b      	subs	r3, r3, r1
 800dd44:	4543      	cmp	r3, r8
 800dd46:	dcf0      	bgt.n	800dd2a <_printf_float+0x40a>
 800dd48:	e6f9      	b.n	800db3e <_printf_float+0x21e>
 800dd4a:	f04f 0800 	mov.w	r8, #0
 800dd4e:	f104 0919 	add.w	r9, r4, #25
 800dd52:	e7f4      	b.n	800dd3e <_printf_float+0x41e>

0800dd54 <_printf_common>:
 800dd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd58:	4616      	mov	r6, r2
 800dd5a:	4699      	mov	r9, r3
 800dd5c:	688a      	ldr	r2, [r1, #8]
 800dd5e:	690b      	ldr	r3, [r1, #16]
 800dd60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd64:	4293      	cmp	r3, r2
 800dd66:	bfb8      	it	lt
 800dd68:	4613      	movlt	r3, r2
 800dd6a:	6033      	str	r3, [r6, #0]
 800dd6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd70:	4607      	mov	r7, r0
 800dd72:	460c      	mov	r4, r1
 800dd74:	b10a      	cbz	r2, 800dd7a <_printf_common+0x26>
 800dd76:	3301      	adds	r3, #1
 800dd78:	6033      	str	r3, [r6, #0]
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	0699      	lsls	r1, r3, #26
 800dd7e:	bf42      	ittt	mi
 800dd80:	6833      	ldrmi	r3, [r6, #0]
 800dd82:	3302      	addmi	r3, #2
 800dd84:	6033      	strmi	r3, [r6, #0]
 800dd86:	6825      	ldr	r5, [r4, #0]
 800dd88:	f015 0506 	ands.w	r5, r5, #6
 800dd8c:	d106      	bne.n	800dd9c <_printf_common+0x48>
 800dd8e:	f104 0a19 	add.w	sl, r4, #25
 800dd92:	68e3      	ldr	r3, [r4, #12]
 800dd94:	6832      	ldr	r2, [r6, #0]
 800dd96:	1a9b      	subs	r3, r3, r2
 800dd98:	42ab      	cmp	r3, r5
 800dd9a:	dc26      	bgt.n	800ddea <_printf_common+0x96>
 800dd9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dda0:	1e13      	subs	r3, r2, #0
 800dda2:	6822      	ldr	r2, [r4, #0]
 800dda4:	bf18      	it	ne
 800dda6:	2301      	movne	r3, #1
 800dda8:	0692      	lsls	r2, r2, #26
 800ddaa:	d42b      	bmi.n	800de04 <_printf_common+0xb0>
 800ddac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ddb0:	4649      	mov	r1, r9
 800ddb2:	4638      	mov	r0, r7
 800ddb4:	47c0      	blx	r8
 800ddb6:	3001      	adds	r0, #1
 800ddb8:	d01e      	beq.n	800ddf8 <_printf_common+0xa4>
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	6922      	ldr	r2, [r4, #16]
 800ddbe:	f003 0306 	and.w	r3, r3, #6
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	bf02      	ittt	eq
 800ddc6:	68e5      	ldreq	r5, [r4, #12]
 800ddc8:	6833      	ldreq	r3, [r6, #0]
 800ddca:	1aed      	subeq	r5, r5, r3
 800ddcc:	68a3      	ldr	r3, [r4, #8]
 800ddce:	bf0c      	ite	eq
 800ddd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddd4:	2500      	movne	r5, #0
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	bfc4      	itt	gt
 800ddda:	1a9b      	subgt	r3, r3, r2
 800dddc:	18ed      	addgt	r5, r5, r3
 800ddde:	2600      	movs	r6, #0
 800dde0:	341a      	adds	r4, #26
 800dde2:	42b5      	cmp	r5, r6
 800dde4:	d11a      	bne.n	800de1c <_printf_common+0xc8>
 800dde6:	2000      	movs	r0, #0
 800dde8:	e008      	b.n	800ddfc <_printf_common+0xa8>
 800ddea:	2301      	movs	r3, #1
 800ddec:	4652      	mov	r2, sl
 800ddee:	4649      	mov	r1, r9
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	47c0      	blx	r8
 800ddf4:	3001      	adds	r0, #1
 800ddf6:	d103      	bne.n	800de00 <_printf_common+0xac>
 800ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de00:	3501      	adds	r5, #1
 800de02:	e7c6      	b.n	800dd92 <_printf_common+0x3e>
 800de04:	18e1      	adds	r1, r4, r3
 800de06:	1c5a      	adds	r2, r3, #1
 800de08:	2030      	movs	r0, #48	; 0x30
 800de0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de0e:	4422      	add	r2, r4
 800de10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de18:	3302      	adds	r3, #2
 800de1a:	e7c7      	b.n	800ddac <_printf_common+0x58>
 800de1c:	2301      	movs	r3, #1
 800de1e:	4622      	mov	r2, r4
 800de20:	4649      	mov	r1, r9
 800de22:	4638      	mov	r0, r7
 800de24:	47c0      	blx	r8
 800de26:	3001      	adds	r0, #1
 800de28:	d0e6      	beq.n	800ddf8 <_printf_common+0xa4>
 800de2a:	3601      	adds	r6, #1
 800de2c:	e7d9      	b.n	800dde2 <_printf_common+0x8e>
	...

0800de30 <_printf_i>:
 800de30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de34:	7e0f      	ldrb	r7, [r1, #24]
 800de36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de38:	2f78      	cmp	r7, #120	; 0x78
 800de3a:	4691      	mov	r9, r2
 800de3c:	4680      	mov	r8, r0
 800de3e:	460c      	mov	r4, r1
 800de40:	469a      	mov	sl, r3
 800de42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de46:	d807      	bhi.n	800de58 <_printf_i+0x28>
 800de48:	2f62      	cmp	r7, #98	; 0x62
 800de4a:	d80a      	bhi.n	800de62 <_printf_i+0x32>
 800de4c:	2f00      	cmp	r7, #0
 800de4e:	f000 80d4 	beq.w	800dffa <_printf_i+0x1ca>
 800de52:	2f58      	cmp	r7, #88	; 0x58
 800de54:	f000 80c0 	beq.w	800dfd8 <_printf_i+0x1a8>
 800de58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de60:	e03a      	b.n	800ded8 <_printf_i+0xa8>
 800de62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de66:	2b15      	cmp	r3, #21
 800de68:	d8f6      	bhi.n	800de58 <_printf_i+0x28>
 800de6a:	a101      	add	r1, pc, #4	; (adr r1, 800de70 <_printf_i+0x40>)
 800de6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de70:	0800dec9 	.word	0x0800dec9
 800de74:	0800dedd 	.word	0x0800dedd
 800de78:	0800de59 	.word	0x0800de59
 800de7c:	0800de59 	.word	0x0800de59
 800de80:	0800de59 	.word	0x0800de59
 800de84:	0800de59 	.word	0x0800de59
 800de88:	0800dedd 	.word	0x0800dedd
 800de8c:	0800de59 	.word	0x0800de59
 800de90:	0800de59 	.word	0x0800de59
 800de94:	0800de59 	.word	0x0800de59
 800de98:	0800de59 	.word	0x0800de59
 800de9c:	0800dfe1 	.word	0x0800dfe1
 800dea0:	0800df09 	.word	0x0800df09
 800dea4:	0800df9b 	.word	0x0800df9b
 800dea8:	0800de59 	.word	0x0800de59
 800deac:	0800de59 	.word	0x0800de59
 800deb0:	0800e003 	.word	0x0800e003
 800deb4:	0800de59 	.word	0x0800de59
 800deb8:	0800df09 	.word	0x0800df09
 800debc:	0800de59 	.word	0x0800de59
 800dec0:	0800de59 	.word	0x0800de59
 800dec4:	0800dfa3 	.word	0x0800dfa3
 800dec8:	682b      	ldr	r3, [r5, #0]
 800deca:	1d1a      	adds	r2, r3, #4
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	602a      	str	r2, [r5, #0]
 800ded0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ded4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ded8:	2301      	movs	r3, #1
 800deda:	e09f      	b.n	800e01c <_printf_i+0x1ec>
 800dedc:	6820      	ldr	r0, [r4, #0]
 800dede:	682b      	ldr	r3, [r5, #0]
 800dee0:	0607      	lsls	r7, r0, #24
 800dee2:	f103 0104 	add.w	r1, r3, #4
 800dee6:	6029      	str	r1, [r5, #0]
 800dee8:	d501      	bpl.n	800deee <_printf_i+0xbe>
 800deea:	681e      	ldr	r6, [r3, #0]
 800deec:	e003      	b.n	800def6 <_printf_i+0xc6>
 800deee:	0646      	lsls	r6, r0, #25
 800def0:	d5fb      	bpl.n	800deea <_printf_i+0xba>
 800def2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800def6:	2e00      	cmp	r6, #0
 800def8:	da03      	bge.n	800df02 <_printf_i+0xd2>
 800defa:	232d      	movs	r3, #45	; 0x2d
 800defc:	4276      	negs	r6, r6
 800defe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df02:	485a      	ldr	r0, [pc, #360]	; (800e06c <_printf_i+0x23c>)
 800df04:	230a      	movs	r3, #10
 800df06:	e012      	b.n	800df2e <_printf_i+0xfe>
 800df08:	682b      	ldr	r3, [r5, #0]
 800df0a:	6820      	ldr	r0, [r4, #0]
 800df0c:	1d19      	adds	r1, r3, #4
 800df0e:	6029      	str	r1, [r5, #0]
 800df10:	0605      	lsls	r5, r0, #24
 800df12:	d501      	bpl.n	800df18 <_printf_i+0xe8>
 800df14:	681e      	ldr	r6, [r3, #0]
 800df16:	e002      	b.n	800df1e <_printf_i+0xee>
 800df18:	0641      	lsls	r1, r0, #25
 800df1a:	d5fb      	bpl.n	800df14 <_printf_i+0xe4>
 800df1c:	881e      	ldrh	r6, [r3, #0]
 800df1e:	4853      	ldr	r0, [pc, #332]	; (800e06c <_printf_i+0x23c>)
 800df20:	2f6f      	cmp	r7, #111	; 0x6f
 800df22:	bf0c      	ite	eq
 800df24:	2308      	moveq	r3, #8
 800df26:	230a      	movne	r3, #10
 800df28:	2100      	movs	r1, #0
 800df2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df2e:	6865      	ldr	r5, [r4, #4]
 800df30:	60a5      	str	r5, [r4, #8]
 800df32:	2d00      	cmp	r5, #0
 800df34:	bfa2      	ittt	ge
 800df36:	6821      	ldrge	r1, [r4, #0]
 800df38:	f021 0104 	bicge.w	r1, r1, #4
 800df3c:	6021      	strge	r1, [r4, #0]
 800df3e:	b90e      	cbnz	r6, 800df44 <_printf_i+0x114>
 800df40:	2d00      	cmp	r5, #0
 800df42:	d04b      	beq.n	800dfdc <_printf_i+0x1ac>
 800df44:	4615      	mov	r5, r2
 800df46:	fbb6 f1f3 	udiv	r1, r6, r3
 800df4a:	fb03 6711 	mls	r7, r3, r1, r6
 800df4e:	5dc7      	ldrb	r7, [r0, r7]
 800df50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df54:	4637      	mov	r7, r6
 800df56:	42bb      	cmp	r3, r7
 800df58:	460e      	mov	r6, r1
 800df5a:	d9f4      	bls.n	800df46 <_printf_i+0x116>
 800df5c:	2b08      	cmp	r3, #8
 800df5e:	d10b      	bne.n	800df78 <_printf_i+0x148>
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	07de      	lsls	r6, r3, #31
 800df64:	d508      	bpl.n	800df78 <_printf_i+0x148>
 800df66:	6923      	ldr	r3, [r4, #16]
 800df68:	6861      	ldr	r1, [r4, #4]
 800df6a:	4299      	cmp	r1, r3
 800df6c:	bfde      	ittt	le
 800df6e:	2330      	movle	r3, #48	; 0x30
 800df70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df78:	1b52      	subs	r2, r2, r5
 800df7a:	6122      	str	r2, [r4, #16]
 800df7c:	f8cd a000 	str.w	sl, [sp]
 800df80:	464b      	mov	r3, r9
 800df82:	aa03      	add	r2, sp, #12
 800df84:	4621      	mov	r1, r4
 800df86:	4640      	mov	r0, r8
 800df88:	f7ff fee4 	bl	800dd54 <_printf_common>
 800df8c:	3001      	adds	r0, #1
 800df8e:	d14a      	bne.n	800e026 <_printf_i+0x1f6>
 800df90:	f04f 30ff 	mov.w	r0, #4294967295
 800df94:	b004      	add	sp, #16
 800df96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	f043 0320 	orr.w	r3, r3, #32
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	4833      	ldr	r0, [pc, #204]	; (800e070 <_printf_i+0x240>)
 800dfa4:	2778      	movs	r7, #120	; 0x78
 800dfa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	6829      	ldr	r1, [r5, #0]
 800dfae:	061f      	lsls	r7, r3, #24
 800dfb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dfb4:	d402      	bmi.n	800dfbc <_printf_i+0x18c>
 800dfb6:	065f      	lsls	r7, r3, #25
 800dfb8:	bf48      	it	mi
 800dfba:	b2b6      	uxthmi	r6, r6
 800dfbc:	07df      	lsls	r7, r3, #31
 800dfbe:	bf48      	it	mi
 800dfc0:	f043 0320 	orrmi.w	r3, r3, #32
 800dfc4:	6029      	str	r1, [r5, #0]
 800dfc6:	bf48      	it	mi
 800dfc8:	6023      	strmi	r3, [r4, #0]
 800dfca:	b91e      	cbnz	r6, 800dfd4 <_printf_i+0x1a4>
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	f023 0320 	bic.w	r3, r3, #32
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	2310      	movs	r3, #16
 800dfd6:	e7a7      	b.n	800df28 <_printf_i+0xf8>
 800dfd8:	4824      	ldr	r0, [pc, #144]	; (800e06c <_printf_i+0x23c>)
 800dfda:	e7e4      	b.n	800dfa6 <_printf_i+0x176>
 800dfdc:	4615      	mov	r5, r2
 800dfde:	e7bd      	b.n	800df5c <_printf_i+0x12c>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	6826      	ldr	r6, [r4, #0]
 800dfe4:	6961      	ldr	r1, [r4, #20]
 800dfe6:	1d18      	adds	r0, r3, #4
 800dfe8:	6028      	str	r0, [r5, #0]
 800dfea:	0635      	lsls	r5, r6, #24
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	d501      	bpl.n	800dff4 <_printf_i+0x1c4>
 800dff0:	6019      	str	r1, [r3, #0]
 800dff2:	e002      	b.n	800dffa <_printf_i+0x1ca>
 800dff4:	0670      	lsls	r0, r6, #25
 800dff6:	d5fb      	bpl.n	800dff0 <_printf_i+0x1c0>
 800dff8:	8019      	strh	r1, [r3, #0]
 800dffa:	2300      	movs	r3, #0
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	4615      	mov	r5, r2
 800e000:	e7bc      	b.n	800df7c <_printf_i+0x14c>
 800e002:	682b      	ldr	r3, [r5, #0]
 800e004:	1d1a      	adds	r2, r3, #4
 800e006:	602a      	str	r2, [r5, #0]
 800e008:	681d      	ldr	r5, [r3, #0]
 800e00a:	6862      	ldr	r2, [r4, #4]
 800e00c:	2100      	movs	r1, #0
 800e00e:	4628      	mov	r0, r5
 800e010:	f7f2 f916 	bl	8000240 <memchr>
 800e014:	b108      	cbz	r0, 800e01a <_printf_i+0x1ea>
 800e016:	1b40      	subs	r0, r0, r5
 800e018:	6060      	str	r0, [r4, #4]
 800e01a:	6863      	ldr	r3, [r4, #4]
 800e01c:	6123      	str	r3, [r4, #16]
 800e01e:	2300      	movs	r3, #0
 800e020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e024:	e7aa      	b.n	800df7c <_printf_i+0x14c>
 800e026:	6923      	ldr	r3, [r4, #16]
 800e028:	462a      	mov	r2, r5
 800e02a:	4649      	mov	r1, r9
 800e02c:	4640      	mov	r0, r8
 800e02e:	47d0      	blx	sl
 800e030:	3001      	adds	r0, #1
 800e032:	d0ad      	beq.n	800df90 <_printf_i+0x160>
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	079b      	lsls	r3, r3, #30
 800e038:	d413      	bmi.n	800e062 <_printf_i+0x232>
 800e03a:	68e0      	ldr	r0, [r4, #12]
 800e03c:	9b03      	ldr	r3, [sp, #12]
 800e03e:	4298      	cmp	r0, r3
 800e040:	bfb8      	it	lt
 800e042:	4618      	movlt	r0, r3
 800e044:	e7a6      	b.n	800df94 <_printf_i+0x164>
 800e046:	2301      	movs	r3, #1
 800e048:	4632      	mov	r2, r6
 800e04a:	4649      	mov	r1, r9
 800e04c:	4640      	mov	r0, r8
 800e04e:	47d0      	blx	sl
 800e050:	3001      	adds	r0, #1
 800e052:	d09d      	beq.n	800df90 <_printf_i+0x160>
 800e054:	3501      	adds	r5, #1
 800e056:	68e3      	ldr	r3, [r4, #12]
 800e058:	9903      	ldr	r1, [sp, #12]
 800e05a:	1a5b      	subs	r3, r3, r1
 800e05c:	42ab      	cmp	r3, r5
 800e05e:	dcf2      	bgt.n	800e046 <_printf_i+0x216>
 800e060:	e7eb      	b.n	800e03a <_printf_i+0x20a>
 800e062:	2500      	movs	r5, #0
 800e064:	f104 0619 	add.w	r6, r4, #25
 800e068:	e7f5      	b.n	800e056 <_printf_i+0x226>
 800e06a:	bf00      	nop
 800e06c:	0809e682 	.word	0x0809e682
 800e070:	0809e693 	.word	0x0809e693

0800e074 <std>:
 800e074:	2300      	movs	r3, #0
 800e076:	b510      	push	{r4, lr}
 800e078:	4604      	mov	r4, r0
 800e07a:	e9c0 3300 	strd	r3, r3, [r0]
 800e07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e082:	6083      	str	r3, [r0, #8]
 800e084:	8181      	strh	r1, [r0, #12]
 800e086:	6643      	str	r3, [r0, #100]	; 0x64
 800e088:	81c2      	strh	r2, [r0, #14]
 800e08a:	6183      	str	r3, [r0, #24]
 800e08c:	4619      	mov	r1, r3
 800e08e:	2208      	movs	r2, #8
 800e090:	305c      	adds	r0, #92	; 0x5c
 800e092:	f000 f9f7 	bl	800e484 <memset>
 800e096:	4b0d      	ldr	r3, [pc, #52]	; (800e0cc <std+0x58>)
 800e098:	6263      	str	r3, [r4, #36]	; 0x24
 800e09a:	4b0d      	ldr	r3, [pc, #52]	; (800e0d0 <std+0x5c>)
 800e09c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e09e:	4b0d      	ldr	r3, [pc, #52]	; (800e0d4 <std+0x60>)
 800e0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0a2:	4b0d      	ldr	r3, [pc, #52]	; (800e0d8 <std+0x64>)
 800e0a4:	6323      	str	r3, [r4, #48]	; 0x30
 800e0a6:	4b0d      	ldr	r3, [pc, #52]	; (800e0dc <std+0x68>)
 800e0a8:	6224      	str	r4, [r4, #32]
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d006      	beq.n	800e0bc <std+0x48>
 800e0ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e0b2:	4294      	cmp	r4, r2
 800e0b4:	d002      	beq.n	800e0bc <std+0x48>
 800e0b6:	33d0      	adds	r3, #208	; 0xd0
 800e0b8:	429c      	cmp	r4, r3
 800e0ba:	d105      	bne.n	800e0c8 <std+0x54>
 800e0bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0c4:	f000 ba6a 	b.w	800e59c <__retarget_lock_init_recursive>
 800e0c8:	bd10      	pop	{r4, pc}
 800e0ca:	bf00      	nop
 800e0cc:	0800e2d5 	.word	0x0800e2d5
 800e0d0:	0800e2f7 	.word	0x0800e2f7
 800e0d4:	0800e32f 	.word	0x0800e32f
 800e0d8:	0800e353 	.word	0x0800e353
 800e0dc:	20016eb8 	.word	0x20016eb8

0800e0e0 <stdio_exit_handler>:
 800e0e0:	4a02      	ldr	r2, [pc, #8]	; (800e0ec <stdio_exit_handler+0xc>)
 800e0e2:	4903      	ldr	r1, [pc, #12]	; (800e0f0 <stdio_exit_handler+0x10>)
 800e0e4:	4803      	ldr	r0, [pc, #12]	; (800e0f4 <stdio_exit_handler+0x14>)
 800e0e6:	f000 b869 	b.w	800e1bc <_fwalk_sglue>
 800e0ea:	bf00      	nop
 800e0ec:	20006f34 	.word	0x20006f34
 800e0f0:	0800fccd 	.word	0x0800fccd
 800e0f4:	20006f40 	.word	0x20006f40

0800e0f8 <cleanup_stdio>:
 800e0f8:	6841      	ldr	r1, [r0, #4]
 800e0fa:	4b0c      	ldr	r3, [pc, #48]	; (800e12c <cleanup_stdio+0x34>)
 800e0fc:	4299      	cmp	r1, r3
 800e0fe:	b510      	push	{r4, lr}
 800e100:	4604      	mov	r4, r0
 800e102:	d001      	beq.n	800e108 <cleanup_stdio+0x10>
 800e104:	f001 fde2 	bl	800fccc <_fflush_r>
 800e108:	68a1      	ldr	r1, [r4, #8]
 800e10a:	4b09      	ldr	r3, [pc, #36]	; (800e130 <cleanup_stdio+0x38>)
 800e10c:	4299      	cmp	r1, r3
 800e10e:	d002      	beq.n	800e116 <cleanup_stdio+0x1e>
 800e110:	4620      	mov	r0, r4
 800e112:	f001 fddb 	bl	800fccc <_fflush_r>
 800e116:	68e1      	ldr	r1, [r4, #12]
 800e118:	4b06      	ldr	r3, [pc, #24]	; (800e134 <cleanup_stdio+0x3c>)
 800e11a:	4299      	cmp	r1, r3
 800e11c:	d004      	beq.n	800e128 <cleanup_stdio+0x30>
 800e11e:	4620      	mov	r0, r4
 800e120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e124:	f001 bdd2 	b.w	800fccc <_fflush_r>
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	bf00      	nop
 800e12c:	20016eb8 	.word	0x20016eb8
 800e130:	20016f20 	.word	0x20016f20
 800e134:	20016f88 	.word	0x20016f88

0800e138 <global_stdio_init.part.0>:
 800e138:	b510      	push	{r4, lr}
 800e13a:	4b0b      	ldr	r3, [pc, #44]	; (800e168 <global_stdio_init.part.0+0x30>)
 800e13c:	4c0b      	ldr	r4, [pc, #44]	; (800e16c <global_stdio_init.part.0+0x34>)
 800e13e:	4a0c      	ldr	r2, [pc, #48]	; (800e170 <global_stdio_init.part.0+0x38>)
 800e140:	601a      	str	r2, [r3, #0]
 800e142:	4620      	mov	r0, r4
 800e144:	2200      	movs	r2, #0
 800e146:	2104      	movs	r1, #4
 800e148:	f7ff ff94 	bl	800e074 <std>
 800e14c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e150:	2201      	movs	r2, #1
 800e152:	2109      	movs	r1, #9
 800e154:	f7ff ff8e 	bl	800e074 <std>
 800e158:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e15c:	2202      	movs	r2, #2
 800e15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e162:	2112      	movs	r1, #18
 800e164:	f7ff bf86 	b.w	800e074 <std>
 800e168:	20016ff0 	.word	0x20016ff0
 800e16c:	20016eb8 	.word	0x20016eb8
 800e170:	0800e0e1 	.word	0x0800e0e1

0800e174 <__sfp_lock_acquire>:
 800e174:	4801      	ldr	r0, [pc, #4]	; (800e17c <__sfp_lock_acquire+0x8>)
 800e176:	f000 ba12 	b.w	800e59e <__retarget_lock_acquire_recursive>
 800e17a:	bf00      	nop
 800e17c:	20016ff9 	.word	0x20016ff9

0800e180 <__sfp_lock_release>:
 800e180:	4801      	ldr	r0, [pc, #4]	; (800e188 <__sfp_lock_release+0x8>)
 800e182:	f000 ba0d 	b.w	800e5a0 <__retarget_lock_release_recursive>
 800e186:	bf00      	nop
 800e188:	20016ff9 	.word	0x20016ff9

0800e18c <__sinit>:
 800e18c:	b510      	push	{r4, lr}
 800e18e:	4604      	mov	r4, r0
 800e190:	f7ff fff0 	bl	800e174 <__sfp_lock_acquire>
 800e194:	6a23      	ldr	r3, [r4, #32]
 800e196:	b11b      	cbz	r3, 800e1a0 <__sinit+0x14>
 800e198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e19c:	f7ff bff0 	b.w	800e180 <__sfp_lock_release>
 800e1a0:	4b04      	ldr	r3, [pc, #16]	; (800e1b4 <__sinit+0x28>)
 800e1a2:	6223      	str	r3, [r4, #32]
 800e1a4:	4b04      	ldr	r3, [pc, #16]	; (800e1b8 <__sinit+0x2c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1f5      	bne.n	800e198 <__sinit+0xc>
 800e1ac:	f7ff ffc4 	bl	800e138 <global_stdio_init.part.0>
 800e1b0:	e7f2      	b.n	800e198 <__sinit+0xc>
 800e1b2:	bf00      	nop
 800e1b4:	0800e0f9 	.word	0x0800e0f9
 800e1b8:	20016ff0 	.word	0x20016ff0

0800e1bc <_fwalk_sglue>:
 800e1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c0:	4607      	mov	r7, r0
 800e1c2:	4688      	mov	r8, r1
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	2600      	movs	r6, #0
 800e1c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1cc:	f1b9 0901 	subs.w	r9, r9, #1
 800e1d0:	d505      	bpl.n	800e1de <_fwalk_sglue+0x22>
 800e1d2:	6824      	ldr	r4, [r4, #0]
 800e1d4:	2c00      	cmp	r4, #0
 800e1d6:	d1f7      	bne.n	800e1c8 <_fwalk_sglue+0xc>
 800e1d8:	4630      	mov	r0, r6
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	89ab      	ldrh	r3, [r5, #12]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d907      	bls.n	800e1f4 <_fwalk_sglue+0x38>
 800e1e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	d003      	beq.n	800e1f4 <_fwalk_sglue+0x38>
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	47c0      	blx	r8
 800e1f2:	4306      	orrs	r6, r0
 800e1f4:	3568      	adds	r5, #104	; 0x68
 800e1f6:	e7e9      	b.n	800e1cc <_fwalk_sglue+0x10>

0800e1f8 <iprintf>:
 800e1f8:	b40f      	push	{r0, r1, r2, r3}
 800e1fa:	b507      	push	{r0, r1, r2, lr}
 800e1fc:	4906      	ldr	r1, [pc, #24]	; (800e218 <iprintf+0x20>)
 800e1fe:	ab04      	add	r3, sp, #16
 800e200:	6808      	ldr	r0, [r1, #0]
 800e202:	f853 2b04 	ldr.w	r2, [r3], #4
 800e206:	6881      	ldr	r1, [r0, #8]
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	f001 fbbf 	bl	800f98c <_vfiprintf_r>
 800e20e:	b003      	add	sp, #12
 800e210:	f85d eb04 	ldr.w	lr, [sp], #4
 800e214:	b004      	add	sp, #16
 800e216:	4770      	bx	lr
 800e218:	20006f8c 	.word	0x20006f8c

0800e21c <_puts_r>:
 800e21c:	6a03      	ldr	r3, [r0, #32]
 800e21e:	b570      	push	{r4, r5, r6, lr}
 800e220:	6884      	ldr	r4, [r0, #8]
 800e222:	4605      	mov	r5, r0
 800e224:	460e      	mov	r6, r1
 800e226:	b90b      	cbnz	r3, 800e22c <_puts_r+0x10>
 800e228:	f7ff ffb0 	bl	800e18c <__sinit>
 800e22c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e22e:	07db      	lsls	r3, r3, #31
 800e230:	d405      	bmi.n	800e23e <_puts_r+0x22>
 800e232:	89a3      	ldrh	r3, [r4, #12]
 800e234:	0598      	lsls	r0, r3, #22
 800e236:	d402      	bmi.n	800e23e <_puts_r+0x22>
 800e238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e23a:	f000 f9b0 	bl	800e59e <__retarget_lock_acquire_recursive>
 800e23e:	89a3      	ldrh	r3, [r4, #12]
 800e240:	0719      	lsls	r1, r3, #28
 800e242:	d513      	bpl.n	800e26c <_puts_r+0x50>
 800e244:	6923      	ldr	r3, [r4, #16]
 800e246:	b18b      	cbz	r3, 800e26c <_puts_r+0x50>
 800e248:	3e01      	subs	r6, #1
 800e24a:	68a3      	ldr	r3, [r4, #8]
 800e24c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e250:	3b01      	subs	r3, #1
 800e252:	60a3      	str	r3, [r4, #8]
 800e254:	b9e9      	cbnz	r1, 800e292 <_puts_r+0x76>
 800e256:	2b00      	cmp	r3, #0
 800e258:	da2e      	bge.n	800e2b8 <_puts_r+0x9c>
 800e25a:	4622      	mov	r2, r4
 800e25c:	210a      	movs	r1, #10
 800e25e:	4628      	mov	r0, r5
 800e260:	f000 f87b 	bl	800e35a <__swbuf_r>
 800e264:	3001      	adds	r0, #1
 800e266:	d007      	beq.n	800e278 <_puts_r+0x5c>
 800e268:	250a      	movs	r5, #10
 800e26a:	e007      	b.n	800e27c <_puts_r+0x60>
 800e26c:	4621      	mov	r1, r4
 800e26e:	4628      	mov	r0, r5
 800e270:	f000 f8b0 	bl	800e3d4 <__swsetup_r>
 800e274:	2800      	cmp	r0, #0
 800e276:	d0e7      	beq.n	800e248 <_puts_r+0x2c>
 800e278:	f04f 35ff 	mov.w	r5, #4294967295
 800e27c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e27e:	07da      	lsls	r2, r3, #31
 800e280:	d405      	bmi.n	800e28e <_puts_r+0x72>
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	059b      	lsls	r3, r3, #22
 800e286:	d402      	bmi.n	800e28e <_puts_r+0x72>
 800e288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e28a:	f000 f989 	bl	800e5a0 <__retarget_lock_release_recursive>
 800e28e:	4628      	mov	r0, r5
 800e290:	bd70      	pop	{r4, r5, r6, pc}
 800e292:	2b00      	cmp	r3, #0
 800e294:	da04      	bge.n	800e2a0 <_puts_r+0x84>
 800e296:	69a2      	ldr	r2, [r4, #24]
 800e298:	429a      	cmp	r2, r3
 800e29a:	dc06      	bgt.n	800e2aa <_puts_r+0x8e>
 800e29c:	290a      	cmp	r1, #10
 800e29e:	d004      	beq.n	800e2aa <_puts_r+0x8e>
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	6022      	str	r2, [r4, #0]
 800e2a6:	7019      	strb	r1, [r3, #0]
 800e2a8:	e7cf      	b.n	800e24a <_puts_r+0x2e>
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f000 f854 	bl	800e35a <__swbuf_r>
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	d1c9      	bne.n	800e24a <_puts_r+0x2e>
 800e2b6:	e7df      	b.n	800e278 <_puts_r+0x5c>
 800e2b8:	6823      	ldr	r3, [r4, #0]
 800e2ba:	250a      	movs	r5, #10
 800e2bc:	1c5a      	adds	r2, r3, #1
 800e2be:	6022      	str	r2, [r4, #0]
 800e2c0:	701d      	strb	r5, [r3, #0]
 800e2c2:	e7db      	b.n	800e27c <_puts_r+0x60>

0800e2c4 <puts>:
 800e2c4:	4b02      	ldr	r3, [pc, #8]	; (800e2d0 <puts+0xc>)
 800e2c6:	4601      	mov	r1, r0
 800e2c8:	6818      	ldr	r0, [r3, #0]
 800e2ca:	f7ff bfa7 	b.w	800e21c <_puts_r>
 800e2ce:	bf00      	nop
 800e2d0:	20006f8c 	.word	0x20006f8c

0800e2d4 <__sread>:
 800e2d4:	b510      	push	{r4, lr}
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2dc:	f000 f900 	bl	800e4e0 <_read_r>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	bfab      	itete	ge
 800e2e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2e6:	89a3      	ldrhlt	r3, [r4, #12]
 800e2e8:	181b      	addge	r3, r3, r0
 800e2ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2ee:	bfac      	ite	ge
 800e2f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2f2:	81a3      	strhlt	r3, [r4, #12]
 800e2f4:	bd10      	pop	{r4, pc}

0800e2f6 <__swrite>:
 800e2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fa:	461f      	mov	r7, r3
 800e2fc:	898b      	ldrh	r3, [r1, #12]
 800e2fe:	05db      	lsls	r3, r3, #23
 800e300:	4605      	mov	r5, r0
 800e302:	460c      	mov	r4, r1
 800e304:	4616      	mov	r6, r2
 800e306:	d505      	bpl.n	800e314 <__swrite+0x1e>
 800e308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e30c:	2302      	movs	r3, #2
 800e30e:	2200      	movs	r2, #0
 800e310:	f000 f8d4 	bl	800e4bc <_lseek_r>
 800e314:	89a3      	ldrh	r3, [r4, #12]
 800e316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e31a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e31e:	81a3      	strh	r3, [r4, #12]
 800e320:	4632      	mov	r2, r6
 800e322:	463b      	mov	r3, r7
 800e324:	4628      	mov	r0, r5
 800e326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e32a:	f000 b8fb 	b.w	800e524 <_write_r>

0800e32e <__sseek>:
 800e32e:	b510      	push	{r4, lr}
 800e330:	460c      	mov	r4, r1
 800e332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e336:	f000 f8c1 	bl	800e4bc <_lseek_r>
 800e33a:	1c43      	adds	r3, r0, #1
 800e33c:	89a3      	ldrh	r3, [r4, #12]
 800e33e:	bf15      	itete	ne
 800e340:	6560      	strne	r0, [r4, #84]	; 0x54
 800e342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e34a:	81a3      	strheq	r3, [r4, #12]
 800e34c:	bf18      	it	ne
 800e34e:	81a3      	strhne	r3, [r4, #12]
 800e350:	bd10      	pop	{r4, pc}

0800e352 <__sclose>:
 800e352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e356:	f000 b8a1 	b.w	800e49c <_close_r>

0800e35a <__swbuf_r>:
 800e35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35c:	460e      	mov	r6, r1
 800e35e:	4614      	mov	r4, r2
 800e360:	4605      	mov	r5, r0
 800e362:	b118      	cbz	r0, 800e36c <__swbuf_r+0x12>
 800e364:	6a03      	ldr	r3, [r0, #32]
 800e366:	b90b      	cbnz	r3, 800e36c <__swbuf_r+0x12>
 800e368:	f7ff ff10 	bl	800e18c <__sinit>
 800e36c:	69a3      	ldr	r3, [r4, #24]
 800e36e:	60a3      	str	r3, [r4, #8]
 800e370:	89a3      	ldrh	r3, [r4, #12]
 800e372:	071a      	lsls	r2, r3, #28
 800e374:	d525      	bpl.n	800e3c2 <__swbuf_r+0x68>
 800e376:	6923      	ldr	r3, [r4, #16]
 800e378:	b31b      	cbz	r3, 800e3c2 <__swbuf_r+0x68>
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	6922      	ldr	r2, [r4, #16]
 800e37e:	1a98      	subs	r0, r3, r2
 800e380:	6963      	ldr	r3, [r4, #20]
 800e382:	b2f6      	uxtb	r6, r6
 800e384:	4283      	cmp	r3, r0
 800e386:	4637      	mov	r7, r6
 800e388:	dc04      	bgt.n	800e394 <__swbuf_r+0x3a>
 800e38a:	4621      	mov	r1, r4
 800e38c:	4628      	mov	r0, r5
 800e38e:	f001 fc9d 	bl	800fccc <_fflush_r>
 800e392:	b9e0      	cbnz	r0, 800e3ce <__swbuf_r+0x74>
 800e394:	68a3      	ldr	r3, [r4, #8]
 800e396:	3b01      	subs	r3, #1
 800e398:	60a3      	str	r3, [r4, #8]
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	6022      	str	r2, [r4, #0]
 800e3a0:	701e      	strb	r6, [r3, #0]
 800e3a2:	6962      	ldr	r2, [r4, #20]
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d004      	beq.n	800e3b4 <__swbuf_r+0x5a>
 800e3aa:	89a3      	ldrh	r3, [r4, #12]
 800e3ac:	07db      	lsls	r3, r3, #31
 800e3ae:	d506      	bpl.n	800e3be <__swbuf_r+0x64>
 800e3b0:	2e0a      	cmp	r6, #10
 800e3b2:	d104      	bne.n	800e3be <__swbuf_r+0x64>
 800e3b4:	4621      	mov	r1, r4
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f001 fc88 	bl	800fccc <_fflush_r>
 800e3bc:	b938      	cbnz	r0, 800e3ce <__swbuf_r+0x74>
 800e3be:	4638      	mov	r0, r7
 800e3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f000 f805 	bl	800e3d4 <__swsetup_r>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d0d5      	beq.n	800e37a <__swbuf_r+0x20>
 800e3ce:	f04f 37ff 	mov.w	r7, #4294967295
 800e3d2:	e7f4      	b.n	800e3be <__swbuf_r+0x64>

0800e3d4 <__swsetup_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	4b2a      	ldr	r3, [pc, #168]	; (800e480 <__swsetup_r+0xac>)
 800e3d8:	4605      	mov	r5, r0
 800e3da:	6818      	ldr	r0, [r3, #0]
 800e3dc:	460c      	mov	r4, r1
 800e3de:	b118      	cbz	r0, 800e3e8 <__swsetup_r+0x14>
 800e3e0:	6a03      	ldr	r3, [r0, #32]
 800e3e2:	b90b      	cbnz	r3, 800e3e8 <__swsetup_r+0x14>
 800e3e4:	f7ff fed2 	bl	800e18c <__sinit>
 800e3e8:	89a3      	ldrh	r3, [r4, #12]
 800e3ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3ee:	0718      	lsls	r0, r3, #28
 800e3f0:	d422      	bmi.n	800e438 <__swsetup_r+0x64>
 800e3f2:	06d9      	lsls	r1, r3, #27
 800e3f4:	d407      	bmi.n	800e406 <__swsetup_r+0x32>
 800e3f6:	2309      	movs	r3, #9
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3fe:	81a3      	strh	r3, [r4, #12]
 800e400:	f04f 30ff 	mov.w	r0, #4294967295
 800e404:	e034      	b.n	800e470 <__swsetup_r+0x9c>
 800e406:	0758      	lsls	r0, r3, #29
 800e408:	d512      	bpl.n	800e430 <__swsetup_r+0x5c>
 800e40a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e40c:	b141      	cbz	r1, 800e420 <__swsetup_r+0x4c>
 800e40e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e412:	4299      	cmp	r1, r3
 800e414:	d002      	beq.n	800e41c <__swsetup_r+0x48>
 800e416:	4628      	mov	r0, r5
 800e418:	f000 fec6 	bl	800f1a8 <_free_r>
 800e41c:	2300      	movs	r3, #0
 800e41e:	6363      	str	r3, [r4, #52]	; 0x34
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e426:	81a3      	strh	r3, [r4, #12]
 800e428:	2300      	movs	r3, #0
 800e42a:	6063      	str	r3, [r4, #4]
 800e42c:	6923      	ldr	r3, [r4, #16]
 800e42e:	6023      	str	r3, [r4, #0]
 800e430:	89a3      	ldrh	r3, [r4, #12]
 800e432:	f043 0308 	orr.w	r3, r3, #8
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	b94b      	cbnz	r3, 800e450 <__swsetup_r+0x7c>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e446:	d003      	beq.n	800e450 <__swsetup_r+0x7c>
 800e448:	4621      	mov	r1, r4
 800e44a:	4628      	mov	r0, r5
 800e44c:	f001 fc8c 	bl	800fd68 <__smakebuf_r>
 800e450:	89a0      	ldrh	r0, [r4, #12]
 800e452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e456:	f010 0301 	ands.w	r3, r0, #1
 800e45a:	d00a      	beq.n	800e472 <__swsetup_r+0x9e>
 800e45c:	2300      	movs	r3, #0
 800e45e:	60a3      	str	r3, [r4, #8]
 800e460:	6963      	ldr	r3, [r4, #20]
 800e462:	425b      	negs	r3, r3
 800e464:	61a3      	str	r3, [r4, #24]
 800e466:	6923      	ldr	r3, [r4, #16]
 800e468:	b943      	cbnz	r3, 800e47c <__swsetup_r+0xa8>
 800e46a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e46e:	d1c4      	bne.n	800e3fa <__swsetup_r+0x26>
 800e470:	bd38      	pop	{r3, r4, r5, pc}
 800e472:	0781      	lsls	r1, r0, #30
 800e474:	bf58      	it	pl
 800e476:	6963      	ldrpl	r3, [r4, #20]
 800e478:	60a3      	str	r3, [r4, #8]
 800e47a:	e7f4      	b.n	800e466 <__swsetup_r+0x92>
 800e47c:	2000      	movs	r0, #0
 800e47e:	e7f7      	b.n	800e470 <__swsetup_r+0x9c>
 800e480:	20006f8c 	.word	0x20006f8c

0800e484 <memset>:
 800e484:	4402      	add	r2, r0
 800e486:	4603      	mov	r3, r0
 800e488:	4293      	cmp	r3, r2
 800e48a:	d100      	bne.n	800e48e <memset+0xa>
 800e48c:	4770      	bx	lr
 800e48e:	f803 1b01 	strb.w	r1, [r3], #1
 800e492:	e7f9      	b.n	800e488 <memset+0x4>

0800e494 <_localeconv_r>:
 800e494:	4800      	ldr	r0, [pc, #0]	; (800e498 <_localeconv_r+0x4>)
 800e496:	4770      	bx	lr
 800e498:	20007080 	.word	0x20007080

0800e49c <_close_r>:
 800e49c:	b538      	push	{r3, r4, r5, lr}
 800e49e:	4d06      	ldr	r5, [pc, #24]	; (800e4b8 <_close_r+0x1c>)
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	4608      	mov	r0, r1
 800e4a6:	602b      	str	r3, [r5, #0]
 800e4a8:	f002 f922 	bl	80106f0 <_close>
 800e4ac:	1c43      	adds	r3, r0, #1
 800e4ae:	d102      	bne.n	800e4b6 <_close_r+0x1a>
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	b103      	cbz	r3, 800e4b6 <_close_r+0x1a>
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	20016ff4 	.word	0x20016ff4

0800e4bc <_lseek_r>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4d07      	ldr	r5, [pc, #28]	; (800e4dc <_lseek_r+0x20>)
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	4608      	mov	r0, r1
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	602a      	str	r2, [r5, #0]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f002 f938 	bl	8010740 <_lseek>
 800e4d0:	1c43      	adds	r3, r0, #1
 800e4d2:	d102      	bne.n	800e4da <_lseek_r+0x1e>
 800e4d4:	682b      	ldr	r3, [r5, #0]
 800e4d6:	b103      	cbz	r3, 800e4da <_lseek_r+0x1e>
 800e4d8:	6023      	str	r3, [r4, #0]
 800e4da:	bd38      	pop	{r3, r4, r5, pc}
 800e4dc:	20016ff4 	.word	0x20016ff4

0800e4e0 <_read_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4d07      	ldr	r5, [pc, #28]	; (800e500 <_read_r+0x20>)
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	4608      	mov	r0, r1
 800e4e8:	4611      	mov	r1, r2
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	602a      	str	r2, [r5, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f002 f92e 	bl	8010750 <_read>
 800e4f4:	1c43      	adds	r3, r0, #1
 800e4f6:	d102      	bne.n	800e4fe <_read_r+0x1e>
 800e4f8:	682b      	ldr	r3, [r5, #0]
 800e4fa:	b103      	cbz	r3, 800e4fe <_read_r+0x1e>
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	bd38      	pop	{r3, r4, r5, pc}
 800e500:	20016ff4 	.word	0x20016ff4

0800e504 <_sbrk_r>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	4d06      	ldr	r5, [pc, #24]	; (800e520 <_sbrk_r+0x1c>)
 800e508:	2300      	movs	r3, #0
 800e50a:	4604      	mov	r4, r0
 800e50c:	4608      	mov	r0, r1
 800e50e:	602b      	str	r3, [r5, #0]
 800e510:	f7f5 ff64 	bl	80043dc <_sbrk>
 800e514:	1c43      	adds	r3, r0, #1
 800e516:	d102      	bne.n	800e51e <_sbrk_r+0x1a>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	b103      	cbz	r3, 800e51e <_sbrk_r+0x1a>
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	bd38      	pop	{r3, r4, r5, pc}
 800e520:	20016ff4 	.word	0x20016ff4

0800e524 <_write_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4d07      	ldr	r5, [pc, #28]	; (800e544 <_write_r+0x20>)
 800e528:	4604      	mov	r4, r0
 800e52a:	4608      	mov	r0, r1
 800e52c:	4611      	mov	r1, r2
 800e52e:	2200      	movs	r2, #0
 800e530:	602a      	str	r2, [r5, #0]
 800e532:	461a      	mov	r2, r3
 800e534:	f002 f914 	bl	8010760 <_write>
 800e538:	1c43      	adds	r3, r0, #1
 800e53a:	d102      	bne.n	800e542 <_write_r+0x1e>
 800e53c:	682b      	ldr	r3, [r5, #0]
 800e53e:	b103      	cbz	r3, 800e542 <_write_r+0x1e>
 800e540:	6023      	str	r3, [r4, #0]
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	20016ff4 	.word	0x20016ff4

0800e548 <__errno>:
 800e548:	4b01      	ldr	r3, [pc, #4]	; (800e550 <__errno+0x8>)
 800e54a:	6818      	ldr	r0, [r3, #0]
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	20006f8c 	.word	0x20006f8c

0800e554 <__libc_init_array>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	4d0d      	ldr	r5, [pc, #52]	; (800e58c <__libc_init_array+0x38>)
 800e558:	4c0d      	ldr	r4, [pc, #52]	; (800e590 <__libc_init_array+0x3c>)
 800e55a:	1b64      	subs	r4, r4, r5
 800e55c:	10a4      	asrs	r4, r4, #2
 800e55e:	2600      	movs	r6, #0
 800e560:	42a6      	cmp	r6, r4
 800e562:	d109      	bne.n	800e578 <__libc_init_array+0x24>
 800e564:	4d0b      	ldr	r5, [pc, #44]	; (800e594 <__libc_init_array+0x40>)
 800e566:	4c0c      	ldr	r4, [pc, #48]	; (800e598 <__libc_init_array+0x44>)
 800e568:	f002 f904 	bl	8010774 <_init>
 800e56c:	1b64      	subs	r4, r4, r5
 800e56e:	10a4      	asrs	r4, r4, #2
 800e570:	2600      	movs	r6, #0
 800e572:	42a6      	cmp	r6, r4
 800e574:	d105      	bne.n	800e582 <__libc_init_array+0x2e>
 800e576:	bd70      	pop	{r4, r5, r6, pc}
 800e578:	f855 3b04 	ldr.w	r3, [r5], #4
 800e57c:	4798      	blx	r3
 800e57e:	3601      	adds	r6, #1
 800e580:	e7ee      	b.n	800e560 <__libc_init_array+0xc>
 800e582:	f855 3b04 	ldr.w	r3, [r5], #4
 800e586:	4798      	blx	r3
 800e588:	3601      	adds	r6, #1
 800e58a:	e7f2      	b.n	800e572 <__libc_init_array+0x1e>
 800e58c:	080a03f0 	.word	0x080a03f0
 800e590:	080a03f0 	.word	0x080a03f0
 800e594:	080a03f0 	.word	0x080a03f0
 800e598:	080a03f4 	.word	0x080a03f4

0800e59c <__retarget_lock_init_recursive>:
 800e59c:	4770      	bx	lr

0800e59e <__retarget_lock_acquire_recursive>:
 800e59e:	4770      	bx	lr

0800e5a0 <__retarget_lock_release_recursive>:
 800e5a0:	4770      	bx	lr

0800e5a2 <memcpy>:
 800e5a2:	440a      	add	r2, r1
 800e5a4:	4291      	cmp	r1, r2
 800e5a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5aa:	d100      	bne.n	800e5ae <memcpy+0xc>
 800e5ac:	4770      	bx	lr
 800e5ae:	b510      	push	{r4, lr}
 800e5b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5b8:	4291      	cmp	r1, r2
 800e5ba:	d1f9      	bne.n	800e5b0 <memcpy+0xe>
 800e5bc:	bd10      	pop	{r4, pc}

0800e5be <quorem>:
 800e5be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c2:	6903      	ldr	r3, [r0, #16]
 800e5c4:	690c      	ldr	r4, [r1, #16]
 800e5c6:	42a3      	cmp	r3, r4
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	db7e      	blt.n	800e6ca <quorem+0x10c>
 800e5cc:	3c01      	subs	r4, #1
 800e5ce:	f101 0814 	add.w	r8, r1, #20
 800e5d2:	f100 0514 	add.w	r5, r0, #20
 800e5d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e5e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e5ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e5f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800e5f4:	d331      	bcc.n	800e65a <quorem+0x9c>
 800e5f6:	f04f 0e00 	mov.w	lr, #0
 800e5fa:	4640      	mov	r0, r8
 800e5fc:	46ac      	mov	ip, r5
 800e5fe:	46f2      	mov	sl, lr
 800e600:	f850 2b04 	ldr.w	r2, [r0], #4
 800e604:	b293      	uxth	r3, r2
 800e606:	fb06 e303 	mla	r3, r6, r3, lr
 800e60a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e60e:	0c1a      	lsrs	r2, r3, #16
 800e610:	b29b      	uxth	r3, r3
 800e612:	ebaa 0303 	sub.w	r3, sl, r3
 800e616:	f8dc a000 	ldr.w	sl, [ip]
 800e61a:	fa13 f38a 	uxtah	r3, r3, sl
 800e61e:	fb06 220e 	mla	r2, r6, lr, r2
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	9b00      	ldr	r3, [sp, #0]
 800e626:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e62a:	b292      	uxth	r2, r2
 800e62c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e634:	f8bd 3000 	ldrh.w	r3, [sp]
 800e638:	4581      	cmp	r9, r0
 800e63a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e63e:	f84c 3b04 	str.w	r3, [ip], #4
 800e642:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e646:	d2db      	bcs.n	800e600 <quorem+0x42>
 800e648:	f855 300b 	ldr.w	r3, [r5, fp]
 800e64c:	b92b      	cbnz	r3, 800e65a <quorem+0x9c>
 800e64e:	9b01      	ldr	r3, [sp, #4]
 800e650:	3b04      	subs	r3, #4
 800e652:	429d      	cmp	r5, r3
 800e654:	461a      	mov	r2, r3
 800e656:	d32c      	bcc.n	800e6b2 <quorem+0xf4>
 800e658:	613c      	str	r4, [r7, #16]
 800e65a:	4638      	mov	r0, r7
 800e65c:	f001 f86c 	bl	800f738 <__mcmp>
 800e660:	2800      	cmp	r0, #0
 800e662:	db22      	blt.n	800e6aa <quorem+0xec>
 800e664:	3601      	adds	r6, #1
 800e666:	4629      	mov	r1, r5
 800e668:	2000      	movs	r0, #0
 800e66a:	f858 2b04 	ldr.w	r2, [r8], #4
 800e66e:	f8d1 c000 	ldr.w	ip, [r1]
 800e672:	b293      	uxth	r3, r2
 800e674:	1ac3      	subs	r3, r0, r3
 800e676:	0c12      	lsrs	r2, r2, #16
 800e678:	fa13 f38c 	uxtah	r3, r3, ip
 800e67c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e684:	b29b      	uxth	r3, r3
 800e686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e68a:	45c1      	cmp	r9, r8
 800e68c:	f841 3b04 	str.w	r3, [r1], #4
 800e690:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e694:	d2e9      	bcs.n	800e66a <quorem+0xac>
 800e696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e69e:	b922      	cbnz	r2, 800e6aa <quorem+0xec>
 800e6a0:	3b04      	subs	r3, #4
 800e6a2:	429d      	cmp	r5, r3
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	d30a      	bcc.n	800e6be <quorem+0x100>
 800e6a8:	613c      	str	r4, [r7, #16]
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	b003      	add	sp, #12
 800e6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b2:	6812      	ldr	r2, [r2, #0]
 800e6b4:	3b04      	subs	r3, #4
 800e6b6:	2a00      	cmp	r2, #0
 800e6b8:	d1ce      	bne.n	800e658 <quorem+0x9a>
 800e6ba:	3c01      	subs	r4, #1
 800e6bc:	e7c9      	b.n	800e652 <quorem+0x94>
 800e6be:	6812      	ldr	r2, [r2, #0]
 800e6c0:	3b04      	subs	r3, #4
 800e6c2:	2a00      	cmp	r2, #0
 800e6c4:	d1f0      	bne.n	800e6a8 <quorem+0xea>
 800e6c6:	3c01      	subs	r4, #1
 800e6c8:	e7eb      	b.n	800e6a2 <quorem+0xe4>
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	e7ee      	b.n	800e6ac <quorem+0xee>
	...

0800e6d0 <_dtoa_r>:
 800e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	ed2d 8b02 	vpush	{d8}
 800e6d8:	69c5      	ldr	r5, [r0, #28]
 800e6da:	b091      	sub	sp, #68	; 0x44
 800e6dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e6e0:	ec59 8b10 	vmov	r8, r9, d0
 800e6e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800e6e6:	9106      	str	r1, [sp, #24]
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	9208      	str	r2, [sp, #32]
 800e6ec:	930c      	str	r3, [sp, #48]	; 0x30
 800e6ee:	b975      	cbnz	r5, 800e70e <_dtoa_r+0x3e>
 800e6f0:	2010      	movs	r0, #16
 800e6f2:	f7fe ffcf 	bl	800d694 <malloc>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	61f0      	str	r0, [r6, #28]
 800e6fa:	b920      	cbnz	r0, 800e706 <_dtoa_r+0x36>
 800e6fc:	4ba6      	ldr	r3, [pc, #664]	; (800e998 <_dtoa_r+0x2c8>)
 800e6fe:	21ef      	movs	r1, #239	; 0xef
 800e700:	48a6      	ldr	r0, [pc, #664]	; (800e99c <_dtoa_r+0x2cc>)
 800e702:	f001 fb8f 	bl	800fe24 <__assert_func>
 800e706:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e70a:	6005      	str	r5, [r0, #0]
 800e70c:	60c5      	str	r5, [r0, #12]
 800e70e:	69f3      	ldr	r3, [r6, #28]
 800e710:	6819      	ldr	r1, [r3, #0]
 800e712:	b151      	cbz	r1, 800e72a <_dtoa_r+0x5a>
 800e714:	685a      	ldr	r2, [r3, #4]
 800e716:	604a      	str	r2, [r1, #4]
 800e718:	2301      	movs	r3, #1
 800e71a:	4093      	lsls	r3, r2
 800e71c:	608b      	str	r3, [r1, #8]
 800e71e:	4630      	mov	r0, r6
 800e720:	f000 fdce 	bl	800f2c0 <_Bfree>
 800e724:	69f3      	ldr	r3, [r6, #28]
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
 800e72a:	f1b9 0300 	subs.w	r3, r9, #0
 800e72e:	bfbb      	ittet	lt
 800e730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e734:	9303      	strlt	r3, [sp, #12]
 800e736:	2300      	movge	r3, #0
 800e738:	2201      	movlt	r2, #1
 800e73a:	bfac      	ite	ge
 800e73c:	6023      	strge	r3, [r4, #0]
 800e73e:	6022      	strlt	r2, [r4, #0]
 800e740:	4b97      	ldr	r3, [pc, #604]	; (800e9a0 <_dtoa_r+0x2d0>)
 800e742:	9c03      	ldr	r4, [sp, #12]
 800e744:	43a3      	bics	r3, r4
 800e746:	d11c      	bne.n	800e782 <_dtoa_r+0xb2>
 800e748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e74a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e74e:	6013      	str	r3, [r2, #0]
 800e750:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e754:	ea53 0308 	orrs.w	r3, r3, r8
 800e758:	f000 84fb 	beq.w	800f152 <_dtoa_r+0xa82>
 800e75c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e75e:	b963      	cbnz	r3, 800e77a <_dtoa_r+0xaa>
 800e760:	4b90      	ldr	r3, [pc, #576]	; (800e9a4 <_dtoa_r+0x2d4>)
 800e762:	e020      	b.n	800e7a6 <_dtoa_r+0xd6>
 800e764:	4b90      	ldr	r3, [pc, #576]	; (800e9a8 <_dtoa_r+0x2d8>)
 800e766:	9301      	str	r3, [sp, #4]
 800e768:	3308      	adds	r3, #8
 800e76a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e76c:	6013      	str	r3, [r2, #0]
 800e76e:	9801      	ldr	r0, [sp, #4]
 800e770:	b011      	add	sp, #68	; 0x44
 800e772:	ecbd 8b02 	vpop	{d8}
 800e776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e77a:	4b8a      	ldr	r3, [pc, #552]	; (800e9a4 <_dtoa_r+0x2d4>)
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	3303      	adds	r3, #3
 800e780:	e7f3      	b.n	800e76a <_dtoa_r+0x9a>
 800e782:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78e:	d10c      	bne.n	800e7aa <_dtoa_r+0xda>
 800e790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e792:	2301      	movs	r3, #1
 800e794:	6013      	str	r3, [r2, #0]
 800e796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f000 84d7 	beq.w	800f14c <_dtoa_r+0xa7c>
 800e79e:	4b83      	ldr	r3, [pc, #524]	; (800e9ac <_dtoa_r+0x2dc>)
 800e7a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e7a2:	6013      	str	r3, [r2, #0]
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	9301      	str	r3, [sp, #4]
 800e7a8:	e7e1      	b.n	800e76e <_dtoa_r+0x9e>
 800e7aa:	aa0e      	add	r2, sp, #56	; 0x38
 800e7ac:	a90f      	add	r1, sp, #60	; 0x3c
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	eeb0 0b48 	vmov.f64	d0, d8
 800e7b4:	f001 f866 	bl	800f884 <__d2b>
 800e7b8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800e7bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7be:	4605      	mov	r5, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d046      	beq.n	800e852 <_dtoa_r+0x182>
 800e7c4:	eeb0 7b48 	vmov.f64	d7, d8
 800e7c8:	ee18 1a90 	vmov	r1, s17
 800e7cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e7d0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e7d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e7d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e7dc:	2000      	movs	r0, #0
 800e7de:	ee07 1a90 	vmov	s15, r1
 800e7e2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800e7e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800e980 <_dtoa_r+0x2b0>
 800e7ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e7ee:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800e988 <_dtoa_r+0x2b8>
 800e7f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e7f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800e990 <_dtoa_r+0x2c0>
 800e7fa:	ee07 3a90 	vmov	s15, r3
 800e7fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e802:	eeb0 7b46 	vmov.f64	d7, d6
 800e806:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e80a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e80e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e816:	ee16 ba90 	vmov	fp, s13
 800e81a:	9009      	str	r0, [sp, #36]	; 0x24
 800e81c:	d508      	bpl.n	800e830 <_dtoa_r+0x160>
 800e81e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e822:	eeb4 6b47 	vcmp.f64	d6, d7
 800e826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82a:	bf18      	it	ne
 800e82c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e830:	f1bb 0f16 	cmp.w	fp, #22
 800e834:	d82b      	bhi.n	800e88e <_dtoa_r+0x1be>
 800e836:	495e      	ldr	r1, [pc, #376]	; (800e9b0 <_dtoa_r+0x2e0>)
 800e838:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800e83c:	ed91 7b00 	vldr	d7, [r1]
 800e840:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e848:	d501      	bpl.n	800e84e <_dtoa_r+0x17e>
 800e84a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e84e:	2100      	movs	r1, #0
 800e850:	e01e      	b.n	800e890 <_dtoa_r+0x1c0>
 800e852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e854:	4413      	add	r3, r2
 800e856:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800e85a:	2920      	cmp	r1, #32
 800e85c:	bfc1      	itttt	gt
 800e85e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800e862:	408c      	lslgt	r4, r1
 800e864:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800e868:	fa28 f101 	lsrgt.w	r1, r8, r1
 800e86c:	bfd6      	itet	le
 800e86e:	f1c1 0120 	rsble	r1, r1, #32
 800e872:	4321      	orrgt	r1, r4
 800e874:	fa08 f101 	lslle.w	r1, r8, r1
 800e878:	ee07 1a90 	vmov	s15, r1
 800e87c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e880:	3b01      	subs	r3, #1
 800e882:	ee17 1a90 	vmov	r1, s15
 800e886:	2001      	movs	r0, #1
 800e888:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e88c:	e7a7      	b.n	800e7de <_dtoa_r+0x10e>
 800e88e:	2101      	movs	r1, #1
 800e890:	1ad2      	subs	r2, r2, r3
 800e892:	1e53      	subs	r3, r2, #1
 800e894:	9305      	str	r3, [sp, #20]
 800e896:	bf45      	ittet	mi
 800e898:	f1c2 0301 	rsbmi	r3, r2, #1
 800e89c:	9304      	strmi	r3, [sp, #16]
 800e89e:	2300      	movpl	r3, #0
 800e8a0:	2300      	movmi	r3, #0
 800e8a2:	bf4c      	ite	mi
 800e8a4:	9305      	strmi	r3, [sp, #20]
 800e8a6:	9304      	strpl	r3, [sp, #16]
 800e8a8:	f1bb 0f00 	cmp.w	fp, #0
 800e8ac:	910b      	str	r1, [sp, #44]	; 0x2c
 800e8ae:	db18      	blt.n	800e8e2 <_dtoa_r+0x212>
 800e8b0:	9b05      	ldr	r3, [sp, #20]
 800e8b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800e8b6:	445b      	add	r3, fp
 800e8b8:	9305      	str	r3, [sp, #20]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	9a06      	ldr	r2, [sp, #24]
 800e8be:	2a09      	cmp	r2, #9
 800e8c0:	d848      	bhi.n	800e954 <_dtoa_r+0x284>
 800e8c2:	2a05      	cmp	r2, #5
 800e8c4:	bfc4      	itt	gt
 800e8c6:	3a04      	subgt	r2, #4
 800e8c8:	9206      	strgt	r2, [sp, #24]
 800e8ca:	9a06      	ldr	r2, [sp, #24]
 800e8cc:	f1a2 0202 	sub.w	r2, r2, #2
 800e8d0:	bfcc      	ite	gt
 800e8d2:	2400      	movgt	r4, #0
 800e8d4:	2401      	movle	r4, #1
 800e8d6:	2a03      	cmp	r2, #3
 800e8d8:	d847      	bhi.n	800e96a <_dtoa_r+0x29a>
 800e8da:	e8df f002 	tbb	[pc, r2]
 800e8de:	2d0b      	.short	0x2d0b
 800e8e0:	392b      	.short	0x392b
 800e8e2:	9b04      	ldr	r3, [sp, #16]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	eba3 030b 	sub.w	r3, r3, fp
 800e8ea:	9304      	str	r3, [sp, #16]
 800e8ec:	920a      	str	r2, [sp, #40]	; 0x28
 800e8ee:	f1cb 0300 	rsb	r3, fp, #0
 800e8f2:	e7e3      	b.n	800e8bc <_dtoa_r+0x1ec>
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	9207      	str	r2, [sp, #28]
 800e8f8:	9a08      	ldr	r2, [sp, #32]
 800e8fa:	2a00      	cmp	r2, #0
 800e8fc:	dc38      	bgt.n	800e970 <_dtoa_r+0x2a0>
 800e8fe:	f04f 0a01 	mov.w	sl, #1
 800e902:	46d1      	mov	r9, sl
 800e904:	4652      	mov	r2, sl
 800e906:	f8cd a020 	str.w	sl, [sp, #32]
 800e90a:	69f7      	ldr	r7, [r6, #28]
 800e90c:	2100      	movs	r1, #0
 800e90e:	2004      	movs	r0, #4
 800e910:	f100 0c14 	add.w	ip, r0, #20
 800e914:	4594      	cmp	ip, r2
 800e916:	d930      	bls.n	800e97a <_dtoa_r+0x2aa>
 800e918:	6079      	str	r1, [r7, #4]
 800e91a:	4630      	mov	r0, r6
 800e91c:	930d      	str	r3, [sp, #52]	; 0x34
 800e91e:	f000 fc8f 	bl	800f240 <_Balloc>
 800e922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e924:	9001      	str	r0, [sp, #4]
 800e926:	4602      	mov	r2, r0
 800e928:	2800      	cmp	r0, #0
 800e92a:	d145      	bne.n	800e9b8 <_dtoa_r+0x2e8>
 800e92c:	4b21      	ldr	r3, [pc, #132]	; (800e9b4 <_dtoa_r+0x2e4>)
 800e92e:	f240 11af 	movw	r1, #431	; 0x1af
 800e932:	e6e5      	b.n	800e700 <_dtoa_r+0x30>
 800e934:	2201      	movs	r2, #1
 800e936:	e7de      	b.n	800e8f6 <_dtoa_r+0x226>
 800e938:	2200      	movs	r2, #0
 800e93a:	9207      	str	r2, [sp, #28]
 800e93c:	9a08      	ldr	r2, [sp, #32]
 800e93e:	eb0b 0a02 	add.w	sl, fp, r2
 800e942:	f10a 0901 	add.w	r9, sl, #1
 800e946:	464a      	mov	r2, r9
 800e948:	2a01      	cmp	r2, #1
 800e94a:	bfb8      	it	lt
 800e94c:	2201      	movlt	r2, #1
 800e94e:	e7dc      	b.n	800e90a <_dtoa_r+0x23a>
 800e950:	2201      	movs	r2, #1
 800e952:	e7f2      	b.n	800e93a <_dtoa_r+0x26a>
 800e954:	2401      	movs	r4, #1
 800e956:	2200      	movs	r2, #0
 800e958:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800e95c:	f04f 3aff 	mov.w	sl, #4294967295
 800e960:	2100      	movs	r1, #0
 800e962:	46d1      	mov	r9, sl
 800e964:	2212      	movs	r2, #18
 800e966:	9108      	str	r1, [sp, #32]
 800e968:	e7cf      	b.n	800e90a <_dtoa_r+0x23a>
 800e96a:	2201      	movs	r2, #1
 800e96c:	9207      	str	r2, [sp, #28]
 800e96e:	e7f5      	b.n	800e95c <_dtoa_r+0x28c>
 800e970:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e974:	46d1      	mov	r9, sl
 800e976:	4652      	mov	r2, sl
 800e978:	e7c7      	b.n	800e90a <_dtoa_r+0x23a>
 800e97a:	3101      	adds	r1, #1
 800e97c:	0040      	lsls	r0, r0, #1
 800e97e:	e7c7      	b.n	800e910 <_dtoa_r+0x240>
 800e980:	636f4361 	.word	0x636f4361
 800e984:	3fd287a7 	.word	0x3fd287a7
 800e988:	8b60c8b3 	.word	0x8b60c8b3
 800e98c:	3fc68a28 	.word	0x3fc68a28
 800e990:	509f79fb 	.word	0x509f79fb
 800e994:	3fd34413 	.word	0x3fd34413
 800e998:	0809e6b1 	.word	0x0809e6b1
 800e99c:	0809e6c8 	.word	0x0809e6c8
 800e9a0:	7ff00000 	.word	0x7ff00000
 800e9a4:	0809e6ad 	.word	0x0809e6ad
 800e9a8:	0809e6a4 	.word	0x0809e6a4
 800e9ac:	0809e681 	.word	0x0809e681
 800e9b0:	0809e7b8 	.word	0x0809e7b8
 800e9b4:	0809e720 	.word	0x0809e720
 800e9b8:	69f2      	ldr	r2, [r6, #28]
 800e9ba:	9901      	ldr	r1, [sp, #4]
 800e9bc:	6011      	str	r1, [r2, #0]
 800e9be:	f1b9 0f0e 	cmp.w	r9, #14
 800e9c2:	d86c      	bhi.n	800ea9e <_dtoa_r+0x3ce>
 800e9c4:	2c00      	cmp	r4, #0
 800e9c6:	d06a      	beq.n	800ea9e <_dtoa_r+0x3ce>
 800e9c8:	f1bb 0f00 	cmp.w	fp, #0
 800e9cc:	f340 80a0 	ble.w	800eb10 <_dtoa_r+0x440>
 800e9d0:	4ac1      	ldr	r2, [pc, #772]	; (800ecd8 <_dtoa_r+0x608>)
 800e9d2:	f00b 010f 	and.w	r1, fp, #15
 800e9d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e9da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e9de:	ed92 7b00 	vldr	d7, [r2]
 800e9e2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800e9e6:	f000 8087 	beq.w	800eaf8 <_dtoa_r+0x428>
 800e9ea:	49bc      	ldr	r1, [pc, #752]	; (800ecdc <_dtoa_r+0x60c>)
 800e9ec:	ed91 6b08 	vldr	d6, [r1, #32]
 800e9f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e9f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e9f8:	f002 020f 	and.w	r2, r2, #15
 800e9fc:	2103      	movs	r1, #3
 800e9fe:	48b7      	ldr	r0, [pc, #732]	; (800ecdc <_dtoa_r+0x60c>)
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	d17b      	bne.n	800eafc <_dtoa_r+0x42c>
 800ea04:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ea08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ea0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea16:	2a00      	cmp	r2, #0
 800ea18:	f000 80a0 	beq.w	800eb5c <_dtoa_r+0x48c>
 800ea1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ea20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ea24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea28:	f140 8098 	bpl.w	800eb5c <_dtoa_r+0x48c>
 800ea2c:	f1b9 0f00 	cmp.w	r9, #0
 800ea30:	f000 8094 	beq.w	800eb5c <_dtoa_r+0x48c>
 800ea34:	f1ba 0f00 	cmp.w	sl, #0
 800ea38:	dd2f      	ble.n	800ea9a <_dtoa_r+0x3ca>
 800ea3a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ea3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea42:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea46:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ea4a:	3101      	adds	r1, #1
 800ea4c:	4654      	mov	r4, sl
 800ea4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ea52:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ea56:	ee07 1a90 	vmov	s15, r1
 800ea5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea5e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ea62:	ee15 7a90 	vmov	r7, s11
 800ea66:	ec51 0b15 	vmov	r0, r1, d5
 800ea6a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800ea6e:	2c00      	cmp	r4, #0
 800ea70:	d177      	bne.n	800eb62 <_dtoa_r+0x492>
 800ea72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ea76:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ea7a:	ec41 0b17 	vmov	d7, r0, r1
 800ea7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ea82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea86:	f300 826a 	bgt.w	800ef5e <_dtoa_r+0x88e>
 800ea8a:	eeb1 7b47 	vneg.f64	d7, d7
 800ea8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ea92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea96:	f100 8260 	bmi.w	800ef5a <_dtoa_r+0x88a>
 800ea9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ea9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eaa0:	2a00      	cmp	r2, #0
 800eaa2:	f2c0 811d 	blt.w	800ece0 <_dtoa_r+0x610>
 800eaa6:	f1bb 0f0e 	cmp.w	fp, #14
 800eaaa:	f300 8119 	bgt.w	800ece0 <_dtoa_r+0x610>
 800eaae:	4b8a      	ldr	r3, [pc, #552]	; (800ecd8 <_dtoa_r+0x608>)
 800eab0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eab4:	ed93 6b00 	vldr	d6, [r3]
 800eab8:	9b08      	ldr	r3, [sp, #32]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f280 80b7 	bge.w	800ec2e <_dtoa_r+0x55e>
 800eac0:	f1b9 0f00 	cmp.w	r9, #0
 800eac4:	f300 80b3 	bgt.w	800ec2e <_dtoa_r+0x55e>
 800eac8:	f040 8246 	bne.w	800ef58 <_dtoa_r+0x888>
 800eacc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ead0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ead4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ead8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae0:	464c      	mov	r4, r9
 800eae2:	464f      	mov	r7, r9
 800eae4:	f280 821c 	bge.w	800ef20 <_dtoa_r+0x850>
 800eae8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eaec:	2331      	movs	r3, #49	; 0x31
 800eaee:	f808 3b01 	strb.w	r3, [r8], #1
 800eaf2:	f10b 0b01 	add.w	fp, fp, #1
 800eaf6:	e218      	b.n	800ef2a <_dtoa_r+0x85a>
 800eaf8:	2102      	movs	r1, #2
 800eafa:	e780      	b.n	800e9fe <_dtoa_r+0x32e>
 800eafc:	07d4      	lsls	r4, r2, #31
 800eafe:	d504      	bpl.n	800eb0a <_dtoa_r+0x43a>
 800eb00:	ed90 6b00 	vldr	d6, [r0]
 800eb04:	3101      	adds	r1, #1
 800eb06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb0a:	1052      	asrs	r2, r2, #1
 800eb0c:	3008      	adds	r0, #8
 800eb0e:	e777      	b.n	800ea00 <_dtoa_r+0x330>
 800eb10:	d022      	beq.n	800eb58 <_dtoa_r+0x488>
 800eb12:	f1cb 0200 	rsb	r2, fp, #0
 800eb16:	4970      	ldr	r1, [pc, #448]	; (800ecd8 <_dtoa_r+0x608>)
 800eb18:	f002 000f 	and.w	r0, r2, #15
 800eb1c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eb20:	ed91 7b00 	vldr	d7, [r1]
 800eb24:	ee28 7b07 	vmul.f64	d7, d8, d7
 800eb28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eb2c:	486b      	ldr	r0, [pc, #428]	; (800ecdc <_dtoa_r+0x60c>)
 800eb2e:	1112      	asrs	r2, r2, #4
 800eb30:	2400      	movs	r4, #0
 800eb32:	2102      	movs	r1, #2
 800eb34:	b92a      	cbnz	r2, 800eb42 <_dtoa_r+0x472>
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	f43f af6a 	beq.w	800ea10 <_dtoa_r+0x340>
 800eb3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eb40:	e766      	b.n	800ea10 <_dtoa_r+0x340>
 800eb42:	07d7      	lsls	r7, r2, #31
 800eb44:	d505      	bpl.n	800eb52 <_dtoa_r+0x482>
 800eb46:	ed90 6b00 	vldr	d6, [r0]
 800eb4a:	3101      	adds	r1, #1
 800eb4c:	2401      	movs	r4, #1
 800eb4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb52:	1052      	asrs	r2, r2, #1
 800eb54:	3008      	adds	r0, #8
 800eb56:	e7ed      	b.n	800eb34 <_dtoa_r+0x464>
 800eb58:	2102      	movs	r1, #2
 800eb5a:	e759      	b.n	800ea10 <_dtoa_r+0x340>
 800eb5c:	465a      	mov	r2, fp
 800eb5e:	464c      	mov	r4, r9
 800eb60:	e775      	b.n	800ea4e <_dtoa_r+0x37e>
 800eb62:	ec41 0b17 	vmov	d7, r0, r1
 800eb66:	495c      	ldr	r1, [pc, #368]	; (800ecd8 <_dtoa_r+0x608>)
 800eb68:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800eb6c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800eb70:	9901      	ldr	r1, [sp, #4]
 800eb72:	440c      	add	r4, r1
 800eb74:	9907      	ldr	r1, [sp, #28]
 800eb76:	b351      	cbz	r1, 800ebce <_dtoa_r+0x4fe>
 800eb78:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800eb7c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800eb80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb84:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800eb88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eb8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800eb90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800eb94:	ee14 1a90 	vmov	r1, s9
 800eb98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800eb9c:	3130      	adds	r1, #48	; 0x30
 800eb9e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eba2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebaa:	f808 1b01 	strb.w	r1, [r8], #1
 800ebae:	d439      	bmi.n	800ec24 <_dtoa_r+0x554>
 800ebb0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ebb4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ebb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbc:	d472      	bmi.n	800eca4 <_dtoa_r+0x5d4>
 800ebbe:	45a0      	cmp	r8, r4
 800ebc0:	f43f af6b 	beq.w	800ea9a <_dtoa_r+0x3ca>
 800ebc4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ebc8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ebcc:	e7e0      	b.n	800eb90 <_dtoa_r+0x4c0>
 800ebce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ebd2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ebdc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ebe0:	ee14 1a90 	vmov	r1, s9
 800ebe4:	3130      	adds	r1, #48	; 0x30
 800ebe6:	f808 1b01 	strb.w	r1, [r8], #1
 800ebea:	45a0      	cmp	r8, r4
 800ebec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ebf0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ebf4:	d118      	bne.n	800ec28 <_dtoa_r+0x558>
 800ebf6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ebfa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ebfe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ec02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec06:	dc4d      	bgt.n	800eca4 <_dtoa_r+0x5d4>
 800ec08:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ec0c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ec10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec14:	f57f af41 	bpl.w	800ea9a <_dtoa_r+0x3ca>
 800ec18:	4680      	mov	r8, r0
 800ec1a:	3801      	subs	r0, #1
 800ec1c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ec20:	2b30      	cmp	r3, #48	; 0x30
 800ec22:	d0f9      	beq.n	800ec18 <_dtoa_r+0x548>
 800ec24:	4693      	mov	fp, r2
 800ec26:	e02a      	b.n	800ec7e <_dtoa_r+0x5ae>
 800ec28:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ec2c:	e7d6      	b.n	800ebdc <_dtoa_r+0x50c>
 800ec2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec32:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ec36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ec3a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ec3e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ec42:	ee15 3a10 	vmov	r3, s10
 800ec46:	3330      	adds	r3, #48	; 0x30
 800ec48:	f808 3b01 	strb.w	r3, [r8], #1
 800ec4c:	9b01      	ldr	r3, [sp, #4]
 800ec4e:	eba8 0303 	sub.w	r3, r8, r3
 800ec52:	4599      	cmp	r9, r3
 800ec54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ec58:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ec5c:	d133      	bne.n	800ecc6 <_dtoa_r+0x5f6>
 800ec5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ec62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6a:	dc1a      	bgt.n	800eca2 <_dtoa_r+0x5d2>
 800ec6c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ec70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec74:	d103      	bne.n	800ec7e <_dtoa_r+0x5ae>
 800ec76:	ee15 3a10 	vmov	r3, s10
 800ec7a:	07d9      	lsls	r1, r3, #31
 800ec7c:	d411      	bmi.n	800eca2 <_dtoa_r+0x5d2>
 800ec7e:	4629      	mov	r1, r5
 800ec80:	4630      	mov	r0, r6
 800ec82:	f000 fb1d 	bl	800f2c0 <_Bfree>
 800ec86:	2300      	movs	r3, #0
 800ec88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec8a:	f888 3000 	strb.w	r3, [r8]
 800ec8e:	f10b 0301 	add.w	r3, fp, #1
 800ec92:	6013      	str	r3, [r2, #0]
 800ec94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f43f ad69 	beq.w	800e76e <_dtoa_r+0x9e>
 800ec9c:	f8c3 8000 	str.w	r8, [r3]
 800eca0:	e565      	b.n	800e76e <_dtoa_r+0x9e>
 800eca2:	465a      	mov	r2, fp
 800eca4:	4643      	mov	r3, r8
 800eca6:	4698      	mov	r8, r3
 800eca8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ecac:	2939      	cmp	r1, #57	; 0x39
 800ecae:	d106      	bne.n	800ecbe <_dtoa_r+0x5ee>
 800ecb0:	9901      	ldr	r1, [sp, #4]
 800ecb2:	4299      	cmp	r1, r3
 800ecb4:	d1f7      	bne.n	800eca6 <_dtoa_r+0x5d6>
 800ecb6:	9801      	ldr	r0, [sp, #4]
 800ecb8:	2130      	movs	r1, #48	; 0x30
 800ecba:	3201      	adds	r2, #1
 800ecbc:	7001      	strb	r1, [r0, #0]
 800ecbe:	7819      	ldrb	r1, [r3, #0]
 800ecc0:	3101      	adds	r1, #1
 800ecc2:	7019      	strb	r1, [r3, #0]
 800ecc4:	e7ae      	b.n	800ec24 <_dtoa_r+0x554>
 800ecc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ecca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ecce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd2:	d1b2      	bne.n	800ec3a <_dtoa_r+0x56a>
 800ecd4:	e7d3      	b.n	800ec7e <_dtoa_r+0x5ae>
 800ecd6:	bf00      	nop
 800ecd8:	0809e7b8 	.word	0x0809e7b8
 800ecdc:	0809e790 	.word	0x0809e790
 800ece0:	9907      	ldr	r1, [sp, #28]
 800ece2:	2900      	cmp	r1, #0
 800ece4:	f000 80d0 	beq.w	800ee88 <_dtoa_r+0x7b8>
 800ece8:	9906      	ldr	r1, [sp, #24]
 800ecea:	2901      	cmp	r1, #1
 800ecec:	f300 80b4 	bgt.w	800ee58 <_dtoa_r+0x788>
 800ecf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecf2:	2900      	cmp	r1, #0
 800ecf4:	f000 80ac 	beq.w	800ee50 <_dtoa_r+0x780>
 800ecf8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ecfc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ed00:	461c      	mov	r4, r3
 800ed02:	9309      	str	r3, [sp, #36]	; 0x24
 800ed04:	9b04      	ldr	r3, [sp, #16]
 800ed06:	4413      	add	r3, r2
 800ed08:	9304      	str	r3, [sp, #16]
 800ed0a:	9b05      	ldr	r3, [sp, #20]
 800ed0c:	2101      	movs	r1, #1
 800ed0e:	4413      	add	r3, r2
 800ed10:	4630      	mov	r0, r6
 800ed12:	9305      	str	r3, [sp, #20]
 800ed14:	f000 fb8a 	bl	800f42c <__i2b>
 800ed18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed1a:	4607      	mov	r7, r0
 800ed1c:	f1b8 0f00 	cmp.w	r8, #0
 800ed20:	d00d      	beq.n	800ed3e <_dtoa_r+0x66e>
 800ed22:	9a05      	ldr	r2, [sp, #20]
 800ed24:	2a00      	cmp	r2, #0
 800ed26:	dd0a      	ble.n	800ed3e <_dtoa_r+0x66e>
 800ed28:	4542      	cmp	r2, r8
 800ed2a:	9904      	ldr	r1, [sp, #16]
 800ed2c:	bfa8      	it	ge
 800ed2e:	4642      	movge	r2, r8
 800ed30:	1a89      	subs	r1, r1, r2
 800ed32:	9104      	str	r1, [sp, #16]
 800ed34:	9905      	ldr	r1, [sp, #20]
 800ed36:	eba8 0802 	sub.w	r8, r8, r2
 800ed3a:	1a8a      	subs	r2, r1, r2
 800ed3c:	9205      	str	r2, [sp, #20]
 800ed3e:	b303      	cbz	r3, 800ed82 <_dtoa_r+0x6b2>
 800ed40:	9a07      	ldr	r2, [sp, #28]
 800ed42:	2a00      	cmp	r2, #0
 800ed44:	f000 80a5 	beq.w	800ee92 <_dtoa_r+0x7c2>
 800ed48:	2c00      	cmp	r4, #0
 800ed4a:	dd13      	ble.n	800ed74 <_dtoa_r+0x6a4>
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	4622      	mov	r2, r4
 800ed50:	4630      	mov	r0, r6
 800ed52:	930d      	str	r3, [sp, #52]	; 0x34
 800ed54:	f000 fc2a 	bl	800f5ac <__pow5mult>
 800ed58:	462a      	mov	r2, r5
 800ed5a:	4601      	mov	r1, r0
 800ed5c:	4607      	mov	r7, r0
 800ed5e:	4630      	mov	r0, r6
 800ed60:	f000 fb7a 	bl	800f458 <__multiply>
 800ed64:	4629      	mov	r1, r5
 800ed66:	9009      	str	r0, [sp, #36]	; 0x24
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f000 faa9 	bl	800f2c0 <_Bfree>
 800ed6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed72:	4615      	mov	r5, r2
 800ed74:	1b1a      	subs	r2, r3, r4
 800ed76:	d004      	beq.n	800ed82 <_dtoa_r+0x6b2>
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f000 fc16 	bl	800f5ac <__pow5mult>
 800ed80:	4605      	mov	r5, r0
 800ed82:	2101      	movs	r1, #1
 800ed84:	4630      	mov	r0, r6
 800ed86:	f000 fb51 	bl	800f42c <__i2b>
 800ed8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	f340 8081 	ble.w	800ee96 <_dtoa_r+0x7c6>
 800ed94:	461a      	mov	r2, r3
 800ed96:	4601      	mov	r1, r0
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f000 fc07 	bl	800f5ac <__pow5mult>
 800ed9e:	9b06      	ldr	r3, [sp, #24]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	4604      	mov	r4, r0
 800eda4:	dd7a      	ble.n	800ee9c <_dtoa_r+0x7cc>
 800eda6:	2300      	movs	r3, #0
 800eda8:	9309      	str	r3, [sp, #36]	; 0x24
 800edaa:	6922      	ldr	r2, [r4, #16]
 800edac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800edb0:	6910      	ldr	r0, [r2, #16]
 800edb2:	f000 faed 	bl	800f390 <__hi0bits>
 800edb6:	f1c0 0020 	rsb	r0, r0, #32
 800edba:	9b05      	ldr	r3, [sp, #20]
 800edbc:	4418      	add	r0, r3
 800edbe:	f010 001f 	ands.w	r0, r0, #31
 800edc2:	f000 8093 	beq.w	800eeec <_dtoa_r+0x81c>
 800edc6:	f1c0 0220 	rsb	r2, r0, #32
 800edca:	2a04      	cmp	r2, #4
 800edcc:	f340 8085 	ble.w	800eeda <_dtoa_r+0x80a>
 800edd0:	9b04      	ldr	r3, [sp, #16]
 800edd2:	f1c0 001c 	rsb	r0, r0, #28
 800edd6:	4403      	add	r3, r0
 800edd8:	9304      	str	r3, [sp, #16]
 800edda:	9b05      	ldr	r3, [sp, #20]
 800eddc:	4480      	add	r8, r0
 800edde:	4403      	add	r3, r0
 800ede0:	9305      	str	r3, [sp, #20]
 800ede2:	9b04      	ldr	r3, [sp, #16]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	dd05      	ble.n	800edf4 <_dtoa_r+0x724>
 800ede8:	4629      	mov	r1, r5
 800edea:	461a      	mov	r2, r3
 800edec:	4630      	mov	r0, r6
 800edee:	f000 fc37 	bl	800f660 <__lshift>
 800edf2:	4605      	mov	r5, r0
 800edf4:	9b05      	ldr	r3, [sp, #20]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	dd05      	ble.n	800ee06 <_dtoa_r+0x736>
 800edfa:	4621      	mov	r1, r4
 800edfc:	461a      	mov	r2, r3
 800edfe:	4630      	mov	r0, r6
 800ee00:	f000 fc2e 	bl	800f660 <__lshift>
 800ee04:	4604      	mov	r4, r0
 800ee06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d071      	beq.n	800eef0 <_dtoa_r+0x820>
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f000 fc92 	bl	800f738 <__mcmp>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	da6b      	bge.n	800eef0 <_dtoa_r+0x820>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	4629      	mov	r1, r5
 800ee1c:	220a      	movs	r2, #10
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f000 fa70 	bl	800f304 <__multadd>
 800ee24:	9b07      	ldr	r3, [sp, #28]
 800ee26:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 8197 	beq.w	800f160 <_dtoa_r+0xa90>
 800ee32:	4639      	mov	r1, r7
 800ee34:	2300      	movs	r3, #0
 800ee36:	220a      	movs	r2, #10
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f000 fa63 	bl	800f304 <__multadd>
 800ee3e:	f1ba 0f00 	cmp.w	sl, #0
 800ee42:	4607      	mov	r7, r0
 800ee44:	f300 8093 	bgt.w	800ef6e <_dtoa_r+0x89e>
 800ee48:	9b06      	ldr	r3, [sp, #24]
 800ee4a:	2b02      	cmp	r3, #2
 800ee4c:	dc57      	bgt.n	800eefe <_dtoa_r+0x82e>
 800ee4e:	e08e      	b.n	800ef6e <_dtoa_r+0x89e>
 800ee50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ee56:	e751      	b.n	800ecfc <_dtoa_r+0x62c>
 800ee58:	f109 34ff 	add.w	r4, r9, #4294967295
 800ee5c:	42a3      	cmp	r3, r4
 800ee5e:	bfbf      	itttt	lt
 800ee60:	1ae2      	sublt	r2, r4, r3
 800ee62:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ee64:	189b      	addlt	r3, r3, r2
 800ee66:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ee68:	bfae      	itee	ge
 800ee6a:	1b1c      	subge	r4, r3, r4
 800ee6c:	4623      	movlt	r3, r4
 800ee6e:	2400      	movlt	r4, #0
 800ee70:	f1b9 0f00 	cmp.w	r9, #0
 800ee74:	bfb5      	itete	lt
 800ee76:	9a04      	ldrlt	r2, [sp, #16]
 800ee78:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ee7c:	eba2 0809 	sublt.w	r8, r2, r9
 800ee80:	464a      	movge	r2, r9
 800ee82:	bfb8      	it	lt
 800ee84:	2200      	movlt	r2, #0
 800ee86:	e73c      	b.n	800ed02 <_dtoa_r+0x632>
 800ee88:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ee8c:	9f07      	ldr	r7, [sp, #28]
 800ee8e:	461c      	mov	r4, r3
 800ee90:	e744      	b.n	800ed1c <_dtoa_r+0x64c>
 800ee92:	461a      	mov	r2, r3
 800ee94:	e770      	b.n	800ed78 <_dtoa_r+0x6a8>
 800ee96:	9b06      	ldr	r3, [sp, #24]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	dc18      	bgt.n	800eece <_dtoa_r+0x7fe>
 800ee9c:	9b02      	ldr	r3, [sp, #8]
 800ee9e:	b9b3      	cbnz	r3, 800eece <_dtoa_r+0x7fe>
 800eea0:	9b03      	ldr	r3, [sp, #12]
 800eea2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800eea6:	b9a2      	cbnz	r2, 800eed2 <_dtoa_r+0x802>
 800eea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eeac:	0d12      	lsrs	r2, r2, #20
 800eeae:	0512      	lsls	r2, r2, #20
 800eeb0:	b18a      	cbz	r2, 800eed6 <_dtoa_r+0x806>
 800eeb2:	9b04      	ldr	r3, [sp, #16]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	9304      	str	r3, [sp, #16]
 800eeb8:	9b05      	ldr	r3, [sp, #20]
 800eeba:	3301      	adds	r3, #1
 800eebc:	9305      	str	r3, [sp, #20]
 800eebe:	2301      	movs	r3, #1
 800eec0:	9309      	str	r3, [sp, #36]	; 0x24
 800eec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f47f af70 	bne.w	800edaa <_dtoa_r+0x6da>
 800eeca:	2001      	movs	r0, #1
 800eecc:	e775      	b.n	800edba <_dtoa_r+0x6ea>
 800eece:	2300      	movs	r3, #0
 800eed0:	e7f6      	b.n	800eec0 <_dtoa_r+0x7f0>
 800eed2:	9b02      	ldr	r3, [sp, #8]
 800eed4:	e7f4      	b.n	800eec0 <_dtoa_r+0x7f0>
 800eed6:	9209      	str	r2, [sp, #36]	; 0x24
 800eed8:	e7f3      	b.n	800eec2 <_dtoa_r+0x7f2>
 800eeda:	d082      	beq.n	800ede2 <_dtoa_r+0x712>
 800eedc:	9b04      	ldr	r3, [sp, #16]
 800eede:	321c      	adds	r2, #28
 800eee0:	4413      	add	r3, r2
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	9b05      	ldr	r3, [sp, #20]
 800eee6:	4490      	add	r8, r2
 800eee8:	4413      	add	r3, r2
 800eeea:	e779      	b.n	800ede0 <_dtoa_r+0x710>
 800eeec:	4602      	mov	r2, r0
 800eeee:	e7f5      	b.n	800eedc <_dtoa_r+0x80c>
 800eef0:	f1b9 0f00 	cmp.w	r9, #0
 800eef4:	dc36      	bgt.n	800ef64 <_dtoa_r+0x894>
 800eef6:	9b06      	ldr	r3, [sp, #24]
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	dd33      	ble.n	800ef64 <_dtoa_r+0x894>
 800eefc:	46ca      	mov	sl, r9
 800eefe:	f1ba 0f00 	cmp.w	sl, #0
 800ef02:	d10d      	bne.n	800ef20 <_dtoa_r+0x850>
 800ef04:	4621      	mov	r1, r4
 800ef06:	4653      	mov	r3, sl
 800ef08:	2205      	movs	r2, #5
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f000 f9fa 	bl	800f304 <__multadd>
 800ef10:	4601      	mov	r1, r0
 800ef12:	4604      	mov	r4, r0
 800ef14:	4628      	mov	r0, r5
 800ef16:	f000 fc0f 	bl	800f738 <__mcmp>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	f73f ade4 	bgt.w	800eae8 <_dtoa_r+0x418>
 800ef20:	9b08      	ldr	r3, [sp, #32]
 800ef22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ef26:	ea6f 0b03 	mvn.w	fp, r3
 800ef2a:	f04f 0900 	mov.w	r9, #0
 800ef2e:	4621      	mov	r1, r4
 800ef30:	4630      	mov	r0, r6
 800ef32:	f000 f9c5 	bl	800f2c0 <_Bfree>
 800ef36:	2f00      	cmp	r7, #0
 800ef38:	f43f aea1 	beq.w	800ec7e <_dtoa_r+0x5ae>
 800ef3c:	f1b9 0f00 	cmp.w	r9, #0
 800ef40:	d005      	beq.n	800ef4e <_dtoa_r+0x87e>
 800ef42:	45b9      	cmp	r9, r7
 800ef44:	d003      	beq.n	800ef4e <_dtoa_r+0x87e>
 800ef46:	4649      	mov	r1, r9
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 f9b9 	bl	800f2c0 <_Bfree>
 800ef4e:	4639      	mov	r1, r7
 800ef50:	4630      	mov	r0, r6
 800ef52:	f000 f9b5 	bl	800f2c0 <_Bfree>
 800ef56:	e692      	b.n	800ec7e <_dtoa_r+0x5ae>
 800ef58:	2400      	movs	r4, #0
 800ef5a:	4627      	mov	r7, r4
 800ef5c:	e7e0      	b.n	800ef20 <_dtoa_r+0x850>
 800ef5e:	4693      	mov	fp, r2
 800ef60:	4627      	mov	r7, r4
 800ef62:	e5c1      	b.n	800eae8 <_dtoa_r+0x418>
 800ef64:	9b07      	ldr	r3, [sp, #28]
 800ef66:	46ca      	mov	sl, r9
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f000 8100 	beq.w	800f16e <_dtoa_r+0xa9e>
 800ef6e:	f1b8 0f00 	cmp.w	r8, #0
 800ef72:	dd05      	ble.n	800ef80 <_dtoa_r+0x8b0>
 800ef74:	4639      	mov	r1, r7
 800ef76:	4642      	mov	r2, r8
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f000 fb71 	bl	800f660 <__lshift>
 800ef7e:	4607      	mov	r7, r0
 800ef80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d05d      	beq.n	800f042 <_dtoa_r+0x972>
 800ef86:	6879      	ldr	r1, [r7, #4]
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f000 f959 	bl	800f240 <_Balloc>
 800ef8e:	4680      	mov	r8, r0
 800ef90:	b928      	cbnz	r0, 800ef9e <_dtoa_r+0x8ce>
 800ef92:	4b82      	ldr	r3, [pc, #520]	; (800f19c <_dtoa_r+0xacc>)
 800ef94:	4602      	mov	r2, r0
 800ef96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ef9a:	f7ff bbb1 	b.w	800e700 <_dtoa_r+0x30>
 800ef9e:	693a      	ldr	r2, [r7, #16]
 800efa0:	3202      	adds	r2, #2
 800efa2:	0092      	lsls	r2, r2, #2
 800efa4:	f107 010c 	add.w	r1, r7, #12
 800efa8:	300c      	adds	r0, #12
 800efaa:	f7ff fafa 	bl	800e5a2 <memcpy>
 800efae:	2201      	movs	r2, #1
 800efb0:	4641      	mov	r1, r8
 800efb2:	4630      	mov	r0, r6
 800efb4:	f000 fb54 	bl	800f660 <__lshift>
 800efb8:	9b01      	ldr	r3, [sp, #4]
 800efba:	3301      	adds	r3, #1
 800efbc:	9304      	str	r3, [sp, #16]
 800efbe:	9b01      	ldr	r3, [sp, #4]
 800efc0:	4453      	add	r3, sl
 800efc2:	9308      	str	r3, [sp, #32]
 800efc4:	9b02      	ldr	r3, [sp, #8]
 800efc6:	f003 0301 	and.w	r3, r3, #1
 800efca:	46b9      	mov	r9, r7
 800efcc:	9307      	str	r3, [sp, #28]
 800efce:	4607      	mov	r7, r0
 800efd0:	9b04      	ldr	r3, [sp, #16]
 800efd2:	4621      	mov	r1, r4
 800efd4:	3b01      	subs	r3, #1
 800efd6:	4628      	mov	r0, r5
 800efd8:	9302      	str	r3, [sp, #8]
 800efda:	f7ff faf0 	bl	800e5be <quorem>
 800efde:	4603      	mov	r3, r0
 800efe0:	3330      	adds	r3, #48	; 0x30
 800efe2:	9005      	str	r0, [sp, #20]
 800efe4:	4649      	mov	r1, r9
 800efe6:	4628      	mov	r0, r5
 800efe8:	9309      	str	r3, [sp, #36]	; 0x24
 800efea:	f000 fba5 	bl	800f738 <__mcmp>
 800efee:	463a      	mov	r2, r7
 800eff0:	4682      	mov	sl, r0
 800eff2:	4621      	mov	r1, r4
 800eff4:	4630      	mov	r0, r6
 800eff6:	f000 fbbb 	bl	800f770 <__mdiff>
 800effa:	68c2      	ldr	r2, [r0, #12]
 800effc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800effe:	4680      	mov	r8, r0
 800f000:	bb0a      	cbnz	r2, 800f046 <_dtoa_r+0x976>
 800f002:	4601      	mov	r1, r0
 800f004:	4628      	mov	r0, r5
 800f006:	f000 fb97 	bl	800f738 <__mcmp>
 800f00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f00c:	4602      	mov	r2, r0
 800f00e:	4641      	mov	r1, r8
 800f010:	4630      	mov	r0, r6
 800f012:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800f016:	f000 f953 	bl	800f2c0 <_Bfree>
 800f01a:	9b06      	ldr	r3, [sp, #24]
 800f01c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f01e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f022:	ea43 0102 	orr.w	r1, r3, r2
 800f026:	9b07      	ldr	r3, [sp, #28]
 800f028:	4319      	orrs	r1, r3
 800f02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f02c:	d10d      	bne.n	800f04a <_dtoa_r+0x97a>
 800f02e:	2b39      	cmp	r3, #57	; 0x39
 800f030:	d029      	beq.n	800f086 <_dtoa_r+0x9b6>
 800f032:	f1ba 0f00 	cmp.w	sl, #0
 800f036:	dd01      	ble.n	800f03c <_dtoa_r+0x96c>
 800f038:	9b05      	ldr	r3, [sp, #20]
 800f03a:	3331      	adds	r3, #49	; 0x31
 800f03c:	9a02      	ldr	r2, [sp, #8]
 800f03e:	7013      	strb	r3, [r2, #0]
 800f040:	e775      	b.n	800ef2e <_dtoa_r+0x85e>
 800f042:	4638      	mov	r0, r7
 800f044:	e7b8      	b.n	800efb8 <_dtoa_r+0x8e8>
 800f046:	2201      	movs	r2, #1
 800f048:	e7e1      	b.n	800f00e <_dtoa_r+0x93e>
 800f04a:	f1ba 0f00 	cmp.w	sl, #0
 800f04e:	db06      	blt.n	800f05e <_dtoa_r+0x98e>
 800f050:	9906      	ldr	r1, [sp, #24]
 800f052:	ea41 0a0a 	orr.w	sl, r1, sl
 800f056:	9907      	ldr	r1, [sp, #28]
 800f058:	ea5a 0a01 	orrs.w	sl, sl, r1
 800f05c:	d120      	bne.n	800f0a0 <_dtoa_r+0x9d0>
 800f05e:	2a00      	cmp	r2, #0
 800f060:	ddec      	ble.n	800f03c <_dtoa_r+0x96c>
 800f062:	4629      	mov	r1, r5
 800f064:	2201      	movs	r2, #1
 800f066:	4630      	mov	r0, r6
 800f068:	9304      	str	r3, [sp, #16]
 800f06a:	f000 faf9 	bl	800f660 <__lshift>
 800f06e:	4621      	mov	r1, r4
 800f070:	4605      	mov	r5, r0
 800f072:	f000 fb61 	bl	800f738 <__mcmp>
 800f076:	2800      	cmp	r0, #0
 800f078:	9b04      	ldr	r3, [sp, #16]
 800f07a:	dc02      	bgt.n	800f082 <_dtoa_r+0x9b2>
 800f07c:	d1de      	bne.n	800f03c <_dtoa_r+0x96c>
 800f07e:	07da      	lsls	r2, r3, #31
 800f080:	d5dc      	bpl.n	800f03c <_dtoa_r+0x96c>
 800f082:	2b39      	cmp	r3, #57	; 0x39
 800f084:	d1d8      	bne.n	800f038 <_dtoa_r+0x968>
 800f086:	9a02      	ldr	r2, [sp, #8]
 800f088:	2339      	movs	r3, #57	; 0x39
 800f08a:	7013      	strb	r3, [r2, #0]
 800f08c:	4643      	mov	r3, r8
 800f08e:	4698      	mov	r8, r3
 800f090:	3b01      	subs	r3, #1
 800f092:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f096:	2a39      	cmp	r2, #57	; 0x39
 800f098:	d051      	beq.n	800f13e <_dtoa_r+0xa6e>
 800f09a:	3201      	adds	r2, #1
 800f09c:	701a      	strb	r2, [r3, #0]
 800f09e:	e746      	b.n	800ef2e <_dtoa_r+0x85e>
 800f0a0:	2a00      	cmp	r2, #0
 800f0a2:	dd03      	ble.n	800f0ac <_dtoa_r+0x9dc>
 800f0a4:	2b39      	cmp	r3, #57	; 0x39
 800f0a6:	d0ee      	beq.n	800f086 <_dtoa_r+0x9b6>
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	e7c7      	b.n	800f03c <_dtoa_r+0x96c>
 800f0ac:	9a04      	ldr	r2, [sp, #16]
 800f0ae:	9908      	ldr	r1, [sp, #32]
 800f0b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f0b4:	428a      	cmp	r2, r1
 800f0b6:	d02b      	beq.n	800f110 <_dtoa_r+0xa40>
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	220a      	movs	r2, #10
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f000 f920 	bl	800f304 <__multadd>
 800f0c4:	45b9      	cmp	r9, r7
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	f04f 0300 	mov.w	r3, #0
 800f0cc:	f04f 020a 	mov.w	r2, #10
 800f0d0:	4649      	mov	r1, r9
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	d107      	bne.n	800f0e6 <_dtoa_r+0xa16>
 800f0d6:	f000 f915 	bl	800f304 <__multadd>
 800f0da:	4681      	mov	r9, r0
 800f0dc:	4607      	mov	r7, r0
 800f0de:	9b04      	ldr	r3, [sp, #16]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	9304      	str	r3, [sp, #16]
 800f0e4:	e774      	b.n	800efd0 <_dtoa_r+0x900>
 800f0e6:	f000 f90d 	bl	800f304 <__multadd>
 800f0ea:	4639      	mov	r1, r7
 800f0ec:	4681      	mov	r9, r0
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	220a      	movs	r2, #10
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f000 f906 	bl	800f304 <__multadd>
 800f0f8:	4607      	mov	r7, r0
 800f0fa:	e7f0      	b.n	800f0de <_dtoa_r+0xa0e>
 800f0fc:	f1ba 0f00 	cmp.w	sl, #0
 800f100:	9a01      	ldr	r2, [sp, #4]
 800f102:	bfcc      	ite	gt
 800f104:	46d0      	movgt	r8, sl
 800f106:	f04f 0801 	movle.w	r8, #1
 800f10a:	4490      	add	r8, r2
 800f10c:	f04f 0900 	mov.w	r9, #0
 800f110:	4629      	mov	r1, r5
 800f112:	2201      	movs	r2, #1
 800f114:	4630      	mov	r0, r6
 800f116:	9302      	str	r3, [sp, #8]
 800f118:	f000 faa2 	bl	800f660 <__lshift>
 800f11c:	4621      	mov	r1, r4
 800f11e:	4605      	mov	r5, r0
 800f120:	f000 fb0a 	bl	800f738 <__mcmp>
 800f124:	2800      	cmp	r0, #0
 800f126:	dcb1      	bgt.n	800f08c <_dtoa_r+0x9bc>
 800f128:	d102      	bne.n	800f130 <_dtoa_r+0xa60>
 800f12a:	9b02      	ldr	r3, [sp, #8]
 800f12c:	07db      	lsls	r3, r3, #31
 800f12e:	d4ad      	bmi.n	800f08c <_dtoa_r+0x9bc>
 800f130:	4643      	mov	r3, r8
 800f132:	4698      	mov	r8, r3
 800f134:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f138:	2a30      	cmp	r2, #48	; 0x30
 800f13a:	d0fa      	beq.n	800f132 <_dtoa_r+0xa62>
 800f13c:	e6f7      	b.n	800ef2e <_dtoa_r+0x85e>
 800f13e:	9a01      	ldr	r2, [sp, #4]
 800f140:	429a      	cmp	r2, r3
 800f142:	d1a4      	bne.n	800f08e <_dtoa_r+0x9be>
 800f144:	f10b 0b01 	add.w	fp, fp, #1
 800f148:	2331      	movs	r3, #49	; 0x31
 800f14a:	e778      	b.n	800f03e <_dtoa_r+0x96e>
 800f14c:	4b14      	ldr	r3, [pc, #80]	; (800f1a0 <_dtoa_r+0xad0>)
 800f14e:	f7ff bb2a 	b.w	800e7a6 <_dtoa_r+0xd6>
 800f152:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f154:	2b00      	cmp	r3, #0
 800f156:	f47f ab05 	bne.w	800e764 <_dtoa_r+0x94>
 800f15a:	4b12      	ldr	r3, [pc, #72]	; (800f1a4 <_dtoa_r+0xad4>)
 800f15c:	f7ff bb23 	b.w	800e7a6 <_dtoa_r+0xd6>
 800f160:	f1ba 0f00 	cmp.w	sl, #0
 800f164:	dc03      	bgt.n	800f16e <_dtoa_r+0xa9e>
 800f166:	9b06      	ldr	r3, [sp, #24]
 800f168:	2b02      	cmp	r3, #2
 800f16a:	f73f aec8 	bgt.w	800eefe <_dtoa_r+0x82e>
 800f16e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f172:	4621      	mov	r1, r4
 800f174:	4628      	mov	r0, r5
 800f176:	f7ff fa22 	bl	800e5be <quorem>
 800f17a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f17e:	f808 3b01 	strb.w	r3, [r8], #1
 800f182:	9a01      	ldr	r2, [sp, #4]
 800f184:	eba8 0202 	sub.w	r2, r8, r2
 800f188:	4592      	cmp	sl, r2
 800f18a:	ddb7      	ble.n	800f0fc <_dtoa_r+0xa2c>
 800f18c:	4629      	mov	r1, r5
 800f18e:	2300      	movs	r3, #0
 800f190:	220a      	movs	r2, #10
 800f192:	4630      	mov	r0, r6
 800f194:	f000 f8b6 	bl	800f304 <__multadd>
 800f198:	4605      	mov	r5, r0
 800f19a:	e7ea      	b.n	800f172 <_dtoa_r+0xaa2>
 800f19c:	0809e720 	.word	0x0809e720
 800f1a0:	0809e680 	.word	0x0809e680
 800f1a4:	0809e6a4 	.word	0x0809e6a4

0800f1a8 <_free_r>:
 800f1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1aa:	2900      	cmp	r1, #0
 800f1ac:	d044      	beq.n	800f238 <_free_r+0x90>
 800f1ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1b2:	9001      	str	r0, [sp, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f1a1 0404 	sub.w	r4, r1, #4
 800f1ba:	bfb8      	it	lt
 800f1bc:	18e4      	addlt	r4, r4, r3
 800f1be:	f7fe fb11 	bl	800d7e4 <__malloc_lock>
 800f1c2:	4a1e      	ldr	r2, [pc, #120]	; (800f23c <_free_r+0x94>)
 800f1c4:	9801      	ldr	r0, [sp, #4]
 800f1c6:	6813      	ldr	r3, [r2, #0]
 800f1c8:	b933      	cbnz	r3, 800f1d8 <_free_r+0x30>
 800f1ca:	6063      	str	r3, [r4, #4]
 800f1cc:	6014      	str	r4, [r2, #0]
 800f1ce:	b003      	add	sp, #12
 800f1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1d4:	f7fe bb0c 	b.w	800d7f0 <__malloc_unlock>
 800f1d8:	42a3      	cmp	r3, r4
 800f1da:	d908      	bls.n	800f1ee <_free_r+0x46>
 800f1dc:	6825      	ldr	r5, [r4, #0]
 800f1de:	1961      	adds	r1, r4, r5
 800f1e0:	428b      	cmp	r3, r1
 800f1e2:	bf01      	itttt	eq
 800f1e4:	6819      	ldreq	r1, [r3, #0]
 800f1e6:	685b      	ldreq	r3, [r3, #4]
 800f1e8:	1949      	addeq	r1, r1, r5
 800f1ea:	6021      	streq	r1, [r4, #0]
 800f1ec:	e7ed      	b.n	800f1ca <_free_r+0x22>
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	b10b      	cbz	r3, 800f1f8 <_free_r+0x50>
 800f1f4:	42a3      	cmp	r3, r4
 800f1f6:	d9fa      	bls.n	800f1ee <_free_r+0x46>
 800f1f8:	6811      	ldr	r1, [r2, #0]
 800f1fa:	1855      	adds	r5, r2, r1
 800f1fc:	42a5      	cmp	r5, r4
 800f1fe:	d10b      	bne.n	800f218 <_free_r+0x70>
 800f200:	6824      	ldr	r4, [r4, #0]
 800f202:	4421      	add	r1, r4
 800f204:	1854      	adds	r4, r2, r1
 800f206:	42a3      	cmp	r3, r4
 800f208:	6011      	str	r1, [r2, #0]
 800f20a:	d1e0      	bne.n	800f1ce <_free_r+0x26>
 800f20c:	681c      	ldr	r4, [r3, #0]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	6053      	str	r3, [r2, #4]
 800f212:	440c      	add	r4, r1
 800f214:	6014      	str	r4, [r2, #0]
 800f216:	e7da      	b.n	800f1ce <_free_r+0x26>
 800f218:	d902      	bls.n	800f220 <_free_r+0x78>
 800f21a:	230c      	movs	r3, #12
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	e7d6      	b.n	800f1ce <_free_r+0x26>
 800f220:	6825      	ldr	r5, [r4, #0]
 800f222:	1961      	adds	r1, r4, r5
 800f224:	428b      	cmp	r3, r1
 800f226:	bf04      	itt	eq
 800f228:	6819      	ldreq	r1, [r3, #0]
 800f22a:	685b      	ldreq	r3, [r3, #4]
 800f22c:	6063      	str	r3, [r4, #4]
 800f22e:	bf04      	itt	eq
 800f230:	1949      	addeq	r1, r1, r5
 800f232:	6021      	streq	r1, [r4, #0]
 800f234:	6054      	str	r4, [r2, #4]
 800f236:	e7ca      	b.n	800f1ce <_free_r+0x26>
 800f238:	b003      	add	sp, #12
 800f23a:	bd30      	pop	{r4, r5, pc}
 800f23c:	20016eb0 	.word	0x20016eb0

0800f240 <_Balloc>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	69c6      	ldr	r6, [r0, #28]
 800f244:	4604      	mov	r4, r0
 800f246:	460d      	mov	r5, r1
 800f248:	b976      	cbnz	r6, 800f268 <_Balloc+0x28>
 800f24a:	2010      	movs	r0, #16
 800f24c:	f7fe fa22 	bl	800d694 <malloc>
 800f250:	4602      	mov	r2, r0
 800f252:	61e0      	str	r0, [r4, #28]
 800f254:	b920      	cbnz	r0, 800f260 <_Balloc+0x20>
 800f256:	4b18      	ldr	r3, [pc, #96]	; (800f2b8 <_Balloc+0x78>)
 800f258:	4818      	ldr	r0, [pc, #96]	; (800f2bc <_Balloc+0x7c>)
 800f25a:	216b      	movs	r1, #107	; 0x6b
 800f25c:	f000 fde2 	bl	800fe24 <__assert_func>
 800f260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f264:	6006      	str	r6, [r0, #0]
 800f266:	60c6      	str	r6, [r0, #12]
 800f268:	69e6      	ldr	r6, [r4, #28]
 800f26a:	68f3      	ldr	r3, [r6, #12]
 800f26c:	b183      	cbz	r3, 800f290 <_Balloc+0x50>
 800f26e:	69e3      	ldr	r3, [r4, #28]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f276:	b9b8      	cbnz	r0, 800f2a8 <_Balloc+0x68>
 800f278:	2101      	movs	r1, #1
 800f27a:	fa01 f605 	lsl.w	r6, r1, r5
 800f27e:	1d72      	adds	r2, r6, #5
 800f280:	0092      	lsls	r2, r2, #2
 800f282:	4620      	mov	r0, r4
 800f284:	f000 fdec 	bl	800fe60 <_calloc_r>
 800f288:	b160      	cbz	r0, 800f2a4 <_Balloc+0x64>
 800f28a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f28e:	e00e      	b.n	800f2ae <_Balloc+0x6e>
 800f290:	2221      	movs	r2, #33	; 0x21
 800f292:	2104      	movs	r1, #4
 800f294:	4620      	mov	r0, r4
 800f296:	f000 fde3 	bl	800fe60 <_calloc_r>
 800f29a:	69e3      	ldr	r3, [r4, #28]
 800f29c:	60f0      	str	r0, [r6, #12]
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1e4      	bne.n	800f26e <_Balloc+0x2e>
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	bd70      	pop	{r4, r5, r6, pc}
 800f2a8:	6802      	ldr	r2, [r0, #0]
 800f2aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2b4:	e7f7      	b.n	800f2a6 <_Balloc+0x66>
 800f2b6:	bf00      	nop
 800f2b8:	0809e6b1 	.word	0x0809e6b1
 800f2bc:	0809e731 	.word	0x0809e731

0800f2c0 <_Bfree>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	69c6      	ldr	r6, [r0, #28]
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	b976      	cbnz	r6, 800f2e8 <_Bfree+0x28>
 800f2ca:	2010      	movs	r0, #16
 800f2cc:	f7fe f9e2 	bl	800d694 <malloc>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	61e8      	str	r0, [r5, #28]
 800f2d4:	b920      	cbnz	r0, 800f2e0 <_Bfree+0x20>
 800f2d6:	4b09      	ldr	r3, [pc, #36]	; (800f2fc <_Bfree+0x3c>)
 800f2d8:	4809      	ldr	r0, [pc, #36]	; (800f300 <_Bfree+0x40>)
 800f2da:	218f      	movs	r1, #143	; 0x8f
 800f2dc:	f000 fda2 	bl	800fe24 <__assert_func>
 800f2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2e4:	6006      	str	r6, [r0, #0]
 800f2e6:	60c6      	str	r6, [r0, #12]
 800f2e8:	b13c      	cbz	r4, 800f2fa <_Bfree+0x3a>
 800f2ea:	69eb      	ldr	r3, [r5, #28]
 800f2ec:	6862      	ldr	r2, [r4, #4]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2f4:	6021      	str	r1, [r4, #0]
 800f2f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	0809e6b1 	.word	0x0809e6b1
 800f300:	0809e731 	.word	0x0809e731

0800f304 <__multadd>:
 800f304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f308:	690d      	ldr	r5, [r1, #16]
 800f30a:	4607      	mov	r7, r0
 800f30c:	460c      	mov	r4, r1
 800f30e:	461e      	mov	r6, r3
 800f310:	f101 0c14 	add.w	ip, r1, #20
 800f314:	2000      	movs	r0, #0
 800f316:	f8dc 3000 	ldr.w	r3, [ip]
 800f31a:	b299      	uxth	r1, r3
 800f31c:	fb02 6101 	mla	r1, r2, r1, r6
 800f320:	0c1e      	lsrs	r6, r3, #16
 800f322:	0c0b      	lsrs	r3, r1, #16
 800f324:	fb02 3306 	mla	r3, r2, r6, r3
 800f328:	b289      	uxth	r1, r1
 800f32a:	3001      	adds	r0, #1
 800f32c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f330:	4285      	cmp	r5, r0
 800f332:	f84c 1b04 	str.w	r1, [ip], #4
 800f336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f33a:	dcec      	bgt.n	800f316 <__multadd+0x12>
 800f33c:	b30e      	cbz	r6, 800f382 <__multadd+0x7e>
 800f33e:	68a3      	ldr	r3, [r4, #8]
 800f340:	42ab      	cmp	r3, r5
 800f342:	dc19      	bgt.n	800f378 <__multadd+0x74>
 800f344:	6861      	ldr	r1, [r4, #4]
 800f346:	4638      	mov	r0, r7
 800f348:	3101      	adds	r1, #1
 800f34a:	f7ff ff79 	bl	800f240 <_Balloc>
 800f34e:	4680      	mov	r8, r0
 800f350:	b928      	cbnz	r0, 800f35e <__multadd+0x5a>
 800f352:	4602      	mov	r2, r0
 800f354:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <__multadd+0x84>)
 800f356:	480d      	ldr	r0, [pc, #52]	; (800f38c <__multadd+0x88>)
 800f358:	21ba      	movs	r1, #186	; 0xba
 800f35a:	f000 fd63 	bl	800fe24 <__assert_func>
 800f35e:	6922      	ldr	r2, [r4, #16]
 800f360:	3202      	adds	r2, #2
 800f362:	f104 010c 	add.w	r1, r4, #12
 800f366:	0092      	lsls	r2, r2, #2
 800f368:	300c      	adds	r0, #12
 800f36a:	f7ff f91a 	bl	800e5a2 <memcpy>
 800f36e:	4621      	mov	r1, r4
 800f370:	4638      	mov	r0, r7
 800f372:	f7ff ffa5 	bl	800f2c0 <_Bfree>
 800f376:	4644      	mov	r4, r8
 800f378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f37c:	3501      	adds	r5, #1
 800f37e:	615e      	str	r6, [r3, #20]
 800f380:	6125      	str	r5, [r4, #16]
 800f382:	4620      	mov	r0, r4
 800f384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f388:	0809e720 	.word	0x0809e720
 800f38c:	0809e731 	.word	0x0809e731

0800f390 <__hi0bits>:
 800f390:	0c03      	lsrs	r3, r0, #16
 800f392:	041b      	lsls	r3, r3, #16
 800f394:	b9d3      	cbnz	r3, 800f3cc <__hi0bits+0x3c>
 800f396:	0400      	lsls	r0, r0, #16
 800f398:	2310      	movs	r3, #16
 800f39a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f39e:	bf04      	itt	eq
 800f3a0:	0200      	lsleq	r0, r0, #8
 800f3a2:	3308      	addeq	r3, #8
 800f3a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f3a8:	bf04      	itt	eq
 800f3aa:	0100      	lsleq	r0, r0, #4
 800f3ac:	3304      	addeq	r3, #4
 800f3ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f3b2:	bf04      	itt	eq
 800f3b4:	0080      	lsleq	r0, r0, #2
 800f3b6:	3302      	addeq	r3, #2
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	db05      	blt.n	800f3c8 <__hi0bits+0x38>
 800f3bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f3c0:	f103 0301 	add.w	r3, r3, #1
 800f3c4:	bf08      	it	eq
 800f3c6:	2320      	moveq	r3, #32
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	4770      	bx	lr
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	e7e4      	b.n	800f39a <__hi0bits+0xa>

0800f3d0 <__lo0bits>:
 800f3d0:	6803      	ldr	r3, [r0, #0]
 800f3d2:	f013 0207 	ands.w	r2, r3, #7
 800f3d6:	d00c      	beq.n	800f3f2 <__lo0bits+0x22>
 800f3d8:	07d9      	lsls	r1, r3, #31
 800f3da:	d422      	bmi.n	800f422 <__lo0bits+0x52>
 800f3dc:	079a      	lsls	r2, r3, #30
 800f3de:	bf49      	itett	mi
 800f3e0:	085b      	lsrmi	r3, r3, #1
 800f3e2:	089b      	lsrpl	r3, r3, #2
 800f3e4:	6003      	strmi	r3, [r0, #0]
 800f3e6:	2201      	movmi	r2, #1
 800f3e8:	bf5c      	itt	pl
 800f3ea:	6003      	strpl	r3, [r0, #0]
 800f3ec:	2202      	movpl	r2, #2
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	4770      	bx	lr
 800f3f2:	b299      	uxth	r1, r3
 800f3f4:	b909      	cbnz	r1, 800f3fa <__lo0bits+0x2a>
 800f3f6:	0c1b      	lsrs	r3, r3, #16
 800f3f8:	2210      	movs	r2, #16
 800f3fa:	b2d9      	uxtb	r1, r3
 800f3fc:	b909      	cbnz	r1, 800f402 <__lo0bits+0x32>
 800f3fe:	3208      	adds	r2, #8
 800f400:	0a1b      	lsrs	r3, r3, #8
 800f402:	0719      	lsls	r1, r3, #28
 800f404:	bf04      	itt	eq
 800f406:	091b      	lsreq	r3, r3, #4
 800f408:	3204      	addeq	r2, #4
 800f40a:	0799      	lsls	r1, r3, #30
 800f40c:	bf04      	itt	eq
 800f40e:	089b      	lsreq	r3, r3, #2
 800f410:	3202      	addeq	r2, #2
 800f412:	07d9      	lsls	r1, r3, #31
 800f414:	d403      	bmi.n	800f41e <__lo0bits+0x4e>
 800f416:	085b      	lsrs	r3, r3, #1
 800f418:	f102 0201 	add.w	r2, r2, #1
 800f41c:	d003      	beq.n	800f426 <__lo0bits+0x56>
 800f41e:	6003      	str	r3, [r0, #0]
 800f420:	e7e5      	b.n	800f3ee <__lo0bits+0x1e>
 800f422:	2200      	movs	r2, #0
 800f424:	e7e3      	b.n	800f3ee <__lo0bits+0x1e>
 800f426:	2220      	movs	r2, #32
 800f428:	e7e1      	b.n	800f3ee <__lo0bits+0x1e>
	...

0800f42c <__i2b>:
 800f42c:	b510      	push	{r4, lr}
 800f42e:	460c      	mov	r4, r1
 800f430:	2101      	movs	r1, #1
 800f432:	f7ff ff05 	bl	800f240 <_Balloc>
 800f436:	4602      	mov	r2, r0
 800f438:	b928      	cbnz	r0, 800f446 <__i2b+0x1a>
 800f43a:	4b05      	ldr	r3, [pc, #20]	; (800f450 <__i2b+0x24>)
 800f43c:	4805      	ldr	r0, [pc, #20]	; (800f454 <__i2b+0x28>)
 800f43e:	f240 1145 	movw	r1, #325	; 0x145
 800f442:	f000 fcef 	bl	800fe24 <__assert_func>
 800f446:	2301      	movs	r3, #1
 800f448:	6144      	str	r4, [r0, #20]
 800f44a:	6103      	str	r3, [r0, #16]
 800f44c:	bd10      	pop	{r4, pc}
 800f44e:	bf00      	nop
 800f450:	0809e720 	.word	0x0809e720
 800f454:	0809e731 	.word	0x0809e731

0800f458 <__multiply>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	4691      	mov	r9, r2
 800f45e:	690a      	ldr	r2, [r1, #16]
 800f460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f464:	429a      	cmp	r2, r3
 800f466:	bfb8      	it	lt
 800f468:	460b      	movlt	r3, r1
 800f46a:	460c      	mov	r4, r1
 800f46c:	bfbc      	itt	lt
 800f46e:	464c      	movlt	r4, r9
 800f470:	4699      	movlt	r9, r3
 800f472:	6927      	ldr	r7, [r4, #16]
 800f474:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f478:	68a3      	ldr	r3, [r4, #8]
 800f47a:	6861      	ldr	r1, [r4, #4]
 800f47c:	eb07 060a 	add.w	r6, r7, sl
 800f480:	42b3      	cmp	r3, r6
 800f482:	b085      	sub	sp, #20
 800f484:	bfb8      	it	lt
 800f486:	3101      	addlt	r1, #1
 800f488:	f7ff feda 	bl	800f240 <_Balloc>
 800f48c:	b930      	cbnz	r0, 800f49c <__multiply+0x44>
 800f48e:	4602      	mov	r2, r0
 800f490:	4b44      	ldr	r3, [pc, #272]	; (800f5a4 <__multiply+0x14c>)
 800f492:	4845      	ldr	r0, [pc, #276]	; (800f5a8 <__multiply+0x150>)
 800f494:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f498:	f000 fcc4 	bl	800fe24 <__assert_func>
 800f49c:	f100 0514 	add.w	r5, r0, #20
 800f4a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f4a4:	462b      	mov	r3, r5
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	4543      	cmp	r3, r8
 800f4aa:	d321      	bcc.n	800f4f0 <__multiply+0x98>
 800f4ac:	f104 0314 	add.w	r3, r4, #20
 800f4b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f4b4:	f109 0314 	add.w	r3, r9, #20
 800f4b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f4bc:	9202      	str	r2, [sp, #8]
 800f4be:	1b3a      	subs	r2, r7, r4
 800f4c0:	3a15      	subs	r2, #21
 800f4c2:	f022 0203 	bic.w	r2, r2, #3
 800f4c6:	3204      	adds	r2, #4
 800f4c8:	f104 0115 	add.w	r1, r4, #21
 800f4cc:	428f      	cmp	r7, r1
 800f4ce:	bf38      	it	cc
 800f4d0:	2204      	movcc	r2, #4
 800f4d2:	9201      	str	r2, [sp, #4]
 800f4d4:	9a02      	ldr	r2, [sp, #8]
 800f4d6:	9303      	str	r3, [sp, #12]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d80c      	bhi.n	800f4f6 <__multiply+0x9e>
 800f4dc:	2e00      	cmp	r6, #0
 800f4de:	dd03      	ble.n	800f4e8 <__multiply+0x90>
 800f4e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d05b      	beq.n	800f5a0 <__multiply+0x148>
 800f4e8:	6106      	str	r6, [r0, #16]
 800f4ea:	b005      	add	sp, #20
 800f4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f0:	f843 2b04 	str.w	r2, [r3], #4
 800f4f4:	e7d8      	b.n	800f4a8 <__multiply+0x50>
 800f4f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4fa:	f1ba 0f00 	cmp.w	sl, #0
 800f4fe:	d024      	beq.n	800f54a <__multiply+0xf2>
 800f500:	f104 0e14 	add.w	lr, r4, #20
 800f504:	46a9      	mov	r9, r5
 800f506:	f04f 0c00 	mov.w	ip, #0
 800f50a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f50e:	f8d9 1000 	ldr.w	r1, [r9]
 800f512:	fa1f fb82 	uxth.w	fp, r2
 800f516:	b289      	uxth	r1, r1
 800f518:	fb0a 110b 	mla	r1, sl, fp, r1
 800f51c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f520:	f8d9 2000 	ldr.w	r2, [r9]
 800f524:	4461      	add	r1, ip
 800f526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f52a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f52e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f532:	b289      	uxth	r1, r1
 800f534:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f538:	4577      	cmp	r7, lr
 800f53a:	f849 1b04 	str.w	r1, [r9], #4
 800f53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f542:	d8e2      	bhi.n	800f50a <__multiply+0xb2>
 800f544:	9a01      	ldr	r2, [sp, #4]
 800f546:	f845 c002 	str.w	ip, [r5, r2]
 800f54a:	9a03      	ldr	r2, [sp, #12]
 800f54c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f550:	3304      	adds	r3, #4
 800f552:	f1b9 0f00 	cmp.w	r9, #0
 800f556:	d021      	beq.n	800f59c <__multiply+0x144>
 800f558:	6829      	ldr	r1, [r5, #0]
 800f55a:	f104 0c14 	add.w	ip, r4, #20
 800f55e:	46ae      	mov	lr, r5
 800f560:	f04f 0a00 	mov.w	sl, #0
 800f564:	f8bc b000 	ldrh.w	fp, [ip]
 800f568:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f56c:	fb09 220b 	mla	r2, r9, fp, r2
 800f570:	4452      	add	r2, sl
 800f572:	b289      	uxth	r1, r1
 800f574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f578:	f84e 1b04 	str.w	r1, [lr], #4
 800f57c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f580:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f584:	f8be 1000 	ldrh.w	r1, [lr]
 800f588:	fb09 110a 	mla	r1, r9, sl, r1
 800f58c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f590:	4567      	cmp	r7, ip
 800f592:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f596:	d8e5      	bhi.n	800f564 <__multiply+0x10c>
 800f598:	9a01      	ldr	r2, [sp, #4]
 800f59a:	50a9      	str	r1, [r5, r2]
 800f59c:	3504      	adds	r5, #4
 800f59e:	e799      	b.n	800f4d4 <__multiply+0x7c>
 800f5a0:	3e01      	subs	r6, #1
 800f5a2:	e79b      	b.n	800f4dc <__multiply+0x84>
 800f5a4:	0809e720 	.word	0x0809e720
 800f5a8:	0809e731 	.word	0x0809e731

0800f5ac <__pow5mult>:
 800f5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b0:	4615      	mov	r5, r2
 800f5b2:	f012 0203 	ands.w	r2, r2, #3
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	d007      	beq.n	800f5cc <__pow5mult+0x20>
 800f5bc:	4c25      	ldr	r4, [pc, #148]	; (800f654 <__pow5mult+0xa8>)
 800f5be:	3a01      	subs	r2, #1
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5c6:	f7ff fe9d 	bl	800f304 <__multadd>
 800f5ca:	4607      	mov	r7, r0
 800f5cc:	10ad      	asrs	r5, r5, #2
 800f5ce:	d03d      	beq.n	800f64c <__pow5mult+0xa0>
 800f5d0:	69f4      	ldr	r4, [r6, #28]
 800f5d2:	b97c      	cbnz	r4, 800f5f4 <__pow5mult+0x48>
 800f5d4:	2010      	movs	r0, #16
 800f5d6:	f7fe f85d 	bl	800d694 <malloc>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	61f0      	str	r0, [r6, #28]
 800f5de:	b928      	cbnz	r0, 800f5ec <__pow5mult+0x40>
 800f5e0:	4b1d      	ldr	r3, [pc, #116]	; (800f658 <__pow5mult+0xac>)
 800f5e2:	481e      	ldr	r0, [pc, #120]	; (800f65c <__pow5mult+0xb0>)
 800f5e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f5e8:	f000 fc1c 	bl	800fe24 <__assert_func>
 800f5ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5f0:	6004      	str	r4, [r0, #0]
 800f5f2:	60c4      	str	r4, [r0, #12]
 800f5f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f5f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5fc:	b94c      	cbnz	r4, 800f612 <__pow5mult+0x66>
 800f5fe:	f240 2171 	movw	r1, #625	; 0x271
 800f602:	4630      	mov	r0, r6
 800f604:	f7ff ff12 	bl	800f42c <__i2b>
 800f608:	2300      	movs	r3, #0
 800f60a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f60e:	4604      	mov	r4, r0
 800f610:	6003      	str	r3, [r0, #0]
 800f612:	f04f 0900 	mov.w	r9, #0
 800f616:	07eb      	lsls	r3, r5, #31
 800f618:	d50a      	bpl.n	800f630 <__pow5mult+0x84>
 800f61a:	4639      	mov	r1, r7
 800f61c:	4622      	mov	r2, r4
 800f61e:	4630      	mov	r0, r6
 800f620:	f7ff ff1a 	bl	800f458 <__multiply>
 800f624:	4639      	mov	r1, r7
 800f626:	4680      	mov	r8, r0
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff fe49 	bl	800f2c0 <_Bfree>
 800f62e:	4647      	mov	r7, r8
 800f630:	106d      	asrs	r5, r5, #1
 800f632:	d00b      	beq.n	800f64c <__pow5mult+0xa0>
 800f634:	6820      	ldr	r0, [r4, #0]
 800f636:	b938      	cbnz	r0, 800f648 <__pow5mult+0x9c>
 800f638:	4622      	mov	r2, r4
 800f63a:	4621      	mov	r1, r4
 800f63c:	4630      	mov	r0, r6
 800f63e:	f7ff ff0b 	bl	800f458 <__multiply>
 800f642:	6020      	str	r0, [r4, #0]
 800f644:	f8c0 9000 	str.w	r9, [r0]
 800f648:	4604      	mov	r4, r0
 800f64a:	e7e4      	b.n	800f616 <__pow5mult+0x6a>
 800f64c:	4638      	mov	r0, r7
 800f64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f652:	bf00      	nop
 800f654:	0809e880 	.word	0x0809e880
 800f658:	0809e6b1 	.word	0x0809e6b1
 800f65c:	0809e731 	.word	0x0809e731

0800f660 <__lshift>:
 800f660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f664:	460c      	mov	r4, r1
 800f666:	6849      	ldr	r1, [r1, #4]
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f66e:	68a3      	ldr	r3, [r4, #8]
 800f670:	4607      	mov	r7, r0
 800f672:	4691      	mov	r9, r2
 800f674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f678:	f108 0601 	add.w	r6, r8, #1
 800f67c:	42b3      	cmp	r3, r6
 800f67e:	db0b      	blt.n	800f698 <__lshift+0x38>
 800f680:	4638      	mov	r0, r7
 800f682:	f7ff fddd 	bl	800f240 <_Balloc>
 800f686:	4605      	mov	r5, r0
 800f688:	b948      	cbnz	r0, 800f69e <__lshift+0x3e>
 800f68a:	4602      	mov	r2, r0
 800f68c:	4b28      	ldr	r3, [pc, #160]	; (800f730 <__lshift+0xd0>)
 800f68e:	4829      	ldr	r0, [pc, #164]	; (800f734 <__lshift+0xd4>)
 800f690:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f694:	f000 fbc6 	bl	800fe24 <__assert_func>
 800f698:	3101      	adds	r1, #1
 800f69a:	005b      	lsls	r3, r3, #1
 800f69c:	e7ee      	b.n	800f67c <__lshift+0x1c>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	f100 0114 	add.w	r1, r0, #20
 800f6a4:	f100 0210 	add.w	r2, r0, #16
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	4553      	cmp	r3, sl
 800f6ac:	db33      	blt.n	800f716 <__lshift+0xb6>
 800f6ae:	6920      	ldr	r0, [r4, #16]
 800f6b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6b4:	f104 0314 	add.w	r3, r4, #20
 800f6b8:	f019 091f 	ands.w	r9, r9, #31
 800f6bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6c4:	d02b      	beq.n	800f71e <__lshift+0xbe>
 800f6c6:	f1c9 0e20 	rsb	lr, r9, #32
 800f6ca:	468a      	mov	sl, r1
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	fa00 f009 	lsl.w	r0, r0, r9
 800f6d4:	4310      	orrs	r0, r2
 800f6d6:	f84a 0b04 	str.w	r0, [sl], #4
 800f6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6de:	459c      	cmp	ip, r3
 800f6e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6e4:	d8f3      	bhi.n	800f6ce <__lshift+0x6e>
 800f6e6:	ebac 0304 	sub.w	r3, ip, r4
 800f6ea:	3b15      	subs	r3, #21
 800f6ec:	f023 0303 	bic.w	r3, r3, #3
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	f104 0015 	add.w	r0, r4, #21
 800f6f6:	4584      	cmp	ip, r0
 800f6f8:	bf38      	it	cc
 800f6fa:	2304      	movcc	r3, #4
 800f6fc:	50ca      	str	r2, [r1, r3]
 800f6fe:	b10a      	cbz	r2, 800f704 <__lshift+0xa4>
 800f700:	f108 0602 	add.w	r6, r8, #2
 800f704:	3e01      	subs	r6, #1
 800f706:	4638      	mov	r0, r7
 800f708:	612e      	str	r6, [r5, #16]
 800f70a:	4621      	mov	r1, r4
 800f70c:	f7ff fdd8 	bl	800f2c0 <_Bfree>
 800f710:	4628      	mov	r0, r5
 800f712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f716:	f842 0f04 	str.w	r0, [r2, #4]!
 800f71a:	3301      	adds	r3, #1
 800f71c:	e7c5      	b.n	800f6aa <__lshift+0x4a>
 800f71e:	3904      	subs	r1, #4
 800f720:	f853 2b04 	ldr.w	r2, [r3], #4
 800f724:	f841 2f04 	str.w	r2, [r1, #4]!
 800f728:	459c      	cmp	ip, r3
 800f72a:	d8f9      	bhi.n	800f720 <__lshift+0xc0>
 800f72c:	e7ea      	b.n	800f704 <__lshift+0xa4>
 800f72e:	bf00      	nop
 800f730:	0809e720 	.word	0x0809e720
 800f734:	0809e731 	.word	0x0809e731

0800f738 <__mcmp>:
 800f738:	b530      	push	{r4, r5, lr}
 800f73a:	6902      	ldr	r2, [r0, #16]
 800f73c:	690c      	ldr	r4, [r1, #16]
 800f73e:	1b12      	subs	r2, r2, r4
 800f740:	d10e      	bne.n	800f760 <__mcmp+0x28>
 800f742:	f100 0314 	add.w	r3, r0, #20
 800f746:	3114      	adds	r1, #20
 800f748:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f74c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f750:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f754:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f758:	42a5      	cmp	r5, r4
 800f75a:	d003      	beq.n	800f764 <__mcmp+0x2c>
 800f75c:	d305      	bcc.n	800f76a <__mcmp+0x32>
 800f75e:	2201      	movs	r2, #1
 800f760:	4610      	mov	r0, r2
 800f762:	bd30      	pop	{r4, r5, pc}
 800f764:	4283      	cmp	r3, r0
 800f766:	d3f3      	bcc.n	800f750 <__mcmp+0x18>
 800f768:	e7fa      	b.n	800f760 <__mcmp+0x28>
 800f76a:	f04f 32ff 	mov.w	r2, #4294967295
 800f76e:	e7f7      	b.n	800f760 <__mcmp+0x28>

0800f770 <__mdiff>:
 800f770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f774:	460c      	mov	r4, r1
 800f776:	4606      	mov	r6, r0
 800f778:	4611      	mov	r1, r2
 800f77a:	4620      	mov	r0, r4
 800f77c:	4690      	mov	r8, r2
 800f77e:	f7ff ffdb 	bl	800f738 <__mcmp>
 800f782:	1e05      	subs	r5, r0, #0
 800f784:	d110      	bne.n	800f7a8 <__mdiff+0x38>
 800f786:	4629      	mov	r1, r5
 800f788:	4630      	mov	r0, r6
 800f78a:	f7ff fd59 	bl	800f240 <_Balloc>
 800f78e:	b930      	cbnz	r0, 800f79e <__mdiff+0x2e>
 800f790:	4b3a      	ldr	r3, [pc, #232]	; (800f87c <__mdiff+0x10c>)
 800f792:	4602      	mov	r2, r0
 800f794:	f240 2137 	movw	r1, #567	; 0x237
 800f798:	4839      	ldr	r0, [pc, #228]	; (800f880 <__mdiff+0x110>)
 800f79a:	f000 fb43 	bl	800fe24 <__assert_func>
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a8:	bfa4      	itt	ge
 800f7aa:	4643      	movge	r3, r8
 800f7ac:	46a0      	movge	r8, r4
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7b4:	bfa6      	itte	ge
 800f7b6:	461c      	movge	r4, r3
 800f7b8:	2500      	movge	r5, #0
 800f7ba:	2501      	movlt	r5, #1
 800f7bc:	f7ff fd40 	bl	800f240 <_Balloc>
 800f7c0:	b920      	cbnz	r0, 800f7cc <__mdiff+0x5c>
 800f7c2:	4b2e      	ldr	r3, [pc, #184]	; (800f87c <__mdiff+0x10c>)
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	f240 2145 	movw	r1, #581	; 0x245
 800f7ca:	e7e5      	b.n	800f798 <__mdiff+0x28>
 800f7cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7d0:	6926      	ldr	r6, [r4, #16]
 800f7d2:	60c5      	str	r5, [r0, #12]
 800f7d4:	f104 0914 	add.w	r9, r4, #20
 800f7d8:	f108 0514 	add.w	r5, r8, #20
 800f7dc:	f100 0e14 	add.w	lr, r0, #20
 800f7e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7e8:	f108 0210 	add.w	r2, r8, #16
 800f7ec:	46f2      	mov	sl, lr
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7f8:	fa11 f88b 	uxtah	r8, r1, fp
 800f7fc:	b299      	uxth	r1, r3
 800f7fe:	0c1b      	lsrs	r3, r3, #16
 800f800:	eba8 0801 	sub.w	r8, r8, r1
 800f804:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f808:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f80c:	fa1f f888 	uxth.w	r8, r8
 800f810:	1419      	asrs	r1, r3, #16
 800f812:	454e      	cmp	r6, r9
 800f814:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f818:	f84a 3b04 	str.w	r3, [sl], #4
 800f81c:	d8e8      	bhi.n	800f7f0 <__mdiff+0x80>
 800f81e:	1b33      	subs	r3, r6, r4
 800f820:	3b15      	subs	r3, #21
 800f822:	f023 0303 	bic.w	r3, r3, #3
 800f826:	3304      	adds	r3, #4
 800f828:	3415      	adds	r4, #21
 800f82a:	42a6      	cmp	r6, r4
 800f82c:	bf38      	it	cc
 800f82e:	2304      	movcc	r3, #4
 800f830:	441d      	add	r5, r3
 800f832:	4473      	add	r3, lr
 800f834:	469e      	mov	lr, r3
 800f836:	462e      	mov	r6, r5
 800f838:	4566      	cmp	r6, ip
 800f83a:	d30e      	bcc.n	800f85a <__mdiff+0xea>
 800f83c:	f10c 0203 	add.w	r2, ip, #3
 800f840:	1b52      	subs	r2, r2, r5
 800f842:	f022 0203 	bic.w	r2, r2, #3
 800f846:	3d03      	subs	r5, #3
 800f848:	45ac      	cmp	ip, r5
 800f84a:	bf38      	it	cc
 800f84c:	2200      	movcc	r2, #0
 800f84e:	4413      	add	r3, r2
 800f850:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f854:	b17a      	cbz	r2, 800f876 <__mdiff+0x106>
 800f856:	6107      	str	r7, [r0, #16]
 800f858:	e7a4      	b.n	800f7a4 <__mdiff+0x34>
 800f85a:	f856 8b04 	ldr.w	r8, [r6], #4
 800f85e:	fa11 f288 	uxtah	r2, r1, r8
 800f862:	1414      	asrs	r4, r2, #16
 800f864:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f868:	b292      	uxth	r2, r2
 800f86a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f86e:	f84e 2b04 	str.w	r2, [lr], #4
 800f872:	1421      	asrs	r1, r4, #16
 800f874:	e7e0      	b.n	800f838 <__mdiff+0xc8>
 800f876:	3f01      	subs	r7, #1
 800f878:	e7ea      	b.n	800f850 <__mdiff+0xe0>
 800f87a:	bf00      	nop
 800f87c:	0809e720 	.word	0x0809e720
 800f880:	0809e731 	.word	0x0809e731

0800f884 <__d2b>:
 800f884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f888:	460f      	mov	r7, r1
 800f88a:	2101      	movs	r1, #1
 800f88c:	ec59 8b10 	vmov	r8, r9, d0
 800f890:	4616      	mov	r6, r2
 800f892:	f7ff fcd5 	bl	800f240 <_Balloc>
 800f896:	4604      	mov	r4, r0
 800f898:	b930      	cbnz	r0, 800f8a8 <__d2b+0x24>
 800f89a:	4602      	mov	r2, r0
 800f89c:	4b24      	ldr	r3, [pc, #144]	; (800f930 <__d2b+0xac>)
 800f89e:	4825      	ldr	r0, [pc, #148]	; (800f934 <__d2b+0xb0>)
 800f8a0:	f240 310f 	movw	r1, #783	; 0x30f
 800f8a4:	f000 fabe 	bl	800fe24 <__assert_func>
 800f8a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f8ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8b0:	bb2d      	cbnz	r5, 800f8fe <__d2b+0x7a>
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	f1b8 0300 	subs.w	r3, r8, #0
 800f8b8:	d026      	beq.n	800f908 <__d2b+0x84>
 800f8ba:	4668      	mov	r0, sp
 800f8bc:	9300      	str	r3, [sp, #0]
 800f8be:	f7ff fd87 	bl	800f3d0 <__lo0bits>
 800f8c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f8c6:	b1e8      	cbz	r0, 800f904 <__d2b+0x80>
 800f8c8:	f1c0 0320 	rsb	r3, r0, #32
 800f8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d0:	430b      	orrs	r3, r1
 800f8d2:	40c2      	lsrs	r2, r0
 800f8d4:	6163      	str	r3, [r4, #20]
 800f8d6:	9201      	str	r2, [sp, #4]
 800f8d8:	9b01      	ldr	r3, [sp, #4]
 800f8da:	61a3      	str	r3, [r4, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bf14      	ite	ne
 800f8e0:	2202      	movne	r2, #2
 800f8e2:	2201      	moveq	r2, #1
 800f8e4:	6122      	str	r2, [r4, #16]
 800f8e6:	b1bd      	cbz	r5, 800f918 <__d2b+0x94>
 800f8e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8ec:	4405      	add	r5, r0
 800f8ee:	603d      	str	r5, [r7, #0]
 800f8f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8f4:	6030      	str	r0, [r6, #0]
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	b003      	add	sp, #12
 800f8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f902:	e7d6      	b.n	800f8b2 <__d2b+0x2e>
 800f904:	6161      	str	r1, [r4, #20]
 800f906:	e7e7      	b.n	800f8d8 <__d2b+0x54>
 800f908:	a801      	add	r0, sp, #4
 800f90a:	f7ff fd61 	bl	800f3d0 <__lo0bits>
 800f90e:	9b01      	ldr	r3, [sp, #4]
 800f910:	6163      	str	r3, [r4, #20]
 800f912:	3020      	adds	r0, #32
 800f914:	2201      	movs	r2, #1
 800f916:	e7e5      	b.n	800f8e4 <__d2b+0x60>
 800f918:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f91c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f920:	6038      	str	r0, [r7, #0]
 800f922:	6918      	ldr	r0, [r3, #16]
 800f924:	f7ff fd34 	bl	800f390 <__hi0bits>
 800f928:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f92c:	e7e2      	b.n	800f8f4 <__d2b+0x70>
 800f92e:	bf00      	nop
 800f930:	0809e720 	.word	0x0809e720
 800f934:	0809e731 	.word	0x0809e731

0800f938 <__sfputc_r>:
 800f938:	6893      	ldr	r3, [r2, #8]
 800f93a:	3b01      	subs	r3, #1
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	b410      	push	{r4}
 800f940:	6093      	str	r3, [r2, #8]
 800f942:	da08      	bge.n	800f956 <__sfputc_r+0x1e>
 800f944:	6994      	ldr	r4, [r2, #24]
 800f946:	42a3      	cmp	r3, r4
 800f948:	db01      	blt.n	800f94e <__sfputc_r+0x16>
 800f94a:	290a      	cmp	r1, #10
 800f94c:	d103      	bne.n	800f956 <__sfputc_r+0x1e>
 800f94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f952:	f7fe bd02 	b.w	800e35a <__swbuf_r>
 800f956:	6813      	ldr	r3, [r2, #0]
 800f958:	1c58      	adds	r0, r3, #1
 800f95a:	6010      	str	r0, [r2, #0]
 800f95c:	7019      	strb	r1, [r3, #0]
 800f95e:	4608      	mov	r0, r1
 800f960:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f964:	4770      	bx	lr

0800f966 <__sfputs_r>:
 800f966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f968:	4606      	mov	r6, r0
 800f96a:	460f      	mov	r7, r1
 800f96c:	4614      	mov	r4, r2
 800f96e:	18d5      	adds	r5, r2, r3
 800f970:	42ac      	cmp	r4, r5
 800f972:	d101      	bne.n	800f978 <__sfputs_r+0x12>
 800f974:	2000      	movs	r0, #0
 800f976:	e007      	b.n	800f988 <__sfputs_r+0x22>
 800f978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f97c:	463a      	mov	r2, r7
 800f97e:	4630      	mov	r0, r6
 800f980:	f7ff ffda 	bl	800f938 <__sfputc_r>
 800f984:	1c43      	adds	r3, r0, #1
 800f986:	d1f3      	bne.n	800f970 <__sfputs_r+0xa>
 800f988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f98c <_vfiprintf_r>:
 800f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	460d      	mov	r5, r1
 800f992:	b09d      	sub	sp, #116	; 0x74
 800f994:	4614      	mov	r4, r2
 800f996:	4698      	mov	r8, r3
 800f998:	4606      	mov	r6, r0
 800f99a:	b118      	cbz	r0, 800f9a4 <_vfiprintf_r+0x18>
 800f99c:	6a03      	ldr	r3, [r0, #32]
 800f99e:	b90b      	cbnz	r3, 800f9a4 <_vfiprintf_r+0x18>
 800f9a0:	f7fe fbf4 	bl	800e18c <__sinit>
 800f9a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9a6:	07d9      	lsls	r1, r3, #31
 800f9a8:	d405      	bmi.n	800f9b6 <_vfiprintf_r+0x2a>
 800f9aa:	89ab      	ldrh	r3, [r5, #12]
 800f9ac:	059a      	lsls	r2, r3, #22
 800f9ae:	d402      	bmi.n	800f9b6 <_vfiprintf_r+0x2a>
 800f9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9b2:	f7fe fdf4 	bl	800e59e <__retarget_lock_acquire_recursive>
 800f9b6:	89ab      	ldrh	r3, [r5, #12]
 800f9b8:	071b      	lsls	r3, r3, #28
 800f9ba:	d501      	bpl.n	800f9c0 <_vfiprintf_r+0x34>
 800f9bc:	692b      	ldr	r3, [r5, #16]
 800f9be:	b99b      	cbnz	r3, 800f9e8 <_vfiprintf_r+0x5c>
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f7fe fd06 	bl	800e3d4 <__swsetup_r>
 800f9c8:	b170      	cbz	r0, 800f9e8 <_vfiprintf_r+0x5c>
 800f9ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9cc:	07dc      	lsls	r4, r3, #31
 800f9ce:	d504      	bpl.n	800f9da <_vfiprintf_r+0x4e>
 800f9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d4:	b01d      	add	sp, #116	; 0x74
 800f9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9da:	89ab      	ldrh	r3, [r5, #12]
 800f9dc:	0598      	lsls	r0, r3, #22
 800f9de:	d4f7      	bmi.n	800f9d0 <_vfiprintf_r+0x44>
 800f9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9e2:	f7fe fddd 	bl	800e5a0 <__retarget_lock_release_recursive>
 800f9e6:	e7f3      	b.n	800f9d0 <_vfiprintf_r+0x44>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ec:	2320      	movs	r3, #32
 800f9ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9f6:	2330      	movs	r3, #48	; 0x30
 800f9f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fbac <_vfiprintf_r+0x220>
 800f9fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa00:	f04f 0901 	mov.w	r9, #1
 800fa04:	4623      	mov	r3, r4
 800fa06:	469a      	mov	sl, r3
 800fa08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa0c:	b10a      	cbz	r2, 800fa12 <_vfiprintf_r+0x86>
 800fa0e:	2a25      	cmp	r2, #37	; 0x25
 800fa10:	d1f9      	bne.n	800fa06 <_vfiprintf_r+0x7a>
 800fa12:	ebba 0b04 	subs.w	fp, sl, r4
 800fa16:	d00b      	beq.n	800fa30 <_vfiprintf_r+0xa4>
 800fa18:	465b      	mov	r3, fp
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	4629      	mov	r1, r5
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f7ff ffa1 	bl	800f966 <__sfputs_r>
 800fa24:	3001      	adds	r0, #1
 800fa26:	f000 80a9 	beq.w	800fb7c <_vfiprintf_r+0x1f0>
 800fa2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa2c:	445a      	add	r2, fp
 800fa2e:	9209      	str	r2, [sp, #36]	; 0x24
 800fa30:	f89a 3000 	ldrb.w	r3, [sl]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f000 80a1 	beq.w	800fb7c <_vfiprintf_r+0x1f0>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa44:	f10a 0a01 	add.w	sl, sl, #1
 800fa48:	9304      	str	r3, [sp, #16]
 800fa4a:	9307      	str	r3, [sp, #28]
 800fa4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa50:	931a      	str	r3, [sp, #104]	; 0x68
 800fa52:	4654      	mov	r4, sl
 800fa54:	2205      	movs	r2, #5
 800fa56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa5a:	4854      	ldr	r0, [pc, #336]	; (800fbac <_vfiprintf_r+0x220>)
 800fa5c:	f7f0 fbf0 	bl	8000240 <memchr>
 800fa60:	9a04      	ldr	r2, [sp, #16]
 800fa62:	b9d8      	cbnz	r0, 800fa9c <_vfiprintf_r+0x110>
 800fa64:	06d1      	lsls	r1, r2, #27
 800fa66:	bf44      	itt	mi
 800fa68:	2320      	movmi	r3, #32
 800fa6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa6e:	0713      	lsls	r3, r2, #28
 800fa70:	bf44      	itt	mi
 800fa72:	232b      	movmi	r3, #43	; 0x2b
 800fa74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa78:	f89a 3000 	ldrb.w	r3, [sl]
 800fa7c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa7e:	d015      	beq.n	800faac <_vfiprintf_r+0x120>
 800fa80:	9a07      	ldr	r2, [sp, #28]
 800fa82:	4654      	mov	r4, sl
 800fa84:	2000      	movs	r0, #0
 800fa86:	f04f 0c0a 	mov.w	ip, #10
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa90:	3b30      	subs	r3, #48	; 0x30
 800fa92:	2b09      	cmp	r3, #9
 800fa94:	d94d      	bls.n	800fb32 <_vfiprintf_r+0x1a6>
 800fa96:	b1b0      	cbz	r0, 800fac6 <_vfiprintf_r+0x13a>
 800fa98:	9207      	str	r2, [sp, #28]
 800fa9a:	e014      	b.n	800fac6 <_vfiprintf_r+0x13a>
 800fa9c:	eba0 0308 	sub.w	r3, r0, r8
 800faa0:	fa09 f303 	lsl.w	r3, r9, r3
 800faa4:	4313      	orrs	r3, r2
 800faa6:	9304      	str	r3, [sp, #16]
 800faa8:	46a2      	mov	sl, r4
 800faaa:	e7d2      	b.n	800fa52 <_vfiprintf_r+0xc6>
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	1d19      	adds	r1, r3, #4
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	9103      	str	r1, [sp, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	bfbb      	ittet	lt
 800fab8:	425b      	neglt	r3, r3
 800faba:	f042 0202 	orrlt.w	r2, r2, #2
 800fabe:	9307      	strge	r3, [sp, #28]
 800fac0:	9307      	strlt	r3, [sp, #28]
 800fac2:	bfb8      	it	lt
 800fac4:	9204      	strlt	r2, [sp, #16]
 800fac6:	7823      	ldrb	r3, [r4, #0]
 800fac8:	2b2e      	cmp	r3, #46	; 0x2e
 800faca:	d10c      	bne.n	800fae6 <_vfiprintf_r+0x15a>
 800facc:	7863      	ldrb	r3, [r4, #1]
 800face:	2b2a      	cmp	r3, #42	; 0x2a
 800fad0:	d134      	bne.n	800fb3c <_vfiprintf_r+0x1b0>
 800fad2:	9b03      	ldr	r3, [sp, #12]
 800fad4:	1d1a      	adds	r2, r3, #4
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	9203      	str	r2, [sp, #12]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	bfb8      	it	lt
 800fade:	f04f 33ff 	movlt.w	r3, #4294967295
 800fae2:	3402      	adds	r4, #2
 800fae4:	9305      	str	r3, [sp, #20]
 800fae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fbbc <_vfiprintf_r+0x230>
 800faea:	7821      	ldrb	r1, [r4, #0]
 800faec:	2203      	movs	r2, #3
 800faee:	4650      	mov	r0, sl
 800faf0:	f7f0 fba6 	bl	8000240 <memchr>
 800faf4:	b138      	cbz	r0, 800fb06 <_vfiprintf_r+0x17a>
 800faf6:	9b04      	ldr	r3, [sp, #16]
 800faf8:	eba0 000a 	sub.w	r0, r0, sl
 800fafc:	2240      	movs	r2, #64	; 0x40
 800fafe:	4082      	lsls	r2, r0
 800fb00:	4313      	orrs	r3, r2
 800fb02:	3401      	adds	r4, #1
 800fb04:	9304      	str	r3, [sp, #16]
 800fb06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb0a:	4829      	ldr	r0, [pc, #164]	; (800fbb0 <_vfiprintf_r+0x224>)
 800fb0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb10:	2206      	movs	r2, #6
 800fb12:	f7f0 fb95 	bl	8000240 <memchr>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d03f      	beq.n	800fb9a <_vfiprintf_r+0x20e>
 800fb1a:	4b26      	ldr	r3, [pc, #152]	; (800fbb4 <_vfiprintf_r+0x228>)
 800fb1c:	bb1b      	cbnz	r3, 800fb66 <_vfiprintf_r+0x1da>
 800fb1e:	9b03      	ldr	r3, [sp, #12]
 800fb20:	3307      	adds	r3, #7
 800fb22:	f023 0307 	bic.w	r3, r3, #7
 800fb26:	3308      	adds	r3, #8
 800fb28:	9303      	str	r3, [sp, #12]
 800fb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb2c:	443b      	add	r3, r7
 800fb2e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb30:	e768      	b.n	800fa04 <_vfiprintf_r+0x78>
 800fb32:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb36:	460c      	mov	r4, r1
 800fb38:	2001      	movs	r0, #1
 800fb3a:	e7a6      	b.n	800fa8a <_vfiprintf_r+0xfe>
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	3401      	adds	r4, #1
 800fb40:	9305      	str	r3, [sp, #20]
 800fb42:	4619      	mov	r1, r3
 800fb44:	f04f 0c0a 	mov.w	ip, #10
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb4e:	3a30      	subs	r2, #48	; 0x30
 800fb50:	2a09      	cmp	r2, #9
 800fb52:	d903      	bls.n	800fb5c <_vfiprintf_r+0x1d0>
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d0c6      	beq.n	800fae6 <_vfiprintf_r+0x15a>
 800fb58:	9105      	str	r1, [sp, #20]
 800fb5a:	e7c4      	b.n	800fae6 <_vfiprintf_r+0x15a>
 800fb5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb60:	4604      	mov	r4, r0
 800fb62:	2301      	movs	r3, #1
 800fb64:	e7f0      	b.n	800fb48 <_vfiprintf_r+0x1bc>
 800fb66:	ab03      	add	r3, sp, #12
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	462a      	mov	r2, r5
 800fb6c:	4b12      	ldr	r3, [pc, #72]	; (800fbb8 <_vfiprintf_r+0x22c>)
 800fb6e:	a904      	add	r1, sp, #16
 800fb70:	4630      	mov	r0, r6
 800fb72:	f7fd fed5 	bl	800d920 <_printf_float>
 800fb76:	4607      	mov	r7, r0
 800fb78:	1c78      	adds	r0, r7, #1
 800fb7a:	d1d6      	bne.n	800fb2a <_vfiprintf_r+0x19e>
 800fb7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb7e:	07d9      	lsls	r1, r3, #31
 800fb80:	d405      	bmi.n	800fb8e <_vfiprintf_r+0x202>
 800fb82:	89ab      	ldrh	r3, [r5, #12]
 800fb84:	059a      	lsls	r2, r3, #22
 800fb86:	d402      	bmi.n	800fb8e <_vfiprintf_r+0x202>
 800fb88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb8a:	f7fe fd09 	bl	800e5a0 <__retarget_lock_release_recursive>
 800fb8e:	89ab      	ldrh	r3, [r5, #12]
 800fb90:	065b      	lsls	r3, r3, #25
 800fb92:	f53f af1d 	bmi.w	800f9d0 <_vfiprintf_r+0x44>
 800fb96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb98:	e71c      	b.n	800f9d4 <_vfiprintf_r+0x48>
 800fb9a:	ab03      	add	r3, sp, #12
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	462a      	mov	r2, r5
 800fba0:	4b05      	ldr	r3, [pc, #20]	; (800fbb8 <_vfiprintf_r+0x22c>)
 800fba2:	a904      	add	r1, sp, #16
 800fba4:	4630      	mov	r0, r6
 800fba6:	f7fe f943 	bl	800de30 <_printf_i>
 800fbaa:	e7e4      	b.n	800fb76 <_vfiprintf_r+0x1ea>
 800fbac:	0809e88c 	.word	0x0809e88c
 800fbb0:	0809e896 	.word	0x0809e896
 800fbb4:	0800d921 	.word	0x0800d921
 800fbb8:	0800f967 	.word	0x0800f967
 800fbbc:	0809e892 	.word	0x0809e892

0800fbc0 <__sflush_r>:
 800fbc0:	898a      	ldrh	r2, [r1, #12]
 800fbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	0710      	lsls	r0, r2, #28
 800fbca:	460c      	mov	r4, r1
 800fbcc:	d458      	bmi.n	800fc80 <__sflush_r+0xc0>
 800fbce:	684b      	ldr	r3, [r1, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dc05      	bgt.n	800fbe0 <__sflush_r+0x20>
 800fbd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	dc02      	bgt.n	800fbe0 <__sflush_r+0x20>
 800fbda:	2000      	movs	r0, #0
 800fbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbe2:	2e00      	cmp	r6, #0
 800fbe4:	d0f9      	beq.n	800fbda <__sflush_r+0x1a>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbec:	682f      	ldr	r7, [r5, #0]
 800fbee:	6a21      	ldr	r1, [r4, #32]
 800fbf0:	602b      	str	r3, [r5, #0]
 800fbf2:	d032      	beq.n	800fc5a <__sflush_r+0x9a>
 800fbf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbf6:	89a3      	ldrh	r3, [r4, #12]
 800fbf8:	075a      	lsls	r2, r3, #29
 800fbfa:	d505      	bpl.n	800fc08 <__sflush_r+0x48>
 800fbfc:	6863      	ldr	r3, [r4, #4]
 800fbfe:	1ac0      	subs	r0, r0, r3
 800fc00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc02:	b10b      	cbz	r3, 800fc08 <__sflush_r+0x48>
 800fc04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc06:	1ac0      	subs	r0, r0, r3
 800fc08:	2300      	movs	r3, #0
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc0e:	6a21      	ldr	r1, [r4, #32]
 800fc10:	4628      	mov	r0, r5
 800fc12:	47b0      	blx	r6
 800fc14:	1c43      	adds	r3, r0, #1
 800fc16:	89a3      	ldrh	r3, [r4, #12]
 800fc18:	d106      	bne.n	800fc28 <__sflush_r+0x68>
 800fc1a:	6829      	ldr	r1, [r5, #0]
 800fc1c:	291d      	cmp	r1, #29
 800fc1e:	d82b      	bhi.n	800fc78 <__sflush_r+0xb8>
 800fc20:	4a29      	ldr	r2, [pc, #164]	; (800fcc8 <__sflush_r+0x108>)
 800fc22:	410a      	asrs	r2, r1
 800fc24:	07d6      	lsls	r6, r2, #31
 800fc26:	d427      	bmi.n	800fc78 <__sflush_r+0xb8>
 800fc28:	2200      	movs	r2, #0
 800fc2a:	6062      	str	r2, [r4, #4]
 800fc2c:	04d9      	lsls	r1, r3, #19
 800fc2e:	6922      	ldr	r2, [r4, #16]
 800fc30:	6022      	str	r2, [r4, #0]
 800fc32:	d504      	bpl.n	800fc3e <__sflush_r+0x7e>
 800fc34:	1c42      	adds	r2, r0, #1
 800fc36:	d101      	bne.n	800fc3c <__sflush_r+0x7c>
 800fc38:	682b      	ldr	r3, [r5, #0]
 800fc3a:	b903      	cbnz	r3, 800fc3e <__sflush_r+0x7e>
 800fc3c:	6560      	str	r0, [r4, #84]	; 0x54
 800fc3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc40:	602f      	str	r7, [r5, #0]
 800fc42:	2900      	cmp	r1, #0
 800fc44:	d0c9      	beq.n	800fbda <__sflush_r+0x1a>
 800fc46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc4a:	4299      	cmp	r1, r3
 800fc4c:	d002      	beq.n	800fc54 <__sflush_r+0x94>
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f7ff faaa 	bl	800f1a8 <_free_r>
 800fc54:	2000      	movs	r0, #0
 800fc56:	6360      	str	r0, [r4, #52]	; 0x34
 800fc58:	e7c0      	b.n	800fbdc <__sflush_r+0x1c>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	47b0      	blx	r6
 800fc60:	1c41      	adds	r1, r0, #1
 800fc62:	d1c8      	bne.n	800fbf6 <__sflush_r+0x36>
 800fc64:	682b      	ldr	r3, [r5, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d0c5      	beq.n	800fbf6 <__sflush_r+0x36>
 800fc6a:	2b1d      	cmp	r3, #29
 800fc6c:	d001      	beq.n	800fc72 <__sflush_r+0xb2>
 800fc6e:	2b16      	cmp	r3, #22
 800fc70:	d101      	bne.n	800fc76 <__sflush_r+0xb6>
 800fc72:	602f      	str	r7, [r5, #0]
 800fc74:	e7b1      	b.n	800fbda <__sflush_r+0x1a>
 800fc76:	89a3      	ldrh	r3, [r4, #12]
 800fc78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc7c:	81a3      	strh	r3, [r4, #12]
 800fc7e:	e7ad      	b.n	800fbdc <__sflush_r+0x1c>
 800fc80:	690f      	ldr	r7, [r1, #16]
 800fc82:	2f00      	cmp	r7, #0
 800fc84:	d0a9      	beq.n	800fbda <__sflush_r+0x1a>
 800fc86:	0793      	lsls	r3, r2, #30
 800fc88:	680e      	ldr	r6, [r1, #0]
 800fc8a:	bf08      	it	eq
 800fc8c:	694b      	ldreq	r3, [r1, #20]
 800fc8e:	600f      	str	r7, [r1, #0]
 800fc90:	bf18      	it	ne
 800fc92:	2300      	movne	r3, #0
 800fc94:	eba6 0807 	sub.w	r8, r6, r7
 800fc98:	608b      	str	r3, [r1, #8]
 800fc9a:	f1b8 0f00 	cmp.w	r8, #0
 800fc9e:	dd9c      	ble.n	800fbda <__sflush_r+0x1a>
 800fca0:	6a21      	ldr	r1, [r4, #32]
 800fca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fca4:	4643      	mov	r3, r8
 800fca6:	463a      	mov	r2, r7
 800fca8:	4628      	mov	r0, r5
 800fcaa:	47b0      	blx	r6
 800fcac:	2800      	cmp	r0, #0
 800fcae:	dc06      	bgt.n	800fcbe <__sflush_r+0xfe>
 800fcb0:	89a3      	ldrh	r3, [r4, #12]
 800fcb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb6:	81a3      	strh	r3, [r4, #12]
 800fcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcbc:	e78e      	b.n	800fbdc <__sflush_r+0x1c>
 800fcbe:	4407      	add	r7, r0
 800fcc0:	eba8 0800 	sub.w	r8, r8, r0
 800fcc4:	e7e9      	b.n	800fc9a <__sflush_r+0xda>
 800fcc6:	bf00      	nop
 800fcc8:	dfbffffe 	.word	0xdfbffffe

0800fccc <_fflush_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	690b      	ldr	r3, [r1, #16]
 800fcd0:	4605      	mov	r5, r0
 800fcd2:	460c      	mov	r4, r1
 800fcd4:	b913      	cbnz	r3, 800fcdc <_fflush_r+0x10>
 800fcd6:	2500      	movs	r5, #0
 800fcd8:	4628      	mov	r0, r5
 800fcda:	bd38      	pop	{r3, r4, r5, pc}
 800fcdc:	b118      	cbz	r0, 800fce6 <_fflush_r+0x1a>
 800fcde:	6a03      	ldr	r3, [r0, #32]
 800fce0:	b90b      	cbnz	r3, 800fce6 <_fflush_r+0x1a>
 800fce2:	f7fe fa53 	bl	800e18c <__sinit>
 800fce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d0f3      	beq.n	800fcd6 <_fflush_r+0xa>
 800fcee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcf0:	07d0      	lsls	r0, r2, #31
 800fcf2:	d404      	bmi.n	800fcfe <_fflush_r+0x32>
 800fcf4:	0599      	lsls	r1, r3, #22
 800fcf6:	d402      	bmi.n	800fcfe <_fflush_r+0x32>
 800fcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcfa:	f7fe fc50 	bl	800e59e <__retarget_lock_acquire_recursive>
 800fcfe:	4628      	mov	r0, r5
 800fd00:	4621      	mov	r1, r4
 800fd02:	f7ff ff5d 	bl	800fbc0 <__sflush_r>
 800fd06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd08:	07da      	lsls	r2, r3, #31
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	d4e4      	bmi.n	800fcd8 <_fflush_r+0xc>
 800fd0e:	89a3      	ldrh	r3, [r4, #12]
 800fd10:	059b      	lsls	r3, r3, #22
 800fd12:	d4e1      	bmi.n	800fcd8 <_fflush_r+0xc>
 800fd14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd16:	f7fe fc43 	bl	800e5a0 <__retarget_lock_release_recursive>
 800fd1a:	e7dd      	b.n	800fcd8 <_fflush_r+0xc>

0800fd1c <__swhatbuf_r>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	460c      	mov	r4, r1
 800fd20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd24:	2900      	cmp	r1, #0
 800fd26:	b096      	sub	sp, #88	; 0x58
 800fd28:	4615      	mov	r5, r2
 800fd2a:	461e      	mov	r6, r3
 800fd2c:	da0d      	bge.n	800fd4a <__swhatbuf_r+0x2e>
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fd34:	f04f 0100 	mov.w	r1, #0
 800fd38:	bf0c      	ite	eq
 800fd3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fd3e:	2340      	movne	r3, #64	; 0x40
 800fd40:	2000      	movs	r0, #0
 800fd42:	6031      	str	r1, [r6, #0]
 800fd44:	602b      	str	r3, [r5, #0]
 800fd46:	b016      	add	sp, #88	; 0x58
 800fd48:	bd70      	pop	{r4, r5, r6, pc}
 800fd4a:	466a      	mov	r2, sp
 800fd4c:	f000 f848 	bl	800fde0 <_fstat_r>
 800fd50:	2800      	cmp	r0, #0
 800fd52:	dbec      	blt.n	800fd2e <__swhatbuf_r+0x12>
 800fd54:	9901      	ldr	r1, [sp, #4]
 800fd56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fd5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fd5e:	4259      	negs	r1, r3
 800fd60:	4159      	adcs	r1, r3
 800fd62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd66:	e7eb      	b.n	800fd40 <__swhatbuf_r+0x24>

0800fd68 <__smakebuf_r>:
 800fd68:	898b      	ldrh	r3, [r1, #12]
 800fd6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd6c:	079d      	lsls	r5, r3, #30
 800fd6e:	4606      	mov	r6, r0
 800fd70:	460c      	mov	r4, r1
 800fd72:	d507      	bpl.n	800fd84 <__smakebuf_r+0x1c>
 800fd74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd78:	6023      	str	r3, [r4, #0]
 800fd7a:	6123      	str	r3, [r4, #16]
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	6163      	str	r3, [r4, #20]
 800fd80:	b002      	add	sp, #8
 800fd82:	bd70      	pop	{r4, r5, r6, pc}
 800fd84:	ab01      	add	r3, sp, #4
 800fd86:	466a      	mov	r2, sp
 800fd88:	f7ff ffc8 	bl	800fd1c <__swhatbuf_r>
 800fd8c:	9900      	ldr	r1, [sp, #0]
 800fd8e:	4605      	mov	r5, r0
 800fd90:	4630      	mov	r0, r6
 800fd92:	f7fd fca7 	bl	800d6e4 <_malloc_r>
 800fd96:	b948      	cbnz	r0, 800fdac <__smakebuf_r+0x44>
 800fd98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd9c:	059a      	lsls	r2, r3, #22
 800fd9e:	d4ef      	bmi.n	800fd80 <__smakebuf_r+0x18>
 800fda0:	f023 0303 	bic.w	r3, r3, #3
 800fda4:	f043 0302 	orr.w	r3, r3, #2
 800fda8:	81a3      	strh	r3, [r4, #12]
 800fdaa:	e7e3      	b.n	800fd74 <__smakebuf_r+0xc>
 800fdac:	89a3      	ldrh	r3, [r4, #12]
 800fdae:	6020      	str	r0, [r4, #0]
 800fdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	9b00      	ldr	r3, [sp, #0]
 800fdb8:	6163      	str	r3, [r4, #20]
 800fdba:	9b01      	ldr	r3, [sp, #4]
 800fdbc:	6120      	str	r0, [r4, #16]
 800fdbe:	b15b      	cbz	r3, 800fdd8 <__smakebuf_r+0x70>
 800fdc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f000 f81d 	bl	800fe04 <_isatty_r>
 800fdca:	b128      	cbz	r0, 800fdd8 <__smakebuf_r+0x70>
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	f023 0303 	bic.w	r3, r3, #3
 800fdd2:	f043 0301 	orr.w	r3, r3, #1
 800fdd6:	81a3      	strh	r3, [r4, #12]
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	431d      	orrs	r5, r3
 800fddc:	81a5      	strh	r5, [r4, #12]
 800fdde:	e7cf      	b.n	800fd80 <__smakebuf_r+0x18>

0800fde0 <_fstat_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d07      	ldr	r5, [pc, #28]	; (800fe00 <_fstat_r+0x20>)
 800fde4:	2300      	movs	r3, #0
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	4611      	mov	r1, r2
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	f000 fc87 	bl	8010700 <_fstat>
 800fdf2:	1c43      	adds	r3, r0, #1
 800fdf4:	d102      	bne.n	800fdfc <_fstat_r+0x1c>
 800fdf6:	682b      	ldr	r3, [r5, #0]
 800fdf8:	b103      	cbz	r3, 800fdfc <_fstat_r+0x1c>
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	bf00      	nop
 800fe00:	20016ff4 	.word	0x20016ff4

0800fe04 <_isatty_r>:
 800fe04:	b538      	push	{r3, r4, r5, lr}
 800fe06:	4d06      	ldr	r5, [pc, #24]	; (800fe20 <_isatty_r+0x1c>)
 800fe08:	2300      	movs	r3, #0
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	4608      	mov	r0, r1
 800fe0e:	602b      	str	r3, [r5, #0]
 800fe10:	f000 fc86 	bl	8010720 <_isatty>
 800fe14:	1c43      	adds	r3, r0, #1
 800fe16:	d102      	bne.n	800fe1e <_isatty_r+0x1a>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	b103      	cbz	r3, 800fe1e <_isatty_r+0x1a>
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	bd38      	pop	{r3, r4, r5, pc}
 800fe20:	20016ff4 	.word	0x20016ff4

0800fe24 <__assert_func>:
 800fe24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe26:	4614      	mov	r4, r2
 800fe28:	461a      	mov	r2, r3
 800fe2a:	4b09      	ldr	r3, [pc, #36]	; (800fe50 <__assert_func+0x2c>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4605      	mov	r5, r0
 800fe30:	68d8      	ldr	r0, [r3, #12]
 800fe32:	b14c      	cbz	r4, 800fe48 <__assert_func+0x24>
 800fe34:	4b07      	ldr	r3, [pc, #28]	; (800fe54 <__assert_func+0x30>)
 800fe36:	9100      	str	r1, [sp, #0]
 800fe38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe3c:	4906      	ldr	r1, [pc, #24]	; (800fe58 <__assert_func+0x34>)
 800fe3e:	462b      	mov	r3, r5
 800fe40:	f000 f844 	bl	800fecc <fiprintf>
 800fe44:	f000 f854 	bl	800fef0 <abort>
 800fe48:	4b04      	ldr	r3, [pc, #16]	; (800fe5c <__assert_func+0x38>)
 800fe4a:	461c      	mov	r4, r3
 800fe4c:	e7f3      	b.n	800fe36 <__assert_func+0x12>
 800fe4e:	bf00      	nop
 800fe50:	20006f8c 	.word	0x20006f8c
 800fe54:	0809e8a7 	.word	0x0809e8a7
 800fe58:	0809e8b4 	.word	0x0809e8b4
 800fe5c:	0809e8e2 	.word	0x0809e8e2

0800fe60 <_calloc_r>:
 800fe60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe62:	fba1 2402 	umull	r2, r4, r1, r2
 800fe66:	b94c      	cbnz	r4, 800fe7c <_calloc_r+0x1c>
 800fe68:	4611      	mov	r1, r2
 800fe6a:	9201      	str	r2, [sp, #4]
 800fe6c:	f7fd fc3a 	bl	800d6e4 <_malloc_r>
 800fe70:	9a01      	ldr	r2, [sp, #4]
 800fe72:	4605      	mov	r5, r0
 800fe74:	b930      	cbnz	r0, 800fe84 <_calloc_r+0x24>
 800fe76:	4628      	mov	r0, r5
 800fe78:	b003      	add	sp, #12
 800fe7a:	bd30      	pop	{r4, r5, pc}
 800fe7c:	220c      	movs	r2, #12
 800fe7e:	6002      	str	r2, [r0, #0]
 800fe80:	2500      	movs	r5, #0
 800fe82:	e7f8      	b.n	800fe76 <_calloc_r+0x16>
 800fe84:	4621      	mov	r1, r4
 800fe86:	f7fe fafd 	bl	800e484 <memset>
 800fe8a:	e7f4      	b.n	800fe76 <_calloc_r+0x16>

0800fe8c <__ascii_mbtowc>:
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	b901      	cbnz	r1, 800fe92 <__ascii_mbtowc+0x6>
 800fe90:	a901      	add	r1, sp, #4
 800fe92:	b142      	cbz	r2, 800fea6 <__ascii_mbtowc+0x1a>
 800fe94:	b14b      	cbz	r3, 800feaa <__ascii_mbtowc+0x1e>
 800fe96:	7813      	ldrb	r3, [r2, #0]
 800fe98:	600b      	str	r3, [r1, #0]
 800fe9a:	7812      	ldrb	r2, [r2, #0]
 800fe9c:	1e10      	subs	r0, r2, #0
 800fe9e:	bf18      	it	ne
 800fea0:	2001      	movne	r0, #1
 800fea2:	b002      	add	sp, #8
 800fea4:	4770      	bx	lr
 800fea6:	4610      	mov	r0, r2
 800fea8:	e7fb      	b.n	800fea2 <__ascii_mbtowc+0x16>
 800feaa:	f06f 0001 	mvn.w	r0, #1
 800feae:	e7f8      	b.n	800fea2 <__ascii_mbtowc+0x16>

0800feb0 <__ascii_wctomb>:
 800feb0:	b149      	cbz	r1, 800fec6 <__ascii_wctomb+0x16>
 800feb2:	2aff      	cmp	r2, #255	; 0xff
 800feb4:	bf85      	ittet	hi
 800feb6:	238a      	movhi	r3, #138	; 0x8a
 800feb8:	6003      	strhi	r3, [r0, #0]
 800feba:	700a      	strbls	r2, [r1, #0]
 800febc:	f04f 30ff 	movhi.w	r0, #4294967295
 800fec0:	bf98      	it	ls
 800fec2:	2001      	movls	r0, #1
 800fec4:	4770      	bx	lr
 800fec6:	4608      	mov	r0, r1
 800fec8:	4770      	bx	lr
	...

0800fecc <fiprintf>:
 800fecc:	b40e      	push	{r1, r2, r3}
 800fece:	b503      	push	{r0, r1, lr}
 800fed0:	4601      	mov	r1, r0
 800fed2:	ab03      	add	r3, sp, #12
 800fed4:	4805      	ldr	r0, [pc, #20]	; (800feec <fiprintf+0x20>)
 800fed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feda:	6800      	ldr	r0, [r0, #0]
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	f7ff fd55 	bl	800f98c <_vfiprintf_r>
 800fee2:	b002      	add	sp, #8
 800fee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fee8:	b003      	add	sp, #12
 800feea:	4770      	bx	lr
 800feec:	20006f8c 	.word	0x20006f8c

0800fef0 <abort>:
 800fef0:	b508      	push	{r3, lr}
 800fef2:	2006      	movs	r0, #6
 800fef4:	f000 f82c 	bl	800ff50 <raise>
 800fef8:	2001      	movs	r0, #1
 800fefa:	f000 fc39 	bl	8010770 <_exit>

0800fefe <_raise_r>:
 800fefe:	291f      	cmp	r1, #31
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4604      	mov	r4, r0
 800ff04:	460d      	mov	r5, r1
 800ff06:	d904      	bls.n	800ff12 <_raise_r+0x14>
 800ff08:	2316      	movs	r3, #22
 800ff0a:	6003      	str	r3, [r0, #0]
 800ff0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff10:	bd38      	pop	{r3, r4, r5, pc}
 800ff12:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ff14:	b112      	cbz	r2, 800ff1c <_raise_r+0x1e>
 800ff16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff1a:	b94b      	cbnz	r3, 800ff30 <_raise_r+0x32>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f000 f831 	bl	800ff84 <_getpid_r>
 800ff22:	462a      	mov	r2, r5
 800ff24:	4601      	mov	r1, r0
 800ff26:	4620      	mov	r0, r4
 800ff28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff2c:	f000 b818 	b.w	800ff60 <_kill_r>
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d00a      	beq.n	800ff4a <_raise_r+0x4c>
 800ff34:	1c59      	adds	r1, r3, #1
 800ff36:	d103      	bne.n	800ff40 <_raise_r+0x42>
 800ff38:	2316      	movs	r3, #22
 800ff3a:	6003      	str	r3, [r0, #0]
 800ff3c:	2001      	movs	r0, #1
 800ff3e:	e7e7      	b.n	800ff10 <_raise_r+0x12>
 800ff40:	2400      	movs	r4, #0
 800ff42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff46:	4628      	mov	r0, r5
 800ff48:	4798      	blx	r3
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	e7e0      	b.n	800ff10 <_raise_r+0x12>
	...

0800ff50 <raise>:
 800ff50:	4b02      	ldr	r3, [pc, #8]	; (800ff5c <raise+0xc>)
 800ff52:	4601      	mov	r1, r0
 800ff54:	6818      	ldr	r0, [r3, #0]
 800ff56:	f7ff bfd2 	b.w	800fefe <_raise_r>
 800ff5a:	bf00      	nop
 800ff5c:	20006f8c 	.word	0x20006f8c

0800ff60 <_kill_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4d07      	ldr	r5, [pc, #28]	; (800ff80 <_kill_r+0x20>)
 800ff64:	2300      	movs	r3, #0
 800ff66:	4604      	mov	r4, r0
 800ff68:	4608      	mov	r0, r1
 800ff6a:	4611      	mov	r1, r2
 800ff6c:	602b      	str	r3, [r5, #0]
 800ff6e:	f000 fbdf 	bl	8010730 <_kill>
 800ff72:	1c43      	adds	r3, r0, #1
 800ff74:	d102      	bne.n	800ff7c <_kill_r+0x1c>
 800ff76:	682b      	ldr	r3, [r5, #0]
 800ff78:	b103      	cbz	r3, 800ff7c <_kill_r+0x1c>
 800ff7a:	6023      	str	r3, [r4, #0]
 800ff7c:	bd38      	pop	{r3, r4, r5, pc}
 800ff7e:	bf00      	nop
 800ff80:	20016ff4 	.word	0x20016ff4

0800ff84 <_getpid_r>:
 800ff84:	f000 bbc4 	b.w	8010710 <_getpid>

0800ff88 <sqrt>:
 800ff88:	b508      	push	{r3, lr}
 800ff8a:	ed2d 8b04 	vpush	{d8-d9}
 800ff8e:	eeb0 8b40 	vmov.f64	d8, d0
 800ff92:	f000 fba9 	bl	80106e8 <__ieee754_sqrt>
 800ff96:	eeb4 8b48 	vcmp.f64	d8, d8
 800ff9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9e:	d60c      	bvs.n	800ffba <sqrt+0x32>
 800ffa0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800ffc0 <sqrt+0x38>
 800ffa4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ffa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffac:	d505      	bpl.n	800ffba <sqrt+0x32>
 800ffae:	f7fe facb 	bl	800e548 <__errno>
 800ffb2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ffb6:	2321      	movs	r3, #33	; 0x21
 800ffb8:	6003      	str	r3, [r0, #0]
 800ffba:	ecbd 8b04 	vpop	{d8-d9}
 800ffbe:	bd08      	pop	{r3, pc}
	...

0800ffc8 <with_errno>:
 800ffc8:	b513      	push	{r0, r1, r4, lr}
 800ffca:	4604      	mov	r4, r0
 800ffcc:	ed8d 0b00 	vstr	d0, [sp]
 800ffd0:	f7fe faba 	bl	800e548 <__errno>
 800ffd4:	ed9d 0b00 	vldr	d0, [sp]
 800ffd8:	6004      	str	r4, [r0, #0]
 800ffda:	b002      	add	sp, #8
 800ffdc:	bd10      	pop	{r4, pc}

0800ffde <xflow>:
 800ffde:	b082      	sub	sp, #8
 800ffe0:	b158      	cbz	r0, 800fffa <xflow+0x1c>
 800ffe2:	eeb1 7b40 	vneg.f64	d7, d0
 800ffe6:	ed8d 7b00 	vstr	d7, [sp]
 800ffea:	ed9d 7b00 	vldr	d7, [sp]
 800ffee:	2022      	movs	r0, #34	; 0x22
 800fff0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fff4:	b002      	add	sp, #8
 800fff6:	f7ff bfe7 	b.w	800ffc8 <with_errno>
 800fffa:	eeb0 7b40 	vmov.f64	d7, d0
 800fffe:	e7f2      	b.n	800ffe6 <xflow+0x8>

08010000 <__math_uflow>:
 8010000:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010008 <__math_uflow+0x8>
 8010004:	f7ff bfeb 	b.w	800ffde <xflow>
 8010008:	00000000 	.word	0x00000000
 801000c:	10000000 	.word	0x10000000

08010010 <__math_oflow>:
 8010010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010018 <__math_oflow+0x8>
 8010014:	f7ff bfe3 	b.w	800ffde <xflow>
 8010018:	00000000 	.word	0x00000000
 801001c:	70000000 	.word	0x70000000

08010020 <__math_divzero>:
 8010020:	b082      	sub	sp, #8
 8010022:	2800      	cmp	r0, #0
 8010024:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010028:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801002c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010030:	ed8d 7b00 	vstr	d7, [sp]
 8010034:	ed9d 0b00 	vldr	d0, [sp]
 8010038:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010048 <__math_divzero+0x28>
 801003c:	2022      	movs	r0, #34	; 0x22
 801003e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010042:	b002      	add	sp, #8
 8010044:	f7ff bfc0 	b.w	800ffc8 <with_errno>
	...

08010050 <__math_invalid>:
 8010050:	eeb0 7b40 	vmov.f64	d7, d0
 8010054:	eeb4 7b47 	vcmp.f64	d7, d7
 8010058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010060:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010064:	d602      	bvs.n	801006c <__math_invalid+0x1c>
 8010066:	2021      	movs	r0, #33	; 0x21
 8010068:	f7ff bfae 	b.w	800ffc8 <with_errno>
 801006c:	4770      	bx	lr

0801006e <__math_check_uflow>:
 801006e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010076:	d102      	bne.n	801007e <__math_check_uflow+0x10>
 8010078:	2022      	movs	r0, #34	; 0x22
 801007a:	f7ff bfa5 	b.w	800ffc8 <with_errno>
 801007e:	4770      	bx	lr

08010080 <__math_check_oflow>:
 8010080:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80100a0 <__math_check_oflow+0x20>
 8010084:	eeb0 7bc0 	vabs.f64	d7, d0
 8010088:	eeb4 7b46 	vcmp.f64	d7, d6
 801008c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010090:	dd02      	ble.n	8010098 <__math_check_oflow+0x18>
 8010092:	2022      	movs	r0, #34	; 0x22
 8010094:	f7ff bf98 	b.w	800ffc8 <with_errno>
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	f3af 8000 	nop.w
 80100a0:	ffffffff 	.word	0xffffffff
 80100a4:	7fefffff 	.word	0x7fefffff

080100a8 <checkint>:
 80100a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100ac:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80100b0:	429a      	cmp	r2, r3
 80100b2:	b570      	push	{r4, r5, r6, lr}
 80100b4:	dd2a      	ble.n	801010c <checkint+0x64>
 80100b6:	f240 4333 	movw	r3, #1075	; 0x433
 80100ba:	429a      	cmp	r2, r3
 80100bc:	dc24      	bgt.n	8010108 <checkint+0x60>
 80100be:	1a9b      	subs	r3, r3, r2
 80100c0:	f1a3 0620 	sub.w	r6, r3, #32
 80100c4:	f04f 32ff 	mov.w	r2, #4294967295
 80100c8:	fa02 f403 	lsl.w	r4, r2, r3
 80100cc:	fa02 f606 	lsl.w	r6, r2, r6
 80100d0:	f1c3 0520 	rsb	r5, r3, #32
 80100d4:	fa22 f505 	lsr.w	r5, r2, r5
 80100d8:	4334      	orrs	r4, r6
 80100da:	432c      	orrs	r4, r5
 80100dc:	409a      	lsls	r2, r3
 80100de:	ea20 0202 	bic.w	r2, r0, r2
 80100e2:	ea21 0404 	bic.w	r4, r1, r4
 80100e6:	4322      	orrs	r2, r4
 80100e8:	f1a3 0420 	sub.w	r4, r3, #32
 80100ec:	f1c3 0220 	rsb	r2, r3, #32
 80100f0:	d10c      	bne.n	801010c <checkint+0x64>
 80100f2:	40d8      	lsrs	r0, r3
 80100f4:	fa01 f302 	lsl.w	r3, r1, r2
 80100f8:	4318      	orrs	r0, r3
 80100fa:	40e1      	lsrs	r1, r4
 80100fc:	4308      	orrs	r0, r1
 80100fe:	f000 0001 	and.w	r0, r0, #1
 8010102:	f1d0 0002 	rsbs	r0, r0, #2
 8010106:	bd70      	pop	{r4, r5, r6, pc}
 8010108:	2002      	movs	r0, #2
 801010a:	e7fc      	b.n	8010106 <checkint+0x5e>
 801010c:	2000      	movs	r0, #0
 801010e:	e7fa      	b.n	8010106 <checkint+0x5e>

08010110 <pow>:
 8010110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	ee10 4a90 	vmov	r4, s1
 8010118:	ed2d 8b0a 	vpush	{d8-d12}
 801011c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8010120:	ee11 aa90 	vmov	sl, s3
 8010124:	f108 32ff 	add.w	r2, r8, #4294967295
 8010128:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801012c:	429a      	cmp	r2, r3
 801012e:	ee10 5a10 	vmov	r5, s0
 8010132:	ee11 0a10 	vmov	r0, s2
 8010136:	b087      	sub	sp, #28
 8010138:	46c4      	mov	ip, r8
 801013a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801013e:	d806      	bhi.n	801014e <pow+0x3e>
 8010140:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8010144:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010148:	2b7f      	cmp	r3, #127	; 0x7f
 801014a:	f240 8156 	bls.w	80103fa <pow+0x2ea>
 801014e:	1802      	adds	r2, r0, r0
 8010150:	eb4a 010a 	adc.w	r1, sl, sl
 8010154:	f06f 0b01 	mvn.w	fp, #1
 8010158:	1e57      	subs	r7, r2, #1
 801015a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801015e:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8010162:	45bb      	cmp	fp, r7
 8010164:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010168:	d242      	bcs.n	80101f0 <pow+0xe0>
 801016a:	ea52 0301 	orrs.w	r3, r2, r1
 801016e:	f04f 0300 	mov.w	r3, #0
 8010172:	d10c      	bne.n	801018e <pow+0x7e>
 8010174:	196d      	adds	r5, r5, r5
 8010176:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801017a:	4164      	adcs	r4, r4
 801017c:	42ab      	cmp	r3, r5
 801017e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010182:	41a3      	sbcs	r3, r4
 8010184:	f0c0 808f 	bcc.w	80102a6 <pow+0x196>
 8010188:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801018c:	e02b      	b.n	80101e6 <pow+0xd6>
 801018e:	4ed4      	ldr	r6, [pc, #848]	; (80104e0 <pow+0x3d0>)
 8010190:	42b4      	cmp	r4, r6
 8010192:	bf08      	it	eq
 8010194:	429d      	cmpeq	r5, r3
 8010196:	d109      	bne.n	80101ac <pow+0x9c>
 8010198:	1800      	adds	r0, r0, r0
 801019a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 801019e:	eb4a 0a0a 	adc.w	sl, sl, sl
 80101a2:	4283      	cmp	r3, r0
 80101a4:	4bcf      	ldr	r3, [pc, #828]	; (80104e4 <pow+0x3d4>)
 80101a6:	eb73 030a 	sbcs.w	r3, r3, sl
 80101aa:	e7eb      	b.n	8010184 <pow+0x74>
 80101ac:	196d      	adds	r5, r5, r5
 80101ae:	48ce      	ldr	r0, [pc, #824]	; (80104e8 <pow+0x3d8>)
 80101b0:	4164      	adcs	r4, r4
 80101b2:	42ab      	cmp	r3, r5
 80101b4:	eb70 0604 	sbcs.w	r6, r0, r4
 80101b8:	d375      	bcc.n	80102a6 <pow+0x196>
 80101ba:	4281      	cmp	r1, r0
 80101bc:	bf08      	it	eq
 80101be:	429a      	cmpeq	r2, r3
 80101c0:	d171      	bne.n	80102a6 <pow+0x196>
 80101c2:	4aca      	ldr	r2, [pc, #808]	; (80104ec <pow+0x3dc>)
 80101c4:	4294      	cmp	r4, r2
 80101c6:	bf08      	it	eq
 80101c8:	429d      	cmpeq	r5, r3
 80101ca:	d0dd      	beq.n	8010188 <pow+0x78>
 80101cc:	4294      	cmp	r4, r2
 80101ce:	ea6f 0a0a 	mvn.w	sl, sl
 80101d2:	bf34      	ite	cc
 80101d4:	2400      	movcc	r4, #0
 80101d6:	2401      	movcs	r4, #1
 80101d8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80101dc:	4554      	cmp	r4, sl
 80101de:	f040 81dc 	bne.w	801059a <pow+0x48a>
 80101e2:	ee21 0b01 	vmul.f64	d0, d1, d1
 80101e6:	b007      	add	sp, #28
 80101e8:	ecbd 8b0a 	vpop	{d8-d12}
 80101ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f0:	196f      	adds	r7, r5, r5
 80101f2:	eb44 0904 	adc.w	r9, r4, r4
 80101f6:	1e7a      	subs	r2, r7, #1
 80101f8:	f169 0300 	sbc.w	r3, r9, #0
 80101fc:	4593      	cmp	fp, r2
 80101fe:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010202:	d225      	bcs.n	8010250 <pow+0x140>
 8010204:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010208:	2c00      	cmp	r4, #0
 801020a:	da13      	bge.n	8010234 <pow+0x124>
 801020c:	4651      	mov	r1, sl
 801020e:	f7ff ff4b 	bl	80100a8 <checkint>
 8010212:	2801      	cmp	r0, #1
 8010214:	d10e      	bne.n	8010234 <pow+0x124>
 8010216:	eeb1 0b40 	vneg.f64	d0, d0
 801021a:	ea57 0909 	orrs.w	r9, r7, r9
 801021e:	d10b      	bne.n	8010238 <pow+0x128>
 8010220:	f1ba 0f00 	cmp.w	sl, #0
 8010224:	dadf      	bge.n	80101e6 <pow+0xd6>
 8010226:	b007      	add	sp, #28
 8010228:	ecbd 8b0a 	vpop	{d8-d12}
 801022c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010230:	f7ff bef6 	b.w	8010020 <__math_divzero>
 8010234:	2000      	movs	r0, #0
 8010236:	e7f0      	b.n	801021a <pow+0x10a>
 8010238:	f1ba 0f00 	cmp.w	sl, #0
 801023c:	dad3      	bge.n	80101e6 <pow+0xd6>
 801023e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010242:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010246:	ed8d 7b00 	vstr	d7, [sp]
 801024a:	ed9d 0b00 	vldr	d0, [sp]
 801024e:	e7ca      	b.n	80101e6 <pow+0xd6>
 8010250:	2c00      	cmp	r4, #0
 8010252:	da2b      	bge.n	80102ac <pow+0x19c>
 8010254:	4651      	mov	r1, sl
 8010256:	f7ff ff27 	bl	80100a8 <checkint>
 801025a:	b930      	cbnz	r0, 801026a <pow+0x15a>
 801025c:	b007      	add	sp, #28
 801025e:	ecbd 8b0a 	vpop	{d8-d12}
 8010262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010266:	f7ff bef3 	b.w	8010050 <__math_invalid>
 801026a:	1e41      	subs	r1, r0, #1
 801026c:	4248      	negs	r0, r1
 801026e:	4148      	adcs	r0, r1
 8010270:	0480      	lsls	r0, r0, #18
 8010272:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010276:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801027a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801027e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010282:	2b7f      	cmp	r3, #127	; 0x7f
 8010284:	d92d      	bls.n	80102e2 <pow+0x1d2>
 8010286:	4b96      	ldr	r3, [pc, #600]	; (80104e0 <pow+0x3d0>)
 8010288:	2000      	movs	r0, #0
 801028a:	429c      	cmp	r4, r3
 801028c:	bf08      	it	eq
 801028e:	4285      	cmpeq	r5, r0
 8010290:	f43f af7a 	beq.w	8010188 <pow+0x78>
 8010294:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010298:	428a      	cmp	r2, r1
 801029a:	d80c      	bhi.n	80102b6 <pow+0x1a6>
 801029c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80102a0:	42a8      	cmp	r0, r5
 80102a2:	41a3      	sbcs	r3, r4
 80102a4:	d204      	bcs.n	80102b0 <pow+0x1a0>
 80102a6:	ee31 0b00 	vadd.f64	d0, d1, d0
 80102aa:	e79c      	b.n	80101e6 <pow+0xd6>
 80102ac:	2000      	movs	r0, #0
 80102ae:	e7e4      	b.n	801027a <pow+0x16a>
 80102b0:	ee30 0b41 	vsub.f64	d0, d0, d1
 80102b4:	e797      	b.n	80101e6 <pow+0xd6>
 80102b6:	2d01      	cmp	r5, #1
 80102b8:	eb74 0303 	sbcs.w	r3, r4, r3
 80102bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80102c0:	bf34      	ite	cc
 80102c2:	2301      	movcc	r3, #1
 80102c4:	2300      	movcs	r3, #0
 80102c6:	4296      	cmp	r6, r2
 80102c8:	bf8c      	ite	hi
 80102ca:	2600      	movhi	r6, #0
 80102cc:	2601      	movls	r6, #1
 80102ce:	42b3      	cmp	r3, r6
 80102d0:	f000 809b 	beq.w	801040a <pow+0x2fa>
 80102d4:	b007      	add	sp, #28
 80102d6:	ecbd 8b0a 	vpop	{d8-d12}
 80102da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102de:	f7ff be97 	b.w	8010010 <__math_oflow>
 80102e2:	f1bc 0f00 	cmp.w	ip, #0
 80102e6:	d10b      	bne.n	8010300 <pow+0x1f0>
 80102e8:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80104d0 <pow+0x3c0>
 80102ec:	ee20 7b07 	vmul.f64	d7, d0, d7
 80102f0:	ec53 2b17 	vmov	r2, r3, d7
 80102f4:	ee17 5a10 	vmov	r5, s14
 80102f8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80102fc:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010300:	4b7b      	ldr	r3, [pc, #492]	; (80104f0 <pow+0x3e0>)
 8010302:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010306:	4423      	add	r3, r4
 8010308:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801030c:	1519      	asrs	r1, r3, #20
 801030e:	0d1b      	lsrs	r3, r3, #20
 8010310:	051b      	lsls	r3, r3, #20
 8010312:	1ae7      	subs	r7, r4, r3
 8010314:	4b77      	ldr	r3, [pc, #476]	; (80104f4 <pow+0x3e4>)
 8010316:	ee03 1a10 	vmov	s6, r1
 801031a:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801031e:	1e2e      	subs	r6, r5, #0
 8010320:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010324:	ec47 6b15 	vmov	d5, r6, r7
 8010328:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801032c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010330:	ed93 7b00 	vldr	d7, [r3]
 8010334:	ed93 5b02 	vldr	d5, [r3, #8]
 8010338:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801033c:	eea3 2b07 	vfma.f64	d2, d3, d7
 8010340:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010344:	ee36 4b02 	vadd.f64	d4, d6, d2
 8010348:	ee32 2b44 	vsub.f64	d2, d2, d4
 801034c:	eea3 7b05 	vfma.f64	d7, d3, d5
 8010350:	ed93 5b04 	vldr	d5, [r3, #16]
 8010354:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010358:	ee37 7b02 	vadd.f64	d7, d7, d2
 801035c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010360:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010364:	ee34 8b00 	vadd.f64	d8, d4, d0
 8010368:	eeb0 9b40 	vmov.f64	d9, d0
 801036c:	ee34 4b48 	vsub.f64	d4, d4, d8
 8010370:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010374:	ee34 ab00 	vadd.f64	d10, d4, d0
 8010378:	ed93 5b06 	vldr	d5, [r3, #24]
 801037c:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010380:	ee37 7b09 	vadd.f64	d7, d7, d9
 8010384:	ed93 4b08 	vldr	d4, [r3, #32]
 8010388:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801038c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010390:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010394:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010398:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801039c:	eea6 4b03 	vfma.f64	d4, d6, d3
 80103a0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80103a4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80103a8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80103ac:	eea0 5b04 	vfma.f64	d5, d0, d4
 80103b0:	eeab 7b05 	vfma.f64	d7, d11, d5
 80103b4:	ee38 4b07 	vadd.f64	d4, d8, d7
 80103b8:	ee21 6b04 	vmul.f64	d6, d1, d4
 80103bc:	ee16 3a90 	vmov	r3, s13
 80103c0:	eeb0 5b46 	vmov.f64	d5, d6
 80103c4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80103c8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80103cc:	18b2      	adds	r2, r6, r2
 80103ce:	2a3e      	cmp	r2, #62	; 0x3e
 80103d0:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80103d4:	ee38 8b44 	vsub.f64	d8, d8, d4
 80103d8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80103dc:	eea1 5b08 	vfma.f64	d5, d1, d8
 80103e0:	d91b      	bls.n	801041a <pow+0x30a>
 80103e2:	2a00      	cmp	r2, #0
 80103e4:	da0b      	bge.n	80103fe <pow+0x2ee>
 80103e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80103ea:	ee36 0b00 	vadd.f64	d0, d6, d0
 80103ee:	2800      	cmp	r0, #0
 80103f0:	f43f aef9 	beq.w	80101e6 <pow+0xd6>
 80103f4:	eeb1 0b40 	vneg.f64	d0, d0
 80103f8:	e6f5      	b.n	80101e6 <pow+0xd6>
 80103fa:	2000      	movs	r0, #0
 80103fc:	e780      	b.n	8010300 <pow+0x1f0>
 80103fe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010402:	d909      	bls.n	8010418 <pow+0x308>
 8010404:	2b00      	cmp	r3, #0
 8010406:	f6bf af65 	bge.w	80102d4 <pow+0x1c4>
 801040a:	b007      	add	sp, #28
 801040c:	ecbd 8b0a 	vpop	{d8-d12}
 8010410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	f7ff bdf4 	b.w	8010000 <__math_uflow>
 8010418:	2600      	movs	r6, #0
 801041a:	4937      	ldr	r1, [pc, #220]	; (80104f8 <pow+0x3e8>)
 801041c:	ed91 4b02 	vldr	d4, [r1, #8]
 8010420:	ed91 3b00 	vldr	d3, [r1]
 8010424:	eeb0 7b44 	vmov.f64	d7, d4
 8010428:	eea6 7b03 	vfma.f64	d7, d6, d3
 801042c:	ee17 5a10 	vmov	r5, s14
 8010430:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010434:	ed91 4b04 	vldr	d4, [r1, #16]
 8010438:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801043c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010440:	ed91 4b06 	vldr	d4, [r1, #24]
 8010444:	18dc      	adds	r4, r3, r3
 8010446:	f104 030f 	add.w	r3, r4, #15
 801044a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801044e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010452:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8010456:	ee35 5b06 	vadd.f64	d5, d5, d6
 801045a:	ee25 6b05 	vmul.f64	d6, d5, d5
 801045e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010462:	ed91 4b08 	vldr	d4, [r1, #32]
 8010466:	ee35 7b07 	vadd.f64	d7, d5, d7
 801046a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801046e:	eea5 4b03 	vfma.f64	d4, d5, d3
 8010472:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8010476:	eea6 7b04 	vfma.f64	d7, d6, d4
 801047a:	ee26 6b06 	vmul.f64	d6, d6, d6
 801047e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8010482:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010486:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801048a:	eea5 4b03 	vfma.f64	d4, d5, d3
 801048e:	1940      	adds	r0, r0, r5
 8010490:	2700      	movs	r7, #0
 8010492:	eb17 020c 	adds.w	r2, r7, ip
 8010496:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801049a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801049e:	2e00      	cmp	r6, #0
 80104a0:	d176      	bne.n	8010590 <pow+0x480>
 80104a2:	42bd      	cmp	r5, r7
 80104a4:	db2a      	blt.n	80104fc <pow+0x3ec>
 80104a6:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80104aa:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80104ae:	4610      	mov	r0, r2
 80104b0:	ec41 0b10 	vmov	d0, r0, r1
 80104b4:	eea7 0b00 	vfma.f64	d0, d7, d0
 80104b8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80104d8 <pow+0x3c8>
 80104bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80104c0:	b007      	add	sp, #28
 80104c2:	ecbd 8b0a 	vpop	{d8-d12}
 80104c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ca:	f7ff bdd9 	b.w	8010080 <__math_check_oflow>
 80104ce:	bf00      	nop
 80104d0:	00000000 	.word	0x00000000
 80104d4:	43300000 	.word	0x43300000
 80104d8:	00000000 	.word	0x00000000
 80104dc:	7f000000 	.word	0x7f000000
 80104e0:	3ff00000 	.word	0x3ff00000
 80104e4:	fff00000 	.word	0xfff00000
 80104e8:	ffe00000 	.word	0xffe00000
 80104ec:	7fe00000 	.word	0x7fe00000
 80104f0:	c0196aab 	.word	0xc0196aab
 80104f4:	0809e9e8 	.word	0x0809e9e8
 80104f8:	0809fb78 	.word	0x0809fb78
 80104fc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010500:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010504:	4610      	mov	r0, r2
 8010506:	ec41 0b15 	vmov	d5, r0, r1
 801050a:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 801050e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010512:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010516:	eeb0 4bc7 	vabs.f64	d4, d7
 801051a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801051e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010522:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80105a0 <pow+0x490>
 8010526:	d52a      	bpl.n	801057e <pow+0x46e>
 8010528:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801052c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010534:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010538:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 801053c:	bf58      	it	pl
 801053e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8010542:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010546:	ee34 6b43 	vsub.f64	d6, d4, d3
 801054a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801054e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8010552:	ee36 6b03 	vadd.f64	d6, d6, d3
 8010556:	ee36 7b44 	vsub.f64	d7, d6, d4
 801055a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801055e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010562:	d104      	bne.n	801056e <pow+0x45e>
 8010564:	4632      	mov	r2, r6
 8010566:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801056a:	ec43 2b17 	vmov	d7, r2, r3
 801056e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010572:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010576:	ee26 6b00 	vmul.f64	d6, d6, d0
 801057a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801057e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010582:	b007      	add	sp, #28
 8010584:	ecbd 8b0a 	vpop	{d8-d12}
 8010588:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058c:	f7ff bd6f 	b.w	801006e <__math_check_uflow>
 8010590:	ec43 2b10 	vmov	d0, r2, r3
 8010594:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010598:	e625      	b.n	80101e6 <pow+0xd6>
 801059a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80105a8 <pow+0x498>
 801059e:	e622      	b.n	80101e6 <pow+0xd6>
 80105a0:	00000000 	.word	0x00000000
 80105a4:	00100000 	.word	0x00100000
	...

080105b0 <expf>:
 80105b0:	ee10 2a10 	vmov	r2, s0
 80105b4:	f240 412a 	movw	r1, #1066	; 0x42a
 80105b8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80105bc:	428b      	cmp	r3, r1
 80105be:	b430      	push	{r4, r5}
 80105c0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80105c4:	d92a      	bls.n	801061c <expf+0x6c>
 80105c6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80105ca:	d058      	beq.n	801067e <expf+0xce>
 80105cc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80105d0:	d303      	bcc.n	80105da <expf+0x2a>
 80105d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80105d6:	bc30      	pop	{r4, r5}
 80105d8:	4770      	bx	lr
 80105da:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8010684 <expf+0xd4>
 80105de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80105e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e6:	dd03      	ble.n	80105f0 <expf+0x40>
 80105e8:	bc30      	pop	{r4, r5}
 80105ea:	2000      	movs	r0, #0
 80105ec:	f000 b876 	b.w	80106dc <__math_oflowf>
 80105f0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010688 <expf+0xd8>
 80105f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80105f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fc:	d503      	bpl.n	8010606 <expf+0x56>
 80105fe:	bc30      	pop	{r4, r5}
 8010600:	2000      	movs	r0, #0
 8010602:	f000 b85f 	b.w	80106c4 <__math_uflowf>
 8010606:	eddf 7a21 	vldr	s15, [pc, #132]	; 801068c <expf+0xdc>
 801060a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010612:	d503      	bpl.n	801061c <expf+0x6c>
 8010614:	bc30      	pop	{r4, r5}
 8010616:	2000      	movs	r0, #0
 8010618:	f000 b85a 	b.w	80106d0 <__math_may_uflowf>
 801061c:	4b1c      	ldr	r3, [pc, #112]	; (8010690 <expf+0xe0>)
 801061e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010622:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8010626:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801062a:	eeb0 7b44 	vmov.f64	d7, d4
 801062e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010632:	ee17 0a10 	vmov	r0, s14
 8010636:	ee37 7b44 	vsub.f64	d7, d7, d4
 801063a:	f000 021f 	and.w	r2, r0, #31
 801063e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010642:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8010646:	ee27 4b07 	vmul.f64	d4, d7, d7
 801064a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801064e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8010652:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010656:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801065a:	684d      	ldr	r5, [r1, #4]
 801065c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8010660:	2100      	movs	r1, #0
 8010662:	190a      	adds	r2, r1, r4
 8010664:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8010668:	eea5 0b07 	vfma.f64	d0, d5, d7
 801066c:	ec43 2b17 	vmov	d7, r2, r3
 8010670:	eea6 0b04 	vfma.f64	d0, d6, d4
 8010674:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010678:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801067c:	e7ab      	b.n	80105d6 <expf+0x26>
 801067e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8010694 <expf+0xe4>
 8010682:	e7a8      	b.n	80105d6 <expf+0x26>
 8010684:	42b17217 	.word	0x42b17217
 8010688:	c2cff1b4 	.word	0xc2cff1b4
 801068c:	c2ce8ecf 	.word	0xc2ce8ecf
 8010690:	0809fa30 	.word	0x0809fa30
 8010694:	00000000 	.word	0x00000000

08010698 <with_errnof>:
 8010698:	b513      	push	{r0, r1, r4, lr}
 801069a:	4604      	mov	r4, r0
 801069c:	ed8d 0a01 	vstr	s0, [sp, #4]
 80106a0:	f7fd ff52 	bl	800e548 <__errno>
 80106a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80106a8:	6004      	str	r4, [r0, #0]
 80106aa:	b002      	add	sp, #8
 80106ac:	bd10      	pop	{r4, pc}

080106ae <xflowf>:
 80106ae:	b130      	cbz	r0, 80106be <xflowf+0x10>
 80106b0:	eef1 7a40 	vneg.f32	s15, s0
 80106b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80106b8:	2022      	movs	r0, #34	; 0x22
 80106ba:	f7ff bfed 	b.w	8010698 <with_errnof>
 80106be:	eef0 7a40 	vmov.f32	s15, s0
 80106c2:	e7f7      	b.n	80106b4 <xflowf+0x6>

080106c4 <__math_uflowf>:
 80106c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80106cc <__math_uflowf+0x8>
 80106c8:	f7ff bff1 	b.w	80106ae <xflowf>
 80106cc:	10000000 	.word	0x10000000

080106d0 <__math_may_uflowf>:
 80106d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80106d8 <__math_may_uflowf+0x8>
 80106d4:	f7ff bfeb 	b.w	80106ae <xflowf>
 80106d8:	1a200000 	.word	0x1a200000

080106dc <__math_oflowf>:
 80106dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80106e4 <__math_oflowf+0x8>
 80106e0:	f7ff bfe5 	b.w	80106ae <xflowf>
 80106e4:	70000000 	.word	0x70000000

080106e8 <__ieee754_sqrt>:
 80106e8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80106ec:	4770      	bx	lr
	...

080106f0 <_close>:
 80106f0:	4b02      	ldr	r3, [pc, #8]	; (80106fc <_close+0xc>)
 80106f2:	2258      	movs	r2, #88	; 0x58
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	f04f 30ff 	mov.w	r0, #4294967295
 80106fa:	4770      	bx	lr
 80106fc:	20016ff4 	.word	0x20016ff4

08010700 <_fstat>:
 8010700:	4b02      	ldr	r3, [pc, #8]	; (801070c <_fstat+0xc>)
 8010702:	2258      	movs	r2, #88	; 0x58
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	f04f 30ff 	mov.w	r0, #4294967295
 801070a:	4770      	bx	lr
 801070c:	20016ff4 	.word	0x20016ff4

08010710 <_getpid>:
 8010710:	4b02      	ldr	r3, [pc, #8]	; (801071c <_getpid+0xc>)
 8010712:	2258      	movs	r2, #88	; 0x58
 8010714:	601a      	str	r2, [r3, #0]
 8010716:	f04f 30ff 	mov.w	r0, #4294967295
 801071a:	4770      	bx	lr
 801071c:	20016ff4 	.word	0x20016ff4

08010720 <_isatty>:
 8010720:	4b02      	ldr	r3, [pc, #8]	; (801072c <_isatty+0xc>)
 8010722:	2258      	movs	r2, #88	; 0x58
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	2000      	movs	r0, #0
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20016ff4 	.word	0x20016ff4

08010730 <_kill>:
 8010730:	4b02      	ldr	r3, [pc, #8]	; (801073c <_kill+0xc>)
 8010732:	2258      	movs	r2, #88	; 0x58
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	f04f 30ff 	mov.w	r0, #4294967295
 801073a:	4770      	bx	lr
 801073c:	20016ff4 	.word	0x20016ff4

08010740 <_lseek>:
 8010740:	4b02      	ldr	r3, [pc, #8]	; (801074c <_lseek+0xc>)
 8010742:	2258      	movs	r2, #88	; 0x58
 8010744:	601a      	str	r2, [r3, #0]
 8010746:	f04f 30ff 	mov.w	r0, #4294967295
 801074a:	4770      	bx	lr
 801074c:	20016ff4 	.word	0x20016ff4

08010750 <_read>:
 8010750:	4b02      	ldr	r3, [pc, #8]	; (801075c <_read+0xc>)
 8010752:	2258      	movs	r2, #88	; 0x58
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	f04f 30ff 	mov.w	r0, #4294967295
 801075a:	4770      	bx	lr
 801075c:	20016ff4 	.word	0x20016ff4

08010760 <_write>:
 8010760:	4b02      	ldr	r3, [pc, #8]	; (801076c <_write+0xc>)
 8010762:	2258      	movs	r2, #88	; 0x58
 8010764:	601a      	str	r2, [r3, #0]
 8010766:	f04f 30ff 	mov.w	r0, #4294967295
 801076a:	4770      	bx	lr
 801076c:	20016ff4 	.word	0x20016ff4

08010770 <_exit>:
 8010770:	e7fe      	b.n	8010770 <_exit>
	...

08010774 <_init>:
 8010774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010776:	bf00      	nop
 8010778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801077a:	bc08      	pop	{r3}
 801077c:	469e      	mov	lr, r3
 801077e:	4770      	bx	lr

08010780 <_fini>:
 8010780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010782:	bf00      	nop
 8010784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010786:	bc08      	pop	{r3}
 8010788:	469e      	mov	lr, r3
 801078a:	4770      	bx	lr
