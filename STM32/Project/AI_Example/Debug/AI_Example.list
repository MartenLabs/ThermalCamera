
AI_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08006e20  08006e20  00016e20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800749c  0800749c  000206f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a4  080074a4  000206f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f4  20000000  080074ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000700  08007ba0  00020700  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20000a54  08007ba0  00020a54  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000206f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00020722  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ccd3  00000000  00000000  000207b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b0  00000000  00000000  0002d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002f938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d1  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cc8  00000000  00000000  00030939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eae2  00000000  00000000  00059601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe05e  00000000  00000000  000680e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a84  00000000  00000000  00166144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00168bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000700 	.word	0x20000700
 800021c:	00000000 	.word	0x00000000
 8000220:	08006e08 	.word	0x08006e08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000704 	.word	0x20000704
 800023c:	08006e08 	.word	0x08006e08

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f000 fca1 	bl	8000f4c <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 fa04 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000071c 	.word	0x2000071c
 800061c:	40023000 	.word	0x40023000

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40023800 	.word	0x40023800

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_GPIO_Init+0x44>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <MX_GPIO_Init+0x44>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_GPIO_Init+0x44>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x44>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x44>)
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x44>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b2:	f3bf 8f6f 	isb	sy
}
 80006b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <SCB_EnableICache+0x48>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c6:	f3bf 8f6f 	isb	sy
}
 80006ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <SCB_EnableICache+0x48>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <SCB_EnableICache+0x48>)
 80006d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d8:	f3bf 8f4f 	dsb	sy
}
 80006dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006de:	f3bf 8f6f 	isb	sy
}
 80006e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SCB_EnableDCache+0x84>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000702:	f3bf 8f4f 	dsb	sy
}
 8000706:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <SCB_EnableDCache+0x84>)
 800070a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800070e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	0b5b      	lsrs	r3, r3, #13
 8000714:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000718:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	08db      	lsrs	r3, r3, #3
 800071e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000722:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	015a      	lsls	r2, r3, #5
 8000728:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800072c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000732:	4911      	ldr	r1, [pc, #68]	; (8000778 <SCB_EnableDCache+0x84>)
 8000734:	4313      	orrs	r3, r2
 8000736:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1e5a      	subs	r2, r3, #1
 800073e:	60ba      	str	r2, [r7, #8]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1ef      	bne.n	8000724 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	60fa      	str	r2, [r7, #12]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1e5      	bne.n	800071a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800074e:	f3bf 8f4f 	dsb	sy
}
 8000752:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <SCB_EnableDCache+0x84>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <SCB_EnableDCache+0x84>)
 800075a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000760:	f3bf 8f4f 	dsb	sy
}
 8000764:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000766:	f3bf 8f6f 	isb	sy
}
 800076a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <ai_log_err>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
static void ai_log_err(const ai_error err, const char *fct)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d009      	beq.n	80007a0 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800078c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800078e:	461a      	mov	r2, r3
        err.type, err.code);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8000796:	6839      	ldr	r1, [r7, #0]
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <ai_log_err+0x38>)
 800079a:	f005 fce1 	bl	8006160 <iprintf>
 800079e:	e008      	b.n	80007b2 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80007a0:	793b      	ldrb	r3, [r7, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80007aa:	461a      	mov	r2, r3
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <ai_log_err+0x3c>)
 80007ae:	f005 fcd7 	bl	8006160 <iprintf>

  do {} while (1);
 80007b2:	e7fe      	b.n	80007b2 <ai_log_err+0x36>
 80007b4:	08006e20 	.word	0x08006e20
 80007b8:	08006e54 	.word	0x08006e54

080007bc <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_sin_model_create_and_init(&sin_model, act_addr, NULL);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <ai_boostrap+0xb0>)
 80007ca:	f002 fd17 	bl	80031fc <ai_sin_model_create_and_init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80007d2:	7b3b      	ldrb	r3, [r7, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d006      	beq.n	80007e6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_sin_model_create_and_init");
 80007d8:	4925      	ldr	r1, [pc, #148]	; (8000870 <ai_boostrap+0xb4>)
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f7ff ffce 	bl	800077c <ai_log_err>
    return -1;
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	e03e      	b.n	8000864 <ai_boostrap+0xa8>
  }

  ai_input = ai_sin_model_inputs_get(sin_model, NULL);
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <ai_boostrap+0xb0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fd79 	bl	80032e4 <ai_sin_model_inputs_get>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <ai_boostrap+0xb8>)
 80007f6:	6013      	str	r3, [r2, #0]
  ai_output = ai_sin_model_outputs_get(sin_model, NULL);
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <ai_boostrap+0xb0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fd8a 	bl	8003318 <ai_sin_model_outputs_get>
 8000804:	4603      	mov	r3, r0
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <ai_boostrap+0xbc>)
 8000808:	6013      	str	r3, [r2, #0]

#if defined(AI_SIN_MODEL_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_SIN_MODEL_IN_NUM; idx++) {
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e00f      	b.n	8000830 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <ai_boostrap+0xb8>)
 8000812:	6819      	ldr	r1, [r3, #0]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	4613      	mov	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	4916      	ldr	r1, [pc, #88]	; (800087c <ai_boostrap+0xc0>)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SIN_MODEL_IN_NUM; idx++) {
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b00      	cmp	r3, #0
 8000834:	ddec      	ble.n	8000810 <ai_boostrap+0x54>

#if defined(AI_SIN_MODEL_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_SIN_MODEL_OUT_NUM; idx++) {
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	e00f      	b.n	800085c <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <ai_boostrap+0xbc>)
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4613      	mov	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	490c      	ldr	r1, [pc, #48]	; (8000880 <ai_boostrap+0xc4>)
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SIN_MODEL_OUT_NUM; idx++) {
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	3301      	adds	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	2b00      	cmp	r3, #0
 8000860:	ddec      	ble.n	800083c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_SIN_MODEL_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200007e0 	.word	0x200007e0
 8000870:	08006e84 	.word	0x08006e84
 8000874:	200007e4 	.word	0x200007e4
 8000878:	200007e8 	.word	0x200007e8
 800087c:	20000740 	.word	0x20000740
 8000880:	20000744 	.word	0x20000744

08000884 <MX_X_CUBE_AI_Init>:

void MX_X_CUBE_AI_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_X_CUBE_AI_Init+0x14>)
 800088a:	f005 fccf 	bl	800622c <puts>

  ai_boostrap(data_activations0);
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <MX_X_CUBE_AI_Init+0x18>)
 8000890:	f7ff ff94 	bl	80007bc <ai_boostrap>
    /* USER CODE END 5 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08006ea4 	.word	0x08006ea4
 800089c:	20000000 	.word	0x20000000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80008a6:	f7ff feff 	bl	80006a8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80008aa:	f7ff ff23 	bl	80006f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fa0a 	bl	8000cc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f845 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f7ff fed3 	bl	8000660 <MX_GPIO_Init>
  MX_CRC_Init();
 80008ba:	f7ff fe8f 	bl	80005dc <MX_CRC_Init>
  MX_USART3_UART_Init();
 80008be:	f000 f949 	bl	8000b54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_X_CUBE_AI_Init();
 80008c2:	f7ff ffdf 	bl	8000884 <MX_X_CUBE_AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float input_value = 1.0f; // 모델 입력값으로 사용할 값
 80008c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80008ca:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  ai_i32 batch;
	  *((float*)data_ins[0]) = input_value; // 첫 번째 입력 버퍼에 값을 설정
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <main+0x88>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]

	  if (ai_sin_model_run(sin_model, ai_input, ai_output) != 1) {
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <main+0x8c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <main+0x90>)
 80008da:	6811      	ldr	r1, [r2, #0]
 80008dc:	4a15      	ldr	r2, [pc, #84]	; (8000934 <main+0x94>)
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 fd6f 	bl	80033c4 <ai_sin_model_run>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d00c      	beq.n	8000906 <main+0x66>
	      // 모델 실행에 실패한 경우 오류 처리
	      ai_log_err(ai_sin_model_get_error(sin_model), "ai_sin_model_run");
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <main+0x8c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 fc61 	bl	80031b8 <ai_sin_model_get_error>
 80008f6:	4603      	mov	r3, r0
 80008f8:	490f      	ldr	r1, [pc, #60]	; (8000938 <main+0x98>)
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff3e 	bl	800077c <ai_log_err>
	      return -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	e00c      	b.n	8000920 <main+0x80>
	  }
	  float output_value = *((float*)data_outs[0]);
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <main+0x9c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	603b      	str	r3, [r7, #0]
	  input_value += 1.0;
 800090e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800091a:	edc7 7a01 	vstr	s15, [r7, #4]
  {
 800091e:	e7d5      	b.n	80008cc <main+0x2c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000740 	.word	0x20000740
 800092c:	200007e0 	.word	0x200007e0
 8000930:	200007e4 	.word	0x200007e4
 8000934:	200007e8 	.word	0x200007e8
 8000938:	08006ec4 	.word	0x08006ec4
 800093c:	20000744 	.word	0x20000744

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fd4c 	bl	80063ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <SystemClock_Config+0xd4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <SystemClock_Config+0xd4>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xd4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <SystemClock_Config+0xd8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <SystemClock_Config+0xd8>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <SystemClock_Config+0xd8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000998:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800099c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009ac:	23d8      	movs	r3, #216	; 0xd8
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fda9 	bl	8001518 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009cc:	f000 f826 	bl	8000a1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d0:	f000 fd52 	bl	8001478 <HAL_PWREx_EnableOverDrive>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009da:	f000 f81f 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2107      	movs	r1, #7
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f839 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a08:	f000 f808 	bl	8000a1c <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3750      	adds	r7, #80	; 0x50
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f940 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f005 fcd8 	bl	80064a8 <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20080000 	.word	0x20080000
 8000b24:	00000800 	.word	0x00000800
 8000b28:	200007ec 	.word	0x200007ec
 8000b2c:	20000a58 	.word	0x20000a58

08000b30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <MX_USART3_UART_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b98:	f001 fdba 	bl	8002710 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f7ff ff3b 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200007f0 	.word	0x200007f0
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0ae      	sub	sp, #184	; 0xb8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2290      	movs	r2, #144	; 0x90
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f005 fc09 	bl	80063ec <memset>
  if(uartHandle->Instance==USART3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d13c      	bne.n	8000c5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f964 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bfe:	f7ff ff0d 	bl	8000a1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_UART_MspInit+0xbc>)
 8000c5a:	f000 fa61 	bl	8001120 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c5e:	bf00      	nop
 8000c60:	37b8      	adds	r7, #184	; 0xb8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004800 	.word	0x40004800
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9e:	f7ff ff47 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f005 fc07 	bl	80064b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fdfb 	bl	80008a0 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	200006f4 	.word	0x200006f4
  ldr r2, =_sidata
 8000cb8:	080074ac 	.word	0x080074ac
  ldr r2, =_sbss
 8000cbc:	20000700 	.word	0x20000700
  ldr r4, =_ebss
 8000cc0:	20000a54 	.word	0x20000a54

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>

08000cc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f000 f90a 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd0:	200f      	movs	r0, #15
 8000cd2:	f000 f805 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd6:	f7ff fea7 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f917 	bl	8000f32 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 f8ed 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000004 	.word	0x20000004
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	20000878 	.word	0x20000878

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000878 	.word	0x20000878

08000d80 <__NVIC_SetPriorityGrouping>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	05fa0000 	.word	0x05fa0000

08000dc8 <__NVIC_GetPriorityGrouping>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff47 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5c 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb0 	bl	8000ea0 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e054      	b.n	8001008 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7f5b      	ldrb	r3, [r3, #29]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d105      	bne.n	8000f74 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fb56 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2202      	movs	r2, #2
 8000f78:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_CRC_Init+0xc4>)
 8000f88:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0218 	bic.w	r2, r2, #24
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	e00c      	b.n	8000fb6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6899      	ldr	r1, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f834 	bl	8001014 <HAL_CRCEx_Polynomial_Set>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e028      	b.n	8001008 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	795b      	ldrb	r3, [r3, #5]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	e004      	b.n	8000fd4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6912      	ldr	r2, [r2, #16]
 8000fd2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699a      	ldr	r2, [r3, #24]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	04c11db7 	.word	0x04c11db7

08001014 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001024:	231f      	movs	r3, #31
 8001026:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001028:	bf00      	nop
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	613a      	str	r2, [r7, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <HAL_CRCEx_Polynomial_Set+0x34>
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b18      	cmp	r3, #24
 800104c:	d846      	bhi.n	80010dc <HAL_CRCEx_Polynomial_Set+0xc8>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	080010e3 	.word	0x080010e3
 8001058:	080010dd 	.word	0x080010dd
 800105c:	080010dd 	.word	0x080010dd
 8001060:	080010dd 	.word	0x080010dd
 8001064:	080010dd 	.word	0x080010dd
 8001068:	080010dd 	.word	0x080010dd
 800106c:	080010dd 	.word	0x080010dd
 8001070:	080010dd 	.word	0x080010dd
 8001074:	080010d1 	.word	0x080010d1
 8001078:	080010dd 	.word	0x080010dd
 800107c:	080010dd 	.word	0x080010dd
 8001080:	080010dd 	.word	0x080010dd
 8001084:	080010dd 	.word	0x080010dd
 8001088:	080010dd 	.word	0x080010dd
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010dd 	.word	0x080010dd
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010dd 	.word	0x080010dd
 800109c:	080010dd 	.word	0x080010dd
 80010a0:	080010dd 	.word	0x080010dd
 80010a4:	080010dd 	.word	0x080010dd
 80010a8:	080010dd 	.word	0x080010dd
 80010ac:	080010dd 	.word	0x080010dd
 80010b0:	080010dd 	.word	0x080010dd
 80010b4:	080010b9 	.word	0x080010b9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d913      	bls.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80010c2:	e010      	b.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d90f      	bls.n	80010ea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80010ce:	e00c      	b.n	80010ea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	d90b      	bls.n	80010ee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80010da:	e008      	b.n	80010ee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	75fb      	strb	r3, [r7, #23]
      break;
 80010e0:	e006      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010e2:	bf00      	nop
 80010e4:	e004      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010e6:	bf00      	nop
 80010e8:	e002      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010ea:	bf00      	nop
 80010ec:	e000      	b.n	80010f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010ee:	bf00      	nop
  }
  if (status == HAL_OK)
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10d      	bne.n	8001112 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 0118 	bic.w	r1, r3, #24
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e175      	b.n	800142c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8164 	bne.w	8001426 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x56>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80be 	beq.w	8001426 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_GPIO_Init+0x324>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_GPIO_Init+0x324>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b63      	ldr	r3, [pc, #396]	; (8001444 <HAL_GPIO_Init+0x324>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012c2:	4a61      	ldr	r2, [pc, #388]	; (8001448 <HAL_GPIO_Init+0x328>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a58      	ldr	r2, [pc, #352]	; (800144c <HAL_GPIO_Init+0x32c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d037      	beq.n	800135e <HAL_GPIO_Init+0x23e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a57      	ldr	r2, [pc, #348]	; (8001450 <HAL_GPIO_Init+0x330>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d031      	beq.n	800135a <HAL_GPIO_Init+0x23a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a56      	ldr	r2, [pc, #344]	; (8001454 <HAL_GPIO_Init+0x334>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x236>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_GPIO_Init+0x338>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x232>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a54      	ldr	r2, [pc, #336]	; (800145c <HAL_GPIO_Init+0x33c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x22e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a53      	ldr	r2, [pc, #332]	; (8001460 <HAL_GPIO_Init+0x340>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x22a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a52      	ldr	r2, [pc, #328]	; (8001464 <HAL_GPIO_Init+0x344>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x226>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_GPIO_Init+0x348>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x222>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_GPIO_Init+0x34c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x21e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	; (8001470 <HAL_GPIO_Init+0x350>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x21a>
 8001336:	2309      	movs	r3, #9
 8001338:	e012      	b.n	8001360 <HAL_GPIO_Init+0x240>
 800133a:	230a      	movs	r3, #10
 800133c:	e010      	b.n	8001360 <HAL_GPIO_Init+0x240>
 800133e:	2308      	movs	r3, #8
 8001340:	e00e      	b.n	8001360 <HAL_GPIO_Init+0x240>
 8001342:	2307      	movs	r3, #7
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x240>
 8001346:	2306      	movs	r3, #6
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x240>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x240>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x240>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x240>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x240>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x240>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x328>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <HAL_GPIO_Init+0x354>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a2:	4a34      	ldr	r2, [pc, #208]	; (8001474 <HAL_GPIO_Init+0x354>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <HAL_GPIO_Init+0x354>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013cc:	4a29      	ldr	r2, [pc, #164]	; (8001474 <HAL_GPIO_Init+0x354>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_GPIO_Init+0x354>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f6:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_GPIO_Init+0x354>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_GPIO_Init+0x354>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <HAL_GPIO_Init+0x354>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f ae86 	bls.w	8001140 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40021400 	.word	0x40021400
 8001464:	40021800 	.word	0x40021800
 8001468:	40021c00 	.word	0x40021c00
 800146c:	40022000 	.word	0x40022000
 8001470:	40022400 	.word	0x40022400
 8001474:	40013c00 	.word	0x40013c00

08001478 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_PWREx_EnableOverDrive+0x98>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_PWREx_EnableOverDrive+0x98>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_PWREx_EnableOverDrive+0x98>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_PWREx_EnableOverDrive+0x9c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a6:	f7ff fc5f 	bl	8000d68 <HAL_GetTick>
 80014aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ac:	e009      	b.n	80014c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014ae:	f7ff fc5b 	bl	8000d68 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014bc:	d901      	bls.n	80014c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e022      	b.n	8001508 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d1ee      	bne.n	80014ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014dc:	f7ff fc44 	bl	8000d68 <HAL_GetTick>
 80014e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014e2:	e009      	b.n	80014f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e4:	f7ff fc40 	bl	8000d68 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f2:	d901      	bls.n	80014f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e007      	b.n	8001508 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001504:	d1ee      	bne.n	80014e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000

08001518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e29b      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8087 	beq.w	800164a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800153c:	4b96      	ldr	r3, [pc, #600]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b04      	cmp	r3, #4
 8001546:	d00c      	beq.n	8001562 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001548:	4b93      	ldr	r3, [pc, #588]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d112      	bne.n	800157a <HAL_RCC_OscConfig+0x62>
 8001554:	4b90      	ldr	r3, [pc, #576]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001560:	d10b      	bne.n	800157a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001562:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d06c      	beq.n	8001648 <HAL_RCC_OscConfig+0x130>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d168      	bne.n	8001648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e275      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x7a>
 8001584:	4b84      	ldr	r3, [pc, #528]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e02e      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x9c>
 800159a:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7e      	ldr	r2, [pc, #504]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7b      	ldr	r2, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbb6 	bl	8000d68 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fbb2 	bl	8000d68 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e229      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fba2 	bl	8000d68 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fb9e 	bl	8000d68 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e215      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x110>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d069      	beq.n	800172a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d11c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x190>
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x17a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e1e9      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	493d      	ldr	r1, [pc, #244]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e040      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d023      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb54 	bl	8000d68 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fb50 	bl	8000d68 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1c7      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4929      	ldr	r1, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
 80016f6:	e018      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fb30 	bl	8000d68 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fb2c 	bl	8000d68 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1a3      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d038      	beq.n	80017a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fb0d 	bl	8000d68 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff fb09 	bl	8000d68 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e180      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x23a>
 8001770:	e01a      	b.n	80017a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff faf3 	bl	8000d68 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff faef 	bl	8000d68 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d903      	bls.n	800179c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e166      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
 8001798:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a4 	beq.w	80018fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10d      	bne.n	80017de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a88      	ldr	r2, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b86      	ldr	r3, [pc, #536]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017de:	4b83      	ldr	r3, [pc, #524]	; (80019ec <HAL_RCC_OscConfig+0x4d4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ea:	4b80      	ldr	r3, [pc, #512]	; (80019ec <HAL_RCC_OscConfig+0x4d4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7f      	ldr	r2, [pc, #508]	; (80019ec <HAL_RCC_OscConfig+0x4d4>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fab7 	bl	8000d68 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff fab3 	bl	8000d68 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	; 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e12a      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x4d4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x31a>
 8001824:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a6f      	ldr	r2, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	e02d      	b.n	800188e <HAL_RCC_OscConfig+0x376>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x33c>
 800183a:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a6a      	ldr	r2, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a67      	ldr	r2, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
 8001852:	e01c      	b.n	800188e <HAL_RCC_OscConfig+0x376>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x35e>
 800185c:	4b62      	ldr	r3, [pc, #392]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a61      	ldr	r2, [pc, #388]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0x376>
 8001876:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a5b      	ldr	r2, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d015      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fa67 	bl	8000d68 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff fa63 	bl	8000d68 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0d8      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ee      	beq.n	800189e <HAL_RCC_OscConfig+0x386>
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fa51 	bl	8000d68 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fa4d 	bl	8000d68 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0c2      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80ae 	beq.w	8001a64 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d06d      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d14b      	bne.n	80019b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fa1e 	bl	8000d68 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fa1a 	bl	8000d68 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e091      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	071b      	lsls	r3, r3, #28
 800197a:	491b      	ldr	r1, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f9ec 	bl	8000d68 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f9e8 	bl	8000d68 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e05f      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x47c>
 80019b2:	e057      	b.n	8001a64 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f9d2 	bl	8000d68 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f9ce 	bl	8000d68 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e045      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4b0>
 80019e6:	e03d      	b.n	8001a64 <HAL_RCC_OscConfig+0x54c>
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_RCC_OscConfig+0x558>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d030      	beq.n	8001a60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d129      	bne.n	8001a60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d122      	bne.n	8001a60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a20:	4013      	ands	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d119      	bne.n	8001a60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d10f      	bne.n	8001a60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0d0      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	4965      	ldr	r1, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d040      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d115      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e073      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06b      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4936      	ldr	r1, [pc, #216]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b68:	f7ff f8fe 	bl	8000d68 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f8fa 	bl	8000d68 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e053      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d210      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f821 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1cc>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1d0>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1d4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f85a 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08006f08 	.word	0x08006f08
 8001c44:	20000004 	.word	0x20000004
 8001c48:	20000008 	.word	0x20000008

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c50:	b094      	sub	sp, #80	; 0x50
 8001c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
 8001c58:	2300      	movs	r3, #0
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c64:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d00d      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x40>
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	f200 80e1 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7e:	e0db      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c84:	e0db      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c8a:	e0d8      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c96:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	0159      	lsls	r1, r3, #5
 8001ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd0:	0150      	lsls	r0, r2, #5
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	1a51      	subs	r1, r2, r1
 8001cda:	6139      	str	r1, [r7, #16]
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	018b      	lsls	r3, r1, #6
 8001cf4:	4651      	mov	r1, sl
 8001cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cfa:	4651      	mov	r1, sl
 8001cfc:	018a      	lsls	r2, r1, #6
 8001cfe:	4651      	mov	r1, sl
 8001d00:	ebb2 0801 	subs.w	r8, r2, r1
 8001d04:	4659      	mov	r1, fp
 8001d06:	eb63 0901 	sbc.w	r9, r3, r1
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d1e:	4690      	mov	r8, r2
 8001d20:	4699      	mov	r9, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	eb18 0303 	adds.w	r3, r8, r3
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	eb49 0303 	adc.w	r3, r9, r3
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	024b      	lsls	r3, r1, #9
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d48:	4621      	mov	r1, r4
 8001d4a:	024a      	lsls	r2, r1, #9
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d52:	2200      	movs	r2, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5c:	f7fe fac0 	bl	80002e0 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d68:	e058      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	2200      	movs	r2, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	4611      	mov	r1, r2
 8001d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d84:	4642      	mov	r2, r8
 8001d86:	464b      	mov	r3, r9
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	0159      	lsls	r1, r3, #5
 8001d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d96:	0150      	lsls	r0, r2, #5
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4641      	mov	r1, r8
 8001d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001da2:	4649      	mov	r1, r9
 8001da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8001dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	00eb      	lsls	r3, r5, #3
 8001dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd2:	00e2      	lsls	r2, r4, #3
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4643      	mov	r3, r8
 8001dda:	18e3      	adds	r3, r4, r3
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	464b      	mov	r3, r9
 8001de0:	eb45 0303 	adc.w	r3, r5, r3
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df2:	4629      	mov	r1, r5
 8001df4:	028b      	lsls	r3, r1, #10
 8001df6:	4621      	mov	r1, r4
 8001df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	028a      	lsls	r2, r1, #10
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	2200      	movs	r2, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e10:	f7fe fa66 	bl	80002e0 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3750      	adds	r7, #80	; 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08006f18 	.word	0x08006f18

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0b5b      	lsrs	r3, r3, #13
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	08006f18 	.word	0x08006f18

08001ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d012      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ef2:	6093      	str	r3, [r2, #8]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	4964      	ldr	r1, [pc, #400]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d017      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	4959      	ldr	r1, [pc, #356]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d017      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	494a      	ldr	r1, [pc, #296]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 808b 	beq.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a39      	ldr	r2, [pc, #228]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fece 	bl	8000d68 <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe feca 	bl	8000d68 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e38f      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d035      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d02e      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d114      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe fe92 	bl	8000d68 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe fe8e 	bl	8000d68 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e351      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002076:	d111      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002086:	400b      	ands	r3, r1
 8002088:	4901      	ldr	r1, [pc, #4]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
 800208e:	e00b      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002090:	40023800 	.word	0x40023800
 8002094:	40007000 	.word	0x40007000
 8002098:	0ffffcff 	.word	0x0ffffcff
 800209c:	4bac      	ldr	r3, [pc, #688]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4aab      	ldr	r2, [pc, #684]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	4ba9      	ldr	r3, [pc, #676]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	49a6      	ldr	r1, [pc, #664]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020c6:	4ba2      	ldr	r3, [pc, #648]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020cc:	4aa0      	ldr	r2, [pc, #640]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020d6:	4b9e      	ldr	r3, [pc, #632]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	499b      	ldr	r1, [pc, #620]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f4:	4b96      	ldr	r3, [pc, #600]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002102:	4993      	ldr	r1, [pc, #588]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002116:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002124:	498a      	ldr	r1, [pc, #552]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002138:	4b85      	ldr	r3, [pc, #532]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	4982      	ldr	r1, [pc, #520]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800215a:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4979      	ldr	r1, [pc, #484]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217c:	4b74      	ldr	r3, [pc, #464]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4971      	ldr	r1, [pc, #452]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800219e:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	f023 020c 	bic.w	r2, r3, #12
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	4968      	ldr	r1, [pc, #416]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4960      	ldr	r1, [pc, #384]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021e2:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	4957      	ldr	r1, [pc, #348]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002204:	4b52      	ldr	r3, [pc, #328]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	494f      	ldr	r1, [pc, #316]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	4946      	ldr	r1, [pc, #280]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002248:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	493e      	ldr	r1, [pc, #248]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229a:	492d      	ldr	r1, [pc, #180]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d011      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022bc:	4924      	ldr	r1, [pc, #144]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022cc:	d101      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	4914      	ldr	r1, [pc, #80]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00b      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002320:	490b      	ldr	r1, [pc, #44]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00f      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002344:	4902      	ldr	r1, [pc, #8]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800234c:	e002      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00b      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002360:	4b8a      	ldr	r3, [pc, #552]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	4986      	ldr	r1, [pc, #536]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002394:	497d      	ldr	r1, [pc, #500]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d006      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80d6 	beq.w	800255c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023b0:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a75      	ldr	r2, [pc, #468]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023bc:	f7fe fcd4 	bl	8000d68 <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023c4:	f7fe fcd0 	bl	8000d68 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e195      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d021      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11d      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002404:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240a:	0e1b      	lsrs	r3, r3, #24
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	019a      	lsls	r2, r3, #6
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	071b      	lsls	r3, r3, #28
 800242a:	4958      	ldr	r1, [pc, #352]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002450:	2b00      	cmp	r3, #0
 8002452:	d02e      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245c:	d129      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800245e:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002472:	0f1b      	lsrs	r3, r3, #28
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	019a      	lsls	r2, r3, #6
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	061b      	lsls	r3, r3, #24
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	071b      	lsls	r3, r3, #28
 8002492:	493e      	ldr	r1, [pc, #248]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a0:	f023 021f 	bic.w	r2, r3, #31
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	3b01      	subs	r3, #1
 80024aa:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01d      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024be:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c4:	0e1b      	lsrs	r3, r3, #24
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d2:	0f1b      	lsrs	r3, r3, #28
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	019a      	lsls	r2, r3, #6
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	431a      	orrs	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	4926      	ldr	r1, [pc, #152]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d011      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	071b      	lsls	r3, r3, #28
 8002522:	491a      	ldr	r1, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002536:	f7fe fc17 	bl	8000d68 <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800253e:	f7fe fc13 	bl	8000d68 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d901      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0d8      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 80ce 	bne.w	8002700 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002570:	f7fe fbfa 	bl	8000d68 <HAL_GetTick>
 8002574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002576:	e00b      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002578:	f7fe fbf6 	bl	8000d68 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d904      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0bb      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002590:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259c:	d0ec      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d02e      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d12a      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	0f1b      	lsrs	r3, r3, #28
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	019a      	lsls	r2, r3, #6
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	4944      	ldr	r1, [pc, #272]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002602:	4b42      	ldr	r3, [pc, #264]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002608:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	493d      	ldr	r1, [pc, #244]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d022      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002630:	d11d      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002632:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	0e1b      	lsrs	r3, r3, #24
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	0f1b      	lsrs	r3, r3, #28
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	019a      	lsls	r2, r3, #6
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	041b      	lsls	r3, r3, #16
 800265a:	431a      	orrs	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	061b      	lsls	r3, r3, #24
 8002660:	431a      	orrs	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	071b      	lsls	r3, r3, #28
 8002666:	4929      	ldr	r1, [pc, #164]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d028      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	0e1b      	lsrs	r3, r3, #24
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	019a      	lsls	r2, r3, #6
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	4917      	ldr	r1, [pc, #92]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4911      	ldr	r1, [pc, #68]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d8:	f7fe fb46 	bl	8000d68 <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026e0:	f7fe fb42 	bl	8000d68 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e007      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026fe:	d1ef      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e040      	b.n	80027a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fa3e 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	; 0x24
 800273c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f82c 	bl	80027ac <UART_SetConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e022      	b.n	80027a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa84 	bl	8002c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800277a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800278a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fb0b 	bl	8002db8 <UART_CheckIdleState>
 80027a2:	4603      	mov	r3, r0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4ba6      	ldr	r3, [pc, #664]	; (8002a70 <UART_SetConfig+0x2c4>)
 80027d8:	4013      	ands	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	6979      	ldr	r1, [r7, #20]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a94      	ldr	r2, [pc, #592]	; (8002a74 <UART_SetConfig+0x2c8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d120      	bne.n	800286a <UART_SetConfig+0xbe>
 8002828:	4b93      	ldr	r3, [pc, #588]	; (8002a78 <UART_SetConfig+0x2cc>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b03      	cmp	r3, #3
 8002834:	d816      	bhi.n	8002864 <UART_SetConfig+0xb8>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <UART_SetConfig+0x90>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002859 	.word	0x08002859
 8002844:	08002853 	.word	0x08002853
 8002848:	0800285f 	.word	0x0800285f
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e150      	b.n	8002af4 <UART_SetConfig+0x348>
 8002852:	2302      	movs	r3, #2
 8002854:	77fb      	strb	r3, [r7, #31]
 8002856:	e14d      	b.n	8002af4 <UART_SetConfig+0x348>
 8002858:	2304      	movs	r3, #4
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e14a      	b.n	8002af4 <UART_SetConfig+0x348>
 800285e:	2308      	movs	r3, #8
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e147      	b.n	8002af4 <UART_SetConfig+0x348>
 8002864:	2310      	movs	r3, #16
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e144      	b.n	8002af4 <UART_SetConfig+0x348>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a83      	ldr	r2, [pc, #524]	; (8002a7c <UART_SetConfig+0x2d0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d132      	bne.n	80028da <UART_SetConfig+0x12e>
 8002874:	4b80      	ldr	r3, [pc, #512]	; (8002a78 <UART_SetConfig+0x2cc>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d828      	bhi.n	80028d4 <UART_SetConfig+0x128>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <UART_SetConfig+0xdc>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028bd 	.word	0x080028bd
 800288c:	080028d5 	.word	0x080028d5
 8002890:	080028d5 	.word	0x080028d5
 8002894:	080028d5 	.word	0x080028d5
 8002898:	080028c9 	.word	0x080028c9
 800289c:	080028d5 	.word	0x080028d5
 80028a0:	080028d5 	.word	0x080028d5
 80028a4:	080028d5 	.word	0x080028d5
 80028a8:	080028c3 	.word	0x080028c3
 80028ac:	080028d5 	.word	0x080028d5
 80028b0:	080028d5 	.word	0x080028d5
 80028b4:	080028d5 	.word	0x080028d5
 80028b8:	080028cf 	.word	0x080028cf
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
 80028c0:	e118      	b.n	8002af4 <UART_SetConfig+0x348>
 80028c2:	2302      	movs	r3, #2
 80028c4:	77fb      	strb	r3, [r7, #31]
 80028c6:	e115      	b.n	8002af4 <UART_SetConfig+0x348>
 80028c8:	2304      	movs	r3, #4
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e112      	b.n	8002af4 <UART_SetConfig+0x348>
 80028ce:	2308      	movs	r3, #8
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e10f      	b.n	8002af4 <UART_SetConfig+0x348>
 80028d4:	2310      	movs	r3, #16
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e10c      	b.n	8002af4 <UART_SetConfig+0x348>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a68      	ldr	r2, [pc, #416]	; (8002a80 <UART_SetConfig+0x2d4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d120      	bne.n	8002926 <UART_SetConfig+0x17a>
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <UART_SetConfig+0x2cc>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028ee:	2b30      	cmp	r3, #48	; 0x30
 80028f0:	d013      	beq.n	800291a <UART_SetConfig+0x16e>
 80028f2:	2b30      	cmp	r3, #48	; 0x30
 80028f4:	d814      	bhi.n	8002920 <UART_SetConfig+0x174>
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d009      	beq.n	800290e <UART_SetConfig+0x162>
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d810      	bhi.n	8002920 <UART_SetConfig+0x174>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <UART_SetConfig+0x15c>
 8002902:	2b10      	cmp	r3, #16
 8002904:	d006      	beq.n	8002914 <UART_SetConfig+0x168>
 8002906:	e00b      	b.n	8002920 <UART_SetConfig+0x174>
 8002908:	2300      	movs	r3, #0
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e0f2      	b.n	8002af4 <UART_SetConfig+0x348>
 800290e:	2302      	movs	r3, #2
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e0ef      	b.n	8002af4 <UART_SetConfig+0x348>
 8002914:	2304      	movs	r3, #4
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e0ec      	b.n	8002af4 <UART_SetConfig+0x348>
 800291a:	2308      	movs	r3, #8
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e0e9      	b.n	8002af4 <UART_SetConfig+0x348>
 8002920:	2310      	movs	r3, #16
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e0e6      	b.n	8002af4 <UART_SetConfig+0x348>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a56      	ldr	r2, [pc, #344]	; (8002a84 <UART_SetConfig+0x2d8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d120      	bne.n	8002972 <UART_SetConfig+0x1c6>
 8002930:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <UART_SetConfig+0x2cc>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800293a:	2bc0      	cmp	r3, #192	; 0xc0
 800293c:	d013      	beq.n	8002966 <UART_SetConfig+0x1ba>
 800293e:	2bc0      	cmp	r3, #192	; 0xc0
 8002940:	d814      	bhi.n	800296c <UART_SetConfig+0x1c0>
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d009      	beq.n	800295a <UART_SetConfig+0x1ae>
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d810      	bhi.n	800296c <UART_SetConfig+0x1c0>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <UART_SetConfig+0x1a8>
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d006      	beq.n	8002960 <UART_SetConfig+0x1b4>
 8002952:	e00b      	b.n	800296c <UART_SetConfig+0x1c0>
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e0cc      	b.n	8002af4 <UART_SetConfig+0x348>
 800295a:	2302      	movs	r3, #2
 800295c:	77fb      	strb	r3, [r7, #31]
 800295e:	e0c9      	b.n	8002af4 <UART_SetConfig+0x348>
 8002960:	2304      	movs	r3, #4
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e0c6      	b.n	8002af4 <UART_SetConfig+0x348>
 8002966:	2308      	movs	r3, #8
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e0c3      	b.n	8002af4 <UART_SetConfig+0x348>
 800296c:	2310      	movs	r3, #16
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e0c0      	b.n	8002af4 <UART_SetConfig+0x348>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a44      	ldr	r2, [pc, #272]	; (8002a88 <UART_SetConfig+0x2dc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d125      	bne.n	80029c8 <UART_SetConfig+0x21c>
 800297c:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <UART_SetConfig+0x2cc>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800298a:	d017      	beq.n	80029bc <UART_SetConfig+0x210>
 800298c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002990:	d817      	bhi.n	80029c2 <UART_SetConfig+0x216>
 8002992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002996:	d00b      	beq.n	80029b0 <UART_SetConfig+0x204>
 8002998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299c:	d811      	bhi.n	80029c2 <UART_SetConfig+0x216>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <UART_SetConfig+0x1fe>
 80029a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a6:	d006      	beq.n	80029b6 <UART_SetConfig+0x20a>
 80029a8:	e00b      	b.n	80029c2 <UART_SetConfig+0x216>
 80029aa:	2300      	movs	r3, #0
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e0a1      	b.n	8002af4 <UART_SetConfig+0x348>
 80029b0:	2302      	movs	r3, #2
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e09e      	b.n	8002af4 <UART_SetConfig+0x348>
 80029b6:	2304      	movs	r3, #4
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e09b      	b.n	8002af4 <UART_SetConfig+0x348>
 80029bc:	2308      	movs	r3, #8
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e098      	b.n	8002af4 <UART_SetConfig+0x348>
 80029c2:	2310      	movs	r3, #16
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e095      	b.n	8002af4 <UART_SetConfig+0x348>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2f      	ldr	r2, [pc, #188]	; (8002a8c <UART_SetConfig+0x2e0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d125      	bne.n	8002a1e <UART_SetConfig+0x272>
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <UART_SetConfig+0x2cc>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029e0:	d017      	beq.n	8002a12 <UART_SetConfig+0x266>
 80029e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029e6:	d817      	bhi.n	8002a18 <UART_SetConfig+0x26c>
 80029e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ec:	d00b      	beq.n	8002a06 <UART_SetConfig+0x25a>
 80029ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f2:	d811      	bhi.n	8002a18 <UART_SetConfig+0x26c>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <UART_SetConfig+0x254>
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	d006      	beq.n	8002a0c <UART_SetConfig+0x260>
 80029fe:	e00b      	b.n	8002a18 <UART_SetConfig+0x26c>
 8002a00:	2301      	movs	r3, #1
 8002a02:	77fb      	strb	r3, [r7, #31]
 8002a04:	e076      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a06:	2302      	movs	r3, #2
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e073      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e070      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a12:	2308      	movs	r3, #8
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	e06d      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a18:	2310      	movs	r3, #16
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e06a      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <UART_SetConfig+0x2e4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d138      	bne.n	8002a9a <UART_SetConfig+0x2ee>
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <UART_SetConfig+0x2cc>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a36:	d017      	beq.n	8002a68 <UART_SetConfig+0x2bc>
 8002a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a3c:	d82a      	bhi.n	8002a94 <UART_SetConfig+0x2e8>
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a42:	d00b      	beq.n	8002a5c <UART_SetConfig+0x2b0>
 8002a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a48:	d824      	bhi.n	8002a94 <UART_SetConfig+0x2e8>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <UART_SetConfig+0x2aa>
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	d006      	beq.n	8002a62 <UART_SetConfig+0x2b6>
 8002a54:	e01e      	b.n	8002a94 <UART_SetConfig+0x2e8>
 8002a56:	2300      	movs	r3, #0
 8002a58:	77fb      	strb	r3, [r7, #31]
 8002a5a:	e04b      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	77fb      	strb	r3, [r7, #31]
 8002a60:	e048      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a62:	2304      	movs	r3, #4
 8002a64:	77fb      	strb	r3, [r7, #31]
 8002a66:	e045      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a68:	2308      	movs	r3, #8
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e042      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a6e:	bf00      	nop
 8002a70:	efff69f3 	.word	0xefff69f3
 8002a74:	40011000 	.word	0x40011000
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40004800 	.word	0x40004800
 8002a84:	40004c00 	.word	0x40004c00
 8002a88:	40005000 	.word	0x40005000
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	40007800 	.word	0x40007800
 8002a94:	2310      	movs	r3, #16
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e02c      	b.n	8002af4 <UART_SetConfig+0x348>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a72      	ldr	r2, [pc, #456]	; (8002c68 <UART_SetConfig+0x4bc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d125      	bne.n	8002af0 <UART_SetConfig+0x344>
 8002aa4:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <UART_SetConfig+0x4c0>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ab2:	d017      	beq.n	8002ae4 <UART_SetConfig+0x338>
 8002ab4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ab8:	d817      	bhi.n	8002aea <UART_SetConfig+0x33e>
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abe:	d00b      	beq.n	8002ad8 <UART_SetConfig+0x32c>
 8002ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac4:	d811      	bhi.n	8002aea <UART_SetConfig+0x33e>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <UART_SetConfig+0x326>
 8002aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ace:	d006      	beq.n	8002ade <UART_SetConfig+0x332>
 8002ad0:	e00b      	b.n	8002aea <UART_SetConfig+0x33e>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	77fb      	strb	r3, [r7, #31]
 8002ad6:	e00d      	b.n	8002af4 <UART_SetConfig+0x348>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e00a      	b.n	8002af4 <UART_SetConfig+0x348>
 8002ade:	2304      	movs	r3, #4
 8002ae0:	77fb      	strb	r3, [r7, #31]
 8002ae2:	e007      	b.n	8002af4 <UART_SetConfig+0x348>
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e004      	b.n	8002af4 <UART_SetConfig+0x348>
 8002aea:	2310      	movs	r3, #16
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e001      	b.n	8002af4 <UART_SetConfig+0x348>
 8002af0:	2310      	movs	r3, #16
 8002af2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afc:	d15b      	bne.n	8002bb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002afe:	7ffb      	ldrb	r3, [r7, #31]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d828      	bhi.n	8002b56 <UART_SetConfig+0x3aa>
 8002b04:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <UART_SetConfig+0x360>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b31 	.word	0x08002b31
 8002b10:	08002b39 	.word	0x08002b39
 8002b14:	08002b41 	.word	0x08002b41
 8002b18:	08002b57 	.word	0x08002b57
 8002b1c:	08002b47 	.word	0x08002b47
 8002b20:	08002b57 	.word	0x08002b57
 8002b24:	08002b57 	.word	0x08002b57
 8002b28:	08002b57 	.word	0x08002b57
 8002b2c:	08002b4f 	.word	0x08002b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b30:	f7ff f99e 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002b34:	61b8      	str	r0, [r7, #24]
        break;
 8002b36:	e013      	b.n	8002b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b38:	f7ff f9ae 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002b3c:	61b8      	str	r0, [r7, #24]
        break;
 8002b3e:	e00f      	b.n	8002b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <UART_SetConfig+0x4c4>)
 8002b42:	61bb      	str	r3, [r7, #24]
        break;
 8002b44:	e00c      	b.n	8002b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b46:	f7ff f881 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002b4a:	61b8      	str	r0, [r7, #24]
        break;
 8002b4c:	e008      	b.n	8002b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b52:	61bb      	str	r3, [r7, #24]
        break;
 8002b54:	e004      	b.n	8002b60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d074      	beq.n	8002c50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	441a      	add	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	d916      	bls.n	8002bb0 <UART_SetConfig+0x404>
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d212      	bcs.n	8002bb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f023 030f 	bic.w	r3, r3, #15
 8002b92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	89fa      	ldrh	r2, [r7, #14]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	e04f      	b.n	8002c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77bb      	strb	r3, [r7, #30]
 8002bb4:	e04c      	b.n	8002c50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bb6:	7ffb      	ldrb	r3, [r7, #31]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d828      	bhi.n	8002c0e <UART_SetConfig+0x462>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <UART_SetConfig+0x418>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002bf1 	.word	0x08002bf1
 8002bcc:	08002bf9 	.word	0x08002bf9
 8002bd0:	08002c0f 	.word	0x08002c0f
 8002bd4:	08002bff 	.word	0x08002bff
 8002bd8:	08002c0f 	.word	0x08002c0f
 8002bdc:	08002c0f 	.word	0x08002c0f
 8002be0:	08002c0f 	.word	0x08002c0f
 8002be4:	08002c07 	.word	0x08002c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be8:	f7ff f942 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002bec:	61b8      	str	r0, [r7, #24]
        break;
 8002bee:	e013      	b.n	8002c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff f952 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	61b8      	str	r0, [r7, #24]
        break;
 8002bf6:	e00f      	b.n	8002c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <UART_SetConfig+0x4c4>)
 8002bfa:	61bb      	str	r3, [r7, #24]
        break;
 8002bfc:	e00c      	b.n	8002c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfe:	f7ff f825 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002c02:	61b8      	str	r0, [r7, #24]
        break;
 8002c04:	e008      	b.n	8002c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c0a:	61bb      	str	r3, [r7, #24]
        break;
 8002c0c:	e004      	b.n	8002c18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77bb      	strb	r3, [r7, #30]
        break;
 8002c16:	bf00      	nop
    }

    if (pclk != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d018      	beq.n	8002c50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	085a      	lsrs	r2, r3, #1
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d909      	bls.n	8002c4c <UART_SetConfig+0x4a0>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3e:	d205      	bcs.n	8002c4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	e001      	b.n	8002c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40007c00 	.word	0x40007c00
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	00f42400 	.word	0x00f42400

08002c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01a      	beq.n	8002d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d72:	d10a      	bne.n	8002d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
  }
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dc8:	f7fd ffce 	bl	8000d68 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d10e      	bne.n	8002dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f831 	bl	8002e52 <UART_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e027      	b.n	8002e4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d10e      	bne.n	8002e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f81b 	bl	8002e52 <UART_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e011      	b.n	8002e4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b09c      	sub	sp, #112	; 0x70
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e62:	e0a7      	b.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	f000 80a3 	beq.w	8002fb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7fd ff7b 	bl	8000d68 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d302      	bcc.n	8002e84 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d13f      	bne.n	8002f04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e98:	667b      	str	r3, [r7, #100]	; 0x64
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e6      	bne.n	8002e84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3308      	adds	r3, #8
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e5      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e068      	b.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d050      	beq.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d148      	bne.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e6      	bne.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3308      	adds	r3, #8
 8002f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f7e:	623a      	str	r2, [r7, #32]
 8002f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	69f9      	ldr	r1, [r7, #28]
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e5      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e010      	b.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	f43f af48 	beq.w	8002e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3770      	adds	r7, #112	; 0x70
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <sin_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sin_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sin_model_activations_map, 1, params)) {
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	4825      	ldr	r0, [pc, #148]	; (8003084 <sin_model_configure_activations+0xa4>)
 8002ff0:	f000 faca 	bl	8003588 <ai_platform_get_activations_map>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d039      	beq.n	800306e <sin_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_input0_output_array.data = AI_PTR(g_sin_model_activations_map[0] + 60);
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <sin_model_configure_activations+0xa4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	333c      	adds	r3, #60	; 0x3c
 8003000:	4a21      	ldr	r2, [pc, #132]	; (8003088 <sin_model_configure_activations+0xa8>)
 8003002:	6093      	str	r3, [r2, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_sin_model_activations_map[0] + 60);
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	333c      	adds	r3, #60	; 0x3c
 800300a:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <sin_model_configure_activations+0xa8>)
 800300c:	60d3      	str	r3, [r2, #12]
    
    gemm_0_output_array.data = AI_PTR(g_sin_model_activations_map[0] + 64);
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3340      	adds	r3, #64	; 0x40
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <sin_model_configure_activations+0xac>)
 8003016:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_sin_model_activations_map[0] + 64);
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <sin_model_configure_activations+0xa4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3340      	adds	r3, #64	; 0x40
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <sin_model_configure_activations+0xac>)
 8003020:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_sin_model_activations_map[0] + 64);
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3340      	adds	r3, #64	; 0x40
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <sin_model_configure_activations+0xb0>)
 800302a:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sin_model_activations_map[0] + 64);
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <sin_model_configure_activations+0xa4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3340      	adds	r3, #64	; 0x40
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <sin_model_configure_activations+0xb0>)
 8003034:	60d3      	str	r3, [r2, #12]
    
    gemm_1_output_array.data = AI_PTR(g_sin_model_activations_map[0] + 0);
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <sin_model_configure_activations+0xb4>)
 800303c:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_sin_model_activations_map[0] + 0);
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a14      	ldr	r2, [pc, #80]	; (8003094 <sin_model_configure_activations+0xb4>)
 8003044:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_sin_model_activations_map[0] + 64);
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3340      	adds	r3, #64	; 0x40
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <sin_model_configure_activations+0xb8>)
 800304e:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sin_model_activations_map[0] + 64);
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3340      	adds	r3, #64	; 0x40
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <sin_model_configure_activations+0xb8>)
 8003058:	60d3      	str	r3, [r2, #12]
    
    gemm_2_output_array.data = AI_PTR(g_sin_model_activations_map[0] + 0);
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <sin_model_configure_activations+0xa4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0f      	ldr	r2, [pc, #60]	; (800309c <sin_model_configure_activations+0xbc>)
 8003060:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_sin_model_activations_map[0] + 0);
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <sin_model_configure_activations+0xa4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <sin_model_configure_activations+0xbc>)
 8003068:	60d3      	str	r3, [r2, #12]
    
    return true;
 800306a:	2301      	movs	r3, #1
 800306c:	e005      	b.n	800307a <sin_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800306e:	2213      	movs	r2, #19
 8003070:	2130      	movs	r1, #48	; 0x30
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fc06 	bl	8003884 <ai_platform_network_set_error>
  return false;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000087c 	.word	0x2000087c
 8003088:	20000010 	.word	0x20000010
 800308c:	20000020 	.word	0x20000020
 8003090:	20000030 	.word	0x20000030
 8003094:	20000040 	.word	0x20000040
 8003098:	20000050 	.word	0x20000050
 800309c:	20000060 	.word	0x20000060

080030a0 <sin_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sin_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sin_model_weights_map, 1, params)) {
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	483b      	ldr	r0, [pc, #236]	; (800319c <sin_model_configure_weights+0xfc>)
 80030b0:	f000 fa12 	bl	80034d8 <ai_platform_get_weights_map>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d065      	beq.n	8003186 <sin_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <sin_model_configure_weights+0x100>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030c2:	4a37      	ldr	r2, [pc, #220]	; (80031a0 <sin_model_configure_weights+0x100>)
 80030c4:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_sin_model_weights_map[0] + 0);
 80030c6:	4b35      	ldr	r3, [pc, #212]	; (800319c <sin_model_configure_weights+0xfc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <sin_model_configure_weights+0x100>)
 80030cc:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_sin_model_weights_map[0] + 0);
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <sin_model_configure_weights+0xfc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <sin_model_configure_weights+0x100>)
 80030d4:	60d3      	str	r3, [r2, #12]
    
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <sin_model_configure_weights+0x104>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030de:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <sin_model_configure_weights+0x104>)
 80030e0:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_sin_model_weights_map[0] + 64);
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <sin_model_configure_weights+0xfc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3340      	adds	r3, #64	; 0x40
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <sin_model_configure_weights+0x104>)
 80030ea:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_sin_model_weights_map[0] + 64);
 80030ec:	4b2b      	ldr	r3, [pc, #172]	; (800319c <sin_model_configure_weights+0xfc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3340      	adds	r3, #64	; 0x40
 80030f2:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <sin_model_configure_weights+0x104>)
 80030f4:	60d3      	str	r3, [r2, #12]
    
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <sin_model_configure_weights+0x108>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030fe:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <sin_model_configure_weights+0x108>)
 8003100:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_sin_model_weights_map[0] + 128);
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <sin_model_configure_weights+0xfc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3380      	adds	r3, #128	; 0x80
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <sin_model_configure_weights+0x108>)
 800310a:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_sin_model_weights_map[0] + 128);
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <sin_model_configure_weights+0xfc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3380      	adds	r3, #128	; 0x80
 8003112:	4a25      	ldr	r2, [pc, #148]	; (80031a8 <sin_model_configure_weights+0x108>)
 8003114:	60d3      	str	r3, [r2, #12]
    
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003116:	4b25      	ldr	r3, [pc, #148]	; (80031ac <sin_model_configure_weights+0x10c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800311e:	4a23      	ldr	r2, [pc, #140]	; (80031ac <sin_model_configure_weights+0x10c>)
 8003120:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_sin_model_weights_map[0] + 1152);
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <sin_model_configure_weights+0xfc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800312a:	4a20      	ldr	r2, [pc, #128]	; (80031ac <sin_model_configure_weights+0x10c>)
 800312c:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_sin_model_weights_map[0] + 1152);
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <sin_model_configure_weights+0xfc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <sin_model_configure_weights+0x10c>)
 8003138:	60d3      	str	r3, [r2, #12]
    
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <sin_model_configure_weights+0x110>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003142:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <sin_model_configure_weights+0x110>)
 8003144:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_sin_model_weights_map[0] + 1216);
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <sin_model_configure_weights+0xfc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800314e:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <sin_model_configure_weights+0x110>)
 8003150:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_sin_model_weights_map[0] + 1216);
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <sin_model_configure_weights+0xfc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <sin_model_configure_weights+0x110>)
 800315c:	60d3      	str	r3, [r2, #12]
    
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <sin_model_configure_weights+0x114>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <sin_model_configure_weights+0x114>)
 8003168:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_sin_model_weights_map[0] + 1280);
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <sin_model_configure_weights+0xfc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <sin_model_configure_weights+0x114>)
 8003174:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_sin_model_weights_map[0] + 1280);
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <sin_model_configure_weights+0xfc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <sin_model_configure_weights+0x114>)
 8003180:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003182:	2301      	movs	r3, #1
 8003184:	e005      	b.n	8003192 <sin_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003186:	2212      	movs	r2, #18
 8003188:	2130      	movs	r1, #48	; 0x30
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fb7a 	bl	8003884 <ai_platform_network_set_error>
  return false;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000880 	.word	0x20000880
 80031a0:	20000070 	.word	0x20000070
 80031a4:	20000080 	.word	0x20000080
 80031a8:	20000090 	.word	0x20000090
 80031ac:	200000a0 	.word	0x200000a0
 80031b0:	200000b0 	.word	0x200000b0
 80031b4:	200000c0 	.word	0x200000c0

080031b8 <ai_sin_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_sin_model_get_error(ai_handle network)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa53 	bl	800366c <ai_platform_network_get_error>
 80031c6:	4603      	mov	r3, r0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <ai_sin_model_create>:

AI_API_ENTRY
ai_error ai_sin_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80031da:	2300      	movs	r3, #0
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	2305      	movs	r3, #5
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2301      	movs	r3, #1
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <ai_sin_model_create+0x28>)
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fe65 	bl	8003eb8 <ai_platform_network_create>
 80031ee:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200005f4 	.word	0x200005f4

080031fc <ai_sin_model_create_and_init>:

AI_API_ENTRY
ai_error ai_sin_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b096      	sub	sp, #88	; 0x58
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_sin_model_create(network, AI_SIN_MODEL_DATA_CONFIG);
 8003208:	2100      	movs	r1, #0
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff ffe0 	bl	80031d0 <ai_sin_model_create>
 8003210:	4603      	mov	r3, r0
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8003214:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <ai_sin_model_create_and_init+0x24>
        return err;
 800321c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321e:	e05d      	b.n	80032dc <ai_sin_model_create_and_init+0xe0>
    if (ai_sin_model_data_params_get(&params) != true) {
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f8dd 	bl	80033e4 <ai_sin_model_data_params_get>
 800322a:	4603      	mov	r3, r0
 800322c:	f083 0301 	eor.w	r3, r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <ai_sin_model_create_and_init+0x4c>
        err = ai_sin_model_get_error(*network);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ffbc 	bl	80031b8 <ai_sin_model_get_error>
 8003240:	4603      	mov	r3, r0
 8003242:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003246:	e049      	b.n	80032dc <ai_sin_model_create_and_init+0xe0>
    }
#if defined(AI_SIN_MODEL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <ai_sin_model_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800324e:	2300      	movs	r3, #0
 8003250:	657b      	str	r3, [r7, #84]	; 0x54
 8003252:	e00e      	b.n	8003272 <ai_sin_model_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4413      	add	r3, r2
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	330c      	adds	r3, #12
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f922 	bl	80034b0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800326c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326e:	3301      	adds	r3, #1
 8003270:	657b      	str	r3, [r7, #84]	; 0x54
 8003272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003274:	461a      	mov	r2, r3
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	4293      	cmp	r3, r2
 800327a:	dbeb      	blt.n	8003254 <ai_sin_model_create_and_init+0x58>
    }
#endif
#if defined(AI_SIN_MODEL_DATA_WEIGHTS_COUNT)
    if (weights) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <ai_sin_model_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003282:	2300      	movs	r3, #0
 8003284:	653b      	str	r3, [r7, #80]	; 0x50
 8003286:	e00e      	b.n	80032a6 <ai_sin_model_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8003288:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800328a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	3304      	adds	r3, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f908 	bl	80034b0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	3301      	adds	r3, #1
 80032a4:	653b      	str	r3, [r7, #80]	; 0x50
 80032a6:	8b7b      	ldrh	r3, [r7, #26]
 80032a8:	461a      	mov	r2, r3
 80032aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ac:	4293      	cmp	r3, r2
 80032ae:	dbeb      	blt.n	8003288 <ai_sin_model_create_and_init+0x8c>
    }
#endif
    if (ai_sin_model_init(*network, &params) != true) {
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f107 0214 	add.w	r2, r7, #20
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f846 	bl	800334c <ai_sin_model_init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <ai_sin_model_create_and_init+0xde>
        err = ai_sin_model_get_error(*network);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff71 	bl	80031b8 <ai_sin_model_get_error>
 80032d6:	4603      	mov	r3, r0
 80032d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3758      	adds	r7, #88	; 0x58
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <ai_sin_model_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_sin_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <ai_sin_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <ai_sin_model_inputs_get+0x2c>)
 80032f6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a06      	ldr	r2, [pc, #24]	; (8003314 <ai_sin_model_inputs_get+0x30>)
 80032fc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fac5 	bl	8003890 <ai_platform_inputs_get>
 8003306:	4603      	mov	r3, r0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200005f4 	.word	0x200005f4
 8003314:	a1c00100 	.word	0xa1c00100

08003318 <ai_sin_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_sin_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <ai_sin_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <ai_sin_model_outputs_get+0x2c>)
 800332a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a06      	ldr	r2, [pc, #24]	; (8003348 <ai_sin_model_outputs_get+0x30>)
 8003330:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8003332:	6839      	ldr	r1, [r7, #0]
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fc37 	bl	8003ba8 <ai_platform_outputs_get>
 800333a:	4603      	mov	r3, r0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	200005f4 	.word	0x200005f4
 8003348:	a1c00100 	.word	0xa1c00100

0800334c <ai_sin_model_init>:
}

AI_API_ENTRY
ai_bool ai_sin_model_init(
  ai_handle network, const ai_network_params* params)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003356:	6839      	ldr	r1, [r7, #0]
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 ff87 	bl	800426c <ai_platform_network_init>
 800335e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <ai_sin_model_init+0x1e>
 8003366:	2300      	movs	r3, #0
 8003368:	e028      	b.n	80033bc <ai_sin_model_init+0x70>

  ai_bool ok = true;
 800336a:	2301      	movs	r3, #1
 800336c:	72fb      	strb	r3, [r7, #11]
  ok &= sin_model_configure_weights(net_ctx, params);
 800336e:	6839      	ldr	r1, [r7, #0]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fe95 	bl	80030a0 <sin_model_configure_weights>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	72fb      	strb	r3, [r7, #11]
  ok &= sin_model_configure_activations(net_ctx, params);
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7ff fe28 	bl	8002fe0 <sin_model_configure_activations>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	7afb      	ldrb	r3, [r7, #11]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f001 f8fe 	bl	80045a4 <ai_platform_network_post_init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461a      	mov	r2, r3
 80033ac:	7afb      	ldrb	r3, [r7, #11]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80033ba:	7afb      	ldrb	r3, [r7, #11]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <ai_sin_model_run>:


AI_API_ENTRY
ai_i32 ai_sin_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f001 fa0f 	bl	80047f8 <ai_platform_network_process>
 80033da:	4603      	mov	r3, r0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <ai_sin_model_data_params_get>:
 * @ingroup sin_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_sin_model_data_params_get(ai_network_params* params)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <ai_sin_model_data_params_get+0x12>
 80033f2:	2300      	movs	r3, #0
 80033f4:	e016      	b.n	8003424 <ai_sin_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80033f6:	4a0d      	ldr	r2, [pc, #52]	; (800342c <ai_sin_model_data_params_get+0x48>)
 80033f8:	f107 0310 	add.w	r3, r7, #16
 80033fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003400:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SIN_MODEL_DATA_ACTIVATIONS_COUNT, g_sin_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <ai_sin_model_data_params_get+0x4c>)
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800340e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SIN_MODEL_DATA_WEIGHTS_COUNT, g_sin_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003412:	f107 0210 	add.w	r2, r7, #16
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	4619      	mov	r1, r3
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f90b 	bl	8003638 <ai_platform_bind_network_params>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	08006ef8 	.word	0x08006ef8
 8003430:	08006f00 	.word	0x08006f00

08003434 <ai_buffer_get_size>:
 8003434:	b368      	cbz	r0, 8003492 <ai_buffer_get_size+0x5e>
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <ai_buffer_get_size+0x60>)
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <ai_buffer_get_size+0x64>)
 800343a:	b410      	push	{r4}
 800343c:	6804      	ldr	r4, [r0, #0]
 800343e:	4023      	ands	r3, r4
 8003440:	4293      	cmp	r3, r2
 8003442:	d123      	bne.n	800348c <ai_buffer_get_size+0x58>
 8003444:	b311      	cbz	r1, 800348c <ai_buffer_get_size+0x58>
 8003446:	6984      	ldr	r4, [r0, #24]
 8003448:	6862      	ldr	r2, [r4, #4]
 800344a:	321f      	adds	r2, #31
 800344c:	f022 021f 	bic.w	r2, r2, #31
 8003450:	7d03      	ldrb	r3, [r0, #20]
 8003452:	6941      	ldr	r1, [r0, #20]
 8003454:	f1a3 0301 	sub.w	r3, r3, #1
 8003458:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8003466:	da0c      	bge.n	8003482 <ai_buffer_get_size+0x4e>
 8003468:	2b01      	cmp	r3, #1
 800346a:	d103      	bne.n	8003474 <ai_buffer_get_size+0x40>
 800346c:	2802      	cmp	r0, #2
 800346e:	f04f 0302 	mov.w	r3, #2
 8003472:	d006      	beq.n	8003482 <ai_buffer_get_size+0x4e>
 8003474:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003478:	3301      	adds	r3, #1
 800347a:	4298      	cmp	r0, r3
 800347c:	fb01 f202 	mul.w	r2, r1, r2
 8003480:	d1f2      	bne.n	8003468 <ai_buffer_get_size+0x34>
 8003482:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	6984      	ldr	r4, [r0, #24]
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	e7de      	b.n	8003450 <ai_buffer_get_size+0x1c>
 8003492:	4770      	bx	lr
 8003494:	017fffff 	.word	0x017fffff
 8003498:	000400c0 	.word	0x000400c0

0800349c <ai_buffer_array_sane>:
 800349c:	b138      	cbz	r0, 80034ae <ai_buffer_array_sane+0x12>
 800349e:	6843      	ldr	r3, [r0, #4]
 80034a0:	b123      	cbz	r3, 80034ac <ai_buffer_array_sane+0x10>
 80034a2:	8840      	ldrh	r0, [r0, #2]
 80034a4:	3800      	subs	r0, #0
 80034a6:	bf18      	it	ne
 80034a8:	2001      	movne	r0, #1
 80034aa:	4770      	bx	lr
 80034ac:	4618      	mov	r0, r3
 80034ae:	4770      	bx	lr

080034b0 <ai_buffer_array_item_set_address>:
 80034b0:	b150      	cbz	r0, 80034c8 <ai_buffer_array_item_set_address+0x18>
 80034b2:	6843      	ldr	r3, [r0, #4]
 80034b4:	b14b      	cbz	r3, 80034ca <ai_buffer_array_item_set_address+0x1a>
 80034b6:	8840      	ldrh	r0, [r0, #2]
 80034b8:	b900      	cbnz	r0, 80034bc <ai_buffer_array_item_set_address+0xc>
 80034ba:	4770      	bx	lr
 80034bc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80034c0:	2001      	movs	r0, #1
 80034c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80034c6:	604a      	str	r2, [r1, #4]
 80034c8:	4770      	bx	lr
 80034ca:	4618      	mov	r0, r3
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <_ai_platform_acquire_crc>:
 80034d0:	2001      	movs	r0, #1
 80034d2:	4770      	bx	lr

080034d4 <_ai_platform_release_crc>:
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop

080034d8 <ai_platform_get_weights_map>:
 80034d8:	2900      	cmp	r1, #0
 80034da:	bf18      	it	ne
 80034dc:	2800      	cmpne	r0, #0
 80034de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e0:	bf0c      	ite	eq
 80034e2:	2401      	moveq	r4, #1
 80034e4:	2400      	movne	r4, #0
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	bf08      	it	eq
 80034ea:	f044 0401 	orreq.w	r4, r4, #1
 80034ee:	b114      	cbz	r4, 80034f6 <ai_platform_get_weights_map+0x1e>
 80034f0:	2400      	movs	r4, #0
 80034f2:	4620      	mov	r0, r4
 80034f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f6:	4616      	mov	r6, r2
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <ai_platform_get_weights_map+0xac>)
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	4605      	mov	r5, r0
 80034fe:	460f      	mov	r7, r1
 8003500:	429a      	cmp	r2, r3
 8003502:	d022      	beq.n	800354a <ai_platform_get_weights_map+0x72>
 8003504:	6870      	ldr	r0, [r6, #4]
 8003506:	2800      	cmp	r0, #0
 8003508:	d0f2      	beq.n	80034f0 <ai_platform_get_weights_map+0x18>
 800350a:	6806      	ldr	r6, [r0, #0]
 800350c:	429e      	cmp	r6, r3
 800350e:	d006      	beq.n	800351e <ai_platform_get_weights_map+0x46>
 8003510:	f1a1 0401 	sub.w	r4, r1, #1
 8003514:	6028      	str	r0, [r5, #0]
 8003516:	fab4 f484 	clz	r4, r4
 800351a:	0964      	lsrs	r4, r4, #5
 800351c:	e7e9      	b.n	80034f2 <ai_platform_get_weights_map+0x1a>
 800351e:	3d04      	subs	r5, #4
 8003520:	4602      	mov	r2, r0
 8003522:	4621      	mov	r1, r4
 8003524:	e000      	b.n	8003528 <ai_platform_get_weights_map+0x50>
 8003526:	4619      	mov	r1, r3
 8003528:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800352c:	42b3      	cmp	r3, r6
 800352e:	d025      	beq.n	800357c <ai_platform_get_weights_map+0xa4>
 8003530:	f845 3f04 	str.w	r3, [r5, #4]!
 8003534:	1c4b      	adds	r3, r1, #1
 8003536:	429f      	cmp	r7, r3
 8003538:	d8f5      	bhi.n	8003526 <ai_platform_get_weights_map+0x4e>
 800353a:	d1da      	bne.n	80034f2 <ai_platform_get_weights_map+0x1a>
 800353c:	3102      	adds	r1, #2
 800353e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8003542:	42b3      	cmp	r3, r6
 8003544:	d1d5      	bne.n	80034f2 <ai_platform_get_weights_map+0x1a>
 8003546:	2401      	movs	r4, #1
 8003548:	e7d3      	b.n	80034f2 <ai_platform_get_weights_map+0x1a>
 800354a:	1d30      	adds	r0, r6, #4
 800354c:	f7ff ffa6 	bl	800349c <ai_buffer_array_sane>
 8003550:	2800      	cmp	r0, #0
 8003552:	d0cd      	beq.n	80034f0 <ai_platform_get_weights_map+0x18>
 8003554:	88f3      	ldrh	r3, [r6, #6]
 8003556:	429f      	cmp	r7, r3
 8003558:	d1ca      	bne.n	80034f0 <ai_platform_get_weights_map+0x18>
 800355a:	3d04      	subs	r5, #4
 800355c:	4622      	mov	r2, r4
 800355e:	68b3      	ldr	r3, [r6, #8]
 8003560:	4423      	add	r3, r4
 8003562:	341c      	adds	r4, #28
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b123      	cbz	r3, 8003572 <ai_platform_get_weights_map+0x9a>
 8003568:	3201      	adds	r2, #1
 800356a:	f845 3f04 	str.w	r3, [r5, #4]!
 800356e:	4297      	cmp	r7, r2
 8003570:	d8f5      	bhi.n	800355e <ai_platform_get_weights_map+0x86>
 8003572:	1abc      	subs	r4, r7, r2
 8003574:	fab4 f484 	clz	r4, r4
 8003578:	0964      	lsrs	r4, r4, #5
 800357a:	e7ba      	b.n	80034f2 <ai_platform_get_weights_map+0x1a>
 800357c:	428f      	cmp	r7, r1
 800357e:	d1b8      	bne.n	80034f2 <ai_platform_get_weights_map+0x1a>
 8003580:	e7e1      	b.n	8003546 <ai_platform_get_weights_map+0x6e>
 8003582:	bf00      	nop
 8003584:	a1facade 	.word	0xa1facade

08003588 <ai_platform_get_activations_map>:
 8003588:	2900      	cmp	r1, #0
 800358a:	bf18      	it	ne
 800358c:	2800      	cmpne	r0, #0
 800358e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003590:	bf0c      	ite	eq
 8003592:	2401      	moveq	r4, #1
 8003594:	2400      	movne	r4, #0
 8003596:	2a00      	cmp	r2, #0
 8003598:	bf08      	it	eq
 800359a:	f044 0401 	orreq.w	r4, r4, #1
 800359e:	b114      	cbz	r4, 80035a6 <ai_platform_get_activations_map+0x1e>
 80035a0:	2400      	movs	r4, #0
 80035a2:	4620      	mov	r0, r4
 80035a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a6:	4616      	mov	r6, r2
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <ai_platform_get_activations_map+0xac>)
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	4605      	mov	r5, r0
 80035ae:	460f      	mov	r7, r1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d022      	beq.n	80035fa <ai_platform_get_activations_map+0x72>
 80035b4:	6a30      	ldr	r0, [r6, #32]
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d0f2      	beq.n	80035a0 <ai_platform_get_activations_map+0x18>
 80035ba:	6806      	ldr	r6, [r0, #0]
 80035bc:	429e      	cmp	r6, r3
 80035be:	d006      	beq.n	80035ce <ai_platform_get_activations_map+0x46>
 80035c0:	f1a1 0401 	sub.w	r4, r1, #1
 80035c4:	6028      	str	r0, [r5, #0]
 80035c6:	fab4 f484 	clz	r4, r4
 80035ca:	0964      	lsrs	r4, r4, #5
 80035cc:	e7e9      	b.n	80035a2 <ai_platform_get_activations_map+0x1a>
 80035ce:	3d04      	subs	r5, #4
 80035d0:	4602      	mov	r2, r0
 80035d2:	4621      	mov	r1, r4
 80035d4:	e000      	b.n	80035d8 <ai_platform_get_activations_map+0x50>
 80035d6:	4619      	mov	r1, r3
 80035d8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80035dc:	42b3      	cmp	r3, r6
 80035de:	d026      	beq.n	800362e <ai_platform_get_activations_map+0xa6>
 80035e0:	f845 3f04 	str.w	r3, [r5, #4]!
 80035e4:	1c4b      	adds	r3, r1, #1
 80035e6:	429f      	cmp	r7, r3
 80035e8:	d8f5      	bhi.n	80035d6 <ai_platform_get_activations_map+0x4e>
 80035ea:	d1da      	bne.n	80035a2 <ai_platform_get_activations_map+0x1a>
 80035ec:	3102      	adds	r1, #2
 80035ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80035f2:	42b3      	cmp	r3, r6
 80035f4:	d1d5      	bne.n	80035a2 <ai_platform_get_activations_map+0x1a>
 80035f6:	2401      	movs	r4, #1
 80035f8:	e7d3      	b.n	80035a2 <ai_platform_get_activations_map+0x1a>
 80035fa:	f106 000c 	add.w	r0, r6, #12
 80035fe:	f7ff ff4d 	bl	800349c <ai_buffer_array_sane>
 8003602:	2800      	cmp	r0, #0
 8003604:	d0cc      	beq.n	80035a0 <ai_platform_get_activations_map+0x18>
 8003606:	89f3      	ldrh	r3, [r6, #14]
 8003608:	429f      	cmp	r7, r3
 800360a:	d1c9      	bne.n	80035a0 <ai_platform_get_activations_map+0x18>
 800360c:	3d04      	subs	r5, #4
 800360e:	4622      	mov	r2, r4
 8003610:	6933      	ldr	r3, [r6, #16]
 8003612:	4423      	add	r3, r4
 8003614:	341c      	adds	r4, #28
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	b123      	cbz	r3, 8003624 <ai_platform_get_activations_map+0x9c>
 800361a:	3201      	adds	r2, #1
 800361c:	f845 3f04 	str.w	r3, [r5, #4]!
 8003620:	4297      	cmp	r7, r2
 8003622:	d8f5      	bhi.n	8003610 <ai_platform_get_activations_map+0x88>
 8003624:	1abc      	subs	r4, r7, r2
 8003626:	fab4 f484 	clz	r4, r4
 800362a:	0964      	lsrs	r4, r4, #5
 800362c:	e7b9      	b.n	80035a2 <ai_platform_get_activations_map+0x1a>
 800362e:	428f      	cmp	r7, r1
 8003630:	d1b7      	bne.n	80035a2 <ai_platform_get_activations_map+0x1a>
 8003632:	e7e0      	b.n	80035f6 <ai_platform_get_activations_map+0x6e>
 8003634:	a1facade 	.word	0xa1facade

08003638 <ai_platform_bind_network_params>:
 8003638:	2a00      	cmp	r2, #0
 800363a:	bf18      	it	ne
 800363c:	2900      	cmpne	r1, #0
 800363e:	d010      	beq.n	8003662 <ai_platform_bind_network_params+0x2a>
 8003640:	b178      	cbz	r0, 8003662 <ai_platform_bind_network_params+0x2a>
 8003642:	4603      	mov	r3, r0
 8003644:	4808      	ldr	r0, [pc, #32]	; (8003668 <ai_platform_bind_network_params+0x30>)
 8003646:	f103 0c0c 	add.w	ip, r3, #12
 800364a:	f843 0b04 	str.w	r0, [r3], #4
 800364e:	c903      	ldmia	r1, {r0, r1}
 8003650:	e883 0003 	stmia.w	r3, {r0, r1}
 8003654:	2301      	movs	r3, #1
 8003656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800365a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800365e:	4618      	mov	r0, r3
 8003660:	4770      	bx	lr
 8003662:	2300      	movs	r3, #0
 8003664:	4618      	mov	r0, r3
 8003666:	4770      	bx	lr
 8003668:	a1facade 	.word	0xa1facade

0800366c <ai_platform_network_get_error>:
 800366c:	b510      	push	{r4, lr}
 800366e:	2800      	cmp	r0, #0
 8003670:	d03f      	beq.n	80036f2 <ai_platform_network_get_error+0x86>
 8003672:	4b7d      	ldr	r3, [pc, #500]	; (8003868 <ai_platform_network_get_error+0x1fc>)
 8003674:	4604      	mov	r4, r0
 8003676:	6802      	ldr	r2, [r0, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d13a      	bne.n	80036f2 <ai_platform_network_get_error+0x86>
 800367c:	f7ff ff28 	bl	80034d0 <_ai_platform_acquire_crc>
 8003680:	4b7a      	ldr	r3, [pc, #488]	; (800386c <ai_platform_network_get_error+0x200>)
 8003682:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800368c:	189a      	adds	r2, r3, r2
 800368e:	2a01      	cmp	r2, #1
 8003690:	f240 8086 	bls.w	80037a0 <ai_platform_network_get_error+0x134>
 8003694:	f240 4249 	movw	r2, #1097	; 0x449
 8003698:	4293      	cmp	r3, r2
 800369a:	f000 8081 	beq.w	80037a0 <ai_platform_network_get_error+0x134>
 800369e:	4a74      	ldr	r2, [pc, #464]	; (8003870 <ai_platform_network_get_error+0x204>)
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80036aa:	f000 8087 	beq.w	80037bc <ai_platform_network_get_error+0x150>
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	f240 4183 	movw	r1, #1155	; 0x483
 80036b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b8:	428b      	cmp	r3, r1
 80036ba:	f000 80a9 	beq.w	8003810 <ai_platform_network_get_error+0x1a4>
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80036c8:	f000 80c0 	beq.w	800384c <ai_platform_network_get_error+0x1e0>
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f040 8082 	bne.w	80037dc <ai_platform_network_get_error+0x170>
 80036d8:	4a66      	ldr	r2, [pc, #408]	; (8003874 <ai_platform_network_get_error+0x208>)
 80036da:	2301      	movs	r3, #1
 80036dc:	6093      	str	r3, [r2, #8]
 80036de:	6893      	ldr	r3, [r2, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1fc      	bne.n	80036de <ai_platform_network_get_error+0x72>
 80036e4:	4964      	ldr	r1, [pc, #400]	; (8003878 <ai_platform_network_get_error+0x20c>)
 80036e6:	4b65      	ldr	r3, [pc, #404]	; (800387c <ai_platform_network_get_error+0x210>)
 80036e8:	6011      	str	r1, [r2, #0]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d075      	beq.n	80037dc <ai_platform_network_get_error+0x170>
 80036f0:	e7fe      	b.n	80036f0 <ai_platform_network_get_error+0x84>
 80036f2:	f7ff feed 	bl	80034d0 <_ai_platform_acquire_crc>
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <ai_platform_network_get_error+0x200>)
 80036f8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003702:	185a      	adds	r2, r3, r1
 8003704:	2a01      	cmp	r2, #1
 8003706:	d929      	bls.n	800375c <ai_platform_network_get_error+0xf0>
 8003708:	f240 4249 	movw	r2, #1097	; 0x449
 800370c:	4293      	cmp	r3, r2
 800370e:	d025      	beq.n	800375c <ai_platform_network_get_error+0xf0>
 8003710:	4a57      	ldr	r2, [pc, #348]	; (8003870 <ai_platform_network_get_error+0x204>)
 8003712:	6813      	ldr	r3, [r2, #0]
 8003714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003718:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800371c:	d02b      	beq.n	8003776 <ai_platform_network_get_error+0x10a>
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	f240 4183 	movw	r1, #1155	; 0x483
 8003724:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003728:	428b      	cmp	r3, r1
 800372a:	d060      	beq.n	80037ee <ai_platform_network_get_error+0x182>
 800372c:	6813      	ldr	r3, [r2, #0]
 800372e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003732:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003736:	d07c      	beq.n	8003832 <ai_platform_network_get_error+0x1c6>
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800373e:	2b00      	cmp	r3, #0
 8003740:	d129      	bne.n	8003796 <ai_platform_network_get_error+0x12a>
 8003742:	4a4c      	ldr	r2, [pc, #304]	; (8003874 <ai_platform_network_get_error+0x208>)
 8003744:	2301      	movs	r3, #1
 8003746:	6093      	str	r3, [r2, #8]
 8003748:	6893      	ldr	r3, [r2, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1fc      	bne.n	8003748 <ai_platform_network_get_error+0xdc>
 800374e:	494a      	ldr	r1, [pc, #296]	; (8003878 <ai_platform_network_get_error+0x20c>)
 8003750:	4b4a      	ldr	r3, [pc, #296]	; (800387c <ai_platform_network_get_error+0x210>)
 8003752:	6011      	str	r1, [r2, #0]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d01d      	beq.n	8003796 <ai_platform_network_get_error+0x12a>
 800375a:	e7fe      	b.n	800375a <ai_platform_network_get_error+0xee>
 800375c:	4a45      	ldr	r2, [pc, #276]	; (8003874 <ai_platform_network_get_error+0x208>)
 800375e:	2301      	movs	r3, #1
 8003760:	6093      	str	r3, [r2, #8]
 8003762:	6893      	ldr	r3, [r2, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1fc      	bne.n	8003762 <ai_platform_network_get_error+0xf6>
 8003768:	4943      	ldr	r1, [pc, #268]	; (8003878 <ai_platform_network_get_error+0x20c>)
 800376a:	4b44      	ldr	r3, [pc, #272]	; (800387c <ai_platform_network_get_error+0x210>)
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d010      	beq.n	8003796 <ai_platform_network_get_error+0x12a>
 8003774:	e7fe      	b.n	8003774 <ai_platform_network_get_error+0x108>
 8003776:	4a42      	ldr	r2, [pc, #264]	; (8003880 <ai_platform_network_get_error+0x214>)
 8003778:	2301      	movs	r3, #1
 800377a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800377e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1fb      	bne.n	800377e <ai_platform_network_get_error+0x112>
 8003786:	493c      	ldr	r1, [pc, #240]	; (8003878 <ai_platform_network_get_error+0x20c>)
 8003788:	4b3c      	ldr	r3, [pc, #240]	; (800387c <ai_platform_network_get_error+0x210>)
 800378a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800378e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003792:	429a      	cmp	r2, r3
 8003794:	d111      	bne.n	80037ba <ai_platform_network_get_error+0x14e>
 8003796:	f7ff fe9d 	bl	80034d4 <_ai_platform_release_crc>
 800379a:	f241 0010 	movw	r0, #4112	; 0x1010
 800379e:	bd10      	pop	{r4, pc}
 80037a0:	4a34      	ldr	r2, [pc, #208]	; (8003874 <ai_platform_network_get_error+0x208>)
 80037a2:	2301      	movs	r3, #1
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	6893      	ldr	r3, [r2, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1fc      	bne.n	80037a6 <ai_platform_network_get_error+0x13a>
 80037ac:	4932      	ldr	r1, [pc, #200]	; (8003878 <ai_platform_network_get_error+0x20c>)
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <ai_platform_network_get_error+0x210>)
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d011      	beq.n	80037dc <ai_platform_network_get_error+0x170>
 80037b8:	e7fe      	b.n	80037b8 <ai_platform_network_get_error+0x14c>
 80037ba:	e7fe      	b.n	80037ba <ai_platform_network_get_error+0x14e>
 80037bc:	4a30      	ldr	r2, [pc, #192]	; (8003880 <ai_platform_network_get_error+0x214>)
 80037be:	2301      	movs	r3, #1
 80037c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80037c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1fb      	bne.n	80037c4 <ai_platform_network_get_error+0x158>
 80037cc:	492a      	ldr	r1, [pc, #168]	; (8003878 <ai_platform_network_get_error+0x20c>)
 80037ce:	4b2b      	ldr	r3, [pc, #172]	; (800387c <ai_platform_network_get_error+0x210>)
 80037d0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80037d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80037d8:	429a      	cmp	r2, r3
 80037da:	d107      	bne.n	80037ec <ai_platform_network_get_error+0x180>
 80037dc:	f7ff fe7a 	bl	80034d4 <_ai_platform_release_crc>
 80037e0:	f104 0010 	add.w	r0, r4, #16
 80037e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e8:	f001 bae4 	b.w	8004db4 <core_get_error>
 80037ec:	e7fe      	b.n	80037ec <ai_platform_network_get_error+0x180>
 80037ee:	4a24      	ldr	r2, [pc, #144]	; (8003880 <ai_platform_network_get_error+0x214>)
 80037f0:	2301      	movs	r3, #1
 80037f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80037f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1fb      	bne.n	80037f6 <ai_platform_network_get_error+0x18a>
 80037fe:	491e      	ldr	r1, [pc, #120]	; (8003878 <ai_platform_network_get_error+0x20c>)
 8003800:	4b1e      	ldr	r3, [pc, #120]	; (800387c <ai_platform_network_get_error+0x210>)
 8003802:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003806:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800380a:	429a      	cmp	r2, r3
 800380c:	d0c3      	beq.n	8003796 <ai_platform_network_get_error+0x12a>
 800380e:	e7fe      	b.n	800380e <ai_platform_network_get_error+0x1a2>
 8003810:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <ai_platform_network_get_error+0x214>)
 8003812:	2301      	movs	r3, #1
 8003814:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003818:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1fb      	bne.n	8003818 <ai_platform_network_get_error+0x1ac>
 8003820:	4915      	ldr	r1, [pc, #84]	; (8003878 <ai_platform_network_get_error+0x20c>)
 8003822:	4b16      	ldr	r3, [pc, #88]	; (800387c <ai_platform_network_get_error+0x210>)
 8003824:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003828:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800382c:	429a      	cmp	r2, r3
 800382e:	d0d5      	beq.n	80037dc <ai_platform_network_get_error+0x170>
 8003830:	e7fe      	b.n	8003830 <ai_platform_network_get_error+0x1c4>
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <ai_platform_network_get_error+0x208>)
 8003834:	2301      	movs	r3, #1
 8003836:	6093      	str	r3, [r2, #8]
 8003838:	6893      	ldr	r3, [r2, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1fc      	bne.n	8003838 <ai_platform_network_get_error+0x1cc>
 800383e:	490e      	ldr	r1, [pc, #56]	; (8003878 <ai_platform_network_get_error+0x20c>)
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <ai_platform_network_get_error+0x210>)
 8003842:	6011      	str	r1, [r2, #0]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d0a5      	beq.n	8003796 <ai_platform_network_get_error+0x12a>
 800384a:	e7fe      	b.n	800384a <ai_platform_network_get_error+0x1de>
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <ai_platform_network_get_error+0x208>)
 800384e:	2301      	movs	r3, #1
 8003850:	6093      	str	r3, [r2, #8]
 8003852:	6893      	ldr	r3, [r2, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1fc      	bne.n	8003852 <ai_platform_network_get_error+0x1e6>
 8003858:	4907      	ldr	r1, [pc, #28]	; (8003878 <ai_platform_network_get_error+0x20c>)
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <ai_platform_network_get_error+0x210>)
 800385c:	6011      	str	r1, [r2, #0]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d0bb      	beq.n	80037dc <ai_platform_network_get_error+0x170>
 8003864:	e7fe      	b.n	8003864 <ai_platform_network_get_error+0x1f8>
 8003866:	bf00      	nop
 8003868:	a1c00100 	.word	0xa1c00100
 800386c:	e0042000 	.word	0xe0042000
 8003870:	5c001000 	.word	0x5c001000
 8003874:	40023000 	.word	0x40023000
 8003878:	f407a5c2 	.word	0xf407a5c2
 800387c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003880:	58024000 	.word	0x58024000

08003884 <ai_platform_network_set_error>:
 8003884:	b110      	cbz	r0, 800388c <ai_platform_network_set_error+0x8>
 8003886:	3010      	adds	r0, #16
 8003888:	f001 ba9a 	b.w	8004dc0 <core_set_error>
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <ai_platform_inputs_get>:
 8003890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003894:	b085      	sub	sp, #20
 8003896:	9102      	str	r1, [sp, #8]
 8003898:	2800      	cmp	r0, #0
 800389a:	f000 8093 	beq.w	80039c4 <ai_platform_inputs_get+0x134>
 800389e:	4baa      	ldr	r3, [pc, #680]	; (8003b48 <ai_platform_inputs_get+0x2b8>)
 80038a0:	4681      	mov	r9, r0
 80038a2:	6802      	ldr	r2, [r0, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f040 808d 	bne.w	80039c4 <ai_platform_inputs_get+0x134>
 80038aa:	f7ff fe11 	bl	80034d0 <_ai_platform_acquire_crc>
 80038ae:	4ba7      	ldr	r3, [pc, #668]	; (8003b4c <ai_platform_inputs_get+0x2bc>)
 80038b0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ba:	189a      	adds	r2, r3, r2
 80038bc:	2a01      	cmp	r2, #1
 80038be:	f240 80da 	bls.w	8003a76 <ai_platform_inputs_get+0x1e6>
 80038c2:	f240 4249 	movw	r2, #1097	; 0x449
 80038c6:	4293      	cmp	r3, r2
 80038c8:	f000 80d5 	beq.w	8003a76 <ai_platform_inputs_get+0x1e6>
 80038cc:	4aa0      	ldr	r2, [pc, #640]	; (8003b50 <ai_platform_inputs_get+0x2c0>)
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80038d8:	f000 80dc 	beq.w	8003a94 <ai_platform_inputs_get+0x204>
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	f240 4183 	movw	r1, #1155	; 0x483
 80038e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e6:	428b      	cmp	r3, r1
 80038e8:	f000 810e 	beq.w	8003b08 <ai_platform_inputs_get+0x278>
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80038f6:	f000 8143 	beq.w	8003b80 <ai_platform_inputs_get+0x2f0>
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8113 	beq.w	8003b2c <ai_platform_inputs_get+0x29c>
 8003906:	f7ff fde5 	bl	80034d4 <_ai_platform_release_crc>
 800390a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80d2 	beq.w	8003ab8 <ai_platform_inputs_get+0x228>
 8003914:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8003918:	f1ba 0f00 	cmp.w	sl, #0
 800391c:	f000 80cc 	beq.w	8003ab8 <ai_platform_inputs_get+0x228>
 8003920:	2100      	movs	r1, #0
 8003922:	f8cd 900c 	str.w	r9, [sp, #12]
 8003926:	460d      	mov	r5, r1
 8003928:	4689      	mov	r9, r1
 800392a:	e016      	b.n	800395a <ai_platform_inputs_get+0xca>
 800392c:	9a01      	ldr	r2, [sp, #4]
 800392e:	2301      	movs	r3, #1
 8003930:	f848 3002 	str.w	r3, [r8, r2]
 8003934:	69b2      	ldr	r2, [r6, #24]
 8003936:	f04f 0301 	mov.w	r3, #1
 800393a:	6856      	ldr	r6, [r2, #4]
 800393c:	3501      	adds	r5, #1
 800393e:	f109 091c 	add.w	r9, r9, #28
 8003942:	7523      	strb	r3, [r4, #20]
 8003944:	2300      	movs	r3, #0
 8003946:	6962      	ldr	r2, [r4, #20]
 8003948:	60a7      	str	r7, [r4, #8]
 800394a:	f36b 221f 	bfi	r2, fp, #8, #24
 800394e:	6126      	str	r6, [r4, #16]
 8003950:	61a1      	str	r1, [r4, #24]
 8003952:	60e3      	str	r3, [r4, #12]
 8003954:	6162      	str	r2, [r4, #20]
 8003956:	e9c4 0c00 	strd	r0, ip, [r4]
 800395a:	f8ba 3000 	ldrh.w	r3, [sl]
 800395e:	b2ac      	uxth	r4, r5
 8003960:	42ab      	cmp	r3, r5
 8003962:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	f240 80b5 	bls.w	8003ad6 <ai_platform_inputs_get+0x246>
 800396c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80b0 	beq.w	8003ad6 <ai_platform_inputs_get+0x246>
 8003976:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800397a:	2e00      	cmp	r6, #0
 800397c:	f000 80ab 	beq.w	8003ad6 <ai_platform_inputs_get+0x246>
 8003980:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003984:	69b2      	ldr	r2, [r6, #24]
 8003986:	68f1      	ldr	r1, [r6, #12]
 8003988:	6810      	ldr	r0, [r2, #0]
 800398a:	9100      	str	r1, [sp, #0]
 800398c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8003990:	68b3      	ldr	r3, [r6, #8]
 8003992:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8003996:	444c      	add	r4, r9
 8003998:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800399c:	f002 f9b2 	bl	8005d04 <ai_array_to_buffer_fmt>
 80039a0:	69b2      	ldr	r2, [r6, #24]
 80039a2:	9900      	ldr	r1, [sp, #0]
 80039a4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80039a8:	2f00      	cmp	r7, #0
 80039aa:	d0c4      	beq.n	8003936 <ai_platform_inputs_get+0xa6>
 80039ac:	2200      	movs	r2, #0
 80039ae:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80039b2:	6832      	ldr	r2, [r6, #0]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	b112      	cbz	r2, 80039be <ai_platform_inputs_get+0x12e>
 80039b8:	8852      	ldrh	r2, [r2, #2]
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	d1b6      	bne.n	800392c <ai_platform_inputs_get+0x9c>
 80039be:	69b2      	ldr	r2, [r6, #24]
 80039c0:	2700      	movs	r7, #0
 80039c2:	e7b8      	b.n	8003936 <ai_platform_inputs_get+0xa6>
 80039c4:	f7ff fd84 	bl	80034d0 <_ai_platform_acquire_crc>
 80039c8:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <ai_platform_inputs_get+0x2bc>)
 80039ca:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d4:	185a      	adds	r2, r3, r1
 80039d6:	2a01      	cmp	r2, #1
 80039d8:	d92a      	bls.n	8003a30 <ai_platform_inputs_get+0x1a0>
 80039da:	f240 4249 	movw	r2, #1097	; 0x449
 80039de:	4293      	cmp	r3, r2
 80039e0:	d026      	beq.n	8003a30 <ai_platform_inputs_get+0x1a0>
 80039e2:	4a5b      	ldr	r2, [pc, #364]	; (8003b50 <ai_platform_inputs_get+0x2c0>)
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ea:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80039ee:	d02c      	beq.n	8003a4a <ai_platform_inputs_get+0x1ba>
 80039f0:	6813      	ldr	r3, [r2, #0]
 80039f2:	f240 4183 	movw	r1, #1155	; 0x483
 80039f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fa:	428b      	cmp	r3, r1
 80039fc:	d073      	beq.n	8003ae6 <ai_platform_inputs_get+0x256>
 80039fe:	6813      	ldr	r3, [r2, #0]
 8003a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a04:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003a08:	f000 80ac 	beq.w	8003b64 <ai_platform_inputs_get+0x2d4>
 8003a0c:	6813      	ldr	r3, [r2, #0]
 8003a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d129      	bne.n	8003a6a <ai_platform_inputs_get+0x1da>
 8003a16:	4a4f      	ldr	r2, [pc, #316]	; (8003b54 <ai_platform_inputs_get+0x2c4>)
 8003a18:	2301      	movs	r3, #1
 8003a1a:	6093      	str	r3, [r2, #8]
 8003a1c:	6893      	ldr	r3, [r2, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1fc      	bne.n	8003a1c <ai_platform_inputs_get+0x18c>
 8003a22:	494d      	ldr	r1, [pc, #308]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003a24:	4b4d      	ldr	r3, [pc, #308]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003a26:	6011      	str	r1, [r2, #0]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d01d      	beq.n	8003a6a <ai_platform_inputs_get+0x1da>
 8003a2e:	e7fe      	b.n	8003a2e <ai_platform_inputs_get+0x19e>
 8003a30:	4a48      	ldr	r2, [pc, #288]	; (8003b54 <ai_platform_inputs_get+0x2c4>)
 8003a32:	2301      	movs	r3, #1
 8003a34:	6093      	str	r3, [r2, #8]
 8003a36:	6893      	ldr	r3, [r2, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1fc      	bne.n	8003a36 <ai_platform_inputs_get+0x1a6>
 8003a3c:	4946      	ldr	r1, [pc, #280]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003a40:	6011      	str	r1, [r2, #0]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d010      	beq.n	8003a6a <ai_platform_inputs_get+0x1da>
 8003a48:	e7fe      	b.n	8003a48 <ai_platform_inputs_get+0x1b8>
 8003a4a:	4a45      	ldr	r2, [pc, #276]	; (8003b60 <ai_platform_inputs_get+0x2d0>)
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a52:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1fb      	bne.n	8003a52 <ai_platform_inputs_get+0x1c2>
 8003a5a:	493f      	ldr	r1, [pc, #252]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003a5e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003a62:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d113      	bne.n	8003a92 <ai_platform_inputs_get+0x202>
 8003a6a:	f7ff fd33 	bl	80034d4 <_ai_platform_release_crc>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	b005      	add	sp, #20
 8003a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a76:	4a37      	ldr	r2, [pc, #220]	; (8003b54 <ai_platform_inputs_get+0x2c4>)
 8003a78:	2301      	movs	r3, #1
 8003a7a:	6093      	str	r3, [r2, #8]
 8003a7c:	6893      	ldr	r3, [r2, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1fc      	bne.n	8003a7c <ai_platform_inputs_get+0x1ec>
 8003a82:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	f43f af3b 	beq.w	8003906 <ai_platform_inputs_get+0x76>
 8003a90:	e7fe      	b.n	8003a90 <ai_platform_inputs_get+0x200>
 8003a92:	e7fe      	b.n	8003a92 <ai_platform_inputs_get+0x202>
 8003a94:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <ai_platform_inputs_get+0x2d0>)
 8003a96:	2301      	movs	r3, #1
 8003a98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a9c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1fb      	bne.n	8003a9c <ai_platform_inputs_get+0x20c>
 8003aa4:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003aa6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003aac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	f43f af28 	beq.w	8003906 <ai_platform_inputs_get+0x76>
 8003ab6:	e7fe      	b.n	8003ab6 <ai_platform_inputs_get+0x226>
 8003ab8:	2400      	movs	r4, #0
 8003aba:	2218      	movs	r2, #24
 8003abc:	2111      	movs	r1, #17
 8003abe:	f109 0010 	add.w	r0, r9, #16
 8003ac2:	f001 f97d 	bl	8004dc0 <core_set_error>
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	9b02      	ldr	r3, [sp, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0d0      	beq.n	8003a70 <ai_platform_inputs_get+0x1e0>
 8003ace:	801c      	strh	r4, [r3, #0]
 8003ad0:	b005      	add	sp, #20
 8003ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	d0ec      	beq.n	8003ab8 <ai_platform_inputs_get+0x228>
 8003ade:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003ae2:	6858      	ldr	r0, [r3, #4]
 8003ae4:	e7f0      	b.n	8003ac8 <ai_platform_inputs_get+0x238>
 8003ae6:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <ai_platform_inputs_get+0x2d0>)
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003aee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1fb      	bne.n	8003aee <ai_platform_inputs_get+0x25e>
 8003af6:	4918      	ldr	r1, [pc, #96]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003afa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003afe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d0b1      	beq.n	8003a6a <ai_platform_inputs_get+0x1da>
 8003b06:	e7fe      	b.n	8003b06 <ai_platform_inputs_get+0x276>
 8003b08:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <ai_platform_inputs_get+0x2d0>)
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b10:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1fb      	bne.n	8003b10 <ai_platform_inputs_get+0x280>
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003b1a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003b20:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b24:	429a      	cmp	r2, r3
 8003b26:	f43f aeee 	beq.w	8003906 <ai_platform_inputs_get+0x76>
 8003b2a:	e7fe      	b.n	8003b2a <ai_platform_inputs_get+0x29a>
 8003b2c:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <ai_platform_inputs_get+0x2c4>)
 8003b2e:	2301      	movs	r3, #1
 8003b30:	6093      	str	r3, [r2, #8]
 8003b32:	6893      	ldr	r3, [r2, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1fc      	bne.n	8003b32 <ai_platform_inputs_get+0x2a2>
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <ai_platform_inputs_get+0x2c8>)
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <ai_platform_inputs_get+0x2cc>)
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	f43f aee0 	beq.w	8003906 <ai_platform_inputs_get+0x76>
 8003b46:	e7fe      	b.n	8003b46 <ai_platform_inputs_get+0x2b6>
 8003b48:	a1c00100 	.word	0xa1c00100
 8003b4c:	e0042000 	.word	0xe0042000
 8003b50:	5c001000 	.word	0x5c001000
 8003b54:	40023000 	.word	0x40023000
 8003b58:	f407a5c2 	.word	0xf407a5c2
 8003b5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003b60:	58024000 	.word	0x58024000
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <ai_platform_inputs_get+0x30c>)
 8003b66:	2301      	movs	r3, #1
 8003b68:	6093      	str	r3, [r2, #8]
 8003b6a:	6893      	ldr	r3, [r2, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1fc      	bne.n	8003b6a <ai_platform_inputs_get+0x2da>
 8003b70:	490b      	ldr	r1, [pc, #44]	; (8003ba0 <ai_platform_inputs_get+0x310>)
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <ai_platform_inputs_get+0x314>)
 8003b74:	6011      	str	r1, [r2, #0]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f43f af76 	beq.w	8003a6a <ai_platform_inputs_get+0x1da>
 8003b7e:	e7fe      	b.n	8003b7e <ai_platform_inputs_get+0x2ee>
 8003b80:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <ai_platform_inputs_get+0x30c>)
 8003b82:	2301      	movs	r3, #1
 8003b84:	6093      	str	r3, [r2, #8]
 8003b86:	6893      	ldr	r3, [r2, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1fc      	bne.n	8003b86 <ai_platform_inputs_get+0x2f6>
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <ai_platform_inputs_get+0x310>)
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <ai_platform_inputs_get+0x314>)
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	f43f aeb6 	beq.w	8003906 <ai_platform_inputs_get+0x76>
 8003b9a:	e7fe      	b.n	8003b9a <ai_platform_inputs_get+0x30a>
 8003b9c:	40023000 	.word	0x40023000
 8003ba0:	f407a5c2 	.word	0xf407a5c2
 8003ba4:	b5e8b5cd 	.word	0xb5e8b5cd

08003ba8 <ai_platform_outputs_get>:
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	b085      	sub	sp, #20
 8003bae:	9102      	str	r1, [sp, #8]
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	f000 808f 	beq.w	8003cd4 <ai_platform_outputs_get+0x12c>
 8003bb6:	4ba8      	ldr	r3, [pc, #672]	; (8003e58 <ai_platform_outputs_get+0x2b0>)
 8003bb8:	4681      	mov	r9, r0
 8003bba:	6802      	ldr	r2, [r0, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	f040 8089 	bne.w	8003cd4 <ai_platform_outputs_get+0x12c>
 8003bc2:	f7ff fc85 	bl	80034d0 <_ai_platform_acquire_crc>
 8003bc6:	4ba5      	ldr	r3, [pc, #660]	; (8003e5c <ai_platform_outputs_get+0x2b4>)
 8003bc8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd2:	189a      	adds	r2, r3, r2
 8003bd4:	2a01      	cmp	r2, #1
 8003bd6:	f240 80d6 	bls.w	8003d86 <ai_platform_outputs_get+0x1de>
 8003bda:	f240 4249 	movw	r2, #1097	; 0x449
 8003bde:	4293      	cmp	r3, r2
 8003be0:	f000 80d1 	beq.w	8003d86 <ai_platform_outputs_get+0x1de>
 8003be4:	4a9e      	ldr	r2, [pc, #632]	; (8003e60 <ai_platform_outputs_get+0x2b8>)
 8003be6:	6813      	ldr	r3, [r2, #0]
 8003be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003bf0:	f000 80d8 	beq.w	8003da4 <ai_platform_outputs_get+0x1fc>
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	f240 4183 	movw	r1, #1155	; 0x483
 8003bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bfe:	428b      	cmp	r3, r1
 8003c00:	f000 8109 	beq.w	8003e16 <ai_platform_outputs_get+0x26e>
 8003c04:	6813      	ldr	r3, [r2, #0]
 8003c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c0a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003c0e:	f000 813f 	beq.w	8003e90 <ai_platform_outputs_get+0x2e8>
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 810e 	beq.w	8003e3a <ai_platform_outputs_get+0x292>
 8003c1e:	f7ff fc59 	bl	80034d4 <_ai_platform_release_crc>
 8003c22:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f240 80db 	bls.w	8003de2 <ai_platform_outputs_get+0x23a>
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8003c32:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c36:	460d      	mov	r5, r1
 8003c38:	4689      	mov	r9, r1
 8003c3a:	e016      	b.n	8003c6a <ai_platform_outputs_get+0xc2>
 8003c3c:	9a01      	ldr	r2, [sp, #4]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f848 3002 	str.w	r3, [r8, r2]
 8003c44:	69b2      	ldr	r2, [r6, #24]
 8003c46:	f04f 0301 	mov.w	r3, #1
 8003c4a:	6856      	ldr	r6, [r2, #4]
 8003c4c:	3501      	adds	r5, #1
 8003c4e:	f109 091c 	add.w	r9, r9, #28
 8003c52:	7523      	strb	r3, [r4, #20]
 8003c54:	2300      	movs	r3, #0
 8003c56:	6962      	ldr	r2, [r4, #20]
 8003c58:	60a7      	str	r7, [r4, #8]
 8003c5a:	f36b 221f 	bfi	r2, fp, #8, #24
 8003c5e:	6126      	str	r6, [r4, #16]
 8003c60:	61a1      	str	r1, [r4, #24]
 8003c62:	60e3      	str	r3, [r4, #12]
 8003c64:	6162      	str	r2, [r4, #20]
 8003c66:	e9c4 0c00 	strd	r0, ip, [r4]
 8003c6a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003c6e:	b2ac      	uxth	r4, r5
 8003c70:	42ab      	cmp	r3, r5
 8003c72:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	f240 80a6 	bls.w	8003dc8 <ai_platform_outputs_get+0x220>
 8003c7c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a1 	beq.w	8003dc8 <ai_platform_outputs_get+0x220>
 8003c86:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003c8a:	2e00      	cmp	r6, #0
 8003c8c:	f000 809c 	beq.w	8003dc8 <ai_platform_outputs_get+0x220>
 8003c90:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003c94:	69b2      	ldr	r2, [r6, #24]
 8003c96:	68f1      	ldr	r1, [r6, #12]
 8003c98:	6810      	ldr	r0, [r2, #0]
 8003c9a:	9100      	str	r1, [sp, #0]
 8003c9c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8003ca0:	68b3      	ldr	r3, [r6, #8]
 8003ca2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8003ca6:	444c      	add	r4, r9
 8003ca8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8003cac:	f002 f82a 	bl	8005d04 <ai_array_to_buffer_fmt>
 8003cb0:	69b2      	ldr	r2, [r6, #24]
 8003cb2:	9900      	ldr	r1, [sp, #0]
 8003cb4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8003cb8:	2f00      	cmp	r7, #0
 8003cba:	d0c4      	beq.n	8003c46 <ai_platform_outputs_get+0x9e>
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8003cc2:	6832      	ldr	r2, [r6, #0]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	b112      	cbz	r2, 8003cce <ai_platform_outputs_get+0x126>
 8003cc8:	8852      	ldrh	r2, [r2, #2]
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	d1b6      	bne.n	8003c3c <ai_platform_outputs_get+0x94>
 8003cce:	69b2      	ldr	r2, [r6, #24]
 8003cd0:	2700      	movs	r7, #0
 8003cd2:	e7b8      	b.n	8003c46 <ai_platform_outputs_get+0x9e>
 8003cd4:	f7ff fbfc 	bl	80034d0 <_ai_platform_acquire_crc>
 8003cd8:	4b60      	ldr	r3, [pc, #384]	; (8003e5c <ai_platform_outputs_get+0x2b4>)
 8003cda:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ce4:	185a      	adds	r2, r3, r1
 8003ce6:	2a01      	cmp	r2, #1
 8003ce8:	d92a      	bls.n	8003d40 <ai_platform_outputs_get+0x198>
 8003cea:	f240 4249 	movw	r2, #1097	; 0x449
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d026      	beq.n	8003d40 <ai_platform_outputs_get+0x198>
 8003cf2:	4a5b      	ldr	r2, [pc, #364]	; (8003e60 <ai_platform_outputs_get+0x2b8>)
 8003cf4:	6813      	ldr	r3, [r2, #0]
 8003cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cfa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003cfe:	d02c      	beq.n	8003d5a <ai_platform_outputs_get+0x1b2>
 8003d00:	6813      	ldr	r3, [r2, #0]
 8003d02:	f240 4183 	movw	r1, #1155	; 0x483
 8003d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0a:	428b      	cmp	r3, r1
 8003d0c:	d072      	beq.n	8003df4 <ai_platform_outputs_get+0x24c>
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d14:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003d18:	f000 80ac 	beq.w	8003e74 <ai_platform_outputs_get+0x2cc>
 8003d1c:	6813      	ldr	r3, [r2, #0]
 8003d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d129      	bne.n	8003d7a <ai_platform_outputs_get+0x1d2>
 8003d26:	4a4f      	ldr	r2, [pc, #316]	; (8003e64 <ai_platform_outputs_get+0x2bc>)
 8003d28:	2301      	movs	r3, #1
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	6893      	ldr	r3, [r2, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1fc      	bne.n	8003d2c <ai_platform_outputs_get+0x184>
 8003d32:	494d      	ldr	r1, [pc, #308]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003d34:	4b4d      	ldr	r3, [pc, #308]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003d36:	6011      	str	r1, [r2, #0]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d01d      	beq.n	8003d7a <ai_platform_outputs_get+0x1d2>
 8003d3e:	e7fe      	b.n	8003d3e <ai_platform_outputs_get+0x196>
 8003d40:	4a48      	ldr	r2, [pc, #288]	; (8003e64 <ai_platform_outputs_get+0x2bc>)
 8003d42:	2301      	movs	r3, #1
 8003d44:	6093      	str	r3, [r2, #8]
 8003d46:	6893      	ldr	r3, [r2, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1fc      	bne.n	8003d46 <ai_platform_outputs_get+0x19e>
 8003d4c:	4946      	ldr	r1, [pc, #280]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003d50:	6011      	str	r1, [r2, #0]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d010      	beq.n	8003d7a <ai_platform_outputs_get+0x1d2>
 8003d58:	e7fe      	b.n	8003d58 <ai_platform_outputs_get+0x1b0>
 8003d5a:	4a45      	ldr	r2, [pc, #276]	; (8003e70 <ai_platform_outputs_get+0x2c8>)
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003d62:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1fb      	bne.n	8003d62 <ai_platform_outputs_get+0x1ba>
 8003d6a:	493f      	ldr	r1, [pc, #252]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003d6e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003d72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d113      	bne.n	8003da2 <ai_platform_outputs_get+0x1fa>
 8003d7a:	f7ff fbab 	bl	80034d4 <_ai_platform_release_crc>
 8003d7e:	2000      	movs	r0, #0
 8003d80:	b005      	add	sp, #20
 8003d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d86:	4a37      	ldr	r2, [pc, #220]	; (8003e64 <ai_platform_outputs_get+0x2bc>)
 8003d88:	2301      	movs	r3, #1
 8003d8a:	6093      	str	r3, [r2, #8]
 8003d8c:	6893      	ldr	r3, [r2, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1fc      	bne.n	8003d8c <ai_platform_outputs_get+0x1e4>
 8003d92:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	f43f af3f 	beq.w	8003c1e <ai_platform_outputs_get+0x76>
 8003da0:	e7fe      	b.n	8003da0 <ai_platform_outputs_get+0x1f8>
 8003da2:	e7fe      	b.n	8003da2 <ai_platform_outputs_get+0x1fa>
 8003da4:	4a32      	ldr	r2, [pc, #200]	; (8003e70 <ai_platform_outputs_get+0x2c8>)
 8003da6:	2301      	movs	r3, #1
 8003da8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003dac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1fb      	bne.n	8003dac <ai_platform_outputs_get+0x204>
 8003db4:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003db6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003dba:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003dbc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	f43f af2c 	beq.w	8003c1e <ai_platform_outputs_get+0x76>
 8003dc6:	e7fe      	b.n	8003dc6 <ai_platform_outputs_get+0x21e>
 8003dc8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003dcc:	b14c      	cbz	r4, 8003de2 <ai_platform_outputs_get+0x23a>
 8003dce:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003dd2:	6858      	ldr	r0, [r3, #4]
 8003dd4:	9b02      	ldr	r3, [sp, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0d2      	beq.n	8003d80 <ai_platform_outputs_get+0x1d8>
 8003dda:	801c      	strh	r4, [r3, #0]
 8003ddc:	b005      	add	sp, #20
 8003dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de2:	2400      	movs	r4, #0
 8003de4:	2218      	movs	r2, #24
 8003de6:	2111      	movs	r1, #17
 8003de8:	f109 0010 	add.w	r0, r9, #16
 8003dec:	f000 ffe8 	bl	8004dc0 <core_set_error>
 8003df0:	4620      	mov	r0, r4
 8003df2:	e7ef      	b.n	8003dd4 <ai_platform_outputs_get+0x22c>
 8003df4:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <ai_platform_outputs_get+0x2c8>)
 8003df6:	2301      	movs	r3, #1
 8003df8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003dfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1fb      	bne.n	8003dfc <ai_platform_outputs_get+0x254>
 8003e04:	4918      	ldr	r1, [pc, #96]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003e06:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003e08:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003e0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0b2      	beq.n	8003d7a <ai_platform_outputs_get+0x1d2>
 8003e14:	e7fe      	b.n	8003e14 <ai_platform_outputs_get+0x26c>
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <ai_platform_outputs_get+0x2c8>)
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003e1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1fb      	bne.n	8003e1e <ai_platform_outputs_get+0x276>
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003e28:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003e2e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003e32:	429a      	cmp	r2, r3
 8003e34:	f43f aef3 	beq.w	8003c1e <ai_platform_outputs_get+0x76>
 8003e38:	e7fe      	b.n	8003e38 <ai_platform_outputs_get+0x290>
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <ai_platform_outputs_get+0x2bc>)
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6093      	str	r3, [r2, #8]
 8003e40:	6893      	ldr	r3, [r2, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1fc      	bne.n	8003e40 <ai_platform_outputs_get+0x298>
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <ai_platform_outputs_get+0x2c0>)
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <ai_platform_outputs_get+0x2c4>)
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f43f aee5 	beq.w	8003c1e <ai_platform_outputs_get+0x76>
 8003e54:	e7fe      	b.n	8003e54 <ai_platform_outputs_get+0x2ac>
 8003e56:	bf00      	nop
 8003e58:	a1c00100 	.word	0xa1c00100
 8003e5c:	e0042000 	.word	0xe0042000
 8003e60:	5c001000 	.word	0x5c001000
 8003e64:	40023000 	.word	0x40023000
 8003e68:	f407a5c2 	.word	0xf407a5c2
 8003e6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003e70:	58024000 	.word	0x58024000
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <ai_platform_outputs_get+0x304>)
 8003e76:	2301      	movs	r3, #1
 8003e78:	6093      	str	r3, [r2, #8]
 8003e7a:	6893      	ldr	r3, [r2, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1fc      	bne.n	8003e7a <ai_platform_outputs_get+0x2d2>
 8003e80:	490b      	ldr	r1, [pc, #44]	; (8003eb0 <ai_platform_outputs_get+0x308>)
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <ai_platform_outputs_get+0x30c>)
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f43f af76 	beq.w	8003d7a <ai_platform_outputs_get+0x1d2>
 8003e8e:	e7fe      	b.n	8003e8e <ai_platform_outputs_get+0x2e6>
 8003e90:	4a06      	ldr	r2, [pc, #24]	; (8003eac <ai_platform_outputs_get+0x304>)
 8003e92:	2301      	movs	r3, #1
 8003e94:	6093      	str	r3, [r2, #8]
 8003e96:	6893      	ldr	r3, [r2, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1fc      	bne.n	8003e96 <ai_platform_outputs_get+0x2ee>
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <ai_platform_outputs_get+0x308>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <ai_platform_outputs_get+0x30c>)
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	f43f aeba 	beq.w	8003c1e <ai_platform_outputs_get+0x76>
 8003eaa:	e7fe      	b.n	8003eaa <ai_platform_outputs_get+0x302>
 8003eac:	40023000 	.word	0x40023000
 8003eb0:	f407a5c2 	.word	0xf407a5c2
 8003eb4:	b5e8b5cd 	.word	0xb5e8b5cd

08003eb8 <ai_platform_network_create>:
 8003eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4615      	mov	r5, r2
 8003ec2:	461e      	mov	r6, r3
 8003ec4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8003ec8:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8003ecc:	f7ff fb00 	bl	80034d0 <_ai_platform_acquire_crc>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f000 80bd 	beq.w	8004050 <ai_platform_network_create+0x198>
 8003ed6:	4ba5      	ldr	r3, [pc, #660]	; (800416c <ai_platform_network_create+0x2b4>)
 8003ed8:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8003edc:	4601      	mov	r1, r0
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee4:	eb03 020c 	add.w	r2, r3, ip
 8003ee8:	2a01      	cmp	r2, #1
 8003eea:	f240 80a8 	bls.w	800403e <ai_platform_network_create+0x186>
 8003eee:	f240 4249 	movw	r2, #1097	; 0x449
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f000 80a3 	beq.w	800403e <ai_platform_network_create+0x186>
 8003ef8:	4a9d      	ldr	r2, [pc, #628]	; (8004170 <ai_platform_network_create+0x2b8>)
 8003efa:	6813      	ldr	r3, [r2, #0]
 8003efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f00:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003f04:	f000 80b9 	beq.w	800407a <ai_platform_network_create+0x1c2>
 8003f08:	6813      	ldr	r3, [r2, #0]
 8003f0a:	f240 4c83 	movw	ip, #1155	; 0x483
 8003f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f12:	4563      	cmp	r3, ip
 8003f14:	f000 80a1 	beq.w	800405a <ai_platform_network_create+0x1a2>
 8003f18:	6813      	ldr	r3, [r2, #0]
 8003f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003f22:	f000 8153 	beq.w	80041cc <ai_platform_network_create+0x314>
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 808d 	bne.w	800404c <ai_platform_network_create+0x194>
 8003f32:	4a90      	ldr	r2, [pc, #576]	; (8004174 <ai_platform_network_create+0x2bc>)
 8003f34:	2318      	movs	r3, #24
 8003f36:	6093      	str	r3, [r2, #8]
 8003f38:	6893      	ldr	r3, [r2, #8]
 8003f3a:	2b18      	cmp	r3, #24
 8003f3c:	f040 8086 	bne.w	800404c <ai_platform_network_create+0x194>
 8003f40:	2301      	movs	r3, #1
 8003f42:	6093      	str	r3, [r2, #8]
 8003f44:	6893      	ldr	r3, [r2, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1fc      	bne.n	8003f44 <ai_platform_network_create+0x8c>
 8003f4a:	4608      	mov	r0, r1
 8003f4c:	f7ff fac2 	bl	80034d4 <_ai_platform_release_crc>
 8003f50:	f7ff fabe 	bl	80034d0 <_ai_platform_acquire_crc>
 8003f54:	4b85      	ldr	r3, [pc, #532]	; (800416c <ai_platform_network_create+0x2b4>)
 8003f56:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f60:	189a      	adds	r2, r3, r2
 8003f62:	2a01      	cmp	r2, #1
 8003f64:	f240 809f 	bls.w	80040a6 <ai_platform_network_create+0x1ee>
 8003f68:	f240 4249 	movw	r2, #1097	; 0x449
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	f000 809a 	beq.w	80040a6 <ai_platform_network_create+0x1ee>
 8003f72:	4a7f      	ldr	r2, [pc, #508]	; (8004170 <ai_platform_network_create+0x2b8>)
 8003f74:	6813      	ldr	r3, [r2, #0]
 8003f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f7a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003f7e:	f000 80a0 	beq.w	80040c2 <ai_platform_network_create+0x20a>
 8003f82:	6813      	ldr	r3, [r2, #0]
 8003f84:	f240 4183 	movw	r1, #1155	; 0x483
 8003f88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	f000 80bf 	beq.w	8004110 <ai_platform_network_create+0x258>
 8003f92:	6813      	ldr	r3, [r2, #0]
 8003f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f98:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003f9c:	f000 8123 	beq.w	80041e6 <ai_platform_network_create+0x32e>
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80c4 	beq.w	8004134 <ai_platform_network_create+0x27c>
 8003fac:	f7ff fa92 	bl	80034d4 <_ai_platform_release_crc>
 8003fb0:	2c00      	cmp	r4, #0
 8003fb2:	f000 80aa 	beq.w	800410a <ai_platform_network_create+0x252>
 8003fb6:	4b70      	ldr	r3, [pc, #448]	; (8004178 <ai_platform_network_create+0x2c0>)
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	6025      	str	r5, [r4, #0]
 8003fbc:	f000 fef8 	bl	8004db0 <core_init>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	f000 8090 	beq.w	80040e6 <ai_platform_network_create+0x22e>
 8003fc6:	f7ff fa83 	bl	80034d0 <_ai_platform_acquire_crc>
 8003fca:	4b68      	ldr	r3, [pc, #416]	; (800416c <ai_platform_network_create+0x2b4>)
 8003fcc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd6:	185a      	adds	r2, r3, r1
 8003fd8:	2a01      	cmp	r2, #1
 8003fda:	f240 80b9 	bls.w	8004150 <ai_platform_network_create+0x298>
 8003fde:	f240 4249 	movw	r2, #1097	; 0x449
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	f000 80b4 	beq.w	8004150 <ai_platform_network_create+0x298>
 8003fe8:	4a61      	ldr	r2, [pc, #388]	; (8004170 <ai_platform_network_create+0x2b8>)
 8003fea:	6813      	ldr	r3, [r2, #0]
 8003fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ff0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003ff4:	f000 80c8 	beq.w	8004188 <ai_platform_network_create+0x2d0>
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	f240 4183 	movw	r1, #1155	; 0x483
 8003ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004002:	428b      	cmp	r3, r1
 8004004:	f000 8107 	beq.w	8004216 <ai_platform_network_create+0x35e>
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004012:	f000 8111 	beq.w	8004238 <ai_platform_network_create+0x380>
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 80c3 	bne.w	80041a8 <ai_platform_network_create+0x2f0>
 8004022:	4b54      	ldr	r3, [pc, #336]	; (8004174 <ai_platform_network_create+0x2bc>)
 8004024:	2201      	movs	r2, #1
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	2a00      	cmp	r2, #0
 800402c:	d1fc      	bne.n	8004028 <ai_platform_network_create+0x170>
 800402e:	4a53      	ldr	r2, [pc, #332]	; (800417c <ai_platform_network_create+0x2c4>)
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b52      	ldr	r3, [pc, #328]	; (8004180 <ai_platform_network_create+0x2c8>)
 8004036:	429a      	cmp	r2, r3
 8004038:	f000 80b6 	beq.w	80041a8 <ai_platform_network_create+0x2f0>
 800403c:	e7fe      	b.n	800403c <ai_platform_network_create+0x184>
 800403e:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <ai_platform_network_create+0x2bc>)
 8004040:	2218      	movs	r2, #24
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	2a18      	cmp	r2, #24
 8004048:	d027      	beq.n	800409a <ai_platform_network_create+0x1e2>
 800404a:	4608      	mov	r0, r1
 800404c:	f7ff fa42 	bl	80034d4 <_ai_platform_release_crc>
 8004050:	f244 1033 	movw	r0, #16691	; 0x4133
 8004054:	b003      	add	sp, #12
 8004056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800405a:	4a4a      	ldr	r2, [pc, #296]	; (8004184 <ai_platform_network_create+0x2cc>)
 800405c:	2318      	movs	r3, #24
 800405e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004062:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004066:	2b18      	cmp	r3, #24
 8004068:	d1f0      	bne.n	800404c <ai_platform_network_create+0x194>
 800406a:	2301      	movs	r3, #1
 800406c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004070:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1fb      	bne.n	8004070 <ai_platform_network_create+0x1b8>
 8004078:	e767      	b.n	8003f4a <ai_platform_network_create+0x92>
 800407a:	4a42      	ldr	r2, [pc, #264]	; (8004184 <ai_platform_network_create+0x2cc>)
 800407c:	2318      	movs	r3, #24
 800407e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004082:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004086:	2b18      	cmp	r3, #24
 8004088:	d1e0      	bne.n	800404c <ai_platform_network_create+0x194>
 800408a:	2301      	movs	r3, #1
 800408c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004090:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1fb      	bne.n	8004090 <ai_platform_network_create+0x1d8>
 8004098:	e757      	b.n	8003f4a <ai_platform_network_create+0x92>
 800409a:	2201      	movs	r2, #1
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	d1fc      	bne.n	800409e <ai_platform_network_create+0x1e6>
 80040a4:	e751      	b.n	8003f4a <ai_platform_network_create+0x92>
 80040a6:	4a33      	ldr	r2, [pc, #204]	; (8004174 <ai_platform_network_create+0x2bc>)
 80040a8:	2301      	movs	r3, #1
 80040aa:	6093      	str	r3, [r2, #8]
 80040ac:	6891      	ldr	r1, [r2, #8]
 80040ae:	2900      	cmp	r1, #0
 80040b0:	d1fc      	bne.n	80040ac <ai_platform_network_create+0x1f4>
 80040b2:	4b32      	ldr	r3, [pc, #200]	; (800417c <ai_platform_network_create+0x2c4>)
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <ai_platform_network_create+0x2c8>)
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	f43f af76 	beq.w	8003fac <ai_platform_network_create+0xf4>
 80040c0:	e7fe      	b.n	80040c0 <ai_platform_network_create+0x208>
 80040c2:	4a30      	ldr	r2, [pc, #192]	; (8004184 <ai_platform_network_create+0x2cc>)
 80040c4:	2301      	movs	r3, #1
 80040c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80040ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1fb      	bne.n	80040ca <ai_platform_network_create+0x212>
 80040d2:	4b2a      	ldr	r3, [pc, #168]	; (800417c <ai_platform_network_create+0x2c4>)
 80040d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80040d8:	4b29      	ldr	r3, [pc, #164]	; (8004180 <ai_platform_network_create+0x2c8>)
 80040da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80040de:	429a      	cmp	r2, r3
 80040e0:	f43f af64 	beq.w	8003fac <ai_platform_network_create+0xf4>
 80040e4:	e7fe      	b.n	80040e4 <ai_platform_network_create+0x22c>
 80040e6:	f04f 0930 	mov.w	r9, #48	; 0x30
 80040ea:	2300      	movs	r3, #0
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	2410      	movs	r4, #16
 80040f0:	4642      	mov	r2, r8
 80040f2:	4639      	mov	r1, r7
 80040f4:	4630      	mov	r0, r6
 80040f6:	f001 fea9 	bl	8005e4c <ai_version_get>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2000      	movs	r0, #0
 80040fe:	64ab      	str	r3, [r5, #72]	; 0x48
 8004100:	f369 0007 	bfi	r0, r9, #0, #8
 8004104:	f364 201f 	bfi	r0, r4, #8, #24
 8004108:	e7a4      	b.n	8004054 <ai_platform_network_create+0x19c>
 800410a:	f241 0010 	movw	r0, #4112	; 0x1010
 800410e:	e7a1      	b.n	8004054 <ai_platform_network_create+0x19c>
 8004110:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <ai_platform_network_create+0x2cc>)
 8004112:	2301      	movs	r3, #1
 8004114:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004118:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1fb      	bne.n	8004118 <ai_platform_network_create+0x260>
 8004120:	4b16      	ldr	r3, [pc, #88]	; (800417c <ai_platform_network_create+0x2c4>)
 8004122:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <ai_platform_network_create+0x2c8>)
 8004128:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800412c:	429a      	cmp	r2, r3
 800412e:	f43f af3d 	beq.w	8003fac <ai_platform_network_create+0xf4>
 8004132:	e7fe      	b.n	8004132 <ai_platform_network_create+0x27a>
 8004134:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <ai_platform_network_create+0x2bc>)
 8004136:	2301      	movs	r3, #1
 8004138:	6093      	str	r3, [r2, #8]
 800413a:	6893      	ldr	r3, [r2, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1fc      	bne.n	800413a <ai_platform_network_create+0x282>
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <ai_platform_network_create+0x2c4>)
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <ai_platform_network_create+0x2c8>)
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	f43f af2f 	beq.w	8003fac <ai_platform_network_create+0xf4>
 800414e:	e7fe      	b.n	800414e <ai_platform_network_create+0x296>
 8004150:	4a08      	ldr	r2, [pc, #32]	; (8004174 <ai_platform_network_create+0x2bc>)
 8004152:	2301      	movs	r3, #1
 8004154:	6093      	str	r3, [r2, #8]
 8004156:	6893      	ldr	r3, [r2, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1fc      	bne.n	8004156 <ai_platform_network_create+0x29e>
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <ai_platform_network_create+0x2c4>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <ai_platform_network_create+0x2c8>)
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d01f      	beq.n	80041a8 <ai_platform_network_create+0x2f0>
 8004168:	e7fe      	b.n	8004168 <ai_platform_network_create+0x2b0>
 800416a:	bf00      	nop
 800416c:	e0042000 	.word	0xe0042000
 8004170:	5c001000 	.word	0x5c001000
 8004174:	40023000 	.word	0x40023000
 8004178:	a1c00100 	.word	0xa1c00100
 800417c:	f407a5c2 	.word	0xf407a5c2
 8004180:	b5e8b5cd 	.word	0xb5e8b5cd
 8004184:	58024000 	.word	0x58024000
 8004188:	4a33      	ldr	r2, [pc, #204]	; (8004258 <ai_platform_network_create+0x3a0>)
 800418a:	2301      	movs	r3, #1
 800418c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004190:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1fb      	bne.n	8004190 <ai_platform_network_create+0x2d8>
 8004198:	4b30      	ldr	r3, [pc, #192]	; (800425c <ai_platform_network_create+0x3a4>)
 800419a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800419e:	4b30      	ldr	r3, [pc, #192]	; (8004260 <ai_platform_network_create+0x3a8>)
 80041a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d12c      	bne.n	8004202 <ai_platform_network_create+0x34a>
 80041a8:	f7ff f994 	bl	80034d4 <_ai_platform_release_crc>
 80041ac:	2200      	movs	r2, #0
 80041ae:	4639      	mov	r1, r7
 80041b0:	4630      	mov	r0, r6
 80041b2:	f001 fe4b 	bl	8005e4c <ai_version_get>
 80041b6:	4681      	mov	r9, r0
 80041b8:	2200      	movs	r2, #0
 80041ba:	2105      	movs	r1, #5
 80041bc:	2001      	movs	r0, #1
 80041be:	f001 fe45 	bl	8005e4c <ai_version_get>
 80041c2:	4581      	cmp	r9, r0
 80041c4:	d01e      	beq.n	8004204 <ai_platform_network_create+0x34c>
 80041c6:	f04f 0901 	mov.w	r9, #1
 80041ca:	e78e      	b.n	80040ea <ai_platform_network_create+0x232>
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <ai_platform_network_create+0x3ac>)
 80041ce:	2218      	movs	r2, #24
 80041d0:	609a      	str	r2, [r3, #8]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	2a18      	cmp	r2, #24
 80041d6:	f47f af39 	bne.w	800404c <ai_platform_network_create+0x194>
 80041da:	2201      	movs	r2, #1
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	d1fc      	bne.n	80041de <ai_platform_network_create+0x326>
 80041e4:	e6b1      	b.n	8003f4a <ai_platform_network_create+0x92>
 80041e6:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <ai_platform_network_create+0x3ac>)
 80041e8:	2301      	movs	r3, #1
 80041ea:	6093      	str	r3, [r2, #8]
 80041ec:	6893      	ldr	r3, [r2, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1fc      	bne.n	80041ec <ai_platform_network_create+0x334>
 80041f2:	4b1a      	ldr	r3, [pc, #104]	; (800425c <ai_platform_network_create+0x3a4>)
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <ai_platform_network_create+0x3a8>)
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	f43f aed6 	beq.w	8003fac <ai_platform_network_create+0xf4>
 8004200:	e7fe      	b.n	8004200 <ai_platform_network_create+0x348>
 8004202:	e7fe      	b.n	8004202 <ai_platform_network_create+0x34a>
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <ai_platform_network_create+0x3b0>)
 8004206:	a801      	add	r0, sp, #4
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	f000 fde5 	bl	8004dd8 <ai_check_custom_types>
 800420e:	b300      	cbz	r0, 8004252 <ai_platform_network_create+0x39a>
 8004210:	2400      	movs	r4, #0
 8004212:	46a1      	mov	r9, r4
 8004214:	e76c      	b.n	80040f0 <ai_platform_network_create+0x238>
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <ai_platform_network_create+0x3a0>)
 8004218:	2201      	movs	r2, #1
 800421a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800421e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8004222:	2a00      	cmp	r2, #0
 8004224:	d1fb      	bne.n	800421e <ai_platform_network_create+0x366>
 8004226:	4a0d      	ldr	r2, [pc, #52]	; (800425c <ai_platform_network_create+0x3a4>)
 8004228:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800422c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <ai_platform_network_create+0x3a8>)
 8004232:	429a      	cmp	r2, r3
 8004234:	d0b8      	beq.n	80041a8 <ai_platform_network_create+0x2f0>
 8004236:	e7fe      	b.n	8004236 <ai_platform_network_create+0x37e>
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <ai_platform_network_create+0x3ac>)
 800423a:	2201      	movs	r2, #1
 800423c:	609a      	str	r2, [r3, #8]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	2a00      	cmp	r2, #0
 8004242:	d1fc      	bne.n	800423e <ai_platform_network_create+0x386>
 8004244:	4a05      	ldr	r2, [pc, #20]	; (800425c <ai_platform_network_create+0x3a4>)
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <ai_platform_network_create+0x3a8>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d0ab      	beq.n	80041a8 <ai_platform_network_create+0x2f0>
 8004250:	e7fe      	b.n	8004250 <ai_platform_network_create+0x398>
 8004252:	f04f 0902 	mov.w	r9, #2
 8004256:	e748      	b.n	80040ea <ai_platform_network_create+0x232>
 8004258:	58024000 	.word	0x58024000
 800425c:	f407a5c2 	.word	0xf407a5c2
 8004260:	b5e8b5cd 	.word	0xb5e8b5cd
 8004264:	40023000 	.word	0x40023000
 8004268:	84048403 	.word	0x84048403

0800426c <ai_platform_network_init>:
 800426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004270:	2800      	cmp	r0, #0
 8004272:	d052      	beq.n	800431a <ai_platform_network_init+0xae>
 8004274:	4bab      	ldr	r3, [pc, #684]	; (8004524 <ai_platform_network_init+0x2b8>)
 8004276:	4604      	mov	r4, r0
 8004278:	6802      	ldr	r2, [r0, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d14d      	bne.n	800431a <ai_platform_network_init+0xae>
 800427e:	460d      	mov	r5, r1
 8004280:	f7ff f926 	bl	80034d0 <_ai_platform_acquire_crc>
 8004284:	4ba8      	ldr	r3, [pc, #672]	; (8004528 <ai_platform_network_init+0x2bc>)
 8004286:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004290:	189a      	adds	r2, r3, r2
 8004292:	2a01      	cmp	r2, #1
 8004294:	f240 809b 	bls.w	80043ce <ai_platform_network_init+0x162>
 8004298:	f240 4249 	movw	r2, #1097	; 0x449
 800429c:	4293      	cmp	r3, r2
 800429e:	f000 8096 	beq.w	80043ce <ai_platform_network_init+0x162>
 80042a2:	4aa2      	ldr	r2, [pc, #648]	; (800452c <ai_platform_network_init+0x2c0>)
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042aa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80042ae:	f000 809d 	beq.w	80043ec <ai_platform_network_init+0x180>
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	f240 4183 	movw	r1, #1155	; 0x483
 80042b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042bc:	428b      	cmp	r3, r1
 80042be:	f000 80e4 	beq.w	800448a <ai_platform_network_init+0x21e>
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80042cc:	f000 811b 	beq.w	8004506 <ai_platform_network_init+0x29a>
 80042d0:	6813      	ldr	r3, [r2, #0]
 80042d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80f9 	beq.w	80044ce <ai_platform_network_init+0x262>
 80042dc:	f7ff f8fa 	bl	80034d4 <_ai_platform_release_crc>
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	f000 8147 	beq.w	8004574 <ai_platform_network_init+0x308>
 80042e6:	4b92      	ldr	r3, [pc, #584]	; (8004530 <ai_platform_network_init+0x2c4>)
 80042e8:	682a      	ldr	r2, [r5, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	f040 8090 	bne.w	8004410 <ai_platform_network_init+0x1a4>
 80042f0:	692b      	ldr	r3, [r5, #16]
 80042f2:	89ae      	ldrh	r6, [r5, #12]
 80042f4:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80042f8:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80042fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80042fe:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8004302:	2303      	movs	r3, #3
 8004304:	84a6      	strh	r6, [r4, #36]	; 0x24
 8004306:	4626      	mov	r6, r4
 8004308:	4620      	mov	r0, r4
 800430a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800430e:	60e3      	str	r3, [r4, #12]
 8004310:	f000 fd8a 	bl	8004e28 <ai_layers_init_all>
 8004314:	4630      	mov	r0, r6
 8004316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431a:	f7ff f8d9 	bl	80034d0 <_ai_platform_acquire_crc>
 800431e:	4b82      	ldr	r3, [pc, #520]	; (8004528 <ai_platform_network_init+0x2bc>)
 8004320:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800432a:	185a      	adds	r2, r3, r1
 800432c:	2a01      	cmp	r2, #1
 800432e:	d92b      	bls.n	8004388 <ai_platform_network_init+0x11c>
 8004330:	f240 4249 	movw	r2, #1097	; 0x449
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <ai_platform_network_init+0x11c>
 8004338:	4a7c      	ldr	r2, [pc, #496]	; (800452c <ai_platform_network_init+0x2c0>)
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004340:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004344:	d02d      	beq.n	80043a2 <ai_platform_network_init+0x136>
 8004346:	6813      	ldr	r3, [r2, #0]
 8004348:	f240 4183 	movw	r1, #1155	; 0x483
 800434c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004350:	428b      	cmp	r3, r1
 8004352:	f000 8089 	beq.w	8004468 <ai_platform_network_init+0x1fc>
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800435c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004360:	f000 80c3 	beq.w	80044ea <ai_platform_network_init+0x27e>
 8004364:	6813      	ldr	r3, [r2, #0]
 8004366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800436a:	2b00      	cmp	r3, #0
 800436c:	d129      	bne.n	80043c2 <ai_platform_network_init+0x156>
 800436e:	4a71      	ldr	r2, [pc, #452]	; (8004534 <ai_platform_network_init+0x2c8>)
 8004370:	2301      	movs	r3, #1
 8004372:	6093      	str	r3, [r2, #8]
 8004374:	6893      	ldr	r3, [r2, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1fc      	bne.n	8004374 <ai_platform_network_init+0x108>
 800437a:	496f      	ldr	r1, [pc, #444]	; (8004538 <ai_platform_network_init+0x2cc>)
 800437c:	4b6f      	ldr	r3, [pc, #444]	; (800453c <ai_platform_network_init+0x2d0>)
 800437e:	6011      	str	r1, [r2, #0]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d01d      	beq.n	80043c2 <ai_platform_network_init+0x156>
 8004386:	e7fe      	b.n	8004386 <ai_platform_network_init+0x11a>
 8004388:	4a6a      	ldr	r2, [pc, #424]	; (8004534 <ai_platform_network_init+0x2c8>)
 800438a:	2301      	movs	r3, #1
 800438c:	6093      	str	r3, [r2, #8]
 800438e:	6893      	ldr	r3, [r2, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1fc      	bne.n	800438e <ai_platform_network_init+0x122>
 8004394:	4968      	ldr	r1, [pc, #416]	; (8004538 <ai_platform_network_init+0x2cc>)
 8004396:	4b69      	ldr	r3, [pc, #420]	; (800453c <ai_platform_network_init+0x2d0>)
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d010      	beq.n	80043c2 <ai_platform_network_init+0x156>
 80043a0:	e7fe      	b.n	80043a0 <ai_platform_network_init+0x134>
 80043a2:	4a67      	ldr	r2, [pc, #412]	; (8004540 <ai_platform_network_init+0x2d4>)
 80043a4:	2301      	movs	r3, #1
 80043a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80043aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1fb      	bne.n	80043aa <ai_platform_network_init+0x13e>
 80043b2:	4961      	ldr	r1, [pc, #388]	; (8004538 <ai_platform_network_init+0x2cc>)
 80043b4:	4b61      	ldr	r3, [pc, #388]	; (800453c <ai_platform_network_init+0x2d0>)
 80043b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80043ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80043be:	429a      	cmp	r2, r3
 80043c0:	d113      	bne.n	80043ea <ai_platform_network_init+0x17e>
 80043c2:	2600      	movs	r6, #0
 80043c4:	f7ff f886 	bl	80034d4 <_ai_platform_release_crc>
 80043c8:	4630      	mov	r0, r6
 80043ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ce:	4a59      	ldr	r2, [pc, #356]	; (8004534 <ai_platform_network_init+0x2c8>)
 80043d0:	2301      	movs	r3, #1
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	6893      	ldr	r3, [r2, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1fc      	bne.n	80043d4 <ai_platform_network_init+0x168>
 80043da:	4b57      	ldr	r3, [pc, #348]	; (8004538 <ai_platform_network_init+0x2cc>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b57      	ldr	r3, [pc, #348]	; (800453c <ai_platform_network_init+0x2d0>)
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	f43f af7a 	beq.w	80042dc <ai_platform_network_init+0x70>
 80043e8:	e7fe      	b.n	80043e8 <ai_platform_network_init+0x17c>
 80043ea:	e7fe      	b.n	80043ea <ai_platform_network_init+0x17e>
 80043ec:	4a54      	ldr	r2, [pc, #336]	; (8004540 <ai_platform_network_init+0x2d4>)
 80043ee:	2301      	movs	r3, #1
 80043f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80043f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1fb      	bne.n	80043f4 <ai_platform_network_init+0x188>
 80043fc:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <ai_platform_network_init+0x2cc>)
 80043fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004402:	4b4e      	ldr	r3, [pc, #312]	; (800453c <ai_platform_network_init+0x2d0>)
 8004404:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004408:	429a      	cmp	r2, r3
 800440a:	f43f af67 	beq.w	80042dc <ai_platform_network_init+0x70>
 800440e:	e7fe      	b.n	800440e <ai_platform_network_init+0x1a2>
 8004410:	2101      	movs	r1, #1
 8004412:	4628      	mov	r0, r5
 8004414:	f105 081c 	add.w	r8, r5, #28
 8004418:	686e      	ldr	r6, [r5, #4]
 800441a:	f7ff f80b 	bl	8003434 <ai_buffer_get_size>
 800441e:	4607      	mov	r7, r0
 8004420:	2101      	movs	r1, #1
 8004422:	4640      	mov	r0, r8
 8004424:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8004428:	f7ff f804 	bl	8003434 <ai_buffer_get_size>
 800442c:	2f00      	cmp	r7, #0
 800442e:	d13e      	bne.n	80044ae <ai_platform_network_init+0x242>
 8004430:	2800      	cmp	r0, #0
 8004432:	f000 808e 	beq.w	8004552 <ai_platform_network_init+0x2e6>
 8004436:	f1b9 0f00 	cmp.w	r9, #0
 800443a:	f000 8094 	beq.w	8004566 <ai_platform_network_init+0x2fa>
 800443e:	f04f 0c01 	mov.w	ip, #1
 8004442:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004444:	2600      	movs	r6, #0
 8004446:	83e7      	strh	r7, [r4, #30]
 8004448:	4563      	cmp	r3, ip
 800444a:	83a6      	strh	r6, [r4, #28]
 800444c:	d37a      	bcc.n	8004544 <ai_platform_network_init+0x2d8>
 800444e:	f1bc 0f00 	cmp.w	ip, #0
 8004452:	f000 809c 	beq.w	800458e <ai_platform_network_init+0x322>
 8004456:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004458:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800445c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800445e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004462:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004466:	e74c      	b.n	8004302 <ai_platform_network_init+0x96>
 8004468:	4a35      	ldr	r2, [pc, #212]	; (8004540 <ai_platform_network_init+0x2d4>)
 800446a:	2301      	movs	r3, #1
 800446c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004470:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1fb      	bne.n	8004470 <ai_platform_network_init+0x204>
 8004478:	492f      	ldr	r1, [pc, #188]	; (8004538 <ai_platform_network_init+0x2cc>)
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <ai_platform_network_init+0x2d0>)
 800447c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004480:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004484:	429a      	cmp	r2, r3
 8004486:	d09c      	beq.n	80043c2 <ai_platform_network_init+0x156>
 8004488:	e7fe      	b.n	8004488 <ai_platform_network_init+0x21c>
 800448a:	4a2d      	ldr	r2, [pc, #180]	; (8004540 <ai_platform_network_init+0x2d4>)
 800448c:	2301      	movs	r3, #1
 800448e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004492:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1fb      	bne.n	8004492 <ai_platform_network_init+0x226>
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <ai_platform_network_init+0x2cc>)
 800449c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <ai_platform_network_init+0x2d0>)
 80044a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80044a6:	429a      	cmp	r2, r3
 80044a8:	f43f af18 	beq.w	80042dc <ai_platform_network_init+0x70>
 80044ac:	e7fe      	b.n	80044ac <ai_platform_network_init+0x240>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d153      	bne.n	800455a <ai_platform_network_init+0x2ee>
 80044b2:	4680      	mov	r8, r0
 80044b4:	4684      	mov	ip, r0
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	d063      	beq.n	8004582 <ai_platform_network_init+0x316>
 80044ba:	8be6      	ldrh	r6, [r4, #30]
 80044bc:	2e00      	cmp	r6, #0
 80044be:	d168      	bne.n	8004592 <ai_platform_network_init+0x326>
 80044c0:	2212      	movs	r2, #18
 80044c2:	2116      	movs	r1, #22
 80044c4:	f104 0010 	add.w	r0, r4, #16
 80044c8:	f000 fc7a 	bl	8004dc0 <core_set_error>
 80044cc:	e77c      	b.n	80043c8 <ai_platform_network_init+0x15c>
 80044ce:	4a19      	ldr	r2, [pc, #100]	; (8004534 <ai_platform_network_init+0x2c8>)
 80044d0:	2301      	movs	r3, #1
 80044d2:	6093      	str	r3, [r2, #8]
 80044d4:	6893      	ldr	r3, [r2, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1fc      	bne.n	80044d4 <ai_platform_network_init+0x268>
 80044da:	4b17      	ldr	r3, [pc, #92]	; (8004538 <ai_platform_network_init+0x2cc>)
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b17      	ldr	r3, [pc, #92]	; (800453c <ai_platform_network_init+0x2d0>)
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f43f aefa 	beq.w	80042dc <ai_platform_network_init+0x70>
 80044e8:	e7fe      	b.n	80044e8 <ai_platform_network_init+0x27c>
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <ai_platform_network_init+0x2c8>)
 80044ec:	2301      	movs	r3, #1
 80044ee:	6093      	str	r3, [r2, #8]
 80044f0:	6893      	ldr	r3, [r2, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1fc      	bne.n	80044f0 <ai_platform_network_init+0x284>
 80044f6:	4910      	ldr	r1, [pc, #64]	; (8004538 <ai_platform_network_init+0x2cc>)
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <ai_platform_network_init+0x2d0>)
 80044fa:	6011      	str	r1, [r2, #0]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	f43f af5f 	beq.w	80043c2 <ai_platform_network_init+0x156>
 8004504:	e7fe      	b.n	8004504 <ai_platform_network_init+0x298>
 8004506:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <ai_platform_network_init+0x2c8>)
 8004508:	2301      	movs	r3, #1
 800450a:	6093      	str	r3, [r2, #8]
 800450c:	6893      	ldr	r3, [r2, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1fc      	bne.n	800450c <ai_platform_network_init+0x2a0>
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <ai_platform_network_init+0x2cc>)
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <ai_platform_network_init+0x2d0>)
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	f43f aede 	beq.w	80042dc <ai_platform_network_init+0x70>
 8004520:	e7fe      	b.n	8004520 <ai_platform_network_init+0x2b4>
 8004522:	bf00      	nop
 8004524:	a1c00100 	.word	0xa1c00100
 8004528:	e0042000 	.word	0xe0042000
 800452c:	5c001000 	.word	0x5c001000
 8004530:	a1facade 	.word	0xa1facade
 8004534:	40023000 	.word	0x40023000
 8004538:	f407a5c2 	.word	0xf407a5c2
 800453c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004540:	58024000 	.word	0x58024000
 8004544:	2213      	movs	r2, #19
 8004546:	2116      	movs	r1, #22
 8004548:	f104 0010 	add.w	r0, r4, #16
 800454c:	f000 fc38 	bl	8004dc0 <core_set_error>
 8004550:	e73a      	b.n	80043c8 <ai_platform_network_init+0x15c>
 8004552:	4607      	mov	r7, r0
 8004554:	4680      	mov	r8, r0
 8004556:	4684      	mov	ip, r0
 8004558:	e773      	b.n	8004442 <ai_platform_network_init+0x1d6>
 800455a:	f1b9 0f00 	cmp.w	r9, #0
 800455e:	d002      	beq.n	8004566 <ai_platform_network_init+0x2fa>
 8004560:	f04f 0c01 	mov.w	ip, #1
 8004564:	e7a7      	b.n	80044b6 <ai_platform_network_init+0x24a>
 8004566:	2110      	movs	r1, #16
 8004568:	2213      	movs	r2, #19
 800456a:	2600      	movs	r6, #0
 800456c:	1860      	adds	r0, r4, r1
 800456e:	f000 fc27 	bl	8004dc0 <core_set_error>
 8004572:	e729      	b.n	80043c8 <ai_platform_network_init+0x15c>
 8004574:	2110      	movs	r1, #16
 8004576:	2211      	movs	r2, #17
 8004578:	462e      	mov	r6, r5
 800457a:	1860      	adds	r0, r4, r1
 800457c:	f000 fc20 	bl	8004dc0 <core_set_error>
 8004580:	e722      	b.n	80043c8 <ai_platform_network_init+0x15c>
 8004582:	2110      	movs	r1, #16
 8004584:	2212      	movs	r2, #18
 8004586:	1860      	adds	r0, r4, r1
 8004588:	f000 fc1a 	bl	8004dc0 <core_set_error>
 800458c:	e71c      	b.n	80043c8 <ai_platform_network_init+0x15c>
 800458e:	4666      	mov	r6, ip
 8004590:	e6b7      	b.n	8004302 <ai_platform_network_init+0x96>
 8004592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004594:	6a26      	ldr	r6, [r4, #32]
 8004596:	2701      	movs	r7, #1
 8004598:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800459a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800459e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80045a2:	e74e      	b.n	8004442 <ai_platform_network_init+0x1d6>

080045a4 <ai_platform_network_post_init>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d04e      	beq.n	8004648 <ai_platform_network_post_init+0xa4>
 80045aa:	4b8c      	ldr	r3, [pc, #560]	; (80047dc <ai_platform_network_post_init+0x238>)
 80045ac:	4604      	mov	r4, r0
 80045ae:	6802      	ldr	r2, [r0, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d149      	bne.n	8004648 <ai_platform_network_post_init+0xa4>
 80045b4:	f7fe ff8c 	bl	80034d0 <_ai_platform_acquire_crc>
 80045b8:	4b89      	ldr	r3, [pc, #548]	; (80047e0 <ai_platform_network_post_init+0x23c>)
 80045ba:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045c4:	189a      	adds	r2, r3, r2
 80045c6:	2a01      	cmp	r2, #1
 80045c8:	f240 8095 	bls.w	80046f6 <ai_platform_network_post_init+0x152>
 80045cc:	f240 4249 	movw	r2, #1097	; 0x449
 80045d0:	4293      	cmp	r3, r2
 80045d2:	f000 8090 	beq.w	80046f6 <ai_platform_network_post_init+0x152>
 80045d6:	4a83      	ldr	r2, [pc, #524]	; (80047e4 <ai_platform_network_post_init+0x240>)
 80045d8:	6813      	ldr	r3, [r2, #0]
 80045da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80045e2:	f000 8096 	beq.w	8004712 <ai_platform_network_post_init+0x16e>
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	f240 4183 	movw	r1, #1155	; 0x483
 80045ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f0:	428b      	cmp	r3, r1
 80045f2:	f000 80b8 	beq.w	8004766 <ai_platform_network_post_init+0x1c2>
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045fc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004600:	f000 80de 	beq.w	80047c0 <ai_platform_network_post_init+0x21c>
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80bd 	beq.w	800478a <ai_platform_network_post_init+0x1e6>
 8004610:	f7fe ff60 	bl	80034d4 <_ai_platform_release_crc>
 8004614:	68e3      	ldr	r3, [r4, #12]
 8004616:	f013 0502 	ands.w	r5, r3, #2
 800461a:	f000 808c 	beq.w	8004736 <ai_platform_network_post_init+0x192>
 800461e:	4620      	mov	r0, r4
 8004620:	f000 fc10 	bl	8004e44 <ai_layers_post_init_all>
 8004624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004626:	b16b      	cbz	r3, 8004644 <ai_platform_network_post_init+0xa0>
 8004628:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800462a:	e007      	b.n	800463c <ai_platform_network_post_init+0x98>
 800462c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004630:	4798      	blx	r3
 8004632:	692b      	ldr	r3, [r5, #16]
 8004634:	b133      	cbz	r3, 8004644 <ai_platform_network_post_init+0xa0>
 8004636:	42ab      	cmp	r3, r5
 8004638:	461d      	mov	r5, r3
 800463a:	d003      	beq.n	8004644 <ai_platform_network_post_init+0xa0>
 800463c:	4629      	mov	r1, r5
 800463e:	2000      	movs	r0, #0
 8004640:	2d00      	cmp	r5, #0
 8004642:	d1f3      	bne.n	800462c <ai_platform_network_post_init+0x88>
 8004644:	2001      	movs	r0, #1
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	f7fe ff42 	bl	80034d0 <_ai_platform_acquire_crc>
 800464c:	4b64      	ldr	r3, [pc, #400]	; (80047e0 <ai_platform_network_post_init+0x23c>)
 800464e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004658:	185a      	adds	r2, r3, r1
 800465a:	2a01      	cmp	r2, #1
 800465c:	d92a      	bls.n	80046b4 <ai_platform_network_post_init+0x110>
 800465e:	f240 4249 	movw	r2, #1097	; 0x449
 8004662:	4293      	cmp	r3, r2
 8004664:	d026      	beq.n	80046b4 <ai_platform_network_post_init+0x110>
 8004666:	4a5f      	ldr	r2, [pc, #380]	; (80047e4 <ai_platform_network_post_init+0x240>)
 8004668:	6813      	ldr	r3, [r2, #0]
 800466a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800466e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004672:	d02c      	beq.n	80046ce <ai_platform_network_post_init+0x12a>
 8004674:	6813      	ldr	r3, [r2, #0]
 8004676:	f240 4183 	movw	r1, #1155	; 0x483
 800467a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800467e:	428b      	cmp	r3, r1
 8004680:	d060      	beq.n	8004744 <ai_platform_network_post_init+0x1a0>
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004688:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800468c:	f000 808b 	beq.w	80047a6 <ai_platform_network_post_init+0x202>
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004696:	2b00      	cmp	r3, #0
 8004698:	d129      	bne.n	80046ee <ai_platform_network_post_init+0x14a>
 800469a:	4a53      	ldr	r2, [pc, #332]	; (80047e8 <ai_platform_network_post_init+0x244>)
 800469c:	2301      	movs	r3, #1
 800469e:	6093      	str	r3, [r2, #8]
 80046a0:	6893      	ldr	r3, [r2, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1fc      	bne.n	80046a0 <ai_platform_network_post_init+0xfc>
 80046a6:	4951      	ldr	r1, [pc, #324]	; (80047ec <ai_platform_network_post_init+0x248>)
 80046a8:	4b51      	ldr	r3, [pc, #324]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 80046aa:	6011      	str	r1, [r2, #0]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d01d      	beq.n	80046ee <ai_platform_network_post_init+0x14a>
 80046b2:	e7fe      	b.n	80046b2 <ai_platform_network_post_init+0x10e>
 80046b4:	4a4c      	ldr	r2, [pc, #304]	; (80047e8 <ai_platform_network_post_init+0x244>)
 80046b6:	2301      	movs	r3, #1
 80046b8:	6093      	str	r3, [r2, #8]
 80046ba:	6893      	ldr	r3, [r2, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1fc      	bne.n	80046ba <ai_platform_network_post_init+0x116>
 80046c0:	494a      	ldr	r1, [pc, #296]	; (80047ec <ai_platform_network_post_init+0x248>)
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d010      	beq.n	80046ee <ai_platform_network_post_init+0x14a>
 80046cc:	e7fe      	b.n	80046cc <ai_platform_network_post_init+0x128>
 80046ce:	4a49      	ldr	r2, [pc, #292]	; (80047f4 <ai_platform_network_post_init+0x250>)
 80046d0:	2301      	movs	r3, #1
 80046d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80046d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1fb      	bne.n	80046d6 <ai_platform_network_post_init+0x132>
 80046de:	4943      	ldr	r1, [pc, #268]	; (80047ec <ai_platform_network_post_init+0x248>)
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 80046e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80046e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d110      	bne.n	8004710 <ai_platform_network_post_init+0x16c>
 80046ee:	f7fe fef1 	bl	80034d4 <_ai_platform_release_crc>
 80046f2:	2000      	movs	r0, #0
 80046f4:	bd38      	pop	{r3, r4, r5, pc}
 80046f6:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <ai_platform_network_post_init+0x244>)
 80046f8:	2301      	movs	r3, #1
 80046fa:	6093      	str	r3, [r2, #8]
 80046fc:	6893      	ldr	r3, [r2, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1fc      	bne.n	80046fc <ai_platform_network_post_init+0x158>
 8004702:	493a      	ldr	r1, [pc, #232]	; (80047ec <ai_platform_network_post_init+0x248>)
 8004704:	4b3a      	ldr	r3, [pc, #232]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 8004706:	6011      	str	r1, [r2, #0]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d080      	beq.n	8004610 <ai_platform_network_post_init+0x6c>
 800470e:	e7fe      	b.n	800470e <ai_platform_network_post_init+0x16a>
 8004710:	e7fe      	b.n	8004710 <ai_platform_network_post_init+0x16c>
 8004712:	4a38      	ldr	r2, [pc, #224]	; (80047f4 <ai_platform_network_post_init+0x250>)
 8004714:	2301      	movs	r3, #1
 8004716:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800471a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1fb      	bne.n	800471a <ai_platform_network_post_init+0x176>
 8004722:	4932      	ldr	r1, [pc, #200]	; (80047ec <ai_platform_network_post_init+0x248>)
 8004724:	4b32      	ldr	r3, [pc, #200]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 8004726:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800472a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800472e:	429a      	cmp	r2, r3
 8004730:	f43f af6e 	beq.w	8004610 <ai_platform_network_post_init+0x6c>
 8004734:	e7fe      	b.n	8004734 <ai_platform_network_post_init+0x190>
 8004736:	2210      	movs	r2, #16
 8004738:	2111      	movs	r1, #17
 800473a:	18a0      	adds	r0, r4, r2
 800473c:	f000 fb40 	bl	8004dc0 <core_set_error>
 8004740:	4628      	mov	r0, r5
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <ai_platform_network_post_init+0x250>)
 8004746:	2301      	movs	r3, #1
 8004748:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800474c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1fb      	bne.n	800474c <ai_platform_network_post_init+0x1a8>
 8004754:	4925      	ldr	r1, [pc, #148]	; (80047ec <ai_platform_network_post_init+0x248>)
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 8004758:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800475c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004760:	429a      	cmp	r2, r3
 8004762:	d0c4      	beq.n	80046ee <ai_platform_network_post_init+0x14a>
 8004764:	e7fe      	b.n	8004764 <ai_platform_network_post_init+0x1c0>
 8004766:	4a23      	ldr	r2, [pc, #140]	; (80047f4 <ai_platform_network_post_init+0x250>)
 8004768:	2301      	movs	r3, #1
 800476a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800476e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1fb      	bne.n	800476e <ai_platform_network_post_init+0x1ca>
 8004776:	491d      	ldr	r1, [pc, #116]	; (80047ec <ai_platform_network_post_init+0x248>)
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 800477a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800477e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004782:	429a      	cmp	r2, r3
 8004784:	f43f af44 	beq.w	8004610 <ai_platform_network_post_init+0x6c>
 8004788:	e7fe      	b.n	8004788 <ai_platform_network_post_init+0x1e4>
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <ai_platform_network_post_init+0x244>)
 800478c:	2301      	movs	r3, #1
 800478e:	6093      	str	r3, [r2, #8]
 8004790:	6893      	ldr	r3, [r2, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1fc      	bne.n	8004790 <ai_platform_network_post_init+0x1ec>
 8004796:	4915      	ldr	r1, [pc, #84]	; (80047ec <ai_platform_network_post_init+0x248>)
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 800479a:	6011      	str	r1, [r2, #0]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	f43f af36 	beq.w	8004610 <ai_platform_network_post_init+0x6c>
 80047a4:	e7fe      	b.n	80047a4 <ai_platform_network_post_init+0x200>
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <ai_platform_network_post_init+0x244>)
 80047a8:	2301      	movs	r3, #1
 80047aa:	6093      	str	r3, [r2, #8]
 80047ac:	6893      	ldr	r3, [r2, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1fc      	bne.n	80047ac <ai_platform_network_post_init+0x208>
 80047b2:	490e      	ldr	r1, [pc, #56]	; (80047ec <ai_platform_network_post_init+0x248>)
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 80047b6:	6011      	str	r1, [r2, #0]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d097      	beq.n	80046ee <ai_platform_network_post_init+0x14a>
 80047be:	e7fe      	b.n	80047be <ai_platform_network_post_init+0x21a>
 80047c0:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <ai_platform_network_post_init+0x244>)
 80047c2:	2301      	movs	r3, #1
 80047c4:	6093      	str	r3, [r2, #8]
 80047c6:	6893      	ldr	r3, [r2, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1fc      	bne.n	80047c6 <ai_platform_network_post_init+0x222>
 80047cc:	4907      	ldr	r1, [pc, #28]	; (80047ec <ai_platform_network_post_init+0x248>)
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <ai_platform_network_post_init+0x24c>)
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	f43f af1b 	beq.w	8004610 <ai_platform_network_post_init+0x6c>
 80047da:	e7fe      	b.n	80047da <ai_platform_network_post_init+0x236>
 80047dc:	a1c00100 	.word	0xa1c00100
 80047e0:	e0042000 	.word	0xe0042000
 80047e4:	5c001000 	.word	0x5c001000
 80047e8:	40023000 	.word	0x40023000
 80047ec:	f407a5c2 	.word	0xf407a5c2
 80047f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80047f4:	58024000 	.word	0x58024000

080047f8 <ai_platform_network_process>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	b085      	sub	sp, #20
 80047fe:	460e      	mov	r6, r1
 8004800:	4605      	mov	r5, r0
 8004802:	9201      	str	r2, [sp, #4]
 8004804:	b120      	cbz	r0, 8004810 <ai_platform_network_process+0x18>
 8004806:	4b24      	ldr	r3, [pc, #144]	; (8004898 <ai_platform_network_process+0xa0>)
 8004808:	6802      	ldr	r2, [r0, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	bf18      	it	ne
 800480e:	2500      	movne	r5, #0
 8004810:	f7fe fe5e 	bl	80034d0 <_ai_platform_acquire_crc>
 8004814:	4b21      	ldr	r3, [pc, #132]	; (800489c <ai_platform_network_process+0xa4>)
 8004816:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004820:	185a      	adds	r2, r3, r1
 8004822:	2a01      	cmp	r2, #1
 8004824:	d92b      	bls.n	800487e <ai_platform_network_process+0x86>
 8004826:	f240 4249 	movw	r2, #1097	; 0x449
 800482a:	4293      	cmp	r3, r2
 800482c:	d027      	beq.n	800487e <ai_platform_network_process+0x86>
 800482e:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <ai_platform_network_process+0xa8>)
 8004830:	6813      	ldr	r3, [r2, #0]
 8004832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004836:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800483a:	d039      	beq.n	80048b0 <ai_platform_network_process+0xb8>
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	f240 4183 	movw	r1, #1155	; 0x483
 8004842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004846:	428b      	cmp	r3, r1
 8004848:	f000 819c 	beq.w	8004b84 <ai_platform_network_process+0x38c>
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004852:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004856:	f000 8179 	beq.w	8004b4c <ai_platform_network_process+0x354>
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004860:	2b00      	cmp	r3, #0
 8004862:	d136      	bne.n	80048d2 <ai_platform_network_process+0xda>
 8004864:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <ai_platform_network_process+0xac>)
 8004866:	2301      	movs	r3, #1
 8004868:	6093      	str	r3, [r2, #8]
 800486a:	6893      	ldr	r3, [r2, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1fc      	bne.n	800486a <ai_platform_network_process+0x72>
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <ai_platform_network_process+0xb0>)
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <ai_platform_network_process+0xb4>)
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d02a      	beq.n	80048d2 <ai_platform_network_process+0xda>
 800487c:	e7fe      	b.n	800487c <ai_platform_network_process+0x84>
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <ai_platform_network_process+0xac>)
 8004880:	2301      	movs	r3, #1
 8004882:	6093      	str	r3, [r2, #8]
 8004884:	6893      	ldr	r3, [r2, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1fc      	bne.n	8004884 <ai_platform_network_process+0x8c>
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <ai_platform_network_process+0xb0>)
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <ai_platform_network_process+0xb4>)
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d01d      	beq.n	80048d2 <ai_platform_network_process+0xda>
 8004896:	e7fe      	b.n	8004896 <ai_platform_network_process+0x9e>
 8004898:	a1c00100 	.word	0xa1c00100
 800489c:	e0042000 	.word	0xe0042000
 80048a0:	5c001000 	.word	0x5c001000
 80048a4:	40023000 	.word	0x40023000
 80048a8:	f407a5c2 	.word	0xf407a5c2
 80048ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80048b0:	4ab0      	ldr	r2, [pc, #704]	; (8004b74 <ai_platform_network_process+0x37c>)
 80048b2:	2301      	movs	r3, #1
 80048b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80048b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1fb      	bne.n	80048b8 <ai_platform_network_process+0xc0>
 80048c0:	4bad      	ldr	r3, [pc, #692]	; (8004b78 <ai_platform_network_process+0x380>)
 80048c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80048c6:	4bad      	ldr	r3, [pc, #692]	; (8004b7c <ai_platform_network_process+0x384>)
 80048c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80048cc:	429a      	cmp	r2, r3
 80048ce:	f040 812b 	bne.w	8004b28 <ai_platform_network_process+0x330>
 80048d2:	f7fe fdff 	bl	80034d4 <_ai_platform_release_crc>
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	f000 8172 	beq.w	8004bc0 <ai_platform_network_process+0x3c8>
 80048dc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8123 	beq.w	8004b2a <ai_platform_network_process+0x332>
 80048e4:	68eb      	ldr	r3, [r5, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	616a      	str	r2, [r5, #20]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	f040 811f 	bne.w	8004b36 <ai_platform_network_process+0x33e>
 80048f8:	2e00      	cmp	r6, #0
 80048fa:	f000 8156 	beq.w	8004baa <ai_platform_network_process+0x3b2>
 80048fe:	fab8 f788 	clz	r7, r8
 8004902:	097f      	lsrs	r7, r7, #5
 8004904:	f1b8 0f00 	cmp.w	r8, #0
 8004908:	f000 814f 	beq.w	8004baa <ai_platform_network_process+0x3b2>
 800490c:	f8b8 3000 	ldrh.w	r3, [r8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 814a 	beq.w	8004baa <ai_platform_network_process+0x3b2>
 8004916:	69b3      	ldr	r3, [r6, #24]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800491e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d072      	beq.n	8004a0c <ai_platform_network_process+0x214>
 8004926:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800492a:	2c00      	cmp	r4, #0
 800492c:	d06e      	beq.n	8004a0c <ai_platform_network_process+0x214>
 800492e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004932:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004936:	f8d3 a000 	ldr.w	sl, [r3]
 800493a:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800493e:	f000 8133 	beq.w	8004ba8 <ai_platform_network_process+0x3b0>
 8004942:	69a3      	ldr	r3, [r4, #24]
 8004944:	2101      	movs	r1, #1
 8004946:	4630      	mov	r0, r6
 8004948:	685d      	ldr	r5, [r3, #4]
 800494a:	f7fe fd73 	bl	8003434 <ai_buffer_get_size>
 800494e:	4285      	cmp	r5, r0
 8004950:	f0c0 8138 	bcc.w	8004bc4 <ai_platform_network_process+0x3cc>
 8004954:	68e0      	ldr	r0, [r4, #12]
 8004956:	69b1      	ldr	r1, [r6, #24]
 8004958:	68c2      	ldr	r2, [r0, #12]
 800495a:	68cb      	ldr	r3, [r1, #12]
 800495c:	429a      	cmp	r2, r3
 800495e:	f040 8131 	bne.w	8004bc4 <ai_platform_network_process+0x3cc>
 8004962:	6882      	ldr	r2, [r0, #8]
 8004964:	688b      	ldr	r3, [r1, #8]
 8004966:	429a      	cmp	r2, r3
 8004968:	f040 812c 	bne.w	8004bc4 <ai_platform_network_process+0x3cc>
 800496c:	6842      	ldr	r2, [r0, #4]
 800496e:	684b      	ldr	r3, [r1, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	f040 8127 	bne.w	8004bc4 <ai_platform_network_process+0x3cc>
 8004976:	69a3      	ldr	r3, [r4, #24]
 8004978:	e9d3 0100 	ldrd	r0, r1, [r3]
 800497c:	f001 fa56 	bl	8005e2c <ai_array_get_data_byte_size>
 8004980:	4605      	mov	r5, r0
 8004982:	4620      	mov	r0, r4
 8004984:	f001 fa68 	bl	8005e58 <get_tensor_byte_size>
 8004988:	4285      	cmp	r5, r0
 800498a:	f0c0 811b 	bcc.w	8004bc4 <ai_platform_network_process+0x3cc>
 800498e:	69a3      	ldr	r3, [r4, #24]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	f001 f9b7 	bl	8005d04 <ai_array_to_buffer_fmt>
 8004996:	6833      	ldr	r3, [r6, #0]
 8004998:	4058      	eors	r0, r3
 800499a:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800499e:	f040 81c8 	bne.w	8004d32 <ai_platform_network_process+0x53a>
 80049a2:	6873      	ldr	r3, [r6, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 81bb 	beq.w	8004d20 <ai_platform_network_process+0x528>
 80049aa:	69b3      	ldr	r3, [r6, #24]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 81c8 	beq.w	8004d44 <ai_platform_network_process+0x54c>
 80049b4:	9a02      	ldr	r2, [sp, #8]
 80049b6:	4620      	mov	r0, r4
 80049b8:	3701      	adds	r7, #1
 80049ba:	361c      	adds	r6, #28
 80049bc:	429a      	cmp	r2, r3
 80049be:	bf38      	it	cc
 80049c0:	461a      	movcc	r2, r3
 80049c2:	9202      	str	r2, [sp, #8]
 80049c4:	f001 fa48 	bl	8005e58 <get_tensor_byte_size>
 80049c8:	f8c9 0008 	str.w	r0, [r9, #8]
 80049cc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	f8c9 300c 	str.w	r3, [r9, #12]
 80049da:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80049de:	440b      	add	r3, r1
 80049e0:	f8c9 1004 	str.w	r1, [r9, #4]
 80049e4:	f84a 300b 	str.w	r3, [sl, fp]
 80049e8:	69a0      	ldr	r0, [r4, #24]
 80049ea:	6803      	ldr	r3, [r0, #0]
 80049ec:	009a      	lsls	r2, r3, #2
 80049ee:	f100 80bb 	bmi.w	8004b68 <ai_platform_network_process+0x370>
 80049f2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	4419      	add	r1, r3
 80049fa:	6081      	str	r1, [r0, #8]
 80049fc:	69a3      	ldr	r3, [r4, #24]
 80049fe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	f8b8 3000 	ldrh.w	r3, [r8]
 8004a08:	42bb      	cmp	r3, r7
 8004a0a:	d888      	bhi.n	800491e <ai_platform_network_process+0x126>
 8004a0c:	9d03      	ldr	r5, [sp, #12]
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 819f 	beq.w	8004d56 <ai_platform_network_process+0x55e>
 8004a18:	2a01      	cmp	r2, #1
 8004a1a:	f240 8179 	bls.w	8004d10 <ai_platform_network_process+0x518>
 8004a1e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8004a22:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8172 	beq.w	8004d10 <ai_platform_network_process+0x518>
 8004a2c:	9e01      	ldr	r6, [sp, #4]
 8004a2e:	2700      	movs	r7, #0
 8004a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80d3 	beq.w	8004be0 <ai_platform_network_process+0x3e8>
 8004a3a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004a3e:	2c00      	cmp	r4, #0
 8004a40:	f000 80ce 	beq.w	8004be0 <ai_platform_network_process+0x3e8>
 8004a44:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004a48:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004a4c:	f8d3 8000 	ldr.w	r8, [r3]
 8004a50:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8004a54:	f000 819d 	beq.w	8004d92 <ai_platform_network_process+0x59a>
 8004a58:	69a3      	ldr	r3, [r4, #24]
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	f7fe fce7 	bl	8003434 <ai_buffer_get_size>
 8004a66:	9b01      	ldr	r3, [sp, #4]
 8004a68:	4283      	cmp	r3, r0
 8004a6a:	f0c0 8151 	bcc.w	8004d10 <ai_platform_network_process+0x518>
 8004a6e:	68e0      	ldr	r0, [r4, #12]
 8004a70:	69b1      	ldr	r1, [r6, #24]
 8004a72:	68c2      	ldr	r2, [r0, #12]
 8004a74:	68cb      	ldr	r3, [r1, #12]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	f040 814a 	bne.w	8004d10 <ai_platform_network_process+0x518>
 8004a7c:	6882      	ldr	r2, [r0, #8]
 8004a7e:	688b      	ldr	r3, [r1, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	f040 8145 	bne.w	8004d10 <ai_platform_network_process+0x518>
 8004a86:	6842      	ldr	r2, [r0, #4]
 8004a88:	684b      	ldr	r3, [r1, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f040 8140 	bne.w	8004d10 <ai_platform_network_process+0x518>
 8004a90:	69a3      	ldr	r3, [r4, #24]
 8004a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a96:	f001 f9c9 	bl	8005e2c <ai_array_get_data_byte_size>
 8004a9a:	9001      	str	r0, [sp, #4]
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f001 f9db 	bl	8005e58 <get_tensor_byte_size>
 8004aa2:	9b01      	ldr	r3, [sp, #4]
 8004aa4:	4283      	cmp	r3, r0
 8004aa6:	f0c0 8133 	bcc.w	8004d10 <ai_platform_network_process+0x518>
 8004aaa:	69a3      	ldr	r3, [r4, #24]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	f001 f929 	bl	8005d04 <ai_array_to_buffer_fmt>
 8004ab2:	6833      	ldr	r3, [r6, #0]
 8004ab4:	4058      	eors	r0, r3
 8004ab6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004aba:	f040 815a 	bne.w	8004d72 <ai_platform_network_process+0x57a>
 8004abe:	6873      	ldr	r3, [r6, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 814e 	beq.w	8004d62 <ai_platform_network_process+0x56a>
 8004ac6:	69b3      	ldr	r3, [r6, #24]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8159 	beq.w	8004d82 <ai_platform_network_process+0x58a>
 8004ad0:	9a02      	ldr	r2, [sp, #8]
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	3701      	adds	r7, #1
 8004ad6:	361c      	adds	r6, #28
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	bf38      	it	cc
 8004adc:	461a      	movcc	r2, r3
 8004ade:	9202      	str	r2, [sp, #8]
 8004ae0:	f001 f9ba 	bl	8005e58 <get_tensor_byte_size>
 8004ae4:	f8ca 0008 	str.w	r0, [sl, #8]
 8004ae8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	fb00 f303 	mul.w	r3, r0, r3
 8004af2:	f8ca 300c 	str.w	r3, [sl, #12]
 8004af6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8004afa:	440b      	add	r3, r1
 8004afc:	f8ca 1004 	str.w	r1, [sl, #4]
 8004b00:	f848 300b 	str.w	r3, [r8, fp]
 8004b04:	69a0      	ldr	r0, [r4, #24]
 8004b06:	6803      	ldr	r3, [r0, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	d464      	bmi.n	8004bd6 <ai_platform_network_process+0x3de>
 8004b0c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	4419      	add	r1, r3
 8004b14:	6081      	str	r1, [r0, #8]
 8004b16:	69a3      	ldr	r3, [r4, #24]
 8004b18:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004b22:	429f      	cmp	r7, r3
 8004b24:	d384      	bcc.n	8004a30 <ai_platform_network_process+0x238>
 8004b26:	e05b      	b.n	8004be0 <ai_platform_network_process+0x3e8>
 8004b28:	e7fe      	b.n	8004b28 <ai_platform_network_process+0x330>
 8004b2a:	68ea      	ldr	r2, [r5, #12]
 8004b2c:	616b      	str	r3, [r5, #20]
 8004b2e:	f002 0203 	and.w	r2, r2, #3
 8004b32:	2a03      	cmp	r2, #3
 8004b34:	d039      	beq.n	8004baa <ai_platform_network_process+0x3b2>
 8004b36:	2230      	movs	r2, #48	; 0x30
 8004b38:	2111      	movs	r1, #17
 8004b3a:	f105 0010 	add.w	r0, r5, #16
 8004b3e:	2400      	movs	r4, #0
 8004b40:	f000 f93e 	bl	8004dc0 <core_set_error>
 8004b44:	4620      	mov	r0, r4
 8004b46:	b005      	add	sp, #20
 8004b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4c:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <ai_platform_network_process+0x388>)
 8004b4e:	2301      	movs	r3, #1
 8004b50:	6093      	str	r3, [r2, #8]
 8004b52:	6893      	ldr	r3, [r2, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1fc      	bne.n	8004b52 <ai_platform_network_process+0x35a>
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <ai_platform_network_process+0x380>)
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <ai_platform_network_process+0x384>)
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f43f aeb6 	beq.w	80048d2 <ai_platform_network_process+0xda>
 8004b66:	e7fe      	b.n	8004b66 <ai_platform_network_process+0x36e>
 8004b68:	f8b8 3000 	ldrh.w	r3, [r8]
 8004b6c:	429f      	cmp	r7, r3
 8004b6e:	f4ff aed6 	bcc.w	800491e <ai_platform_network_process+0x126>
 8004b72:	e74b      	b.n	8004a0c <ai_platform_network_process+0x214>
 8004b74:	58024000 	.word	0x58024000
 8004b78:	f407a5c2 	.word	0xf407a5c2
 8004b7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b80:	40023000 	.word	0x40023000
 8004b84:	4a87      	ldr	r2, [pc, #540]	; (8004da4 <ai_platform_network_process+0x5ac>)
 8004b86:	2301      	movs	r3, #1
 8004b88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1fb      	bne.n	8004b8c <ai_platform_network_process+0x394>
 8004b94:	4b84      	ldr	r3, [pc, #528]	; (8004da8 <ai_platform_network_process+0x5b0>)
 8004b96:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b9a:	4b84      	ldr	r3, [pc, #528]	; (8004dac <ai_platform_network_process+0x5b4>)
 8004b9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	f43f ae96 	beq.w	80048d2 <ai_platform_network_process+0xda>
 8004ba6:	e7fe      	b.n	8004ba6 <ai_platform_network_process+0x3ae>
 8004ba8:	9d03      	ldr	r5, [sp, #12]
 8004baa:	2400      	movs	r4, #0
 8004bac:	2217      	movs	r2, #23
 8004bae:	2112      	movs	r1, #18
 8004bb0:	f105 0010 	add.w	r0, r5, #16
 8004bb4:	f000 f904 	bl	8004dc0 <core_set_error>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	b005      	add	sp, #20
 8004bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc0:	462c      	mov	r4, r5
 8004bc2:	e7bf      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004bc4:	9d03      	ldr	r5, [sp, #12]
 8004bc6:	2218      	movs	r2, #24
 8004bc8:	2112      	movs	r1, #18
 8004bca:	2400      	movs	r4, #0
 8004bcc:	f105 0010 	add.w	r0, r5, #16
 8004bd0:	f000 f8f6 	bl	8004dc0 <core_set_error>
 8004bd4:	e7b6      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004bd6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004bda:	429f      	cmp	r7, r3
 8004bdc:	f4ff af28 	bcc.w	8004a30 <ai_platform_network_process+0x238>
 8004be0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8004be4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8004be6:	82ab      	strh	r3, [r5, #20]
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	f040 808b 	bne.w	8004d04 <ai_platform_network_process+0x50c>
 8004bee:	4616      	mov	r6, r2
 8004bf0:	4617      	mov	r7, r2
 8004bf2:	8aec      	ldrh	r4, [r5, #22]
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	d2a5      	bcs.n	8004b44 <ai_platform_network_process+0x34c>
 8004bf8:	46ab      	mov	fp, r5
 8004bfa:	2e00      	cmp	r6, #0
 8004bfc:	d030      	beq.n	8004c60 <ai_platform_network_process+0x468>
 8004bfe:	f04f 0800 	mov.w	r8, #0
 8004c02:	e014      	b.n	8004c2e <ai_platform_network_process+0x436>
 8004c04:	6882      	ldr	r2, [r0, #8]
 8004c06:	68c5      	ldr	r5, [r0, #12]
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	1b52      	subs	r2, r2, r5
 8004c0c:	4413      	add	r3, r2
 8004c0e:	6083      	str	r3, [r0, #8]
 8004c10:	698b      	ldr	r3, [r1, #24]
 8004c12:	6862      	ldr	r2, [r4, #4]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	f859 200a 	ldr.w	r2, [r9, sl]
 8004c1a:	f108 0801 	add.w	r8, r8, #1
 8004c1e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8004c22:	440b      	add	r3, r1
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d301      	bcc.n	8004c2c <ai_platform_network_process+0x434>
 8004c28:	68e3      	ldr	r3, [r4, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	8833      	ldrh	r3, [r6, #0]
 8004c30:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8004c34:	4543      	cmp	r3, r8
 8004c36:	d913      	bls.n	8004c60 <ai_platform_network_process+0x468>
 8004c38:	6873      	ldr	r3, [r6, #4]
 8004c3a:	b18b      	cbz	r3, 8004c60 <ai_platform_network_process+0x468>
 8004c3c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004c40:	b171      	cbz	r1, 8004c60 <ai_platform_network_process+0x468>
 8004c42:	6988      	ldr	r0, [r1, #24]
 8004c44:	68b2      	ldr	r2, [r6, #8]
 8004c46:	6803      	ldr	r3, [r0, #0]
 8004c48:	f8d2 9000 	ldr.w	r9, [r2]
 8004c4c:	009d      	lsls	r5, r3, #2
 8004c4e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004c52:	d5d7      	bpl.n	8004c04 <ai_platform_network_process+0x40c>
 8004c54:	6881      	ldr	r1, [r0, #8]
 8004c56:	68a2      	ldr	r2, [r4, #8]
 8004c58:	6860      	ldr	r0, [r4, #4]
 8004c5a:	f000 ffcb 	bl	8005bf4 <st_int8_copy>
 8004c5e:	e7da      	b.n	8004c16 <ai_platform_network_process+0x41e>
 8004c60:	4658      	mov	r0, fp
 8004c62:	f000 f903 	bl	8004e6c <ai_layers_forward_all>
 8004c66:	2f00      	cmp	r7, #0
 8004c68:	d03d      	beq.n	8004ce6 <ai_platform_network_process+0x4ee>
 8004c6a:	2400      	movs	r4, #0
 8004c6c:	e016      	b.n	8004c9c <ai_platform_network_process+0x4a4>
 8004c6e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004c72:	f859 100a 	ldr.w	r1, [r9, sl]
 8004c76:	4413      	add	r3, r2
 8004c78:	428b      	cmp	r3, r1
 8004c7a:	d302      	bcc.n	8004c82 <ai_platform_network_process+0x48a>
 8004c7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004c80:	1acb      	subs	r3, r1, r3
 8004c82:	f8c8 3004 	str.w	r3, [r8, #4]
 8004c86:	6981      	ldr	r1, [r0, #24]
 8004c88:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	4413      	add	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
 8004c92:	6983      	ldr	r3, [r0, #24]
 8004c94:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	3401      	adds	r4, #1
 8004c9c:	883b      	ldrh	r3, [r7, #0]
 8004c9e:	42a3      	cmp	r3, r4
 8004ca0:	d921      	bls.n	8004ce6 <ai_platform_network_process+0x4ee>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	b1fb      	cbz	r3, 8004ce6 <ai_platform_network_process+0x4ee>
 8004ca6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004caa:	b1e0      	cbz	r0, 8004ce6 <ai_platform_network_process+0x4ee>
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004cb2:	6983      	ldr	r3, [r0, #24]
 8004cb4:	f8d2 9000 	ldr.w	r9, [r2]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004cbe:	0092      	lsls	r2, r2, #2
 8004cc0:	d5d5      	bpl.n	8004c6e <ai_platform_network_process+0x476>
 8004cc2:	6898      	ldr	r0, [r3, #8]
 8004cc4:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8004cc8:	f000 ff94 	bl	8005bf4 <st_int8_copy>
 8004ccc:	f859 200a 	ldr.w	r2, [r9, sl]
 8004cd0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004cd4:	440b      	add	r3, r1
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d302      	bcc.n	8004ce0 <ai_platform_network_process+0x4e8>
 8004cda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ce4:	e7d9      	b.n	8004c9a <ai_platform_network_process+0x4a2>
 8004ce6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8004cea:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8004cee:	3401      	adds	r4, #1
 8004cf0:	b2a4      	uxth	r4, r4
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	f8ab 4016 	strh.w	r4, [fp, #22]
 8004cf8:	f63f af7f 	bhi.w	8004bfa <ai_platform_network_process+0x402>
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	b005      	add	sp, #20
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d04:	2a01      	cmp	r2, #1
 8004d06:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004d08:	d029      	beq.n	8004d5e <ai_platform_network_process+0x566>
 8004d0a:	f106 070c 	add.w	r7, r6, #12
 8004d0e:	e770      	b.n	8004bf2 <ai_platform_network_process+0x3fa>
 8004d10:	2218      	movs	r2, #24
 8004d12:	2113      	movs	r1, #19
 8004d14:	f105 0010 	add.w	r0, r5, #16
 8004d18:	2400      	movs	r4, #0
 8004d1a:	f000 f851 	bl	8004dc0 <core_set_error>
 8004d1e:	e711      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004d20:	9d03      	ldr	r5, [sp, #12]
 8004d22:	4604      	mov	r4, r0
 8004d24:	2217      	movs	r2, #23
 8004d26:	2112      	movs	r1, #18
 8004d28:	f105 0010 	add.w	r0, r5, #16
 8004d2c:	f000 f848 	bl	8004dc0 <core_set_error>
 8004d30:	e708      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004d32:	9d03      	ldr	r5, [sp, #12]
 8004d34:	2219      	movs	r2, #25
 8004d36:	2112      	movs	r1, #18
 8004d38:	2400      	movs	r4, #0
 8004d3a:	f105 0010 	add.w	r0, r5, #16
 8004d3e:	f000 f83f 	bl	8004dc0 <core_set_error>
 8004d42:	e6ff      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004d44:	9d03      	ldr	r5, [sp, #12]
 8004d46:	4604      	mov	r4, r0
 8004d48:	2221      	movs	r2, #33	; 0x21
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	f105 0010 	add.w	r0, r5, #16
 8004d50:	f000 f836 	bl	8004dc0 <core_set_error>
 8004d54:	e6f6      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004d56:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8004d5a:	82ab      	strh	r3, [r5, #20]
 8004d5c:	e744      	b.n	8004be8 <ai_platform_network_process+0x3f0>
 8004d5e:	2700      	movs	r7, #0
 8004d60:	e747      	b.n	8004bf2 <ai_platform_network_process+0x3fa>
 8004d62:	4604      	mov	r4, r0
 8004d64:	2217      	movs	r2, #23
 8004d66:	2113      	movs	r1, #19
 8004d68:	f105 0010 	add.w	r0, r5, #16
 8004d6c:	f000 f828 	bl	8004dc0 <core_set_error>
 8004d70:	e6e8      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004d72:	2219      	movs	r2, #25
 8004d74:	2113      	movs	r1, #19
 8004d76:	f105 0010 	add.w	r0, r5, #16
 8004d7a:	2400      	movs	r4, #0
 8004d7c:	f000 f820 	bl	8004dc0 <core_set_error>
 8004d80:	e6e0      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004d82:	4604      	mov	r4, r0
 8004d84:	2221      	movs	r2, #33	; 0x21
 8004d86:	2113      	movs	r1, #19
 8004d88:	f105 0010 	add.w	r0, r5, #16
 8004d8c:	f000 f818 	bl	8004dc0 <core_set_error>
 8004d90:	e6d8      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004d92:	2217      	movs	r2, #23
 8004d94:	2113      	movs	r1, #19
 8004d96:	f105 0010 	add.w	r0, r5, #16
 8004d9a:	4654      	mov	r4, sl
 8004d9c:	f000 f810 	bl	8004dc0 <core_set_error>
 8004da0:	e6d0      	b.n	8004b44 <ai_platform_network_process+0x34c>
 8004da2:	bf00      	nop
 8004da4:	58024000 	.word	0x58024000
 8004da8:	f407a5c2 	.word	0xf407a5c2
 8004dac:	b5e8b5cd 	.word	0xb5e8b5cd

08004db0 <core_init>:
 8004db0:	2001      	movs	r0, #1
 8004db2:	4770      	bx	lr

08004db4 <core_get_error>:
 8004db4:	4603      	mov	r3, r0
 8004db6:	2200      	movs	r2, #0
 8004db8:	6800      	ldr	r0, [r0, #0]
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop

08004dc0 <core_set_error>:
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	7800      	ldrb	r0, [r0, #0]
 8004dc4:	b108      	cbz	r0, 8004dca <core_set_error+0xa>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	4770      	bx	lr
 8004dca:	7019      	strb	r1, [r3, #0]
 8004dcc:	2001      	movs	r0, #1
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	f362 211f 	bfi	r1, r2, #8, #24
 8004dd4:	6019      	str	r1, [r3, #0]
 8004dd6:	4770      	bx	lr

08004dd8 <ai_check_custom_types>:
 8004dd8:	b082      	sub	sp, #8
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <ai_check_custom_types+0x4c>)
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	b118      	cbz	r0, 8004de8 <ai_check_custom_types+0x10>
 8004de0:	7803      	ldrb	r3, [r0, #0]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d002      	beq.n	8004dec <ai_check_custom_types+0x14>
 8004de6:	2000      	movs	r0, #0
 8004de8:	b002      	add	sp, #8
 8004dea:	4770      	bx	lr
 8004dec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <ai_check_custom_types+0x26>
 8004df4:	2001      	movs	r0, #1
 8004df6:	f080 0001 	eor.w	r0, r0, #1
 8004dfa:	b002      	add	sp, #8
 8004dfc:	4770      	bx	lr
 8004dfe:	7842      	ldrb	r2, [r0, #1]
 8004e00:	3001      	adds	r0, #1
 8004e02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d1f4      	bne.n	8004df4 <ai_check_custom_types+0x1c>
 8004e0a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004e0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d1ee      	bne.n	8004df4 <ai_check_custom_types+0x1c>
 8004e16:	7842      	ldrb	r2, [r0, #1]
 8004e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1e9      	bne.n	8004df4 <ai_check_custom_types+0x1c>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e7e8      	b.n	8004df6 <ai_check_custom_types+0x1e>
 8004e24:	84048403 	.word	0x84048403

08004e28 <ai_layers_init_all>:
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e2c:	b13b      	cbz	r3, 8004e3e <ai_layers_init_all+0x16>
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	3101      	adds	r1, #1
 8004e32:	60d8      	str	r0, [r3, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	4613      	mov	r3, r2
 8004e38:	d001      	beq.n	8004e3e <ai_layers_init_all+0x16>
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	d1f6      	bne.n	8004e2c <ai_layers_init_all+0x4>
 8004e3e:	4608      	mov	r0, r1
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <ai_layers_post_init_all>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	2500      	movs	r5, #0
 8004e48:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004e4a:	b16c      	cbz	r4, 8004e68 <ai_layers_post_init_all+0x24>
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	07db      	lsls	r3, r3, #31
 8004e50:	d504      	bpl.n	8004e5c <ai_layers_post_init_all+0x18>
 8004e52:	6a23      	ldr	r3, [r4, #32]
 8004e54:	4620      	mov	r0, r4
 8004e56:	b10b      	cbz	r3, 8004e5c <ai_layers_post_init_all+0x18>
 8004e58:	3501      	adds	r5, #1
 8004e5a:	4798      	blx	r3
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	461c      	mov	r4, r3
 8004e62:	d001      	beq.n	8004e68 <ai_layers_post_init_all+0x24>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <ai_layers_post_init_all+0x6>
 8004e68:	4628      	mov	r0, r5
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}

08004e6c <ai_layers_forward_all>:
 8004e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e70:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004e74:	4604      	mov	r4, r0
 8004e76:	f1b8 0f00 	cmp.w	r8, #0
 8004e7a:	d02a      	beq.n	8004ed2 <ai_layers_forward_all+0x66>
 8004e7c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004e7e:	6381      	str	r1, [r0, #56]	; 0x38
 8004e80:	b319      	cbz	r1, 8004eca <ai_layers_forward_all+0x5e>
 8004e82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e84:	2001      	movs	r0, #1
 8004e86:	47c0      	blx	r8
 8004e88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004e8a:	b1f6      	cbz	r6, 8004eca <ai_layers_forward_all+0x5e>
 8004e8c:	2700      	movs	r7, #0
 8004e8e:	4631      	mov	r1, r6
 8004e90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e92:	2002      	movs	r0, #2
 8004e94:	47c0      	blx	r8
 8004e96:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004e98:	4628      	mov	r0, r5
 8004e9a:	696b      	ldr	r3, [r5, #20]
 8004e9c:	4798      	blx	r3
 8004e9e:	692e      	ldr	r6, [r5, #16]
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ea4:	42b5      	cmp	r5, r6
 8004ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ea8:	d007      	beq.n	8004eba <ai_layers_forward_all+0x4e>
 8004eaa:	47c0      	blx	r8
 8004eac:	3701      	adds	r7, #1
 8004eae:	63a6      	str	r6, [r4, #56]	; 0x38
 8004eb0:	2e00      	cmp	r6, #0
 8004eb2:	d1ec      	bne.n	8004e8e <ai_layers_forward_all+0x22>
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eba:	2003      	movs	r0, #3
 8004ebc:	3701      	adds	r7, #1
 8004ebe:	47c0      	blx	r8
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eca:	2700      	movs	r7, #0
 8004ecc:	4638      	mov	r0, r7
 8004ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004ed4:	6385      	str	r5, [r0, #56]	; 0x38
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	d0f7      	beq.n	8004eca <ai_layers_forward_all+0x5e>
 8004eda:	4647      	mov	r7, r8
 8004edc:	696b      	ldr	r3, [r5, #20]
 8004ede:	4628      	mov	r0, r5
 8004ee0:	4798      	blx	r3
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	692d      	ldr	r5, [r5, #16]
 8004ee6:	429d      	cmp	r5, r3
 8004ee8:	d004      	beq.n	8004ef4 <ai_layers_forward_all+0x88>
 8004eea:	3701      	adds	r7, #1
 8004eec:	63a5      	str	r5, [r4, #56]	; 0x38
 8004eee:	2d00      	cmp	r5, #0
 8004ef0:	d1f4      	bne.n	8004edc <ai_layers_forward_all+0x70>
 8004ef2:	e7df      	b.n	8004eb4 <ai_layers_forward_all+0x48>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	3701      	adds	r7, #1
 8004ef8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004efa:	e7db      	b.n	8004eb4 <ai_layers_forward_all+0x48>

08004efc <forward_dense>:
 8004efc:	6983      	ldr	r3, [r0, #24]
 8004efe:	881a      	ldrh	r2, [r3, #0]
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	f000 80f0 	beq.w	80050e6 <forward_dense+0x1ea>
 8004f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0a:	ed2d 8b02 	vpush	{d8}
 8004f0e:	6858      	ldr	r0, [r3, #4]
 8004f10:	b09b      	sub	sp, #108	; 0x6c
 8004f12:	6845      	ldr	r5, [r0, #4]
 8004f14:	b105      	cbz	r5, 8004f18 <forward_dense+0x1c>
 8004f16:	682d      	ldr	r5, [r5, #0]
 8004f18:	2a01      	cmp	r2, #1
 8004f1a:	f000 840a 	beq.w	8005732 <forward_dense+0x836>
 8004f1e:	6906      	ldr	r6, [r0, #16]
 8004f20:	b106      	cbz	r6, 8004f24 <forward_dense+0x28>
 8004f22:	6836      	ldr	r6, [r6, #0]
 8004f24:	2a02      	cmp	r2, #2
 8004f26:	f000 80e0 	beq.w	80050ea <forward_dense+0x1ee>
 8004f2a:	69c3      	ldr	r3, [r0, #28]
 8004f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 83f1 	beq.w	8005716 <forward_dense+0x81a>
 8004f34:	4619      	mov	r1, r3
 8004f36:	8b03      	ldrh	r3, [r0, #24]
 8004f38:	6809      	ldr	r1, [r1, #0]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	910f      	str	r1, [sp, #60]	; 0x3c
 8004f3e:	f240 83ec 	bls.w	800571a <forward_dense+0x81e>
 8004f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	930d      	str	r3, [sp, #52]	; 0x34
 8004f48:	460b      	mov	r3, r1
 8004f4a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8004f4e:	2a03      	cmp	r2, #3
 8004f50:	68eb      	ldr	r3, [r5, #12]
 8004f52:	68f7      	ldr	r7, [r6, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	687c      	ldr	r4, [r7, #4]
 8004f58:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5e:	4621      	mov	r1, r4
 8004f60:	9419      	str	r4, [sp, #100]	; 0x64
 8004f62:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004f66:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8004f6a:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8004f6e:	fb01 f404 	mul.w	r4, r1, r4
 8004f72:	fa4e f10c 	asr.w	r1, lr, ip
 8004f76:	9116      	str	r1, [sp, #88]	; 0x58
 8004f78:	f000 83d8 	beq.w	800572c <forward_dense+0x830>
 8004f7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004f7e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	f000 83c2 	beq.w	800570c <forward_dense+0x810>
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	f000 83be 	beq.w	800570c <forward_dense+0x810>
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004f96:	f000 83a8 	beq.w	80056ea <forward_dense+0x7ee>
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	f000 83a5 	beq.w	80056ea <forward_dense+0x7ee>
 8004fa0:	f04f 0a00 	mov.w	sl, #0
 8004fa4:	69ab      	ldr	r3, [r5, #24]
 8004fa6:	fb07 f404 	mul.w	r4, r7, r4
 8004faa:	69b2      	ldr	r2, [r6, #24]
 8004fac:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8004fb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fb2:	6892      	ldr	r2, [r2, #8]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8004fba:	9206      	str	r2, [sp, #24]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	428a      	cmp	r2, r1
 8004fc0:	9110      	str	r1, [sp, #64]	; 0x40
 8004fc2:	9304      	str	r3, [sp, #16]
 8004fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fc6:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8004fca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004fce:	900e      	str	r0, [sp, #56]	; 0x38
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	f080 8380 	bcs.w	80056d6 <forward_dense+0x7da>
 8004fd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004fd8:	4654      	mov	r4, sl
 8004fda:	4bb9      	ldr	r3, [pc, #740]	; (80052c0 <forward_dense+0x3c4>)
 8004fdc:	46ca      	mov	sl, r9
 8004fde:	08d0      	lsrs	r0, r2, #3
 8004fe0:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 80052c4 <forward_dense+0x3c8>
 8004fe4:	4413      	add	r3, r2
 8004fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8004fe8:	0099      	lsls	r1, r3, #2
 8004fea:	f022 0301 	bic.w	r3, r2, #1
 8004fee:	f002 0201 	and.w	r2, r2, #1
 8004ff2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8004ff6:	9118      	str	r1, [sp, #96]	; 0x60
 8004ff8:	920a      	str	r2, [sp, #40]	; 0x28
 8004ffa:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 8004ffe:	9305      	str	r3, [sp, #20]
 8005000:	f101 0320 	add.w	r3, r1, #32
 8005004:	9207      	str	r2, [sp, #28]
 8005006:	9311      	str	r3, [sp, #68]	; 0x44
 8005008:	444b      	add	r3, r9
 800500a:	469b      	mov	fp, r3
 800500c:	930b      	str	r3, [sp, #44]	; 0x2c
 800500e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005016:	b10b      	cbz	r3, 800501c <forward_dense+0x120>
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2c00      	cmp	r4, #0
 800501e:	f000 834b 	beq.w	80056b8 <forward_dense+0x7bc>
 8005022:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005024:	2904      	cmp	r1, #4
 8005026:	f000 826a 	beq.w	80054fe <forward_dense+0x602>
 800502a:	9903      	ldr	r1, [sp, #12]
 800502c:	9806      	ldr	r0, [sp, #24]
 800502e:	4281      	cmp	r1, r0
 8005030:	f240 8356 	bls.w	80056e0 <forward_dense+0x7e4>
 8005034:	4686      	mov	lr, r0
 8005036:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005038:	eb00 090a 	add.w	r9, r0, sl
 800503c:	0941      	lsrs	r1, r0, #5
 800503e:	f10a 0004 	add.w	r0, sl, #4
 8005042:	f8cd 9020 	str.w	r9, [sp, #32]
 8005046:	9012      	str	r0, [sp, #72]	; 0x48
 8005048:	1c48      	adds	r0, r1, #1
 800504a:	00c9      	lsls	r1, r1, #3
 800504c:	3110      	adds	r1, #16
 800504e:	9115      	str	r1, [sp, #84]	; 0x54
 8005050:	00c1      	lsls	r1, r0, #3
 8005052:	9113      	str	r1, [sp, #76]	; 0x4c
 8005054:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8005058:	9114      	str	r1, [sp, #80]	; 0x50
 800505a:	f1a9 0104 	sub.w	r1, r9, #4
 800505e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8005062:	910c      	str	r1, [sp, #48]	; 0x30
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8128 	beq.w	80052ba <forward_dense+0x3be>
 800506a:	ecb3 5a01 	vldmia	r3!, {s10}
 800506e:	f1b9 0f07 	cmp.w	r9, #7
 8005072:	d83d      	bhi.n	80050f0 <forward_dense+0x1f4>
 8005074:	45da      	cmp	sl, fp
 8005076:	d211      	bcs.n	800509c <forward_dense+0x1a0>
 8005078:	eddf 7a92 	vldr	s15, [pc, #584]	; 80052c4 <forward_dense+0x3c8>
 800507c:	4650      	mov	r0, sl
 800507e:	4615      	mov	r5, r2
 8005080:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005084:	ecb0 7a01 	vldmia	r0!, {s14}
 8005088:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800508c:	4558      	cmp	r0, fp
 800508e:	edd1 6a00 	vldr	s13, [r1]
 8005092:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005096:	d3f3      	bcc.n	8005080 <forward_dense+0x184>
 8005098:	ee35 5a27 	vadd.f32	s10, s10, s15
 800509c:	9904      	ldr	r1, [sp, #16]
 800509e:	ecae 5a01 	vstmia	lr!, {s10}
 80050a2:	440a      	add	r2, r1
 80050a4:	9903      	ldr	r1, [sp, #12]
 80050a6:	458e      	cmp	lr, r1
 80050a8:	d3dc      	bcc.n	8005064 <forward_dense+0x168>
 80050aa:	9a06      	ldr	r2, [sp, #24]
 80050ac:	1a8b      	subs	r3, r1, r2
 80050ae:	3b01      	subs	r3, #1
 80050b0:	f023 0303 	bic.w	r3, r3, #3
 80050b4:	3304      	adds	r3, #4
 80050b6:	18d3      	adds	r3, r2, r3
 80050b8:	4619      	mov	r1, r3
 80050ba:	9306      	str	r3, [sp, #24]
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80050c2:	4413      	add	r3, r2
 80050c4:	9a07      	ldr	r2, [sp, #28]
 80050c6:	4281      	cmp	r1, r0
 80050c8:	9303      	str	r3, [sp, #12]
 80050ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050cc:	441a      	add	r2, r3
 80050ce:	449b      	add	fp, r3
 80050d0:	9207      	str	r2, [sp, #28]
 80050d2:	9a05      	ldr	r2, [sp, #20]
 80050d4:	441a      	add	r2, r3
 80050d6:	9205      	str	r2, [sp, #20]
 80050d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050da:	4692      	mov	sl, r2
 80050dc:	f080 82fb 	bcs.w	80056d6 <forward_dense+0x7da>
 80050e0:	441a      	add	r2, r3
 80050e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80050e4:	e793      	b.n	800500e <forward_dense+0x112>
 80050e6:	6853      	ldr	r3, [r2, #4]
 80050e8:	deff      	udf	#255	; 0xff
 80050ea:	2300      	movs	r3, #0
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	deff      	udf	#255	; 0xff
 80050f0:	f002 0103 	and.w	r1, r2, #3
 80050f4:	2902      	cmp	r1, #2
 80050f6:	f000 81e6 	beq.w	80054c6 <forward_dense+0x5ca>
 80050fa:	2903      	cmp	r1, #3
 80050fc:	f000 80e4 	beq.w	80052c8 <forward_dense+0x3cc>
 8005100:	2901      	cmp	r1, #1
 8005102:	f000 81ef 	beq.w	80054e4 <forward_dense+0x5e8>
 8005106:	9908      	ldr	r1, [sp, #32]
 8005108:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80052c4 <forward_dense+0x3c8>
 800510c:	458a      	cmp	sl, r1
 800510e:	f200 82e9 	bhi.w	80056e4 <forward_dense+0x7e8>
 8005112:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005114:	f102 0108 	add.w	r1, r2, #8
 8005118:	f10a 0020 	add.w	r0, sl, #32
 800511c:	18ae      	adds	r6, r5, r2
 800511e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8005122:	3108      	adds	r1, #8
 8005124:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8005128:	3020      	adds	r0, #32
 800512a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800512e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8005132:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8005136:	edd5 7a00 	vldr	s15, [r5]
 800513a:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800513e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005142:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8005146:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800514a:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800514e:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8005152:	edd5 2a00 	vldr	s5, [r5]
 8005156:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800515a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800515e:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8005162:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005166:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800516a:	ed95 3a00 	vldr	s6, [r5]
 800516e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8005172:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005176:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800517a:	edd5 3a00 	vldr	s7, [r5]
 800517e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005182:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005186:	eee3 7a84 	vfma.f32	s15, s7, s8
 800518a:	ed95 4a00 	vldr	s8, [r5]
 800518e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005192:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005196:	eee4 7a24 	vfma.f32	s15, s8, s9
 800519a:	edd5 4a00 	vldr	s9, [r5]
 800519e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80051a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80051a6:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80051aa:	edd5 5a00 	vldr	s11, [r5]
 80051ae:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80051b2:	428e      	cmp	r6, r1
 80051b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80051b8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80051bc:	ed95 6a00 	vldr	s12, [r5]
 80051c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80051c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051c8:	d1a9      	bne.n	800511e <forward_dense+0x222>
 80051ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80051cc:	1850      	adds	r0, r2, r1
 80051ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80051d0:	4559      	cmp	r1, fp
 80051d2:	d26f      	bcs.n	80052b4 <forward_dense+0x3b8>
 80051d4:	7805      	ldrb	r5, [r0, #0]
 80051d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80051da:	edd5 7a00 	vldr	s15, [r5]
 80051de:	460d      	mov	r5, r1
 80051e0:	ecf5 6a01 	vldmia	r5!, {s13}
 80051e4:	45ab      	cmp	fp, r5
 80051e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80051ea:	d963      	bls.n	80052b4 <forward_dense+0x3b8>
 80051ec:	7845      	ldrb	r5, [r0, #1]
 80051ee:	edd1 6a01 	vldr	s13, [r1, #4]
 80051f2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80051f6:	edd5 7a00 	vldr	s15, [r5]
 80051fa:	f101 0508 	add.w	r5, r1, #8
 80051fe:	45ab      	cmp	fp, r5
 8005200:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005204:	d956      	bls.n	80052b4 <forward_dense+0x3b8>
 8005206:	7885      	ldrb	r5, [r0, #2]
 8005208:	edd1 6a02 	vldr	s13, [r1, #8]
 800520c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005210:	edd5 7a00 	vldr	s15, [r5]
 8005214:	f101 050c 	add.w	r5, r1, #12
 8005218:	45ab      	cmp	fp, r5
 800521a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800521e:	d949      	bls.n	80052b4 <forward_dense+0x3b8>
 8005220:	78c5      	ldrb	r5, [r0, #3]
 8005222:	edd1 6a03 	vldr	s13, [r1, #12]
 8005226:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800522a:	edd5 7a00 	vldr	s15, [r5]
 800522e:	f101 0510 	add.w	r5, r1, #16
 8005232:	45ab      	cmp	fp, r5
 8005234:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005238:	d93c      	bls.n	80052b4 <forward_dense+0x3b8>
 800523a:	7905      	ldrb	r5, [r0, #4]
 800523c:	edd1 6a04 	vldr	s13, [r1, #16]
 8005240:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005244:	edd5 7a00 	vldr	s15, [r5]
 8005248:	f101 0514 	add.w	r5, r1, #20
 800524c:	45ab      	cmp	fp, r5
 800524e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005252:	d92f      	bls.n	80052b4 <forward_dense+0x3b8>
 8005254:	7945      	ldrb	r5, [r0, #5]
 8005256:	edd1 6a05 	vldr	s13, [r1, #20]
 800525a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800525e:	edd5 7a00 	vldr	s15, [r5]
 8005262:	f101 0518 	add.w	r5, r1, #24
 8005266:	45ab      	cmp	fp, r5
 8005268:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800526c:	d922      	bls.n	80052b4 <forward_dense+0x3b8>
 800526e:	7985      	ldrb	r5, [r0, #6]
 8005270:	edd1 6a06 	vldr	s13, [r1, #24]
 8005274:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005278:	edd5 7a00 	vldr	s15, [r5]
 800527c:	f101 051c 	add.w	r5, r1, #28
 8005280:	45ab      	cmp	fp, r5
 8005282:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005286:	d915      	bls.n	80052b4 <forward_dense+0x3b8>
 8005288:	79c5      	ldrb	r5, [r0, #7]
 800528a:	edd1 6a07 	vldr	s13, [r1, #28]
 800528e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005292:	edd5 7a00 	vldr	s15, [r5]
 8005296:	f101 0520 	add.w	r5, r1, #32
 800529a:	45ab      	cmp	fp, r5
 800529c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052a0:	d908      	bls.n	80052b4 <forward_dense+0x3b8>
 80052a2:	edd1 7a08 	vldr	s15, [r1, #32]
 80052a6:	7a01      	ldrb	r1, [r0, #8]
 80052a8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80052ac:	edd1 6a00 	vldr	s13, [r1]
 80052b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052b4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80052b8:	e6f0      	b.n	800509c <forward_dense+0x1a0>
 80052ba:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80052c4 <forward_dense+0x3c8>
 80052be:	e6d6      	b.n	800506e <forward_dense+0x172>
 80052c0:	3ffffff8 	.word	0x3ffffff8
 80052c4:	00000000 	.word	0x00000000
 80052c8:	eeb0 7a48 	vmov.f32	s14, s16
 80052cc:	4650      	mov	r0, sl
 80052ce:	4611      	mov	r1, r2
 80052d0:	468c      	mov	ip, r1
 80052d2:	4606      	mov	r6, r0
 80052d4:	f81c 5b01 	ldrb.w	r5, [ip], #1
 80052d8:	ecf6 7a01 	vldmia	r6!, {s15}
 80052dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80052e0:	edd5 6a00 	vldr	s13, [r5]
 80052e4:	9d08      	ldr	r5, [sp, #32]
 80052e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052ea:	42ae      	cmp	r6, r5
 80052ec:	d866      	bhi.n	80053bc <forward_dense+0x4c0>
 80052ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052f0:	f101 0711 	add.w	r7, r1, #17
 80052f4:	3109      	adds	r1, #9
 80052f6:	eba5 0800 	sub.w	r8, r5, r0
 80052fa:	3024      	adds	r0, #36	; 0x24
 80052fc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8005300:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8005304:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8005308:	3108      	adds	r1, #8
 800530a:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800530e:	3020      	adds	r0, #32
 8005310:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005314:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8005318:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800531c:	edd5 7a00 	vldr	s15, [r5]
 8005320:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8005324:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005328:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800532c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005330:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8005334:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8005338:	edd5 2a00 	vldr	s5, [r5]
 800533c:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8005340:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005344:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8005348:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800534c:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8005350:	ed95 3a00 	vldr	s6, [r5]
 8005354:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8005358:	eee3 7a23 	vfma.f32	s15, s6, s7
 800535c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005360:	edd5 3a00 	vldr	s7, [r5]
 8005364:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005368:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800536c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005370:	ed95 4a00 	vldr	s8, [r5]
 8005374:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005378:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800537c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005380:	edd5 4a00 	vldr	s9, [r5]
 8005384:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005388:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800538c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8005390:	edd5 5a00 	vldr	s11, [r5]
 8005394:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005398:	428f      	cmp	r7, r1
 800539a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800539e:	eee5 7a86 	vfma.f32	s15, s11, s12
 80053a2:	ed95 6a00 	vldr	s12, [r5]
 80053a6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80053aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053ae:	d1a9      	bne.n	8005304 <forward_dense+0x408>
 80053b0:	f108 0801 	add.w	r8, r8, #1
 80053b4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80053b8:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80053bc:	455e      	cmp	r6, fp
 80053be:	f4bf af79 	bcs.w	80052b4 <forward_dense+0x3b8>
 80053c2:	f89c 1000 	ldrb.w	r1, [ip]
 80053c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80053ca:	edd1 7a00 	vldr	s15, [r1]
 80053ce:	4631      	mov	r1, r6
 80053d0:	ecf1 6a01 	vldmia	r1!, {s13}
 80053d4:	458b      	cmp	fp, r1
 80053d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053da:	f67f af6b 	bls.w	80052b4 <forward_dense+0x3b8>
 80053de:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80053e2:	edd6 6a01 	vldr	s13, [r6, #4]
 80053e6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80053ea:	edd1 7a00 	vldr	s15, [r1]
 80053ee:	f106 0108 	add.w	r1, r6, #8
 80053f2:	458b      	cmp	fp, r1
 80053f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053f8:	f67f af5c 	bls.w	80052b4 <forward_dense+0x3b8>
 80053fc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8005400:	edd6 6a02 	vldr	s13, [r6, #8]
 8005404:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005408:	edd1 7a00 	vldr	s15, [r1]
 800540c:	f106 010c 	add.w	r1, r6, #12
 8005410:	458b      	cmp	fp, r1
 8005412:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005416:	f67f af4d 	bls.w	80052b4 <forward_dense+0x3b8>
 800541a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800541e:	edd6 6a03 	vldr	s13, [r6, #12]
 8005422:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005426:	edd1 7a00 	vldr	s15, [r1]
 800542a:	f106 0110 	add.w	r1, r6, #16
 800542e:	458b      	cmp	fp, r1
 8005430:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005434:	f67f af3e 	bls.w	80052b4 <forward_dense+0x3b8>
 8005438:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800543c:	edd6 6a04 	vldr	s13, [r6, #16]
 8005440:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005444:	edd1 7a00 	vldr	s15, [r1]
 8005448:	f106 0114 	add.w	r1, r6, #20
 800544c:	458b      	cmp	fp, r1
 800544e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005452:	f67f af2f 	bls.w	80052b4 <forward_dense+0x3b8>
 8005456:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800545a:	edd6 6a05 	vldr	s13, [r6, #20]
 800545e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005462:	edd1 7a00 	vldr	s15, [r1]
 8005466:	f106 0118 	add.w	r1, r6, #24
 800546a:	458b      	cmp	fp, r1
 800546c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005470:	f67f af20 	bls.w	80052b4 <forward_dense+0x3b8>
 8005474:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8005478:	edd6 6a06 	vldr	s13, [r6, #24]
 800547c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005480:	edd1 7a00 	vldr	s15, [r1]
 8005484:	f106 011c 	add.w	r1, r6, #28
 8005488:	458b      	cmp	fp, r1
 800548a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800548e:	f67f af11 	bls.w	80052b4 <forward_dense+0x3b8>
 8005492:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8005496:	edd6 6a07 	vldr	s13, [r6, #28]
 800549a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800549e:	edd1 7a00 	vldr	s15, [r1]
 80054a2:	f106 0120 	add.w	r1, r6, #32
 80054a6:	458b      	cmp	fp, r1
 80054a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054ac:	f67f af02 	bls.w	80052b4 <forward_dense+0x3b8>
 80054b0:	f89c 1008 	ldrb.w	r1, [ip, #8]
 80054b4:	edd6 7a08 	vldr	s15, [r6, #32]
 80054b8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80054bc:	edd1 6a00 	vldr	s13, [r1]
 80054c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054c4:	e6f6      	b.n	80052b4 <forward_dense+0x3b8>
 80054c6:	eeb0 7a48 	vmov.f32	s14, s16
 80054ca:	4650      	mov	r0, sl
 80054cc:	4611      	mov	r1, r2
 80054ce:	f811 5b01 	ldrb.w	r5, [r1], #1
 80054d2:	ecf0 7a01 	vldmia	r0!, {s15}
 80054d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054da:	edd5 6a00 	vldr	s13, [r5]
 80054de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054e2:	e6f5      	b.n	80052d0 <forward_dense+0x3d4>
 80054e4:	4611      	mov	r1, r2
 80054e6:	edda 7a00 	vldr	s15, [sl]
 80054ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80054ec:	f811 5b01 	ldrb.w	r5, [r1], #1
 80054f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054f4:	ed95 7a00 	vldr	s14, [r5]
 80054f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054fc:	e7e7      	b.n	80054ce <forward_dense+0x5d2>
 80054fe:	9803      	ldr	r0, [sp, #12]
 8005500:	9906      	ldr	r1, [sp, #24]
 8005502:	4288      	cmp	r0, r1
 8005504:	f67f adda 	bls.w	80050bc <forward_dense+0x1c0>
 8005508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800550a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800550e:	468b      	mov	fp, r1
 8005510:	f100 0c01 	add.w	ip, r0, #1
 8005514:	9805      	ldr	r0, [sp, #20]
 8005516:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800551a:	3801      	subs	r0, #1
 800551c:	9008      	str	r0, [sp, #32]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80bf 	beq.w	80056a2 <forward_dense+0x7a6>
 8005524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005526:	ecf3 2a01 	vldmia	r3!, {s5}
 800552a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80052c4 <forward_dense+0x3c8>
 800552e:	2900      	cmp	r1, #0
 8005530:	f000 80bf 	beq.w	80056b2 <forward_dense+0x7b6>
 8005534:	1d10      	adds	r0, r2, #4
 8005536:	f10a 0120 	add.w	r1, sl, #32
 800553a:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800553e:	3004      	adds	r0, #4
 8005540:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8005544:	3120      	adds	r1, #32
 8005546:	f007 0e0f 	and.w	lr, r7, #15
 800554a:	093f      	lsrs	r7, r7, #4
 800554c:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8005550:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8005554:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8005558:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800555c:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8005560:	edde 7a00 	vldr	s15, [lr]
 8005564:	ed97 3a00 	vldr	s6, [r7]
 8005568:	0937      	lsrs	r7, r6, #4
 800556a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800556e:	f006 060f 	and.w	r6, r6, #15
 8005572:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005576:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800557a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800557e:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 8005582:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005586:	ed97 3a00 	vldr	s6, [r7]
 800558a:	ed96 4a00 	vldr	s8, [r6]
 800558e:	092e      	lsrs	r6, r5, #4
 8005590:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8005594:	f005 050f 	and.w	r5, r5, #15
 8005598:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800559c:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 80055a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80055a4:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 80055a8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 80055ac:	eee3 7a23 	vfma.f32	s15, s6, s7
 80055b0:	eee4 7a05 	vfma.f32	s15, s8, s10
 80055b4:	ed96 4a00 	vldr	s8, [r6]
 80055b8:	ed95 5a00 	vldr	s10, [r5]
 80055bc:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80055c0:	4560      	cmp	r0, ip
 80055c2:	ea4f 1615 	mov.w	r6, r5, lsr #4
 80055c6:	f005 050f 	and.w	r5, r5, #15
 80055ca:	eee4 7a24 	vfma.f32	s15, s8, s9
 80055ce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80055d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80055d6:	eee5 7a06 	vfma.f32	s15, s10, s12
 80055da:	ed96 5a00 	vldr	s10, [r6]
 80055de:	ed95 6a00 	vldr	s12, [r5]
 80055e2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80055e6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80055ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055ee:	d1a4      	bne.n	800553a <forward_dense+0x63e>
 80055f0:	f1ac 0804 	sub.w	r8, ip, #4
 80055f4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80055f8:	9905      	ldr	r1, [sp, #20]
 80055fa:	458e      	cmp	lr, r1
 80055fc:	d229      	bcs.n	8005652 <forward_dense+0x756>
 80055fe:	9908      	ldr	r1, [sp, #32]
 8005600:	f10e 0008 	add.w	r0, lr, #8
 8005604:	f108 36ff 	add.w	r6, r8, #4294967295
 8005608:	eba1 070e 	sub.w	r7, r1, lr
 800560c:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8005610:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8005614:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005618:	3008      	adds	r0, #8
 800561a:	ed50 5a03 	vldr	s11, [r0, #-12]
 800561e:	f001 050f 	and.w	r5, r1, #15
 8005622:	0909      	lsrs	r1, r1, #4
 8005624:	ed50 6a04 	vldr	s13, [r0, #-16]
 8005628:	42b7      	cmp	r7, r6
 800562a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800562e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005632:	edd5 7a00 	vldr	s15, [r5]
 8005636:	ed91 6a00 	vldr	s12, [r1]
 800563a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800563e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005646:	d1e5      	bne.n	8005614 <forward_dense+0x718>
 8005648:	f109 0901 	add.w	r9, r9, #1
 800564c:	44c8      	add	r8, r9
 800564e:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8005652:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005654:	b1c1      	cbz	r1, 8005688 <forward_dense+0x78c>
 8005656:	f898 1000 	ldrb.w	r1, [r8]
 800565a:	edde 7a00 	vldr	s15, [lr]
 800565e:	0909      	lsrs	r1, r1, #4
 8005660:	9804      	ldr	r0, [sp, #16]
 8005662:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005666:	4402      	add	r2, r0
 8005668:	4484      	add	ip, r0
 800566a:	edd1 6a00 	vldr	s13, [r1]
 800566e:	9903      	ldr	r1, [sp, #12]
 8005670:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005674:	ee72 2a87 	vadd.f32	s5, s5, s14
 8005678:	eceb 2a01 	vstmia	fp!, {s5}
 800567c:	4559      	cmp	r1, fp
 800567e:	f63f af4e 	bhi.w	800551e <forward_dense+0x622>
 8005682:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8005686:	e510      	b.n	80050aa <forward_dense+0x1ae>
 8005688:	9904      	ldr	r1, [sp, #16]
 800568a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800568e:	440a      	add	r2, r1
 8005690:	448c      	add	ip, r1
 8005692:	9903      	ldr	r1, [sp, #12]
 8005694:	ecab 7a01 	vstmia	fp!, {s14}
 8005698:	458b      	cmp	fp, r1
 800569a:	d2f2      	bcs.n	8005682 <forward_dense+0x786>
 800569c:	2b00      	cmp	r3, #0
 800569e:	f47f af41 	bne.w	8005524 <forward_dense+0x628>
 80056a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a4:	eef0 2a48 	vmov.f32	s5, s16
 80056a8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005738 <forward_dense+0x83c>
 80056ac:	2900      	cmp	r1, #0
 80056ae:	f47f af41 	bne.w	8005534 <forward_dense+0x638>
 80056b2:	46d6      	mov	lr, sl
 80056b4:	4690      	mov	r8, r2
 80056b6:	e79f      	b.n	80055f8 <forward_dense+0x6fc>
 80056b8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80056ba:	4651      	mov	r1, sl
 80056bc:	9d06      	ldr	r5, [sp, #24]
 80056be:	9001      	str	r0, [sp, #4]
 80056c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80056c2:	9000      	str	r0, [sp, #0]
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 f96d 	bl	80059a4 <forward_lite_dense_if32of32wf32>
 80056ca:	462b      	mov	r3, r5
 80056cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056ce:	4413      	add	r3, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	9306      	str	r3, [sp, #24]
 80056d4:	e4f2      	b.n	80050bc <forward_dense+0x1c0>
 80056d6:	b01b      	add	sp, #108	; 0x6c
 80056d8:	ecbd 8b02 	vpop	{d8}
 80056dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e0:	4601      	mov	r1, r0
 80056e2:	e4eb      	b.n	80050bc <forward_dense+0x1c0>
 80056e4:	4651      	mov	r1, sl
 80056e6:	4610      	mov	r0, r2
 80056e8:	e572      	b.n	80051d0 <forward_dense+0x2d4>
 80056ea:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80056ee:	f1b9 0f00 	cmp.w	r9, #0
 80056f2:	d016      	beq.n	8005722 <forward_dense+0x826>
 80056f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80056f8:	f000 fb70 	bl	8005ddc <ai_array_get_byte_size>
 80056fc:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8005700:	4602      	mov	r2, r0
 8005702:	4640      	mov	r0, r8
 8005704:	4651      	mov	r1, sl
 8005706:	f000 fa75 	bl	8005bf4 <st_int8_copy>
 800570a:	e44b      	b.n	8004fa4 <forward_dense+0xa8>
 800570c:	2b04      	cmp	r3, #4
 800570e:	d00a      	beq.n	8005726 <forward_dense+0x82a>
 8005710:	f04f 0900 	mov.w	r9, #0
 8005714:	e441      	b.n	8004f9a <forward_dense+0x9e>
 8005716:	930f      	str	r3, [sp, #60]	; 0x3c
 8005718:	e417      	b.n	8004f4a <forward_dense+0x4e>
 800571a:	2300      	movs	r3, #0
 800571c:	930d      	str	r3, [sp, #52]	; 0x34
 800571e:	460b      	mov	r3, r1
 8005720:	e413      	b.n	8004f4a <forward_dense+0x4e>
 8005722:	46c2      	mov	sl, r8
 8005724:	e43e      	b.n	8004fa4 <forward_dense+0xa8>
 8005726:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800572a:	e43b      	b.n	8004fa4 <forward_dense+0xa8>
 800572c:	2300      	movs	r3, #0
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	deff      	udf	#255	; 0xff
 8005732:	2300      	movs	r3, #0
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	deff      	udf	#255	; 0xff
 8005738:	00000000 	.word	0x00000000

0800573c <forward_relu>:
 800573c:	6982      	ldr	r2, [r0, #24]
 800573e:	8813      	ldrh	r3, [r2, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05b      	beq.n	80057fc <forward_relu+0xc0>
 8005744:	6851      	ldr	r1, [r2, #4]
 8005746:	684a      	ldr	r2, [r1, #4]
 8005748:	b102      	cbz	r2, 800574c <forward_relu+0x10>
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	f000 8123 	beq.w	8005998 <forward_relu+0x25c>
 8005752:	b470      	push	{r4, r5, r6}
 8005754:	690b      	ldr	r3, [r1, #16]
 8005756:	b103      	cbz	r3, 800575a <forward_relu+0x1e>
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69c6      	ldr	r6, [r0, #28]
 800575c:	2e00      	cmp	r6, #0
 800575e:	f000 809e 	beq.w	800589e <forward_relu+0x162>
 8005762:	6871      	ldr	r1, [r6, #4]
 8005764:	6998      	ldr	r0, [r3, #24]
 8005766:	2901      	cmp	r1, #1
 8005768:	f000 80c3 	beq.w	80058f2 <forward_relu+0x1b6>
 800576c:	6893      	ldr	r3, [r2, #8]
 800576e:	6991      	ldr	r1, [r2, #24]
 8005770:	0a1b      	lsrs	r3, r3, #8
 8005772:	6880      	ldr	r0, [r0, #8]
 8005774:	688d      	ldr	r5, [r1, #8]
 8005776:	f000 80f2 	beq.w	800595e <forward_relu+0x222>
 800577a:	68d4      	ldr	r4, [r2, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005786:	42a3      	cmp	r3, r4
 8005788:	fb01 f202 	mul.w	r2, r1, r2
 800578c:	d1f9      	bne.n	8005782 <forward_relu+0x46>
 800578e:	68b3      	ldr	r3, [r6, #8]
 8005790:	ed93 7a02 	vldr	s14, [r3, #8]
 8005794:	edd3 6a00 	vldr	s13, [r3]
 8005798:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800579c:	ed93 6a01 	vldr	s12, [r3, #4]
 80057a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a4:	d42c      	bmi.n	8005800 <forward_relu+0xc4>
 80057a6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80057aa:	4413      	add	r3, r2
 80057ac:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80057b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80057b4:	4295      	cmp	r5, r2
 80057b6:	d81f      	bhi.n	80057f8 <forward_relu+0xbc>
 80057b8:	3204      	adds	r2, #4
 80057ba:	1d01      	adds	r1, r0, #4
 80057bc:	e00d      	b.n	80057da <forward_relu+0x9e>
 80057be:	eef4 6ae7 	vcmpe.f32	s13, s15
 80057c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c6:	db03      	blt.n	80057d0 <forward_relu+0x94>
 80057c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057d0:	3b08      	subs	r3, #8
 80057d2:	ed61 7a01 	vstmdb	r1!, {s15}
 80057d6:	429d      	cmp	r5, r3
 80057d8:	d80e      	bhi.n	80057f8 <forward_relu+0xbc>
 80057da:	4613      	mov	r3, r2
 80057dc:	ed72 7a01 	vldmdb	r2!, {s15}
 80057e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e8:	d9e9      	bls.n	80057be <forward_relu+0x82>
 80057ea:	3b08      	subs	r3, #8
 80057ec:	eef0 7a47 	vmov.f32	s15, s14
 80057f0:	429d      	cmp	r5, r3
 80057f2:	ed61 7a01 	vstmdb	r1!, {s15}
 80057f6:	d9f0      	bls.n	80057da <forward_relu+0x9e>
 80057f8:	bc70      	pop	{r4, r5, r6}
 80057fa:	4770      	bx	lr
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	deff      	udf	#255	; 0xff
 8005800:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005804:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8005808:	4411      	add	r1, r2
 800580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005812:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005816:	d11f      	bne.n	8005858 <forward_relu+0x11c>
 8005818:	429d      	cmp	r5, r3
 800581a:	d8ed      	bhi.n	80057f8 <forward_relu+0xbc>
 800581c:	1b5d      	subs	r5, r3, r5
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	1d01      	adds	r1, r0, #4
 8005822:	2000      	movs	r0, #0
 8005824:	f025 0503 	bic.w	r5, r5, #3
 8005828:	1b5b      	subs	r3, r3, r5
 800582a:	ed72 7a01 	vldmdb	r2!, {s15}
 800582e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005836:	dc0a      	bgt.n	800584e <forward_relu+0x112>
 8005838:	429a      	cmp	r2, r3
 800583a:	f841 0d04 	str.w	r0, [r1, #-4]!
 800583e:	d0db      	beq.n	80057f8 <forward_relu+0xbc>
 8005840:	ed72 7a01 	vldmdb	r2!, {s15}
 8005844:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	ddf4      	ble.n	8005838 <forward_relu+0xfc>
 800584e:	429a      	cmp	r2, r3
 8005850:	ed61 7a01 	vstmdb	r1!, {s15}
 8005854:	d1e9      	bne.n	800582a <forward_relu+0xee>
 8005856:	e7cf      	b.n	80057f8 <forward_relu+0xbc>
 8005858:	429d      	cmp	r5, r3
 800585a:	d8cd      	bhi.n	80057f8 <forward_relu+0xbc>
 800585c:	1b5d      	subs	r5, r3, r5
 800585e:	1d1a      	adds	r2, r3, #4
 8005860:	1d01      	adds	r1, r0, #4
 8005862:	f025 0503 	bic.w	r5, r5, #3
 8005866:	1b5b      	subs	r3, r3, r5
 8005868:	ed72 7a01 	vldmdb	r2!, {s15}
 800586c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005874:	db0e      	blt.n	8005894 <forward_relu+0x158>
 8005876:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800587a:	4293      	cmp	r3, r2
 800587c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005880:	ed61 7a01 	vstmdb	r1!, {s15}
 8005884:	d0b8      	beq.n	80057f8 <forward_relu+0xbc>
 8005886:	ed72 7a01 	vldmdb	r2!, {s15}
 800588a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800588e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005892:	daf0      	bge.n	8005876 <forward_relu+0x13a>
 8005894:	4293      	cmp	r3, r2
 8005896:	ed61 7a01 	vstmdb	r1!, {s15}
 800589a:	d1e5      	bne.n	8005868 <forward_relu+0x12c>
 800589c:	e7ac      	b.n	80057f8 <forward_relu+0xbc>
 800589e:	6999      	ldr	r1, [r3, #24]
 80058a0:	6893      	ldr	r3, [r2, #8]
 80058a2:	6990      	ldr	r0, [r2, #24]
 80058a4:	0a1b      	lsrs	r3, r3, #8
 80058a6:	6889      	ldr	r1, [r1, #8]
 80058a8:	6884      	ldr	r4, [r0, #8]
 80058aa:	d06e      	beq.n	800598a <forward_relu+0x24e>
 80058ac:	68d5      	ldr	r5, [r2, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80058b4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80058b8:	429d      	cmp	r5, r3
 80058ba:	fb00 f202 	mul.w	r2, r0, r2
 80058be:	d1f9      	bne.n	80058b4 <forward_relu+0x178>
 80058c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80058c4:	4413      	add	r3, r2
 80058c6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80058ca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80058ce:	4294      	cmp	r4, r2
 80058d0:	d892      	bhi.n	80057f8 <forward_relu+0xbc>
 80058d2:	3204      	adds	r2, #4
 80058d4:	3104      	adds	r1, #4
 80058d6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80059a0 <forward_relu+0x264>
 80058da:	4613      	mov	r3, r2
 80058dc:	ed72 7a01 	vldmdb	r2!, {s15}
 80058e0:	3b08      	subs	r3, #8
 80058e2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80058e6:	ed61 7a01 	vstmdb	r1!, {s15}
 80058ea:	429c      	cmp	r4, r3
 80058ec:	d9f5      	bls.n	80058da <forward_relu+0x19e>
 80058ee:	bc70      	pop	{r4, r5, r6}
 80058f0:	4770      	bx	lr
 80058f2:	6993      	ldr	r3, [r2, #24]
 80058f4:	6880      	ldr	r0, [r0, #8]
 80058f6:	689c      	ldr	r4, [r3, #8]
 80058f8:	6893      	ldr	r3, [r2, #8]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	d047      	beq.n	800598e <forward_relu+0x252>
 80058fe:	68d5      	ldr	r5, [r2, #12]
 8005900:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005904:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005908:	42ab      	cmp	r3, r5
 800590a:	fb02 f101 	mul.w	r1, r2, r1
 800590e:	d1f9      	bne.n	8005904 <forward_relu+0x1c8>
 8005910:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8005914:	68b3      	ldr	r3, [r6, #8]
 8005916:	440a      	add	r2, r1
 8005918:	ed93 7a00 	vldr	s14, [r3]
 800591c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005920:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005924:	429c      	cmp	r4, r3
 8005926:	f63f af67 	bhi.w	80057f8 <forward_relu+0xbc>
 800592a:	1d02      	adds	r2, r0, #4
 800592c:	3304      	adds	r3, #4
 800592e:	2000      	movs	r0, #0
 8005930:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005934:	1f19      	subs	r1, r3, #4
 8005936:	3b08      	subs	r3, #8
 8005938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	d406      	bmi.n	8005950 <forward_relu+0x214>
 8005942:	429c      	cmp	r4, r3
 8005944:	f842 0d04 	str.w	r0, [r2, #-4]!
 8005948:	f63f af56 	bhi.w	80057f8 <forward_relu+0xbc>
 800594c:	460b      	mov	r3, r1
 800594e:	e7ef      	b.n	8005930 <forward_relu+0x1f4>
 8005950:	429c      	cmp	r4, r3
 8005952:	ed62 7a01 	vstmdb	r2!, {s15}
 8005956:	f63f af4f 	bhi.w	80057f8 <forward_relu+0xbc>
 800595a:	460b      	mov	r3, r1
 800595c:	e7e8      	b.n	8005930 <forward_relu+0x1f4>
 800595e:	68b3      	ldr	r3, [r6, #8]
 8005960:	ed93 7a02 	vldr	s14, [r3, #8]
 8005964:	edd3 6a00 	vldr	s13, [r3]
 8005968:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800596c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005974:	d401      	bmi.n	800597a <forward_relu+0x23e>
 8005976:	462a      	mov	r2, r5
 8005978:	e71e      	b.n	80057b8 <forward_relu+0x7c>
 800597a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800597e:	462b      	mov	r3, r5
 8005980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005984:	f47f af6a 	bne.w	800585c <forward_relu+0x120>
 8005988:	e748      	b.n	800581c <forward_relu+0xe0>
 800598a:	4622      	mov	r2, r4
 800598c:	e7a1      	b.n	80058d2 <forward_relu+0x196>
 800598e:	68b2      	ldr	r2, [r6, #8]
 8005990:	4623      	mov	r3, r4
 8005992:	ed92 7a00 	vldr	s14, [r2]
 8005996:	e7c8      	b.n	800592a <forward_relu+0x1ee>
 8005998:	2300      	movs	r3, #0
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	deff      	udf	#255	; 0xff
 800599e:	bf00      	nop
 80059a0:	00000000 	.word	0x00000000

080059a4 <forward_lite_dense_if32of32wf32>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	ed2d 8b0c 	vpush	{d8-d13}
 80059ac:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 80059b0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80059b4:	4287      	cmp	r7, r0
 80059b6:	f240 8105 	bls.w	8005bc4 <forward_lite_dense_if32of32wf32+0x220>
 80059ba:	f1a6 0810 	sub.w	r8, r6, #16
 80059be:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80059c2:	4605      	mov	r5, r0
 80059c4:	f006 0b0f 	and.w	fp, r6, #15
 80059c8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80059cc:	f108 0801 	add.w	r8, r8, #1
 80059d0:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80059d4:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80059d8:	2e0f      	cmp	r6, #15
 80059da:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8005bf0 <forward_lite_dense_if32of32wf32+0x24c>
 80059de:	f240 8102 	bls.w	8005be6 <forward_lite_dense_if32of32wf32+0x242>
 80059e2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80059e6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80059ea:	46b6      	mov	lr, r6
 80059ec:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 80059f0:	f1ae 0e10 	sub.w	lr, lr, #16
 80059f4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80059f8:	3440      	adds	r4, #64	; 0x40
 80059fa:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 80059fe:	f1be 0f0f 	cmp.w	lr, #15
 8005a02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a06:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 8005a0a:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8005a0e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8005a12:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 8005a16:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005a1a:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8005a1e:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8005a22:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 8005a26:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 8005a2a:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8005a2e:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8005a32:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a36:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 8005a3a:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8005a3e:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8005a42:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 8005a46:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 8005a4a:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8005a4e:	eeed 7a26 	vfma.f32	s15, s26, s13
 8005a52:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 8005a56:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 8005a5a:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8005a5e:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8005a62:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 8005a66:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 8005a6a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8005a6e:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8005a72:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8005a76:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8005a7a:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8005a7e:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8005a82:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8005a86:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005a8a:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8005a8e:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8005a92:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8005a96:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005a9a:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005a9e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005aa2:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005aa6:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005aaa:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005aae:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005ab2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005ab6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005abe:	d895      	bhi.n	80059ec <forward_lite_dense_if32of32wf32+0x48>
 8005ac0:	eb02 0e0a 	add.w	lr, r2, sl
 8005ac4:	465c      	mov	r4, fp
 8005ac6:	46c4      	mov	ip, r8
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d075      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005acc:	eddc 6a00 	vldr	s13, [ip]
 8005ad0:	2c01      	cmp	r4, #1
 8005ad2:	edde 7a00 	vldr	s15, [lr]
 8005ad6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ada:	d06d      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005adc:	eddc 6a01 	vldr	s13, [ip, #4]
 8005ae0:	2c02      	cmp	r4, #2
 8005ae2:	edde 7a01 	vldr	s15, [lr, #4]
 8005ae6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005aea:	d065      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005aec:	eddc 6a02 	vldr	s13, [ip, #8]
 8005af0:	2c03      	cmp	r4, #3
 8005af2:	edde 7a02 	vldr	s15, [lr, #8]
 8005af6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005afa:	d05d      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005afc:	eddc 6a03 	vldr	s13, [ip, #12]
 8005b00:	2c04      	cmp	r4, #4
 8005b02:	edde 7a03 	vldr	s15, [lr, #12]
 8005b06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b0a:	d055      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b0c:	eddc 6a04 	vldr	s13, [ip, #16]
 8005b10:	2c05      	cmp	r4, #5
 8005b12:	edde 7a04 	vldr	s15, [lr, #16]
 8005b16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b1a:	d04d      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b1c:	eddc 6a05 	vldr	s13, [ip, #20]
 8005b20:	2c06      	cmp	r4, #6
 8005b22:	edde 7a05 	vldr	s15, [lr, #20]
 8005b26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b2a:	d045      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b2c:	eddc 6a06 	vldr	s13, [ip, #24]
 8005b30:	2c07      	cmp	r4, #7
 8005b32:	edde 7a06 	vldr	s15, [lr, #24]
 8005b36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b3a:	d03d      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b3c:	eddc 6a07 	vldr	s13, [ip, #28]
 8005b40:	2c08      	cmp	r4, #8
 8005b42:	edde 7a07 	vldr	s15, [lr, #28]
 8005b46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b4a:	d035      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b4c:	eddc 6a08 	vldr	s13, [ip, #32]
 8005b50:	2c09      	cmp	r4, #9
 8005b52:	edde 7a08 	vldr	s15, [lr, #32]
 8005b56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b5a:	d02d      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b5c:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8005b60:	2c0a      	cmp	r4, #10
 8005b62:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8005b66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b6a:	d025      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b6c:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8005b70:	2c0b      	cmp	r4, #11
 8005b72:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8005b76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b7a:	d01d      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b7c:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8005b80:	2c0c      	cmp	r4, #12
 8005b82:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8005b86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b8a:	d015      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b8c:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8005b90:	3c0d      	subs	r4, #13
 8005b92:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8005b96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b9a:	d00d      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005b9c:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8005ba0:	2c01      	cmp	r4, #1
 8005ba2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8005ba6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005baa:	d005      	beq.n	8005bb8 <forward_lite_dense_if32of32wf32+0x214>
 8005bac:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8005bb0:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8005bb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005bb8:	eca5 7a01 	vstmia	r5!, {s14}
 8005bbc:	42af      	cmp	r7, r5
 8005bbe:	444a      	add	r2, r9
 8005bc0:	f63f af0a 	bhi.w	80059d8 <forward_lite_dense_if32of32wf32+0x34>
 8005bc4:	b15b      	cbz	r3, 8005bde <forward_lite_dense_if32of32wf32+0x23a>
 8005bc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005bc8:	b14a      	cbz	r2, 8005bde <forward_lite_dense_if32of32wf32+0x23a>
 8005bca:	edd0 7a00 	vldr	s15, [r0]
 8005bce:	ecb3 7a01 	vldmia	r3!, {s14}
 8005bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bd6:	ece0 7a01 	vstmia	r0!, {s15}
 8005bda:	4287      	cmp	r7, r0
 8005bdc:	d1f5      	bne.n	8005bca <forward_lite_dense_if32of32wf32+0x226>
 8005bde:	ecbd 8b0c 	vpop	{d8-d13}
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	4634      	mov	r4, r6
 8005be8:	4696      	mov	lr, r2
 8005bea:	468c      	mov	ip, r1
 8005bec:	e76c      	b.n	8005ac8 <forward_lite_dense_if32of32wf32+0x124>
 8005bee:	bf00      	nop
 8005bf0:	00000000 	.word	0x00000000

08005bf4 <st_int8_copy>:
 8005bf4:	4288      	cmp	r0, r1
 8005bf6:	d010      	beq.n	8005c1a <st_int8_copy+0x26>
 8005bf8:	b17a      	cbz	r2, 8005c1a <st_int8_copy+0x26>
 8005bfa:	4288      	cmp	r0, r1
 8005bfc:	eb00 0302 	add.w	r3, r0, r2
 8005c00:	d20c      	bcs.n	8005c1c <st_int8_copy+0x28>
 8005c02:	428b      	cmp	r3, r1
 8005c04:	d90a      	bls.n	8005c1c <st_int8_copy+0x28>
 8005c06:	4283      	cmp	r3, r0
 8005c08:	440a      	add	r2, r1
 8005c0a:	d906      	bls.n	8005c1a <st_int8_copy+0x26>
 8005c0c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005c10:	4283      	cmp	r3, r0
 8005c12:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005c16:	d1f9      	bne.n	8005c0c <st_int8_copy+0x18>
 8005c18:	4770      	bx	lr
 8005c1a:	4770      	bx	lr
 8005c1c:	078b      	lsls	r3, r1, #30
 8005c1e:	d102      	bne.n	8005c26 <st_int8_copy+0x32>
 8005c20:	e008      	b.n	8005c34 <st_int8_copy+0x40>
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	d04d      	beq.n	8005cc2 <st_int8_copy+0xce>
 8005c26:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8005c2a:	3a01      	subs	r2, #1
 8005c2c:	f801 3b01 	strb.w	r3, [r1], #1
 8005c30:	078b      	lsls	r3, r1, #30
 8005c32:	d1f6      	bne.n	8005c22 <st_int8_copy+0x2e>
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8005c3c:	d05e      	beq.n	8005cfc <st_int8_copy+0x108>
 8005c3e:	ea40 0301 	orr.w	r3, r0, r1
 8005c42:	075b      	lsls	r3, r3, #29
 8005c44:	d13e      	bne.n	8005cc4 <st_int8_copy+0xd0>
 8005c46:	f10e 33ff 	add.w	r3, lr, #4294967295
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d93a      	bls.n	8005cc4 <st_int8_copy+0xd0>
 8005c4e:	f100 0310 	add.w	r3, r0, #16
 8005c52:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005c56:	f101 0c10 	add.w	ip, r1, #16
 8005c5a:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8005c5e:	3310      	adds	r3, #16
 8005c60:	f10c 0c10 	add.w	ip, ip, #16
 8005c64:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8005c68:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8005c6c:	4573      	cmp	r3, lr
 8005c6e:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8005c72:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8005c76:	d1f2      	bne.n	8005c5e <st_int8_copy+0x6a>
 8005c78:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8005c7c:	4421      	add	r1, r4
 8005c7e:	4420      	add	r0, r4
 8005c80:	f002 0203 	and.w	r2, r2, #3
 8005c84:	b16b      	cbz	r3, 8005ca2 <st_int8_copy+0xae>
 8005c86:	6804      	ldr	r4, [r0, #0]
 8005c88:	600c      	str	r4, [r1, #0]
 8005c8a:	1e5c      	subs	r4, r3, #1
 8005c8c:	d005      	beq.n	8005c9a <st_int8_copy+0xa6>
 8005c8e:	6845      	ldr	r5, [r0, #4]
 8005c90:	2c01      	cmp	r4, #1
 8005c92:	604d      	str	r5, [r1, #4]
 8005c94:	d001      	beq.n	8005c9a <st_int8_copy+0xa6>
 8005c96:	6884      	ldr	r4, [r0, #8]
 8005c98:	608c      	str	r4, [r1, #8]
 8005c9a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005c9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005ca2:	b162      	cbz	r2, 8005cbe <st_int8_copy+0xca>
 8005ca4:	f990 3000 	ldrsb.w	r3, [r0]
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	700b      	strb	r3, [r1, #0]
 8005cac:	d007      	beq.n	8005cbe <st_int8_copy+0xca>
 8005cae:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8005cb2:	2a01      	cmp	r2, #1
 8005cb4:	704b      	strb	r3, [r1, #1]
 8005cb6:	d002      	beq.n	8005cbe <st_int8_copy+0xca>
 8005cb8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8005cbc:	708b      	strb	r3, [r1, #2]
 8005cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc2:	4770      	bx	lr
 8005cc4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005cc8:	460b      	mov	r3, r1
 8005cca:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8005cce:	4684      	mov	ip, r0
 8005cd0:	f8dc 8000 	ldr.w	r8, [ip]
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8005cda:	f10c 0c10 	add.w	ip, ip, #16
 8005cde:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8005ce2:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8005ce6:	f843 8c10 	str.w	r8, [r3, #-16]
 8005cea:	f843 7c0c 	str.w	r7, [r3, #-12]
 8005cee:	f843 6c08 	str.w	r6, [r3, #-8]
 8005cf2:	f843 5c04 	str.w	r5, [r3, #-4]
 8005cf6:	459e      	cmp	lr, r3
 8005cf8:	d1ea      	bne.n	8005cd0 <st_int8_copy+0xdc>
 8005cfa:	e7bd      	b.n	8005c78 <st_int8_copy+0x84>
 8005cfc:	0893      	lsrs	r3, r2, #2
 8005cfe:	f002 0203 	and.w	r2, r2, #3
 8005d02:	e7bf      	b.n	8005c84 <st_int8_copy+0x90>

08005d04 <ai_array_to_buffer_fmt>:
 8005d04:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d050      	beq.n	8005dae <ai_array_to_buffer_fmt+0xaa>
 8005d0c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8005d10:	4b29      	ldr	r3, [pc, #164]	; (8005db8 <ai_array_to_buffer_fmt+0xb4>)
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d00b      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d16:	dc1c      	bgt.n	8005d52 <ai_array_to_buffer_fmt+0x4e>
 8005d18:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <ai_array_to_buffer_fmt+0xb8>)
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d007      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d1e:	dd0b      	ble.n	8005d38 <ai_array_to_buffer_fmt+0x34>
 8005d20:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <ai_array_to_buffer_fmt+0xbc>)
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d003      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d26:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d131      	bne.n	8005d92 <ai_array_to_buffer_fmt+0x8e>
 8005d2e:	4613      	mov	r3, r2
 8005d30:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005d34:	4318      	orrs	r0, r3
 8005d36:	4770      	bx	lr
 8005d38:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d0f6      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d40:	dd2c      	ble.n	8005d9c <ai_array_to_buffer_fmt+0x98>
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <ai_array_to_buffer_fmt+0xc0>)
 8005d44:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	bf18      	it	ne
 8005d4c:	2340      	movne	r3, #64	; 0x40
 8005d4e:	4318      	orrs	r0, r3
 8005d50:	4770      	bx	lr
 8005d52:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <ai_array_to_buffer_fmt+0xc4>)
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d0ea      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d58:	dd0e      	ble.n	8005d78 <ai_array_to_buffer_fmt+0x74>
 8005d5a:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <ai_array_to_buffer_fmt+0xc8>)
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d0e6      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d60:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d0e2      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <ai_array_to_buffer_fmt+0xcc>)
 8005d6a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	bf18      	it	ne
 8005d72:	2340      	movne	r3, #64	; 0x40
 8005d74:	4318      	orrs	r0, r3
 8005d76:	4770      	bx	lr
 8005d78:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d0d6      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d80:	3307      	adds	r3, #7
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d0d3      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005d86:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	bf18      	it	ne
 8005d8e:	2340      	movne	r3, #64	; 0x40
 8005d90:	e7ce      	b.n	8005d30 <ai_array_to_buffer_fmt+0x2c>
 8005d92:	4b10      	ldr	r3, [pc, #64]	; (8005dd4 <ai_array_to_buffer_fmt+0xd0>)
 8005d94:	429a      	cmp	r2, r3
 8005d96:	bf18      	it	ne
 8005d98:	2340      	movne	r3, #64	; 0x40
 8005d9a:	e7c9      	b.n	8005d30 <ai_array_to_buffer_fmt+0x2c>
 8005d9c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d0c4      	beq.n	8005d2e <ai_array_to_buffer_fmt+0x2a>
 8005da4:	3380      	adds	r3, #128	; 0x80
 8005da6:	429a      	cmp	r2, r3
 8005da8:	bf18      	it	ne
 8005daa:	2340      	movne	r3, #64	; 0x40
 8005dac:	e7c0      	b.n	8005d30 <ai_array_to_buffer_fmt+0x2c>
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <ai_array_to_buffer_fmt+0xd4>)
 8005db0:	4003      	ands	r3, r0
 8005db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db6:	e7bb      	b.n	8005d30 <ai_array_to_buffer_fmt+0x2c>
 8005db8:	00840040 	.word	0x00840040
 8005dbc:	00040840 	.word	0x00040840
 8005dc0:	00041040 	.word	0x00041040
 8005dc4:	00040447 	.word	0x00040447
 8005dc8:	00840840 	.word	0x00840840
 8005dcc:	00841040 	.word	0x00841040
 8005dd0:	0084084f 	.word	0x0084084f
 8005dd4:	0004084f 	.word	0x0004084f
 8005dd8:	00803fff 	.word	0x00803fff

08005ddc <ai_array_get_byte_size>:
 8005ddc:	b319      	cbz	r1, 8005e26 <ai_array_get_byte_size+0x4a>
 8005dde:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005de2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8005de6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8005dea:	11c0      	asrs	r0, r0, #7
 8005dec:	fb03 f101 	mul.w	r1, r3, r1
 8005df0:	2a04      	cmp	r2, #4
 8005df2:	f101 0107 	add.w	r1, r1, #7
 8005df6:	f021 0107 	bic.w	r1, r1, #7
 8005dfa:	fa21 f10c 	lsr.w	r1, r1, ip
 8005dfe:	d00b      	beq.n	8005e18 <ai_array_get_byte_size+0x3c>
 8005e00:	2a08      	cmp	r2, #8
 8005e02:	d002      	beq.n	8005e0a <ai_array_get_byte_size+0x2e>
 8005e04:	3107      	adds	r1, #7
 8005e06:	08c8      	lsrs	r0, r1, #3
 8005e08:	4770      	bx	lr
 8005e0a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005e0e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8005e12:	3107      	adds	r1, #7
 8005e14:	08c8      	lsrs	r0, r1, #3
 8005e16:	4770      	bx	lr
 8005e18:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005e1c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8005e20:	3107      	adds	r1, #7
 8005e22:	08c8      	lsrs	r0, r1, #3
 8005e24:	4770      	bx	lr
 8005e26:	4608      	mov	r0, r1
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop

08005e2c <ai_array_get_data_byte_size>:
 8005e2c:	b161      	cbz	r1, 8005e48 <ai_array_get_data_byte_size+0x1c>
 8005e2e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005e32:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8005e36:	fb03 f101 	mul.w	r1, r3, r1
 8005e3a:	1dc8      	adds	r0, r1, #7
 8005e3c:	f020 0007 	bic.w	r0, r0, #7
 8005e40:	40d0      	lsrs	r0, r2
 8005e42:	3007      	adds	r0, #7
 8005e44:	08c0      	lsrs	r0, r0, #3
 8005e46:	4770      	bx	lr
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4770      	bx	lr

08005e4c <ai_version_get>:
 8005e4c:	0212      	lsls	r2, r2, #8
 8005e4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005e52:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005e56:	4770      	bx	lr

08005e58 <get_tensor_byte_size>:
 8005e58:	b430      	push	{r4, r5}
 8005e5a:	6985      	ldr	r5, [r0, #24]
 8005e5c:	68c4      	ldr	r4, [r0, #12]
 8005e5e:	6941      	ldr	r1, [r0, #20]
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <get_tensor_byte_size+0x24>)
 8005e62:	6828      	ldr	r0, [r5, #0]
 8005e64:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <get_tensor_byte_size+0x28>)
 8005e66:	4003      	ands	r3, r0
 8005e68:	68c9      	ldr	r1, [r1, #12]
 8005e6a:	68e0      	ldr	r0, [r4, #12]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	fb01 f000 	mul.w	r0, r1, r0
 8005e72:	d101      	bne.n	8005e78 <get_tensor_byte_size+0x20>
 8005e74:	3007      	adds	r0, #7
 8005e76:	08c0      	lsrs	r0, r0, #3
 8005e78:	bc30      	pop	{r4, r5}
 8005e7a:	4770      	bx	lr
 8005e7c:	017fffff 	.word	0x017fffff
 8005e80:	000400c0 	.word	0x000400c0

08005e84 <sbrk_aligned>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	4e0e      	ldr	r6, [pc, #56]	; (8005ec0 <sbrk_aligned+0x3c>)
 8005e88:	460c      	mov	r4, r1
 8005e8a:	6831      	ldr	r1, [r6, #0]
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	b911      	cbnz	r1, 8005e96 <sbrk_aligned+0x12>
 8005e90:	f000 fae8 	bl	8006464 <_sbrk_r>
 8005e94:	6030      	str	r0, [r6, #0]
 8005e96:	4621      	mov	r1, r4
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f000 fae3 	bl	8006464 <_sbrk_r>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d00a      	beq.n	8005eb8 <sbrk_aligned+0x34>
 8005ea2:	1cc4      	adds	r4, r0, #3
 8005ea4:	f024 0403 	bic.w	r4, r4, #3
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d007      	beq.n	8005ebc <sbrk_aligned+0x38>
 8005eac:	1a21      	subs	r1, r4, r0
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 fad8 	bl	8006464 <_sbrk_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d101      	bne.n	8005ebc <sbrk_aligned+0x38>
 8005eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	2000090c 	.word	0x2000090c

08005ec4 <_malloc_r>:
 8005ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	1ccd      	adds	r5, r1, #3
 8005eca:	f025 0503 	bic.w	r5, r5, #3
 8005ece:	3508      	adds	r5, #8
 8005ed0:	2d0c      	cmp	r5, #12
 8005ed2:	bf38      	it	cc
 8005ed4:	250c      	movcc	r5, #12
 8005ed6:	2d00      	cmp	r5, #0
 8005ed8:	4607      	mov	r7, r0
 8005eda:	db01      	blt.n	8005ee0 <_malloc_r+0x1c>
 8005edc:	42a9      	cmp	r1, r5
 8005ede:	d905      	bls.n	8005eec <_malloc_r+0x28>
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fc0 <_malloc_r+0xfc>
 8005ef0:	f000 f868 	bl	8005fc4 <__malloc_lock>
 8005ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef8:	461c      	mov	r4, r3
 8005efa:	bb5c      	cbnz	r4, 8005f54 <_malloc_r+0x90>
 8005efc:	4629      	mov	r1, r5
 8005efe:	4638      	mov	r0, r7
 8005f00:	f7ff ffc0 	bl	8005e84 <sbrk_aligned>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	4604      	mov	r4, r0
 8005f08:	d155      	bne.n	8005fb6 <_malloc_r+0xf2>
 8005f0a:	f8d8 4000 	ldr.w	r4, [r8]
 8005f0e:	4626      	mov	r6, r4
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	d145      	bne.n	8005fa0 <_malloc_r+0xdc>
 8005f14:	2c00      	cmp	r4, #0
 8005f16:	d048      	beq.n	8005faa <_malloc_r+0xe6>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	eb04 0903 	add.w	r9, r4, r3
 8005f22:	f000 fa9f 	bl	8006464 <_sbrk_r>
 8005f26:	4581      	cmp	r9, r0
 8005f28:	d13f      	bne.n	8005faa <_malloc_r+0xe6>
 8005f2a:	6821      	ldr	r1, [r4, #0]
 8005f2c:	1a6d      	subs	r5, r5, r1
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4638      	mov	r0, r7
 8005f32:	f7ff ffa7 	bl	8005e84 <sbrk_aligned>
 8005f36:	3001      	adds	r0, #1
 8005f38:	d037      	beq.n	8005faa <_malloc_r+0xe6>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	442b      	add	r3, r5
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	f8d8 3000 	ldr.w	r3, [r8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d038      	beq.n	8005fba <_malloc_r+0xf6>
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	42a2      	cmp	r2, r4
 8005f4c:	d12b      	bne.n	8005fa6 <_malloc_r+0xe2>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	e00f      	b.n	8005f74 <_malloc_r+0xb0>
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	1b52      	subs	r2, r2, r5
 8005f58:	d41f      	bmi.n	8005f9a <_malloc_r+0xd6>
 8005f5a:	2a0b      	cmp	r2, #11
 8005f5c:	d917      	bls.n	8005f8e <_malloc_r+0xca>
 8005f5e:	1961      	adds	r1, r4, r5
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	6025      	str	r5, [r4, #0]
 8005f64:	bf18      	it	ne
 8005f66:	6059      	strne	r1, [r3, #4]
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	bf08      	it	eq
 8005f6c:	f8c8 1000 	streq.w	r1, [r8]
 8005f70:	5162      	str	r2, [r4, r5]
 8005f72:	604b      	str	r3, [r1, #4]
 8005f74:	4638      	mov	r0, r7
 8005f76:	f104 060b 	add.w	r6, r4, #11
 8005f7a:	f000 f829 	bl	8005fd0 <__malloc_unlock>
 8005f7e:	f026 0607 	bic.w	r6, r6, #7
 8005f82:	1d23      	adds	r3, r4, #4
 8005f84:	1af2      	subs	r2, r6, r3
 8005f86:	d0ae      	beq.n	8005ee6 <_malloc_r+0x22>
 8005f88:	1b9b      	subs	r3, r3, r6
 8005f8a:	50a3      	str	r3, [r4, r2]
 8005f8c:	e7ab      	b.n	8005ee6 <_malloc_r+0x22>
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	6862      	ldr	r2, [r4, #4]
 8005f92:	d1dd      	bne.n	8005f50 <_malloc_r+0x8c>
 8005f94:	f8c8 2000 	str.w	r2, [r8]
 8005f98:	e7ec      	b.n	8005f74 <_malloc_r+0xb0>
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	6864      	ldr	r4, [r4, #4]
 8005f9e:	e7ac      	b.n	8005efa <_malloc_r+0x36>
 8005fa0:	4634      	mov	r4, r6
 8005fa2:	6876      	ldr	r6, [r6, #4]
 8005fa4:	e7b4      	b.n	8005f10 <_malloc_r+0x4c>
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	e7cc      	b.n	8005f44 <_malloc_r+0x80>
 8005faa:	230c      	movs	r3, #12
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f000 f80e 	bl	8005fd0 <__malloc_unlock>
 8005fb4:	e797      	b.n	8005ee6 <_malloc_r+0x22>
 8005fb6:	6025      	str	r5, [r4, #0]
 8005fb8:	e7dc      	b.n	8005f74 <_malloc_r+0xb0>
 8005fba:	605b      	str	r3, [r3, #4]
 8005fbc:	deff      	udf	#255	; 0xff
 8005fbe:	bf00      	nop
 8005fc0:	20000908 	.word	0x20000908

08005fc4 <__malloc_lock>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	; (8005fcc <__malloc_lock+0x8>)
 8005fc6:	f000 ba9a 	b.w	80064fe <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	20000a50 	.word	0x20000a50

08005fd0 <__malloc_unlock>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__malloc_unlock+0x8>)
 8005fd2:	f000 ba95 	b.w	8006500 <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000a50 	.word	0x20000a50

08005fdc <std>:
 8005fdc:	2300      	movs	r3, #0
 8005fde:	b510      	push	{r4, lr}
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8005fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fea:	6083      	str	r3, [r0, #8]
 8005fec:	8181      	strh	r1, [r0, #12]
 8005fee:	6643      	str	r3, [r0, #100]	; 0x64
 8005ff0:	81c2      	strh	r2, [r0, #14]
 8005ff2:	6183      	str	r3, [r0, #24]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	305c      	adds	r0, #92	; 0x5c
 8005ffa:	f000 f9f7 	bl	80063ec <memset>
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <std+0x58>)
 8006000:	6263      	str	r3, [r4, #36]	; 0x24
 8006002:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <std+0x5c>)
 8006004:	62a3      	str	r3, [r4, #40]	; 0x28
 8006006:	4b0d      	ldr	r3, [pc, #52]	; (800603c <std+0x60>)
 8006008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800600a:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <std+0x64>)
 800600c:	6323      	str	r3, [r4, #48]	; 0x30
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <std+0x68>)
 8006010:	6224      	str	r4, [r4, #32]
 8006012:	429c      	cmp	r4, r3
 8006014:	d006      	beq.n	8006024 <std+0x48>
 8006016:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800601a:	4294      	cmp	r4, r2
 800601c:	d002      	beq.n	8006024 <std+0x48>
 800601e:	33d0      	adds	r3, #208	; 0xd0
 8006020:	429c      	cmp	r4, r3
 8006022:	d105      	bne.n	8006030 <std+0x54>
 8006024:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602c:	f000 ba66 	b.w	80064fc <__retarget_lock_init_recursive>
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	0800623d 	.word	0x0800623d
 8006038:	0800625f 	.word	0x0800625f
 800603c:	08006297 	.word	0x08006297
 8006040:	080062bb 	.word	0x080062bb
 8006044:	20000910 	.word	0x20000910

08006048 <stdio_exit_handler>:
 8006048:	4a02      	ldr	r2, [pc, #8]	; (8006054 <stdio_exit_handler+0xc>)
 800604a:	4903      	ldr	r1, [pc, #12]	; (8006058 <stdio_exit_handler+0x10>)
 800604c:	4803      	ldr	r0, [pc, #12]	; (800605c <stdio_exit_handler+0x14>)
 800604e:	f000 b869 	b.w	8006124 <_fwalk_sglue>
 8006052:	bf00      	nop
 8006054:	20000698 	.word	0x20000698
 8006058:	08006c51 	.word	0x08006c51
 800605c:	200006a4 	.word	0x200006a4

08006060 <cleanup_stdio>:
 8006060:	6841      	ldr	r1, [r0, #4]
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <cleanup_stdio+0x34>)
 8006064:	4299      	cmp	r1, r3
 8006066:	b510      	push	{r4, lr}
 8006068:	4604      	mov	r4, r0
 800606a:	d001      	beq.n	8006070 <cleanup_stdio+0x10>
 800606c:	f000 fdf0 	bl	8006c50 <_fflush_r>
 8006070:	68a1      	ldr	r1, [r4, #8]
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <cleanup_stdio+0x38>)
 8006074:	4299      	cmp	r1, r3
 8006076:	d002      	beq.n	800607e <cleanup_stdio+0x1e>
 8006078:	4620      	mov	r0, r4
 800607a:	f000 fde9 	bl	8006c50 <_fflush_r>
 800607e:	68e1      	ldr	r1, [r4, #12]
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <cleanup_stdio+0x3c>)
 8006082:	4299      	cmp	r1, r3
 8006084:	d004      	beq.n	8006090 <cleanup_stdio+0x30>
 8006086:	4620      	mov	r0, r4
 8006088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608c:	f000 bde0 	b.w	8006c50 <_fflush_r>
 8006090:	bd10      	pop	{r4, pc}
 8006092:	bf00      	nop
 8006094:	20000910 	.word	0x20000910
 8006098:	20000978 	.word	0x20000978
 800609c:	200009e0 	.word	0x200009e0

080060a0 <global_stdio_init.part.0>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <global_stdio_init.part.0+0x30>)
 80060a4:	4c0b      	ldr	r4, [pc, #44]	; (80060d4 <global_stdio_init.part.0+0x34>)
 80060a6:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <global_stdio_init.part.0+0x38>)
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	4620      	mov	r0, r4
 80060ac:	2200      	movs	r2, #0
 80060ae:	2104      	movs	r1, #4
 80060b0:	f7ff ff94 	bl	8005fdc <std>
 80060b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80060b8:	2201      	movs	r2, #1
 80060ba:	2109      	movs	r1, #9
 80060bc:	f7ff ff8e 	bl	8005fdc <std>
 80060c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80060c4:	2202      	movs	r2, #2
 80060c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ca:	2112      	movs	r1, #18
 80060cc:	f7ff bf86 	b.w	8005fdc <std>
 80060d0:	20000a48 	.word	0x20000a48
 80060d4:	20000910 	.word	0x20000910
 80060d8:	08006049 	.word	0x08006049

080060dc <__sfp_lock_acquire>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__sfp_lock_acquire+0x8>)
 80060de:	f000 ba0e 	b.w	80064fe <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000a51 	.word	0x20000a51

080060e8 <__sfp_lock_release>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__sfp_lock_release+0x8>)
 80060ea:	f000 ba09 	b.w	8006500 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000a51 	.word	0x20000a51

080060f4 <__sinit>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	4604      	mov	r4, r0
 80060f8:	f7ff fff0 	bl	80060dc <__sfp_lock_acquire>
 80060fc:	6a23      	ldr	r3, [r4, #32]
 80060fe:	b11b      	cbz	r3, 8006108 <__sinit+0x14>
 8006100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006104:	f7ff bff0 	b.w	80060e8 <__sfp_lock_release>
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <__sinit+0x28>)
 800610a:	6223      	str	r3, [r4, #32]
 800610c:	4b04      	ldr	r3, [pc, #16]	; (8006120 <__sinit+0x2c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f5      	bne.n	8006100 <__sinit+0xc>
 8006114:	f7ff ffc4 	bl	80060a0 <global_stdio_init.part.0>
 8006118:	e7f2      	b.n	8006100 <__sinit+0xc>
 800611a:	bf00      	nop
 800611c:	08006061 	.word	0x08006061
 8006120:	20000a48 	.word	0x20000a48

08006124 <_fwalk_sglue>:
 8006124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006128:	4607      	mov	r7, r0
 800612a:	4688      	mov	r8, r1
 800612c:	4614      	mov	r4, r2
 800612e:	2600      	movs	r6, #0
 8006130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006134:	f1b9 0901 	subs.w	r9, r9, #1
 8006138:	d505      	bpl.n	8006146 <_fwalk_sglue+0x22>
 800613a:	6824      	ldr	r4, [r4, #0]
 800613c:	2c00      	cmp	r4, #0
 800613e:	d1f7      	bne.n	8006130 <_fwalk_sglue+0xc>
 8006140:	4630      	mov	r0, r6
 8006142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d907      	bls.n	800615c <_fwalk_sglue+0x38>
 800614c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006150:	3301      	adds	r3, #1
 8006152:	d003      	beq.n	800615c <_fwalk_sglue+0x38>
 8006154:	4629      	mov	r1, r5
 8006156:	4638      	mov	r0, r7
 8006158:	47c0      	blx	r8
 800615a:	4306      	orrs	r6, r0
 800615c:	3568      	adds	r5, #104	; 0x68
 800615e:	e7e9      	b.n	8006134 <_fwalk_sglue+0x10>

08006160 <iprintf>:
 8006160:	b40f      	push	{r0, r1, r2, r3}
 8006162:	b507      	push	{r0, r1, r2, lr}
 8006164:	4906      	ldr	r1, [pc, #24]	; (8006180 <iprintf+0x20>)
 8006166:	ab04      	add	r3, sp, #16
 8006168:	6808      	ldr	r0, [r1, #0]
 800616a:	f853 2b04 	ldr.w	r2, [r3], #4
 800616e:	6881      	ldr	r1, [r0, #8]
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	f000 fa3d 	bl	80065f0 <_vfiprintf_r>
 8006176:	b003      	add	sp, #12
 8006178:	f85d eb04 	ldr.w	lr, [sp], #4
 800617c:	b004      	add	sp, #16
 800617e:	4770      	bx	lr
 8006180:	200006f0 	.word	0x200006f0

08006184 <_puts_r>:
 8006184:	6a03      	ldr	r3, [r0, #32]
 8006186:	b570      	push	{r4, r5, r6, lr}
 8006188:	6884      	ldr	r4, [r0, #8]
 800618a:	4605      	mov	r5, r0
 800618c:	460e      	mov	r6, r1
 800618e:	b90b      	cbnz	r3, 8006194 <_puts_r+0x10>
 8006190:	f7ff ffb0 	bl	80060f4 <__sinit>
 8006194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006196:	07db      	lsls	r3, r3, #31
 8006198:	d405      	bmi.n	80061a6 <_puts_r+0x22>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	0598      	lsls	r0, r3, #22
 800619e:	d402      	bmi.n	80061a6 <_puts_r+0x22>
 80061a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a2:	f000 f9ac 	bl	80064fe <__retarget_lock_acquire_recursive>
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	0719      	lsls	r1, r3, #28
 80061aa:	d513      	bpl.n	80061d4 <_puts_r+0x50>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	b18b      	cbz	r3, 80061d4 <_puts_r+0x50>
 80061b0:	3e01      	subs	r6, #1
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061b8:	3b01      	subs	r3, #1
 80061ba:	60a3      	str	r3, [r4, #8]
 80061bc:	b9e9      	cbnz	r1, 80061fa <_puts_r+0x76>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	da2e      	bge.n	8006220 <_puts_r+0x9c>
 80061c2:	4622      	mov	r2, r4
 80061c4:	210a      	movs	r1, #10
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 f87b 	bl	80062c2 <__swbuf_r>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d007      	beq.n	80061e0 <_puts_r+0x5c>
 80061d0:	250a      	movs	r5, #10
 80061d2:	e007      	b.n	80061e4 <_puts_r+0x60>
 80061d4:	4621      	mov	r1, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 f8b0 	bl	800633c <__swsetup_r>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d0e7      	beq.n	80061b0 <_puts_r+0x2c>
 80061e0:	f04f 35ff 	mov.w	r5, #4294967295
 80061e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e6:	07da      	lsls	r2, r3, #31
 80061e8:	d405      	bmi.n	80061f6 <_puts_r+0x72>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	059b      	lsls	r3, r3, #22
 80061ee:	d402      	bmi.n	80061f6 <_puts_r+0x72>
 80061f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f2:	f000 f985 	bl	8006500 <__retarget_lock_release_recursive>
 80061f6:	4628      	mov	r0, r5
 80061f8:	bd70      	pop	{r4, r5, r6, pc}
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da04      	bge.n	8006208 <_puts_r+0x84>
 80061fe:	69a2      	ldr	r2, [r4, #24]
 8006200:	429a      	cmp	r2, r3
 8006202:	dc06      	bgt.n	8006212 <_puts_r+0x8e>
 8006204:	290a      	cmp	r1, #10
 8006206:	d004      	beq.n	8006212 <_puts_r+0x8e>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	6022      	str	r2, [r4, #0]
 800620e:	7019      	strb	r1, [r3, #0]
 8006210:	e7cf      	b.n	80061b2 <_puts_r+0x2e>
 8006212:	4622      	mov	r2, r4
 8006214:	4628      	mov	r0, r5
 8006216:	f000 f854 	bl	80062c2 <__swbuf_r>
 800621a:	3001      	adds	r0, #1
 800621c:	d1c9      	bne.n	80061b2 <_puts_r+0x2e>
 800621e:	e7df      	b.n	80061e0 <_puts_r+0x5c>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	250a      	movs	r5, #10
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	6022      	str	r2, [r4, #0]
 8006228:	701d      	strb	r5, [r3, #0]
 800622a:	e7db      	b.n	80061e4 <_puts_r+0x60>

0800622c <puts>:
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <puts+0xc>)
 800622e:	4601      	mov	r1, r0
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	f7ff bfa7 	b.w	8006184 <_puts_r>
 8006236:	bf00      	nop
 8006238:	200006f0 	.word	0x200006f0

0800623c <__sread>:
 800623c:	b510      	push	{r4, lr}
 800623e:	460c      	mov	r4, r1
 8006240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006244:	f000 f8fc 	bl	8006440 <_read_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	bfab      	itete	ge
 800624c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800624e:	89a3      	ldrhlt	r3, [r4, #12]
 8006250:	181b      	addge	r3, r3, r0
 8006252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006256:	bfac      	ite	ge
 8006258:	6563      	strge	r3, [r4, #84]	; 0x54
 800625a:	81a3      	strhlt	r3, [r4, #12]
 800625c:	bd10      	pop	{r4, pc}

0800625e <__swrite>:
 800625e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006262:	461f      	mov	r7, r3
 8006264:	898b      	ldrh	r3, [r1, #12]
 8006266:	05db      	lsls	r3, r3, #23
 8006268:	4605      	mov	r5, r0
 800626a:	460c      	mov	r4, r1
 800626c:	4616      	mov	r6, r2
 800626e:	d505      	bpl.n	800627c <__swrite+0x1e>
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	2302      	movs	r3, #2
 8006276:	2200      	movs	r2, #0
 8006278:	f000 f8d0 	bl	800641c <_lseek_r>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	4632      	mov	r2, r6
 800628a:	463b      	mov	r3, r7
 800628c:	4628      	mov	r0, r5
 800628e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	f000 b8f7 	b.w	8006484 <_write_r>

08006296 <__sseek>:
 8006296:	b510      	push	{r4, lr}
 8006298:	460c      	mov	r4, r1
 800629a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629e:	f000 f8bd 	bl	800641c <_lseek_r>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	bf15      	itete	ne
 80062a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80062aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062b2:	81a3      	strheq	r3, [r4, #12]
 80062b4:	bf18      	it	ne
 80062b6:	81a3      	strhne	r3, [r4, #12]
 80062b8:	bd10      	pop	{r4, pc}

080062ba <__sclose>:
 80062ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062be:	f000 b89d 	b.w	80063fc <_close_r>

080062c2 <__swbuf_r>:
 80062c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c4:	460e      	mov	r6, r1
 80062c6:	4614      	mov	r4, r2
 80062c8:	4605      	mov	r5, r0
 80062ca:	b118      	cbz	r0, 80062d4 <__swbuf_r+0x12>
 80062cc:	6a03      	ldr	r3, [r0, #32]
 80062ce:	b90b      	cbnz	r3, 80062d4 <__swbuf_r+0x12>
 80062d0:	f7ff ff10 	bl	80060f4 <__sinit>
 80062d4:	69a3      	ldr	r3, [r4, #24]
 80062d6:	60a3      	str	r3, [r4, #8]
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	071a      	lsls	r2, r3, #28
 80062dc:	d525      	bpl.n	800632a <__swbuf_r+0x68>
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	b31b      	cbz	r3, 800632a <__swbuf_r+0x68>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	6922      	ldr	r2, [r4, #16]
 80062e6:	1a98      	subs	r0, r3, r2
 80062e8:	6963      	ldr	r3, [r4, #20]
 80062ea:	b2f6      	uxtb	r6, r6
 80062ec:	4283      	cmp	r3, r0
 80062ee:	4637      	mov	r7, r6
 80062f0:	dc04      	bgt.n	80062fc <__swbuf_r+0x3a>
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 fcab 	bl	8006c50 <_fflush_r>
 80062fa:	b9e0      	cbnz	r0, 8006336 <__swbuf_r+0x74>
 80062fc:	68a3      	ldr	r3, [r4, #8]
 80062fe:	3b01      	subs	r3, #1
 8006300:	60a3      	str	r3, [r4, #8]
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	6022      	str	r2, [r4, #0]
 8006308:	701e      	strb	r6, [r3, #0]
 800630a:	6962      	ldr	r2, [r4, #20]
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	429a      	cmp	r2, r3
 8006310:	d004      	beq.n	800631c <__swbuf_r+0x5a>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	d506      	bpl.n	8006326 <__swbuf_r+0x64>
 8006318:	2e0a      	cmp	r6, #10
 800631a:	d104      	bne.n	8006326 <__swbuf_r+0x64>
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 fc96 	bl	8006c50 <_fflush_r>
 8006324:	b938      	cbnz	r0, 8006336 <__swbuf_r+0x74>
 8006326:	4638      	mov	r0, r7
 8006328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800632a:	4621      	mov	r1, r4
 800632c:	4628      	mov	r0, r5
 800632e:	f000 f805 	bl	800633c <__swsetup_r>
 8006332:	2800      	cmp	r0, #0
 8006334:	d0d5      	beq.n	80062e2 <__swbuf_r+0x20>
 8006336:	f04f 37ff 	mov.w	r7, #4294967295
 800633a:	e7f4      	b.n	8006326 <__swbuf_r+0x64>

0800633c <__swsetup_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <__swsetup_r+0xac>)
 8006340:	4605      	mov	r5, r0
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	460c      	mov	r4, r1
 8006346:	b118      	cbz	r0, 8006350 <__swsetup_r+0x14>
 8006348:	6a03      	ldr	r3, [r0, #32]
 800634a:	b90b      	cbnz	r3, 8006350 <__swsetup_r+0x14>
 800634c:	f7ff fed2 	bl	80060f4 <__sinit>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006356:	0718      	lsls	r0, r3, #28
 8006358:	d422      	bmi.n	80063a0 <__swsetup_r+0x64>
 800635a:	06d9      	lsls	r1, r3, #27
 800635c:	d407      	bmi.n	800636e <__swsetup_r+0x32>
 800635e:	2309      	movs	r3, #9
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	e034      	b.n	80063d8 <__swsetup_r+0x9c>
 800636e:	0758      	lsls	r0, r3, #29
 8006370:	d512      	bpl.n	8006398 <__swsetup_r+0x5c>
 8006372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006374:	b141      	cbz	r1, 8006388 <__swsetup_r+0x4c>
 8006376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637a:	4299      	cmp	r1, r3
 800637c:	d002      	beq.n	8006384 <__swsetup_r+0x48>
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f8c0 	bl	8006504 <_free_r>
 8006384:	2300      	movs	r3, #0
 8006386:	6363      	str	r3, [r4, #52]	; 0x34
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	2300      	movs	r3, #0
 8006392:	6063      	str	r3, [r4, #4]
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	f043 0308 	orr.w	r3, r3, #8
 800639e:	81a3      	strh	r3, [r4, #12]
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	b94b      	cbnz	r3, 80063b8 <__swsetup_r+0x7c>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ae:	d003      	beq.n	80063b8 <__swsetup_r+0x7c>
 80063b0:	4621      	mov	r1, r4
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 fc9a 	bl	8006cec <__smakebuf_r>
 80063b8:	89a0      	ldrh	r0, [r4, #12]
 80063ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063be:	f010 0301 	ands.w	r3, r0, #1
 80063c2:	d00a      	beq.n	80063da <__swsetup_r+0x9e>
 80063c4:	2300      	movs	r3, #0
 80063c6:	60a3      	str	r3, [r4, #8]
 80063c8:	6963      	ldr	r3, [r4, #20]
 80063ca:	425b      	negs	r3, r3
 80063cc:	61a3      	str	r3, [r4, #24]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	b943      	cbnz	r3, 80063e4 <__swsetup_r+0xa8>
 80063d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063d6:	d1c4      	bne.n	8006362 <__swsetup_r+0x26>
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	0781      	lsls	r1, r0, #30
 80063dc:	bf58      	it	pl
 80063de:	6963      	ldrpl	r3, [r4, #20]
 80063e0:	60a3      	str	r3, [r4, #8]
 80063e2:	e7f4      	b.n	80063ce <__swsetup_r+0x92>
 80063e4:	2000      	movs	r0, #0
 80063e6:	e7f7      	b.n	80063d8 <__swsetup_r+0x9c>
 80063e8:	200006f0 	.word	0x200006f0

080063ec <memset>:
 80063ec:	4402      	add	r2, r0
 80063ee:	4603      	mov	r3, r0
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d100      	bne.n	80063f6 <memset+0xa>
 80063f4:	4770      	bx	lr
 80063f6:	f803 1b01 	strb.w	r1, [r3], #1
 80063fa:	e7f9      	b.n	80063f0 <memset+0x4>

080063fc <_close_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_close_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f000 fcce 	bl	8006da8 <_close>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_close_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_close_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000a4c 	.word	0x20000a4c

0800641c <_lseek_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d07      	ldr	r5, [pc, #28]	; (800643c <_lseek_r+0x20>)
 8006420:	4604      	mov	r4, r0
 8006422:	4608      	mov	r0, r1
 8006424:	4611      	mov	r1, r2
 8006426:	2200      	movs	r2, #0
 8006428:	602a      	str	r2, [r5, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f000 fcd4 	bl	8006dd8 <_lseek>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_lseek_r+0x1e>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_lseek_r+0x1e>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	20000a4c 	.word	0x20000a4c

08006440 <_read_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	; (8006460 <_read_r+0x20>)
 8006444:	4604      	mov	r4, r0
 8006446:	4608      	mov	r0, r1
 8006448:	4611      	mov	r1, r2
 800644a:	2200      	movs	r2, #0
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f000 fcca 	bl	8006de8 <_read>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_read_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_read_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	20000a4c 	.word	0x20000a4c

08006464 <_sbrk_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d06      	ldr	r5, [pc, #24]	; (8006480 <_sbrk_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fa fb28 	bl	8000ac4 <_sbrk>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_sbrk_r+0x1a>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_sbrk_r+0x1a>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	20000a4c 	.word	0x20000a4c

08006484 <_write_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d07      	ldr	r5, [pc, #28]	; (80064a4 <_write_r+0x20>)
 8006488:	4604      	mov	r4, r0
 800648a:	4608      	mov	r0, r1
 800648c:	4611      	mov	r1, r2
 800648e:	2200      	movs	r2, #0
 8006490:	602a      	str	r2, [r5, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 fcb0 	bl	8006df8 <_write>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_write_r+0x1e>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_write_r+0x1e>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	20000a4c 	.word	0x20000a4c

080064a8 <__errno>:
 80064a8:	4b01      	ldr	r3, [pc, #4]	; (80064b0 <__errno+0x8>)
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	200006f0 	.word	0x200006f0

080064b4 <__libc_init_array>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	4d0d      	ldr	r5, [pc, #52]	; (80064ec <__libc_init_array+0x38>)
 80064b8:	4c0d      	ldr	r4, [pc, #52]	; (80064f0 <__libc_init_array+0x3c>)
 80064ba:	1b64      	subs	r4, r4, r5
 80064bc:	10a4      	asrs	r4, r4, #2
 80064be:	2600      	movs	r6, #0
 80064c0:	42a6      	cmp	r6, r4
 80064c2:	d109      	bne.n	80064d8 <__libc_init_array+0x24>
 80064c4:	4d0b      	ldr	r5, [pc, #44]	; (80064f4 <__libc_init_array+0x40>)
 80064c6:	4c0c      	ldr	r4, [pc, #48]	; (80064f8 <__libc_init_array+0x44>)
 80064c8:	f000 fc9e 	bl	8006e08 <_init>
 80064cc:	1b64      	subs	r4, r4, r5
 80064ce:	10a4      	asrs	r4, r4, #2
 80064d0:	2600      	movs	r6, #0
 80064d2:	42a6      	cmp	r6, r4
 80064d4:	d105      	bne.n	80064e2 <__libc_init_array+0x2e>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064dc:	4798      	blx	r3
 80064de:	3601      	adds	r6, #1
 80064e0:	e7ee      	b.n	80064c0 <__libc_init_array+0xc>
 80064e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e6:	4798      	blx	r3
 80064e8:	3601      	adds	r6, #1
 80064ea:	e7f2      	b.n	80064d2 <__libc_init_array+0x1e>
 80064ec:	080074a4 	.word	0x080074a4
 80064f0:	080074a4 	.word	0x080074a4
 80064f4:	080074a4 	.word	0x080074a4
 80064f8:	080074a8 	.word	0x080074a8

080064fc <__retarget_lock_init_recursive>:
 80064fc:	4770      	bx	lr

080064fe <__retarget_lock_acquire_recursive>:
 80064fe:	4770      	bx	lr

08006500 <__retarget_lock_release_recursive>:
 8006500:	4770      	bx	lr
	...

08006504 <_free_r>:
 8006504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006506:	2900      	cmp	r1, #0
 8006508:	d044      	beq.n	8006594 <_free_r+0x90>
 800650a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650e:	9001      	str	r0, [sp, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f1a1 0404 	sub.w	r4, r1, #4
 8006516:	bfb8      	it	lt
 8006518:	18e4      	addlt	r4, r4, r3
 800651a:	f7ff fd53 	bl	8005fc4 <__malloc_lock>
 800651e:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <_free_r+0x94>)
 8006520:	9801      	ldr	r0, [sp, #4]
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	b933      	cbnz	r3, 8006534 <_free_r+0x30>
 8006526:	6063      	str	r3, [r4, #4]
 8006528:	6014      	str	r4, [r2, #0]
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006530:	f7ff bd4e 	b.w	8005fd0 <__malloc_unlock>
 8006534:	42a3      	cmp	r3, r4
 8006536:	d908      	bls.n	800654a <_free_r+0x46>
 8006538:	6825      	ldr	r5, [r4, #0]
 800653a:	1961      	adds	r1, r4, r5
 800653c:	428b      	cmp	r3, r1
 800653e:	bf01      	itttt	eq
 8006540:	6819      	ldreq	r1, [r3, #0]
 8006542:	685b      	ldreq	r3, [r3, #4]
 8006544:	1949      	addeq	r1, r1, r5
 8006546:	6021      	streq	r1, [r4, #0]
 8006548:	e7ed      	b.n	8006526 <_free_r+0x22>
 800654a:	461a      	mov	r2, r3
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	b10b      	cbz	r3, 8006554 <_free_r+0x50>
 8006550:	42a3      	cmp	r3, r4
 8006552:	d9fa      	bls.n	800654a <_free_r+0x46>
 8006554:	6811      	ldr	r1, [r2, #0]
 8006556:	1855      	adds	r5, r2, r1
 8006558:	42a5      	cmp	r5, r4
 800655a:	d10b      	bne.n	8006574 <_free_r+0x70>
 800655c:	6824      	ldr	r4, [r4, #0]
 800655e:	4421      	add	r1, r4
 8006560:	1854      	adds	r4, r2, r1
 8006562:	42a3      	cmp	r3, r4
 8006564:	6011      	str	r1, [r2, #0]
 8006566:	d1e0      	bne.n	800652a <_free_r+0x26>
 8006568:	681c      	ldr	r4, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	6053      	str	r3, [r2, #4]
 800656e:	440c      	add	r4, r1
 8006570:	6014      	str	r4, [r2, #0]
 8006572:	e7da      	b.n	800652a <_free_r+0x26>
 8006574:	d902      	bls.n	800657c <_free_r+0x78>
 8006576:	230c      	movs	r3, #12
 8006578:	6003      	str	r3, [r0, #0]
 800657a:	e7d6      	b.n	800652a <_free_r+0x26>
 800657c:	6825      	ldr	r5, [r4, #0]
 800657e:	1961      	adds	r1, r4, r5
 8006580:	428b      	cmp	r3, r1
 8006582:	bf04      	itt	eq
 8006584:	6819      	ldreq	r1, [r3, #0]
 8006586:	685b      	ldreq	r3, [r3, #4]
 8006588:	6063      	str	r3, [r4, #4]
 800658a:	bf04      	itt	eq
 800658c:	1949      	addeq	r1, r1, r5
 800658e:	6021      	streq	r1, [r4, #0]
 8006590:	6054      	str	r4, [r2, #4]
 8006592:	e7ca      	b.n	800652a <_free_r+0x26>
 8006594:	b003      	add	sp, #12
 8006596:	bd30      	pop	{r4, r5, pc}
 8006598:	20000908 	.word	0x20000908

0800659c <__sfputc_r>:
 800659c:	6893      	ldr	r3, [r2, #8]
 800659e:	3b01      	subs	r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	b410      	push	{r4}
 80065a4:	6093      	str	r3, [r2, #8]
 80065a6:	da08      	bge.n	80065ba <__sfputc_r+0x1e>
 80065a8:	6994      	ldr	r4, [r2, #24]
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	db01      	blt.n	80065b2 <__sfputc_r+0x16>
 80065ae:	290a      	cmp	r1, #10
 80065b0:	d103      	bne.n	80065ba <__sfputc_r+0x1e>
 80065b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b6:	f7ff be84 	b.w	80062c2 <__swbuf_r>
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	1c58      	adds	r0, r3, #1
 80065be:	6010      	str	r0, [r2, #0]
 80065c0:	7019      	strb	r1, [r3, #0]
 80065c2:	4608      	mov	r0, r1
 80065c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <__sfputs_r>:
 80065ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065cc:	4606      	mov	r6, r0
 80065ce:	460f      	mov	r7, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	18d5      	adds	r5, r2, r3
 80065d4:	42ac      	cmp	r4, r5
 80065d6:	d101      	bne.n	80065dc <__sfputs_r+0x12>
 80065d8:	2000      	movs	r0, #0
 80065da:	e007      	b.n	80065ec <__sfputs_r+0x22>
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	463a      	mov	r2, r7
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7ff ffda 	bl	800659c <__sfputc_r>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d1f3      	bne.n	80065d4 <__sfputs_r+0xa>
 80065ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065f0 <_vfiprintf_r>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	460d      	mov	r5, r1
 80065f6:	b09d      	sub	sp, #116	; 0x74
 80065f8:	4614      	mov	r4, r2
 80065fa:	4698      	mov	r8, r3
 80065fc:	4606      	mov	r6, r0
 80065fe:	b118      	cbz	r0, 8006608 <_vfiprintf_r+0x18>
 8006600:	6a03      	ldr	r3, [r0, #32]
 8006602:	b90b      	cbnz	r3, 8006608 <_vfiprintf_r+0x18>
 8006604:	f7ff fd76 	bl	80060f4 <__sinit>
 8006608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800660a:	07d9      	lsls	r1, r3, #31
 800660c:	d405      	bmi.n	800661a <_vfiprintf_r+0x2a>
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	059a      	lsls	r2, r3, #22
 8006612:	d402      	bmi.n	800661a <_vfiprintf_r+0x2a>
 8006614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006616:	f7ff ff72 	bl	80064fe <__retarget_lock_acquire_recursive>
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	071b      	lsls	r3, r3, #28
 800661e:	d501      	bpl.n	8006624 <_vfiprintf_r+0x34>
 8006620:	692b      	ldr	r3, [r5, #16]
 8006622:	b99b      	cbnz	r3, 800664c <_vfiprintf_r+0x5c>
 8006624:	4629      	mov	r1, r5
 8006626:	4630      	mov	r0, r6
 8006628:	f7ff fe88 	bl	800633c <__swsetup_r>
 800662c:	b170      	cbz	r0, 800664c <_vfiprintf_r+0x5c>
 800662e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006630:	07dc      	lsls	r4, r3, #31
 8006632:	d504      	bpl.n	800663e <_vfiprintf_r+0x4e>
 8006634:	f04f 30ff 	mov.w	r0, #4294967295
 8006638:	b01d      	add	sp, #116	; 0x74
 800663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	0598      	lsls	r0, r3, #22
 8006642:	d4f7      	bmi.n	8006634 <_vfiprintf_r+0x44>
 8006644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006646:	f7ff ff5b 	bl	8006500 <__retarget_lock_release_recursive>
 800664a:	e7f3      	b.n	8006634 <_vfiprintf_r+0x44>
 800664c:	2300      	movs	r3, #0
 800664e:	9309      	str	r3, [sp, #36]	; 0x24
 8006650:	2320      	movs	r3, #32
 8006652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006656:	f8cd 800c 	str.w	r8, [sp, #12]
 800665a:	2330      	movs	r3, #48	; 0x30
 800665c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006810 <_vfiprintf_r+0x220>
 8006660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006664:	f04f 0901 	mov.w	r9, #1
 8006668:	4623      	mov	r3, r4
 800666a:	469a      	mov	sl, r3
 800666c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006670:	b10a      	cbz	r2, 8006676 <_vfiprintf_r+0x86>
 8006672:	2a25      	cmp	r2, #37	; 0x25
 8006674:	d1f9      	bne.n	800666a <_vfiprintf_r+0x7a>
 8006676:	ebba 0b04 	subs.w	fp, sl, r4
 800667a:	d00b      	beq.n	8006694 <_vfiprintf_r+0xa4>
 800667c:	465b      	mov	r3, fp
 800667e:	4622      	mov	r2, r4
 8006680:	4629      	mov	r1, r5
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ffa1 	bl	80065ca <__sfputs_r>
 8006688:	3001      	adds	r0, #1
 800668a:	f000 80a9 	beq.w	80067e0 <_vfiprintf_r+0x1f0>
 800668e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006690:	445a      	add	r2, fp
 8006692:	9209      	str	r2, [sp, #36]	; 0x24
 8006694:	f89a 3000 	ldrb.w	r3, [sl]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80a1 	beq.w	80067e0 <_vfiprintf_r+0x1f0>
 800669e:	2300      	movs	r3, #0
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a8:	f10a 0a01 	add.w	sl, sl, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b4:	931a      	str	r3, [sp, #104]	; 0x68
 80066b6:	4654      	mov	r4, sl
 80066b8:	2205      	movs	r2, #5
 80066ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066be:	4854      	ldr	r0, [pc, #336]	; (8006810 <_vfiprintf_r+0x220>)
 80066c0:	f7f9 fdbe 	bl	8000240 <memchr>
 80066c4:	9a04      	ldr	r2, [sp, #16]
 80066c6:	b9d8      	cbnz	r0, 8006700 <_vfiprintf_r+0x110>
 80066c8:	06d1      	lsls	r1, r2, #27
 80066ca:	bf44      	itt	mi
 80066cc:	2320      	movmi	r3, #32
 80066ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d2:	0713      	lsls	r3, r2, #28
 80066d4:	bf44      	itt	mi
 80066d6:	232b      	movmi	r3, #43	; 0x2b
 80066d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066dc:	f89a 3000 	ldrb.w	r3, [sl]
 80066e0:	2b2a      	cmp	r3, #42	; 0x2a
 80066e2:	d015      	beq.n	8006710 <_vfiprintf_r+0x120>
 80066e4:	9a07      	ldr	r2, [sp, #28]
 80066e6:	4654      	mov	r4, sl
 80066e8:	2000      	movs	r0, #0
 80066ea:	f04f 0c0a 	mov.w	ip, #10
 80066ee:	4621      	mov	r1, r4
 80066f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f4:	3b30      	subs	r3, #48	; 0x30
 80066f6:	2b09      	cmp	r3, #9
 80066f8:	d94d      	bls.n	8006796 <_vfiprintf_r+0x1a6>
 80066fa:	b1b0      	cbz	r0, 800672a <_vfiprintf_r+0x13a>
 80066fc:	9207      	str	r2, [sp, #28]
 80066fe:	e014      	b.n	800672a <_vfiprintf_r+0x13a>
 8006700:	eba0 0308 	sub.w	r3, r0, r8
 8006704:	fa09 f303 	lsl.w	r3, r9, r3
 8006708:	4313      	orrs	r3, r2
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	46a2      	mov	sl, r4
 800670e:	e7d2      	b.n	80066b6 <_vfiprintf_r+0xc6>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	1d19      	adds	r1, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9103      	str	r1, [sp, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	bfbb      	ittet	lt
 800671c:	425b      	neglt	r3, r3
 800671e:	f042 0202 	orrlt.w	r2, r2, #2
 8006722:	9307      	strge	r3, [sp, #28]
 8006724:	9307      	strlt	r3, [sp, #28]
 8006726:	bfb8      	it	lt
 8006728:	9204      	strlt	r2, [sp, #16]
 800672a:	7823      	ldrb	r3, [r4, #0]
 800672c:	2b2e      	cmp	r3, #46	; 0x2e
 800672e:	d10c      	bne.n	800674a <_vfiprintf_r+0x15a>
 8006730:	7863      	ldrb	r3, [r4, #1]
 8006732:	2b2a      	cmp	r3, #42	; 0x2a
 8006734:	d134      	bne.n	80067a0 <_vfiprintf_r+0x1b0>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	9203      	str	r2, [sp, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	bfb8      	it	lt
 8006742:	f04f 33ff 	movlt.w	r3, #4294967295
 8006746:	3402      	adds	r4, #2
 8006748:	9305      	str	r3, [sp, #20]
 800674a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006820 <_vfiprintf_r+0x230>
 800674e:	7821      	ldrb	r1, [r4, #0]
 8006750:	2203      	movs	r2, #3
 8006752:	4650      	mov	r0, sl
 8006754:	f7f9 fd74 	bl	8000240 <memchr>
 8006758:	b138      	cbz	r0, 800676a <_vfiprintf_r+0x17a>
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	eba0 000a 	sub.w	r0, r0, sl
 8006760:	2240      	movs	r2, #64	; 0x40
 8006762:	4082      	lsls	r2, r0
 8006764:	4313      	orrs	r3, r2
 8006766:	3401      	adds	r4, #1
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676e:	4829      	ldr	r0, [pc, #164]	; (8006814 <_vfiprintf_r+0x224>)
 8006770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006774:	2206      	movs	r2, #6
 8006776:	f7f9 fd63 	bl	8000240 <memchr>
 800677a:	2800      	cmp	r0, #0
 800677c:	d03f      	beq.n	80067fe <_vfiprintf_r+0x20e>
 800677e:	4b26      	ldr	r3, [pc, #152]	; (8006818 <_vfiprintf_r+0x228>)
 8006780:	bb1b      	cbnz	r3, 80067ca <_vfiprintf_r+0x1da>
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	3307      	adds	r3, #7
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	3308      	adds	r3, #8
 800678c:	9303      	str	r3, [sp, #12]
 800678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006790:	443b      	add	r3, r7
 8006792:	9309      	str	r3, [sp, #36]	; 0x24
 8006794:	e768      	b.n	8006668 <_vfiprintf_r+0x78>
 8006796:	fb0c 3202 	mla	r2, ip, r2, r3
 800679a:	460c      	mov	r4, r1
 800679c:	2001      	movs	r0, #1
 800679e:	e7a6      	b.n	80066ee <_vfiprintf_r+0xfe>
 80067a0:	2300      	movs	r3, #0
 80067a2:	3401      	adds	r4, #1
 80067a4:	9305      	str	r3, [sp, #20]
 80067a6:	4619      	mov	r1, r3
 80067a8:	f04f 0c0a 	mov.w	ip, #10
 80067ac:	4620      	mov	r0, r4
 80067ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b2:	3a30      	subs	r2, #48	; 0x30
 80067b4:	2a09      	cmp	r2, #9
 80067b6:	d903      	bls.n	80067c0 <_vfiprintf_r+0x1d0>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0c6      	beq.n	800674a <_vfiprintf_r+0x15a>
 80067bc:	9105      	str	r1, [sp, #20]
 80067be:	e7c4      	b.n	800674a <_vfiprintf_r+0x15a>
 80067c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c4:	4604      	mov	r4, r0
 80067c6:	2301      	movs	r3, #1
 80067c8:	e7f0      	b.n	80067ac <_vfiprintf_r+0x1bc>
 80067ca:	ab03      	add	r3, sp, #12
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	462a      	mov	r2, r5
 80067d0:	4b12      	ldr	r3, [pc, #72]	; (800681c <_vfiprintf_r+0x22c>)
 80067d2:	a904      	add	r1, sp, #16
 80067d4:	4630      	mov	r0, r6
 80067d6:	f3af 8000 	nop.w
 80067da:	4607      	mov	r7, r0
 80067dc:	1c78      	adds	r0, r7, #1
 80067de:	d1d6      	bne.n	800678e <_vfiprintf_r+0x19e>
 80067e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e2:	07d9      	lsls	r1, r3, #31
 80067e4:	d405      	bmi.n	80067f2 <_vfiprintf_r+0x202>
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	059a      	lsls	r2, r3, #22
 80067ea:	d402      	bmi.n	80067f2 <_vfiprintf_r+0x202>
 80067ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ee:	f7ff fe87 	bl	8006500 <__retarget_lock_release_recursive>
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	065b      	lsls	r3, r3, #25
 80067f6:	f53f af1d 	bmi.w	8006634 <_vfiprintf_r+0x44>
 80067fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067fc:	e71c      	b.n	8006638 <_vfiprintf_r+0x48>
 80067fe:	ab03      	add	r3, sp, #12
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	462a      	mov	r2, r5
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <_vfiprintf_r+0x22c>)
 8006806:	a904      	add	r1, sp, #16
 8006808:	4630      	mov	r0, r6
 800680a:	f000 f879 	bl	8006900 <_printf_i>
 800680e:	e7e4      	b.n	80067da <_vfiprintf_r+0x1ea>
 8006810:	08007468 	.word	0x08007468
 8006814:	08007472 	.word	0x08007472
 8006818:	00000000 	.word	0x00000000
 800681c:	080065cb 	.word	0x080065cb
 8006820:	0800746e 	.word	0x0800746e

08006824 <_printf_common>:
 8006824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	4616      	mov	r6, r2
 800682a:	4699      	mov	r9, r3
 800682c:	688a      	ldr	r2, [r1, #8]
 800682e:	690b      	ldr	r3, [r1, #16]
 8006830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006834:	4293      	cmp	r3, r2
 8006836:	bfb8      	it	lt
 8006838:	4613      	movlt	r3, r2
 800683a:	6033      	str	r3, [r6, #0]
 800683c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006840:	4607      	mov	r7, r0
 8006842:	460c      	mov	r4, r1
 8006844:	b10a      	cbz	r2, 800684a <_printf_common+0x26>
 8006846:	3301      	adds	r3, #1
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	0699      	lsls	r1, r3, #26
 800684e:	bf42      	ittt	mi
 8006850:	6833      	ldrmi	r3, [r6, #0]
 8006852:	3302      	addmi	r3, #2
 8006854:	6033      	strmi	r3, [r6, #0]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	f015 0506 	ands.w	r5, r5, #6
 800685c:	d106      	bne.n	800686c <_printf_common+0x48>
 800685e:	f104 0a19 	add.w	sl, r4, #25
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	42ab      	cmp	r3, r5
 800686a:	dc26      	bgt.n	80068ba <_printf_common+0x96>
 800686c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006870:	1e13      	subs	r3, r2, #0
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	bf18      	it	ne
 8006876:	2301      	movne	r3, #1
 8006878:	0692      	lsls	r2, r2, #26
 800687a:	d42b      	bmi.n	80068d4 <_printf_common+0xb0>
 800687c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006880:	4649      	mov	r1, r9
 8006882:	4638      	mov	r0, r7
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d01e      	beq.n	80068c8 <_printf_common+0xa4>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	6922      	ldr	r2, [r4, #16]
 800688e:	f003 0306 	and.w	r3, r3, #6
 8006892:	2b04      	cmp	r3, #4
 8006894:	bf02      	ittt	eq
 8006896:	68e5      	ldreq	r5, [r4, #12]
 8006898:	6833      	ldreq	r3, [r6, #0]
 800689a:	1aed      	subeq	r5, r5, r3
 800689c:	68a3      	ldr	r3, [r4, #8]
 800689e:	bf0c      	ite	eq
 80068a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a4:	2500      	movne	r5, #0
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bfc4      	itt	gt
 80068aa:	1a9b      	subgt	r3, r3, r2
 80068ac:	18ed      	addgt	r5, r5, r3
 80068ae:	2600      	movs	r6, #0
 80068b0:	341a      	adds	r4, #26
 80068b2:	42b5      	cmp	r5, r6
 80068b4:	d11a      	bne.n	80068ec <_printf_common+0xc8>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e008      	b.n	80068cc <_printf_common+0xa8>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4649      	mov	r1, r9
 80068c0:	4638      	mov	r0, r7
 80068c2:	47c0      	blx	r8
 80068c4:	3001      	adds	r0, #1
 80068c6:	d103      	bne.n	80068d0 <_printf_common+0xac>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7c6      	b.n	8006862 <_printf_common+0x3e>
 80068d4:	18e1      	adds	r1, r4, r3
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	2030      	movs	r0, #48	; 0x30
 80068da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068de:	4422      	add	r2, r4
 80068e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068e8:	3302      	adds	r3, #2
 80068ea:	e7c7      	b.n	800687c <_printf_common+0x58>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4622      	mov	r2, r4
 80068f0:	4649      	mov	r1, r9
 80068f2:	4638      	mov	r0, r7
 80068f4:	47c0      	blx	r8
 80068f6:	3001      	adds	r0, #1
 80068f8:	d0e6      	beq.n	80068c8 <_printf_common+0xa4>
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7d9      	b.n	80068b2 <_printf_common+0x8e>
	...

08006900 <_printf_i>:
 8006900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	7e0f      	ldrb	r7, [r1, #24]
 8006906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006908:	2f78      	cmp	r7, #120	; 0x78
 800690a:	4691      	mov	r9, r2
 800690c:	4680      	mov	r8, r0
 800690e:	460c      	mov	r4, r1
 8006910:	469a      	mov	sl, r3
 8006912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006916:	d807      	bhi.n	8006928 <_printf_i+0x28>
 8006918:	2f62      	cmp	r7, #98	; 0x62
 800691a:	d80a      	bhi.n	8006932 <_printf_i+0x32>
 800691c:	2f00      	cmp	r7, #0
 800691e:	f000 80d4 	beq.w	8006aca <_printf_i+0x1ca>
 8006922:	2f58      	cmp	r7, #88	; 0x58
 8006924:	f000 80c0 	beq.w	8006aa8 <_printf_i+0x1a8>
 8006928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800692c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006930:	e03a      	b.n	80069a8 <_printf_i+0xa8>
 8006932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006936:	2b15      	cmp	r3, #21
 8006938:	d8f6      	bhi.n	8006928 <_printf_i+0x28>
 800693a:	a101      	add	r1, pc, #4	; (adr r1, 8006940 <_printf_i+0x40>)
 800693c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006940:	08006999 	.word	0x08006999
 8006944:	080069ad 	.word	0x080069ad
 8006948:	08006929 	.word	0x08006929
 800694c:	08006929 	.word	0x08006929
 8006950:	08006929 	.word	0x08006929
 8006954:	08006929 	.word	0x08006929
 8006958:	080069ad 	.word	0x080069ad
 800695c:	08006929 	.word	0x08006929
 8006960:	08006929 	.word	0x08006929
 8006964:	08006929 	.word	0x08006929
 8006968:	08006929 	.word	0x08006929
 800696c:	08006ab1 	.word	0x08006ab1
 8006970:	080069d9 	.word	0x080069d9
 8006974:	08006a6b 	.word	0x08006a6b
 8006978:	08006929 	.word	0x08006929
 800697c:	08006929 	.word	0x08006929
 8006980:	08006ad3 	.word	0x08006ad3
 8006984:	08006929 	.word	0x08006929
 8006988:	080069d9 	.word	0x080069d9
 800698c:	08006929 	.word	0x08006929
 8006990:	08006929 	.word	0x08006929
 8006994:	08006a73 	.word	0x08006a73
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	1d1a      	adds	r2, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	602a      	str	r2, [r5, #0]
 80069a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a8:	2301      	movs	r3, #1
 80069aa:	e09f      	b.n	8006aec <_printf_i+0x1ec>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	682b      	ldr	r3, [r5, #0]
 80069b0:	0607      	lsls	r7, r0, #24
 80069b2:	f103 0104 	add.w	r1, r3, #4
 80069b6:	6029      	str	r1, [r5, #0]
 80069b8:	d501      	bpl.n	80069be <_printf_i+0xbe>
 80069ba:	681e      	ldr	r6, [r3, #0]
 80069bc:	e003      	b.n	80069c6 <_printf_i+0xc6>
 80069be:	0646      	lsls	r6, r0, #25
 80069c0:	d5fb      	bpl.n	80069ba <_printf_i+0xba>
 80069c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	da03      	bge.n	80069d2 <_printf_i+0xd2>
 80069ca:	232d      	movs	r3, #45	; 0x2d
 80069cc:	4276      	negs	r6, r6
 80069ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d2:	485a      	ldr	r0, [pc, #360]	; (8006b3c <_printf_i+0x23c>)
 80069d4:	230a      	movs	r3, #10
 80069d6:	e012      	b.n	80069fe <_printf_i+0xfe>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	6820      	ldr	r0, [r4, #0]
 80069dc:	1d19      	adds	r1, r3, #4
 80069de:	6029      	str	r1, [r5, #0]
 80069e0:	0605      	lsls	r5, r0, #24
 80069e2:	d501      	bpl.n	80069e8 <_printf_i+0xe8>
 80069e4:	681e      	ldr	r6, [r3, #0]
 80069e6:	e002      	b.n	80069ee <_printf_i+0xee>
 80069e8:	0641      	lsls	r1, r0, #25
 80069ea:	d5fb      	bpl.n	80069e4 <_printf_i+0xe4>
 80069ec:	881e      	ldrh	r6, [r3, #0]
 80069ee:	4853      	ldr	r0, [pc, #332]	; (8006b3c <_printf_i+0x23c>)
 80069f0:	2f6f      	cmp	r7, #111	; 0x6f
 80069f2:	bf0c      	ite	eq
 80069f4:	2308      	moveq	r3, #8
 80069f6:	230a      	movne	r3, #10
 80069f8:	2100      	movs	r1, #0
 80069fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069fe:	6865      	ldr	r5, [r4, #4]
 8006a00:	60a5      	str	r5, [r4, #8]
 8006a02:	2d00      	cmp	r5, #0
 8006a04:	bfa2      	ittt	ge
 8006a06:	6821      	ldrge	r1, [r4, #0]
 8006a08:	f021 0104 	bicge.w	r1, r1, #4
 8006a0c:	6021      	strge	r1, [r4, #0]
 8006a0e:	b90e      	cbnz	r6, 8006a14 <_printf_i+0x114>
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	d04b      	beq.n	8006aac <_printf_i+0x1ac>
 8006a14:	4615      	mov	r5, r2
 8006a16:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a1a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a1e:	5dc7      	ldrb	r7, [r0, r7]
 8006a20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a24:	4637      	mov	r7, r6
 8006a26:	42bb      	cmp	r3, r7
 8006a28:	460e      	mov	r6, r1
 8006a2a:	d9f4      	bls.n	8006a16 <_printf_i+0x116>
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d10b      	bne.n	8006a48 <_printf_i+0x148>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	07de      	lsls	r6, r3, #31
 8006a34:	d508      	bpl.n	8006a48 <_printf_i+0x148>
 8006a36:	6923      	ldr	r3, [r4, #16]
 8006a38:	6861      	ldr	r1, [r4, #4]
 8006a3a:	4299      	cmp	r1, r3
 8006a3c:	bfde      	ittt	le
 8006a3e:	2330      	movle	r3, #48	; 0x30
 8006a40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a48:	1b52      	subs	r2, r2, r5
 8006a4a:	6122      	str	r2, [r4, #16]
 8006a4c:	f8cd a000 	str.w	sl, [sp]
 8006a50:	464b      	mov	r3, r9
 8006a52:	aa03      	add	r2, sp, #12
 8006a54:	4621      	mov	r1, r4
 8006a56:	4640      	mov	r0, r8
 8006a58:	f7ff fee4 	bl	8006824 <_printf_common>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d14a      	bne.n	8006af6 <_printf_i+0x1f6>
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	b004      	add	sp, #16
 8006a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f043 0320 	orr.w	r3, r3, #32
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	4833      	ldr	r0, [pc, #204]	; (8006b40 <_printf_i+0x240>)
 8006a74:	2778      	movs	r7, #120	; 0x78
 8006a76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	6829      	ldr	r1, [r5, #0]
 8006a7e:	061f      	lsls	r7, r3, #24
 8006a80:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a84:	d402      	bmi.n	8006a8c <_printf_i+0x18c>
 8006a86:	065f      	lsls	r7, r3, #25
 8006a88:	bf48      	it	mi
 8006a8a:	b2b6      	uxthmi	r6, r6
 8006a8c:	07df      	lsls	r7, r3, #31
 8006a8e:	bf48      	it	mi
 8006a90:	f043 0320 	orrmi.w	r3, r3, #32
 8006a94:	6029      	str	r1, [r5, #0]
 8006a96:	bf48      	it	mi
 8006a98:	6023      	strmi	r3, [r4, #0]
 8006a9a:	b91e      	cbnz	r6, 8006aa4 <_printf_i+0x1a4>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	f023 0320 	bic.w	r3, r3, #32
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	e7a7      	b.n	80069f8 <_printf_i+0xf8>
 8006aa8:	4824      	ldr	r0, [pc, #144]	; (8006b3c <_printf_i+0x23c>)
 8006aaa:	e7e4      	b.n	8006a76 <_printf_i+0x176>
 8006aac:	4615      	mov	r5, r2
 8006aae:	e7bd      	b.n	8006a2c <_printf_i+0x12c>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	6826      	ldr	r6, [r4, #0]
 8006ab4:	6961      	ldr	r1, [r4, #20]
 8006ab6:	1d18      	adds	r0, r3, #4
 8006ab8:	6028      	str	r0, [r5, #0]
 8006aba:	0635      	lsls	r5, r6, #24
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	d501      	bpl.n	8006ac4 <_printf_i+0x1c4>
 8006ac0:	6019      	str	r1, [r3, #0]
 8006ac2:	e002      	b.n	8006aca <_printf_i+0x1ca>
 8006ac4:	0670      	lsls	r0, r6, #25
 8006ac6:	d5fb      	bpl.n	8006ac0 <_printf_i+0x1c0>
 8006ac8:	8019      	strh	r1, [r3, #0]
 8006aca:	2300      	movs	r3, #0
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	4615      	mov	r5, r2
 8006ad0:	e7bc      	b.n	8006a4c <_printf_i+0x14c>
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	1d1a      	adds	r2, r3, #4
 8006ad6:	602a      	str	r2, [r5, #0]
 8006ad8:	681d      	ldr	r5, [r3, #0]
 8006ada:	6862      	ldr	r2, [r4, #4]
 8006adc:	2100      	movs	r1, #0
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f7f9 fbae 	bl	8000240 <memchr>
 8006ae4:	b108      	cbz	r0, 8006aea <_printf_i+0x1ea>
 8006ae6:	1b40      	subs	r0, r0, r5
 8006ae8:	6060      	str	r0, [r4, #4]
 8006aea:	6863      	ldr	r3, [r4, #4]
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	2300      	movs	r3, #0
 8006af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af4:	e7aa      	b.n	8006a4c <_printf_i+0x14c>
 8006af6:	6923      	ldr	r3, [r4, #16]
 8006af8:	462a      	mov	r2, r5
 8006afa:	4649      	mov	r1, r9
 8006afc:	4640      	mov	r0, r8
 8006afe:	47d0      	blx	sl
 8006b00:	3001      	adds	r0, #1
 8006b02:	d0ad      	beq.n	8006a60 <_printf_i+0x160>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	079b      	lsls	r3, r3, #30
 8006b08:	d413      	bmi.n	8006b32 <_printf_i+0x232>
 8006b0a:	68e0      	ldr	r0, [r4, #12]
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	4298      	cmp	r0, r3
 8006b10:	bfb8      	it	lt
 8006b12:	4618      	movlt	r0, r3
 8006b14:	e7a6      	b.n	8006a64 <_printf_i+0x164>
 8006b16:	2301      	movs	r3, #1
 8006b18:	4632      	mov	r2, r6
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	47d0      	blx	sl
 8006b20:	3001      	adds	r0, #1
 8006b22:	d09d      	beq.n	8006a60 <_printf_i+0x160>
 8006b24:	3501      	adds	r5, #1
 8006b26:	68e3      	ldr	r3, [r4, #12]
 8006b28:	9903      	ldr	r1, [sp, #12]
 8006b2a:	1a5b      	subs	r3, r3, r1
 8006b2c:	42ab      	cmp	r3, r5
 8006b2e:	dcf2      	bgt.n	8006b16 <_printf_i+0x216>
 8006b30:	e7eb      	b.n	8006b0a <_printf_i+0x20a>
 8006b32:	2500      	movs	r5, #0
 8006b34:	f104 0619 	add.w	r6, r4, #25
 8006b38:	e7f5      	b.n	8006b26 <_printf_i+0x226>
 8006b3a:	bf00      	nop
 8006b3c:	08007479 	.word	0x08007479
 8006b40:	0800748a 	.word	0x0800748a

08006b44 <__sflush_r>:
 8006b44:	898a      	ldrh	r2, [r1, #12]
 8006b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	0710      	lsls	r0, r2, #28
 8006b4e:	460c      	mov	r4, r1
 8006b50:	d458      	bmi.n	8006c04 <__sflush_r+0xc0>
 8006b52:	684b      	ldr	r3, [r1, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dc05      	bgt.n	8006b64 <__sflush_r+0x20>
 8006b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dc02      	bgt.n	8006b64 <__sflush_r+0x20>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	d0f9      	beq.n	8006b5e <__sflush_r+0x1a>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b70:	682f      	ldr	r7, [r5, #0]
 8006b72:	6a21      	ldr	r1, [r4, #32]
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	d032      	beq.n	8006bde <__sflush_r+0x9a>
 8006b78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	075a      	lsls	r2, r3, #29
 8006b7e:	d505      	bpl.n	8006b8c <__sflush_r+0x48>
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	1ac0      	subs	r0, r0, r3
 8006b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b86:	b10b      	cbz	r3, 8006b8c <__sflush_r+0x48>
 8006b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b8a:	1ac0      	subs	r0, r0, r3
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b92:	6a21      	ldr	r1, [r4, #32]
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	d106      	bne.n	8006bac <__sflush_r+0x68>
 8006b9e:	6829      	ldr	r1, [r5, #0]
 8006ba0:	291d      	cmp	r1, #29
 8006ba2:	d82b      	bhi.n	8006bfc <__sflush_r+0xb8>
 8006ba4:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <__sflush_r+0x108>)
 8006ba6:	410a      	asrs	r2, r1
 8006ba8:	07d6      	lsls	r6, r2, #31
 8006baa:	d427      	bmi.n	8006bfc <__sflush_r+0xb8>
 8006bac:	2200      	movs	r2, #0
 8006bae:	6062      	str	r2, [r4, #4]
 8006bb0:	04d9      	lsls	r1, r3, #19
 8006bb2:	6922      	ldr	r2, [r4, #16]
 8006bb4:	6022      	str	r2, [r4, #0]
 8006bb6:	d504      	bpl.n	8006bc2 <__sflush_r+0x7e>
 8006bb8:	1c42      	adds	r2, r0, #1
 8006bba:	d101      	bne.n	8006bc0 <__sflush_r+0x7c>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b903      	cbnz	r3, 8006bc2 <__sflush_r+0x7e>
 8006bc0:	6560      	str	r0, [r4, #84]	; 0x54
 8006bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bc4:	602f      	str	r7, [r5, #0]
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	d0c9      	beq.n	8006b5e <__sflush_r+0x1a>
 8006bca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bce:	4299      	cmp	r1, r3
 8006bd0:	d002      	beq.n	8006bd8 <__sflush_r+0x94>
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f7ff fc96 	bl	8006504 <_free_r>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	6360      	str	r0, [r4, #52]	; 0x34
 8006bdc:	e7c0      	b.n	8006b60 <__sflush_r+0x1c>
 8006bde:	2301      	movs	r3, #1
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b0      	blx	r6
 8006be4:	1c41      	adds	r1, r0, #1
 8006be6:	d1c8      	bne.n	8006b7a <__sflush_r+0x36>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0c5      	beq.n	8006b7a <__sflush_r+0x36>
 8006bee:	2b1d      	cmp	r3, #29
 8006bf0:	d001      	beq.n	8006bf6 <__sflush_r+0xb2>
 8006bf2:	2b16      	cmp	r3, #22
 8006bf4:	d101      	bne.n	8006bfa <__sflush_r+0xb6>
 8006bf6:	602f      	str	r7, [r5, #0]
 8006bf8:	e7b1      	b.n	8006b5e <__sflush_r+0x1a>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	e7ad      	b.n	8006b60 <__sflush_r+0x1c>
 8006c04:	690f      	ldr	r7, [r1, #16]
 8006c06:	2f00      	cmp	r7, #0
 8006c08:	d0a9      	beq.n	8006b5e <__sflush_r+0x1a>
 8006c0a:	0793      	lsls	r3, r2, #30
 8006c0c:	680e      	ldr	r6, [r1, #0]
 8006c0e:	bf08      	it	eq
 8006c10:	694b      	ldreq	r3, [r1, #20]
 8006c12:	600f      	str	r7, [r1, #0]
 8006c14:	bf18      	it	ne
 8006c16:	2300      	movne	r3, #0
 8006c18:	eba6 0807 	sub.w	r8, r6, r7
 8006c1c:	608b      	str	r3, [r1, #8]
 8006c1e:	f1b8 0f00 	cmp.w	r8, #0
 8006c22:	dd9c      	ble.n	8006b5e <__sflush_r+0x1a>
 8006c24:	6a21      	ldr	r1, [r4, #32]
 8006c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c28:	4643      	mov	r3, r8
 8006c2a:	463a      	mov	r2, r7
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b0      	blx	r6
 8006c30:	2800      	cmp	r0, #0
 8006c32:	dc06      	bgt.n	8006c42 <__sflush_r+0xfe>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	e78e      	b.n	8006b60 <__sflush_r+0x1c>
 8006c42:	4407      	add	r7, r0
 8006c44:	eba8 0800 	sub.w	r8, r8, r0
 8006c48:	e7e9      	b.n	8006c1e <__sflush_r+0xda>
 8006c4a:	bf00      	nop
 8006c4c:	dfbffffe 	.word	0xdfbffffe

08006c50 <_fflush_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	690b      	ldr	r3, [r1, #16]
 8006c54:	4605      	mov	r5, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	b913      	cbnz	r3, 8006c60 <_fflush_r+0x10>
 8006c5a:	2500      	movs	r5, #0
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	b118      	cbz	r0, 8006c6a <_fflush_r+0x1a>
 8006c62:	6a03      	ldr	r3, [r0, #32]
 8006c64:	b90b      	cbnz	r3, 8006c6a <_fflush_r+0x1a>
 8006c66:	f7ff fa45 	bl	80060f4 <__sinit>
 8006c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f3      	beq.n	8006c5a <_fflush_r+0xa>
 8006c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c74:	07d0      	lsls	r0, r2, #31
 8006c76:	d404      	bmi.n	8006c82 <_fflush_r+0x32>
 8006c78:	0599      	lsls	r1, r3, #22
 8006c7a:	d402      	bmi.n	8006c82 <_fflush_r+0x32>
 8006c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c7e:	f7ff fc3e 	bl	80064fe <__retarget_lock_acquire_recursive>
 8006c82:	4628      	mov	r0, r5
 8006c84:	4621      	mov	r1, r4
 8006c86:	f7ff ff5d 	bl	8006b44 <__sflush_r>
 8006c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c8c:	07da      	lsls	r2, r3, #31
 8006c8e:	4605      	mov	r5, r0
 8006c90:	d4e4      	bmi.n	8006c5c <_fflush_r+0xc>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	059b      	lsls	r3, r3, #22
 8006c96:	d4e1      	bmi.n	8006c5c <_fflush_r+0xc>
 8006c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9a:	f7ff fc31 	bl	8006500 <__retarget_lock_release_recursive>
 8006c9e:	e7dd      	b.n	8006c5c <_fflush_r+0xc>

08006ca0 <__swhatbuf_r>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	b096      	sub	sp, #88	; 0x58
 8006cac:	4615      	mov	r5, r2
 8006cae:	461e      	mov	r6, r3
 8006cb0:	da0d      	bge.n	8006cce <__swhatbuf_r+0x2e>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cb8:	f04f 0100 	mov.w	r1, #0
 8006cbc:	bf0c      	ite	eq
 8006cbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cc2:	2340      	movne	r3, #64	; 0x40
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	6031      	str	r1, [r6, #0]
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	b016      	add	sp, #88	; 0x58
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}
 8006cce:	466a      	mov	r2, sp
 8006cd0:	f000 f848 	bl	8006d64 <_fstat_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	dbec      	blt.n	8006cb2 <__swhatbuf_r+0x12>
 8006cd8:	9901      	ldr	r1, [sp, #4]
 8006cda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006cde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ce2:	4259      	negs	r1, r3
 8006ce4:	4159      	adcs	r1, r3
 8006ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cea:	e7eb      	b.n	8006cc4 <__swhatbuf_r+0x24>

08006cec <__smakebuf_r>:
 8006cec:	898b      	ldrh	r3, [r1, #12]
 8006cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cf0:	079d      	lsls	r5, r3, #30
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	d507      	bpl.n	8006d08 <__smakebuf_r+0x1c>
 8006cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	2301      	movs	r3, #1
 8006d02:	6163      	str	r3, [r4, #20]
 8006d04:	b002      	add	sp, #8
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	ab01      	add	r3, sp, #4
 8006d0a:	466a      	mov	r2, sp
 8006d0c:	f7ff ffc8 	bl	8006ca0 <__swhatbuf_r>
 8006d10:	9900      	ldr	r1, [sp, #0]
 8006d12:	4605      	mov	r5, r0
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7ff f8d5 	bl	8005ec4 <_malloc_r>
 8006d1a:	b948      	cbnz	r0, 8006d30 <__smakebuf_r+0x44>
 8006d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d20:	059a      	lsls	r2, r3, #22
 8006d22:	d4ef      	bmi.n	8006d04 <__smakebuf_r+0x18>
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	f043 0302 	orr.w	r3, r3, #2
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	e7e3      	b.n	8006cf8 <__smakebuf_r+0xc>
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	6020      	str	r0, [r4, #0]
 8006d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	9b00      	ldr	r3, [sp, #0]
 8006d3c:	6163      	str	r3, [r4, #20]
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	6120      	str	r0, [r4, #16]
 8006d42:	b15b      	cbz	r3, 8006d5c <__smakebuf_r+0x70>
 8006d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 f81d 	bl	8006d88 <_isatty_r>
 8006d4e:	b128      	cbz	r0, 8006d5c <__smakebuf_r+0x70>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	431d      	orrs	r5, r3
 8006d60:	81a5      	strh	r5, [r4, #12]
 8006d62:	e7cf      	b.n	8006d04 <__smakebuf_r+0x18>

08006d64 <_fstat_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d07      	ldr	r5, [pc, #28]	; (8006d84 <_fstat_r+0x20>)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	f000 f821 	bl	8006db8 <_fstat>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	d102      	bne.n	8006d80 <_fstat_r+0x1c>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	b103      	cbz	r3, 8006d80 <_fstat_r+0x1c>
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	20000a4c 	.word	0x20000a4c

08006d88 <_isatty_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d06      	ldr	r5, [pc, #24]	; (8006da4 <_isatty_r+0x1c>)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4608      	mov	r0, r1
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	f000 f818 	bl	8006dc8 <_isatty>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d102      	bne.n	8006da2 <_isatty_r+0x1a>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	b103      	cbz	r3, 8006da2 <_isatty_r+0x1a>
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	20000a4c 	.word	0x20000a4c

08006da8 <_close>:
 8006da8:	4b02      	ldr	r3, [pc, #8]	; (8006db4 <_close+0xc>)
 8006daa:	2258      	movs	r2, #88	; 0x58
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	f04f 30ff 	mov.w	r0, #4294967295
 8006db2:	4770      	bx	lr
 8006db4:	20000a4c 	.word	0x20000a4c

08006db8 <_fstat>:
 8006db8:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <_fstat+0xc>)
 8006dba:	2258      	movs	r2, #88	; 0x58
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc2:	4770      	bx	lr
 8006dc4:	20000a4c 	.word	0x20000a4c

08006dc8 <_isatty>:
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <_isatty+0xc>)
 8006dca:	2258      	movs	r2, #88	; 0x58
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	2000      	movs	r0, #0
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000a4c 	.word	0x20000a4c

08006dd8 <_lseek>:
 8006dd8:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <_lseek+0xc>)
 8006dda:	2258      	movs	r2, #88	; 0x58
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	4770      	bx	lr
 8006de4:	20000a4c 	.word	0x20000a4c

08006de8 <_read>:
 8006de8:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <_read+0xc>)
 8006dea:	2258      	movs	r2, #88	; 0x58
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295
 8006df2:	4770      	bx	lr
 8006df4:	20000a4c 	.word	0x20000a4c

08006df8 <_write>:
 8006df8:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <_write+0xc>)
 8006dfa:	2258      	movs	r2, #88	; 0x58
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006e02:	4770      	bx	lr
 8006e04:	20000a4c 	.word	0x20000a4c

08006e08 <_init>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr

08006e14 <_fini>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr
