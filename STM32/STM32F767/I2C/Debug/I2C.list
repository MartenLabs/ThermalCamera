
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cf0  08009db8  08009db8  00019db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa8  0800baa8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bab0  0800bab0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bab0  0800bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bab4  0800bab4  0001bab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800bab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b58  200001d8  0800bc90  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d30  0800bc90  00021d30  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fada  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002538  00000000  00000000  0002fd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00032260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000993  00000000  00000000  00032ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ccc  00000000  00000000  0003386b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bea  00000000  00000000  0005c537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f50bb  00000000  00000000  0006f121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b8  00000000  00000000  001641dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00168694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009da0 	.word	0x08009da0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08009da0 	.word	0x08009da0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData);
 80005f8:	79f8      	ldrb	r0, [r7, #7]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000600:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000604:	f002 fd70 	bl	80030e8 <MLX90640_I2CRead>
 8000608:	4603      	mov	r3, r0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <MLX90640_GetFrameData>:

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	6039      	str	r1, [r7, #0]
 800061c:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	82fb      	strh	r3, [r7, #22]
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
    uint8_t cnt = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]
    
    dataReady = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	82fb      	strh	r3, [r7, #22]
    while(dataReady == 0)
 800062e:	e011      	b.n	8000654 <MLX90640_GetFrameData+0x42>
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	79f8      	ldrb	r0, [r7, #7]
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	f002 fd54 	bl	80030e8 <MLX90640_I2CRead>
 8000640:	6138      	str	r0, [r7, #16]
        if(error != 0)
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MLX90640_GetFrameData+0x3a>
        {
            return error;
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	e063      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }    
        dataReady = statusRegister & 0x0008;
 800064c:	89bb      	ldrh	r3, [r7, #12]
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	82fb      	strh	r3, [r7, #22]
    while(dataReady == 0)
 8000654:	8afb      	ldrh	r3, [r7, #22]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0ea      	beq.n	8000630 <MLX90640_GetFrameData+0x1e>
    }       
        
    while(dataReady != 0 && cnt < 5)
 800065a:	e030      	b.n	80006be <MLX90640_GetFrameData+0xac>
    { 
        error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fd8f 	bl	8003188 <MLX90640_I2CWrite>
 800066a:	6138      	str	r0, [r7, #16]
        if(error == -1)
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000672:	d101      	bne.n	8000678 <MLX90640_GetFrameData+0x66>
        {
            return error;
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	e04d      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }
            
        error = MLX90640_I2CRead(slaveAddr, 0x0400, 832, frameData); 
 8000678:	79f8      	ldrb	r0, [r7, #7]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	f002 fd30 	bl	80030e8 <MLX90640_I2CRead>
 8000688:	6138      	str	r0, [r7, #16]
        if(error != 0)
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MLX90640_GetFrameData+0x82>
        {
            return error;
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	e03f      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }
                   
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	79f8      	ldrb	r0, [r7, #7]
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a0:	f002 fd22 	bl	80030e8 <MLX90640_I2CRead>
 80006a4:	6138      	str	r0, [r7, #16]
        if(error != 0)
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MLX90640_GetFrameData+0x9e>
        {
            return error;
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	e031      	b.n	8000714 <MLX90640_GetFrameData+0x102>
        }    
        dataReady = statusRegister & 0x0008;
 80006b0:	89bb      	ldrh	r3, [r7, #12]
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	82fb      	strh	r3, [r7, #22]
        cnt = cnt + 1;
 80006b8:	7d7b      	ldrb	r3, [r7, #21]
 80006ba:	3301      	adds	r3, #1
 80006bc:	757b      	strb	r3, [r7, #21]
    while(dataReady != 0 && cnt < 5)
 80006be:	8afb      	ldrh	r3, [r7, #22]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <MLX90640_GetFrameData+0xb8>
 80006c4:	7d7b      	ldrb	r3, [r7, #21]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d9c8      	bls.n	800065c <MLX90640_GetFrameData+0x4a>
    }
    
    if(cnt > 4)
 80006ca:	7d7b      	ldrb	r3, [r7, #21]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d902      	bls.n	80006d6 <MLX90640_GetFrameData+0xc4>
    {
        return -8;
 80006d0:	f06f 0307 	mvn.w	r3, #7
 80006d4:	e01e      	b.n	8000714 <MLX90640_GetFrameData+0x102>
    }    
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80006d6:	f107 030e 	add.w	r3, r7, #14
 80006da:	79f8      	ldrb	r0, [r7, #7]
 80006dc:	2201      	movs	r2, #1
 80006de:	f248 010d 	movw	r1, #32781	; 0x800d
 80006e2:	f002 fd01 	bl	80030e8 <MLX90640_I2CRead>
 80006e6:	6138      	str	r0, [r7, #16]
    frameData[832] = controlRegister1;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	801a      	strh	r2, [r3, #0]
    frameData[833] = statusRegister & 0x0001;
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f203 6382 	addw	r3, r3, #1666	; 0x682
 80006fa:	f002 0201 	and.w	r2, r2, #1
 80006fe:	b292      	uxth	r2, r2
 8000700:	801a      	strh	r2, [r3, #0]
    
    if(error != 0)
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MLX90640_GetFrameData+0xfa>
    {
        return error;
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	e003      	b.n	8000714 <MLX90640_GetFrameData+0x102>
    }
    
    return frameData[833];    
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8000712:	881b      	ldrh	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 800072a:	6839      	ldr	r1, [r7, #0]
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 fdd9 	bl	80012e4 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 fe0f 	bl	8001358 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 800073a:	6839      	ldr	r1, [r7, #0]
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 fe8f 	bl	8001460 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8000742:	6839      	ldr	r1, [r7, #0]
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 fe9d 	bl	8001484 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 800074a:	6839      	ldr	r1, [r7, #0]
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 fed1 	bl	80014f4 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8000752:	6839      	ldr	r1, [r7, #0]
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 fee5 	bl	8001524 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 800075a:	6839      	ldr	r1, [r7, #0]
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 ff19 	bl	8001594 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8000762:	6839      	ldr	r1, [r7, #0]
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f002 f9af 	bl	8002ac8 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 800076a:	6839      	ldr	r1, [r7, #0]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 fff7 	bl	8001760 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f001 fb51 	bl	8001e1c <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 800077a:	6839      	ldr	r1, [r7, #0]
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f001 fd87 	bl	8002290 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8000782:	6839      	ldr	r1, [r7, #0]
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f001 ffb7 	bl	80026f8 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f002 fadf 	bl	8002d50 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8000792:	6839      	ldr	r1, [r7, #0]
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f002 fb7b 	bl	8002e90 <ExtractDeviatingPixels>
 800079a:	60f8      	str	r0, [r7, #12]
    
    return error;
 800079c:	68fb      	ldr	r3, [r7, #12]

}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	460a      	mov	r2, r1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	4613      	mov	r3, r2
 80007b4:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	01db      	lsls	r3, r3, #7
 80007ba:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80007be:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80007c0:	f107 030e 	add.w	r3, r7, #14
 80007c4:	79f8      	ldrb	r0, [r7, #7]
 80007c6:	2201      	movs	r2, #1
 80007c8:	f248 010d 	movw	r1, #32781	; 0x800d
 80007cc:	f002 fc8c 	bl	80030e8 <MLX90640_I2CRead>
 80007d0:	6178      	str	r0, [r7, #20]
    if(error == 0)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d110      	bne.n	80007fa <MLX90640_SetRefreshRate+0x54>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 80007d8:	89fb      	ldrh	r3, [r7, #14]
 80007da:	461a      	mov	r2, r3
 80007dc:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80007e0:	4013      	ands	r3, r2
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f248 010d 	movw	r1, #32781	; 0x800d
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fcc8 	bl	8003188 <MLX90640_I2CWrite>
 80007f8:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 80007fa:	697b      	ldr	r3, [r7, #20]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 800080e:	f107 030e 	add.w	r3, r7, #14
 8000812:	79f8      	ldrb	r0, [r7, #7]
 8000814:	2201      	movs	r2, #1
 8000816:	f248 010d 	movw	r1, #32781	; 0x800d
 800081a:	f002 fc65 	bl	80030e8 <MLX90640_I2CRead>
 800081e:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10d      	bne.n	8000842 <MLX90640_SetChessMode+0x3e>
    {
        value = (controlRegister1 | 0x1000);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	b29b      	uxth	r3, r3
 800082e:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);        
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	b29a      	uxth	r2, r3
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f248 010d 	movw	r1, #32781	; 0x800d
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fca4 	bl	8003188 <MLX90640_I2CWrite>
 8000840:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000842:	697b      	ldr	r3, [r7, #20]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0000      	movs	r0, r0
	...

08000850 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b0a0      	sub	sp, #128	; 0x80
 8000854:	af00      	add	r7, sp, #0
 8000856:	6178      	str	r0, [r7, #20]
 8000858:	6139      	str	r1, [r7, #16]
 800085a:	ed87 0a03 	vstr	s0, [r7, #12]
 800085e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 800086a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    vdd = MLX90640_GetVdd(frameData, params);
 800086e:	6939      	ldr	r1, [r7, #16]
 8000870:	6978      	ldr	r0, [r7, #20]
 8000872:	f000 fc2d 	bl	80010d0 <MLX90640_GetVdd>
 8000876:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ta = MLX90640_GetTa(frameData, params);
 800087a:	6939      	ldr	r1, [r7, #16]
 800087c:	6978      	ldr	r0, [r7, #20]
 800087e:	f000 fca1 	bl	80011c4 <MLX90640_GetTa>
 8000882:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    
    ta4 = (ta + 273.15f);
 8000886:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800088a:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8000bd8 <MLX90640_CalculateTo+0x388>
 800088e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000892:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 8000896:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800089a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800089e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 80008a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80008a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008aa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    tr4 = (tr + 273.15f);
 80008ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80008b2:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8000bd8 <MLX90640_CalculateTo+0x388>
 80008b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008ba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 80008be:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80008c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008c6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 80008ca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80008ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    taTr = tr4 - (tr4-ta4)/emissivity;
 80008d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80008da:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80008de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80008e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80008e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80008ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    
    ktaScale = pow(2,(double)params->ktaScale);
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 80008fc:	ee07 3a90 	vmov	s15, r3
 8000900:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000904:	eeb0 1b47 	vmov.f64	d1, d7
 8000908:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800090c:	f008 ff84 	bl	8009818 <pow>
 8000910:	eeb0 7b40 	vmov.f64	d7, d0
 8000914:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000918:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    kvScale = pow(2,(double)params->kvScale);
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000922:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800092e:	eeb0 1b47 	vmov.f64	d1, d7
 8000932:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000936:	f008 ff6f 	bl	8009818 <pow>
 800093a:	eeb0 7b40 	vmov.f64	d7, d0
 800093e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000942:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    alphaScale = pow(2,(double)params->alphaScale);
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800094c:	ee07 3a90 	vmov	s15, r3
 8000950:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000954:	eeb0 1b47 	vmov.f64	d1, d7
 8000958:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800095c:	f008 ff5c 	bl	8009818 <pow>
 8000960:	eeb0 7b40 	vmov.f64	d7, d0
 8000964:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000968:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000972:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000bc4 <MLX90640_CalculateTo+0x374>
 8000976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800097a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800097e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800098a:	edc7 7a06 	vstr	s15, [r7, #24]
    alphaCorrR[1] = 1 ;
 800098e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000992:	61fb      	str	r3, [r7, #28]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009b4:	edc7 7a08 	vstr	s15, [r7, #32]
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 80009b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80009c8:	461a      	mov	r2, r3
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	ee07 3a90 	vmov	s15, r3
 80009d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80009e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- Gain calculation -----------------------------------    
    gain = frameData[778];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f203 6314 	addw	r3, r3, #1556	; 0x614
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	ee07 3a90 	vmov	s15, r3
 80009fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009fe:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    if(gain > 32767)
 8000a02:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000a06:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8000bc8 <MLX90640_CalculateTo+0x378>
 8000a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a12:	dd07      	ble.n	8000a24 <MLX90640_CalculateTo+0x1d4>
    {
        gain = gain - 65536;
 8000a14:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000a18:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000bcc <MLX90640_CalculateTo+0x37c>
 8000a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a20:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    }
    
    gain = params->gainEE / gain; 
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a32:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8000a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a3a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & 0x1000) >> 5;
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	115b      	asrs	r3, r3, #5
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    irDataCP[0] = frameData[776];  
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    irDataCP[1] = frameData[808];
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	ee07 3a90 	vmov	s15, r3
 8000a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for( int i = 0; i < 2; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8000a7e:	e034      	b.n	8000aea <MLX90640_CalculateTo+0x29a>
    {
        if(irDataCP[i] > 32767)
 8000a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	3380      	adds	r3, #128	; 0x80
 8000a86:	443b      	add	r3, r7
 8000a88:	3b58      	subs	r3, #88	; 0x58
 8000a8a:	edd3 7a00 	vldr	s15, [r3]
 8000a8e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000bc8 <MLX90640_CalculateTo+0x378>
 8000a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	dd11      	ble.n	8000ac0 <MLX90640_CalculateTo+0x270>
        {
            irDataCP[i] = irDataCP[i] - 65536;
 8000a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	3380      	adds	r3, #128	; 0x80
 8000aa2:	443b      	add	r3, r7
 8000aa4:	3b58      	subs	r3, #88	; 0x58
 8000aa6:	edd3 7a00 	vldr	s15, [r3]
 8000aaa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000bcc <MLX90640_CalculateTo+0x37c>
 8000aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	3380      	adds	r3, #128	; 0x80
 8000ab8:	443b      	add	r3, r7
 8000aba:	3b58      	subs	r3, #88	; 0x58
 8000abc:	edc3 7a00 	vstr	s15, [r3]
        }
        irDataCP[i] = irDataCP[i] * gain;
 8000ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	3380      	adds	r3, #128	; 0x80
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3b58      	subs	r3, #88	; 0x58
 8000aca:	ed93 7a00 	vldr	s14, [r3]
 8000ace:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	3380      	adds	r3, #128	; 0x80
 8000adc:	443b      	add	r3, r7
 8000ade:	3b58      	subs	r3, #88	; 0x58
 8000ae0:	edc3 7a00 	vstr	s15, [r3]
    for( int i = 0; i < 2; i++)
 8000ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	673b      	str	r3, [r7, #112]	; 0x70
 8000aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	ddc7      	ble.n	8000a80 <MLX90640_CalculateTo+0x230>
    }
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000af0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000afa:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	ed93 6a08 	vldr	s12, [r3, #32]
 8000b0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b10:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000b14:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000b18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000b1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000b20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	ed93 6a07 	vldr	s12, [r3, #28]
 8000b2e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000b32:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000b36:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000b3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000b3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000b42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if( mode ==  params->calibrationModeEE)
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b58:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d13d      	bne.n	8000bdc <MLX90640_CalculateTo+0x38c>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000b60:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b6a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	ed93 6a08 	vldr	s12, [r3, #32]
 8000b7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b80:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000b84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000b88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000b8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000b90:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	ed93 6a07 	vldr	s12, [r3, #28]
 8000b9e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000ba2:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000ba6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000baa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000bae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000bb2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8000bc2:	e043      	b.n	8000c4c <MLX90640_CalculateTo+0x3fc>
 8000bc4:	42200000 	.word	0x42200000
 8000bc8:	46fffe00 	.word	0x46fffe00
 8000bcc:	47800000 	.word	0x47800000
 8000bd0:	40533333 	.word	0x40533333
 8000bd4:	358637bd 	.word	0x358637bd
 8000bd8:	43889333 	.word	0x43889333
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000bdc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000be6:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf8:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8000bfc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	ed93 6a08 	vldr	s12, [r3, #32]
 8000c06:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000c0a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000c0e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	ed93 6a07 	vldr	s12, [r3, #28]
 8000c28:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c2c:	ed5f 5a18 	vldr	s11, [pc, #-96]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000c30:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c3c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c50:	e230      	b.n	80010b4 <MLX90640_CalculateTo+0x864>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8000c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da00      	bge.n	8000c5a <MLX90640_CalculateTo+0x40a>
 8000c58:	331f      	adds	r3, #31
 8000c5a:	115b      	asrs	r3, r3, #5
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da00      	bge.n	8000c66 <MLX90640_CalculateTo+0x416>
 8000c64:	333f      	adds	r3, #63	; 0x3f
 8000c66:	119b      	asrs	r3, r3, #6
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8000c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	bfb8      	it	lt
 8000c80:	425b      	neglt	r3, r3
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c88:	4053      	eors	r3, r2
 8000c8a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c90:	3302      	adds	r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da00      	bge.n	8000c98 <MLX90640_CalculateTo+0x448>
 8000c96:	3303      	adds	r3, #3
 8000c98:	109b      	asrs	r3, r3, #2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	da00      	bge.n	8000ca6 <MLX90640_CalculateTo+0x456>
 8000ca4:	3303      	adds	r3, #3
 8000ca6:	109b      	asrs	r3, r3, #2
 8000ca8:	425b      	negs	r3, r3
 8000caa:	441a      	add	r2, r3
 8000cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cae:	3301      	adds	r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da00      	bge.n	8000cb6 <MLX90640_CalculateTo+0x466>
 8000cb4:	3303      	adds	r3, #3
 8000cb6:	109b      	asrs	r3, r3, #2
 8000cb8:	441a      	add	r2, r3
 8000cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da00      	bge.n	8000cc2 <MLX90640_CalculateTo+0x472>
 8000cc0:	3303      	adds	r3, #3
 8000cc2:	109b      	asrs	r3, r3, #2
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	f1c3 0301 	rsb	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	fb12 f303 	smulbb	r3, r2, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        
        if(mode == 0)
 8000ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <MLX90640_CalculateTo+0x4a2>
        {
          pattern = ilPattern; 
 8000ce8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000cec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000cf0:	e003      	b.n	8000cfa <MLX90640_CalculateTo+0x4aa>
        }
        else 
        {
          pattern = chessPattern; 
 8000cf2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000cf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }               
        
        if(pattern == frameData[833])
 8000cfa:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8000d04:	8812      	ldrh	r2, [r2, #0]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	f040 81d1 	bne.w	80010ae <MLX90640_CalculateTo+0x85e>
        {    
            irData = frameData[pixelNumber];
 8000d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	4413      	add	r3, r2
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d1e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            if(irData > 32767)
 8000d22:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000d26:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8000bc8 <MLX90640_CalculateTo+0x378>
 8000d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	dd07      	ble.n	8000d44 <MLX90640_CalculateTo+0x4f4>
            {
                irData = irData - 65536;
 8000d34:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000d38:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 8000bcc <MLX90640_CalculateTo+0x37c>
 8000d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d40:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }
            irData = irData * gain;
 8000d44:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000d48:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d50:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            kta = params->kta[pixelNumber]/ktaScale;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d58:	4413      	add	r3, r2
 8000d5a:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8000d5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            kv = params->kv[pixelNumber]/kvScale;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8000d80:	f993 3000 	ldrsb.w	r3, [r3]
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d8c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d9c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000db4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000db8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000dbc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000dd4:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8000bd0 <MLX90640_CalculateTo+0x380>
 8000dd8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000ddc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            if(mode !=  params->calibrationModeEE)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e02:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d023      	beq.n	8000e52 <MLX90640_CalculateTo+0x602>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e10:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8000e14:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e28:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e36:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8000e3a:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e58:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	443b      	add	r3, r7
 8000e62:	3b58      	subs	r3, #88	; 0x58
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e74:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            irData = irData / emissivity;
 8000e78:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e84:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000e88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000e8c:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 8000bd4 <MLX90640_CalculateTo+0x384>
 8000e90:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e98:	3324      	adds	r3, #36	; 0x24
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	885b      	ldrh	r3, [r3, #2]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000eb6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000eba:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000ebe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ece:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000eda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ede:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ee2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000eee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ef6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f02:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 8000f06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0e:	eeb0 0b47 	vmov.f64	d0, d7
 8000f12:	f008 fc2d 	bl	8009770 <sqrt>
 8000f16:	eeb0 7b40 	vmov.f64	d7, d0
 8000f1a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f1e:	f008 fc27 	bl	8009770 <sqrt>
 8000f22:	eeb0 6b40 	vmov.f64	d6, d0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f42:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8000bd8 <MLX90640_CalculateTo+0x388>
 8000f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f52:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f76:	eeb0 0b47 	vmov.f64	d0, d7
 8000f7a:	f008 fbf9 	bl	8009770 <sqrt>
 8000f7e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f82:	eeb0 0b47 	vmov.f64	d0, d7
 8000f86:	f008 fbf3 	bl	8009770 <sqrt>
 8000f8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80010c8 <MLX90640_CalculateTo+0x878>
 8000f92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f9a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    
            if(To < params->ct[1])
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000fa4:	ee07 3a90 	vmov	s15, r3
 8000fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	d503      	bpl.n	8000fc2 <MLX90640_CalculateTo+0x772>
            {
                range = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000fc0:	e026      	b.n	8001010 <MLX90640_CalculateTo+0x7c0>
            }
            else if(To < params->ct[2])   
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fdc:	d503      	bpl.n	8000fe6 <MLX90640_CalculateTo+0x796>
            {
                range = 1;            
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000fe4:	e014      	b.n	8001010 <MLX90640_CalculateTo+0x7c0>
            }   
            else if(To < params->ct[3])
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	d503      	bpl.n	800100a <MLX90640_CalculateTo+0x7ba>
            {
                range = 2;            
 8001002:	2302      	movs	r3, #2
 8001004:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001008:	e002      	b.n	8001010 <MLX90640_CalculateTo+0x7c0>
            }
            else
            {
                range = 3;            
 800100a:	2303      	movs	r3, #3
 800100c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            }      
            
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8001010:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	3380      	adds	r3, #128	; 0x80
 8001018:	443b      	add	r3, r7
 800101a:	3b68      	subs	r3, #104	; 0x68
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001028:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	330a      	adds	r3, #10
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3304      	adds	r3, #4
 8001036:	edd3 6a00 	vldr	s13, [r3]
 800103a:	f997 2076 	ldrsb.w	r2, [r7, #118]	; 0x76
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3220      	adds	r2, #32
 8001042:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104e:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8001052:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800105e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800106a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800106e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107a:	eeb0 0b47 	vmov.f64	d0, d7
 800107e:	f008 fb77 	bl	8009770 <sqrt>
 8001082:	eeb0 7b40 	vmov.f64	d7, d0
 8001086:	eeb0 0b47 	vmov.f64	d0, d7
 800108a:	f008 fb71 	bl	8009770 <sqrt>
 800108e:	eeb0 7b40 	vmov.f64	d7, d0
 8001092:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80010c8 <MLX90640_CalculateTo+0x878>
 8001096:	ee37 7b46 	vsub.f64	d7, d7, d6
 800109a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                        
            result[pixelNumber] = To;
 80010a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ac:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 80010ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010b0:	3301      	adds	r3, #1
 80010b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010ba:	f6ff adca 	blt.w	8000c52 <MLX90640_CalculateTo+0x402>
        }
    }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3780      	adds	r7, #128	; 0x80
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	60000000 	.word	0x60000000
 80010cc:	40711266 	.word	0x40711266

080010d0 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	ed2d 8b02 	vpush	{d8}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ee:	edc7 7a05 	vstr	s15, [r7, #20]
    if(vdd > 32767)
 80010f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80011b8 <MLX90640_GetVdd+0xe8>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	dd07      	ble.n	8001114 <MLX90640_GetVdd+0x44>
    {
        vdd = vdd - 65536;
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80011bc <MLX90640_GetVdd+0xec>
 800110c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001110:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	129b      	asrs	r3, r3, #10
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	613b      	str	r3, [r7, #16]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001132:	eeb0 1b47 	vmov.f64	d1, d7
 8001136:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800113a:	f008 fb6d 	bl	8009818 <pow>
 800113e:	eeb0 8b40 	vmov.f64	d8, d0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114c:	eeb0 1b47 	vmov.f64	d1, d7
 8001150:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001154:	f008 fb60 	bl	8009818 <pow>
 8001158:	eeb0 6b40 	vmov.f64	d6, d0
 800115c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001160:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001164:	edc7 7a03 	vstr	s15, [r7, #12]
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 8001168:	ed97 7a03 	vldr	s14, [r7, #12]
 800116c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011c0 <MLX90640_GetVdd+0xf0>
 800119c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011a0:	edc7 7a05 	vstr	s15, [r7, #20]
    
    return vdd;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	ecbd 8b02 	vpop	{d8}
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	46fffe00 	.word	0x46fffe00
 80011bc:	47800000 	.word	0x47800000
 80011c0:	40533333 	.word	0x40533333

080011c4 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 80011ce:	6839      	ldr	r1, [r7, #0]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff7d 	bl	80010d0 <MLX90640_GetVdd>
 80011d6:	ed87 0a03 	vstr	s0, [r7, #12]
    
    ptat = frameData[800];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ea:	edc7 7a05 	vstr	s15, [r7, #20]
    if(ptat > 32767)
 80011ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80012d4 <MLX90640_GetTa+0x110>
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dd07      	ble.n	8001210 <MLX90640_GetTa+0x4c>
    {
        ptat = ptat - 65536;
 8001200:	edd7 7a05 	vldr	s15, [r7, #20]
 8001204:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80012d8 <MLX90640_GetTa+0x114>
 8001208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800120c:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    ptatArt = frameData[768];
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001220:	edc7 7a04 	vstr	s15, [r7, #16]
    if(ptatArt > 32767)
 8001224:	edd7 7a04 	vldr	s15, [r7, #16]
 8001228:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012d4 <MLX90640_GetTa+0x110>
 800122c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	dd07      	ble.n	8001246 <MLX90640_GetTa+0x82>
    {
        ptatArt = ptatArt - 65536;
 8001236:	edd7 7a04 	vldr	s15, [r7, #16]
 800123a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80012d8 <MLX90640_GetTa+0x114>
 800123e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001242:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	ed93 7a04 	vldr	s14, [r3, #16]
 800124c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001254:	edd7 7a04 	vldr	s15, [r7, #16]
 8001258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800125c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001264:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80012dc <MLX90640_GetTa+0x118>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a04 	vstr	s15, [r7, #16]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	ed93 7a01 	vldr	s14, [r3, #4]
 8001276:	edd7 7a03 	vldr	s15, [r7, #12]
 800127a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80012e0 <MLX90640_GetTa+0x11c>
 800127e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800128a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800128e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	899b      	ldrh	r3, [r3, #12]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80012b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80012bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012c0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	ee07 3a90 	vmov	s15, r3
}
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	46fffe00 	.word	0x46fffe00
 80012d8:	47800000 	.word	0x47800000
 80012dc:	48800000 	.word	0x48800000
 80012e0:	40533333 	.word	0x40533333

080012e4 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3366      	adds	r3, #102	; 0x66
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3366      	adds	r3, #102	; 0x66
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 8001302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001306:	2b7f      	cmp	r3, #127	; 0x7f
 8001308:	dd04      	ble.n	8001314 <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001310:	b29b      	uxth	r3, r3
 8001312:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	b29b      	uxth	r3, r3
 800131a:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3366      	adds	r3, #102	; 0x66
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b21b      	sxth	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8001328:	89bb      	ldrh	r3, [r7, #12]
 800132a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800132e:	b29b      	uxth	r3, r3
 8001330:	015b      	lsls	r3, r3, #5
 8001332:	b29b      	uxth	r3, r3
 8001334:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001338:	b29b      	uxth	r3, r3
 800133a:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	89fa      	ldrh	r2, [r7, #14]
 8001340:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	89ba      	ldrh	r2, [r7, #12]
 8001346:	805a      	strh	r2, [r3, #2]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	0000      	movs	r0, r0
	...

08001358 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3364      	adds	r3, #100	; 0x64
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	0a9b      	lsrs	r3, r3, #10
 800136a:	b29b      	uxth	r3, r3
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8001378:	edd7 7a05 	vldr	s15, [r7, #20]
 800137c:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	dd07      	ble.n	800139a <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 800138a:	edd7 7a05 	vldr	s15, [r7, #20]
 800138e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001450 <ExtractPTATParameters+0xf8>
 8001392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001396:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 800139a:	ed97 7a05 	vldr	s14, [r7, #20]
 800139e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001454 <ExtractPTATParameters+0xfc>
 80013a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a6:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3364      	adds	r3, #100	; 0x64
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 80013c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001458 <ExtractPTATParameters+0x100>
 80013c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dd07      	ble.n	80013e2 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 80013d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013d6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800145c <ExtractPTATParameters+0x104>
 80013da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013de:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 80013e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013e6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80013ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ee:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3362      	adds	r3, #98	; 0x62
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3320      	adds	r3, #32
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800140c:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8001448 <ExtractPTATParameters+0xf0>
 8001410:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001414:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8001418:	ee37 7b06 	vadd.f64	d7, d7, d6
 800141c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001420:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8001430:	89fa      	ldrh	r2, [r7, #14]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	611a      	str	r2, [r3, #16]
}
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	00000000 	.word	0x00000000
 800144c:	40d00000 	.word	0x40d00000
 8001450:	42800000 	.word	0x42800000
 8001454:	45800000 	.word	0x45800000
 8001458:	43ff8000 	.word	0x43ff8000
 800145c:	44800000 	.word	0x44800000

08001460 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3360      	adds	r3, #96	; 0x60
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	89fa      	ldrh	r2, [r7, #14]
 8001476:	829a      	strh	r2, [r3, #20]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3378      	adds	r3, #120	; 0x78
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 80014a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80014e8 <ExtractTgcParameters+0x64>
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	dd07      	ble.n	80014c4 <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 80014b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80014ec <ExtractTgcParameters+0x68>
 80014bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014c0:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 80014c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014c8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80014f0 <ExtractTgcParameters+0x6c>
 80014cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d0:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	42fe0000 	.word	0x42fe0000
 80014ec:	43800000 	.word	0x43800000
 80014f0:	42000000 	.word	0x42000000

080014f4 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3370      	adds	r3, #112	; 0x70
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	131b      	asrs	r3, r3, #12
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3378      	adds	r3, #120	; 0x78
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	b29b      	uxth	r3, r3
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001588 <ExtractKsTaParameters+0x64>
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd07      	ble.n	8001566 <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 8001556:	edd7 7a03 	vldr	s15, [r7, #12]
 800155a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800158c <ExtractKsTaParameters+0x68>
 800155e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001562:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 8001566:	ed97 7a03 	vldr	s14, [r7, #12]
 800156a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001590 <ExtractKsTaParameters+0x6c>
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	42fe0000 	.word	0x42fe0000
 800158c:	43800000 	.word	0x43800000
 8001590:	46000000 	.word	0x46000000

08001594 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	337e      	adds	r3, #126	; 0x7e
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	131b      	asrs	r3, r3, #12
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 80015c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	337e      	adds	r3, #126	; 0x7e
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	111b      	asrs	r3, r3, #4
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	b21a      	sxth	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	337e      	adds	r3, #126	; 0x7e
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	121b      	asrs	r3, r3, #8
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80015fe:	b29a      	uxth	r2, r3
 8001600:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001604:	b29b      	uxth	r3, r3
 8001606:	fb12 f303 	smulbb	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21a      	sxth	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800161a:	b29a      	uxth	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001622:	b299      	uxth	r1, r3
 8001624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001628:	b29b      	uxth	r3, r3
 800162a:	fb11 f303 	smulbb	r3, r1, r3
 800162e:	b29b      	uxth	r3, r3
 8001630:	4413      	add	r3, r2
 8001632:	b29b      	uxth	r3, r3
 8001634:	b21a      	sxth	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001642:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	337e      	adds	r3, #126	; 0x7e
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	3308      	adds	r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 8001654:	2201      	movs	r2, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	337a      	adds	r3, #122	; 0x7a
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	337a      	adds	r3, #122	; 0x7a
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	337c      	adds	r3, #124	; 0x7c
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	337c      	adds	r3, #124	; 0x7c
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e03c      	b.n	800173a <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	330a      	adds	r3, #10
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001754 <ExtractKsToParameters+0x1c0>
 80016d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	dd13      	ble.n	8001706 <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	330a      	adds	r3, #10
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3304      	adds	r3, #4
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001758 <ExtractKsToParameters+0x1c4>
 80016f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	330a      	adds	r3, #10
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3304      	adds	r3, #4
 8001702:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	330a      	adds	r3, #10
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3304      	adds	r3, #4
 8001712:	edd3 6a00 	vldr	s13, [r3]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	330a      	adds	r3, #10
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	3304      	adds	r3, #4
 8001730:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b03      	cmp	r3, #3
 800173e:	ddbf      	ble.n	80016c0 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4a06      	ldr	r2, [pc, #24]	; (800175c <ExtractKsToParameters+0x1c8>)
 8001744:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	42fe0000 	.word	0x42fe0000
 8001758:	43800000 	.word	0x43800000
 800175c:	b951b717 	.word	0xb951b717

08001760 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	ed2d 8b02 	vpush	{d8}
 8001766:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 800176a:	af00      	add	r7, sp, #0
 800176c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001770:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001774:	6018      	str	r0, [r3, #0]
 8001776:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800177a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800177e:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 8001786:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800178a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3340      	adds	r3, #64	; 0x40
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 800179e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80017a2:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3340      	adds	r3, #64	; 0x40
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	111b      	asrs	r3, r3, #4
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 80017b8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80017bc:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3340      	adds	r3, #64	; 0x40
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	121b      	asrs	r3, r3, #8
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 80017d2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80017d6:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3340      	adds	r3, #64	; 0x40
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	0b1b      	lsrs	r3, r3, #12
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	331e      	adds	r3, #30
 80017e8:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 80017ec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80017f0:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3342      	adds	r3, #66	; 0x42
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001804:	e062      	b.n	80018cc <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 8001806:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001810:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001814:	3322      	adds	r3, #34	; 0x22
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800181c:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	4413      	add	r3, r2
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f003 020f 	and.w	r2, r3, #15
 800182a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001834:	443b      	add	r3, r7
 8001836:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 800183a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800183e:	3322      	adds	r3, #34	; 0x22
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001846:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4413      	add	r3, r2
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	111a      	asrs	r2, r3, #4
 8001852:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001856:	3301      	adds	r3, #1
 8001858:	f002 020f 	and.w	r2, r2, #15
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001862:	443b      	add	r3, r7
 8001864:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 8001868:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800186c:	3322      	adds	r3, #34	; 0x22
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001874:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	4413      	add	r3, r2
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	121a      	asrs	r2, r3, #8
 8001880:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001884:	3302      	adds	r3, #2
 8001886:	f002 020f 	and.w	r2, r2, #15
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001890:	443b      	add	r3, r7
 8001892:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8001896:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800189a:	3322      	adds	r3, #34	; 0x22
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80018a2:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	0b1b      	lsrs	r3, r3, #12
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80018b4:	3303      	adds	r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80018bc:	443b      	add	r3, r7
 80018be:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 80018c2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80018c6:	3301      	adds	r3, #1
 80018c8:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 80018cc:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	dd98      	ble.n	8001806 <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 80018da:	e020      	b.n	800191e <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 80018dc:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80018e6:	443b      	add	r3, r7
 80018e8:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80018ec:	2b07      	cmp	r3, #7
 80018ee:	dd11      	ble.n	8001914 <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 80018f0:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80018fa:	443b      	add	r3, r7
 80018fc:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001900:	f1a3 0210 	sub.w	r2, r3, #16
 8001904:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800190e:	443b      	add	r3, r7
 8001910:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 8001914:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001918:	3301      	adds	r3, #1
 800191a:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 800191e:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001922:	2b17      	cmp	r3, #23
 8001924:	ddda      	ble.n	80018dc <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 800192c:	e062      	b.n	80019f4 <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 800192e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8001938:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800193c:	3328      	adds	r3, #40	; 0x28
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001944:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	4413      	add	r3, r2
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f003 010f 	and.w	r1, r3, #15
 8001952:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001956:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800195a:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 800195e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 8001962:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001966:	3328      	adds	r3, #40	; 0x28
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800196e:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	4413      	add	r3, r2
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	111b      	asrs	r3, r3, #4
 800197a:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 800197e:	3201      	adds	r2, #1
 8001980:	f003 010f 	and.w	r1, r3, #15
 8001984:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001988:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8001990:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001994:	3328      	adds	r3, #40	; 0x28
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800199c:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	121b      	asrs	r3, r3, #8
 80019a8:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80019ac:	3202      	adds	r2, #2
 80019ae:	f003 010f 	and.w	r1, r3, #15
 80019b2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80019b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 80019be:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019c2:	3328      	adds	r3, #40	; 0x28
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80019ca:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	0b1b      	lsrs	r3, r3, #12
 80019d6:	b299      	uxth	r1, r3
 80019d8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80019dc:	1cda      	adds	r2, r3, #3
 80019de:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80019e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80019ea:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019ee:	3301      	adds	r3, #1
 80019f0:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80019f4:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	dd98      	ble.n	800192e <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001a02:	e020      	b.n	8001a46 <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8001a04:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a08:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a0c:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	dd11      	ble.n	8001a3c <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8001a18:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a20:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a28:	f1a3 0110 	sub.w	r1, r3, #16
 8001a2c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a34:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001a3c:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001a40:	3301      	adds	r3, #1
 8001a42:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001a46:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001a4a:	2b1f      	cmp	r3, #31
 8001a4c:	ddda      	ble.n	8001a04 <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001a54:	e12a      	b.n	8001cac <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001a5c:	e11c      	b.n	8001c98 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 8001a5e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001a62:	015b      	lsls	r3, r3, #5
 8001a64:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8001a68:	4413      	add	r3, r2
 8001a6a:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8001a6e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001a72:	3340      	adds	r3, #64	; 0x40
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001a7a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	111b      	asrs	r3, r3, #4
 8001a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a96:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001a9a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8001aa6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001aaa:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001aae:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dd17      	ble.n	8001af8 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8001ac8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001acc:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001ad0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001e10 <ExtractAlphaParameters+0x6b0>
 8001ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ae4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001ae8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001aec:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8001af8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001afc:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b00:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8001b10:	2201      	movs	r2, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b26:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b2a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8001b36:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001b40:	443b      	add	r3, r7
 8001b42:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001b46:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 8001b50:	441a      	add	r2, r3
 8001b52:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b5a:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 8001b5e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b62:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b74:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b78:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b7c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b90:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b94:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8001ba0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001ba4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001ba8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001bb8:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001bc4:	eeb0 1b47 	vmov.f64	d1, d7
 8001bc8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001bcc:	f007 fe24 	bl	8009818 <pow>
 8001bd0:	eeb0 6b40 	vmov.f64	d6, d0
 8001bd4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001bd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bdc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001be0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001be4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001bf0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001bf4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001bf8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	ed93 7a00 	vldr	s14, [r3]
 8001c04:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c08:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001c12:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c16:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c20:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 8001c24:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c28:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c32:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 8001c36:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c4e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c52:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 8001c5e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c62:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c66:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	ed93 7a00 	vldr	s14, [r3]
 8001c72:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001e14 <ExtractAlphaParameters+0x6b4>
 8001c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c7e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c82:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8001c8e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001c92:	3301      	adds	r3, #1
 8001c94:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001c98:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001c9c:	2b1f      	cmp	r3, #31
 8001c9e:	f77f aede 	ble.w	8001a5e <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 8001ca2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001cac:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001cb0:	2b17      	cmp	r3, #23
 8001cb2:	f77f aed0 	ble.w	8001a56 <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 8001cb6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cba:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001cc4:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001ccc:	e023      	b.n	8001d16 <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 8001cce:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cd2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001cd6:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	d50b      	bpl.n	8001d0c <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 8001cf4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cf8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001cfc:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001d0a:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001d0c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d10:	3301      	adds	r3, #1
 8001d12:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001d16:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d1e:	dbd6      	blt.n	8001cce <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001d26:	e00e      	b.n	8001d46 <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 8001d28:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d34:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001d38:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 8001d3c:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001d40:	3301      	adds	r3, #1
 8001d42:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001d46:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001e18 <ExtractAlphaParameters+0x6b8>
 8001d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	d4e5      	bmi.n	8001d28 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001d62:	e03f      	b.n	8001de4 <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 8001d64:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d68:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001d6c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d7c:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d88:	eeb0 1b47 	vmov.f64	d1, d7
 8001d8c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001d90:	f007 fd42 	bl	8009818 <pow>
 8001d94:	eeb0 7b40 	vmov.f64	d7, d0
 8001d98:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001d9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001da0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001da4:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8001da8:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001db4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dbc:	ee17 3a90 	vmov	r3, s15
 8001dc0:	b299      	uxth	r1, r3
 8001dc2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001dc6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001dd0:	3324      	adds	r3, #36	; 0x24
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	460a      	mov	r2, r1
 8001dd8:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 8001dda:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001dde:	3301      	adds	r3, #1
 8001de0:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001de4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dec:	dbba      	blt.n	8001d64 <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8001dee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001df2:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8001dfc:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8001e00:	bf00      	nop
 8001e02:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	ecbd 8b02 	vpop	{d8}
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	42800000 	.word	0x42800000
 8001e14:	358637bd 	.word	0x358637bd
 8001e18:	47000000 	.word	0x47000000

08001e1c <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b0c5      	sub	sp, #276	; 0x114
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e2a:	6018      	str	r0, [r3, #0]
 8001e2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e34:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 8001e3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3320      	adds	r3, #32
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 8001e54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3320      	adds	r3, #32
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	111b      	asrs	r3, r3, #4
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 8001e6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3320      	adds	r3, #32
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	121b      	asrs	r3, r3, #8
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8001e88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3322      	adds	r3, #34	; 0x22
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ea0:	e062      	b.n	8001f68 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8001ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8001eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001eb0:	3312      	adds	r3, #18
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001eb8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001ed0:	443b      	add	r3, r7
 8001ed2:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8001ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001eda:	3312      	adds	r3, #18
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ee2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	111a      	asrs	r2, r3, #4
 8001eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f002 020f 	and.w	r2, r2, #15
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001efe:	443b      	add	r3, r7
 8001f00:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8001f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f08:	3312      	adds	r3, #18
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f10:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	121a      	asrs	r2, r3, #8
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	3302      	adds	r3, #2
 8001f22:	f002 020f 	and.w	r2, r2, #15
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f2c:	443b      	add	r3, r7
 8001f2e:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8001f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f36:	3312      	adds	r3, #18
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f3e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	0b1b      	lsrs	r3, r3, #12
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f50:	3303      	adds	r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f58:	443b      	add	r3, r7
 8001f5a:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8001f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f62:	3301      	adds	r3, #1
 8001f64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	dd98      	ble.n	8001ea2 <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001f76:	e020      	b.n	8001fba <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8001f78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f82:	443b      	add	r3, r7
 8001f84:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001f88:	2b07      	cmp	r3, #7
 8001f8a:	dd11      	ble.n	8001fb0 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8001f8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f96:	443b      	add	r3, r7
 8001f98:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001f9c:	f1a3 0210 	sub.w	r2, r3, #16
 8001fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001faa:	443b      	add	r3, r7
 8001fac:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8001fb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001fba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fbe:	2b17      	cmp	r3, #23
 8001fc0:	ddda      	ble.n	8001f78 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001fc8:	e062      	b.n	8002090 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8001fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8001fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001fd8:	3318      	adds	r3, #24
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fe0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	f003 010f 	and.w	r1, r3, #15
 8001fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ff6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8001ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002002:	3318      	adds	r3, #24
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800200a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	4413      	add	r3, r2
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	111b      	asrs	r3, r3, #4
 8002016:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800201a:	3201      	adds	r2, #1
 800201c:	f003 010f 	and.w	r1, r3, #15
 8002020:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 800202c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002030:	3318      	adds	r3, #24
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002038:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4413      	add	r3, r2
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	121b      	asrs	r3, r3, #8
 8002044:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002048:	3202      	adds	r2, #2
 800204a:	f003 010f 	and.w	r1, r3, #15
 800204e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 800205a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800205e:	3318      	adds	r3, #24
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002066:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	0b1b      	lsrs	r3, r3, #12
 8002072:	b299      	uxth	r1, r3
 8002074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002078:	1cda      	adds	r2, r3, #3
 800207a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800207e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8002086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800208a:	3301      	adds	r3, #1
 800208c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002094:	2b07      	cmp	r3, #7
 8002096:	dd98      	ble.n	8001fca <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800209e:	e020      	b.n	80020e2 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 80020a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020a8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80020ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	dd11      	ble.n	80020d8 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 80020b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020bc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	f1a3 0110 	sub.w	r1, r3, #16
 80020c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020d0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80020d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 80020d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80020dc:	3301      	adds	r3, #1
 80020de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80020e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80020e6:	2b1f      	cmp	r3, #31
 80020e8:	ddda      	ble.n	80020a0 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80020f0:	e0c0      	b.n	8002274 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80020f8:	e0b2      	b.n	8002260 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 80020fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020fe:	015b      	lsls	r3, r3, #5
 8002100:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002104:	4413      	add	r3, r2
 8002106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210e:	3340      	adds	r3, #64	; 0x40
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002116:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4413      	add	r3, r2
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	0a9b      	lsrs	r3, r3, #10
 8002122:	b29b      	uxth	r3, r3
 8002124:	b219      	sxth	r1, r3
 8002126:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800212a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	460a      	mov	r2, r1
 800213e:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8002140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002144:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800215a:	2b1f      	cmp	r3, #31
 800215c:	dd1d      	ble.n	800219a <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 800215e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002162:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b40      	subs	r3, #64	; 0x40
 800217c:	b29b      	uxth	r3, r3
 800217e:	b219      	sxth	r1, r3
 8002180:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002184:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	460a      	mov	r2, r1
 8002198:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 800219a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800219e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a8:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	b219      	sxth	r1, r3
 80021c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ce:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	460a      	mov	r2, r1
 80021d8:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80021da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80021e4:	443b      	add	r3, r7
 80021e6:	f853 2c84 	ldr.w	r2, [r3, #-132]
 80021ea:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80021f8:	4413      	add	r3, r2
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002204:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8002208:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800220c:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	b29b      	uxth	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b29a      	uxth	r2, r3
 800221a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800221e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	440b      	add	r3, r1
 8002230:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	b29b      	uxth	r3, r3
 800223a:	b219      	sxth	r1, r3
 800223c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002240:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	460a      	mov	r2, r1
 8002254:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 8002256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800225a:	3301      	adds	r3, #1
 800225c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002260:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002264:	2b1f      	cmp	r3, #31
 8002266:	f77f af48 	ble.w	80020fa <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 800226a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800226e:	3301      	adds	r3, #1
 8002270:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002278:	2b17      	cmp	r3, #23
 800227a:	f77f af3a 	ble.w	80020f2 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	ed2d 8b02 	vpush	{d8}
 8002296:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 800229a:	af00      	add	r7, sp, #0
 800229c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022a0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80022a4:	6018      	str	r0, [r3, #0]
 80022a6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022aa:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80022ae:	6019      	str	r1, [r3, #0]
    int p = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 80022b6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022ba:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	336c      	adds	r3, #108	; 0x6c
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 80022cc:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 80022d0:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 80022d4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022d8:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	336c      	adds	r3, #108	; 0x6c
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 80022e6:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 80022ea:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 80022ee:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022f2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	336e      	adds	r3, #110	; 0x6e
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 8002304:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8002308:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 800230c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002310:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	336e      	adds	r3, #110	; 0x6e
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 800231e:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 8002322:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 8002326:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800232a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3370      	adds	r3, #112	; 0x70
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	111b      	asrs	r3, r3, #4
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3308      	adds	r3, #8
 8002340:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 8002344:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002348:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3370      	adds	r3, #112	; 0x70
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8002362:	e0e6      	b.n	8002532 <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800236a:	e0d8      	b.n	800251e <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 800236c:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8002370:	015b      	lsls	r3, r3, #5
 8002372:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8002376:	4413      	add	r3, r2
 8002378:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 800237c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002380:	2b00      	cmp	r3, #0
 8002382:	da00      	bge.n	8002386 <ExtractKtaPixelParameters+0xf6>
 8002384:	331f      	adds	r3, #31
 8002386:	115b      	asrs	r3, r3, #5
 8002388:	461a      	mov	r2, r3
 800238a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800238e:	2b00      	cmp	r3, #0
 8002390:	da00      	bge.n	8002394 <ExtractKtaPixelParameters+0x104>
 8002392:	333f      	adds	r3, #63	; 0x3f
 8002394:	119b      	asrs	r3, r3, #6
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	bfb8      	it	lt
 80023ac:	425b      	neglt	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 80023b6:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80023ba:	3340      	adds	r3, #64	; 0x40
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 80023c2:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	105b      	asrs	r3, r3, #1
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023da:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023de:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80023e2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 80023ee:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023f2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80023f6:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	dd17      	ble.n	8002440 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8002410:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002414:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002418:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800242c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002430:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002434:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8002440:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002444:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002448:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8002458:	2201      	movs	r2, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800246e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002472:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 800247e:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 8002482:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002486:	f107 0208 	add.w	r2, r7, #8
 800248a:	4413      	add	r3, r2
 800248c:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002498:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800249c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024a0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024b4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024b8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 80024c4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024c8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024cc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80024dc:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80024e8:	eeb0 1b47 	vmov.f64	d1, d7
 80024ec:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80024f0:	f007 f992 	bl	8009818 <pow>
 80024f4:	eeb0 6b40 	vmov.f64	d6, d0
 80024f8:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80024fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002500:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002504:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002508:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8002514:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002518:	3301      	adds	r3, #1
 800251a:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800251e:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002522:	2b1f      	cmp	r3, #31
 8002524:	f77f af22 	ble.w	800236c <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 8002528:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 800252c:	3301      	adds	r3, #1
 800252e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8002532:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8002536:	2b17      	cmp	r3, #23
 8002538:	f77f af14 	ble.w	8002364 <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 800253c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002540:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	eef0 7ae7 	vabs.f32	s15, s15
 800254c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002550:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002554:	2301      	movs	r3, #1
 8002556:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 800255a:	e029      	b.n	80025b0 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 800255c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002560:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002564:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	eef0 7ae7 	vabs.f32	s15, s15
 8002574:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002578:	ed93 7a00 	vldr	s14, [r3]
 800257c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d50f      	bpl.n	80025a6 <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 8002586:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800258a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800258e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	eef0 7ae7 	vabs.f32	s15, s15
 800259e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80025a2:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80025a6:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80025aa:	3301      	adds	r3, #1
 80025ac:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80025b0:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80025b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b8:	dbd0      	blt.n	800255c <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 80025c0:	e00e      	b.n	80025e0 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 80025c2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025ce:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80025d2:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 80025d6:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80025da:	3301      	adds	r3, #1
 80025dc:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 80025e0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80026f4 <ExtractKtaPixelParameters+0x464>
 80025ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f4:	d4e5      	bmi.n	80025c2 <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80025fc:	e064      	b.n	80026c8 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 80025fe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002602:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002606:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002616:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002622:	eeb0 1b47 	vmov.f64	d1, d7
 8002626:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800262a:	f007 f8f5 	bl	8009818 <pow>
 800262e:	eeb0 7b40 	vmov.f64	d7, d0
 8002632:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002636:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800263a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800263e:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002642:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002652:	d51a      	bpl.n	800268a <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 8002654:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002660:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002668:	edc7 7a01 	vstr	s15, [r7, #4]
 800266c:	793b      	ldrb	r3, [r7, #4]
 800266e:	b259      	sxtb	r1, r3
 8002670:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002674:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800267e:	4413      	add	r3, r2
 8002680:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8002684:	460a      	mov	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e019      	b.n	80026be <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 800268a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800269a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269e:	edc7 7a01 	vstr	s15, [r7, #4]
 80026a2:	793b      	ldrb	r3, [r7, #4]
 80026a4:	b259      	sxtb	r1, r3
 80026a6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80026aa:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80026b4:	4413      	add	r3, r2
 80026b6:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 80026ba:	460a      	mov	r2, r1
 80026bc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 80026be:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80026c2:	3301      	adds	r3, #1
 80026c4:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80026c8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80026cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026d0:	db95      	blt.n	80025fe <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 80026d2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80026d6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 80026e0:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 80026e4:	bf00      	nop
 80026e6:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 80026ea:	46bd      	mov	sp, r7
 80026ec:	ecbd 8b02 	vpop	{d8}
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	42800000 	.word	0x42800000

080026f8 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	ed2d 8b02 	vpush	{d8}
 80026fe:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8002702:	af00      	add	r7, sp, #0
 8002704:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002708:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800270c:	6018      	str	r0, [r3, #0]
 800270e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002712:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002716:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 800271e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002722:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3368      	adds	r3, #104	; 0x68
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	0b1b      	lsrs	r3, r3, #12
 800272e:	b29b      	uxth	r3, r3
 8002730:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 8002734:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 8002738:	2b07      	cmp	r3, #7
 800273a:	dd05      	ble.n	8002748 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 800273c:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002740:	3b10      	subs	r3, #16
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 8002748:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 800274c:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 8002750:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002754:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3368      	adds	r3, #104	; 0x68
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	121b      	asrs	r3, r3, #8
 8002760:	b25b      	sxtb	r3, r3
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 800276a:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 800276e:	2b07      	cmp	r3, #7
 8002770:	dd05      	ble.n	800277e <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 8002772:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8002776:	3b10      	subs	r3, #16
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 800277e:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8002782:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 8002786:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800278a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3368      	adds	r3, #104	; 0x68
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	111b      	asrs	r3, r3, #4
 8002796:	b25b      	sxtb	r3, r3
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 80027a0:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	dd05      	ble.n	80027b4 <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 80027a8:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 80027ac:	3b10      	subs	r3, #16
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 80027b4:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 80027b8:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 80027bc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80027c0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3368      	adds	r3, #104	; 0x68
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 80027d4:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 80027d8:	2b07      	cmp	r3, #7
 80027da:	dd05      	ble.n	80027e8 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 80027dc:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 80027e0:	3b10      	subs	r3, #16
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 80027e8:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 80027ec:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 80027f0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80027f4:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3370      	adds	r3, #112	; 0x70
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	121b      	asrs	r3, r3, #8
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002810:	e075      	b.n	80028fe <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002818:	e068      	b.n	80028ec <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 800281a:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800281e:	015b      	lsls	r3, r3, #5
 8002820:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 8002824:	4413      	add	r3, r2
 8002826:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 800282a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800282e:	2b00      	cmp	r3, #0
 8002830:	da00      	bge.n	8002834 <ExtractKvPixelParameters+0x13c>
 8002832:	331f      	adds	r3, #31
 8002834:	115b      	asrs	r3, r3, #5
 8002836:	461a      	mov	r2, r3
 8002838:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800283c:	2b00      	cmp	r3, #0
 800283e:	da00      	bge.n	8002842 <ExtractKvPixelParameters+0x14a>
 8002840:	333f      	adds	r3, #63	; 0x3f
 8002842:	119b      	asrs	r3, r3, #6
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002852:	2b00      	cmp	r3, #0
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	bfb8      	it	lt
 800285a:	425b      	neglt	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4413      	add	r3, r2
 8002860:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 8002864:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8002868:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800286c:	f107 0208 	add.w	r2, r7, #8
 8002870:	4413      	add	r3, r2
 8002872:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002882:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002886:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 8002892:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002896:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800289a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80028aa:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80028b6:	eeb0 1b47 	vmov.f64	d1, d7
 80028ba:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80028be:	f006 ffab 	bl	8009818 <pow>
 80028c2:	eeb0 6b40 	vmov.f64	d6, d0
 80028c6:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80028ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ce:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80028d2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80028d6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 80028e2:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80028e6:	3301      	adds	r3, #1
 80028e8:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80028ec:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80028f0:	2b1f      	cmp	r3, #31
 80028f2:	dd92      	ble.n	800281a <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 80028f4:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 80028f8:	3301      	adds	r3, #1
 80028fa:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 80028fe:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002902:	2b17      	cmp	r3, #23
 8002904:	dd85      	ble.n	8002812 <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 8002906:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800290a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	eef0 7ae7 	vabs.f32	s15, s15
 8002916:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800291a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 800291e:	2301      	movs	r3, #1
 8002920:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002924:	e029      	b.n	800297a <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 8002926:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800292a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800292e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	eef0 7ae7 	vabs.f32	s15, s15
 800293e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002942:	ed93 7a00 	vldr	s14, [r3]
 8002946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d50f      	bpl.n	8002970 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 8002950:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002954:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002958:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	eef0 7ae7 	vabs.f32	s15, s15
 8002968:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800296c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002970:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002974:	3301      	adds	r3, #1
 8002976:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 800297a:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800297e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002982:	dbd0      	blt.n	8002926 <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 800298a:	e00e      	b.n	80029aa <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 800298c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002998:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800299c:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 80029a0:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80029a4:	3301      	adds	r3, #1
 80029a6:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 80029aa:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002ac4 <ExtractKvPixelParameters+0x3cc>
 80029b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	d4e5      	bmi.n	800298c <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 80029c6:	e064      	b.n	8002a92 <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 80029c8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029cc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029d0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80029e0:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80029ec:	eeb0 1b47 	vmov.f64	d1, d7
 80029f0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80029f4:	f006 ff10 	bl	8009818 <pow>
 80029f8:	eeb0 7b40 	vmov.f64	d7, d0
 80029fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002a00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a04:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a08:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002a0c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	d51a      	bpl.n	8002a54 <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 8002a1e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a32:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a36:	793b      	ldrb	r3, [r7, #4]
 8002a38:	b259      	sxtb	r1, r3
 8002a3a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a3e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a48:	4413      	add	r3, r2
 8002a4a:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002a4e:	460a      	mov	r2, r1
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e019      	b.n	8002a88 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 8002a54:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a68:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a6c:	793b      	ldrb	r3, [r7, #4]
 8002a6e:	b259      	sxtb	r1, r3
 8002a70:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a74:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a7e:	4413      	add	r3, r2
 8002a80:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002a84:	460a      	mov	r2, r1
 8002a86:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002a88:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002a92:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a9a:	db95      	blt.n	80029c8 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 8002a9c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002aa0:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002ab0:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8002ab4:	bf00      	nop
 8002ab6:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002aba:	46bd      	mov	sp, r7
 8002abc:	ecbd 8b02 	vpop	{d8}
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	42800000 	.word	0x42800000

08002ac8 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	ed2d 8b02 	vpush	{d8}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3340      	adds	r3, #64	; 0x40
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	0b1b      	lsrs	r3, r3, #12
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	331b      	adds	r3, #27
 8002ae4:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3374      	adds	r3, #116	; 0x74
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af2:	b21b      	sxth	r3, r3
 8002af4:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8002af6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afe:	db07      	blt.n	8002b10 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8002b00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	b21b      	sxth	r3, r3
 8002b0e:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3374      	adds	r3, #116	; 0x74
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	0a9b      	lsrs	r3, r3, #10
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b21b      	sxth	r3, r3
 8002b1c:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8002b1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b22:	2b1f      	cmp	r3, #31
 8002b24:	dd06      	ble.n	8002b34 <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8002b26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b40      	subs	r3, #64	; 0x40
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8002b34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3372      	adds	r3, #114	; 0x72
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5a:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8002b5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b62:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002d38 <ExtractCPParameters+0x270>
 8002b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	dd07      	ble.n	8002b80 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8002b70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b74:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002d3c <ExtractCPParameters+0x274>
 8002b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b7c:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8002b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b84:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b92:	eeb0 1b47 	vmov.f64	d1, d7
 8002b96:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002b9a:	f006 fe3d 	bl	8009818 <pow>
 8002b9e:	eeb0 6b40 	vmov.f64	d6, d0
 8002ba2:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002ba6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002baa:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3372      	adds	r3, #114	; 0x72
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	0a9b      	lsrs	r3, r3, #10
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc0:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8002bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bc8:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	dd07      	ble.n	8002be6 <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8002bd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bda:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002d40 <ExtractCPParameters+0x278>
 8002bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002be2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8002be6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bea:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002d44 <ExtractCPParameters+0x27c>
 8002bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3376      	adds	r3, #118	; 0x76
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c16:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 8002c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c1e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002d48 <ExtractCPParameters+0x280>
 8002c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	dd07      	ble.n	8002c3c <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 8002c2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c30:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002d4c <ExtractCPParameters+0x284>
 8002c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c38:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3370      	adds	r3, #112	; 0x70
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	111b      	asrs	r3, r3, #4
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 8002c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c54:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002c58:	7dbb      	ldrb	r3, [r7, #22]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c62:	eeb0 1b47 	vmov.f64	d1, d7
 8002c66:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002c6a:	f006 fdd5 	bl	8009818 <pow>
 8002c6e:	eeb0 6b40 	vmov.f64	d6, d0
 8002c72:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002c76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3376      	adds	r3, #118	; 0x76
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c92:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 8002c96:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c9a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002d48 <ExtractCPParameters+0x280>
 8002c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca6:	dd07      	ble.n	8002cb8 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8002ca8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cac:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002d4c <ExtractCPParameters+0x284>
 8002cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cb4:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3370      	adds	r3, #112	; 0x70
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	121b      	asrs	r3, r3, #8
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8002cc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ccc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002cd0:	7d7b      	ldrb	r3, [r7, #21]
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002cda:	eeb0 1b47 	vmov.f64	d1, d7
 8002cde:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002ce2:	f006 fd99 	bl	8009818 <pow>
 8002ce6:	eeb0 6b40 	vmov.f64	d6, d0
 8002cea:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002cee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d00:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d0c:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8002d10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 8002d1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 8002d2c:	bf00      	nop
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	ecbd 8b02 	vpop	{d8}
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	43ff8000 	.word	0x43ff8000
 8002d3c:	44800000 	.word	0x44800000
 8002d40:	42800000 	.word	0x42800000
 8002d44:	43000000 	.word	0x43000000
 8002d48:	42fe0000 	.word	0x42fe0000
 8002d4c:	43800000 	.word	0x43800000

08002d50 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	111b      	asrs	r3, r3, #4
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d68:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002d70:	43db      	mvns	r3, r3
 8002d72:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	336a      	adds	r3, #106	; 0x6a
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d86:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8002d8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d8e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	dd07      	ble.n	8002dac <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8002d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002da0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002e88 <ExtractCILCParameters+0x138>
 8002da4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002da8:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8002dac:	ed97 7a02 	vldr	s14, [r7, #8]
 8002db0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db8:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	336a      	adds	r3, #106	; 0x6a
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	119b      	asrs	r3, r3, #6
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8002dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	dd07      	ble.n	8002df6 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8002de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dea:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002e8c <ExtractCILCParameters+0x13c>
 8002dee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002df2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8002df6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dfa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e02:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	336a      	adds	r3, #106	; 0x6a
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	0adb      	lsrs	r3, r3, #11
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e18:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8002e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e20:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	dd07      	ble.n	8002e3e <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8002e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e32:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002e8c <ExtractCILCParameters+0x13c>
 8002e36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e3a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8002e3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e42:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002e46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e4a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	7dfa      	ldrb	r2, [r7, #23]
 8002e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e5e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e6a:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e76:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	42800000 	.word	0x42800000
 8002e8c:	42000000 	.word	0x42000000

08002e90 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	82fb      	strh	r3, [r7, #22]
 8002eae:	e013      	b.n	8002ed8 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8002eb0:	8afa      	ldrh	r2, [r7, #22]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002eb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ebc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8002ec0:	8afb      	ldrh	r3, [r7, #22]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed0:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002ed2:	8afb      	ldrh	r3, [r7, #22]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	82fb      	strh	r3, [r7, #22]
 8002ed8:	8afb      	ldrh	r3, [r7, #22]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d9e8      	bls.n	8002eb0 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 8002ede:	2300      	movs	r3, #0
 8002ee0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002ee2:	e02a      	b.n	8002f3a <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8002ee4:	8afb      	ldrh	r3, [r7, #22]
 8002ee6:	3340      	adds	r3, #64	; 0x40
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8002ef4:	8aba      	ldrh	r2, [r7, #20]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002efc:	8af9      	ldrh	r1, [r7, #22]
 8002efe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8002f02:	8abb      	ldrh	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	82bb      	strh	r3, [r7, #20]
 8002f08:	e014      	b.n	8002f34 <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8002f0a:	8afb      	ldrh	r3, [r7, #22]
 8002f0c:	3340      	adds	r3, #64	; 0x40
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8002f1e:	8a7b      	ldrh	r3, [r7, #18]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	8afa      	ldrh	r2, [r7, #22]
 8002f2c:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8002f2e:	8a7b      	ldrh	r3, [r7, #18]
 8002f30:	3301      	adds	r3, #1
 8002f32:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8002f34:	8afb      	ldrh	r3, [r7, #22]
 8002f36:	3301      	adds	r3, #1
 8002f38:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002f3a:	8afb      	ldrh	r3, [r7, #22]
 8002f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f40:	d205      	bcs.n	8002f4e <ExtractDeviatingPixels+0xbe>
 8002f42:	8abb      	ldrh	r3, [r7, #20]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d802      	bhi.n	8002f4e <ExtractDeviatingPixels+0xbe>
 8002f48:	8a7b      	ldrh	r3, [r7, #18]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d9ca      	bls.n	8002ee4 <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 8002f4e:	8abb      	ldrh	r3, [r7, #20]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d903      	bls.n	8002f5c <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 8002f54:	f06f 0302 	mvn.w	r3, #2
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	e08f      	b.n	800307c <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 8002f5c:	8a7b      	ldrh	r3, [r7, #18]
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d903      	bls.n	8002f6a <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 8002f62:	f06f 0303 	mvn.w	r3, #3
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e088      	b.n	800307c <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8002f6a:	8aba      	ldrh	r2, [r7, #20]
 8002f6c:	8a7b      	ldrh	r3, [r7, #18]
 8002f6e:	4413      	add	r3, r2
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	dd03      	ble.n	8002f7c <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 8002f74:	f06f 0304 	mvn.w	r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e07f      	b.n	800307c <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	82fb      	strh	r3, [r7, #22]
 8002f80:	e022      	b.n	8002fc8 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8002f82:	8afb      	ldrh	r3, [r7, #22]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	e017      	b.n	8002fba <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8002f8a:	8afa      	ldrh	r2, [r7, #22]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002f92:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002f9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f000 f86f 	bl	8003086 <CheckAdjacentPixels>
 8002fa8:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e064      	b.n	800307e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	8abb      	ldrh	r3, [r7, #20]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	dbe3      	blt.n	8002f8a <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8002fc2:	8afb      	ldrh	r3, [r7, #22]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	82fb      	strh	r3, [r7, #22]
 8002fc8:	8afa      	ldrh	r2, [r7, #22]
 8002fca:	8abb      	ldrh	r3, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d3d8      	bcc.n	8002f82 <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	82fb      	strh	r3, [r7, #22]
 8002fd4:	e024      	b.n	8003020 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8002fd6:	8afb      	ldrh	r3, [r7, #22]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	e019      	b.n	8003012 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8002fde:	8afb      	ldrh	r3, [r7, #22]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	8858      	ldrh	r0, [r3, #2]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	885b      	ldrh	r3, [r3, #2]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f000 f843 	bl	8003086 <CheckAdjacentPixels>
 8003000:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	e038      	b.n	800307e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3301      	adds	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	8a7b      	ldrh	r3, [r7, #18]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	dbe1      	blt.n	8002fde <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 800301a:	8afb      	ldrh	r3, [r7, #22]
 800301c:	3301      	adds	r3, #1
 800301e:	82fb      	strh	r3, [r7, #22]
 8003020:	8afa      	ldrh	r2, [r7, #22]
 8003022:	8a7b      	ldrh	r3, [r7, #18]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3d6      	bcc.n	8002fd6 <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003028:	2300      	movs	r3, #0
 800302a:	82fb      	strh	r3, [r7, #22]
 800302c:	e022      	b.n	8003074 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	e018      	b.n	8003066 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003034:	8afa      	ldrh	r2, [r7, #22]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800303c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	885b      	ldrh	r3, [r3, #2]
 800304e:	4619      	mov	r1, r3
 8003050:	f000 f819 	bl	8003086 <CheckAdjacentPixels>
 8003054:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	e00e      	b.n	800307e <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3301      	adds	r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	8a7b      	ldrh	r3, [r7, #18]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	dbe2      	blt.n	8003034 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800306e:	8afb      	ldrh	r3, [r7, #22]
 8003070:	3301      	adds	r3, #1
 8003072:	82fb      	strh	r3, [r7, #22]
 8003074:	8afa      	ldrh	r2, [r7, #22]
 8003076:	8abb      	ldrh	r3, [r7, #20]
 8003078:	429a      	cmp	r2, r3
 800307a:	d3d8      	bcc.n	800302e <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 800307c:	68fb      	ldr	r3, [r7, #12]
       
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	460a      	mov	r2, r1
 8003090:	80fb      	strh	r3, [r7, #6]
 8003092:	4613      	mov	r3, r2
 8003094:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	88bb      	ldrh	r3, [r7, #4]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f113 0f21 	cmn.w	r3, #33	; 0x21
 80030a4:	db06      	blt.n	80030b4 <CheckAdjacentPixels+0x2e>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f113 0f1e 	cmn.w	r3, #30
 80030ac:	da02      	bge.n	80030b4 <CheckAdjacentPixels+0x2e>
     {
         return -6;
 80030ae:	f06f 0305 	mvn.w	r3, #5
 80030b2:	e013      	b.n	80030dc <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	db05      	blt.n	80030c8 <CheckAdjacentPixels+0x42>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	dc02      	bgt.n	80030c8 <CheckAdjacentPixels+0x42>
     {
         return -6;
 80030c2:	f06f 0305 	mvn.w	r3, #5
 80030c6:	e009      	b.n	80030dc <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b1e      	cmp	r3, #30
 80030cc:	dd05      	ble.n	80030da <CheckAdjacentPixels+0x54>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b21      	cmp	r3, #33	; 0x21
 80030d2:	dc02      	bgt.n	80030da <CheckAdjacentPixels+0x54>
     {
         return -6;
 80030d4:	f06f 0305 	mvn.w	r3, #5
 80030d8:	e000      	b.n	80030dc <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 80030da:	2300      	movs	r3, #0
 }
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	; 0x30
 80030ec:	af04      	add	r7, sp, #16
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	4603      	mov	r3, r0
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	460b      	mov	r3, r1
 80030f6:	81bb      	strh	r3, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	b29b      	uxth	r3, r3
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	b299      	uxth	r1, r3
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	b29b      	uxth	r3, r3
 8003116:	89ba      	ldrh	r2, [r7, #12]
 8003118:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800311c:	9002      	str	r0, [sp, #8]
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2302      	movs	r3, #2
 8003126:	4817      	ldr	r0, [pc, #92]	; (8003184 <MLX90640_I2CRead+0x9c>)
 8003128:	f001 faa2 	bl	8004670 <HAL_I2C_Mem_Read>
 800312c:	4603      	mov	r3, r0
 800312e:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <MLX90640_I2CRead+0x54>
	{
			return -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	e01f      	b.n	800317c <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	e016      	b.n	8003170 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4413      	add	r3, r2
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	441a      	add	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3301      	adds	r3, #1
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	440b      	add	r3, r1
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	7cfa      	ldrb	r2, [r7, #19]
 8003168:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3302      	adds	r3, #2
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	429a      	cmp	r2, r3
 8003178:	dbe3      	blt.n	8003142 <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 800317a:	2300      	movs	r3, #0
} 
 800317c:	4618      	mov	r0, r3
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200001f8 	.word	0x200001f8

08003188 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af04      	add	r7, sp, #16
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
 8003192:	460b      	mov	r3, r1
 8003194:	80bb      	strh	r3, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	807b      	strh	r3, [r7, #2]

	uint8_t sa;
	int ack = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	72fb      	strb	r3, [r7, #11]

	cmd[0] = data >> 8;
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	723b      	strb	r3, [r7, #8]
	cmd[1] = data & 0x00FF;
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	727b      	strb	r3, [r7, #9]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	b299      	uxth	r1, r3
 80031b8:	88ba      	ldrh	r2, [r7, #4]
 80031ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	2302      	movs	r3, #2
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2302      	movs	r3, #2
 80031cc:	480e      	ldr	r0, [pc, #56]	; (8003208 <MLX90640_I2CWrite+0x80>)
 80031ce:	f001 f93b 	bl	8004448 <HAL_I2C_Mem_Write>
 80031d2:	4603      	mov	r3, r0
 80031d4:	60fb      	str	r3, [r7, #12]

	if (ack != HAL_OK)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <MLX90640_I2CWrite+0x5a>
	{
			return -1;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e00e      	b.n	8003200 <MLX90640_I2CWrite+0x78>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck);
 80031e2:	88b9      	ldrh	r1, [r7, #4]
 80031e4:	79f8      	ldrb	r0, [r7, #7]
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <MLX90640_I2CWrite+0x84>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	f7ff ff7d 	bl	80030e8 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <MLX90640_I2CWrite+0x84>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d002      	beq.n	80031fe <MLX90640_I2CWrite+0x76>
	{
			return -2;
 80031f8:	f06f 0301 	mvn.w	r3, #1
 80031fc:	e000      	b.n	8003200 <MLX90640_I2CWrite+0x78>
	}    
	
	return 0;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200001f8 	.word	0x200001f8
 800320c:	200001f4 	.word	0x200001f4

08003210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <MX_GPIO_Init+0x5c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a14      	ldr	r2, [pc, #80]	; (800326c <MX_GPIO_Init+0x5c>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <MX_GPIO_Init+0x5c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <MX_GPIO_Init+0x5c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a0e      	ldr	r2, [pc, #56]	; (800326c <MX_GPIO_Init+0x5c>)
 8003234:	f043 0308 	orr.w	r3, r3, #8
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <MX_GPIO_Init+0x5c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <MX_GPIO_Init+0x5c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <MX_GPIO_Init+0x5c>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <MX_GPIO_Init+0x5c>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]

}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800

08003270 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_I2C1_Init+0x74>)
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <MX_I2C1_Init+0x78>)
 8003278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <MX_I2C1_Init+0x74>)
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <MX_I2C1_Init+0x7c>)
 800327e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <MX_I2C1_Init+0x74>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <MX_I2C1_Init+0x74>)
 8003288:	2201      	movs	r2, #1
 800328a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <MX_I2C1_Init+0x74>)
 800328e:	2200      	movs	r2, #0
 8003290:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <MX_I2C1_Init+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <MX_I2C1_Init+0x74>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <MX_I2C1_Init+0x74>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <MX_I2C1_Init+0x74>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032aa:	480e      	ldr	r0, [pc, #56]	; (80032e4 <MX_I2C1_Init+0x74>)
 80032ac:	f001 f83c 	bl	8004328 <HAL_I2C_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032b6:	f000 fb3f 	bl	8003938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ba:	2100      	movs	r1, #0
 80032bc:	4809      	ldr	r0, [pc, #36]	; (80032e4 <MX_I2C1_Init+0x74>)
 80032be:	f001 fd8b 	bl	8004dd8 <HAL_I2CEx_ConfigAnalogFilter>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032c8:	f000 fb36 	bl	8003938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032cc:	2100      	movs	r1, #0
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <MX_I2C1_Init+0x74>)
 80032d0:	f001 fdcd 	bl	8004e6e <HAL_I2CEx_ConfigDigitalFilter>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032da:	f000 fb2d 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200001f8 	.word	0x200001f8
 80032e8:	40005400 	.word	0x40005400
 80032ec:	6000030d 	.word	0x6000030d

080032f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b0ae      	sub	sp, #184	; 0xb8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2290      	movs	r2, #144	; 0x90
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f004 f9b6 	bl	8007682 <memset>
  if(i2cHandle->Instance==I2C1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <HAL_I2C_MspInit+0xb4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d13c      	bne.n	800339a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003324:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003326:	2300      	movs	r3, #0
 8003328:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800332a:	f107 0314 	add.w	r3, r7, #20
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fb0e 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800333a:	f000 fafd 	bl	8003938 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <HAL_I2C_MspInit+0xb8>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_I2C_MspInit+0xb8>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_I2C_MspInit+0xb8>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335e:	2312      	movs	r3, #18
 8003360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336a:	2303      	movs	r3, #3
 800336c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003370:	2304      	movs	r3, #4
 8003372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800337a:	4619      	mov	r1, r3
 800337c:	480b      	ldr	r0, [pc, #44]	; (80033ac <HAL_I2C_MspInit+0xbc>)
 800337e:	f000 fe27 	bl	8003fd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_I2C_MspInit+0xb8>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <HAL_I2C_MspInit+0xb8>)
 8003388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_I2C_MspInit+0xb8>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800339a:	bf00      	nop
 800339c:	37b8      	adds	r7, #184	; 0xb8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40005400 	.word	0x40005400
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020400 	.word	0x40020400

080033b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380
 80033b6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033b8:	f000 fca3 	bl	8003d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033bc:	f000 fa4e 	bl	800385c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c0:	f7ff ff26 	bl	8003210 <MX_GPIO_Init>
  MX_I2C1_Init();
 80033c4:	f7ff ff54 	bl	8003270 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80033c8:	f000 fbe2 	bl	8003b90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate);
 80033cc:	2105      	movs	r1, #5
 80033ce:	2033      	movs	r0, #51	; 0x33
 80033d0:	f7fd f9e9 	bl	80007a6 <MLX90640_SetRefreshRate>
  MLX90640_SetChessMode(MLX90640_ADDR);
 80033d4:	2033      	movs	r0, #51	; 0x33
 80033d6:	f7fd fa15 	bl	8000804 <MLX90640_SetChessMode>
  paramsMLX90640 mlx90640;
  status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640);
 80033da:	49a2      	ldr	r1, [pc, #648]	; (8003664 <main+0x2b4>)
 80033dc:	2033      	movs	r0, #51	; 0x33
 80033de:	f7fd f905 	bl	80005ec <MLX90640_DumpEE>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4aa0      	ldr	r2, [pc, #640]	; (8003668 <main+0x2b8>)
 80033e6:	6013      	str	r3, [r2, #0]
  if (status != 0) printf("\r\nload system parameters error with code:%d\r\n",status);
 80033e8:	4b9f      	ldr	r3, [pc, #636]	; (8003668 <main+0x2b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <main+0x4c>
 80033f0:	4b9d      	ldr	r3, [pc, #628]	; (8003668 <main+0x2b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	489d      	ldr	r0, [pc, #628]	; (800366c <main+0x2bc>)
 80033f8:	f004 f8ba 	bl	8007570 <iprintf>
  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 80033fc:	4b9c      	ldr	r3, [pc, #624]	; (8003670 <main+0x2c0>)
 80033fe:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003402:	f103 0310 	add.w	r3, r3, #16
 8003406:	f107 0208 	add.w	r2, r7, #8
 800340a:	4413      	add	r3, r2
 800340c:	4619      	mov	r1, r3
 800340e:	4895      	ldr	r0, [pc, #596]	; (8003664 <main+0x2b4>)
 8003410:	f7fd f984 	bl	800071c <MLX90640_ExtractParameters>
 8003414:	4603      	mov	r3, r0
 8003416:	4a94      	ldr	r2, [pc, #592]	; (8003668 <main+0x2b8>)
 8003418:	6013      	str	r3, [r2, #0]
  if (status != 0) printf("\r\nParameter extraction failed with error code:%d\r\n",status);
 800341a:	4b93      	ldr	r3, [pc, #588]	; (8003668 <main+0x2b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <main+0x7e>
 8003422:	4b91      	ldr	r3, [pc, #580]	; (8003668 <main+0x2b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	4892      	ldr	r0, [pc, #584]	; (8003674 <main+0x2c4>)
 800342a:	f004 f8a1 	bl	8007570 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int status = MLX90640_GetFrameData(MLX90640_ADDR, frame);
 800342e:	4992      	ldr	r1, [pc, #584]	; (8003678 <main+0x2c8>)
 8003430:	2033      	movs	r0, #51	; 0x33
 8003432:	f7fd f8ee 	bl	8000612 <MLX90640_GetFrameData>
 8003436:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800343a:	6018      	str	r0, [r3, #0]
	  if (status < 0)
 800343c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	da05      	bge.n	8003452 <main+0xa2>
	  {
	  	printf("GetFrame Error: %d\r\n",status);
 8003446:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800344a:	6819      	ldr	r1, [r3, #0]
 800344c:	488b      	ldr	r0, [pc, #556]	; (800367c <main+0x2cc>)
 800344e:	f004 f88f 	bl	8007570 <iprintf>
	  }
	  		float vdd = MLX90640_GetVdd(frame, &mlx90640);
 8003452:	4b87      	ldr	r3, [pc, #540]	; (8003670 <main+0x2c0>)
 8003454:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003458:	f103 0310 	add.w	r3, r3, #16
 800345c:	f107 0208 	add.w	r2, r7, #8
 8003460:	4413      	add	r3, r2
 8003462:	4619      	mov	r1, r3
 8003464:	4884      	ldr	r0, [pc, #528]	; (8003678 <main+0x2c8>)
 8003466:	f7fd fe33 	bl	80010d0 <MLX90640_GetVdd>
 800346a:	f241 335c 	movw	r3, #4956	; 0x135c
 800346e:	443b      	add	r3, r7
 8003470:	ed83 0a00 	vstr	s0, [r3]
	  		float Ta = MLX90640_GetTa(frame, &mlx90640);
 8003474:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <main+0x2c0>)
 8003476:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800347a:	f103 0310 	add.w	r3, r3, #16
 800347e:	f107 0208 	add.w	r2, r7, #8
 8003482:	4413      	add	r3, r2
 8003484:	4619      	mov	r1, r3
 8003486:	487c      	ldr	r0, [pc, #496]	; (8003678 <main+0x2c8>)
 8003488:	f7fd fe9c 	bl	80011c4 <MLX90640_GetTa>
 800348c:	f241 3358 	movw	r3, #4952	; 0x1358
 8003490:	443b      	add	r3, r7
 8003492:	ed83 0a00 	vstr	s0, [r3]

	  		float tr = Ta - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8003496:	f241 3358 	movw	r3, #4952	; 0x1358
 800349a:	443b      	add	r3, r7
 800349c:	edd3 7a00 	vldr	s15, [r3]
 80034a0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80034a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a8:	f241 3354 	movw	r3, #4948	; 0x1354
 80034ac:	443b      	add	r3, r7
 80034ae:	edc3 7a00 	vstr	s15, [r3]
	  		printf("vdd:  %f Tr: %f\r\n",vdd,tr);
 80034b2:	f241 335c 	movw	r3, #4956	; 0x135c
 80034b6:	443b      	add	r3, r7
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034c0:	f241 3354 	movw	r3, #4948	; 0x1354
 80034c4:	443b      	add	r3, r7
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034ce:	ed8d 7b00 	vstr	d7, [sp]
 80034d2:	ec53 2b16 	vmov	r2, r3, d6
 80034d6:	486a      	ldr	r0, [pc, #424]	; (8003680 <main+0x2d0>)
 80034d8:	f004 f84a 	bl	8007570 <iprintf>
	  		MLX90640_CalculateTo(frame, &mlx90640, emissivity , tr, mlx90640To);
 80034dc:	4b69      	ldr	r3, [pc, #420]	; (8003684 <main+0x2d4>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <main+0x2c0>)
 80034e4:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80034e8:	f103 0310 	add.w	r3, r3, #16
 80034ec:	f107 0208 	add.w	r2, r7, #8
 80034f0:	4413      	add	r3, r2
 80034f2:	4a65      	ldr	r2, [pc, #404]	; (8003688 <main+0x2d8>)
 80034f4:	f241 3154 	movw	r1, #4948	; 0x1354
 80034f8:	4439      	add	r1, r7
 80034fa:	edd1 0a00 	vldr	s1, [r1]
 80034fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003502:	4619      	mov	r1, r3
 8003504:	485c      	ldr	r0, [pc, #368]	; (8003678 <main+0x2c8>)
 8003506:	f7fd f9a3 	bl	8000850 <MLX90640_CalculateTo>
//
//	  		HAL_Delay(500);


	  		// 데이터셋의 최소값과 최대값 찾기
	  		float minTemp = FLT_MAX;
 800350a:	4b60      	ldr	r3, [pc, #384]	; (800368c <main+0x2dc>)
 800350c:	f241 3274 	movw	r2, #4980	; 0x1374
 8003510:	443a      	add	r2, r7
 8003512:	6013      	str	r3, [r2, #0]
	  		float maxTemp = -FLT_MAX;
 8003514:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8003518:	f241 3270 	movw	r2, #4976	; 0x1370
 800351c:	443a      	add	r2, r7
 800351e:	6013      	str	r3, [r2, #0]

	  		for(int i = 0; i < 768; i++) {
 8003520:	2300      	movs	r3, #0
 8003522:	f241 326c 	movw	r2, #4972	; 0x136c
 8003526:	443a      	add	r2, r7
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e046      	b.n	80035ba <main+0x20a>
	  		    if(mlx90640To[i] < minTemp) minTemp = mlx90640To[i];
 800352c:	4a56      	ldr	r2, [pc, #344]	; (8003688 <main+0x2d8>)
 800352e:	f241 336c 	movw	r3, #4972	; 0x136c
 8003532:	443b      	add	r3, r7
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	f241 3374 	movw	r3, #4980	; 0x1374
 8003542:	443b      	add	r3, r7
 8003544:	ed93 7a00 	vldr	s14, [r3]
 8003548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003550:	dd0b      	ble.n	800356a <main+0x1ba>
 8003552:	4a4d      	ldr	r2, [pc, #308]	; (8003688 <main+0x2d8>)
 8003554:	f241 336c 	movw	r3, #4972	; 0x136c
 8003558:	443b      	add	r3, r7
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f241 3274 	movw	r2, #4980	; 0x1374
 8003566:	443a      	add	r2, r7
 8003568:	6013      	str	r3, [r2, #0]
	  		    if(mlx90640To[i] > maxTemp) maxTemp = mlx90640To[i];
 800356a:	4a47      	ldr	r2, [pc, #284]	; (8003688 <main+0x2d8>)
 800356c:	f241 336c 	movw	r3, #4972	; 0x136c
 8003570:	443b      	add	r3, r7
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	edd3 7a00 	vldr	s15, [r3]
 800357c:	f241 3370 	movw	r3, #4976	; 0x1370
 8003580:	443b      	add	r3, r7
 8003582:	ed93 7a00 	vldr	s14, [r3]
 8003586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	d50b      	bpl.n	80035a8 <main+0x1f8>
 8003590:	4a3d      	ldr	r2, [pc, #244]	; (8003688 <main+0x2d8>)
 8003592:	f241 336c 	movw	r3, #4972	; 0x136c
 8003596:	443b      	add	r3, r7
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f241 3270 	movw	r2, #4976	; 0x1370
 80035a4:	443a      	add	r2, r7
 80035a6:	6013      	str	r3, [r2, #0]
	  		for(int i = 0; i < 768; i++) {
 80035a8:	f241 336c 	movw	r3, #4972	; 0x136c
 80035ac:	443b      	add	r3, r7
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	f241 326c 	movw	r2, #4972	; 0x136c
 80035b6:	443a      	add	r2, r7
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	f241 336c 	movw	r3, #4972	; 0x136c
 80035be:	443b      	add	r3, r7
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c6:	dbb1      	blt.n	800352c <main+0x17c>
	  		}

	  		char uartBuffer[32 * 6 + 2]; // 충분히 큰 버퍼를 할당
	  		int idx = 0; // 버퍼 인덱스
 80035c8:	2300      	movs	r3, #0
 80035ca:	f241 3268 	movw	r2, #4968	; 0x1368
 80035ce:	443a      	add	r2, r7
 80035d0:	6013      	str	r3, [r2, #0]

	  		// 데이터 정규화 및 UART 전송
	  		for(int i = 0; i < 768; i++) {
 80035d2:	2300      	movs	r3, #0
 80035d4:	f241 3264 	movw	r2, #4964	; 0x1364
 80035d8:	443a      	add	r2, r7
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	e0df      	b.n	800379e <main+0x3ee>
	  		    if(i % 32 == 0) {
 80035de:	f241 3364 	movw	r3, #4964	; 0x1364
 80035e2:	443b      	add	r3, r7
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d17d      	bne.n	80036ea <main+0x33a>
	  		        if(i != 0) {
 80035ee:	f241 3364 	movw	r3, #4964	; 0x1364
 80035f2:	443b      	add	r3, r7
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04e      	beq.n	8003698 <main+0x2e8>
	  		            // 줄바꿈 문자 추가 및 UART 전송
	  		            uartBuffer[idx++] = '\r';
 80035fa:	f241 3368 	movw	r3, #4968	; 0x1368
 80035fe:	443b      	add	r3, r7
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	f241 3168 	movw	r1, #4968	; 0x1368
 8003608:	4439      	add	r1, r7
 800360a:	600a      	str	r2, [r1, #0]
 800360c:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8003610:	f5a2 725c 	sub.w	r2, r2, #880	; 0x370
 8003614:	210d      	movs	r1, #13
 8003616:	54d1      	strb	r1, [r2, r3]
	  		            uartBuffer[idx++] = '\n';
 8003618:	f241 3368 	movw	r3, #4968	; 0x1368
 800361c:	443b      	add	r3, r7
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	f241 3168 	movw	r1, #4968	; 0x1368
 8003626:	4439      	add	r1, r7
 8003628:	600a      	str	r2, [r1, #0]
 800362a:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800362e:	f5a2 725c 	sub.w	r2, r2, #880	; 0x370
 8003632:	210a      	movs	r1, #10
 8003634:	54d1      	strb	r1, [r2, r3]
	  		            HAL_UART_Transmit(&huart3, (uint8_t*)uartBuffer, idx, HAL_MAX_DELAY);
 8003636:	f241 3368 	movw	r3, #4968	; 0x1368
 800363a:	443b      	add	r3, r7
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29a      	uxth	r2, r3
 8003640:	4913      	ldr	r1, [pc, #76]	; (8003690 <main+0x2e0>)
 8003642:	f241 3370 	movw	r3, #4976	; 0x1370
 8003646:	440b      	add	r3, r1
 8003648:	f107 0108 	add.w	r1, r7, #8
 800364c:	1859      	adds	r1, r3, r1
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	4810      	ldr	r0, [pc, #64]	; (8003694 <main+0x2e4>)
 8003654:	f002 fdf2 	bl	800623c <HAL_UART_Transmit>
	  		            idx = 0; // 버퍼 인덱스 초기화
 8003658:	2300      	movs	r3, #0
 800365a:	f241 3268 	movw	r2, #4968	; 0x1368
 800365e:	443a      	add	r2, r7
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e042      	b.n	80036ea <main+0x33a>
 8003664:	2000024c 	.word	0x2000024c
 8003668:	20001b50 	.word	0x20001b50
 800366c:	08009db8 	.word	0x08009db8
 8003670:	ffffed54 	.word	0xffffed54
 8003674:	08009de8 	.word	0x08009de8
 8003678:	200014cc 	.word	0x200014cc
 800367c:	08009e1c 	.word	0x08009e1c
 8003680:	08009e34 	.word	0x08009e34
 8003684:	20000000 	.word	0x20000000
 8003688:	200008cc 	.word	0x200008cc
 800368c:	7f7fffff 	.word	0x7f7fffff
 8003690:	ffffec90 	.word	0xffffec90
 8003694:	20001b58 	.word	0x20001b58
	  		        } else {
	  		            // 시작 신호 추가
	  		            const char* startSignal = "start ";
 8003698:	4b69      	ldr	r3, [pc, #420]	; (8003840 <main+0x490>)
 800369a:	f241 324c 	movw	r2, #4940	; 0x134c
 800369e:	443a      	add	r2, r7
 80036a0:	6013      	str	r3, [r2, #0]
	  		            idx += snprintf(&uartBuffer[idx], sizeof(uartBuffer) - idx, "%s", startSignal);
 80036a2:	4b68      	ldr	r3, [pc, #416]	; (8003844 <main+0x494>)
 80036a4:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80036a8:	f103 0310 	add.w	r3, r3, #16
 80036ac:	f107 0208 	add.w	r2, r7, #8
 80036b0:	4413      	add	r3, r2
 80036b2:	f241 3268 	movw	r2, #4968	; 0x1368
 80036b6:	443a      	add	r2, r7
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	1898      	adds	r0, r3, r2
 80036bc:	f241 3368 	movw	r3, #4968	; 0x1368
 80036c0:	443b      	add	r3, r7
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1c3 01c2 	rsb	r1, r3, #194	; 0xc2
 80036c8:	f241 334c 	movw	r3, #4940	; 0x134c
 80036cc:	443b      	add	r3, r7
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a5d      	ldr	r2, [pc, #372]	; (8003848 <main+0x498>)
 80036d2:	f003 ff5f 	bl	8007594 <sniprintf>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f241 3368 	movw	r3, #4968	; 0x1368
 80036dc:	443b      	add	r3, r7
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	f241 3268 	movw	r2, #4968	; 0x1368
 80036e6:	443a      	add	r2, r7
 80036e8:	6013      	str	r3, [r2, #0]
	  		        }
	  		    }

	  		    // 온도 값을 0-255 범위로 정규화
	  		    uint8_t scaledTemp = (uint8_t)((mlx90640To[i] - minTemp) / (maxTemp - minTemp) * 255.0);
 80036ea:	4a58      	ldr	r2, [pc, #352]	; (800384c <main+0x49c>)
 80036ec:	f241 3364 	movw	r3, #4964	; 0x1364
 80036f0:	443b      	add	r3, r7
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	ed93 7a00 	vldr	s14, [r3]
 80036fc:	f241 3374 	movw	r3, #4980	; 0x1374
 8003700:	443b      	add	r3, r7
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	ee77 6a67 	vsub.f32	s13, s14, s15
 800370a:	f241 3370 	movw	r3, #4976	; 0x1370
 800370e:	443b      	add	r3, r7
 8003710:	ed93 7a00 	vldr	s14, [r3]
 8003714:	f241 3374 	movw	r3, #4980	; 0x1374
 8003718:	443b      	add	r3, r7
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800372a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8003838 <main+0x488>
 800372e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003732:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003736:	edc7 7a01 	vstr	s15, [r7, #4]
 800373a:	793b      	ldrb	r3, [r7, #4]
 800373c:	f241 324b 	movw	r2, #4939	; 0x134b
 8003740:	443a      	add	r2, r7
 8003742:	7013      	strb	r3, [r2, #0]

	  		    // 정규화된 온도 값을 문자열로 변환하고 버퍼에 추가
	  		    idx += snprintf(&uartBuffer[idx], sizeof(uartBuffer) - idx, "%u ", scaledTemp);
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <main+0x494>)
 8003746:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800374a:	f103 0310 	add.w	r3, r3, #16
 800374e:	f107 0208 	add.w	r2, r7, #8
 8003752:	4413      	add	r3, r2
 8003754:	f241 3268 	movw	r2, #4968	; 0x1368
 8003758:	443a      	add	r2, r7
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	1898      	adds	r0, r3, r2
 800375e:	f241 3368 	movw	r3, #4968	; 0x1368
 8003762:	443b      	add	r3, r7
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f1c3 01c2 	rsb	r1, r3, #194	; 0xc2
 800376a:	f241 334b 	movw	r3, #4939	; 0x134b
 800376e:	443b      	add	r3, r7
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4a37      	ldr	r2, [pc, #220]	; (8003850 <main+0x4a0>)
 8003774:	f003 ff0e 	bl	8007594 <sniprintf>
 8003778:	4602      	mov	r2, r0
 800377a:	f241 3368 	movw	r3, #4968	; 0x1368
 800377e:	443b      	add	r3, r7
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	f241 3268 	movw	r2, #4968	; 0x1368
 8003788:	443a      	add	r2, r7
 800378a:	6013      	str	r3, [r2, #0]
	  		for(int i = 0; i < 768; i++) {
 800378c:	f241 3364 	movw	r3, #4964	; 0x1364
 8003790:	443b      	add	r3, r7
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	f241 3264 	movw	r2, #4964	; 0x1364
 800379a:	443a      	add	r2, r7
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	f241 3364 	movw	r3, #4964	; 0x1364
 80037a2:	443b      	add	r3, r7
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037aa:	f6ff af18 	blt.w	80035de <main+0x22e>
	  		}

	  		if(idx > 0) {
 80037ae:	f241 3368 	movw	r3, #4968	; 0x1368
 80037b2:	443b      	add	r3, r7
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dd39      	ble.n	800382e <main+0x47e>
	  		    // 종료 신호 추가
	  		    const char* endSignal = " end";
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <main+0x4a4>)
 80037bc:	f241 3250 	movw	r2, #4944	; 0x1350
 80037c0:	443a      	add	r2, r7
 80037c2:	6013      	str	r3, [r2, #0]
	  		    idx += snprintf(&uartBuffer[idx], sizeof(uartBuffer) - idx, "%s", endSignal);
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <main+0x494>)
 80037c6:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80037ca:	f103 0310 	add.w	r3, r3, #16
 80037ce:	f107 0208 	add.w	r2, r7, #8
 80037d2:	4413      	add	r3, r2
 80037d4:	f241 3268 	movw	r2, #4968	; 0x1368
 80037d8:	443a      	add	r2, r7
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	1898      	adds	r0, r3, r2
 80037de:	f241 3368 	movw	r3, #4968	; 0x1368
 80037e2:	443b      	add	r3, r7
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1c3 01c2 	rsb	r1, r3, #194	; 0xc2
 80037ea:	f241 3350 	movw	r3, #4944	; 0x1350
 80037ee:	443b      	add	r3, r7
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <main+0x498>)
 80037f4:	f003 fece 	bl	8007594 <sniprintf>
 80037f8:	4602      	mov	r2, r0
 80037fa:	f241 3368 	movw	r3, #4968	; 0x1368
 80037fe:	443b      	add	r3, r7
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4413      	add	r3, r2
 8003804:	f241 3268 	movw	r2, #4968	; 0x1368
 8003808:	443a      	add	r2, r7
 800380a:	6013      	str	r3, [r2, #0]

	  		    // 마지막 데이터 전송
	  		    HAL_UART_Transmit(&huart3, (uint8_t*)uartBuffer, idx, HAL_MAX_DELAY);
 800380c:	f241 3368 	movw	r3, #4968	; 0x1368
 8003810:	443b      	add	r3, r7
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	490b      	ldr	r1, [pc, #44]	; (8003844 <main+0x494>)
 8003818:	f241 3370 	movw	r3, #4976	; 0x1370
 800381c:	440b      	add	r3, r1
 800381e:	f107 0108 	add.w	r1, r7, #8
 8003822:	1859      	adds	r1, r3, r1
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	480b      	ldr	r0, [pc, #44]	; (8003858 <main+0x4a8>)
 800382a:	f002 fd07 	bl	800623c <HAL_UART_Transmit>
	  		}

	  		HAL_Delay(5000);
 800382e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003832:	f000 fac3 	bl	8003dbc <HAL_Delay>
  {
 8003836:	e5fa      	b.n	800342e <main+0x7e>
 8003838:	00000000 	.word	0x00000000
 800383c:	406fe000 	.word	0x406fe000
 8003840:	08009e48 	.word	0x08009e48
 8003844:	ffffec90 	.word	0xffffec90
 8003848:	08009e50 	.word	0x08009e50
 800384c:	200008cc 	.word	0x200008cc
 8003850:	08009e54 	.word	0x08009e54
 8003854:	08009e58 	.word	0x08009e58
 8003858:	20001b58 	.word	0x20001b58

0800385c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b094      	sub	sp, #80	; 0x50
 8003860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	2234      	movs	r2, #52	; 0x34
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f003 ff09 	bl	8007682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003870:	f107 0308 	add.w	r3, r7, #8
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <SystemClock_Config+0xd4>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <SystemClock_Config+0xd4>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	; 0x40
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <SystemClock_Config+0xd4>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <SystemClock_Config+0xd8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a25      	ldr	r2, [pc, #148]	; (8003934 <SystemClock_Config+0xd8>)
 800389e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b23      	ldr	r3, [pc, #140]	; (8003934 <SystemClock_Config+0xd8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ba:	2302      	movs	r3, #2
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038c4:	2304      	movs	r3, #4
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80038c8:	23d8      	movs	r3, #216	; 0xd8
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038cc:	2302      	movs	r3, #2
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038d0:	2302      	movs	r3, #2
 80038d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038d4:	2302      	movs	r3, #2
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fb63 	bl	8004fa8 <HAL_RCC_OscConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80038e8:	f000 f826 	bl	8003938 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038ec:	f001 fb0c 	bl	8004f08 <HAL_PWREx_EnableOverDrive>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80038f6:	f000 f81f 	bl	8003938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038fa:	230f      	movs	r3, #15
 80038fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038fe:	2302      	movs	r3, #2
 8003900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003906:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800390a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800390c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003910:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	2107      	movs	r1, #7
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fdf3 	bl	8005504 <HAL_RCC_ClockConfig>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003924:	f000 f808 	bl	8003938 <Error_Handler>
  }
}
 8003928:	bf00      	nop
 800392a:	3750      	adds	r7, #80	; 0x50
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000

08003938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800393c:	b672      	cpsid	i
}
 800393e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003940:	e7fe      	b.n	8003940 <Error_Handler+0x8>
	...

08003944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <HAL_MspInit+0x44>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <HAL_MspInit+0x44>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	6413      	str	r3, [r2, #64]	; 0x40
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <HAL_MspInit+0x44>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_MspInit+0x44>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <HAL_MspInit+0x44>)
 8003968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800396c:	6453      	str	r3, [r2, #68]	; 0x44
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_MspInit+0x44>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800

0800398c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003990:	e7fe      	b.n	8003990 <NMI_Handler+0x4>

08003992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <HardFault_Handler+0x4>

08003998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <MemManage_Handler+0x4>

0800399e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <BusFault_Handler+0x4>

080039a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <UsageFault_Handler+0x4>

080039aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039d8:	f000 f9d0 	bl	8003d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return 1;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <_kill>:

int _kill(int pid, int sig)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039fa:	f003 fe95 	bl	8007728 <__errno>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2216      	movs	r2, #22
 8003a02:	601a      	str	r2, [r3, #0]
  return -1;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_exit>:

void _exit (int status)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ffe7 	bl	80039f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a22:	e7fe      	b.n	8003a22 <_exit+0x12>

08003a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00a      	b.n	8003a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a36:	f3af 8000 	nop.w
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	60ba      	str	r2, [r7, #8]
 8003a42:	b2ca      	uxtb	r2, r1
 8003a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	dbf0      	blt.n	8003a36 <_read+0x12>
  }

  return len;
 8003a54:	687b      	ldr	r3, [r7, #4]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	e009      	b.n	8003a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	60ba      	str	r2, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3301      	adds	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	dbf1      	blt.n	8003a70 <_write+0x12>
  }
  return len;
 8003a8c:	687b      	ldr	r3, [r7, #4]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <_close>:

int _close(int file)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003abe:	605a      	str	r2, [r3, #4]
  return 0;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <_isatty>:

int _isatty(int file)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <_sbrk+0x5c>)
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <_sbrk+0x60>)
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <_sbrk+0x64>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <_sbrk+0x64>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <_sbrk+0x68>)
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d207      	bcs.n	8003b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b30:	f003 fdfa 	bl	8007728 <__errno>
 8003b34:	4603      	mov	r3, r0
 8003b36:	220c      	movs	r2, #12
 8003b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e009      	b.n	8003b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <_sbrk+0x64>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <_sbrk+0x64>)
 8003b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20080000 	.word	0x20080000
 8003b60:	00000400 	.word	0x00000400
 8003b64:	20001b54 	.word	0x20001b54
 8003b68:	20001d30 	.word	0x20001d30

08003b6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <SystemInit+0x20>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <SystemInit+0x20>)
 8003b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <MX_USART3_UART_Init+0x5c>)
 8003b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bb6:	220c      	movs	r2, #12
 8003bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bd2:	4805      	ldr	r0, [pc, #20]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bd4:	f002 fae4 	bl	80061a0 <HAL_UART_Init>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003bde:	f7ff feab 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20001b58 	.word	0x20001b58
 8003bec:	40004800 	.word	0x40004800

08003bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b0ae      	sub	sp, #184	; 0xb8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	2290      	movs	r2, #144	; 0x90
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 fd36 	bl	8007682 <memset>
  if(uartHandle->Instance==USART3)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <HAL_UART_MspInit+0xb4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d13c      	bne.n	8003c9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c26:	2300      	movs	r3, #0
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fe8e 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003c3a:	f7ff fe7d 	bl	8003938 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <HAL_UART_MspInit+0xb8>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <HAL_UART_MspInit+0xb8>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <HAL_UART_MspInit+0xb8>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_UART_MspInit+0xb8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <HAL_UART_MspInit+0xb8>)
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_UART_MspInit+0xb8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c82:	2303      	movs	r3, #3
 8003c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c88:	2307      	movs	r3, #7
 8003c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4805      	ldr	r0, [pc, #20]	; (8003cac <HAL_UART_MspInit+0xbc>)
 8003c96:	f000 f99b 	bl	8003fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	37b8      	adds	r7, #184	; 0xb8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40004800 	.word	0x40004800
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40020c00 	.word	0x40020c00

08003cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cb4:	480d      	ldr	r0, [pc, #52]	; (8003cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cb6:	490e      	ldr	r1, [pc, #56]	; (8003cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cb8:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cbc:	e002      	b.n	8003cc4 <LoopCopyDataInit>

08003cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cc2:	3304      	adds	r3, #4

08003cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc8:	d3f9      	bcc.n	8003cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ccc:	4c0b      	ldr	r4, [pc, #44]	; (8003cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cd0:	e001      	b.n	8003cd6 <LoopFillZerobss>

08003cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd4:	3204      	adds	r2, #4

08003cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd8:	d3fb      	bcc.n	8003cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cda:	f7ff ff47 	bl	8003b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cde:	f003 fd29 	bl	8007734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ce2:	f7ff fb65 	bl	80033b0 <main>
  bx  lr    
 8003ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ce8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cf0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003cf4:	0800bab8 	.word	0x0800bab8
  ldr r2, =_sbss
 8003cf8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003cfc:	20001d30 	.word	0x20001d30

08003d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d00:	e7fe      	b.n	8003d00 <ADC_IRQHandler>

08003d02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d06:	2003      	movs	r0, #3
 8003d08:	f000 f92e 	bl	8003f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d0c:	200f      	movs	r0, #15
 8003d0e:	f000 f805 	bl	8003d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d12:	f7ff fe17 	bl	8003944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_InitTick+0x54>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_InitTick+0x58>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f93b 	bl	8003fb6 <HAL_SYSTICK_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00e      	b.n	8003d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d80a      	bhi.n	8003d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d50:	2200      	movs	r2, #0
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f000 f911 	bl	8003f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <HAL_InitTick+0x5c>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000004 	.word	0x20000004
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	20000008 	.word	0x20000008

08003d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c
 8003da0:	20001be0 	.word	0x20001be0

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20001be0 	.word	0x20001be0

08003dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff ffee 	bl	8003da4 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d005      	beq.n	8003de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_Delay+0x44>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003de2:	bf00      	nop
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d8f7      	bhi.n	8003de4 <HAL_Delay+0x28>
  {
  }
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <__NVIC_SetPriorityGrouping+0x40>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e20:	4013      	ands	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <__NVIC_SetPriorityGrouping+0x44>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e32:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <__NVIC_SetPriorityGrouping+0x40>)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	60d3      	str	r3, [r2, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000ed00 	.word	0xe000ed00
 8003e48:	05fa0000 	.word	0x05fa0000

08003e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <__NVIC_GetPriorityGrouping+0x18>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	f003 0307 	and.w	r3, r3, #7
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	6039      	str	r1, [r7, #0]
 8003e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	db0a      	blt.n	8003e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	490c      	ldr	r1, [pc, #48]	; (8003eb4 <__NVIC_SetPriority+0x4c>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	0112      	lsls	r2, r2, #4
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e90:	e00a      	b.n	8003ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <__NVIC_SetPriority+0x50>)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	3b04      	subs	r3, #4
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	761a      	strb	r2, [r3, #24]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000e100 	.word	0xe000e100
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	bf28      	it	cs
 8003eda:	2304      	movcs	r3, #4
 8003edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d902      	bls.n	8003eec <NVIC_EncodePriority+0x30>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3b03      	subs	r3, #3
 8003eea:	e000      	b.n	8003eee <NVIC_EncodePriority+0x32>
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43da      	mvns	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	401a      	ands	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f04:	f04f 31ff 	mov.w	r1, #4294967295
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43d9      	mvns	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f14:	4313      	orrs	r3, r2
         );
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	; 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f34:	d301      	bcc.n	8003f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00f      	b.n	8003f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <SysTick_Config+0x40>)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f42:	210f      	movs	r1, #15
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	f7ff ff8e 	bl	8003e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <SysTick_Config+0x40>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f52:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <SysTick_Config+0x40>)
 8003f54:	2207      	movs	r2, #7
 8003f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	e000e010 	.word	0xe000e010

08003f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff47 	bl	8003e04 <__NVIC_SetPriorityGrouping>
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	4603      	mov	r3, r0
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f90:	f7ff ff5c 	bl	8003e4c <__NVIC_GetPriorityGrouping>
 8003f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f7ff ff8e 	bl	8003ebc <NVIC_EncodePriority>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff5d 	bl	8003e68 <__NVIC_SetPriority>
}
 8003fae:	bf00      	nop
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffb0 	bl	8003f24 <SysTick_Config>
 8003fc4:	4603      	mov	r3, r0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	e175      	b.n	80042dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	f040 8164 	bne.w	80042d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d005      	beq.n	8004026 <HAL_GPIO_Init+0x56>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d130      	bne.n	8004088 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2203      	movs	r2, #3
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 0201 	and.w	r2, r3, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b03      	cmp	r3, #3
 8004092:	d017      	beq.n	80040c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	2203      	movs	r2, #3
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d123      	bne.n	8004118 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	08da      	lsrs	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3208      	adds	r2, #8
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	08da      	lsrs	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3208      	adds	r2, #8
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0203 	and.w	r2, r3, #3
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80be 	beq.w	80042d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415a:	4b66      	ldr	r3, [pc, #408]	; (80042f4 <HAL_GPIO_Init+0x324>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	4a65      	ldr	r2, [pc, #404]	; (80042f4 <HAL_GPIO_Init+0x324>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	6453      	str	r3, [r2, #68]	; 0x44
 8004166:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_GPIO_Init+0x324>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004172:	4a61      	ldr	r2, [pc, #388]	; (80042f8 <HAL_GPIO_Init+0x328>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_GPIO_Init+0x32c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d037      	beq.n	800420e <HAL_GPIO_Init+0x23e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_GPIO_Init+0x330>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d031      	beq.n	800420a <HAL_GPIO_Init+0x23a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a56      	ldr	r2, [pc, #344]	; (8004304 <HAL_GPIO_Init+0x334>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02b      	beq.n	8004206 <HAL_GPIO_Init+0x236>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a55      	ldr	r2, [pc, #340]	; (8004308 <HAL_GPIO_Init+0x338>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d025      	beq.n	8004202 <HAL_GPIO_Init+0x232>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a54      	ldr	r2, [pc, #336]	; (800430c <HAL_GPIO_Init+0x33c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <HAL_GPIO_Init+0x22e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a53      	ldr	r2, [pc, #332]	; (8004310 <HAL_GPIO_Init+0x340>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d019      	beq.n	80041fa <HAL_GPIO_Init+0x22a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a52      	ldr	r2, [pc, #328]	; (8004314 <HAL_GPIO_Init+0x344>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_GPIO_Init+0x226>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a51      	ldr	r2, [pc, #324]	; (8004318 <HAL_GPIO_Init+0x348>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00d      	beq.n	80041f2 <HAL_GPIO_Init+0x222>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a50      	ldr	r2, [pc, #320]	; (800431c <HAL_GPIO_Init+0x34c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <HAL_GPIO_Init+0x21e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4f      	ldr	r2, [pc, #316]	; (8004320 <HAL_GPIO_Init+0x350>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_GPIO_Init+0x21a>
 80041e6:	2309      	movs	r3, #9
 80041e8:	e012      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041ea:	230a      	movs	r3, #10
 80041ec:	e010      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041ee:	2308      	movs	r3, #8
 80041f0:	e00e      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041f2:	2307      	movs	r3, #7
 80041f4:	e00c      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041f6:	2306      	movs	r3, #6
 80041f8:	e00a      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041fa:	2305      	movs	r3, #5
 80041fc:	e008      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041fe:	2304      	movs	r3, #4
 8004200:	e006      	b.n	8004210 <HAL_GPIO_Init+0x240>
 8004202:	2303      	movs	r3, #3
 8004204:	e004      	b.n	8004210 <HAL_GPIO_Init+0x240>
 8004206:	2302      	movs	r3, #2
 8004208:	e002      	b.n	8004210 <HAL_GPIO_Init+0x240>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_GPIO_Init+0x240>
 800420e:	2300      	movs	r3, #0
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f002 0203 	and.w	r2, r2, #3
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	4093      	lsls	r3, r2
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004220:	4935      	ldr	r1, [pc, #212]	; (80042f8 <HAL_GPIO_Init+0x328>)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800422e:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_GPIO_Init+0x354>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004252:	4a34      	ldr	r2, [pc, #208]	; (8004324 <HAL_GPIO_Init+0x354>)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_GPIO_Init+0x354>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_GPIO_Init+0x354>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004282:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_GPIO_Init+0x354>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042a6:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_GPIO_Init+0x354>)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_GPIO_Init+0x354>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <HAL_GPIO_Init+0x354>)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3301      	adds	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	f67f ae86 	bls.w	8003ff0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3724      	adds	r7, #36	; 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40013800 	.word	0x40013800
 80042fc:	40020000 	.word	0x40020000
 8004300:	40020400 	.word	0x40020400
 8004304:	40020800 	.word	0x40020800
 8004308:	40020c00 	.word	0x40020c00
 800430c:	40021000 	.word	0x40021000
 8004310:	40021400 	.word	0x40021400
 8004314:	40021800 	.word	0x40021800
 8004318:	40021c00 	.word	0x40021c00
 800431c:	40022000 	.word	0x40022000
 8004320:	40022400 	.word	0x40022400
 8004324:	40013c00 	.word	0x40013c00

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07f      	b.n	800443a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe ffce 	bl	80032f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004378:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004388:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	e006      	b.n	80043b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d104      	bne.n	80043c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_I2C_Init+0x11c>)
 80043ce:	430b      	orrs	r3, r1
 80043d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	02008000 	.word	0x02008000

08004448 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	461a      	mov	r2, r3
 8004456:	4603      	mov	r3, r0
 8004458:	817b      	strh	r3, [r7, #10]
 800445a:	460b      	mov	r3, r1
 800445c:	813b      	strh	r3, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b20      	cmp	r3, #32
 800446c:	f040 80f9 	bne.w	8004662 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_I2C_Mem_Write+0x34>
 8004476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0ed      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_I2C_Mem_Write+0x4e>
 8004492:	2302      	movs	r3, #2
 8004494:	e0e6      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800449e:	f7ff fc81 	bl	8003da4 <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2319      	movs	r3, #25
 80044aa:	2201      	movs	r2, #1
 80044ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fac3 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0d1      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2221      	movs	r2, #33	; 0x21
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2240      	movs	r2, #64	; 0x40
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a3a      	ldr	r2, [r7, #32]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044e8:	88f8      	ldrh	r0, [r7, #6]
 80044ea:	893a      	ldrh	r2, [r7, #8]
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	4603      	mov	r3, r0
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f9d3 	bl	80048a4 <I2C_RequestMemoryWrite>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0a9      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2bff      	cmp	r3, #255	; 0xff
 8004518:	d90e      	bls.n	8004538 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	b2da      	uxtb	r2, r3
 8004526:	8979      	ldrh	r1, [r7, #10]
 8004528:	2300      	movs	r3, #0
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fc1f 	bl	8004d74 <I2C_TransferConfig>
 8004536:	e00f      	b.n	8004558 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	b2da      	uxtb	r2, r3
 8004548:	8979      	ldrh	r1, [r7, #10]
 800454a:	2300      	movs	r3, #0
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fc0e 	bl	8004d74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 faad 	bl	8004abc <I2C_WaitOnTXISFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e07b      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d034      	beq.n	8004610 <HAL_I2C_Mem_Write+0x1c8>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d130      	bne.n	8004610 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fa3f 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04d      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2bff      	cmp	r3, #255	; 0xff
 80045d0:	d90e      	bls.n	80045f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	8979      	ldrh	r1, [r7, #10]
 80045e0:	2300      	movs	r3, #0
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fbc3 	bl	8004d74 <I2C_TransferConfig>
 80045ee:	e00f      	b.n	8004610 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	8979      	ldrh	r1, [r7, #10]
 8004602:	2300      	movs	r3, #0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fbb2 	bl	8004d74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d19e      	bne.n	8004558 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa8c 	bl	8004b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e01a      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2220      	movs	r2, #32
 8004634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_I2C_Mem_Write+0x224>)
 8004642:	400b      	ands	r3, r1
 8004644:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	fe00e800 	.word	0xfe00e800

08004670 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	461a      	mov	r2, r3
 800467e:	4603      	mov	r3, r0
 8004680:	817b      	strh	r3, [r7, #10]
 8004682:	460b      	mov	r3, r1
 8004684:	813b      	strh	r3, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b20      	cmp	r3, #32
 8004694:	f040 80fd 	bne.w	8004892 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_I2C_Mem_Read+0x34>
 800469e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0f1      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_I2C_Mem_Read+0x4e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e0ea      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046c6:	f7ff fb6d 	bl	8003da4 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2319      	movs	r3, #25
 80046d2:	2201      	movs	r2, #1
 80046d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f9af 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0d5      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2222      	movs	r2, #34	; 0x22
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2240      	movs	r2, #64	; 0x40
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004710:	88f8      	ldrh	r0, [r7, #6]
 8004712:	893a      	ldrh	r2, [r7, #8]
 8004714:	8979      	ldrh	r1, [r7, #10]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4603      	mov	r3, r0
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f913 	bl	800494c <I2C_RequestMemoryRead>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0ad      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2bff      	cmp	r3, #255	; 0xff
 8004740:	d90e      	bls.n	8004760 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	22ff      	movs	r2, #255	; 0xff
 8004746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	b2da      	uxtb	r2, r3
 800474e:	8979      	ldrh	r1, [r7, #10]
 8004750:	4b52      	ldr	r3, [pc, #328]	; (800489c <HAL_I2C_Mem_Read+0x22c>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fb0b 	bl	8004d74 <I2C_TransferConfig>
 800475e:	e00f      	b.n	8004780 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	b2da      	uxtb	r2, r3
 8004770:	8979      	ldrh	r1, [r7, #10]
 8004772:	4b4a      	ldr	r3, [pc, #296]	; (800489c <HAL_I2C_Mem_Read+0x22c>)
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fafa 	bl	8004d74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	2200      	movs	r2, #0
 8004788:	2104      	movs	r1, #4
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f956 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07c      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d034      	beq.n	8004840 <HAL_I2C_Mem_Read+0x1d0>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d130      	bne.n	8004840 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f927 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e04d      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2bff      	cmp	r3, #255	; 0xff
 8004800:	d90e      	bls.n	8004820 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8979      	ldrh	r1, [r7, #10]
 8004810:	2300      	movs	r3, #0
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 faab 	bl	8004d74 <I2C_TransferConfig>
 800481e:	e00f      	b.n	8004840 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482e:	b2da      	uxtb	r2, r3
 8004830:	8979      	ldrh	r1, [r7, #10]
 8004832:	2300      	movs	r3, #0
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fa9a 	bl	8004d74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d19a      	bne.n	8004780 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f974 	bl	8004b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e01a      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2220      	movs	r2, #32
 8004864:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_I2C_Mem_Read+0x230>)
 8004872:	400b      	ands	r3, r1
 8004874:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	80002400 	.word	0x80002400
 80048a0:	fe00e800 	.word	0xfe00e800

080048a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	4608      	mov	r0, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	817b      	strh	r3, [r7, #10]
 80048b6:	460b      	mov	r3, r1
 80048b8:	813b      	strh	r3, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	8979      	ldrh	r1, [r7, #10]
 80048c4:	4b20      	ldr	r3, [pc, #128]	; (8004948 <I2C_RequestMemoryWrite+0xa4>)
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fa51 	bl	8004d74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8f0 	bl	8004abc <I2C_WaitOnTXISFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e02c      	b.n	8004940 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
 80048f6:	e015      	b.n	8004924 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048f8:	893b      	ldrh	r3, [r7, #8]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	69b9      	ldr	r1, [r7, #24]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f8d6 	bl	8004abc <I2C_WaitOnTXISFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e012      	b.n	8004940 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800491a:	893b      	ldrh	r3, [r7, #8]
 800491c:	b2da      	uxtb	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2200      	movs	r2, #0
 800492c:	2180      	movs	r1, #128	; 0x80
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f884 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	80002000 	.word	0x80002000

0800494c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	817b      	strh	r3, [r7, #10]
 800495e:	460b      	mov	r3, r1
 8004960:	813b      	strh	r3, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	8979      	ldrh	r1, [r7, #10]
 800496c:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <I2C_RequestMemoryRead+0xa4>)
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2300      	movs	r3, #0
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f9fe 	bl	8004d74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	69b9      	ldr	r1, [r7, #24]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f89d 	bl	8004abc <I2C_WaitOnTXISFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e02c      	b.n	80049e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d105      	bne.n	800499e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004992:	893b      	ldrh	r3, [r7, #8]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
 800499c:	e015      	b.n	80049ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800499e:	893b      	ldrh	r3, [r7, #8]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f883 	bl	8004abc <I2C_WaitOnTXISFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e012      	b.n	80049e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049c0:	893b      	ldrh	r3, [r7, #8]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2140      	movs	r1, #64	; 0x40
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f831 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	80002000 	.word	0x80002000

080049f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d103      	bne.n	8004a12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d007      	beq.n	8004a30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	619a      	str	r2, [r3, #24]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4c:	e022      	b.n	8004a94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d01e      	beq.n	8004a94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a56:	f7ff f9a5 	bl	8003da4 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d113      	bne.n	8004a94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	f043 0220 	orr.w	r2, r3, #32
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e00f      	b.n	8004ab4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d0cd      	beq.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ac8:	e02c      	b.n	8004b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f870 	bl	8004bb4 <I2C_IsErrorOccurred>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e02a      	b.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d01e      	beq.n	8004b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7ff f95d 	bl	8003da4 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d113      	bne.n	8004b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e007      	b.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d1cb      	bne.n	8004aca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b48:	e028      	b.n	8004b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f830 	bl	8004bb4 <I2C_IsErrorOccurred>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e026      	b.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5e:	f7ff f921 	bl	8003da4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d302      	bcc.n	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d113      	bne.n	8004b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e007      	b.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d1cf      	bne.n	8004b4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d068      	beq.n	8004cb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2210      	movs	r2, #16
 8004be6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004be8:	e049      	b.n	8004c7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d045      	beq.n	8004c7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7ff f8d7 	bl	8003da4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_IsErrorOccurred+0x54>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d13a      	bne.n	8004c7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2a:	d121      	bne.n	8004c70 <I2C_IsErrorOccurred+0xbc>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c32:	d01d      	beq.n	8004c70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d01a      	beq.n	8004c70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c4a:	f7ff f8ab 	bl	8003da4 <HAL_GetTick>
 8004c4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c50:	e00e      	b.n	8004c70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c52:	f7ff f8a7 	bl	8003da4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b19      	cmp	r3, #25
 8004c5e:	d907      	bls.n	8004c70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f043 0320 	orr.w	r3, r3, #32
 8004c66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004c6e:	e006      	b.n	8004c7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d1e9      	bne.n	8004c52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d003      	beq.n	8004c94 <I2C_IsErrorOccurred+0xe0>
 8004c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0aa      	beq.n	8004bea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f043 0308 	orr.w	r3, r3, #8
 8004cec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f043 0302 	orr.w	r3, r3, #2
 8004d0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01c      	beq.n	8004d62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff fe63 	bl	80049f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <I2C_IsErrorOccurred+0x1bc>)
 8004d3a:	400b      	ands	r3, r1
 8004d3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3728      	adds	r7, #40	; 0x28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	fe00e800 	.word	0xfe00e800

08004d74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	817b      	strh	r3, [r7, #10]
 8004d82:	4613      	mov	r3, r2
 8004d84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d86:	897b      	ldrh	r3, [r7, #10]
 8004d88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d8c:	7a7b      	ldrb	r3, [r7, #9]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004da2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	0d5b      	lsrs	r3, r3, #21
 8004dae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <I2C_TransferConfig+0x60>)
 8004db4:	430b      	orrs	r3, r1
 8004db6:	43db      	mvns	r3, r3
 8004db8:	ea02 0103 	and.w	r1, r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	03ff63ff 	.word	0x03ff63ff

08004dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d138      	bne.n	8004e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e032      	b.n	8004e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d139      	bne.n	8004ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e033      	b.n	8004efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2224      	movs	r2, #36	; 0x24
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ec0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e000      	b.n	8004efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	4b23      	ldr	r3, [pc, #140]	; (8004fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f2a:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f36:	f7fe ff35 	bl	8003da4 <HAL_GetTick>
 8004f3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f3c:	e009      	b.n	8004f52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f3e:	f7fe ff31 	bl	8003da4 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f4c:	d901      	bls.n	8004f52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e022      	b.n	8004f98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5e:	d1ee      	bne.n	8004f3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f60:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f6c:	f7fe ff1a 	bl	8003da4 <HAL_GetTick>
 8004f70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f72:	e009      	b.n	8004f88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f74:	f7fe ff16 	bl	8003da4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f82:	d901      	bls.n	8004f88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e007      	b.n	8004f98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f94:	d1ee      	bne.n	8004f74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000

08004fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e29b      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8087 	beq.w	80050da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fcc:	4b96      	ldr	r3, [pc, #600]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d00c      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd8:	4b93      	ldr	r3, [pc, #588]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 030c 	and.w	r3, r3, #12
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d112      	bne.n	800500a <HAL_RCC_OscConfig+0x62>
 8004fe4:	4b90      	ldr	r3, [pc, #576]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff0:	d10b      	bne.n	800500a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff2:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d06c      	beq.n	80050d8 <HAL_RCC_OscConfig+0x130>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d168      	bne.n	80050d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e275      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005012:	d106      	bne.n	8005022 <HAL_RCC_OscConfig+0x7a>
 8005014:	4b84      	ldr	r3, [pc, #528]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a83      	ldr	r2, [pc, #524]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800501a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e02e      	b.n	8005080 <HAL_RCC_OscConfig+0xd8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x9c>
 800502a:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a7e      	ldr	r2, [pc, #504]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b7c      	ldr	r3, [pc, #496]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7b      	ldr	r2, [pc, #492]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800503c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e01d      	b.n	8005080 <HAL_RCC_OscConfig+0xd8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0xc0>
 800504e:	4b76      	ldr	r3, [pc, #472]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a75      	ldr	r2, [pc, #468]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b73      	ldr	r3, [pc, #460]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a72      	ldr	r2, [pc, #456]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0xd8>
 8005068:	4b6f      	ldr	r3, [pc, #444]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6e      	ldr	r2, [pc, #440]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800506e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6b      	ldr	r2, [pc, #428]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800507a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d013      	beq.n	80050b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fe fe8c 	bl	8003da4 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005090:	f7fe fe88 	bl	8003da4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b64      	cmp	r3, #100	; 0x64
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e229      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	4b61      	ldr	r3, [pc, #388]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0xe8>
 80050ae:	e014      	b.n	80050da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fe fe78 	bl	8003da4 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fe fe74 	bl	8003da4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	; 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e215      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ca:	4b57      	ldr	r3, [pc, #348]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x110>
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d069      	beq.n	80051ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050e6:	4b50      	ldr	r3, [pc, #320]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f2:	4b4d      	ldr	r3, [pc, #308]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d11c      	bne.n	8005138 <HAL_RCC_OscConfig+0x190>
 80050fe:	4b4a      	ldr	r3, [pc, #296]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d116      	bne.n	8005138 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510a:	4b47      	ldr	r3, [pc, #284]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_RCC_OscConfig+0x17a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d001      	beq.n	8005122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e1e9      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005122:	4b41      	ldr	r3, [pc, #260]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	493d      	ldr	r1, [pc, #244]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005136:	e040      	b.n	80051ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d023      	beq.n	8005188 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005140:	4b39      	ldr	r3, [pc, #228]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a38      	ldr	r2, [pc, #224]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fe fe2a 	bl	8003da4 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005154:	f7fe fe26 	bl	8003da4 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e1c7      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005166:	4b30      	ldr	r3, [pc, #192]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005172:	4b2d      	ldr	r3, [pc, #180]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4929      	ldr	r1, [pc, #164]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
 8005186:	e018      	b.n	80051ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005188:	4b27      	ldr	r3, [pc, #156]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fe fe06 	bl	8003da4 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519c:	f7fe fe02 	bl	8003da4 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e1a3      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d038      	beq.n	8005238 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d019      	beq.n	8005202 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ce:	4b16      	ldr	r3, [pc, #88]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fe fde3 	bl	8003da4 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e2:	f7fe fddf 	bl	8003da4 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e180      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 80051f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x23a>
 8005200:	e01a      	b.n	8005238 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <HAL_RCC_OscConfig+0x280>)
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fe fdc9 	bl	8003da4 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005214:	e00a      	b.n	800522c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005216:	f7fe fdc5 	bl	8003da4 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d903      	bls.n	800522c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e166      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
 8005228:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	4b92      	ldr	r3, [pc, #584]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ee      	bne.n	8005216 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a4 	beq.w	800538e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005246:	4b8c      	ldr	r3, [pc, #560]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005252:	4b89      	ldr	r3, [pc, #548]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	4a88      	ldr	r2, [pc, #544]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525c:	6413      	str	r3, [r2, #64]	; 0x40
 800525e:	4b86      	ldr	r3, [pc, #536]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800526e:	4b83      	ldr	r3, [pc, #524]	; (800547c <HAL_RCC_OscConfig+0x4d4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d118      	bne.n	80052ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800527a:	4b80      	ldr	r3, [pc, #512]	; (800547c <HAL_RCC_OscConfig+0x4d4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a7f      	ldr	r2, [pc, #508]	; (800547c <HAL_RCC_OscConfig+0x4d4>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005286:	f7fe fd8d 	bl	8003da4 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fe fd89 	bl	8003da4 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b64      	cmp	r3, #100	; 0x64
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e12a      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a0:	4b76      	ldr	r3, [pc, #472]	; (800547c <HAL_RCC_OscConfig+0x4d4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x31a>
 80052b4:	4b70      	ldr	r3, [pc, #448]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	4a6f      	ldr	r2, [pc, #444]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6713      	str	r3, [r2, #112]	; 0x70
 80052c0:	e02d      	b.n	800531e <HAL_RCC_OscConfig+0x376>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x33c>
 80052ca:	4b6b      	ldr	r3, [pc, #428]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	4a6a      	ldr	r2, [pc, #424]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	6713      	str	r3, [r2, #112]	; 0x70
 80052d6:	4b68      	ldr	r3, [pc, #416]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	4a67      	ldr	r2, [pc, #412]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	6713      	str	r3, [r2, #112]	; 0x70
 80052e2:	e01c      	b.n	800531e <HAL_RCC_OscConfig+0x376>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	d10c      	bne.n	8005306 <HAL_RCC_OscConfig+0x35e>
 80052ec:	4b62      	ldr	r3, [pc, #392]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	4a61      	ldr	r2, [pc, #388]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052f2:	f043 0304 	orr.w	r3, r3, #4
 80052f6:	6713      	str	r3, [r2, #112]	; 0x70
 80052f8:	4b5f      	ldr	r3, [pc, #380]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a5e      	ldr	r2, [pc, #376]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
 8005304:	e00b      	b.n	800531e <HAL_RCC_OscConfig+0x376>
 8005306:	4b5c      	ldr	r3, [pc, #368]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	4a5b      	ldr	r2, [pc, #364]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6713      	str	r3, [r2, #112]	; 0x70
 8005312:	4b59      	ldr	r3, [pc, #356]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	4a58      	ldr	r2, [pc, #352]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d015      	beq.n	8005352 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005326:	f7fe fd3d 	bl	8003da4 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	e00a      	b.n	8005344 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fe fd39 	bl	8003da4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f241 3288 	movw	r2, #5000	; 0x1388
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0d8      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005344:	4b4c      	ldr	r3, [pc, #304]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ee      	beq.n	800532e <HAL_RCC_OscConfig+0x386>
 8005350:	e014      	b.n	800537c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fe fd27 	bl	8003da4 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005358:	e00a      	b.n	8005370 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535a:	f7fe fd23 	bl	8003da4 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	f241 3288 	movw	r2, #5000	; 0x1388
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e0c2      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005370:	4b41      	ldr	r3, [pc, #260]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1ee      	bne.n	800535a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d105      	bne.n	800538e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005382:	4b3d      	ldr	r3, [pc, #244]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	4a3c      	ldr	r2, [pc, #240]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80ae 	beq.w	80054f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005398:	4b37      	ldr	r3, [pc, #220]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d06d      	beq.n	8005480 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d14b      	bne.n	8005444 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a31      	ldr	r2, [pc, #196]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80053b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fe fcf4 	bl	8003da4 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fe fcf0 	bl	8003da4 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e091      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	019b      	lsls	r3, r3, #6
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	3b01      	subs	r3, #1
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	071b      	lsls	r3, r3, #28
 800540a:	491b      	ldr	r1, [pc, #108]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800541a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fe fcc2 	bl	8003da4 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fe fcbe 	bl	8003da4 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e05f      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x47c>
 8005442:	e057      	b.n	80054f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 800544a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fe fca8 	bl	8003da4 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005458:	f7fe fca4 	bl	8003da4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e045      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_RCC_OscConfig+0x4d0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x4b0>
 8005476:	e03d      	b.n	80054f4 <HAL_RCC_OscConfig+0x54c>
 8005478:	40023800 	.word	0x40023800
 800547c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005480:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <HAL_RCC_OscConfig+0x558>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d030      	beq.n	80054f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d129      	bne.n	80054f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d122      	bne.n	80054f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054b0:	4013      	ands	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d119      	bne.n	80054f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	3b01      	subs	r3, #1
 80054ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d10f      	bne.n	80054f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0d0      	b.n	80056be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b6a      	ldr	r3, [pc, #424]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d910      	bls.n	800554c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 020f 	bic.w	r2, r3, #15
 8005532:	4965      	ldr	r1, [pc, #404]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b63      	ldr	r3, [pc, #396]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0b8      	b.n	80056be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d020      	beq.n	800559a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005564:	4b59      	ldr	r3, [pc, #356]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4a58      	ldr	r2, [pc, #352]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 800556a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800556e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800557c:	4b53      	ldr	r3, [pc, #332]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4a52      	ldr	r2, [pc, #328]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005586:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005588:	4b50      	ldr	r3, [pc, #320]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	494d      	ldr	r1, [pc, #308]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d040      	beq.n	8005628 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d107      	bne.n	80055be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ae:	4b47      	ldr	r3, [pc, #284]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d115      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e07f      	b.n	80056be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e073      	b.n	80056be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e06b      	b.n	80056be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4b39      	ldr	r3, [pc, #228]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 0203 	bic.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4936      	ldr	r1, [pc, #216]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f8:	f7fe fbd4 	bl	8003da4 <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fe fbd0 	bl	8003da4 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	; 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e053      	b.n	80056be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 020c 	and.w	r2, r3, #12
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	429a      	cmp	r2, r3
 8005626:	d1eb      	bne.n	8005600 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b27      	ldr	r3, [pc, #156]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d210      	bcs.n	8005658 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 020f 	bic.w	r2, r3, #15
 800563e:	4922      	ldr	r1, [pc, #136]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e032      	b.n	80056be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4916      	ldr	r1, [pc, #88]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	490e      	ldr	r1, [pc, #56]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 8005692:	4313      	orrs	r3, r2
 8005694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005696:	f000 f821 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800569a:	4602      	mov	r2, r0
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	490a      	ldr	r1, [pc, #40]	; (80056d0 <HAL_RCC_ClockConfig+0x1cc>)
 80056a8:	5ccb      	ldrb	r3, [r1, r3]
 80056aa:	fa22 f303 	lsr.w	r3, r2, r3
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <HAL_RCC_ClockConfig+0x1d0>)
 80056b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056b2:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <HAL_RCC_ClockConfig+0x1d4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe fb30 	bl	8003d1c <HAL_InitTick>

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40023c00 	.word	0x40023c00
 80056cc:	40023800 	.word	0x40023800
 80056d0:	08009e60 	.word	0x08009e60
 80056d4:	20000004 	.word	0x20000004
 80056d8:	20000008 	.word	0x20000008

080056dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e0:	b094      	sub	sp, #80	; 0x50
 80056e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	647b      	str	r3, [r7, #68]	; 0x44
 80056e8:	2300      	movs	r3, #0
 80056ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ec:	2300      	movs	r3, #0
 80056ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f4:	4b79      	ldr	r3, [pc, #484]	; (80058dc <HAL_RCC_GetSysClockFreq+0x200>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d00d      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x40>
 8005700:	2b08      	cmp	r3, #8
 8005702:	f200 80e1 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x34>
 800570a:	2b04      	cmp	r3, #4
 800570c:	d003      	beq.n	8005716 <HAL_RCC_GetSysClockFreq+0x3a>
 800570e:	e0db      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005710:	4b73      	ldr	r3, [pc, #460]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005714:	e0db      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005716:	4b73      	ldr	r3, [pc, #460]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800571a:	e0d8      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800571c:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <HAL_RCC_GetSysClockFreq+0x200>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005726:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d063      	beq.n	80057fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005732:	4b6a      	ldr	r3, [pc, #424]	; (80058dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	099b      	lsrs	r3, r3, #6
 8005738:	2200      	movs	r2, #0
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
 800573c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005744:	633b      	str	r3, [r7, #48]	; 0x30
 8005746:	2300      	movs	r3, #0
 8005748:	637b      	str	r3, [r7, #52]	; 0x34
 800574a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800574e:	4622      	mov	r2, r4
 8005750:	462b      	mov	r3, r5
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	0159      	lsls	r1, r3, #5
 800575c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005760:	0150      	lsls	r0, r2, #5
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4621      	mov	r1, r4
 8005768:	1a51      	subs	r1, r2, r1
 800576a:	6139      	str	r1, [r7, #16]
 800576c:	4629      	mov	r1, r5
 800576e:	eb63 0301 	sbc.w	r3, r3, r1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005780:	4659      	mov	r1, fp
 8005782:	018b      	lsls	r3, r1, #6
 8005784:	4651      	mov	r1, sl
 8005786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800578a:	4651      	mov	r1, sl
 800578c:	018a      	lsls	r2, r1, #6
 800578e:	4651      	mov	r1, sl
 8005790:	ebb2 0801 	subs.w	r8, r2, r1
 8005794:	4659      	mov	r1, fp
 8005796:	eb63 0901 	sbc.w	r9, r3, r1
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ae:	4690      	mov	r8, r2
 80057b0:	4699      	mov	r9, r3
 80057b2:	4623      	mov	r3, r4
 80057b4:	eb18 0303 	adds.w	r3, r8, r3
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	462b      	mov	r3, r5
 80057bc:	eb49 0303 	adc.w	r3, r9, r3
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ce:	4629      	mov	r1, r5
 80057d0:	024b      	lsls	r3, r1, #9
 80057d2:	4621      	mov	r1, r4
 80057d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057d8:	4621      	mov	r1, r4
 80057da:	024a      	lsls	r2, r1, #9
 80057dc:	4610      	mov	r0, r2
 80057de:	4619      	mov	r1, r3
 80057e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e2:	2200      	movs	r2, #0
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057ec:	f7fa fd80 	bl	80002f0 <__aeabi_uldivmod>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4613      	mov	r3, r2
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	e058      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fa:	4b38      	ldr	r3, [pc, #224]	; (80058dc <HAL_RCC_GetSysClockFreq+0x200>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	099b      	lsrs	r3, r3, #6
 8005800:	2200      	movs	r2, #0
 8005802:	4618      	mov	r0, r3
 8005804:	4611      	mov	r1, r2
 8005806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	2300      	movs	r3, #0
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
 8005810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	0159      	lsls	r1, r3, #5
 8005822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005826:	0150      	lsls	r0, r2, #5
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4641      	mov	r1, r8
 800582e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005832:	4649      	mov	r1, r9
 8005834:	eb63 0b01 	sbc.w	fp, r3, r1
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800584c:	ebb2 040a 	subs.w	r4, r2, sl
 8005850:	eb63 050b 	sbc.w	r5, r3, fp
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	00eb      	lsls	r3, r5, #3
 800585e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005862:	00e2      	lsls	r2, r4, #3
 8005864:	4614      	mov	r4, r2
 8005866:	461d      	mov	r5, r3
 8005868:	4643      	mov	r3, r8
 800586a:	18e3      	adds	r3, r4, r3
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	464b      	mov	r3, r9
 8005870:	eb45 0303 	adc.w	r3, r5, r3
 8005874:	607b      	str	r3, [r7, #4]
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005882:	4629      	mov	r1, r5
 8005884:	028b      	lsls	r3, r1, #10
 8005886:	4621      	mov	r1, r4
 8005888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800588c:	4621      	mov	r1, r4
 800588e:	028a      	lsls	r2, r1, #10
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005896:	2200      	movs	r2, #0
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	61fa      	str	r2, [r7, #28]
 800589c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a0:	f7fa fd26 	bl	80002f0 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4613      	mov	r3, r2
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_GetSysClockFreq+0x200>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	3301      	adds	r3, #1
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80058bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058c6:	e002      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3750      	adds	r7, #80	; 0x50
 80058d4:	46bd      	mov	sp, r7
 80058d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
 80058e0:	00f42400 	.word	0x00f42400
 80058e4:	007a1200 	.word	0x007a1200

080058e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000004 	.word	0x20000004

08005900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005904:	f7ff fff0 	bl	80058e8 <HAL_RCC_GetHCLKFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	0a9b      	lsrs	r3, r3, #10
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	4903      	ldr	r1, [pc, #12]	; (8005924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800591c:	4618      	mov	r0, r3
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40023800 	.word	0x40023800
 8005924:	08009e70 	.word	0x08009e70

08005928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800592c:	f7ff ffdc 	bl	80058e8 <HAL_RCC_GetHCLKFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	0b5b      	lsrs	r3, r3, #13
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	4903      	ldr	r1, [pc, #12]	; (800594c <HAL_RCC_GetPCLK2Freq+0x24>)
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005944:	4618      	mov	r0, r3
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40023800 	.word	0x40023800
 800594c:	08009e70 	.word	0x08009e70

08005950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d012      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005978:	4b69      	ldr	r3, [pc, #420]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4a68      	ldr	r2, [pc, #416]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005982:	6093      	str	r3, [r2, #8]
 8005984:	4b66      	ldr	r3, [pc, #408]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	4964      	ldr	r1, [pc, #400]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598e:	4313      	orrs	r3, r2
 8005990:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059aa:	4b5d      	ldr	r3, [pc, #372]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	4959      	ldr	r1, [pc, #356]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c8:	d101      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80059ca:	2301      	movs	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d017      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059e6:	4b4e      	ldr	r3, [pc, #312]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	494a      	ldr	r1, [pc, #296]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a04:	d101      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005a06:	2301      	movs	r3, #1
 8005a08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005a22:	2301      	movs	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 808b 	beq.w	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	4a39      	ldr	r2, [pc, #228]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a40:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a4c:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a34      	ldr	r2, [pc, #208]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a58:	f7fe f9a4 	bl	8003da4 <HAL_GetTick>
 8005a5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a60:	f7fe f9a0 	bl	8003da4 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e38f      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a72:	4b2c      	ldr	r3, [pc, #176]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a7e:	4b28      	ldr	r3, [pc, #160]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d035      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d02e      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a9c:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a1d      	ldr	r2, [pc, #116]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ac4:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d114      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fe f968 	bl	8003da4 <HAL_GetTick>
 8005ad4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad6:	e00a      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad8:	f7fe f964 	bl	8003da4 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e351      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0ee      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b06:	d111      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b16:	400b      	ands	r3, r1
 8005b18:	4901      	ldr	r1, [pc, #4]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
 8005b1e:	e00b      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40007000 	.word	0x40007000
 8005b28:	0ffffcff 	.word	0x0ffffcff
 8005b2c:	4bac      	ldr	r3, [pc, #688]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	4aab      	ldr	r2, [pc, #684]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b36:	6093      	str	r3, [r2, #8]
 8005b38:	4ba9      	ldr	r3, [pc, #676]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b44:	49a6      	ldr	r1, [pc, #664]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b56:	4ba2      	ldr	r3, [pc, #648]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	4aa0      	ldr	r2, [pc, #640]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b66:	4b9e      	ldr	r3, [pc, #632]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	499b      	ldr	r1, [pc, #620]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b84:	4b96      	ldr	r3, [pc, #600]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b92:	4993      	ldr	r1, [pc, #588]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ba6:	4b8e      	ldr	r3, [pc, #568]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb4:	498a      	ldr	r1, [pc, #552]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bc8:	4b85      	ldr	r3, [pc, #532]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd6:	4982      	ldr	r1, [pc, #520]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bea:	4b7d      	ldr	r3, [pc, #500]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4979      	ldr	r1, [pc, #484]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c0c:	4b74      	ldr	r3, [pc, #464]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	f023 0203 	bic.w	r2, r3, #3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	4971      	ldr	r1, [pc, #452]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c2e:	4b6c      	ldr	r3, [pc, #432]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c34:	f023 020c 	bic.w	r2, r3, #12
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3c:	4968      	ldr	r1, [pc, #416]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c50:	4b63      	ldr	r3, [pc, #396]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	4960      	ldr	r1, [pc, #384]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c72:	4b5b      	ldr	r3, [pc, #364]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	4957      	ldr	r1, [pc, #348]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c94:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	494f      	ldr	r1, [pc, #316]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005cb6:	4b4a      	ldr	r3, [pc, #296]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc4:	4946      	ldr	r1, [pc, #280]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005cd8:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce6:	493e      	ldr	r1, [pc, #248]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005cfa:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	4935      	ldr	r1, [pc, #212]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d1c:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d2a:	492d      	ldr	r1, [pc, #180]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d011      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d44:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d4c:	4924      	ldr	r1, [pc, #144]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8c:	4914      	ldr	r1, [pc, #80]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db0:	490b      	ldr	r1, [pc, #44]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00f      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd4:	4902      	ldr	r1, [pc, #8]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ddc:	e002      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005df0:	4b8a      	ldr	r3, [pc, #552]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	4986      	ldr	r1, [pc, #536]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e14:	4b81      	ldr	r3, [pc, #516]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e24:	497d      	ldr	r1, [pc, #500]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d006      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80d6 	beq.w	8005fec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e40:	4b76      	ldr	r3, [pc, #472]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a75      	ldr	r2, [pc, #468]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fd ffaa 	bl	8003da4 <HAL_GetTick>
 8005e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e54:	f7fd ffa6 	bl	8003da4 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e195      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e66:	4b6d      	ldr	r3, [pc, #436]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d021      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11d      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e86:	4b65      	ldr	r3, [pc, #404]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e94:	4b61      	ldr	r3, [pc, #388]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e9a:	0e1b      	lsrs	r3, r3, #24
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	019a      	lsls	r2, r3, #6
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	041b      	lsls	r3, r3, #16
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	071b      	lsls	r3, r3, #28
 8005eba:	4958      	ldr	r1, [pc, #352]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02e      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eec:	d129      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005eee:	4b4b      	ldr	r3, [pc, #300]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005efc:	4b47      	ldr	r3, [pc, #284]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f02:	0f1b      	lsrs	r3, r3, #28
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	019a      	lsls	r2, r3, #6
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	071b      	lsls	r3, r3, #28
 8005f22:	493e      	ldr	r1, [pc, #248]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f2a:	4b3c      	ldr	r3, [pc, #240]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f30:	f023 021f 	bic.w	r2, r3, #31
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	4938      	ldr	r1, [pc, #224]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01d      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f4e:	4b33      	ldr	r3, [pc, #204]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f54:	0e1b      	lsrs	r3, r3, #24
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f5c:	4b2f      	ldr	r3, [pc, #188]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	0f1b      	lsrs	r3, r3, #28
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	019a      	lsls	r2, r3, #6
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	431a      	orrs	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	061b      	lsls	r3, r3, #24
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	071b      	lsls	r3, r3, #28
 8005f82:	4926      	ldr	r1, [pc, #152]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d011      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	019a      	lsls	r2, r3, #6
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	071b      	lsls	r3, r3, #28
 8005fb2:	491a      	ldr	r1, [pc, #104]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fba:	4b18      	ldr	r3, [pc, #96]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a17      	ldr	r2, [pc, #92]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc6:	f7fd feed 	bl	8003da4 <HAL_GetTick>
 8005fca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fce:	f7fd fee9 	bl	8003da4 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b64      	cmp	r3, #100	; 0x64
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e0d8      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f040 80ce 	bne.w	8006190 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a08      	ldr	r2, [pc, #32]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006000:	f7fd fed0 	bl	8003da4 <HAL_GetTick>
 8006004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006006:	e00b      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006008:	f7fd fecc 	bl	8003da4 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	; 0x64
 8006014:	d904      	bls.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e0bb      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800601a:	bf00      	nop
 800601c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800602c:	d0ec      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800604a:	2b00      	cmp	r3, #0
 800604c:	d02e      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d12a      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006056:	4b51      	ldr	r3, [pc, #324]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006064:	4b4d      	ldr	r3, [pc, #308]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606a:	0f1b      	lsrs	r3, r3, #28
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	019a      	lsls	r2, r3, #6
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	431a      	orrs	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	071b      	lsls	r3, r3, #28
 800608a:	4944      	ldr	r1, [pc, #272]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006092:	4b42      	ldr	r3, [pc, #264]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006098:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	493d      	ldr	r1, [pc, #244]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d022      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c0:	d11d      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060c2:	4b36      	ldr	r3, [pc, #216]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	0e1b      	lsrs	r3, r3, #24
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060d0:	4b32      	ldr	r3, [pc, #200]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	0f1b      	lsrs	r3, r3, #28
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	019a      	lsls	r2, r3, #6
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	431a      	orrs	r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	061b      	lsls	r3, r3, #24
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	071b      	lsls	r3, r3, #28
 80060f6:	4929      	ldr	r1, [pc, #164]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d028      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800610a:	4b24      	ldr	r3, [pc, #144]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	0e1b      	lsrs	r3, r3, #24
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006118:	4b20      	ldr	r3, [pc, #128]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	0c1b      	lsrs	r3, r3, #16
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	019a      	lsls	r2, r3, #6
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	431a      	orrs	r2, r3
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	061b      	lsls	r3, r3, #24
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	071b      	lsls	r3, r3, #28
 800613e:	4917      	ldr	r1, [pc, #92]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006146:	4b15      	ldr	r3, [pc, #84]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800614c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	4911      	ldr	r1, [pc, #68]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800615c:	4b0f      	ldr	r3, [pc, #60]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0e      	ldr	r2, [pc, #56]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006168:	f7fd fe1c 	bl	8003da4 <HAL_GetTick>
 800616c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006170:	f7fd fe18 	bl	8003da4 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b64      	cmp	r3, #100	; 0x64
 800617c:	d901      	bls.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e007      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006182:	4b06      	ldr	r3, [pc, #24]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800618a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618e:	d1ef      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40023800 	.word	0x40023800

080061a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e040      	b.n	8006234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fd fd14 	bl	8003bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8b0 	bl	8006344 <UART_SetConfig>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e022      	b.n	8006234 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fb08 	bl	800680c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800620a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800621a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fb8f 	bl	8006950 <UART_CheckIdleState>
 8006232:	4603      	mov	r3, r0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	; 0x28
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006250:	2b20      	cmp	r3, #32
 8006252:	d171      	bne.n	8006338 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_UART_Transmit+0x24>
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e06a      	b.n	800633a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2221      	movs	r2, #33	; 0x21
 8006270:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006272:	f7fd fd97 	bl	8003da4 <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	88fa      	ldrh	r2, [r7, #6]
 8006284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006290:	d108      	bne.n	80062a4 <HAL_UART_Transmit+0x68>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e003      	b.n	80062ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062ac:	e02c      	b.n	8006308 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2200      	movs	r2, #0
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fb96 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e038      	b.n	800633a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	3302      	adds	r3, #2
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	e007      	b.n	80062f6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1cc      	bne.n	80062ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2200      	movs	r2, #0
 800631c:	2140      	movs	r1, #64	; 0x40
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 fb63 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e005      	b.n	800633a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	e000      	b.n	800633a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4ba6      	ldr	r3, [pc, #664]	; (8006608 <UART_SetConfig+0x2c4>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	6979      	ldr	r1, [r7, #20]
 8006378:	430b      	orrs	r3, r1
 800637a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a94      	ldr	r2, [pc, #592]	; (800660c <UART_SetConfig+0x2c8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d120      	bne.n	8006402 <UART_SetConfig+0xbe>
 80063c0:	4b93      	ldr	r3, [pc, #588]	; (8006610 <UART_SetConfig+0x2cc>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d816      	bhi.n	80063fc <UART_SetConfig+0xb8>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <UART_SetConfig+0x90>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063eb 	.word	0x080063eb
 80063e0:	080063f7 	.word	0x080063f7
 80063e4:	2301      	movs	r3, #1
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e150      	b.n	800668c <UART_SetConfig+0x348>
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e14d      	b.n	800668c <UART_SetConfig+0x348>
 80063f0:	2304      	movs	r3, #4
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e14a      	b.n	800668c <UART_SetConfig+0x348>
 80063f6:	2308      	movs	r3, #8
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e147      	b.n	800668c <UART_SetConfig+0x348>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e144      	b.n	800668c <UART_SetConfig+0x348>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a83      	ldr	r2, [pc, #524]	; (8006614 <UART_SetConfig+0x2d0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d132      	bne.n	8006472 <UART_SetConfig+0x12e>
 800640c:	4b80      	ldr	r3, [pc, #512]	; (8006610 <UART_SetConfig+0x2cc>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b0c      	cmp	r3, #12
 8006418:	d828      	bhi.n	800646c <UART_SetConfig+0x128>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <UART_SetConfig+0xdc>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006455 	.word	0x08006455
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800646d 	.word	0x0800646d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	08006461 	.word	0x08006461
 8006434:	0800646d 	.word	0x0800646d
 8006438:	0800646d 	.word	0x0800646d
 800643c:	0800646d 	.word	0x0800646d
 8006440:	0800645b 	.word	0x0800645b
 8006444:	0800646d 	.word	0x0800646d
 8006448:	0800646d 	.word	0x0800646d
 800644c:	0800646d 	.word	0x0800646d
 8006450:	08006467 	.word	0x08006467
 8006454:	2300      	movs	r3, #0
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e118      	b.n	800668c <UART_SetConfig+0x348>
 800645a:	2302      	movs	r3, #2
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e115      	b.n	800668c <UART_SetConfig+0x348>
 8006460:	2304      	movs	r3, #4
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e112      	b.n	800668c <UART_SetConfig+0x348>
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e10f      	b.n	800668c <UART_SetConfig+0x348>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e10c      	b.n	800668c <UART_SetConfig+0x348>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a68      	ldr	r2, [pc, #416]	; (8006618 <UART_SetConfig+0x2d4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d120      	bne.n	80064be <UART_SetConfig+0x17a>
 800647c:	4b64      	ldr	r3, [pc, #400]	; (8006610 <UART_SetConfig+0x2cc>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006486:	2b30      	cmp	r3, #48	; 0x30
 8006488:	d013      	beq.n	80064b2 <UART_SetConfig+0x16e>
 800648a:	2b30      	cmp	r3, #48	; 0x30
 800648c:	d814      	bhi.n	80064b8 <UART_SetConfig+0x174>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d009      	beq.n	80064a6 <UART_SetConfig+0x162>
 8006492:	2b20      	cmp	r3, #32
 8006494:	d810      	bhi.n	80064b8 <UART_SetConfig+0x174>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <UART_SetConfig+0x15c>
 800649a:	2b10      	cmp	r3, #16
 800649c:	d006      	beq.n	80064ac <UART_SetConfig+0x168>
 800649e:	e00b      	b.n	80064b8 <UART_SetConfig+0x174>
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e0f2      	b.n	800668c <UART_SetConfig+0x348>
 80064a6:	2302      	movs	r3, #2
 80064a8:	77fb      	strb	r3, [r7, #31]
 80064aa:	e0ef      	b.n	800668c <UART_SetConfig+0x348>
 80064ac:	2304      	movs	r3, #4
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e0ec      	b.n	800668c <UART_SetConfig+0x348>
 80064b2:	2308      	movs	r3, #8
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e0e9      	b.n	800668c <UART_SetConfig+0x348>
 80064b8:	2310      	movs	r3, #16
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e0e6      	b.n	800668c <UART_SetConfig+0x348>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a56      	ldr	r2, [pc, #344]	; (800661c <UART_SetConfig+0x2d8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d120      	bne.n	800650a <UART_SetConfig+0x1c6>
 80064c8:	4b51      	ldr	r3, [pc, #324]	; (8006610 <UART_SetConfig+0x2cc>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064d2:	2bc0      	cmp	r3, #192	; 0xc0
 80064d4:	d013      	beq.n	80064fe <UART_SetConfig+0x1ba>
 80064d6:	2bc0      	cmp	r3, #192	; 0xc0
 80064d8:	d814      	bhi.n	8006504 <UART_SetConfig+0x1c0>
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d009      	beq.n	80064f2 <UART_SetConfig+0x1ae>
 80064de:	2b80      	cmp	r3, #128	; 0x80
 80064e0:	d810      	bhi.n	8006504 <UART_SetConfig+0x1c0>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <UART_SetConfig+0x1a8>
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d006      	beq.n	80064f8 <UART_SetConfig+0x1b4>
 80064ea:	e00b      	b.n	8006504 <UART_SetConfig+0x1c0>
 80064ec:	2300      	movs	r3, #0
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e0cc      	b.n	800668c <UART_SetConfig+0x348>
 80064f2:	2302      	movs	r3, #2
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e0c9      	b.n	800668c <UART_SetConfig+0x348>
 80064f8:	2304      	movs	r3, #4
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e0c6      	b.n	800668c <UART_SetConfig+0x348>
 80064fe:	2308      	movs	r3, #8
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e0c3      	b.n	800668c <UART_SetConfig+0x348>
 8006504:	2310      	movs	r3, #16
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e0c0      	b.n	800668c <UART_SetConfig+0x348>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a44      	ldr	r2, [pc, #272]	; (8006620 <UART_SetConfig+0x2dc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d125      	bne.n	8006560 <UART_SetConfig+0x21c>
 8006514:	4b3e      	ldr	r3, [pc, #248]	; (8006610 <UART_SetConfig+0x2cc>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006522:	d017      	beq.n	8006554 <UART_SetConfig+0x210>
 8006524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006528:	d817      	bhi.n	800655a <UART_SetConfig+0x216>
 800652a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652e:	d00b      	beq.n	8006548 <UART_SetConfig+0x204>
 8006530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006534:	d811      	bhi.n	800655a <UART_SetConfig+0x216>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <UART_SetConfig+0x1fe>
 800653a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653e:	d006      	beq.n	800654e <UART_SetConfig+0x20a>
 8006540:	e00b      	b.n	800655a <UART_SetConfig+0x216>
 8006542:	2300      	movs	r3, #0
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e0a1      	b.n	800668c <UART_SetConfig+0x348>
 8006548:	2302      	movs	r3, #2
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e09e      	b.n	800668c <UART_SetConfig+0x348>
 800654e:	2304      	movs	r3, #4
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e09b      	b.n	800668c <UART_SetConfig+0x348>
 8006554:	2308      	movs	r3, #8
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e098      	b.n	800668c <UART_SetConfig+0x348>
 800655a:	2310      	movs	r3, #16
 800655c:	77fb      	strb	r3, [r7, #31]
 800655e:	e095      	b.n	800668c <UART_SetConfig+0x348>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2f      	ldr	r2, [pc, #188]	; (8006624 <UART_SetConfig+0x2e0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d125      	bne.n	80065b6 <UART_SetConfig+0x272>
 800656a:	4b29      	ldr	r3, [pc, #164]	; (8006610 <UART_SetConfig+0x2cc>)
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006578:	d017      	beq.n	80065aa <UART_SetConfig+0x266>
 800657a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800657e:	d817      	bhi.n	80065b0 <UART_SetConfig+0x26c>
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006584:	d00b      	beq.n	800659e <UART_SetConfig+0x25a>
 8006586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800658a:	d811      	bhi.n	80065b0 <UART_SetConfig+0x26c>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <UART_SetConfig+0x254>
 8006590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006594:	d006      	beq.n	80065a4 <UART_SetConfig+0x260>
 8006596:	e00b      	b.n	80065b0 <UART_SetConfig+0x26c>
 8006598:	2301      	movs	r3, #1
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e076      	b.n	800668c <UART_SetConfig+0x348>
 800659e:	2302      	movs	r3, #2
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e073      	b.n	800668c <UART_SetConfig+0x348>
 80065a4:	2304      	movs	r3, #4
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e070      	b.n	800668c <UART_SetConfig+0x348>
 80065aa:	2308      	movs	r3, #8
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e06d      	b.n	800668c <UART_SetConfig+0x348>
 80065b0:	2310      	movs	r3, #16
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e06a      	b.n	800668c <UART_SetConfig+0x348>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <UART_SetConfig+0x2e4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d138      	bne.n	8006632 <UART_SetConfig+0x2ee>
 80065c0:	4b13      	ldr	r3, [pc, #76]	; (8006610 <UART_SetConfig+0x2cc>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ce:	d017      	beq.n	8006600 <UART_SetConfig+0x2bc>
 80065d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065d4:	d82a      	bhi.n	800662c <UART_SetConfig+0x2e8>
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065da:	d00b      	beq.n	80065f4 <UART_SetConfig+0x2b0>
 80065dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e0:	d824      	bhi.n	800662c <UART_SetConfig+0x2e8>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <UART_SetConfig+0x2aa>
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ea:	d006      	beq.n	80065fa <UART_SetConfig+0x2b6>
 80065ec:	e01e      	b.n	800662c <UART_SetConfig+0x2e8>
 80065ee:	2300      	movs	r3, #0
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e04b      	b.n	800668c <UART_SetConfig+0x348>
 80065f4:	2302      	movs	r3, #2
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e048      	b.n	800668c <UART_SetConfig+0x348>
 80065fa:	2304      	movs	r3, #4
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e045      	b.n	800668c <UART_SetConfig+0x348>
 8006600:	2308      	movs	r3, #8
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e042      	b.n	800668c <UART_SetConfig+0x348>
 8006606:	bf00      	nop
 8006608:	efff69f3 	.word	0xefff69f3
 800660c:	40011000 	.word	0x40011000
 8006610:	40023800 	.word	0x40023800
 8006614:	40004400 	.word	0x40004400
 8006618:	40004800 	.word	0x40004800
 800661c:	40004c00 	.word	0x40004c00
 8006620:	40005000 	.word	0x40005000
 8006624:	40011400 	.word	0x40011400
 8006628:	40007800 	.word	0x40007800
 800662c:	2310      	movs	r3, #16
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e02c      	b.n	800668c <UART_SetConfig+0x348>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a72      	ldr	r2, [pc, #456]	; (8006800 <UART_SetConfig+0x4bc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d125      	bne.n	8006688 <UART_SetConfig+0x344>
 800663c:	4b71      	ldr	r3, [pc, #452]	; (8006804 <UART_SetConfig+0x4c0>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006646:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800664a:	d017      	beq.n	800667c <UART_SetConfig+0x338>
 800664c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006650:	d817      	bhi.n	8006682 <UART_SetConfig+0x33e>
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006656:	d00b      	beq.n	8006670 <UART_SetConfig+0x32c>
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665c:	d811      	bhi.n	8006682 <UART_SetConfig+0x33e>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <UART_SetConfig+0x326>
 8006662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006666:	d006      	beq.n	8006676 <UART_SetConfig+0x332>
 8006668:	e00b      	b.n	8006682 <UART_SetConfig+0x33e>
 800666a:	2300      	movs	r3, #0
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e00d      	b.n	800668c <UART_SetConfig+0x348>
 8006670:	2302      	movs	r3, #2
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e00a      	b.n	800668c <UART_SetConfig+0x348>
 8006676:	2304      	movs	r3, #4
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e007      	b.n	800668c <UART_SetConfig+0x348>
 800667c:	2308      	movs	r3, #8
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e004      	b.n	800668c <UART_SetConfig+0x348>
 8006682:	2310      	movs	r3, #16
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e001      	b.n	800668c <UART_SetConfig+0x348>
 8006688:	2310      	movs	r3, #16
 800668a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006694:	d15b      	bne.n	800674e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006696:	7ffb      	ldrb	r3, [r7, #31]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d828      	bhi.n	80066ee <UART_SetConfig+0x3aa>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x360>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066ef 	.word	0x080066ef
 80066b4:	080066df 	.word	0x080066df
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	080066ef 	.word	0x080066ef
 80066c4:	080066e7 	.word	0x080066e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7ff f91a 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
 80066cc:	61b8      	str	r0, [r7, #24]
        break;
 80066ce:	e013      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7ff f92a 	bl	8005928 <HAL_RCC_GetPCLK2Freq>
 80066d4:	61b8      	str	r0, [r7, #24]
        break;
 80066d6:	e00f      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d8:	4b4b      	ldr	r3, [pc, #300]	; (8006808 <UART_SetConfig+0x4c4>)
 80066da:	61bb      	str	r3, [r7, #24]
        break;
 80066dc:	e00c      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066de:	f7fe fffd 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 80066e2:	61b8      	str	r0, [r7, #24]
        break;
 80066e4:	e008      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ea:	61bb      	str	r3, [r7, #24]
        break;
 80066ec:	e004      	b.n	80066f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77bb      	strb	r3, [r7, #30]
        break;
 80066f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d074      	beq.n	80067e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	005a      	lsls	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	441a      	add	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d916      	bls.n	8006748 <UART_SetConfig+0x404>
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006720:	d212      	bcs.n	8006748 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f023 030f 	bic.w	r3, r3, #15
 800672a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	b29b      	uxth	r3, r3
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	b29a      	uxth	r2, r3
 8006738:	89fb      	ldrh	r3, [r7, #14]
 800673a:	4313      	orrs	r3, r2
 800673c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	89fa      	ldrh	r2, [r7, #14]
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	e04f      	b.n	80067e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	77bb      	strb	r3, [r7, #30]
 800674c:	e04c      	b.n	80067e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800674e:	7ffb      	ldrb	r3, [r7, #31]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d828      	bhi.n	80067a6 <UART_SetConfig+0x462>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x418>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006781 	.word	0x08006781
 8006760:	08006789 	.word	0x08006789
 8006764:	08006791 	.word	0x08006791
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006797 	.word	0x08006797
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067a7 	.word	0x080067a7
 8006778:	080067a7 	.word	0x080067a7
 800677c:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7ff f8be 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
 8006784:	61b8      	str	r0, [r7, #24]
        break;
 8006786:	e013      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7ff f8ce 	bl	8005928 <HAL_RCC_GetPCLK2Freq>
 800678c:	61b8      	str	r0, [r7, #24]
        break;
 800678e:	e00f      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <UART_SetConfig+0x4c4>)
 8006792:	61bb      	str	r3, [r7, #24]
        break;
 8006794:	e00c      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fe ffa1 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800679a:	61b8      	str	r0, [r7, #24]
        break;
 800679c:	e008      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	61bb      	str	r3, [r7, #24]
        break;
 80067a4:	e004      	b.n	80067b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	77bb      	strb	r3, [r7, #30]
        break;
 80067ae:	bf00      	nop
    }

    if (pclk != 0U)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085a      	lsrs	r2, r3, #1
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	441a      	add	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b0f      	cmp	r3, #15
 80067ce:	d909      	bls.n	80067e4 <UART_SetConfig+0x4a0>
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d6:	d205      	bcs.n	80067e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	e001      	b.n	80067e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40007c00 	.word	0x40007c00
 8006804:	40023800 	.word	0x40023800
 8006808:	00f42400 	.word	0x00f42400

0800680c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01a      	beq.n	8006922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690a:	d10a      	bne.n	8006922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af02      	add	r7, sp, #8
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006960:	f7fd fa20 	bl	8003da4 <HAL_GetTick>
 8006964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b08      	cmp	r3, #8
 8006972:	d10e      	bne.n	8006992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f831 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e027      	b.n	80069e2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b04      	cmp	r3, #4
 800699e:	d10e      	bne.n	80069be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f81b 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e011      	b.n	80069e2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b09c      	sub	sp, #112	; 0x70
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	4613      	mov	r3, r2
 80069f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	e0a7      	b.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	f000 80a3 	beq.w	8006b4c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fd f9cd 	bl	8003da4 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d13f      	bne.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a30:	667b      	str	r3, [r7, #100]	; 0x64
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e6      	bne.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	663b      	str	r3, [r7, #96]	; 0x60
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e5      	bne.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e068      	b.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d050      	beq.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab8:	d148      	bne.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ac2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e6      	bne.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3308      	adds	r3, #8
 8006afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	613b      	str	r3, [r7, #16]
   return(result);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b16:	623a      	str	r2, [r7, #32]
 8006b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	69f9      	ldr	r1, [r7, #28]
 8006b1c:	6a3a      	ldr	r2, [r7, #32]
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e5      	bne.n	8006af6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e010      	b.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69da      	ldr	r2, [r3, #28]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4013      	ands	r3, r2
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2301      	moveq	r3, #1
 8006b5e:	2300      	movne	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	f43f af48 	beq.w	80069fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3770      	adds	r7, #112	; 0x70
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <__cvt>:
 8006b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b78:	ed2d 8b02 	vpush	{d8}
 8006b7c:	eeb0 8b40 	vmov.f64	d8, d0
 8006b80:	b085      	sub	sp, #20
 8006b82:	4617      	mov	r7, r2
 8006b84:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006b86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b88:	ee18 2a90 	vmov	r2, s17
 8006b8c:	f025 0520 	bic.w	r5, r5, #32
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	bfb6      	itet	lt
 8006b94:	222d      	movlt	r2, #45	; 0x2d
 8006b96:	2200      	movge	r2, #0
 8006b98:	eeb1 8b40 	vneglt.f64	d8, d0
 8006b9c:	2d46      	cmp	r5, #70	; 0x46
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	d004      	beq.n	8006bae <__cvt+0x38>
 8006ba4:	2d45      	cmp	r5, #69	; 0x45
 8006ba6:	d100      	bne.n	8006baa <__cvt+0x34>
 8006ba8:	3401      	adds	r4, #1
 8006baa:	2102      	movs	r1, #2
 8006bac:	e000      	b.n	8006bb0 <__cvt+0x3a>
 8006bae:	2103      	movs	r1, #3
 8006bb0:	ab03      	add	r3, sp, #12
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	ab02      	add	r3, sp, #8
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4622      	mov	r2, r4
 8006bba:	4633      	mov	r3, r6
 8006bbc:	eeb0 0b48 	vmov.f64	d0, d8
 8006bc0:	f000 fe6a 	bl	8007898 <_dtoa_r>
 8006bc4:	2d47      	cmp	r5, #71	; 0x47
 8006bc6:	d101      	bne.n	8006bcc <__cvt+0x56>
 8006bc8:	07fb      	lsls	r3, r7, #31
 8006bca:	d51a      	bpl.n	8006c02 <__cvt+0x8c>
 8006bcc:	2d46      	cmp	r5, #70	; 0x46
 8006bce:	eb00 0204 	add.w	r2, r0, r4
 8006bd2:	d10c      	bne.n	8006bee <__cvt+0x78>
 8006bd4:	7803      	ldrb	r3, [r0, #0]
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d107      	bne.n	8006bea <__cvt+0x74>
 8006bda:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be2:	bf1c      	itt	ne
 8006be4:	f1c4 0401 	rsbne	r4, r4, #1
 8006be8:	6034      	strne	r4, [r6, #0]
 8006bea:	6833      	ldr	r3, [r6, #0]
 8006bec:	441a      	add	r2, r3
 8006bee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	bf08      	it	eq
 8006bf8:	9203      	streq	r2, [sp, #12]
 8006bfa:	2130      	movs	r1, #48	; 0x30
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d307      	bcc.n	8006c12 <__cvt+0x9c>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c06:	1a1b      	subs	r3, r3, r0
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	b005      	add	sp, #20
 8006c0c:	ecbd 8b02 	vpop	{d8}
 8006c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c12:	1c5c      	adds	r4, r3, #1
 8006c14:	9403      	str	r4, [sp, #12]
 8006c16:	7019      	strb	r1, [r3, #0]
 8006c18:	e7f0      	b.n	8006bfc <__cvt+0x86>

08006c1a <__exponent>:
 8006c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	bfb8      	it	lt
 8006c22:	4249      	neglt	r1, r1
 8006c24:	f803 2b02 	strb.w	r2, [r3], #2
 8006c28:	bfb4      	ite	lt
 8006c2a:	222d      	movlt	r2, #45	; 0x2d
 8006c2c:	222b      	movge	r2, #43	; 0x2b
 8006c2e:	2909      	cmp	r1, #9
 8006c30:	7042      	strb	r2, [r0, #1]
 8006c32:	dd2a      	ble.n	8006c8a <__exponent+0x70>
 8006c34:	f10d 0207 	add.w	r2, sp, #7
 8006c38:	4617      	mov	r7, r2
 8006c3a:	260a      	movs	r6, #10
 8006c3c:	4694      	mov	ip, r2
 8006c3e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c42:	fb06 1415 	mls	r4, r6, r5, r1
 8006c46:	3430      	adds	r4, #48	; 0x30
 8006c48:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	2c63      	cmp	r4, #99	; 0x63
 8006c50:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c54:	4629      	mov	r1, r5
 8006c56:	dcf1      	bgt.n	8006c3c <__exponent+0x22>
 8006c58:	3130      	adds	r1, #48	; 0x30
 8006c5a:	f1ac 0402 	sub.w	r4, ip, #2
 8006c5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c62:	1c41      	adds	r1, r0, #1
 8006c64:	4622      	mov	r2, r4
 8006c66:	42ba      	cmp	r2, r7
 8006c68:	d30a      	bcc.n	8006c80 <__exponent+0x66>
 8006c6a:	f10d 0209 	add.w	r2, sp, #9
 8006c6e:	eba2 020c 	sub.w	r2, r2, ip
 8006c72:	42bc      	cmp	r4, r7
 8006c74:	bf88      	it	hi
 8006c76:	2200      	movhi	r2, #0
 8006c78:	4413      	add	r3, r2
 8006c7a:	1a18      	subs	r0, r3, r0
 8006c7c:	b003      	add	sp, #12
 8006c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c80:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c84:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c88:	e7ed      	b.n	8006c66 <__exponent+0x4c>
 8006c8a:	2330      	movs	r3, #48	; 0x30
 8006c8c:	3130      	adds	r1, #48	; 0x30
 8006c8e:	7083      	strb	r3, [r0, #2]
 8006c90:	70c1      	strb	r1, [r0, #3]
 8006c92:	1d03      	adds	r3, r0, #4
 8006c94:	e7f1      	b.n	8006c7a <__exponent+0x60>
	...

08006c98 <_printf_float>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	b08b      	sub	sp, #44	; 0x2c
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	4605      	mov	r5, r0
 8006caa:	f000 fcf3 	bl	8007694 <_localeconv_r>
 8006cae:	f8d0 b000 	ldr.w	fp, [r0]
 8006cb2:	4658      	mov	r0, fp
 8006cb4:	f7f9 fb14 	bl	80002e0 <strlen>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9308      	str	r3, [sp, #32]
 8006cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cc4:	6822      	ldr	r2, [r4, #0]
 8006cc6:	3307      	adds	r3, #7
 8006cc8:	f023 0307 	bic.w	r3, r3, #7
 8006ccc:	f103 0108 	add.w	r1, r3, #8
 8006cd0:	f8c8 1000 	str.w	r1, [r8]
 8006cd4:	ed93 0b00 	vldr	d0, [r3]
 8006cd8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006f38 <_printf_float+0x2a0>
 8006cdc:	eeb0 7bc0 	vabs.f64	d7, d0
 8006ce0:	eeb4 7b46 	vcmp.f64	d7, d6
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006cec:	4682      	mov	sl, r0
 8006cee:	dd24      	ble.n	8006d3a <_printf_float+0xa2>
 8006cf0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	d502      	bpl.n	8006d00 <_printf_float+0x68>
 8006cfa:	232d      	movs	r3, #45	; 0x2d
 8006cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d00:	498f      	ldr	r1, [pc, #572]	; (8006f40 <_printf_float+0x2a8>)
 8006d02:	4b90      	ldr	r3, [pc, #576]	; (8006f44 <_printf_float+0x2ac>)
 8006d04:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d08:	bf94      	ite	ls
 8006d0a:	4688      	movls	r8, r1
 8006d0c:	4698      	movhi	r8, r3
 8006d0e:	2303      	movs	r3, #3
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	f022 0204 	bic.w	r2, r2, #4
 8006d16:	2300      	movs	r3, #0
 8006d18:	6022      	str	r2, [r4, #0]
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	9700      	str	r7, [sp, #0]
 8006d1e:	4633      	mov	r3, r6
 8006d20:	aa09      	add	r2, sp, #36	; 0x24
 8006d22:	4621      	mov	r1, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 f9d1 	bl	80070cc <_printf_common>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f040 808a 	bne.w	8006e44 <_printf_float+0x1ac>
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	b00b      	add	sp, #44	; 0x2c
 8006d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d42:	d709      	bvc.n	8006d58 <_printf_float+0xc0>
 8006d44:	ee10 3a90 	vmov	r3, s1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bfbc      	itt	lt
 8006d4c:	232d      	movlt	r3, #45	; 0x2d
 8006d4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d52:	497d      	ldr	r1, [pc, #500]	; (8006f48 <_printf_float+0x2b0>)
 8006d54:	4b7d      	ldr	r3, [pc, #500]	; (8006f4c <_printf_float+0x2b4>)
 8006d56:	e7d5      	b.n	8006d04 <_printf_float+0x6c>
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d5e:	9104      	str	r1, [sp, #16]
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	d13c      	bne.n	8006dde <_printf_float+0x146>
 8006d64:	2306      	movs	r3, #6
 8006d66:	6063      	str	r3, [r4, #4]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	ab08      	add	r3, sp, #32
 8006d6e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d76:	ab07      	add	r3, sp, #28
 8006d78:	6861      	ldr	r1, [r4, #4]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	6022      	str	r2, [r4, #0]
 8006d7e:	f10d 031b 	add.w	r3, sp, #27
 8006d82:	4628      	mov	r0, r5
 8006d84:	f7ff fef7 	bl	8006b76 <__cvt>
 8006d88:	9b04      	ldr	r3, [sp, #16]
 8006d8a:	9907      	ldr	r1, [sp, #28]
 8006d8c:	2b47      	cmp	r3, #71	; 0x47
 8006d8e:	4680      	mov	r8, r0
 8006d90:	d108      	bne.n	8006da4 <_printf_float+0x10c>
 8006d92:	1cc8      	adds	r0, r1, #3
 8006d94:	db02      	blt.n	8006d9c <_printf_float+0x104>
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	dd41      	ble.n	8006e20 <_printf_float+0x188>
 8006d9c:	f1a9 0902 	sub.w	r9, r9, #2
 8006da0:	fa5f f989 	uxtb.w	r9, r9
 8006da4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006da8:	d820      	bhi.n	8006dec <_printf_float+0x154>
 8006daa:	3901      	subs	r1, #1
 8006dac:	464a      	mov	r2, r9
 8006dae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006db2:	9107      	str	r1, [sp, #28]
 8006db4:	f7ff ff31 	bl	8006c1a <__exponent>
 8006db8:	9a08      	ldr	r2, [sp, #32]
 8006dba:	9004      	str	r0, [sp, #16]
 8006dbc:	1813      	adds	r3, r2, r0
 8006dbe:	2a01      	cmp	r2, #1
 8006dc0:	6123      	str	r3, [r4, #16]
 8006dc2:	dc02      	bgt.n	8006dca <_printf_float+0x132>
 8006dc4:	6822      	ldr	r2, [r4, #0]
 8006dc6:	07d2      	lsls	r2, r2, #31
 8006dc8:	d501      	bpl.n	8006dce <_printf_float+0x136>
 8006dca:	3301      	adds	r3, #1
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0a2      	beq.n	8006d1c <_printf_float+0x84>
 8006dd6:	232d      	movs	r3, #45	; 0x2d
 8006dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ddc:	e79e      	b.n	8006d1c <_printf_float+0x84>
 8006dde:	9904      	ldr	r1, [sp, #16]
 8006de0:	2947      	cmp	r1, #71	; 0x47
 8006de2:	d1c1      	bne.n	8006d68 <_printf_float+0xd0>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1bf      	bne.n	8006d68 <_printf_float+0xd0>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e7bc      	b.n	8006d66 <_printf_float+0xce>
 8006dec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006df0:	d118      	bne.n	8006e24 <_printf_float+0x18c>
 8006df2:	2900      	cmp	r1, #0
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	dd0b      	ble.n	8006e10 <_printf_float+0x178>
 8006df8:	6121      	str	r1, [r4, #16]
 8006dfa:	b913      	cbnz	r3, 8006e02 <_printf_float+0x16a>
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	07d0      	lsls	r0, r2, #31
 8006e00:	d502      	bpl.n	8006e08 <_printf_float+0x170>
 8006e02:	3301      	adds	r3, #1
 8006e04:	440b      	add	r3, r1
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	e7de      	b.n	8006dce <_printf_float+0x136>
 8006e10:	b913      	cbnz	r3, 8006e18 <_printf_float+0x180>
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	07d2      	lsls	r2, r2, #31
 8006e16:	d501      	bpl.n	8006e1c <_printf_float+0x184>
 8006e18:	3302      	adds	r3, #2
 8006e1a:	e7f4      	b.n	8006e06 <_printf_float+0x16e>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e7f2      	b.n	8006e06 <_printf_float+0x16e>
 8006e20:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e24:	9b08      	ldr	r3, [sp, #32]
 8006e26:	4299      	cmp	r1, r3
 8006e28:	db05      	blt.n	8006e36 <_printf_float+0x19e>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	6121      	str	r1, [r4, #16]
 8006e2e:	07d8      	lsls	r0, r3, #31
 8006e30:	d5ea      	bpl.n	8006e08 <_printf_float+0x170>
 8006e32:	1c4b      	adds	r3, r1, #1
 8006e34:	e7e7      	b.n	8006e06 <_printf_float+0x16e>
 8006e36:	2900      	cmp	r1, #0
 8006e38:	bfd4      	ite	le
 8006e3a:	f1c1 0202 	rsble	r2, r1, #2
 8006e3e:	2201      	movgt	r2, #1
 8006e40:	4413      	add	r3, r2
 8006e42:	e7e0      	b.n	8006e06 <_printf_float+0x16e>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	055a      	lsls	r2, r3, #21
 8006e48:	d407      	bmi.n	8006e5a <_printf_float+0x1c2>
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d12a      	bne.n	8006eae <_printf_float+0x216>
 8006e58:	e76a      	b.n	8006d30 <_printf_float+0x98>
 8006e5a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e5e:	f240 80e0 	bls.w	8007022 <_printf_float+0x38a>
 8006e62:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6e:	d133      	bne.n	8006ed8 <_printf_float+0x240>
 8006e70:	4a37      	ldr	r2, [pc, #220]	; (8006f50 <_printf_float+0x2b8>)
 8006e72:	2301      	movs	r3, #1
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f af58 	beq.w	8006d30 <_printf_float+0x98>
 8006e80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	db02      	blt.n	8006e8e <_printf_float+0x1f6>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	07d8      	lsls	r0, r3, #31
 8006e8c:	d50f      	bpl.n	8006eae <_printf_float+0x216>
 8006e8e:	4653      	mov	r3, sl
 8006e90:	465a      	mov	r2, fp
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	f43f af49 	beq.w	8006d30 <_printf_float+0x98>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	f104 091a 	add.w	r9, r4, #26
 8006ea6:	9b08      	ldr	r3, [sp, #32]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4543      	cmp	r3, r8
 8006eac:	dc09      	bgt.n	8006ec2 <_printf_float+0x22a>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	079b      	lsls	r3, r3, #30
 8006eb2:	f100 8106 	bmi.w	80070c2 <_printf_float+0x42a>
 8006eb6:	68e0      	ldr	r0, [r4, #12]
 8006eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	bfb8      	it	lt
 8006ebe:	4618      	movlt	r0, r3
 8006ec0:	e738      	b.n	8006d34 <_printf_float+0x9c>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	464a      	mov	r2, r9
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f af2f 	beq.w	8006d30 <_printf_float+0x98>
 8006ed2:	f108 0801 	add.w	r8, r8, #1
 8006ed6:	e7e6      	b.n	8006ea6 <_printf_float+0x20e>
 8006ed8:	9b07      	ldr	r3, [sp, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	dc3a      	bgt.n	8006f54 <_printf_float+0x2bc>
 8006ede:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <_printf_float+0x2b8>)
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f af21 	beq.w	8006d30 <_printf_float+0x98>
 8006eee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d102      	bne.n	8006efc <_printf_float+0x264>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	07d9      	lsls	r1, r3, #31
 8006efa:	d5d8      	bpl.n	8006eae <_printf_float+0x216>
 8006efc:	4653      	mov	r3, sl
 8006efe:	465a      	mov	r2, fp
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	f43f af12 	beq.w	8006d30 <_printf_float+0x98>
 8006f0c:	f04f 0900 	mov.w	r9, #0
 8006f10:	f104 0a1a 	add.w	sl, r4, #26
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	425b      	negs	r3, r3
 8006f18:	454b      	cmp	r3, r9
 8006f1a:	dc01      	bgt.n	8006f20 <_printf_float+0x288>
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	e795      	b.n	8006e4c <_printf_float+0x1b4>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4652      	mov	r2, sl
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f43f af00 	beq.w	8006d30 <_printf_float+0x98>
 8006f30:	f109 0901 	add.w	r9, r9, #1
 8006f34:	e7ee      	b.n	8006f14 <_printf_float+0x27c>
 8006f36:	bf00      	nop
 8006f38:	ffffffff 	.word	0xffffffff
 8006f3c:	7fefffff 	.word	0x7fefffff
 8006f40:	08009e78 	.word	0x08009e78
 8006f44:	08009e7c 	.word	0x08009e7c
 8006f48:	08009e80 	.word	0x08009e80
 8006f4c:	08009e84 	.word	0x08009e84
 8006f50:	08009e88 	.word	0x08009e88
 8006f54:	9a08      	ldr	r2, [sp, #32]
 8006f56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	bfa8      	it	ge
 8006f5c:	461a      	movge	r2, r3
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	4691      	mov	r9, r2
 8006f62:	dc38      	bgt.n	8006fd6 <_printf_float+0x33e>
 8006f64:	2300      	movs	r3, #0
 8006f66:	9305      	str	r3, [sp, #20]
 8006f68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f6c:	f104 021a 	add.w	r2, r4, #26
 8006f70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f72:	9905      	ldr	r1, [sp, #20]
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	eba3 0309 	sub.w	r3, r3, r9
 8006f7a:	428b      	cmp	r3, r1
 8006f7c:	dc33      	bgt.n	8006fe6 <_printf_float+0x34e>
 8006f7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	db3c      	blt.n	8007000 <_printf_float+0x368>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	07da      	lsls	r2, r3, #31
 8006f8a:	d439      	bmi.n	8007000 <_printf_float+0x368>
 8006f8c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006f90:	eba2 0903 	sub.w	r9, r2, r3
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	4591      	cmp	r9, r2
 8006f9a:	bfa8      	it	ge
 8006f9c:	4691      	movge	r9, r2
 8006f9e:	f1b9 0f00 	cmp.w	r9, #0
 8006fa2:	dc35      	bgt.n	8007010 <_printf_float+0x378>
 8006fa4:	f04f 0800 	mov.w	r8, #0
 8006fa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fac:	f104 0a1a 	add.w	sl, r4, #26
 8006fb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	eba3 0309 	sub.w	r3, r3, r9
 8006fba:	4543      	cmp	r3, r8
 8006fbc:	f77f af77 	ble.w	8006eae <_printf_float+0x216>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4652      	mov	r2, sl
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f43f aeb0 	beq.w	8006d30 <_printf_float+0x98>
 8006fd0:	f108 0801 	add.w	r8, r8, #1
 8006fd4:	e7ec      	b.n	8006fb0 <_printf_float+0x318>
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4642      	mov	r2, r8
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d1bf      	bne.n	8006f64 <_printf_float+0x2cc>
 8006fe4:	e6a4      	b.n	8006d30 <_printf_float+0x98>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	9204      	str	r2, [sp, #16]
 8006fee:	47b8      	blx	r7
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	f43f ae9d 	beq.w	8006d30 <_printf_float+0x98>
 8006ff6:	9b05      	ldr	r3, [sp, #20]
 8006ff8:	9a04      	ldr	r2, [sp, #16]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	9305      	str	r3, [sp, #20]
 8006ffe:	e7b7      	b.n	8006f70 <_printf_float+0x2d8>
 8007000:	4653      	mov	r3, sl
 8007002:	465a      	mov	r2, fp
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	d1be      	bne.n	8006f8c <_printf_float+0x2f4>
 800700e:	e68f      	b.n	8006d30 <_printf_float+0x98>
 8007010:	9a04      	ldr	r2, [sp, #16]
 8007012:	464b      	mov	r3, r9
 8007014:	4442      	add	r2, r8
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	d1c1      	bne.n	8006fa4 <_printf_float+0x30c>
 8007020:	e686      	b.n	8006d30 <_printf_float+0x98>
 8007022:	9a08      	ldr	r2, [sp, #32]
 8007024:	2a01      	cmp	r2, #1
 8007026:	dc01      	bgt.n	800702c <_printf_float+0x394>
 8007028:	07db      	lsls	r3, r3, #31
 800702a:	d537      	bpl.n	800709c <_printf_float+0x404>
 800702c:	2301      	movs	r3, #1
 800702e:	4642      	mov	r2, r8
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	47b8      	blx	r7
 8007036:	3001      	adds	r0, #1
 8007038:	f43f ae7a 	beq.w	8006d30 <_printf_float+0x98>
 800703c:	4653      	mov	r3, sl
 800703e:	465a      	mov	r2, fp
 8007040:	4631      	mov	r1, r6
 8007042:	4628      	mov	r0, r5
 8007044:	47b8      	blx	r7
 8007046:	3001      	adds	r0, #1
 8007048:	f43f ae72 	beq.w	8006d30 <_printf_float+0x98>
 800704c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007050:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007058:	9b08      	ldr	r3, [sp, #32]
 800705a:	d01a      	beq.n	8007092 <_printf_float+0x3fa>
 800705c:	3b01      	subs	r3, #1
 800705e:	f108 0201 	add.w	r2, r8, #1
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	47b8      	blx	r7
 8007068:	3001      	adds	r0, #1
 800706a:	d10e      	bne.n	800708a <_printf_float+0x3f2>
 800706c:	e660      	b.n	8006d30 <_printf_float+0x98>
 800706e:	2301      	movs	r3, #1
 8007070:	464a      	mov	r2, r9
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	f43f ae59 	beq.w	8006d30 <_printf_float+0x98>
 800707e:	f108 0801 	add.w	r8, r8, #1
 8007082:	9b08      	ldr	r3, [sp, #32]
 8007084:	3b01      	subs	r3, #1
 8007086:	4543      	cmp	r3, r8
 8007088:	dcf1      	bgt.n	800706e <_printf_float+0x3d6>
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007090:	e6dd      	b.n	8006e4e <_printf_float+0x1b6>
 8007092:	f04f 0800 	mov.w	r8, #0
 8007096:	f104 091a 	add.w	r9, r4, #26
 800709a:	e7f2      	b.n	8007082 <_printf_float+0x3ea>
 800709c:	2301      	movs	r3, #1
 800709e:	4642      	mov	r2, r8
 80070a0:	e7df      	b.n	8007062 <_printf_float+0x3ca>
 80070a2:	2301      	movs	r3, #1
 80070a4:	464a      	mov	r2, r9
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	f43f ae3f 	beq.w	8006d30 <_printf_float+0x98>
 80070b2:	f108 0801 	add.w	r8, r8, #1
 80070b6:	68e3      	ldr	r3, [r4, #12]
 80070b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070ba:	1a5b      	subs	r3, r3, r1
 80070bc:	4543      	cmp	r3, r8
 80070be:	dcf0      	bgt.n	80070a2 <_printf_float+0x40a>
 80070c0:	e6f9      	b.n	8006eb6 <_printf_float+0x21e>
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	f104 0919 	add.w	r9, r4, #25
 80070ca:	e7f4      	b.n	80070b6 <_printf_float+0x41e>

080070cc <_printf_common>:
 80070cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	4616      	mov	r6, r2
 80070d2:	4699      	mov	r9, r3
 80070d4:	688a      	ldr	r2, [r1, #8]
 80070d6:	690b      	ldr	r3, [r1, #16]
 80070d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070dc:	4293      	cmp	r3, r2
 80070de:	bfb8      	it	lt
 80070e0:	4613      	movlt	r3, r2
 80070e2:	6033      	str	r3, [r6, #0]
 80070e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070e8:	4607      	mov	r7, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	b10a      	cbz	r2, 80070f2 <_printf_common+0x26>
 80070ee:	3301      	adds	r3, #1
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	0699      	lsls	r1, r3, #26
 80070f6:	bf42      	ittt	mi
 80070f8:	6833      	ldrmi	r3, [r6, #0]
 80070fa:	3302      	addmi	r3, #2
 80070fc:	6033      	strmi	r3, [r6, #0]
 80070fe:	6825      	ldr	r5, [r4, #0]
 8007100:	f015 0506 	ands.w	r5, r5, #6
 8007104:	d106      	bne.n	8007114 <_printf_common+0x48>
 8007106:	f104 0a19 	add.w	sl, r4, #25
 800710a:	68e3      	ldr	r3, [r4, #12]
 800710c:	6832      	ldr	r2, [r6, #0]
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	42ab      	cmp	r3, r5
 8007112:	dc26      	bgt.n	8007162 <_printf_common+0x96>
 8007114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007118:	1e13      	subs	r3, r2, #0
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	bf18      	it	ne
 800711e:	2301      	movne	r3, #1
 8007120:	0692      	lsls	r2, r2, #26
 8007122:	d42b      	bmi.n	800717c <_printf_common+0xb0>
 8007124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007128:	4649      	mov	r1, r9
 800712a:	4638      	mov	r0, r7
 800712c:	47c0      	blx	r8
 800712e:	3001      	adds	r0, #1
 8007130:	d01e      	beq.n	8007170 <_printf_common+0xa4>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	6922      	ldr	r2, [r4, #16]
 8007136:	f003 0306 	and.w	r3, r3, #6
 800713a:	2b04      	cmp	r3, #4
 800713c:	bf02      	ittt	eq
 800713e:	68e5      	ldreq	r5, [r4, #12]
 8007140:	6833      	ldreq	r3, [r6, #0]
 8007142:	1aed      	subeq	r5, r5, r3
 8007144:	68a3      	ldr	r3, [r4, #8]
 8007146:	bf0c      	ite	eq
 8007148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800714c:	2500      	movne	r5, #0
 800714e:	4293      	cmp	r3, r2
 8007150:	bfc4      	itt	gt
 8007152:	1a9b      	subgt	r3, r3, r2
 8007154:	18ed      	addgt	r5, r5, r3
 8007156:	2600      	movs	r6, #0
 8007158:	341a      	adds	r4, #26
 800715a:	42b5      	cmp	r5, r6
 800715c:	d11a      	bne.n	8007194 <_printf_common+0xc8>
 800715e:	2000      	movs	r0, #0
 8007160:	e008      	b.n	8007174 <_printf_common+0xa8>
 8007162:	2301      	movs	r3, #1
 8007164:	4652      	mov	r2, sl
 8007166:	4649      	mov	r1, r9
 8007168:	4638      	mov	r0, r7
 800716a:	47c0      	blx	r8
 800716c:	3001      	adds	r0, #1
 800716e:	d103      	bne.n	8007178 <_printf_common+0xac>
 8007170:	f04f 30ff 	mov.w	r0, #4294967295
 8007174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007178:	3501      	adds	r5, #1
 800717a:	e7c6      	b.n	800710a <_printf_common+0x3e>
 800717c:	18e1      	adds	r1, r4, r3
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	2030      	movs	r0, #48	; 0x30
 8007182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007186:	4422      	add	r2, r4
 8007188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800718c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007190:	3302      	adds	r3, #2
 8007192:	e7c7      	b.n	8007124 <_printf_common+0x58>
 8007194:	2301      	movs	r3, #1
 8007196:	4622      	mov	r2, r4
 8007198:	4649      	mov	r1, r9
 800719a:	4638      	mov	r0, r7
 800719c:	47c0      	blx	r8
 800719e:	3001      	adds	r0, #1
 80071a0:	d0e6      	beq.n	8007170 <_printf_common+0xa4>
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7d9      	b.n	800715a <_printf_common+0x8e>
	...

080071a8 <_printf_i>:
 80071a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ac:	7e0f      	ldrb	r7, [r1, #24]
 80071ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071b0:	2f78      	cmp	r7, #120	; 0x78
 80071b2:	4691      	mov	r9, r2
 80071b4:	4680      	mov	r8, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	469a      	mov	sl, r3
 80071ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071be:	d807      	bhi.n	80071d0 <_printf_i+0x28>
 80071c0:	2f62      	cmp	r7, #98	; 0x62
 80071c2:	d80a      	bhi.n	80071da <_printf_i+0x32>
 80071c4:	2f00      	cmp	r7, #0
 80071c6:	f000 80d4 	beq.w	8007372 <_printf_i+0x1ca>
 80071ca:	2f58      	cmp	r7, #88	; 0x58
 80071cc:	f000 80c0 	beq.w	8007350 <_printf_i+0x1a8>
 80071d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071d8:	e03a      	b.n	8007250 <_printf_i+0xa8>
 80071da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071de:	2b15      	cmp	r3, #21
 80071e0:	d8f6      	bhi.n	80071d0 <_printf_i+0x28>
 80071e2:	a101      	add	r1, pc, #4	; (adr r1, 80071e8 <_printf_i+0x40>)
 80071e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071e8:	08007241 	.word	0x08007241
 80071ec:	08007255 	.word	0x08007255
 80071f0:	080071d1 	.word	0x080071d1
 80071f4:	080071d1 	.word	0x080071d1
 80071f8:	080071d1 	.word	0x080071d1
 80071fc:	080071d1 	.word	0x080071d1
 8007200:	08007255 	.word	0x08007255
 8007204:	080071d1 	.word	0x080071d1
 8007208:	080071d1 	.word	0x080071d1
 800720c:	080071d1 	.word	0x080071d1
 8007210:	080071d1 	.word	0x080071d1
 8007214:	08007359 	.word	0x08007359
 8007218:	08007281 	.word	0x08007281
 800721c:	08007313 	.word	0x08007313
 8007220:	080071d1 	.word	0x080071d1
 8007224:	080071d1 	.word	0x080071d1
 8007228:	0800737b 	.word	0x0800737b
 800722c:	080071d1 	.word	0x080071d1
 8007230:	08007281 	.word	0x08007281
 8007234:	080071d1 	.word	0x080071d1
 8007238:	080071d1 	.word	0x080071d1
 800723c:	0800731b 	.word	0x0800731b
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	1d1a      	adds	r2, r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	602a      	str	r2, [r5, #0]
 8007248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800724c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007250:	2301      	movs	r3, #1
 8007252:	e09f      	b.n	8007394 <_printf_i+0x1ec>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	0607      	lsls	r7, r0, #24
 800725a:	f103 0104 	add.w	r1, r3, #4
 800725e:	6029      	str	r1, [r5, #0]
 8007260:	d501      	bpl.n	8007266 <_printf_i+0xbe>
 8007262:	681e      	ldr	r6, [r3, #0]
 8007264:	e003      	b.n	800726e <_printf_i+0xc6>
 8007266:	0646      	lsls	r6, r0, #25
 8007268:	d5fb      	bpl.n	8007262 <_printf_i+0xba>
 800726a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800726e:	2e00      	cmp	r6, #0
 8007270:	da03      	bge.n	800727a <_printf_i+0xd2>
 8007272:	232d      	movs	r3, #45	; 0x2d
 8007274:	4276      	negs	r6, r6
 8007276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800727a:	485a      	ldr	r0, [pc, #360]	; (80073e4 <_printf_i+0x23c>)
 800727c:	230a      	movs	r3, #10
 800727e:	e012      	b.n	80072a6 <_printf_i+0xfe>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	1d19      	adds	r1, r3, #4
 8007286:	6029      	str	r1, [r5, #0]
 8007288:	0605      	lsls	r5, r0, #24
 800728a:	d501      	bpl.n	8007290 <_printf_i+0xe8>
 800728c:	681e      	ldr	r6, [r3, #0]
 800728e:	e002      	b.n	8007296 <_printf_i+0xee>
 8007290:	0641      	lsls	r1, r0, #25
 8007292:	d5fb      	bpl.n	800728c <_printf_i+0xe4>
 8007294:	881e      	ldrh	r6, [r3, #0]
 8007296:	4853      	ldr	r0, [pc, #332]	; (80073e4 <_printf_i+0x23c>)
 8007298:	2f6f      	cmp	r7, #111	; 0x6f
 800729a:	bf0c      	ite	eq
 800729c:	2308      	moveq	r3, #8
 800729e:	230a      	movne	r3, #10
 80072a0:	2100      	movs	r1, #0
 80072a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072a6:	6865      	ldr	r5, [r4, #4]
 80072a8:	60a5      	str	r5, [r4, #8]
 80072aa:	2d00      	cmp	r5, #0
 80072ac:	bfa2      	ittt	ge
 80072ae:	6821      	ldrge	r1, [r4, #0]
 80072b0:	f021 0104 	bicge.w	r1, r1, #4
 80072b4:	6021      	strge	r1, [r4, #0]
 80072b6:	b90e      	cbnz	r6, 80072bc <_printf_i+0x114>
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	d04b      	beq.n	8007354 <_printf_i+0x1ac>
 80072bc:	4615      	mov	r5, r2
 80072be:	fbb6 f1f3 	udiv	r1, r6, r3
 80072c2:	fb03 6711 	mls	r7, r3, r1, r6
 80072c6:	5dc7      	ldrb	r7, [r0, r7]
 80072c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072cc:	4637      	mov	r7, r6
 80072ce:	42bb      	cmp	r3, r7
 80072d0:	460e      	mov	r6, r1
 80072d2:	d9f4      	bls.n	80072be <_printf_i+0x116>
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d10b      	bne.n	80072f0 <_printf_i+0x148>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	07de      	lsls	r6, r3, #31
 80072dc:	d508      	bpl.n	80072f0 <_printf_i+0x148>
 80072de:	6923      	ldr	r3, [r4, #16]
 80072e0:	6861      	ldr	r1, [r4, #4]
 80072e2:	4299      	cmp	r1, r3
 80072e4:	bfde      	ittt	le
 80072e6:	2330      	movle	r3, #48	; 0x30
 80072e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072f0:	1b52      	subs	r2, r2, r5
 80072f2:	6122      	str	r2, [r4, #16]
 80072f4:	f8cd a000 	str.w	sl, [sp]
 80072f8:	464b      	mov	r3, r9
 80072fa:	aa03      	add	r2, sp, #12
 80072fc:	4621      	mov	r1, r4
 80072fe:	4640      	mov	r0, r8
 8007300:	f7ff fee4 	bl	80070cc <_printf_common>
 8007304:	3001      	adds	r0, #1
 8007306:	d14a      	bne.n	800739e <_printf_i+0x1f6>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	b004      	add	sp, #16
 800730e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f043 0320 	orr.w	r3, r3, #32
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	4833      	ldr	r0, [pc, #204]	; (80073e8 <_printf_i+0x240>)
 800731c:	2778      	movs	r7, #120	; 0x78
 800731e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	6829      	ldr	r1, [r5, #0]
 8007326:	061f      	lsls	r7, r3, #24
 8007328:	f851 6b04 	ldr.w	r6, [r1], #4
 800732c:	d402      	bmi.n	8007334 <_printf_i+0x18c>
 800732e:	065f      	lsls	r7, r3, #25
 8007330:	bf48      	it	mi
 8007332:	b2b6      	uxthmi	r6, r6
 8007334:	07df      	lsls	r7, r3, #31
 8007336:	bf48      	it	mi
 8007338:	f043 0320 	orrmi.w	r3, r3, #32
 800733c:	6029      	str	r1, [r5, #0]
 800733e:	bf48      	it	mi
 8007340:	6023      	strmi	r3, [r4, #0]
 8007342:	b91e      	cbnz	r6, 800734c <_printf_i+0x1a4>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	f023 0320 	bic.w	r3, r3, #32
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	2310      	movs	r3, #16
 800734e:	e7a7      	b.n	80072a0 <_printf_i+0xf8>
 8007350:	4824      	ldr	r0, [pc, #144]	; (80073e4 <_printf_i+0x23c>)
 8007352:	e7e4      	b.n	800731e <_printf_i+0x176>
 8007354:	4615      	mov	r5, r2
 8007356:	e7bd      	b.n	80072d4 <_printf_i+0x12c>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	6826      	ldr	r6, [r4, #0]
 800735c:	6961      	ldr	r1, [r4, #20]
 800735e:	1d18      	adds	r0, r3, #4
 8007360:	6028      	str	r0, [r5, #0]
 8007362:	0635      	lsls	r5, r6, #24
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	d501      	bpl.n	800736c <_printf_i+0x1c4>
 8007368:	6019      	str	r1, [r3, #0]
 800736a:	e002      	b.n	8007372 <_printf_i+0x1ca>
 800736c:	0670      	lsls	r0, r6, #25
 800736e:	d5fb      	bpl.n	8007368 <_printf_i+0x1c0>
 8007370:	8019      	strh	r1, [r3, #0]
 8007372:	2300      	movs	r3, #0
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	4615      	mov	r5, r2
 8007378:	e7bc      	b.n	80072f4 <_printf_i+0x14c>
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	1d1a      	adds	r2, r3, #4
 800737e:	602a      	str	r2, [r5, #0]
 8007380:	681d      	ldr	r5, [r3, #0]
 8007382:	6862      	ldr	r2, [r4, #4]
 8007384:	2100      	movs	r1, #0
 8007386:	4628      	mov	r0, r5
 8007388:	f7f8 ff5a 	bl	8000240 <memchr>
 800738c:	b108      	cbz	r0, 8007392 <_printf_i+0x1ea>
 800738e:	1b40      	subs	r0, r0, r5
 8007390:	6060      	str	r0, [r4, #4]
 8007392:	6863      	ldr	r3, [r4, #4]
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	2300      	movs	r3, #0
 8007398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739c:	e7aa      	b.n	80072f4 <_printf_i+0x14c>
 800739e:	6923      	ldr	r3, [r4, #16]
 80073a0:	462a      	mov	r2, r5
 80073a2:	4649      	mov	r1, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	47d0      	blx	sl
 80073a8:	3001      	adds	r0, #1
 80073aa:	d0ad      	beq.n	8007308 <_printf_i+0x160>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	079b      	lsls	r3, r3, #30
 80073b0:	d413      	bmi.n	80073da <_printf_i+0x232>
 80073b2:	68e0      	ldr	r0, [r4, #12]
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	4298      	cmp	r0, r3
 80073b8:	bfb8      	it	lt
 80073ba:	4618      	movlt	r0, r3
 80073bc:	e7a6      	b.n	800730c <_printf_i+0x164>
 80073be:	2301      	movs	r3, #1
 80073c0:	4632      	mov	r2, r6
 80073c2:	4649      	mov	r1, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	47d0      	blx	sl
 80073c8:	3001      	adds	r0, #1
 80073ca:	d09d      	beq.n	8007308 <_printf_i+0x160>
 80073cc:	3501      	adds	r5, #1
 80073ce:	68e3      	ldr	r3, [r4, #12]
 80073d0:	9903      	ldr	r1, [sp, #12]
 80073d2:	1a5b      	subs	r3, r3, r1
 80073d4:	42ab      	cmp	r3, r5
 80073d6:	dcf2      	bgt.n	80073be <_printf_i+0x216>
 80073d8:	e7eb      	b.n	80073b2 <_printf_i+0x20a>
 80073da:	2500      	movs	r5, #0
 80073dc:	f104 0619 	add.w	r6, r4, #25
 80073e0:	e7f5      	b.n	80073ce <_printf_i+0x226>
 80073e2:	bf00      	nop
 80073e4:	08009e8a 	.word	0x08009e8a
 80073e8:	08009e9b 	.word	0x08009e9b

080073ec <std>:
 80073ec:	2300      	movs	r3, #0
 80073ee:	b510      	push	{r4, lr}
 80073f0:	4604      	mov	r4, r0
 80073f2:	e9c0 3300 	strd	r3, r3, [r0]
 80073f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073fa:	6083      	str	r3, [r0, #8]
 80073fc:	8181      	strh	r1, [r0, #12]
 80073fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007400:	81c2      	strh	r2, [r0, #14]
 8007402:	6183      	str	r3, [r0, #24]
 8007404:	4619      	mov	r1, r3
 8007406:	2208      	movs	r2, #8
 8007408:	305c      	adds	r0, #92	; 0x5c
 800740a:	f000 f93a 	bl	8007682 <memset>
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <std+0x58>)
 8007410:	6263      	str	r3, [r4, #36]	; 0x24
 8007412:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <std+0x5c>)
 8007414:	62a3      	str	r3, [r4, #40]	; 0x28
 8007416:	4b0d      	ldr	r3, [pc, #52]	; (800744c <std+0x60>)
 8007418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800741a:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <std+0x64>)
 800741c:	6323      	str	r3, [r4, #48]	; 0x30
 800741e:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <std+0x68>)
 8007420:	6224      	str	r4, [r4, #32]
 8007422:	429c      	cmp	r4, r3
 8007424:	d006      	beq.n	8007434 <std+0x48>
 8007426:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800742a:	4294      	cmp	r4, r2
 800742c:	d002      	beq.n	8007434 <std+0x48>
 800742e:	33d0      	adds	r3, #208	; 0xd0
 8007430:	429c      	cmp	r4, r3
 8007432:	d105      	bne.n	8007440 <std+0x54>
 8007434:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800743c:	f000 b99e 	b.w	800777c <__retarget_lock_init_recursive>
 8007440:	bd10      	pop	{r4, pc}
 8007442:	bf00      	nop
 8007444:	080075fd 	.word	0x080075fd
 8007448:	0800761f 	.word	0x0800761f
 800744c:	08007657 	.word	0x08007657
 8007450:	0800767b 	.word	0x0800767b
 8007454:	20001be4 	.word	0x20001be4

08007458 <stdio_exit_handler>:
 8007458:	4a02      	ldr	r2, [pc, #8]	; (8007464 <stdio_exit_handler+0xc>)
 800745a:	4903      	ldr	r1, [pc, #12]	; (8007468 <stdio_exit_handler+0x10>)
 800745c:	4803      	ldr	r0, [pc, #12]	; (800746c <stdio_exit_handler+0x14>)
 800745e:	f000 b869 	b.w	8007534 <_fwalk_sglue>
 8007462:	bf00      	nop
 8007464:	20000010 	.word	0x20000010
 8007468:	080092ad 	.word	0x080092ad
 800746c:	2000001c 	.word	0x2000001c

08007470 <cleanup_stdio>:
 8007470:	6841      	ldr	r1, [r0, #4]
 8007472:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <cleanup_stdio+0x34>)
 8007474:	4299      	cmp	r1, r3
 8007476:	b510      	push	{r4, lr}
 8007478:	4604      	mov	r4, r0
 800747a:	d001      	beq.n	8007480 <cleanup_stdio+0x10>
 800747c:	f001 ff16 	bl	80092ac <_fflush_r>
 8007480:	68a1      	ldr	r1, [r4, #8]
 8007482:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <cleanup_stdio+0x38>)
 8007484:	4299      	cmp	r1, r3
 8007486:	d002      	beq.n	800748e <cleanup_stdio+0x1e>
 8007488:	4620      	mov	r0, r4
 800748a:	f001 ff0f 	bl	80092ac <_fflush_r>
 800748e:	68e1      	ldr	r1, [r4, #12]
 8007490:	4b06      	ldr	r3, [pc, #24]	; (80074ac <cleanup_stdio+0x3c>)
 8007492:	4299      	cmp	r1, r3
 8007494:	d004      	beq.n	80074a0 <cleanup_stdio+0x30>
 8007496:	4620      	mov	r0, r4
 8007498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800749c:	f001 bf06 	b.w	80092ac <_fflush_r>
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	bf00      	nop
 80074a4:	20001be4 	.word	0x20001be4
 80074a8:	20001c4c 	.word	0x20001c4c
 80074ac:	20001cb4 	.word	0x20001cb4

080074b0 <global_stdio_init.part.0>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <global_stdio_init.part.0+0x30>)
 80074b4:	4c0b      	ldr	r4, [pc, #44]	; (80074e4 <global_stdio_init.part.0+0x34>)
 80074b6:	4a0c      	ldr	r2, [pc, #48]	; (80074e8 <global_stdio_init.part.0+0x38>)
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	4620      	mov	r0, r4
 80074bc:	2200      	movs	r2, #0
 80074be:	2104      	movs	r1, #4
 80074c0:	f7ff ff94 	bl	80073ec <std>
 80074c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074c8:	2201      	movs	r2, #1
 80074ca:	2109      	movs	r1, #9
 80074cc:	f7ff ff8e 	bl	80073ec <std>
 80074d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074d4:	2202      	movs	r2, #2
 80074d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074da:	2112      	movs	r1, #18
 80074dc:	f7ff bf86 	b.w	80073ec <std>
 80074e0:	20001d1c 	.word	0x20001d1c
 80074e4:	20001be4 	.word	0x20001be4
 80074e8:	08007459 	.word	0x08007459

080074ec <__sfp_lock_acquire>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__sfp_lock_acquire+0x8>)
 80074ee:	f000 b946 	b.w	800777e <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	20001d25 	.word	0x20001d25

080074f8 <__sfp_lock_release>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__sfp_lock_release+0x8>)
 80074fa:	f000 b941 	b.w	8007780 <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	20001d25 	.word	0x20001d25

08007504 <__sinit>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4604      	mov	r4, r0
 8007508:	f7ff fff0 	bl	80074ec <__sfp_lock_acquire>
 800750c:	6a23      	ldr	r3, [r4, #32]
 800750e:	b11b      	cbz	r3, 8007518 <__sinit+0x14>
 8007510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007514:	f7ff bff0 	b.w	80074f8 <__sfp_lock_release>
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <__sinit+0x28>)
 800751a:	6223      	str	r3, [r4, #32]
 800751c:	4b04      	ldr	r3, [pc, #16]	; (8007530 <__sinit+0x2c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1f5      	bne.n	8007510 <__sinit+0xc>
 8007524:	f7ff ffc4 	bl	80074b0 <global_stdio_init.part.0>
 8007528:	e7f2      	b.n	8007510 <__sinit+0xc>
 800752a:	bf00      	nop
 800752c:	08007471 	.word	0x08007471
 8007530:	20001d1c 	.word	0x20001d1c

08007534 <_fwalk_sglue>:
 8007534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007538:	4607      	mov	r7, r0
 800753a:	4688      	mov	r8, r1
 800753c:	4614      	mov	r4, r2
 800753e:	2600      	movs	r6, #0
 8007540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007544:	f1b9 0901 	subs.w	r9, r9, #1
 8007548:	d505      	bpl.n	8007556 <_fwalk_sglue+0x22>
 800754a:	6824      	ldr	r4, [r4, #0]
 800754c:	2c00      	cmp	r4, #0
 800754e:	d1f7      	bne.n	8007540 <_fwalk_sglue+0xc>
 8007550:	4630      	mov	r0, r6
 8007552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d907      	bls.n	800756c <_fwalk_sglue+0x38>
 800755c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007560:	3301      	adds	r3, #1
 8007562:	d003      	beq.n	800756c <_fwalk_sglue+0x38>
 8007564:	4629      	mov	r1, r5
 8007566:	4638      	mov	r0, r7
 8007568:	47c0      	blx	r8
 800756a:	4306      	orrs	r6, r0
 800756c:	3568      	adds	r5, #104	; 0x68
 800756e:	e7e9      	b.n	8007544 <_fwalk_sglue+0x10>

08007570 <iprintf>:
 8007570:	b40f      	push	{r0, r1, r2, r3}
 8007572:	b507      	push	{r0, r1, r2, lr}
 8007574:	4906      	ldr	r1, [pc, #24]	; (8007590 <iprintf+0x20>)
 8007576:	ab04      	add	r3, sp, #16
 8007578:	6808      	ldr	r0, [r1, #0]
 800757a:	f853 2b04 	ldr.w	r2, [r3], #4
 800757e:	6881      	ldr	r1, [r0, #8]
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	f001 fcf3 	bl	8008f6c <_vfiprintf_r>
 8007586:	b003      	add	sp, #12
 8007588:	f85d eb04 	ldr.w	lr, [sp], #4
 800758c:	b004      	add	sp, #16
 800758e:	4770      	bx	lr
 8007590:	20000068 	.word	0x20000068

08007594 <sniprintf>:
 8007594:	b40c      	push	{r2, r3}
 8007596:	b530      	push	{r4, r5, lr}
 8007598:	4b17      	ldr	r3, [pc, #92]	; (80075f8 <sniprintf+0x64>)
 800759a:	1e0c      	subs	r4, r1, #0
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	b09d      	sub	sp, #116	; 0x74
 80075a0:	da08      	bge.n	80075b4 <sniprintf+0x20>
 80075a2:	238b      	movs	r3, #139	; 0x8b
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	b01d      	add	sp, #116	; 0x74
 80075ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b0:	b002      	add	sp, #8
 80075b2:	4770      	bx	lr
 80075b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80075b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075bc:	bf14      	ite	ne
 80075be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075c2:	4623      	moveq	r3, r4
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	9307      	str	r3, [sp, #28]
 80075c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075cc:	9002      	str	r0, [sp, #8]
 80075ce:	9006      	str	r0, [sp, #24]
 80075d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075d6:	ab21      	add	r3, sp, #132	; 0x84
 80075d8:	a902      	add	r1, sp, #8
 80075da:	4628      	mov	r0, r5
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	f001 fb9d 	bl	8008d1c <_svfiprintf_r>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	bfbc      	itt	lt
 80075e6:	238b      	movlt	r3, #139	; 0x8b
 80075e8:	602b      	strlt	r3, [r5, #0]
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	d0dd      	beq.n	80075aa <sniprintf+0x16>
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e7d9      	b.n	80075aa <sniprintf+0x16>
 80075f6:	bf00      	nop
 80075f8:	20000068 	.word	0x20000068

080075fc <__sread>:
 80075fc:	b510      	push	{r4, lr}
 80075fe:	460c      	mov	r4, r1
 8007600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007604:	f000 f86c 	bl	80076e0 <_read_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	bfab      	itete	ge
 800760c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800760e:	89a3      	ldrhlt	r3, [r4, #12]
 8007610:	181b      	addge	r3, r3, r0
 8007612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007616:	bfac      	ite	ge
 8007618:	6563      	strge	r3, [r4, #84]	; 0x54
 800761a:	81a3      	strhlt	r3, [r4, #12]
 800761c:	bd10      	pop	{r4, pc}

0800761e <__swrite>:
 800761e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007622:	461f      	mov	r7, r3
 8007624:	898b      	ldrh	r3, [r1, #12]
 8007626:	05db      	lsls	r3, r3, #23
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	4616      	mov	r6, r2
 800762e:	d505      	bpl.n	800763c <__swrite+0x1e>
 8007630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007634:	2302      	movs	r3, #2
 8007636:	2200      	movs	r2, #0
 8007638:	f000 f840 	bl	80076bc <_lseek_r>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	4632      	mov	r2, r6
 800764a:	463b      	mov	r3, r7
 800764c:	4628      	mov	r0, r5
 800764e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	f000 b857 	b.w	8007704 <_write_r>

08007656 <__sseek>:
 8007656:	b510      	push	{r4, lr}
 8007658:	460c      	mov	r4, r1
 800765a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765e:	f000 f82d 	bl	80076bc <_lseek_r>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	bf15      	itete	ne
 8007668:	6560      	strne	r0, [r4, #84]	; 0x54
 800766a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800766e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007672:	81a3      	strheq	r3, [r4, #12]
 8007674:	bf18      	it	ne
 8007676:	81a3      	strhne	r3, [r4, #12]
 8007678:	bd10      	pop	{r4, pc}

0800767a <__sclose>:
 800767a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800767e:	f000 b80d 	b.w	800769c <_close_r>

08007682 <memset>:
 8007682:	4402      	add	r2, r0
 8007684:	4603      	mov	r3, r0
 8007686:	4293      	cmp	r3, r2
 8007688:	d100      	bne.n	800768c <memset+0xa>
 800768a:	4770      	bx	lr
 800768c:	f803 1b01 	strb.w	r1, [r3], #1
 8007690:	e7f9      	b.n	8007686 <memset+0x4>
	...

08007694 <_localeconv_r>:
 8007694:	4800      	ldr	r0, [pc, #0]	; (8007698 <_localeconv_r+0x4>)
 8007696:	4770      	bx	lr
 8007698:	2000015c 	.word	0x2000015c

0800769c <_close_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d06      	ldr	r5, [pc, #24]	; (80076b8 <_close_r+0x1c>)
 80076a0:	2300      	movs	r3, #0
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7fc f9f5 	bl	8003a96 <_close>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_close_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_close_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20001d20 	.word	0x20001d20

080076bc <_lseek_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4d07      	ldr	r5, [pc, #28]	; (80076dc <_lseek_r+0x20>)
 80076c0:	4604      	mov	r4, r0
 80076c2:	4608      	mov	r0, r1
 80076c4:	4611      	mov	r1, r2
 80076c6:	2200      	movs	r2, #0
 80076c8:	602a      	str	r2, [r5, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f7fc fa0a 	bl	8003ae4 <_lseek>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d102      	bne.n	80076da <_lseek_r+0x1e>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	b103      	cbz	r3, 80076da <_lseek_r+0x1e>
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	20001d20 	.word	0x20001d20

080076e0 <_read_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d07      	ldr	r5, [pc, #28]	; (8007700 <_read_r+0x20>)
 80076e4:	4604      	mov	r4, r0
 80076e6:	4608      	mov	r0, r1
 80076e8:	4611      	mov	r1, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	602a      	str	r2, [r5, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	f7fc f998 	bl	8003a24 <_read>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d102      	bne.n	80076fe <_read_r+0x1e>
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	b103      	cbz	r3, 80076fe <_read_r+0x1e>
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	20001d20 	.word	0x20001d20

08007704 <_write_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4d07      	ldr	r5, [pc, #28]	; (8007724 <_write_r+0x20>)
 8007708:	4604      	mov	r4, r0
 800770a:	4608      	mov	r0, r1
 800770c:	4611      	mov	r1, r2
 800770e:	2200      	movs	r2, #0
 8007710:	602a      	str	r2, [r5, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f7fc f9a3 	bl	8003a5e <_write>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_write_r+0x1e>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_write_r+0x1e>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20001d20 	.word	0x20001d20

08007728 <__errno>:
 8007728:	4b01      	ldr	r3, [pc, #4]	; (8007730 <__errno+0x8>)
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000068 	.word	0x20000068

08007734 <__libc_init_array>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4d0d      	ldr	r5, [pc, #52]	; (800776c <__libc_init_array+0x38>)
 8007738:	4c0d      	ldr	r4, [pc, #52]	; (8007770 <__libc_init_array+0x3c>)
 800773a:	1b64      	subs	r4, r4, r5
 800773c:	10a4      	asrs	r4, r4, #2
 800773e:	2600      	movs	r6, #0
 8007740:	42a6      	cmp	r6, r4
 8007742:	d109      	bne.n	8007758 <__libc_init_array+0x24>
 8007744:	4d0b      	ldr	r5, [pc, #44]	; (8007774 <__libc_init_array+0x40>)
 8007746:	4c0c      	ldr	r4, [pc, #48]	; (8007778 <__libc_init_array+0x44>)
 8007748:	f002 fb2a 	bl	8009da0 <_init>
 800774c:	1b64      	subs	r4, r4, r5
 800774e:	10a4      	asrs	r4, r4, #2
 8007750:	2600      	movs	r6, #0
 8007752:	42a6      	cmp	r6, r4
 8007754:	d105      	bne.n	8007762 <__libc_init_array+0x2e>
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	f855 3b04 	ldr.w	r3, [r5], #4
 800775c:	4798      	blx	r3
 800775e:	3601      	adds	r6, #1
 8007760:	e7ee      	b.n	8007740 <__libc_init_array+0xc>
 8007762:	f855 3b04 	ldr.w	r3, [r5], #4
 8007766:	4798      	blx	r3
 8007768:	3601      	adds	r6, #1
 800776a:	e7f2      	b.n	8007752 <__libc_init_array+0x1e>
 800776c:	0800bab0 	.word	0x0800bab0
 8007770:	0800bab0 	.word	0x0800bab0
 8007774:	0800bab0 	.word	0x0800bab0
 8007778:	0800bab4 	.word	0x0800bab4

0800777c <__retarget_lock_init_recursive>:
 800777c:	4770      	bx	lr

0800777e <__retarget_lock_acquire_recursive>:
 800777e:	4770      	bx	lr

08007780 <__retarget_lock_release_recursive>:
 8007780:	4770      	bx	lr

08007782 <quorem>:
 8007782:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007786:	6903      	ldr	r3, [r0, #16]
 8007788:	690c      	ldr	r4, [r1, #16]
 800778a:	42a3      	cmp	r3, r4
 800778c:	4607      	mov	r7, r0
 800778e:	db7e      	blt.n	800788e <quorem+0x10c>
 8007790:	3c01      	subs	r4, #1
 8007792:	f101 0814 	add.w	r8, r1, #20
 8007796:	f100 0514 	add.w	r5, r0, #20
 800779a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077a8:	3301      	adds	r3, #1
 80077aa:	429a      	cmp	r2, r3
 80077ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80077b8:	d331      	bcc.n	800781e <quorem+0x9c>
 80077ba:	f04f 0e00 	mov.w	lr, #0
 80077be:	4640      	mov	r0, r8
 80077c0:	46ac      	mov	ip, r5
 80077c2:	46f2      	mov	sl, lr
 80077c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80077c8:	b293      	uxth	r3, r2
 80077ca:	fb06 e303 	mla	r3, r6, r3, lr
 80077ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077d2:	0c1a      	lsrs	r2, r3, #16
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ebaa 0303 	sub.w	r3, sl, r3
 80077da:	f8dc a000 	ldr.w	sl, [ip]
 80077de:	fa13 f38a 	uxtah	r3, r3, sl
 80077e2:	fb06 220e 	mla	r2, r6, lr, r2
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077ee:	b292      	uxth	r2, r2
 80077f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80077fc:	4581      	cmp	r9, r0
 80077fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007802:	f84c 3b04 	str.w	r3, [ip], #4
 8007806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800780a:	d2db      	bcs.n	80077c4 <quorem+0x42>
 800780c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007810:	b92b      	cbnz	r3, 800781e <quorem+0x9c>
 8007812:	9b01      	ldr	r3, [sp, #4]
 8007814:	3b04      	subs	r3, #4
 8007816:	429d      	cmp	r5, r3
 8007818:	461a      	mov	r2, r3
 800781a:	d32c      	bcc.n	8007876 <quorem+0xf4>
 800781c:	613c      	str	r4, [r7, #16]
 800781e:	4638      	mov	r0, r7
 8007820:	f001 f922 	bl	8008a68 <__mcmp>
 8007824:	2800      	cmp	r0, #0
 8007826:	db22      	blt.n	800786e <quorem+0xec>
 8007828:	3601      	adds	r6, #1
 800782a:	4629      	mov	r1, r5
 800782c:	2000      	movs	r0, #0
 800782e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007832:	f8d1 c000 	ldr.w	ip, [r1]
 8007836:	b293      	uxth	r3, r2
 8007838:	1ac3      	subs	r3, r0, r3
 800783a:	0c12      	lsrs	r2, r2, #16
 800783c:	fa13 f38c 	uxtah	r3, r3, ip
 8007840:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007844:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007848:	b29b      	uxth	r3, r3
 800784a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800784e:	45c1      	cmp	r9, r8
 8007850:	f841 3b04 	str.w	r3, [r1], #4
 8007854:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007858:	d2e9      	bcs.n	800782e <quorem+0xac>
 800785a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800785e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007862:	b922      	cbnz	r2, 800786e <quorem+0xec>
 8007864:	3b04      	subs	r3, #4
 8007866:	429d      	cmp	r5, r3
 8007868:	461a      	mov	r2, r3
 800786a:	d30a      	bcc.n	8007882 <quorem+0x100>
 800786c:	613c      	str	r4, [r7, #16]
 800786e:	4630      	mov	r0, r6
 8007870:	b003      	add	sp, #12
 8007872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007876:	6812      	ldr	r2, [r2, #0]
 8007878:	3b04      	subs	r3, #4
 800787a:	2a00      	cmp	r2, #0
 800787c:	d1ce      	bne.n	800781c <quorem+0x9a>
 800787e:	3c01      	subs	r4, #1
 8007880:	e7c9      	b.n	8007816 <quorem+0x94>
 8007882:	6812      	ldr	r2, [r2, #0]
 8007884:	3b04      	subs	r3, #4
 8007886:	2a00      	cmp	r2, #0
 8007888:	d1f0      	bne.n	800786c <quorem+0xea>
 800788a:	3c01      	subs	r4, #1
 800788c:	e7eb      	b.n	8007866 <quorem+0xe4>
 800788e:	2000      	movs	r0, #0
 8007890:	e7ee      	b.n	8007870 <quorem+0xee>
 8007892:	0000      	movs	r0, r0
 8007894:	0000      	movs	r0, r0
	...

08007898 <_dtoa_r>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	ed2d 8b02 	vpush	{d8}
 80078a0:	69c5      	ldr	r5, [r0, #28]
 80078a2:	b091      	sub	sp, #68	; 0x44
 80078a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078a8:	ec59 8b10 	vmov	r8, r9, d0
 80078ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80078ae:	9106      	str	r1, [sp, #24]
 80078b0:	4606      	mov	r6, r0
 80078b2:	9208      	str	r2, [sp, #32]
 80078b4:	930c      	str	r3, [sp, #48]	; 0x30
 80078b6:	b975      	cbnz	r5, 80078d6 <_dtoa_r+0x3e>
 80078b8:	2010      	movs	r0, #16
 80078ba:	f000 fda5 	bl	8008408 <malloc>
 80078be:	4602      	mov	r2, r0
 80078c0:	61f0      	str	r0, [r6, #28]
 80078c2:	b920      	cbnz	r0, 80078ce <_dtoa_r+0x36>
 80078c4:	4ba6      	ldr	r3, [pc, #664]	; (8007b60 <_dtoa_r+0x2c8>)
 80078c6:	21ef      	movs	r1, #239	; 0xef
 80078c8:	48a6      	ldr	r0, [pc, #664]	; (8007b64 <_dtoa_r+0x2cc>)
 80078ca:	f001 fde5 	bl	8009498 <__assert_func>
 80078ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078d2:	6005      	str	r5, [r0, #0]
 80078d4:	60c5      	str	r5, [r0, #12]
 80078d6:	69f3      	ldr	r3, [r6, #28]
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	b151      	cbz	r1, 80078f2 <_dtoa_r+0x5a>
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	604a      	str	r2, [r1, #4]
 80078e0:	2301      	movs	r3, #1
 80078e2:	4093      	lsls	r3, r2
 80078e4:	608b      	str	r3, [r1, #8]
 80078e6:	4630      	mov	r0, r6
 80078e8:	f000 fe82 	bl	80085f0 <_Bfree>
 80078ec:	69f3      	ldr	r3, [r6, #28]
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f1b9 0300 	subs.w	r3, r9, #0
 80078f6:	bfbb      	ittet	lt
 80078f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078fc:	9303      	strlt	r3, [sp, #12]
 80078fe:	2300      	movge	r3, #0
 8007900:	2201      	movlt	r2, #1
 8007902:	bfac      	ite	ge
 8007904:	6023      	strge	r3, [r4, #0]
 8007906:	6022      	strlt	r2, [r4, #0]
 8007908:	4b97      	ldr	r3, [pc, #604]	; (8007b68 <_dtoa_r+0x2d0>)
 800790a:	9c03      	ldr	r4, [sp, #12]
 800790c:	43a3      	bics	r3, r4
 800790e:	d11c      	bne.n	800794a <_dtoa_r+0xb2>
 8007910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007912:	f242 730f 	movw	r3, #9999	; 0x270f
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800791c:	ea53 0308 	orrs.w	r3, r3, r8
 8007920:	f000 84fb 	beq.w	800831a <_dtoa_r+0xa82>
 8007924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007926:	b963      	cbnz	r3, 8007942 <_dtoa_r+0xaa>
 8007928:	4b90      	ldr	r3, [pc, #576]	; (8007b6c <_dtoa_r+0x2d4>)
 800792a:	e020      	b.n	800796e <_dtoa_r+0xd6>
 800792c:	4b90      	ldr	r3, [pc, #576]	; (8007b70 <_dtoa_r+0x2d8>)
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	3308      	adds	r3, #8
 8007932:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	9801      	ldr	r0, [sp, #4]
 8007938:	b011      	add	sp, #68	; 0x44
 800793a:	ecbd 8b02 	vpop	{d8}
 800793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007942:	4b8a      	ldr	r3, [pc, #552]	; (8007b6c <_dtoa_r+0x2d4>)
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	3303      	adds	r3, #3
 8007948:	e7f3      	b.n	8007932 <_dtoa_r+0x9a>
 800794a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800794e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007956:	d10c      	bne.n	8007972 <_dtoa_r+0xda>
 8007958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800795a:	2301      	movs	r3, #1
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 84d7 	beq.w	8008314 <_dtoa_r+0xa7c>
 8007966:	4b83      	ldr	r3, [pc, #524]	; (8007b74 <_dtoa_r+0x2dc>)
 8007968:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	3b01      	subs	r3, #1
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	e7e1      	b.n	8007936 <_dtoa_r+0x9e>
 8007972:	aa0e      	add	r2, sp, #56	; 0x38
 8007974:	a90f      	add	r1, sp, #60	; 0x3c
 8007976:	4630      	mov	r0, r6
 8007978:	eeb0 0b48 	vmov.f64	d0, d8
 800797c:	f001 f91a 	bl	8008bb4 <__d2b>
 8007980:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007986:	4605      	mov	r5, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d046      	beq.n	8007a1a <_dtoa_r+0x182>
 800798c:	eeb0 7b48 	vmov.f64	d7, d8
 8007990:	ee18 1a90 	vmov	r1, s17
 8007994:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007998:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800799c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80079a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079a4:	2000      	movs	r0, #0
 80079a6:	ee07 1a90 	vmov	s15, r1
 80079aa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80079ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007b48 <_dtoa_r+0x2b0>
 80079b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80079b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007b50 <_dtoa_r+0x2b8>
 80079ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80079be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007b58 <_dtoa_r+0x2c0>
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80079ca:	eeb0 7b46 	vmov.f64	d7, d6
 80079ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80079d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80079d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80079da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079de:	ee16 ba90 	vmov	fp, s13
 80079e2:	9009      	str	r0, [sp, #36]	; 0x24
 80079e4:	d508      	bpl.n	80079f8 <_dtoa_r+0x160>
 80079e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80079ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80079ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f2:	bf18      	it	ne
 80079f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80079f8:	f1bb 0f16 	cmp.w	fp, #22
 80079fc:	d82b      	bhi.n	8007a56 <_dtoa_r+0x1be>
 80079fe:	495e      	ldr	r1, [pc, #376]	; (8007b78 <_dtoa_r+0x2e0>)
 8007a00:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007a04:	ed91 7b00 	vldr	d7, [r1]
 8007a08:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a10:	d501      	bpl.n	8007a16 <_dtoa_r+0x17e>
 8007a12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a16:	2100      	movs	r1, #0
 8007a18:	e01e      	b.n	8007a58 <_dtoa_r+0x1c0>
 8007a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007a22:	2920      	cmp	r1, #32
 8007a24:	bfc1      	itttt	gt
 8007a26:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007a2a:	408c      	lslgt	r4, r1
 8007a2c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007a30:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007a34:	bfd6      	itet	le
 8007a36:	f1c1 0120 	rsble	r1, r1, #32
 8007a3a:	4321      	orrgt	r1, r4
 8007a3c:	fa08 f101 	lslle.w	r1, r8, r1
 8007a40:	ee07 1a90 	vmov	s15, r1
 8007a44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	ee17 1a90 	vmov	r1, s15
 8007a4e:	2001      	movs	r0, #1
 8007a50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a54:	e7a7      	b.n	80079a6 <_dtoa_r+0x10e>
 8007a56:	2101      	movs	r1, #1
 8007a58:	1ad2      	subs	r2, r2, r3
 8007a5a:	1e53      	subs	r3, r2, #1
 8007a5c:	9305      	str	r3, [sp, #20]
 8007a5e:	bf45      	ittet	mi
 8007a60:	f1c2 0301 	rsbmi	r3, r2, #1
 8007a64:	9304      	strmi	r3, [sp, #16]
 8007a66:	2300      	movpl	r3, #0
 8007a68:	2300      	movmi	r3, #0
 8007a6a:	bf4c      	ite	mi
 8007a6c:	9305      	strmi	r3, [sp, #20]
 8007a6e:	9304      	strpl	r3, [sp, #16]
 8007a70:	f1bb 0f00 	cmp.w	fp, #0
 8007a74:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a76:	db18      	blt.n	8007aaa <_dtoa_r+0x212>
 8007a78:	9b05      	ldr	r3, [sp, #20]
 8007a7a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007a7e:	445b      	add	r3, fp
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	2300      	movs	r3, #0
 8007a84:	9a06      	ldr	r2, [sp, #24]
 8007a86:	2a09      	cmp	r2, #9
 8007a88:	d848      	bhi.n	8007b1c <_dtoa_r+0x284>
 8007a8a:	2a05      	cmp	r2, #5
 8007a8c:	bfc4      	itt	gt
 8007a8e:	3a04      	subgt	r2, #4
 8007a90:	9206      	strgt	r2, [sp, #24]
 8007a92:	9a06      	ldr	r2, [sp, #24]
 8007a94:	f1a2 0202 	sub.w	r2, r2, #2
 8007a98:	bfcc      	ite	gt
 8007a9a:	2400      	movgt	r4, #0
 8007a9c:	2401      	movle	r4, #1
 8007a9e:	2a03      	cmp	r2, #3
 8007aa0:	d847      	bhi.n	8007b32 <_dtoa_r+0x29a>
 8007aa2:	e8df f002 	tbb	[pc, r2]
 8007aa6:	2d0b      	.short	0x2d0b
 8007aa8:	392b      	.short	0x392b
 8007aaa:	9b04      	ldr	r3, [sp, #16]
 8007aac:	2200      	movs	r2, #0
 8007aae:	eba3 030b 	sub.w	r3, r3, fp
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ab6:	f1cb 0300 	rsb	r3, fp, #0
 8007aba:	e7e3      	b.n	8007a84 <_dtoa_r+0x1ec>
 8007abc:	2200      	movs	r2, #0
 8007abe:	9207      	str	r2, [sp, #28]
 8007ac0:	9a08      	ldr	r2, [sp, #32]
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	dc38      	bgt.n	8007b38 <_dtoa_r+0x2a0>
 8007ac6:	f04f 0a01 	mov.w	sl, #1
 8007aca:	46d1      	mov	r9, sl
 8007acc:	4652      	mov	r2, sl
 8007ace:	f8cd a020 	str.w	sl, [sp, #32]
 8007ad2:	69f7      	ldr	r7, [r6, #28]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	2004      	movs	r0, #4
 8007ad8:	f100 0c14 	add.w	ip, r0, #20
 8007adc:	4594      	cmp	ip, r2
 8007ade:	d930      	bls.n	8007b42 <_dtoa_r+0x2aa>
 8007ae0:	6079      	str	r1, [r7, #4]
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ae6:	f000 fd43 	bl	8008570 <_Balloc>
 8007aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aec:	9001      	str	r0, [sp, #4]
 8007aee:	4602      	mov	r2, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d145      	bne.n	8007b80 <_dtoa_r+0x2e8>
 8007af4:	4b21      	ldr	r3, [pc, #132]	; (8007b7c <_dtoa_r+0x2e4>)
 8007af6:	f240 11af 	movw	r1, #431	; 0x1af
 8007afa:	e6e5      	b.n	80078c8 <_dtoa_r+0x30>
 8007afc:	2201      	movs	r2, #1
 8007afe:	e7de      	b.n	8007abe <_dtoa_r+0x226>
 8007b00:	2200      	movs	r2, #0
 8007b02:	9207      	str	r2, [sp, #28]
 8007b04:	9a08      	ldr	r2, [sp, #32]
 8007b06:	eb0b 0a02 	add.w	sl, fp, r2
 8007b0a:	f10a 0901 	add.w	r9, sl, #1
 8007b0e:	464a      	mov	r2, r9
 8007b10:	2a01      	cmp	r2, #1
 8007b12:	bfb8      	it	lt
 8007b14:	2201      	movlt	r2, #1
 8007b16:	e7dc      	b.n	8007ad2 <_dtoa_r+0x23a>
 8007b18:	2201      	movs	r2, #1
 8007b1a:	e7f2      	b.n	8007b02 <_dtoa_r+0x26a>
 8007b1c:	2401      	movs	r4, #1
 8007b1e:	2200      	movs	r2, #0
 8007b20:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007b24:	f04f 3aff 	mov.w	sl, #4294967295
 8007b28:	2100      	movs	r1, #0
 8007b2a:	46d1      	mov	r9, sl
 8007b2c:	2212      	movs	r2, #18
 8007b2e:	9108      	str	r1, [sp, #32]
 8007b30:	e7cf      	b.n	8007ad2 <_dtoa_r+0x23a>
 8007b32:	2201      	movs	r2, #1
 8007b34:	9207      	str	r2, [sp, #28]
 8007b36:	e7f5      	b.n	8007b24 <_dtoa_r+0x28c>
 8007b38:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b3c:	46d1      	mov	r9, sl
 8007b3e:	4652      	mov	r2, sl
 8007b40:	e7c7      	b.n	8007ad2 <_dtoa_r+0x23a>
 8007b42:	3101      	adds	r1, #1
 8007b44:	0040      	lsls	r0, r0, #1
 8007b46:	e7c7      	b.n	8007ad8 <_dtoa_r+0x240>
 8007b48:	636f4361 	.word	0x636f4361
 8007b4c:	3fd287a7 	.word	0x3fd287a7
 8007b50:	8b60c8b3 	.word	0x8b60c8b3
 8007b54:	3fc68a28 	.word	0x3fc68a28
 8007b58:	509f79fb 	.word	0x509f79fb
 8007b5c:	3fd34413 	.word	0x3fd34413
 8007b60:	08009eb9 	.word	0x08009eb9
 8007b64:	08009ed0 	.word	0x08009ed0
 8007b68:	7ff00000 	.word	0x7ff00000
 8007b6c:	08009eb5 	.word	0x08009eb5
 8007b70:	08009eac 	.word	0x08009eac
 8007b74:	08009e89 	.word	0x08009e89
 8007b78:	08009fc0 	.word	0x08009fc0
 8007b7c:	08009f28 	.word	0x08009f28
 8007b80:	69f2      	ldr	r2, [r6, #28]
 8007b82:	9901      	ldr	r1, [sp, #4]
 8007b84:	6011      	str	r1, [r2, #0]
 8007b86:	f1b9 0f0e 	cmp.w	r9, #14
 8007b8a:	d86c      	bhi.n	8007c66 <_dtoa_r+0x3ce>
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	d06a      	beq.n	8007c66 <_dtoa_r+0x3ce>
 8007b90:	f1bb 0f00 	cmp.w	fp, #0
 8007b94:	f340 80a0 	ble.w	8007cd8 <_dtoa_r+0x440>
 8007b98:	4ac1      	ldr	r2, [pc, #772]	; (8007ea0 <_dtoa_r+0x608>)
 8007b9a:	f00b 010f 	and.w	r1, fp, #15
 8007b9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007ba2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ba6:	ed92 7b00 	vldr	d7, [r2]
 8007baa:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007bae:	f000 8087 	beq.w	8007cc0 <_dtoa_r+0x428>
 8007bb2:	49bc      	ldr	r1, [pc, #752]	; (8007ea4 <_dtoa_r+0x60c>)
 8007bb4:	ed91 6b08 	vldr	d6, [r1, #32]
 8007bb8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007bbc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007bc0:	f002 020f 	and.w	r2, r2, #15
 8007bc4:	2103      	movs	r1, #3
 8007bc6:	48b7      	ldr	r0, [pc, #732]	; (8007ea4 <_dtoa_r+0x60c>)
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	d17b      	bne.n	8007cc4 <_dtoa_r+0x42c>
 8007bcc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bd0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007bd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	f000 80a0 	beq.w	8007d24 <_dtoa_r+0x48c>
 8007be4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007be8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf0:	f140 8098 	bpl.w	8007d24 <_dtoa_r+0x48c>
 8007bf4:	f1b9 0f00 	cmp.w	r9, #0
 8007bf8:	f000 8094 	beq.w	8007d24 <_dtoa_r+0x48c>
 8007bfc:	f1ba 0f00 	cmp.w	sl, #0
 8007c00:	dd2f      	ble.n	8007c62 <_dtoa_r+0x3ca>
 8007c02:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c0a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c0e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007c12:	3101      	adds	r1, #1
 8007c14:	4654      	mov	r4, sl
 8007c16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007c1a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007c1e:	ee07 1a90 	vmov	s15, r1
 8007c22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007c26:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007c2a:	ee15 7a90 	vmov	r7, s11
 8007c2e:	ec51 0b15 	vmov	r0, r1, d5
 8007c32:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	d177      	bne.n	8007d2a <_dtoa_r+0x492>
 8007c3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c42:	ec41 0b17 	vmov	d7, r0, r1
 8007c46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4e:	f300 826a 	bgt.w	8008126 <_dtoa_r+0x88e>
 8007c52:	eeb1 7b47 	vneg.f64	d7, d7
 8007c56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	f100 8260 	bmi.w	8008122 <_dtoa_r+0x88a>
 8007c62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	f2c0 811d 	blt.w	8007ea8 <_dtoa_r+0x610>
 8007c6e:	f1bb 0f0e 	cmp.w	fp, #14
 8007c72:	f300 8119 	bgt.w	8007ea8 <_dtoa_r+0x610>
 8007c76:	4b8a      	ldr	r3, [pc, #552]	; (8007ea0 <_dtoa_r+0x608>)
 8007c78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c7c:	ed93 6b00 	vldr	d6, [r3]
 8007c80:	9b08      	ldr	r3, [sp, #32]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f280 80b7 	bge.w	8007df6 <_dtoa_r+0x55e>
 8007c88:	f1b9 0f00 	cmp.w	r9, #0
 8007c8c:	f300 80b3 	bgt.w	8007df6 <_dtoa_r+0x55e>
 8007c90:	f040 8246 	bne.w	8008120 <_dtoa_r+0x888>
 8007c94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ca0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca8:	464c      	mov	r4, r9
 8007caa:	464f      	mov	r7, r9
 8007cac:	f280 821c 	bge.w	80080e8 <_dtoa_r+0x850>
 8007cb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007cb4:	2331      	movs	r3, #49	; 0x31
 8007cb6:	f808 3b01 	strb.w	r3, [r8], #1
 8007cba:	f10b 0b01 	add.w	fp, fp, #1
 8007cbe:	e218      	b.n	80080f2 <_dtoa_r+0x85a>
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	e780      	b.n	8007bc6 <_dtoa_r+0x32e>
 8007cc4:	07d4      	lsls	r4, r2, #31
 8007cc6:	d504      	bpl.n	8007cd2 <_dtoa_r+0x43a>
 8007cc8:	ed90 6b00 	vldr	d6, [r0]
 8007ccc:	3101      	adds	r1, #1
 8007cce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cd2:	1052      	asrs	r2, r2, #1
 8007cd4:	3008      	adds	r0, #8
 8007cd6:	e777      	b.n	8007bc8 <_dtoa_r+0x330>
 8007cd8:	d022      	beq.n	8007d20 <_dtoa_r+0x488>
 8007cda:	f1cb 0200 	rsb	r2, fp, #0
 8007cde:	4970      	ldr	r1, [pc, #448]	; (8007ea0 <_dtoa_r+0x608>)
 8007ce0:	f002 000f 	and.w	r0, r2, #15
 8007ce4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007ce8:	ed91 7b00 	vldr	d7, [r1]
 8007cec:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007cf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cf4:	486b      	ldr	r0, [pc, #428]	; (8007ea4 <_dtoa_r+0x60c>)
 8007cf6:	1112      	asrs	r2, r2, #4
 8007cf8:	2400      	movs	r4, #0
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	b92a      	cbnz	r2, 8007d0a <_dtoa_r+0x472>
 8007cfe:	2c00      	cmp	r4, #0
 8007d00:	f43f af6a 	beq.w	8007bd8 <_dtoa_r+0x340>
 8007d04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d08:	e766      	b.n	8007bd8 <_dtoa_r+0x340>
 8007d0a:	07d7      	lsls	r7, r2, #31
 8007d0c:	d505      	bpl.n	8007d1a <_dtoa_r+0x482>
 8007d0e:	ed90 6b00 	vldr	d6, [r0]
 8007d12:	3101      	adds	r1, #1
 8007d14:	2401      	movs	r4, #1
 8007d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d1a:	1052      	asrs	r2, r2, #1
 8007d1c:	3008      	adds	r0, #8
 8007d1e:	e7ed      	b.n	8007cfc <_dtoa_r+0x464>
 8007d20:	2102      	movs	r1, #2
 8007d22:	e759      	b.n	8007bd8 <_dtoa_r+0x340>
 8007d24:	465a      	mov	r2, fp
 8007d26:	464c      	mov	r4, r9
 8007d28:	e775      	b.n	8007c16 <_dtoa_r+0x37e>
 8007d2a:	ec41 0b17 	vmov	d7, r0, r1
 8007d2e:	495c      	ldr	r1, [pc, #368]	; (8007ea0 <_dtoa_r+0x608>)
 8007d30:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007d34:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007d38:	9901      	ldr	r1, [sp, #4]
 8007d3a:	440c      	add	r4, r1
 8007d3c:	9907      	ldr	r1, [sp, #28]
 8007d3e:	b351      	cbz	r1, 8007d96 <_dtoa_r+0x4fe>
 8007d40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007d44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007d48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d4c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007d50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d5c:	ee14 1a90 	vmov	r1, s9
 8007d60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d64:	3130      	adds	r1, #48	; 0x30
 8007d66:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d72:	f808 1b01 	strb.w	r1, [r8], #1
 8007d76:	d439      	bmi.n	8007dec <_dtoa_r+0x554>
 8007d78:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007d7c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d84:	d472      	bmi.n	8007e6c <_dtoa_r+0x5d4>
 8007d86:	45a0      	cmp	r8, r4
 8007d88:	f43f af6b 	beq.w	8007c62 <_dtoa_r+0x3ca>
 8007d8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007d90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d94:	e7e0      	b.n	8007d58 <_dtoa_r+0x4c0>
 8007d96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d9e:	4620      	mov	r0, r4
 8007da0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007da4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007da8:	ee14 1a90 	vmov	r1, s9
 8007dac:	3130      	adds	r1, #48	; 0x30
 8007dae:	f808 1b01 	strb.w	r1, [r8], #1
 8007db2:	45a0      	cmp	r8, r4
 8007db4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007db8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007dbc:	d118      	bne.n	8007df0 <_dtoa_r+0x558>
 8007dbe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007dc2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007dc6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dce:	dc4d      	bgt.n	8007e6c <_dtoa_r+0x5d4>
 8007dd0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007dd4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ddc:	f57f af41 	bpl.w	8007c62 <_dtoa_r+0x3ca>
 8007de0:	4680      	mov	r8, r0
 8007de2:	3801      	subs	r0, #1
 8007de4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007de8:	2b30      	cmp	r3, #48	; 0x30
 8007dea:	d0f9      	beq.n	8007de0 <_dtoa_r+0x548>
 8007dec:	4693      	mov	fp, r2
 8007dee:	e02a      	b.n	8007e46 <_dtoa_r+0x5ae>
 8007df0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007df4:	e7d6      	b.n	8007da4 <_dtoa_r+0x50c>
 8007df6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dfa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007dfe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007e06:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007e0a:	ee15 3a10 	vmov	r3, s10
 8007e0e:	3330      	adds	r3, #48	; 0x30
 8007e10:	f808 3b01 	strb.w	r3, [r8], #1
 8007e14:	9b01      	ldr	r3, [sp, #4]
 8007e16:	eba8 0303 	sub.w	r3, r8, r3
 8007e1a:	4599      	cmp	r9, r3
 8007e1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007e20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007e24:	d133      	bne.n	8007e8e <_dtoa_r+0x5f6>
 8007e26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e32:	dc1a      	bgt.n	8007e6a <_dtoa_r+0x5d2>
 8007e34:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3c:	d103      	bne.n	8007e46 <_dtoa_r+0x5ae>
 8007e3e:	ee15 3a10 	vmov	r3, s10
 8007e42:	07d9      	lsls	r1, r3, #31
 8007e44:	d411      	bmi.n	8007e6a <_dtoa_r+0x5d2>
 8007e46:	4629      	mov	r1, r5
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 fbd1 	bl	80085f0 <_Bfree>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e52:	f888 3000 	strb.w	r3, [r8]
 8007e56:	f10b 0301 	add.w	r3, fp, #1
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f43f ad69 	beq.w	8007936 <_dtoa_r+0x9e>
 8007e64:	f8c3 8000 	str.w	r8, [r3]
 8007e68:	e565      	b.n	8007936 <_dtoa_r+0x9e>
 8007e6a:	465a      	mov	r2, fp
 8007e6c:	4643      	mov	r3, r8
 8007e6e:	4698      	mov	r8, r3
 8007e70:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007e74:	2939      	cmp	r1, #57	; 0x39
 8007e76:	d106      	bne.n	8007e86 <_dtoa_r+0x5ee>
 8007e78:	9901      	ldr	r1, [sp, #4]
 8007e7a:	4299      	cmp	r1, r3
 8007e7c:	d1f7      	bne.n	8007e6e <_dtoa_r+0x5d6>
 8007e7e:	9801      	ldr	r0, [sp, #4]
 8007e80:	2130      	movs	r1, #48	; 0x30
 8007e82:	3201      	adds	r2, #1
 8007e84:	7001      	strb	r1, [r0, #0]
 8007e86:	7819      	ldrb	r1, [r3, #0]
 8007e88:	3101      	adds	r1, #1
 8007e8a:	7019      	strb	r1, [r3, #0]
 8007e8c:	e7ae      	b.n	8007dec <_dtoa_r+0x554>
 8007e8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e9a:	d1b2      	bne.n	8007e02 <_dtoa_r+0x56a>
 8007e9c:	e7d3      	b.n	8007e46 <_dtoa_r+0x5ae>
 8007e9e:	bf00      	nop
 8007ea0:	08009fc0 	.word	0x08009fc0
 8007ea4:	08009f98 	.word	0x08009f98
 8007ea8:	9907      	ldr	r1, [sp, #28]
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	f000 80d0 	beq.w	8008050 <_dtoa_r+0x7b8>
 8007eb0:	9906      	ldr	r1, [sp, #24]
 8007eb2:	2901      	cmp	r1, #1
 8007eb4:	f300 80b4 	bgt.w	8008020 <_dtoa_r+0x788>
 8007eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eba:	2900      	cmp	r1, #0
 8007ebc:	f000 80ac 	beq.w	8008018 <_dtoa_r+0x780>
 8007ec0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ec4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ec8:	461c      	mov	r4, r3
 8007eca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	4630      	mov	r0, r6
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	f000 fc3e 	bl	800875c <__i2b>
 8007ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	f1b8 0f00 	cmp.w	r8, #0
 8007ee8:	d00d      	beq.n	8007f06 <_dtoa_r+0x66e>
 8007eea:	9a05      	ldr	r2, [sp, #20]
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	dd0a      	ble.n	8007f06 <_dtoa_r+0x66e>
 8007ef0:	4542      	cmp	r2, r8
 8007ef2:	9904      	ldr	r1, [sp, #16]
 8007ef4:	bfa8      	it	ge
 8007ef6:	4642      	movge	r2, r8
 8007ef8:	1a89      	subs	r1, r1, r2
 8007efa:	9104      	str	r1, [sp, #16]
 8007efc:	9905      	ldr	r1, [sp, #20]
 8007efe:	eba8 0802 	sub.w	r8, r8, r2
 8007f02:	1a8a      	subs	r2, r1, r2
 8007f04:	9205      	str	r2, [sp, #20]
 8007f06:	b303      	cbz	r3, 8007f4a <_dtoa_r+0x6b2>
 8007f08:	9a07      	ldr	r2, [sp, #28]
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	f000 80a5 	beq.w	800805a <_dtoa_r+0x7c2>
 8007f10:	2c00      	cmp	r4, #0
 8007f12:	dd13      	ble.n	8007f3c <_dtoa_r+0x6a4>
 8007f14:	4639      	mov	r1, r7
 8007f16:	4622      	mov	r2, r4
 8007f18:	4630      	mov	r0, r6
 8007f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f1c:	f000 fcde 	bl	80088dc <__pow5mult>
 8007f20:	462a      	mov	r2, r5
 8007f22:	4601      	mov	r1, r0
 8007f24:	4607      	mov	r7, r0
 8007f26:	4630      	mov	r0, r6
 8007f28:	f000 fc2e 	bl	8008788 <__multiply>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	9009      	str	r0, [sp, #36]	; 0x24
 8007f30:	4630      	mov	r0, r6
 8007f32:	f000 fb5d 	bl	80085f0 <_Bfree>
 8007f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f3a:	4615      	mov	r5, r2
 8007f3c:	1b1a      	subs	r2, r3, r4
 8007f3e:	d004      	beq.n	8007f4a <_dtoa_r+0x6b2>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 fcca 	bl	80088dc <__pow5mult>
 8007f48:	4605      	mov	r5, r0
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f000 fc05 	bl	800875c <__i2b>
 8007f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	f340 8081 	ble.w	800805e <_dtoa_r+0x7c6>
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4601      	mov	r1, r0
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 fcbb 	bl	80088dc <__pow5mult>
 8007f66:	9b06      	ldr	r3, [sp, #24]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	dd7a      	ble.n	8008064 <_dtoa_r+0x7cc>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9309      	str	r3, [sp, #36]	; 0x24
 8007f72:	6922      	ldr	r2, [r4, #16]
 8007f74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f78:	6910      	ldr	r0, [r2, #16]
 8007f7a:	f000 fba1 	bl	80086c0 <__hi0bits>
 8007f7e:	f1c0 0020 	rsb	r0, r0, #32
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	4418      	add	r0, r3
 8007f86:	f010 001f 	ands.w	r0, r0, #31
 8007f8a:	f000 8093 	beq.w	80080b4 <_dtoa_r+0x81c>
 8007f8e:	f1c0 0220 	rsb	r2, r0, #32
 8007f92:	2a04      	cmp	r2, #4
 8007f94:	f340 8085 	ble.w	80080a2 <_dtoa_r+0x80a>
 8007f98:	9b04      	ldr	r3, [sp, #16]
 8007f9a:	f1c0 001c 	rsb	r0, r0, #28
 8007f9e:	4403      	add	r3, r0
 8007fa0:	9304      	str	r3, [sp, #16]
 8007fa2:	9b05      	ldr	r3, [sp, #20]
 8007fa4:	4480      	add	r8, r0
 8007fa6:	4403      	add	r3, r0
 8007fa8:	9305      	str	r3, [sp, #20]
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dd05      	ble.n	8007fbc <_dtoa_r+0x724>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f000 fceb 	bl	8008990 <__lshift>
 8007fba:	4605      	mov	r5, r0
 8007fbc:	9b05      	ldr	r3, [sp, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd05      	ble.n	8007fce <_dtoa_r+0x736>
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 fce2 	bl	8008990 <__lshift>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d071      	beq.n	80080b8 <_dtoa_r+0x820>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fd46 	bl	8008a68 <__mcmp>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	da6b      	bge.n	80080b8 <_dtoa_r+0x820>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	220a      	movs	r2, #10
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f000 fb24 	bl	8008634 <__multadd>
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 8197 	beq.w	8008328 <_dtoa_r+0xa90>
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	220a      	movs	r2, #10
 8008000:	4630      	mov	r0, r6
 8008002:	f000 fb17 	bl	8008634 <__multadd>
 8008006:	f1ba 0f00 	cmp.w	sl, #0
 800800a:	4607      	mov	r7, r0
 800800c:	f300 8093 	bgt.w	8008136 <_dtoa_r+0x89e>
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	2b02      	cmp	r3, #2
 8008014:	dc57      	bgt.n	80080c6 <_dtoa_r+0x82e>
 8008016:	e08e      	b.n	8008136 <_dtoa_r+0x89e>
 8008018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800801a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800801e:	e751      	b.n	8007ec4 <_dtoa_r+0x62c>
 8008020:	f109 34ff 	add.w	r4, r9, #4294967295
 8008024:	42a3      	cmp	r3, r4
 8008026:	bfbf      	itttt	lt
 8008028:	1ae2      	sublt	r2, r4, r3
 800802a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800802c:	189b      	addlt	r3, r3, r2
 800802e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008030:	bfae      	itee	ge
 8008032:	1b1c      	subge	r4, r3, r4
 8008034:	4623      	movlt	r3, r4
 8008036:	2400      	movlt	r4, #0
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	bfb5      	itete	lt
 800803e:	9a04      	ldrlt	r2, [sp, #16]
 8008040:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008044:	eba2 0809 	sublt.w	r8, r2, r9
 8008048:	464a      	movge	r2, r9
 800804a:	bfb8      	it	lt
 800804c:	2200      	movlt	r2, #0
 800804e:	e73c      	b.n	8007eca <_dtoa_r+0x632>
 8008050:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008054:	9f07      	ldr	r7, [sp, #28]
 8008056:	461c      	mov	r4, r3
 8008058:	e744      	b.n	8007ee4 <_dtoa_r+0x64c>
 800805a:	461a      	mov	r2, r3
 800805c:	e770      	b.n	8007f40 <_dtoa_r+0x6a8>
 800805e:	9b06      	ldr	r3, [sp, #24]
 8008060:	2b01      	cmp	r3, #1
 8008062:	dc18      	bgt.n	8008096 <_dtoa_r+0x7fe>
 8008064:	9b02      	ldr	r3, [sp, #8]
 8008066:	b9b3      	cbnz	r3, 8008096 <_dtoa_r+0x7fe>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800806e:	b9a2      	cbnz	r2, 800809a <_dtoa_r+0x802>
 8008070:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008074:	0d12      	lsrs	r2, r2, #20
 8008076:	0512      	lsls	r2, r2, #20
 8008078:	b18a      	cbz	r2, 800809e <_dtoa_r+0x806>
 800807a:	9b04      	ldr	r3, [sp, #16]
 800807c:	3301      	adds	r3, #1
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	9b05      	ldr	r3, [sp, #20]
 8008082:	3301      	adds	r3, #1
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	2301      	movs	r3, #1
 8008088:	9309      	str	r3, [sp, #36]	; 0x24
 800808a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808c:	2b00      	cmp	r3, #0
 800808e:	f47f af70 	bne.w	8007f72 <_dtoa_r+0x6da>
 8008092:	2001      	movs	r0, #1
 8008094:	e775      	b.n	8007f82 <_dtoa_r+0x6ea>
 8008096:	2300      	movs	r3, #0
 8008098:	e7f6      	b.n	8008088 <_dtoa_r+0x7f0>
 800809a:	9b02      	ldr	r3, [sp, #8]
 800809c:	e7f4      	b.n	8008088 <_dtoa_r+0x7f0>
 800809e:	9209      	str	r2, [sp, #36]	; 0x24
 80080a0:	e7f3      	b.n	800808a <_dtoa_r+0x7f2>
 80080a2:	d082      	beq.n	8007faa <_dtoa_r+0x712>
 80080a4:	9b04      	ldr	r3, [sp, #16]
 80080a6:	321c      	adds	r2, #28
 80080a8:	4413      	add	r3, r2
 80080aa:	9304      	str	r3, [sp, #16]
 80080ac:	9b05      	ldr	r3, [sp, #20]
 80080ae:	4490      	add	r8, r2
 80080b0:	4413      	add	r3, r2
 80080b2:	e779      	b.n	8007fa8 <_dtoa_r+0x710>
 80080b4:	4602      	mov	r2, r0
 80080b6:	e7f5      	b.n	80080a4 <_dtoa_r+0x80c>
 80080b8:	f1b9 0f00 	cmp.w	r9, #0
 80080bc:	dc36      	bgt.n	800812c <_dtoa_r+0x894>
 80080be:	9b06      	ldr	r3, [sp, #24]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	dd33      	ble.n	800812c <_dtoa_r+0x894>
 80080c4:	46ca      	mov	sl, r9
 80080c6:	f1ba 0f00 	cmp.w	sl, #0
 80080ca:	d10d      	bne.n	80080e8 <_dtoa_r+0x850>
 80080cc:	4621      	mov	r1, r4
 80080ce:	4653      	mov	r3, sl
 80080d0:	2205      	movs	r2, #5
 80080d2:	4630      	mov	r0, r6
 80080d4:	f000 faae 	bl	8008634 <__multadd>
 80080d8:	4601      	mov	r1, r0
 80080da:	4604      	mov	r4, r0
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 fcc3 	bl	8008a68 <__mcmp>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f73f ade4 	bgt.w	8007cb0 <_dtoa_r+0x418>
 80080e8:	9b08      	ldr	r3, [sp, #32]
 80080ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080ee:	ea6f 0b03 	mvn.w	fp, r3
 80080f2:	f04f 0900 	mov.w	r9, #0
 80080f6:	4621      	mov	r1, r4
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 fa79 	bl	80085f0 <_Bfree>
 80080fe:	2f00      	cmp	r7, #0
 8008100:	f43f aea1 	beq.w	8007e46 <_dtoa_r+0x5ae>
 8008104:	f1b9 0f00 	cmp.w	r9, #0
 8008108:	d005      	beq.n	8008116 <_dtoa_r+0x87e>
 800810a:	45b9      	cmp	r9, r7
 800810c:	d003      	beq.n	8008116 <_dtoa_r+0x87e>
 800810e:	4649      	mov	r1, r9
 8008110:	4630      	mov	r0, r6
 8008112:	f000 fa6d 	bl	80085f0 <_Bfree>
 8008116:	4639      	mov	r1, r7
 8008118:	4630      	mov	r0, r6
 800811a:	f000 fa69 	bl	80085f0 <_Bfree>
 800811e:	e692      	b.n	8007e46 <_dtoa_r+0x5ae>
 8008120:	2400      	movs	r4, #0
 8008122:	4627      	mov	r7, r4
 8008124:	e7e0      	b.n	80080e8 <_dtoa_r+0x850>
 8008126:	4693      	mov	fp, r2
 8008128:	4627      	mov	r7, r4
 800812a:	e5c1      	b.n	8007cb0 <_dtoa_r+0x418>
 800812c:	9b07      	ldr	r3, [sp, #28]
 800812e:	46ca      	mov	sl, r9
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 8100 	beq.w	8008336 <_dtoa_r+0xa9e>
 8008136:	f1b8 0f00 	cmp.w	r8, #0
 800813a:	dd05      	ble.n	8008148 <_dtoa_r+0x8b0>
 800813c:	4639      	mov	r1, r7
 800813e:	4642      	mov	r2, r8
 8008140:	4630      	mov	r0, r6
 8008142:	f000 fc25 	bl	8008990 <__lshift>
 8008146:	4607      	mov	r7, r0
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d05d      	beq.n	800820a <_dtoa_r+0x972>
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	4630      	mov	r0, r6
 8008152:	f000 fa0d 	bl	8008570 <_Balloc>
 8008156:	4680      	mov	r8, r0
 8008158:	b928      	cbnz	r0, 8008166 <_dtoa_r+0x8ce>
 800815a:	4b82      	ldr	r3, [pc, #520]	; (8008364 <_dtoa_r+0xacc>)
 800815c:	4602      	mov	r2, r0
 800815e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008162:	f7ff bbb1 	b.w	80078c8 <_dtoa_r+0x30>
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	3202      	adds	r2, #2
 800816a:	0092      	lsls	r2, r2, #2
 800816c:	f107 010c 	add.w	r1, r7, #12
 8008170:	300c      	adds	r0, #12
 8008172:	f001 f983 	bl	800947c <memcpy>
 8008176:	2201      	movs	r2, #1
 8008178:	4641      	mov	r1, r8
 800817a:	4630      	mov	r0, r6
 800817c:	f000 fc08 	bl	8008990 <__lshift>
 8008180:	9b01      	ldr	r3, [sp, #4]
 8008182:	3301      	adds	r3, #1
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	9b01      	ldr	r3, [sp, #4]
 8008188:	4453      	add	r3, sl
 800818a:	9308      	str	r3, [sp, #32]
 800818c:	9b02      	ldr	r3, [sp, #8]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	46b9      	mov	r9, r7
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	4607      	mov	r7, r0
 8008198:	9b04      	ldr	r3, [sp, #16]
 800819a:	4621      	mov	r1, r4
 800819c:	3b01      	subs	r3, #1
 800819e:	4628      	mov	r0, r5
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	f7ff faee 	bl	8007782 <quorem>
 80081a6:	4603      	mov	r3, r0
 80081a8:	3330      	adds	r3, #48	; 0x30
 80081aa:	9005      	str	r0, [sp, #20]
 80081ac:	4649      	mov	r1, r9
 80081ae:	4628      	mov	r0, r5
 80081b0:	9309      	str	r3, [sp, #36]	; 0x24
 80081b2:	f000 fc59 	bl	8008a68 <__mcmp>
 80081b6:	463a      	mov	r2, r7
 80081b8:	4682      	mov	sl, r0
 80081ba:	4621      	mov	r1, r4
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 fc6f 	bl	8008aa0 <__mdiff>
 80081c2:	68c2      	ldr	r2, [r0, #12]
 80081c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c6:	4680      	mov	r8, r0
 80081c8:	bb0a      	cbnz	r2, 800820e <_dtoa_r+0x976>
 80081ca:	4601      	mov	r1, r0
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 fc4b 	bl	8008a68 <__mcmp>
 80081d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d4:	4602      	mov	r2, r0
 80081d6:	4641      	mov	r1, r8
 80081d8:	4630      	mov	r0, r6
 80081da:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80081de:	f000 fa07 	bl	80085f0 <_Bfree>
 80081e2:	9b06      	ldr	r3, [sp, #24]
 80081e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80081ea:	ea43 0102 	orr.w	r1, r3, r2
 80081ee:	9b07      	ldr	r3, [sp, #28]
 80081f0:	4319      	orrs	r1, r3
 80081f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f4:	d10d      	bne.n	8008212 <_dtoa_r+0x97a>
 80081f6:	2b39      	cmp	r3, #57	; 0x39
 80081f8:	d029      	beq.n	800824e <_dtoa_r+0x9b6>
 80081fa:	f1ba 0f00 	cmp.w	sl, #0
 80081fe:	dd01      	ble.n	8008204 <_dtoa_r+0x96c>
 8008200:	9b05      	ldr	r3, [sp, #20]
 8008202:	3331      	adds	r3, #49	; 0x31
 8008204:	9a02      	ldr	r2, [sp, #8]
 8008206:	7013      	strb	r3, [r2, #0]
 8008208:	e775      	b.n	80080f6 <_dtoa_r+0x85e>
 800820a:	4638      	mov	r0, r7
 800820c:	e7b8      	b.n	8008180 <_dtoa_r+0x8e8>
 800820e:	2201      	movs	r2, #1
 8008210:	e7e1      	b.n	80081d6 <_dtoa_r+0x93e>
 8008212:	f1ba 0f00 	cmp.w	sl, #0
 8008216:	db06      	blt.n	8008226 <_dtoa_r+0x98e>
 8008218:	9906      	ldr	r1, [sp, #24]
 800821a:	ea41 0a0a 	orr.w	sl, r1, sl
 800821e:	9907      	ldr	r1, [sp, #28]
 8008220:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008224:	d120      	bne.n	8008268 <_dtoa_r+0x9d0>
 8008226:	2a00      	cmp	r2, #0
 8008228:	ddec      	ble.n	8008204 <_dtoa_r+0x96c>
 800822a:	4629      	mov	r1, r5
 800822c:	2201      	movs	r2, #1
 800822e:	4630      	mov	r0, r6
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	f000 fbad 	bl	8008990 <__lshift>
 8008236:	4621      	mov	r1, r4
 8008238:	4605      	mov	r5, r0
 800823a:	f000 fc15 	bl	8008a68 <__mcmp>
 800823e:	2800      	cmp	r0, #0
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	dc02      	bgt.n	800824a <_dtoa_r+0x9b2>
 8008244:	d1de      	bne.n	8008204 <_dtoa_r+0x96c>
 8008246:	07da      	lsls	r2, r3, #31
 8008248:	d5dc      	bpl.n	8008204 <_dtoa_r+0x96c>
 800824a:	2b39      	cmp	r3, #57	; 0x39
 800824c:	d1d8      	bne.n	8008200 <_dtoa_r+0x968>
 800824e:	9a02      	ldr	r2, [sp, #8]
 8008250:	2339      	movs	r3, #57	; 0x39
 8008252:	7013      	strb	r3, [r2, #0]
 8008254:	4643      	mov	r3, r8
 8008256:	4698      	mov	r8, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800825e:	2a39      	cmp	r2, #57	; 0x39
 8008260:	d051      	beq.n	8008306 <_dtoa_r+0xa6e>
 8008262:	3201      	adds	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e746      	b.n	80080f6 <_dtoa_r+0x85e>
 8008268:	2a00      	cmp	r2, #0
 800826a:	dd03      	ble.n	8008274 <_dtoa_r+0x9dc>
 800826c:	2b39      	cmp	r3, #57	; 0x39
 800826e:	d0ee      	beq.n	800824e <_dtoa_r+0x9b6>
 8008270:	3301      	adds	r3, #1
 8008272:	e7c7      	b.n	8008204 <_dtoa_r+0x96c>
 8008274:	9a04      	ldr	r2, [sp, #16]
 8008276:	9908      	ldr	r1, [sp, #32]
 8008278:	f802 3c01 	strb.w	r3, [r2, #-1]
 800827c:	428a      	cmp	r2, r1
 800827e:	d02b      	beq.n	80082d8 <_dtoa_r+0xa40>
 8008280:	4629      	mov	r1, r5
 8008282:	2300      	movs	r3, #0
 8008284:	220a      	movs	r2, #10
 8008286:	4630      	mov	r0, r6
 8008288:	f000 f9d4 	bl	8008634 <__multadd>
 800828c:	45b9      	cmp	r9, r7
 800828e:	4605      	mov	r5, r0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	f04f 020a 	mov.w	r2, #10
 8008298:	4649      	mov	r1, r9
 800829a:	4630      	mov	r0, r6
 800829c:	d107      	bne.n	80082ae <_dtoa_r+0xa16>
 800829e:	f000 f9c9 	bl	8008634 <__multadd>
 80082a2:	4681      	mov	r9, r0
 80082a4:	4607      	mov	r7, r0
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	3301      	adds	r3, #1
 80082aa:	9304      	str	r3, [sp, #16]
 80082ac:	e774      	b.n	8008198 <_dtoa_r+0x900>
 80082ae:	f000 f9c1 	bl	8008634 <__multadd>
 80082b2:	4639      	mov	r1, r7
 80082b4:	4681      	mov	r9, r0
 80082b6:	2300      	movs	r3, #0
 80082b8:	220a      	movs	r2, #10
 80082ba:	4630      	mov	r0, r6
 80082bc:	f000 f9ba 	bl	8008634 <__multadd>
 80082c0:	4607      	mov	r7, r0
 80082c2:	e7f0      	b.n	80082a6 <_dtoa_r+0xa0e>
 80082c4:	f1ba 0f00 	cmp.w	sl, #0
 80082c8:	9a01      	ldr	r2, [sp, #4]
 80082ca:	bfcc      	ite	gt
 80082cc:	46d0      	movgt	r8, sl
 80082ce:	f04f 0801 	movle.w	r8, #1
 80082d2:	4490      	add	r8, r2
 80082d4:	f04f 0900 	mov.w	r9, #0
 80082d8:	4629      	mov	r1, r5
 80082da:	2201      	movs	r2, #1
 80082dc:	4630      	mov	r0, r6
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	f000 fb56 	bl	8008990 <__lshift>
 80082e4:	4621      	mov	r1, r4
 80082e6:	4605      	mov	r5, r0
 80082e8:	f000 fbbe 	bl	8008a68 <__mcmp>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	dcb1      	bgt.n	8008254 <_dtoa_r+0x9bc>
 80082f0:	d102      	bne.n	80082f8 <_dtoa_r+0xa60>
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	07db      	lsls	r3, r3, #31
 80082f6:	d4ad      	bmi.n	8008254 <_dtoa_r+0x9bc>
 80082f8:	4643      	mov	r3, r8
 80082fa:	4698      	mov	r8, r3
 80082fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008300:	2a30      	cmp	r2, #48	; 0x30
 8008302:	d0fa      	beq.n	80082fa <_dtoa_r+0xa62>
 8008304:	e6f7      	b.n	80080f6 <_dtoa_r+0x85e>
 8008306:	9a01      	ldr	r2, [sp, #4]
 8008308:	429a      	cmp	r2, r3
 800830a:	d1a4      	bne.n	8008256 <_dtoa_r+0x9be>
 800830c:	f10b 0b01 	add.w	fp, fp, #1
 8008310:	2331      	movs	r3, #49	; 0x31
 8008312:	e778      	b.n	8008206 <_dtoa_r+0x96e>
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <_dtoa_r+0xad0>)
 8008316:	f7ff bb2a 	b.w	800796e <_dtoa_r+0xd6>
 800831a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800831c:	2b00      	cmp	r3, #0
 800831e:	f47f ab05 	bne.w	800792c <_dtoa_r+0x94>
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <_dtoa_r+0xad4>)
 8008324:	f7ff bb23 	b.w	800796e <_dtoa_r+0xd6>
 8008328:	f1ba 0f00 	cmp.w	sl, #0
 800832c:	dc03      	bgt.n	8008336 <_dtoa_r+0xa9e>
 800832e:	9b06      	ldr	r3, [sp, #24]
 8008330:	2b02      	cmp	r3, #2
 8008332:	f73f aec8 	bgt.w	80080c6 <_dtoa_r+0x82e>
 8008336:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800833a:	4621      	mov	r1, r4
 800833c:	4628      	mov	r0, r5
 800833e:	f7ff fa20 	bl	8007782 <quorem>
 8008342:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008346:	f808 3b01 	strb.w	r3, [r8], #1
 800834a:	9a01      	ldr	r2, [sp, #4]
 800834c:	eba8 0202 	sub.w	r2, r8, r2
 8008350:	4592      	cmp	sl, r2
 8008352:	ddb7      	ble.n	80082c4 <_dtoa_r+0xa2c>
 8008354:	4629      	mov	r1, r5
 8008356:	2300      	movs	r3, #0
 8008358:	220a      	movs	r2, #10
 800835a:	4630      	mov	r0, r6
 800835c:	f000 f96a 	bl	8008634 <__multadd>
 8008360:	4605      	mov	r5, r0
 8008362:	e7ea      	b.n	800833a <_dtoa_r+0xaa2>
 8008364:	08009f28 	.word	0x08009f28
 8008368:	08009e88 	.word	0x08009e88
 800836c:	08009eac 	.word	0x08009eac

08008370 <_free_r>:
 8008370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008372:	2900      	cmp	r1, #0
 8008374:	d044      	beq.n	8008400 <_free_r+0x90>
 8008376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837a:	9001      	str	r0, [sp, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f1a1 0404 	sub.w	r4, r1, #4
 8008382:	bfb8      	it	lt
 8008384:	18e4      	addlt	r4, r4, r3
 8008386:	f000 f8e7 	bl	8008558 <__malloc_lock>
 800838a:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <_free_r+0x94>)
 800838c:	9801      	ldr	r0, [sp, #4]
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	b933      	cbnz	r3, 80083a0 <_free_r+0x30>
 8008392:	6063      	str	r3, [r4, #4]
 8008394:	6014      	str	r4, [r2, #0]
 8008396:	b003      	add	sp, #12
 8008398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800839c:	f000 b8e2 	b.w	8008564 <__malloc_unlock>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d908      	bls.n	80083b6 <_free_r+0x46>
 80083a4:	6825      	ldr	r5, [r4, #0]
 80083a6:	1961      	adds	r1, r4, r5
 80083a8:	428b      	cmp	r3, r1
 80083aa:	bf01      	itttt	eq
 80083ac:	6819      	ldreq	r1, [r3, #0]
 80083ae:	685b      	ldreq	r3, [r3, #4]
 80083b0:	1949      	addeq	r1, r1, r5
 80083b2:	6021      	streq	r1, [r4, #0]
 80083b4:	e7ed      	b.n	8008392 <_free_r+0x22>
 80083b6:	461a      	mov	r2, r3
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	b10b      	cbz	r3, 80083c0 <_free_r+0x50>
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d9fa      	bls.n	80083b6 <_free_r+0x46>
 80083c0:	6811      	ldr	r1, [r2, #0]
 80083c2:	1855      	adds	r5, r2, r1
 80083c4:	42a5      	cmp	r5, r4
 80083c6:	d10b      	bne.n	80083e0 <_free_r+0x70>
 80083c8:	6824      	ldr	r4, [r4, #0]
 80083ca:	4421      	add	r1, r4
 80083cc:	1854      	adds	r4, r2, r1
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	6011      	str	r1, [r2, #0]
 80083d2:	d1e0      	bne.n	8008396 <_free_r+0x26>
 80083d4:	681c      	ldr	r4, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	6053      	str	r3, [r2, #4]
 80083da:	440c      	add	r4, r1
 80083dc:	6014      	str	r4, [r2, #0]
 80083de:	e7da      	b.n	8008396 <_free_r+0x26>
 80083e0:	d902      	bls.n	80083e8 <_free_r+0x78>
 80083e2:	230c      	movs	r3, #12
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	e7d6      	b.n	8008396 <_free_r+0x26>
 80083e8:	6825      	ldr	r5, [r4, #0]
 80083ea:	1961      	adds	r1, r4, r5
 80083ec:	428b      	cmp	r3, r1
 80083ee:	bf04      	itt	eq
 80083f0:	6819      	ldreq	r1, [r3, #0]
 80083f2:	685b      	ldreq	r3, [r3, #4]
 80083f4:	6063      	str	r3, [r4, #4]
 80083f6:	bf04      	itt	eq
 80083f8:	1949      	addeq	r1, r1, r5
 80083fa:	6021      	streq	r1, [r4, #0]
 80083fc:	6054      	str	r4, [r2, #4]
 80083fe:	e7ca      	b.n	8008396 <_free_r+0x26>
 8008400:	b003      	add	sp, #12
 8008402:	bd30      	pop	{r4, r5, pc}
 8008404:	20001d28 	.word	0x20001d28

08008408 <malloc>:
 8008408:	4b02      	ldr	r3, [pc, #8]	; (8008414 <malloc+0xc>)
 800840a:	4601      	mov	r1, r0
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f000 b823 	b.w	8008458 <_malloc_r>
 8008412:	bf00      	nop
 8008414:	20000068 	.word	0x20000068

08008418 <sbrk_aligned>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4e0e      	ldr	r6, [pc, #56]	; (8008454 <sbrk_aligned+0x3c>)
 800841c:	460c      	mov	r4, r1
 800841e:	6831      	ldr	r1, [r6, #0]
 8008420:	4605      	mov	r5, r0
 8008422:	b911      	cbnz	r1, 800842a <sbrk_aligned+0x12>
 8008424:	f001 f81a 	bl	800945c <_sbrk_r>
 8008428:	6030      	str	r0, [r6, #0]
 800842a:	4621      	mov	r1, r4
 800842c:	4628      	mov	r0, r5
 800842e:	f001 f815 	bl	800945c <_sbrk_r>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d00a      	beq.n	800844c <sbrk_aligned+0x34>
 8008436:	1cc4      	adds	r4, r0, #3
 8008438:	f024 0403 	bic.w	r4, r4, #3
 800843c:	42a0      	cmp	r0, r4
 800843e:	d007      	beq.n	8008450 <sbrk_aligned+0x38>
 8008440:	1a21      	subs	r1, r4, r0
 8008442:	4628      	mov	r0, r5
 8008444:	f001 f80a 	bl	800945c <_sbrk_r>
 8008448:	3001      	adds	r0, #1
 800844a:	d101      	bne.n	8008450 <sbrk_aligned+0x38>
 800844c:	f04f 34ff 	mov.w	r4, #4294967295
 8008450:	4620      	mov	r0, r4
 8008452:	bd70      	pop	{r4, r5, r6, pc}
 8008454:	20001d2c 	.word	0x20001d2c

08008458 <_malloc_r>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	1ccd      	adds	r5, r1, #3
 800845e:	f025 0503 	bic.w	r5, r5, #3
 8008462:	3508      	adds	r5, #8
 8008464:	2d0c      	cmp	r5, #12
 8008466:	bf38      	it	cc
 8008468:	250c      	movcc	r5, #12
 800846a:	2d00      	cmp	r5, #0
 800846c:	4607      	mov	r7, r0
 800846e:	db01      	blt.n	8008474 <_malloc_r+0x1c>
 8008470:	42a9      	cmp	r1, r5
 8008472:	d905      	bls.n	8008480 <_malloc_r+0x28>
 8008474:	230c      	movs	r3, #12
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	2600      	movs	r6, #0
 800847a:	4630      	mov	r0, r6
 800847c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008554 <_malloc_r+0xfc>
 8008484:	f000 f868 	bl	8008558 <__malloc_lock>
 8008488:	f8d8 3000 	ldr.w	r3, [r8]
 800848c:	461c      	mov	r4, r3
 800848e:	bb5c      	cbnz	r4, 80084e8 <_malloc_r+0x90>
 8008490:	4629      	mov	r1, r5
 8008492:	4638      	mov	r0, r7
 8008494:	f7ff ffc0 	bl	8008418 <sbrk_aligned>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	4604      	mov	r4, r0
 800849c:	d155      	bne.n	800854a <_malloc_r+0xf2>
 800849e:	f8d8 4000 	ldr.w	r4, [r8]
 80084a2:	4626      	mov	r6, r4
 80084a4:	2e00      	cmp	r6, #0
 80084a6:	d145      	bne.n	8008534 <_malloc_r+0xdc>
 80084a8:	2c00      	cmp	r4, #0
 80084aa:	d048      	beq.n	800853e <_malloc_r+0xe6>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	4631      	mov	r1, r6
 80084b0:	4638      	mov	r0, r7
 80084b2:	eb04 0903 	add.w	r9, r4, r3
 80084b6:	f000 ffd1 	bl	800945c <_sbrk_r>
 80084ba:	4581      	cmp	r9, r0
 80084bc:	d13f      	bne.n	800853e <_malloc_r+0xe6>
 80084be:	6821      	ldr	r1, [r4, #0]
 80084c0:	1a6d      	subs	r5, r5, r1
 80084c2:	4629      	mov	r1, r5
 80084c4:	4638      	mov	r0, r7
 80084c6:	f7ff ffa7 	bl	8008418 <sbrk_aligned>
 80084ca:	3001      	adds	r0, #1
 80084cc:	d037      	beq.n	800853e <_malloc_r+0xe6>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	442b      	add	r3, r5
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	f8d8 3000 	ldr.w	r3, [r8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d038      	beq.n	800854e <_malloc_r+0xf6>
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	42a2      	cmp	r2, r4
 80084e0:	d12b      	bne.n	800853a <_malloc_r+0xe2>
 80084e2:	2200      	movs	r2, #0
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	e00f      	b.n	8008508 <_malloc_r+0xb0>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	1b52      	subs	r2, r2, r5
 80084ec:	d41f      	bmi.n	800852e <_malloc_r+0xd6>
 80084ee:	2a0b      	cmp	r2, #11
 80084f0:	d917      	bls.n	8008522 <_malloc_r+0xca>
 80084f2:	1961      	adds	r1, r4, r5
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	6025      	str	r5, [r4, #0]
 80084f8:	bf18      	it	ne
 80084fa:	6059      	strne	r1, [r3, #4]
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	bf08      	it	eq
 8008500:	f8c8 1000 	streq.w	r1, [r8]
 8008504:	5162      	str	r2, [r4, r5]
 8008506:	604b      	str	r3, [r1, #4]
 8008508:	4638      	mov	r0, r7
 800850a:	f104 060b 	add.w	r6, r4, #11
 800850e:	f000 f829 	bl	8008564 <__malloc_unlock>
 8008512:	f026 0607 	bic.w	r6, r6, #7
 8008516:	1d23      	adds	r3, r4, #4
 8008518:	1af2      	subs	r2, r6, r3
 800851a:	d0ae      	beq.n	800847a <_malloc_r+0x22>
 800851c:	1b9b      	subs	r3, r3, r6
 800851e:	50a3      	str	r3, [r4, r2]
 8008520:	e7ab      	b.n	800847a <_malloc_r+0x22>
 8008522:	42a3      	cmp	r3, r4
 8008524:	6862      	ldr	r2, [r4, #4]
 8008526:	d1dd      	bne.n	80084e4 <_malloc_r+0x8c>
 8008528:	f8c8 2000 	str.w	r2, [r8]
 800852c:	e7ec      	b.n	8008508 <_malloc_r+0xb0>
 800852e:	4623      	mov	r3, r4
 8008530:	6864      	ldr	r4, [r4, #4]
 8008532:	e7ac      	b.n	800848e <_malloc_r+0x36>
 8008534:	4634      	mov	r4, r6
 8008536:	6876      	ldr	r6, [r6, #4]
 8008538:	e7b4      	b.n	80084a4 <_malloc_r+0x4c>
 800853a:	4613      	mov	r3, r2
 800853c:	e7cc      	b.n	80084d8 <_malloc_r+0x80>
 800853e:	230c      	movs	r3, #12
 8008540:	603b      	str	r3, [r7, #0]
 8008542:	4638      	mov	r0, r7
 8008544:	f000 f80e 	bl	8008564 <__malloc_unlock>
 8008548:	e797      	b.n	800847a <_malloc_r+0x22>
 800854a:	6025      	str	r5, [r4, #0]
 800854c:	e7dc      	b.n	8008508 <_malloc_r+0xb0>
 800854e:	605b      	str	r3, [r3, #4]
 8008550:	deff      	udf	#255	; 0xff
 8008552:	bf00      	nop
 8008554:	20001d28 	.word	0x20001d28

08008558 <__malloc_lock>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__malloc_lock+0x8>)
 800855a:	f7ff b910 	b.w	800777e <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	20001d24 	.word	0x20001d24

08008564 <__malloc_unlock>:
 8008564:	4801      	ldr	r0, [pc, #4]	; (800856c <__malloc_unlock+0x8>)
 8008566:	f7ff b90b 	b.w	8007780 <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	20001d24 	.word	0x20001d24

08008570 <_Balloc>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	69c6      	ldr	r6, [r0, #28]
 8008574:	4604      	mov	r4, r0
 8008576:	460d      	mov	r5, r1
 8008578:	b976      	cbnz	r6, 8008598 <_Balloc+0x28>
 800857a:	2010      	movs	r0, #16
 800857c:	f7ff ff44 	bl	8008408 <malloc>
 8008580:	4602      	mov	r2, r0
 8008582:	61e0      	str	r0, [r4, #28]
 8008584:	b920      	cbnz	r0, 8008590 <_Balloc+0x20>
 8008586:	4b18      	ldr	r3, [pc, #96]	; (80085e8 <_Balloc+0x78>)
 8008588:	4818      	ldr	r0, [pc, #96]	; (80085ec <_Balloc+0x7c>)
 800858a:	216b      	movs	r1, #107	; 0x6b
 800858c:	f000 ff84 	bl	8009498 <__assert_func>
 8008590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008594:	6006      	str	r6, [r0, #0]
 8008596:	60c6      	str	r6, [r0, #12]
 8008598:	69e6      	ldr	r6, [r4, #28]
 800859a:	68f3      	ldr	r3, [r6, #12]
 800859c:	b183      	cbz	r3, 80085c0 <_Balloc+0x50>
 800859e:	69e3      	ldr	r3, [r4, #28]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085a6:	b9b8      	cbnz	r0, 80085d8 <_Balloc+0x68>
 80085a8:	2101      	movs	r1, #1
 80085aa:	fa01 f605 	lsl.w	r6, r1, r5
 80085ae:	1d72      	adds	r2, r6, #5
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 ff8e 	bl	80094d4 <_calloc_r>
 80085b8:	b160      	cbz	r0, 80085d4 <_Balloc+0x64>
 80085ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085be:	e00e      	b.n	80085de <_Balloc+0x6e>
 80085c0:	2221      	movs	r2, #33	; 0x21
 80085c2:	2104      	movs	r1, #4
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 ff85 	bl	80094d4 <_calloc_r>
 80085ca:	69e3      	ldr	r3, [r4, #28]
 80085cc:	60f0      	str	r0, [r6, #12]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e4      	bne.n	800859e <_Balloc+0x2e>
 80085d4:	2000      	movs	r0, #0
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	6802      	ldr	r2, [r0, #0]
 80085da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085de:	2300      	movs	r3, #0
 80085e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085e4:	e7f7      	b.n	80085d6 <_Balloc+0x66>
 80085e6:	bf00      	nop
 80085e8:	08009eb9 	.word	0x08009eb9
 80085ec:	08009f39 	.word	0x08009f39

080085f0 <_Bfree>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	69c6      	ldr	r6, [r0, #28]
 80085f4:	4605      	mov	r5, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	b976      	cbnz	r6, 8008618 <_Bfree+0x28>
 80085fa:	2010      	movs	r0, #16
 80085fc:	f7ff ff04 	bl	8008408 <malloc>
 8008600:	4602      	mov	r2, r0
 8008602:	61e8      	str	r0, [r5, #28]
 8008604:	b920      	cbnz	r0, 8008610 <_Bfree+0x20>
 8008606:	4b09      	ldr	r3, [pc, #36]	; (800862c <_Bfree+0x3c>)
 8008608:	4809      	ldr	r0, [pc, #36]	; (8008630 <_Bfree+0x40>)
 800860a:	218f      	movs	r1, #143	; 0x8f
 800860c:	f000 ff44 	bl	8009498 <__assert_func>
 8008610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008614:	6006      	str	r6, [r0, #0]
 8008616:	60c6      	str	r6, [r0, #12]
 8008618:	b13c      	cbz	r4, 800862a <_Bfree+0x3a>
 800861a:	69eb      	ldr	r3, [r5, #28]
 800861c:	6862      	ldr	r2, [r4, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008624:	6021      	str	r1, [r4, #0]
 8008626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	08009eb9 	.word	0x08009eb9
 8008630:	08009f39 	.word	0x08009f39

08008634 <__multadd>:
 8008634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008638:	690d      	ldr	r5, [r1, #16]
 800863a:	4607      	mov	r7, r0
 800863c:	460c      	mov	r4, r1
 800863e:	461e      	mov	r6, r3
 8008640:	f101 0c14 	add.w	ip, r1, #20
 8008644:	2000      	movs	r0, #0
 8008646:	f8dc 3000 	ldr.w	r3, [ip]
 800864a:	b299      	uxth	r1, r3
 800864c:	fb02 6101 	mla	r1, r2, r1, r6
 8008650:	0c1e      	lsrs	r6, r3, #16
 8008652:	0c0b      	lsrs	r3, r1, #16
 8008654:	fb02 3306 	mla	r3, r2, r6, r3
 8008658:	b289      	uxth	r1, r1
 800865a:	3001      	adds	r0, #1
 800865c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008660:	4285      	cmp	r5, r0
 8008662:	f84c 1b04 	str.w	r1, [ip], #4
 8008666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800866a:	dcec      	bgt.n	8008646 <__multadd+0x12>
 800866c:	b30e      	cbz	r6, 80086b2 <__multadd+0x7e>
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	42ab      	cmp	r3, r5
 8008672:	dc19      	bgt.n	80086a8 <__multadd+0x74>
 8008674:	6861      	ldr	r1, [r4, #4]
 8008676:	4638      	mov	r0, r7
 8008678:	3101      	adds	r1, #1
 800867a:	f7ff ff79 	bl	8008570 <_Balloc>
 800867e:	4680      	mov	r8, r0
 8008680:	b928      	cbnz	r0, 800868e <__multadd+0x5a>
 8008682:	4602      	mov	r2, r0
 8008684:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <__multadd+0x84>)
 8008686:	480d      	ldr	r0, [pc, #52]	; (80086bc <__multadd+0x88>)
 8008688:	21ba      	movs	r1, #186	; 0xba
 800868a:	f000 ff05 	bl	8009498 <__assert_func>
 800868e:	6922      	ldr	r2, [r4, #16]
 8008690:	3202      	adds	r2, #2
 8008692:	f104 010c 	add.w	r1, r4, #12
 8008696:	0092      	lsls	r2, r2, #2
 8008698:	300c      	adds	r0, #12
 800869a:	f000 feef 	bl	800947c <memcpy>
 800869e:	4621      	mov	r1, r4
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ffa5 	bl	80085f0 <_Bfree>
 80086a6:	4644      	mov	r4, r8
 80086a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086ac:	3501      	adds	r5, #1
 80086ae:	615e      	str	r6, [r3, #20]
 80086b0:	6125      	str	r5, [r4, #16]
 80086b2:	4620      	mov	r0, r4
 80086b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b8:	08009f28 	.word	0x08009f28
 80086bc:	08009f39 	.word	0x08009f39

080086c0 <__hi0bits>:
 80086c0:	0c03      	lsrs	r3, r0, #16
 80086c2:	041b      	lsls	r3, r3, #16
 80086c4:	b9d3      	cbnz	r3, 80086fc <__hi0bits+0x3c>
 80086c6:	0400      	lsls	r0, r0, #16
 80086c8:	2310      	movs	r3, #16
 80086ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086ce:	bf04      	itt	eq
 80086d0:	0200      	lsleq	r0, r0, #8
 80086d2:	3308      	addeq	r3, #8
 80086d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086d8:	bf04      	itt	eq
 80086da:	0100      	lsleq	r0, r0, #4
 80086dc:	3304      	addeq	r3, #4
 80086de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086e2:	bf04      	itt	eq
 80086e4:	0080      	lsleq	r0, r0, #2
 80086e6:	3302      	addeq	r3, #2
 80086e8:	2800      	cmp	r0, #0
 80086ea:	db05      	blt.n	80086f8 <__hi0bits+0x38>
 80086ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086f0:	f103 0301 	add.w	r3, r3, #1
 80086f4:	bf08      	it	eq
 80086f6:	2320      	moveq	r3, #32
 80086f8:	4618      	mov	r0, r3
 80086fa:	4770      	bx	lr
 80086fc:	2300      	movs	r3, #0
 80086fe:	e7e4      	b.n	80086ca <__hi0bits+0xa>

08008700 <__lo0bits>:
 8008700:	6803      	ldr	r3, [r0, #0]
 8008702:	f013 0207 	ands.w	r2, r3, #7
 8008706:	d00c      	beq.n	8008722 <__lo0bits+0x22>
 8008708:	07d9      	lsls	r1, r3, #31
 800870a:	d422      	bmi.n	8008752 <__lo0bits+0x52>
 800870c:	079a      	lsls	r2, r3, #30
 800870e:	bf49      	itett	mi
 8008710:	085b      	lsrmi	r3, r3, #1
 8008712:	089b      	lsrpl	r3, r3, #2
 8008714:	6003      	strmi	r3, [r0, #0]
 8008716:	2201      	movmi	r2, #1
 8008718:	bf5c      	itt	pl
 800871a:	6003      	strpl	r3, [r0, #0]
 800871c:	2202      	movpl	r2, #2
 800871e:	4610      	mov	r0, r2
 8008720:	4770      	bx	lr
 8008722:	b299      	uxth	r1, r3
 8008724:	b909      	cbnz	r1, 800872a <__lo0bits+0x2a>
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	2210      	movs	r2, #16
 800872a:	b2d9      	uxtb	r1, r3
 800872c:	b909      	cbnz	r1, 8008732 <__lo0bits+0x32>
 800872e:	3208      	adds	r2, #8
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	0719      	lsls	r1, r3, #28
 8008734:	bf04      	itt	eq
 8008736:	091b      	lsreq	r3, r3, #4
 8008738:	3204      	addeq	r2, #4
 800873a:	0799      	lsls	r1, r3, #30
 800873c:	bf04      	itt	eq
 800873e:	089b      	lsreq	r3, r3, #2
 8008740:	3202      	addeq	r2, #2
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	d403      	bmi.n	800874e <__lo0bits+0x4e>
 8008746:	085b      	lsrs	r3, r3, #1
 8008748:	f102 0201 	add.w	r2, r2, #1
 800874c:	d003      	beq.n	8008756 <__lo0bits+0x56>
 800874e:	6003      	str	r3, [r0, #0]
 8008750:	e7e5      	b.n	800871e <__lo0bits+0x1e>
 8008752:	2200      	movs	r2, #0
 8008754:	e7e3      	b.n	800871e <__lo0bits+0x1e>
 8008756:	2220      	movs	r2, #32
 8008758:	e7e1      	b.n	800871e <__lo0bits+0x1e>
	...

0800875c <__i2b>:
 800875c:	b510      	push	{r4, lr}
 800875e:	460c      	mov	r4, r1
 8008760:	2101      	movs	r1, #1
 8008762:	f7ff ff05 	bl	8008570 <_Balloc>
 8008766:	4602      	mov	r2, r0
 8008768:	b928      	cbnz	r0, 8008776 <__i2b+0x1a>
 800876a:	4b05      	ldr	r3, [pc, #20]	; (8008780 <__i2b+0x24>)
 800876c:	4805      	ldr	r0, [pc, #20]	; (8008784 <__i2b+0x28>)
 800876e:	f240 1145 	movw	r1, #325	; 0x145
 8008772:	f000 fe91 	bl	8009498 <__assert_func>
 8008776:	2301      	movs	r3, #1
 8008778:	6144      	str	r4, [r0, #20]
 800877a:	6103      	str	r3, [r0, #16]
 800877c:	bd10      	pop	{r4, pc}
 800877e:	bf00      	nop
 8008780:	08009f28 	.word	0x08009f28
 8008784:	08009f39 	.word	0x08009f39

08008788 <__multiply>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	4691      	mov	r9, r2
 800878e:	690a      	ldr	r2, [r1, #16]
 8008790:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008794:	429a      	cmp	r2, r3
 8008796:	bfb8      	it	lt
 8008798:	460b      	movlt	r3, r1
 800879a:	460c      	mov	r4, r1
 800879c:	bfbc      	itt	lt
 800879e:	464c      	movlt	r4, r9
 80087a0:	4699      	movlt	r9, r3
 80087a2:	6927      	ldr	r7, [r4, #16]
 80087a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087a8:	68a3      	ldr	r3, [r4, #8]
 80087aa:	6861      	ldr	r1, [r4, #4]
 80087ac:	eb07 060a 	add.w	r6, r7, sl
 80087b0:	42b3      	cmp	r3, r6
 80087b2:	b085      	sub	sp, #20
 80087b4:	bfb8      	it	lt
 80087b6:	3101      	addlt	r1, #1
 80087b8:	f7ff feda 	bl	8008570 <_Balloc>
 80087bc:	b930      	cbnz	r0, 80087cc <__multiply+0x44>
 80087be:	4602      	mov	r2, r0
 80087c0:	4b44      	ldr	r3, [pc, #272]	; (80088d4 <__multiply+0x14c>)
 80087c2:	4845      	ldr	r0, [pc, #276]	; (80088d8 <__multiply+0x150>)
 80087c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80087c8:	f000 fe66 	bl	8009498 <__assert_func>
 80087cc:	f100 0514 	add.w	r5, r0, #20
 80087d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087d4:	462b      	mov	r3, r5
 80087d6:	2200      	movs	r2, #0
 80087d8:	4543      	cmp	r3, r8
 80087da:	d321      	bcc.n	8008820 <__multiply+0x98>
 80087dc:	f104 0314 	add.w	r3, r4, #20
 80087e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087e4:	f109 0314 	add.w	r3, r9, #20
 80087e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087ec:	9202      	str	r2, [sp, #8]
 80087ee:	1b3a      	subs	r2, r7, r4
 80087f0:	3a15      	subs	r2, #21
 80087f2:	f022 0203 	bic.w	r2, r2, #3
 80087f6:	3204      	adds	r2, #4
 80087f8:	f104 0115 	add.w	r1, r4, #21
 80087fc:	428f      	cmp	r7, r1
 80087fe:	bf38      	it	cc
 8008800:	2204      	movcc	r2, #4
 8008802:	9201      	str	r2, [sp, #4]
 8008804:	9a02      	ldr	r2, [sp, #8]
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	429a      	cmp	r2, r3
 800880a:	d80c      	bhi.n	8008826 <__multiply+0x9e>
 800880c:	2e00      	cmp	r6, #0
 800880e:	dd03      	ble.n	8008818 <__multiply+0x90>
 8008810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008814:	2b00      	cmp	r3, #0
 8008816:	d05b      	beq.n	80088d0 <__multiply+0x148>
 8008818:	6106      	str	r6, [r0, #16]
 800881a:	b005      	add	sp, #20
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	f843 2b04 	str.w	r2, [r3], #4
 8008824:	e7d8      	b.n	80087d8 <__multiply+0x50>
 8008826:	f8b3 a000 	ldrh.w	sl, [r3]
 800882a:	f1ba 0f00 	cmp.w	sl, #0
 800882e:	d024      	beq.n	800887a <__multiply+0xf2>
 8008830:	f104 0e14 	add.w	lr, r4, #20
 8008834:	46a9      	mov	r9, r5
 8008836:	f04f 0c00 	mov.w	ip, #0
 800883a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800883e:	f8d9 1000 	ldr.w	r1, [r9]
 8008842:	fa1f fb82 	uxth.w	fp, r2
 8008846:	b289      	uxth	r1, r1
 8008848:	fb0a 110b 	mla	r1, sl, fp, r1
 800884c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008850:	f8d9 2000 	ldr.w	r2, [r9]
 8008854:	4461      	add	r1, ip
 8008856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800885a:	fb0a c20b 	mla	r2, sl, fp, ip
 800885e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008862:	b289      	uxth	r1, r1
 8008864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008868:	4577      	cmp	r7, lr
 800886a:	f849 1b04 	str.w	r1, [r9], #4
 800886e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008872:	d8e2      	bhi.n	800883a <__multiply+0xb2>
 8008874:	9a01      	ldr	r2, [sp, #4]
 8008876:	f845 c002 	str.w	ip, [r5, r2]
 800887a:	9a03      	ldr	r2, [sp, #12]
 800887c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008880:	3304      	adds	r3, #4
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	d021      	beq.n	80088cc <__multiply+0x144>
 8008888:	6829      	ldr	r1, [r5, #0]
 800888a:	f104 0c14 	add.w	ip, r4, #20
 800888e:	46ae      	mov	lr, r5
 8008890:	f04f 0a00 	mov.w	sl, #0
 8008894:	f8bc b000 	ldrh.w	fp, [ip]
 8008898:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800889c:	fb09 220b 	mla	r2, r9, fp, r2
 80088a0:	4452      	add	r2, sl
 80088a2:	b289      	uxth	r1, r1
 80088a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088a8:	f84e 1b04 	str.w	r1, [lr], #4
 80088ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088b4:	f8be 1000 	ldrh.w	r1, [lr]
 80088b8:	fb09 110a 	mla	r1, r9, sl, r1
 80088bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80088c0:	4567      	cmp	r7, ip
 80088c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088c6:	d8e5      	bhi.n	8008894 <__multiply+0x10c>
 80088c8:	9a01      	ldr	r2, [sp, #4]
 80088ca:	50a9      	str	r1, [r5, r2]
 80088cc:	3504      	adds	r5, #4
 80088ce:	e799      	b.n	8008804 <__multiply+0x7c>
 80088d0:	3e01      	subs	r6, #1
 80088d2:	e79b      	b.n	800880c <__multiply+0x84>
 80088d4:	08009f28 	.word	0x08009f28
 80088d8:	08009f39 	.word	0x08009f39

080088dc <__pow5mult>:
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e0:	4615      	mov	r5, r2
 80088e2:	f012 0203 	ands.w	r2, r2, #3
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	d007      	beq.n	80088fc <__pow5mult+0x20>
 80088ec:	4c25      	ldr	r4, [pc, #148]	; (8008984 <__pow5mult+0xa8>)
 80088ee:	3a01      	subs	r2, #1
 80088f0:	2300      	movs	r3, #0
 80088f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088f6:	f7ff fe9d 	bl	8008634 <__multadd>
 80088fa:	4607      	mov	r7, r0
 80088fc:	10ad      	asrs	r5, r5, #2
 80088fe:	d03d      	beq.n	800897c <__pow5mult+0xa0>
 8008900:	69f4      	ldr	r4, [r6, #28]
 8008902:	b97c      	cbnz	r4, 8008924 <__pow5mult+0x48>
 8008904:	2010      	movs	r0, #16
 8008906:	f7ff fd7f 	bl	8008408 <malloc>
 800890a:	4602      	mov	r2, r0
 800890c:	61f0      	str	r0, [r6, #28]
 800890e:	b928      	cbnz	r0, 800891c <__pow5mult+0x40>
 8008910:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <__pow5mult+0xac>)
 8008912:	481e      	ldr	r0, [pc, #120]	; (800898c <__pow5mult+0xb0>)
 8008914:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008918:	f000 fdbe 	bl	8009498 <__assert_func>
 800891c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008920:	6004      	str	r4, [r0, #0]
 8008922:	60c4      	str	r4, [r0, #12]
 8008924:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800892c:	b94c      	cbnz	r4, 8008942 <__pow5mult+0x66>
 800892e:	f240 2171 	movw	r1, #625	; 0x271
 8008932:	4630      	mov	r0, r6
 8008934:	f7ff ff12 	bl	800875c <__i2b>
 8008938:	2300      	movs	r3, #0
 800893a:	f8c8 0008 	str.w	r0, [r8, #8]
 800893e:	4604      	mov	r4, r0
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	07eb      	lsls	r3, r5, #31
 8008948:	d50a      	bpl.n	8008960 <__pow5mult+0x84>
 800894a:	4639      	mov	r1, r7
 800894c:	4622      	mov	r2, r4
 800894e:	4630      	mov	r0, r6
 8008950:	f7ff ff1a 	bl	8008788 <__multiply>
 8008954:	4639      	mov	r1, r7
 8008956:	4680      	mov	r8, r0
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff fe49 	bl	80085f0 <_Bfree>
 800895e:	4647      	mov	r7, r8
 8008960:	106d      	asrs	r5, r5, #1
 8008962:	d00b      	beq.n	800897c <__pow5mult+0xa0>
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	b938      	cbnz	r0, 8008978 <__pow5mult+0x9c>
 8008968:	4622      	mov	r2, r4
 800896a:	4621      	mov	r1, r4
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff ff0b 	bl	8008788 <__multiply>
 8008972:	6020      	str	r0, [r4, #0]
 8008974:	f8c0 9000 	str.w	r9, [r0]
 8008978:	4604      	mov	r4, r0
 800897a:	e7e4      	b.n	8008946 <__pow5mult+0x6a>
 800897c:	4638      	mov	r0, r7
 800897e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008982:	bf00      	nop
 8008984:	0800a088 	.word	0x0800a088
 8008988:	08009eb9 	.word	0x08009eb9
 800898c:	08009f39 	.word	0x08009f39

08008990 <__lshift>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	6849      	ldr	r1, [r1, #4]
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	4607      	mov	r7, r0
 80089a2:	4691      	mov	r9, r2
 80089a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089a8:	f108 0601 	add.w	r6, r8, #1
 80089ac:	42b3      	cmp	r3, r6
 80089ae:	db0b      	blt.n	80089c8 <__lshift+0x38>
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff fddd 	bl	8008570 <_Balloc>
 80089b6:	4605      	mov	r5, r0
 80089b8:	b948      	cbnz	r0, 80089ce <__lshift+0x3e>
 80089ba:	4602      	mov	r2, r0
 80089bc:	4b28      	ldr	r3, [pc, #160]	; (8008a60 <__lshift+0xd0>)
 80089be:	4829      	ldr	r0, [pc, #164]	; (8008a64 <__lshift+0xd4>)
 80089c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80089c4:	f000 fd68 	bl	8009498 <__assert_func>
 80089c8:	3101      	adds	r1, #1
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	e7ee      	b.n	80089ac <__lshift+0x1c>
 80089ce:	2300      	movs	r3, #0
 80089d0:	f100 0114 	add.w	r1, r0, #20
 80089d4:	f100 0210 	add.w	r2, r0, #16
 80089d8:	4618      	mov	r0, r3
 80089da:	4553      	cmp	r3, sl
 80089dc:	db33      	blt.n	8008a46 <__lshift+0xb6>
 80089de:	6920      	ldr	r0, [r4, #16]
 80089e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089e4:	f104 0314 	add.w	r3, r4, #20
 80089e8:	f019 091f 	ands.w	r9, r9, #31
 80089ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089f4:	d02b      	beq.n	8008a4e <__lshift+0xbe>
 80089f6:	f1c9 0e20 	rsb	lr, r9, #32
 80089fa:	468a      	mov	sl, r1
 80089fc:	2200      	movs	r2, #0
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	fa00 f009 	lsl.w	r0, r0, r9
 8008a04:	4310      	orrs	r0, r2
 8008a06:	f84a 0b04 	str.w	r0, [sl], #4
 8008a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0e:	459c      	cmp	ip, r3
 8008a10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a14:	d8f3      	bhi.n	80089fe <__lshift+0x6e>
 8008a16:	ebac 0304 	sub.w	r3, ip, r4
 8008a1a:	3b15      	subs	r3, #21
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	3304      	adds	r3, #4
 8008a22:	f104 0015 	add.w	r0, r4, #21
 8008a26:	4584      	cmp	ip, r0
 8008a28:	bf38      	it	cc
 8008a2a:	2304      	movcc	r3, #4
 8008a2c:	50ca      	str	r2, [r1, r3]
 8008a2e:	b10a      	cbz	r2, 8008a34 <__lshift+0xa4>
 8008a30:	f108 0602 	add.w	r6, r8, #2
 8008a34:	3e01      	subs	r6, #1
 8008a36:	4638      	mov	r0, r7
 8008a38:	612e      	str	r6, [r5, #16]
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	f7ff fdd8 	bl	80085f0 <_Bfree>
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	e7c5      	b.n	80089da <__lshift+0x4a>
 8008a4e:	3904      	subs	r1, #4
 8008a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a54:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a58:	459c      	cmp	ip, r3
 8008a5a:	d8f9      	bhi.n	8008a50 <__lshift+0xc0>
 8008a5c:	e7ea      	b.n	8008a34 <__lshift+0xa4>
 8008a5e:	bf00      	nop
 8008a60:	08009f28 	.word	0x08009f28
 8008a64:	08009f39 	.word	0x08009f39

08008a68 <__mcmp>:
 8008a68:	b530      	push	{r4, r5, lr}
 8008a6a:	6902      	ldr	r2, [r0, #16]
 8008a6c:	690c      	ldr	r4, [r1, #16]
 8008a6e:	1b12      	subs	r2, r2, r4
 8008a70:	d10e      	bne.n	8008a90 <__mcmp+0x28>
 8008a72:	f100 0314 	add.w	r3, r0, #20
 8008a76:	3114      	adds	r1, #20
 8008a78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a88:	42a5      	cmp	r5, r4
 8008a8a:	d003      	beq.n	8008a94 <__mcmp+0x2c>
 8008a8c:	d305      	bcc.n	8008a9a <__mcmp+0x32>
 8008a8e:	2201      	movs	r2, #1
 8008a90:	4610      	mov	r0, r2
 8008a92:	bd30      	pop	{r4, r5, pc}
 8008a94:	4283      	cmp	r3, r0
 8008a96:	d3f3      	bcc.n	8008a80 <__mcmp+0x18>
 8008a98:	e7fa      	b.n	8008a90 <__mcmp+0x28>
 8008a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9e:	e7f7      	b.n	8008a90 <__mcmp+0x28>

08008aa0 <__mdiff>:
 8008aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4690      	mov	r8, r2
 8008aae:	f7ff ffdb 	bl	8008a68 <__mcmp>
 8008ab2:	1e05      	subs	r5, r0, #0
 8008ab4:	d110      	bne.n	8008ad8 <__mdiff+0x38>
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff fd59 	bl	8008570 <_Balloc>
 8008abe:	b930      	cbnz	r0, 8008ace <__mdiff+0x2e>
 8008ac0:	4b3a      	ldr	r3, [pc, #232]	; (8008bac <__mdiff+0x10c>)
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	f240 2137 	movw	r1, #567	; 0x237
 8008ac8:	4839      	ldr	r0, [pc, #228]	; (8008bb0 <__mdiff+0x110>)
 8008aca:	f000 fce5 	bl	8009498 <__assert_func>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	bfa4      	itt	ge
 8008ada:	4643      	movge	r3, r8
 8008adc:	46a0      	movge	r8, r4
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ae4:	bfa6      	itte	ge
 8008ae6:	461c      	movge	r4, r3
 8008ae8:	2500      	movge	r5, #0
 8008aea:	2501      	movlt	r5, #1
 8008aec:	f7ff fd40 	bl	8008570 <_Balloc>
 8008af0:	b920      	cbnz	r0, 8008afc <__mdiff+0x5c>
 8008af2:	4b2e      	ldr	r3, [pc, #184]	; (8008bac <__mdiff+0x10c>)
 8008af4:	4602      	mov	r2, r0
 8008af6:	f240 2145 	movw	r1, #581	; 0x245
 8008afa:	e7e5      	b.n	8008ac8 <__mdiff+0x28>
 8008afc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b00:	6926      	ldr	r6, [r4, #16]
 8008b02:	60c5      	str	r5, [r0, #12]
 8008b04:	f104 0914 	add.w	r9, r4, #20
 8008b08:	f108 0514 	add.w	r5, r8, #20
 8008b0c:	f100 0e14 	add.w	lr, r0, #20
 8008b10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b18:	f108 0210 	add.w	r2, r8, #16
 8008b1c:	46f2      	mov	sl, lr
 8008b1e:	2100      	movs	r1, #0
 8008b20:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b28:	fa11 f88b 	uxtah	r8, r1, fp
 8008b2c:	b299      	uxth	r1, r3
 8008b2e:	0c1b      	lsrs	r3, r3, #16
 8008b30:	eba8 0801 	sub.w	r8, r8, r1
 8008b34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b3c:	fa1f f888 	uxth.w	r8, r8
 8008b40:	1419      	asrs	r1, r3, #16
 8008b42:	454e      	cmp	r6, r9
 8008b44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b48:	f84a 3b04 	str.w	r3, [sl], #4
 8008b4c:	d8e8      	bhi.n	8008b20 <__mdiff+0x80>
 8008b4e:	1b33      	subs	r3, r6, r4
 8008b50:	3b15      	subs	r3, #21
 8008b52:	f023 0303 	bic.w	r3, r3, #3
 8008b56:	3304      	adds	r3, #4
 8008b58:	3415      	adds	r4, #21
 8008b5a:	42a6      	cmp	r6, r4
 8008b5c:	bf38      	it	cc
 8008b5e:	2304      	movcc	r3, #4
 8008b60:	441d      	add	r5, r3
 8008b62:	4473      	add	r3, lr
 8008b64:	469e      	mov	lr, r3
 8008b66:	462e      	mov	r6, r5
 8008b68:	4566      	cmp	r6, ip
 8008b6a:	d30e      	bcc.n	8008b8a <__mdiff+0xea>
 8008b6c:	f10c 0203 	add.w	r2, ip, #3
 8008b70:	1b52      	subs	r2, r2, r5
 8008b72:	f022 0203 	bic.w	r2, r2, #3
 8008b76:	3d03      	subs	r5, #3
 8008b78:	45ac      	cmp	ip, r5
 8008b7a:	bf38      	it	cc
 8008b7c:	2200      	movcc	r2, #0
 8008b7e:	4413      	add	r3, r2
 8008b80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008b84:	b17a      	cbz	r2, 8008ba6 <__mdiff+0x106>
 8008b86:	6107      	str	r7, [r0, #16]
 8008b88:	e7a4      	b.n	8008ad4 <__mdiff+0x34>
 8008b8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b8e:	fa11 f288 	uxtah	r2, r1, r8
 8008b92:	1414      	asrs	r4, r2, #16
 8008b94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b98:	b292      	uxth	r2, r2
 8008b9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b9e:	f84e 2b04 	str.w	r2, [lr], #4
 8008ba2:	1421      	asrs	r1, r4, #16
 8008ba4:	e7e0      	b.n	8008b68 <__mdiff+0xc8>
 8008ba6:	3f01      	subs	r7, #1
 8008ba8:	e7ea      	b.n	8008b80 <__mdiff+0xe0>
 8008baa:	bf00      	nop
 8008bac:	08009f28 	.word	0x08009f28
 8008bb0:	08009f39 	.word	0x08009f39

08008bb4 <__d2b>:
 8008bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bb8:	460f      	mov	r7, r1
 8008bba:	2101      	movs	r1, #1
 8008bbc:	ec59 8b10 	vmov	r8, r9, d0
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	f7ff fcd5 	bl	8008570 <_Balloc>
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	b930      	cbnz	r0, 8008bd8 <__d2b+0x24>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	4b24      	ldr	r3, [pc, #144]	; (8008c60 <__d2b+0xac>)
 8008bce:	4825      	ldr	r0, [pc, #148]	; (8008c64 <__d2b+0xb0>)
 8008bd0:	f240 310f 	movw	r1, #783	; 0x30f
 8008bd4:	f000 fc60 	bl	8009498 <__assert_func>
 8008bd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008be0:	bb2d      	cbnz	r5, 8008c2e <__d2b+0x7a>
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f1b8 0300 	subs.w	r3, r8, #0
 8008be8:	d026      	beq.n	8008c38 <__d2b+0x84>
 8008bea:	4668      	mov	r0, sp
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	f7ff fd87 	bl	8008700 <__lo0bits>
 8008bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bf6:	b1e8      	cbz	r0, 8008c34 <__d2b+0x80>
 8008bf8:	f1c0 0320 	rsb	r3, r0, #32
 8008bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008c00:	430b      	orrs	r3, r1
 8008c02:	40c2      	lsrs	r2, r0
 8008c04:	6163      	str	r3, [r4, #20]
 8008c06:	9201      	str	r2, [sp, #4]
 8008c08:	9b01      	ldr	r3, [sp, #4]
 8008c0a:	61a3      	str	r3, [r4, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bf14      	ite	ne
 8008c10:	2202      	movne	r2, #2
 8008c12:	2201      	moveq	r2, #1
 8008c14:	6122      	str	r2, [r4, #16]
 8008c16:	b1bd      	cbz	r5, 8008c48 <__d2b+0x94>
 8008c18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c1c:	4405      	add	r5, r0
 8008c1e:	603d      	str	r5, [r7, #0]
 8008c20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c24:	6030      	str	r0, [r6, #0]
 8008c26:	4620      	mov	r0, r4
 8008c28:	b003      	add	sp, #12
 8008c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c32:	e7d6      	b.n	8008be2 <__d2b+0x2e>
 8008c34:	6161      	str	r1, [r4, #20]
 8008c36:	e7e7      	b.n	8008c08 <__d2b+0x54>
 8008c38:	a801      	add	r0, sp, #4
 8008c3a:	f7ff fd61 	bl	8008700 <__lo0bits>
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	6163      	str	r3, [r4, #20]
 8008c42:	3020      	adds	r0, #32
 8008c44:	2201      	movs	r2, #1
 8008c46:	e7e5      	b.n	8008c14 <__d2b+0x60>
 8008c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c50:	6038      	str	r0, [r7, #0]
 8008c52:	6918      	ldr	r0, [r3, #16]
 8008c54:	f7ff fd34 	bl	80086c0 <__hi0bits>
 8008c58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c5c:	e7e2      	b.n	8008c24 <__d2b+0x70>
 8008c5e:	bf00      	nop
 8008c60:	08009f28 	.word	0x08009f28
 8008c64:	08009f39 	.word	0x08009f39

08008c68 <__ssputs_r>:
 8008c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	688e      	ldr	r6, [r1, #8]
 8008c6e:	461f      	mov	r7, r3
 8008c70:	42be      	cmp	r6, r7
 8008c72:	680b      	ldr	r3, [r1, #0]
 8008c74:	4682      	mov	sl, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	4690      	mov	r8, r2
 8008c7a:	d82c      	bhi.n	8008cd6 <__ssputs_r+0x6e>
 8008c7c:	898a      	ldrh	r2, [r1, #12]
 8008c7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c82:	d026      	beq.n	8008cd2 <__ssputs_r+0x6a>
 8008c84:	6965      	ldr	r5, [r4, #20]
 8008c86:	6909      	ldr	r1, [r1, #16]
 8008c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c8c:	eba3 0901 	sub.w	r9, r3, r1
 8008c90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c94:	1c7b      	adds	r3, r7, #1
 8008c96:	444b      	add	r3, r9
 8008c98:	106d      	asrs	r5, r5, #1
 8008c9a:	429d      	cmp	r5, r3
 8008c9c:	bf38      	it	cc
 8008c9e:	461d      	movcc	r5, r3
 8008ca0:	0553      	lsls	r3, r2, #21
 8008ca2:	d527      	bpl.n	8008cf4 <__ssputs_r+0x8c>
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7ff fbd7 	bl	8008458 <_malloc_r>
 8008caa:	4606      	mov	r6, r0
 8008cac:	b360      	cbz	r0, 8008d08 <__ssputs_r+0xa0>
 8008cae:	6921      	ldr	r1, [r4, #16]
 8008cb0:	464a      	mov	r2, r9
 8008cb2:	f000 fbe3 	bl	800947c <memcpy>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	6126      	str	r6, [r4, #16]
 8008cc4:	6165      	str	r5, [r4, #20]
 8008cc6:	444e      	add	r6, r9
 8008cc8:	eba5 0509 	sub.w	r5, r5, r9
 8008ccc:	6026      	str	r6, [r4, #0]
 8008cce:	60a5      	str	r5, [r4, #8]
 8008cd0:	463e      	mov	r6, r7
 8008cd2:	42be      	cmp	r6, r7
 8008cd4:	d900      	bls.n	8008cd8 <__ssputs_r+0x70>
 8008cd6:	463e      	mov	r6, r7
 8008cd8:	6820      	ldr	r0, [r4, #0]
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4641      	mov	r1, r8
 8008cde:	f000 fba3 	bl	8009428 <memmove>
 8008ce2:	68a3      	ldr	r3, [r4, #8]
 8008ce4:	1b9b      	subs	r3, r3, r6
 8008ce6:	60a3      	str	r3, [r4, #8]
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	4433      	add	r3, r6
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	2000      	movs	r0, #0
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	462a      	mov	r2, r5
 8008cf6:	f000 fc15 	bl	8009524 <_realloc_r>
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1e0      	bne.n	8008cc2 <__ssputs_r+0x5a>
 8008d00:	6921      	ldr	r1, [r4, #16]
 8008d02:	4650      	mov	r0, sl
 8008d04:	f7ff fb34 	bl	8008370 <_free_r>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	f8ca 3000 	str.w	r3, [sl]
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d14:	81a3      	strh	r3, [r4, #12]
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1a:	e7e9      	b.n	8008cf0 <__ssputs_r+0x88>

08008d1c <_svfiprintf_r>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	4698      	mov	r8, r3
 8008d22:	898b      	ldrh	r3, [r1, #12]
 8008d24:	061b      	lsls	r3, r3, #24
 8008d26:	b09d      	sub	sp, #116	; 0x74
 8008d28:	4607      	mov	r7, r0
 8008d2a:	460d      	mov	r5, r1
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	d50e      	bpl.n	8008d4e <_svfiprintf_r+0x32>
 8008d30:	690b      	ldr	r3, [r1, #16]
 8008d32:	b963      	cbnz	r3, 8008d4e <_svfiprintf_r+0x32>
 8008d34:	2140      	movs	r1, #64	; 0x40
 8008d36:	f7ff fb8f 	bl	8008458 <_malloc_r>
 8008d3a:	6028      	str	r0, [r5, #0]
 8008d3c:	6128      	str	r0, [r5, #16]
 8008d3e:	b920      	cbnz	r0, 8008d4a <_svfiprintf_r+0x2e>
 8008d40:	230c      	movs	r3, #12
 8008d42:	603b      	str	r3, [r7, #0]
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	e0d0      	b.n	8008eec <_svfiprintf_r+0x1d0>
 8008d4a:	2340      	movs	r3, #64	; 0x40
 8008d4c:	616b      	str	r3, [r5, #20]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	9309      	str	r3, [sp, #36]	; 0x24
 8008d52:	2320      	movs	r3, #32
 8008d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d5c:	2330      	movs	r3, #48	; 0x30
 8008d5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f04 <_svfiprintf_r+0x1e8>
 8008d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d66:	f04f 0901 	mov.w	r9, #1
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	469a      	mov	sl, r3
 8008d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d72:	b10a      	cbz	r2, 8008d78 <_svfiprintf_r+0x5c>
 8008d74:	2a25      	cmp	r2, #37	; 0x25
 8008d76:	d1f9      	bne.n	8008d6c <_svfiprintf_r+0x50>
 8008d78:	ebba 0b04 	subs.w	fp, sl, r4
 8008d7c:	d00b      	beq.n	8008d96 <_svfiprintf_r+0x7a>
 8008d7e:	465b      	mov	r3, fp
 8008d80:	4622      	mov	r2, r4
 8008d82:	4629      	mov	r1, r5
 8008d84:	4638      	mov	r0, r7
 8008d86:	f7ff ff6f 	bl	8008c68 <__ssputs_r>
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f000 80a9 	beq.w	8008ee2 <_svfiprintf_r+0x1c6>
 8008d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d92:	445a      	add	r2, fp
 8008d94:	9209      	str	r2, [sp, #36]	; 0x24
 8008d96:	f89a 3000 	ldrb.w	r3, [sl]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80a1 	beq.w	8008ee2 <_svfiprintf_r+0x1c6>
 8008da0:	2300      	movs	r3, #0
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295
 8008da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008daa:	f10a 0a01 	add.w	sl, sl, #1
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	9307      	str	r3, [sp, #28]
 8008db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008db6:	931a      	str	r3, [sp, #104]	; 0x68
 8008db8:	4654      	mov	r4, sl
 8008dba:	2205      	movs	r2, #5
 8008dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc0:	4850      	ldr	r0, [pc, #320]	; (8008f04 <_svfiprintf_r+0x1e8>)
 8008dc2:	f7f7 fa3d 	bl	8000240 <memchr>
 8008dc6:	9a04      	ldr	r2, [sp, #16]
 8008dc8:	b9d8      	cbnz	r0, 8008e02 <_svfiprintf_r+0xe6>
 8008dca:	06d0      	lsls	r0, r2, #27
 8008dcc:	bf44      	itt	mi
 8008dce:	2320      	movmi	r3, #32
 8008dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dd4:	0711      	lsls	r1, r2, #28
 8008dd6:	bf44      	itt	mi
 8008dd8:	232b      	movmi	r3, #43	; 0x2b
 8008dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dde:	f89a 3000 	ldrb.w	r3, [sl]
 8008de2:	2b2a      	cmp	r3, #42	; 0x2a
 8008de4:	d015      	beq.n	8008e12 <_svfiprintf_r+0xf6>
 8008de6:	9a07      	ldr	r2, [sp, #28]
 8008de8:	4654      	mov	r4, sl
 8008dea:	2000      	movs	r0, #0
 8008dec:	f04f 0c0a 	mov.w	ip, #10
 8008df0:	4621      	mov	r1, r4
 8008df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df6:	3b30      	subs	r3, #48	; 0x30
 8008df8:	2b09      	cmp	r3, #9
 8008dfa:	d94d      	bls.n	8008e98 <_svfiprintf_r+0x17c>
 8008dfc:	b1b0      	cbz	r0, 8008e2c <_svfiprintf_r+0x110>
 8008dfe:	9207      	str	r2, [sp, #28]
 8008e00:	e014      	b.n	8008e2c <_svfiprintf_r+0x110>
 8008e02:	eba0 0308 	sub.w	r3, r0, r8
 8008e06:	fa09 f303 	lsl.w	r3, r9, r3
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	46a2      	mov	sl, r4
 8008e10:	e7d2      	b.n	8008db8 <_svfiprintf_r+0x9c>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	1d19      	adds	r1, r3, #4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	9103      	str	r1, [sp, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bfbb      	ittet	lt
 8008e1e:	425b      	neglt	r3, r3
 8008e20:	f042 0202 	orrlt.w	r2, r2, #2
 8008e24:	9307      	strge	r3, [sp, #28]
 8008e26:	9307      	strlt	r3, [sp, #28]
 8008e28:	bfb8      	it	lt
 8008e2a:	9204      	strlt	r2, [sp, #16]
 8008e2c:	7823      	ldrb	r3, [r4, #0]
 8008e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e30:	d10c      	bne.n	8008e4c <_svfiprintf_r+0x130>
 8008e32:	7863      	ldrb	r3, [r4, #1]
 8008e34:	2b2a      	cmp	r3, #42	; 0x2a
 8008e36:	d134      	bne.n	8008ea2 <_svfiprintf_r+0x186>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	1d1a      	adds	r2, r3, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	9203      	str	r2, [sp, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	bfb8      	it	lt
 8008e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e48:	3402      	adds	r4, #2
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f14 <_svfiprintf_r+0x1f8>
 8008e50:	7821      	ldrb	r1, [r4, #0]
 8008e52:	2203      	movs	r2, #3
 8008e54:	4650      	mov	r0, sl
 8008e56:	f7f7 f9f3 	bl	8000240 <memchr>
 8008e5a:	b138      	cbz	r0, 8008e6c <_svfiprintf_r+0x150>
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	eba0 000a 	sub.w	r0, r0, sl
 8008e62:	2240      	movs	r2, #64	; 0x40
 8008e64:	4082      	lsls	r2, r0
 8008e66:	4313      	orrs	r3, r2
 8008e68:	3401      	adds	r4, #1
 8008e6a:	9304      	str	r3, [sp, #16]
 8008e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e70:	4825      	ldr	r0, [pc, #148]	; (8008f08 <_svfiprintf_r+0x1ec>)
 8008e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e76:	2206      	movs	r2, #6
 8008e78:	f7f7 f9e2 	bl	8000240 <memchr>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d038      	beq.n	8008ef2 <_svfiprintf_r+0x1d6>
 8008e80:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <_svfiprintf_r+0x1f0>)
 8008e82:	bb1b      	cbnz	r3, 8008ecc <_svfiprintf_r+0x1b0>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	3307      	adds	r3, #7
 8008e88:	f023 0307 	bic.w	r3, r3, #7
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e92:	4433      	add	r3, r6
 8008e94:	9309      	str	r3, [sp, #36]	; 0x24
 8008e96:	e768      	b.n	8008d6a <_svfiprintf_r+0x4e>
 8008e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	e7a6      	b.n	8008df0 <_svfiprintf_r+0xd4>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	3401      	adds	r4, #1
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f04f 0c0a 	mov.w	ip, #10
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb4:	3a30      	subs	r2, #48	; 0x30
 8008eb6:	2a09      	cmp	r2, #9
 8008eb8:	d903      	bls.n	8008ec2 <_svfiprintf_r+0x1a6>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0c6      	beq.n	8008e4c <_svfiprintf_r+0x130>
 8008ebe:	9105      	str	r1, [sp, #20]
 8008ec0:	e7c4      	b.n	8008e4c <_svfiprintf_r+0x130>
 8008ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e7f0      	b.n	8008eae <_svfiprintf_r+0x192>
 8008ecc:	ab03      	add	r3, sp, #12
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	462a      	mov	r2, r5
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <_svfiprintf_r+0x1f4>)
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f7fd fede 	bl	8006c98 <_printf_float>
 8008edc:	1c42      	adds	r2, r0, #1
 8008ede:	4606      	mov	r6, r0
 8008ee0:	d1d6      	bne.n	8008e90 <_svfiprintf_r+0x174>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	065b      	lsls	r3, r3, #25
 8008ee6:	f53f af2d 	bmi.w	8008d44 <_svfiprintf_r+0x28>
 8008eea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eec:	b01d      	add	sp, #116	; 0x74
 8008eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef2:	ab03      	add	r3, sp, #12
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <_svfiprintf_r+0x1f4>)
 8008efa:	a904      	add	r1, sp, #16
 8008efc:	4638      	mov	r0, r7
 8008efe:	f7fe f953 	bl	80071a8 <_printf_i>
 8008f02:	e7eb      	b.n	8008edc <_svfiprintf_r+0x1c0>
 8008f04:	0800a094 	.word	0x0800a094
 8008f08:	0800a09e 	.word	0x0800a09e
 8008f0c:	08006c99 	.word	0x08006c99
 8008f10:	08008c69 	.word	0x08008c69
 8008f14:	0800a09a 	.word	0x0800a09a

08008f18 <__sfputc_r>:
 8008f18:	6893      	ldr	r3, [r2, #8]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	b410      	push	{r4}
 8008f20:	6093      	str	r3, [r2, #8]
 8008f22:	da08      	bge.n	8008f36 <__sfputc_r+0x1e>
 8008f24:	6994      	ldr	r4, [r2, #24]
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	db01      	blt.n	8008f2e <__sfputc_r+0x16>
 8008f2a:	290a      	cmp	r1, #10
 8008f2c:	d103      	bne.n	8008f36 <__sfputc_r+0x1e>
 8008f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f32:	f000 b9e3 	b.w	80092fc <__swbuf_r>
 8008f36:	6813      	ldr	r3, [r2, #0]
 8008f38:	1c58      	adds	r0, r3, #1
 8008f3a:	6010      	str	r0, [r2, #0]
 8008f3c:	7019      	strb	r1, [r3, #0]
 8008f3e:	4608      	mov	r0, r1
 8008f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <__sfputs_r>:
 8008f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f48:	4606      	mov	r6, r0
 8008f4a:	460f      	mov	r7, r1
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	18d5      	adds	r5, r2, r3
 8008f50:	42ac      	cmp	r4, r5
 8008f52:	d101      	bne.n	8008f58 <__sfputs_r+0x12>
 8008f54:	2000      	movs	r0, #0
 8008f56:	e007      	b.n	8008f68 <__sfputs_r+0x22>
 8008f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5c:	463a      	mov	r2, r7
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7ff ffda 	bl	8008f18 <__sfputc_r>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d1f3      	bne.n	8008f50 <__sfputs_r+0xa>
 8008f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f6c <_vfiprintf_r>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	460d      	mov	r5, r1
 8008f72:	b09d      	sub	sp, #116	; 0x74
 8008f74:	4614      	mov	r4, r2
 8008f76:	4698      	mov	r8, r3
 8008f78:	4606      	mov	r6, r0
 8008f7a:	b118      	cbz	r0, 8008f84 <_vfiprintf_r+0x18>
 8008f7c:	6a03      	ldr	r3, [r0, #32]
 8008f7e:	b90b      	cbnz	r3, 8008f84 <_vfiprintf_r+0x18>
 8008f80:	f7fe fac0 	bl	8007504 <__sinit>
 8008f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f86:	07d9      	lsls	r1, r3, #31
 8008f88:	d405      	bmi.n	8008f96 <_vfiprintf_r+0x2a>
 8008f8a:	89ab      	ldrh	r3, [r5, #12]
 8008f8c:	059a      	lsls	r2, r3, #22
 8008f8e:	d402      	bmi.n	8008f96 <_vfiprintf_r+0x2a>
 8008f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f92:	f7fe fbf4 	bl	800777e <__retarget_lock_acquire_recursive>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	071b      	lsls	r3, r3, #28
 8008f9a:	d501      	bpl.n	8008fa0 <_vfiprintf_r+0x34>
 8008f9c:	692b      	ldr	r3, [r5, #16]
 8008f9e:	b99b      	cbnz	r3, 8008fc8 <_vfiprintf_r+0x5c>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f000 f9e8 	bl	8009378 <__swsetup_r>
 8008fa8:	b170      	cbz	r0, 8008fc8 <_vfiprintf_r+0x5c>
 8008faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fac:	07dc      	lsls	r4, r3, #31
 8008fae:	d504      	bpl.n	8008fba <_vfiprintf_r+0x4e>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	b01d      	add	sp, #116	; 0x74
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	89ab      	ldrh	r3, [r5, #12]
 8008fbc:	0598      	lsls	r0, r3, #22
 8008fbe:	d4f7      	bmi.n	8008fb0 <_vfiprintf_r+0x44>
 8008fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fc2:	f7fe fbdd 	bl	8007780 <__retarget_lock_release_recursive>
 8008fc6:	e7f3      	b.n	8008fb0 <_vfiprintf_r+0x44>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	2320      	movs	r3, #32
 8008fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd6:	2330      	movs	r3, #48	; 0x30
 8008fd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800918c <_vfiprintf_r+0x220>
 8008fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fe0:	f04f 0901 	mov.w	r9, #1
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	469a      	mov	sl, r3
 8008fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fec:	b10a      	cbz	r2, 8008ff2 <_vfiprintf_r+0x86>
 8008fee:	2a25      	cmp	r2, #37	; 0x25
 8008ff0:	d1f9      	bne.n	8008fe6 <_vfiprintf_r+0x7a>
 8008ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff6:	d00b      	beq.n	8009010 <_vfiprintf_r+0xa4>
 8008ff8:	465b      	mov	r3, fp
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7ff ffa1 	bl	8008f46 <__sfputs_r>
 8009004:	3001      	adds	r0, #1
 8009006:	f000 80a9 	beq.w	800915c <_vfiprintf_r+0x1f0>
 800900a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800900c:	445a      	add	r2, fp
 800900e:	9209      	str	r2, [sp, #36]	; 0x24
 8009010:	f89a 3000 	ldrb.w	r3, [sl]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80a1 	beq.w	800915c <_vfiprintf_r+0x1f0>
 800901a:	2300      	movs	r3, #0
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009024:	f10a 0a01 	add.w	sl, sl, #1
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009030:	931a      	str	r3, [sp, #104]	; 0x68
 8009032:	4654      	mov	r4, sl
 8009034:	2205      	movs	r2, #5
 8009036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800903a:	4854      	ldr	r0, [pc, #336]	; (800918c <_vfiprintf_r+0x220>)
 800903c:	f7f7 f900 	bl	8000240 <memchr>
 8009040:	9a04      	ldr	r2, [sp, #16]
 8009042:	b9d8      	cbnz	r0, 800907c <_vfiprintf_r+0x110>
 8009044:	06d1      	lsls	r1, r2, #27
 8009046:	bf44      	itt	mi
 8009048:	2320      	movmi	r3, #32
 800904a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904e:	0713      	lsls	r3, r2, #28
 8009050:	bf44      	itt	mi
 8009052:	232b      	movmi	r3, #43	; 0x2b
 8009054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009058:	f89a 3000 	ldrb.w	r3, [sl]
 800905c:	2b2a      	cmp	r3, #42	; 0x2a
 800905e:	d015      	beq.n	800908c <_vfiprintf_r+0x120>
 8009060:	9a07      	ldr	r2, [sp, #28]
 8009062:	4654      	mov	r4, sl
 8009064:	2000      	movs	r0, #0
 8009066:	f04f 0c0a 	mov.w	ip, #10
 800906a:	4621      	mov	r1, r4
 800906c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009070:	3b30      	subs	r3, #48	; 0x30
 8009072:	2b09      	cmp	r3, #9
 8009074:	d94d      	bls.n	8009112 <_vfiprintf_r+0x1a6>
 8009076:	b1b0      	cbz	r0, 80090a6 <_vfiprintf_r+0x13a>
 8009078:	9207      	str	r2, [sp, #28]
 800907a:	e014      	b.n	80090a6 <_vfiprintf_r+0x13a>
 800907c:	eba0 0308 	sub.w	r3, r0, r8
 8009080:	fa09 f303 	lsl.w	r3, r9, r3
 8009084:	4313      	orrs	r3, r2
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	46a2      	mov	sl, r4
 800908a:	e7d2      	b.n	8009032 <_vfiprintf_r+0xc6>
 800908c:	9b03      	ldr	r3, [sp, #12]
 800908e:	1d19      	adds	r1, r3, #4
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	9103      	str	r1, [sp, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	bfbb      	ittet	lt
 8009098:	425b      	neglt	r3, r3
 800909a:	f042 0202 	orrlt.w	r2, r2, #2
 800909e:	9307      	strge	r3, [sp, #28]
 80090a0:	9307      	strlt	r3, [sp, #28]
 80090a2:	bfb8      	it	lt
 80090a4:	9204      	strlt	r2, [sp, #16]
 80090a6:	7823      	ldrb	r3, [r4, #0]
 80090a8:	2b2e      	cmp	r3, #46	; 0x2e
 80090aa:	d10c      	bne.n	80090c6 <_vfiprintf_r+0x15a>
 80090ac:	7863      	ldrb	r3, [r4, #1]
 80090ae:	2b2a      	cmp	r3, #42	; 0x2a
 80090b0:	d134      	bne.n	800911c <_vfiprintf_r+0x1b0>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	1d1a      	adds	r2, r3, #4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	9203      	str	r2, [sp, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfb8      	it	lt
 80090be:	f04f 33ff 	movlt.w	r3, #4294967295
 80090c2:	3402      	adds	r4, #2
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800919c <_vfiprintf_r+0x230>
 80090ca:	7821      	ldrb	r1, [r4, #0]
 80090cc:	2203      	movs	r2, #3
 80090ce:	4650      	mov	r0, sl
 80090d0:	f7f7 f8b6 	bl	8000240 <memchr>
 80090d4:	b138      	cbz	r0, 80090e6 <_vfiprintf_r+0x17a>
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	eba0 000a 	sub.w	r0, r0, sl
 80090dc:	2240      	movs	r2, #64	; 0x40
 80090de:	4082      	lsls	r2, r0
 80090e0:	4313      	orrs	r3, r2
 80090e2:	3401      	adds	r4, #1
 80090e4:	9304      	str	r3, [sp, #16]
 80090e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ea:	4829      	ldr	r0, [pc, #164]	; (8009190 <_vfiprintf_r+0x224>)
 80090ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090f0:	2206      	movs	r2, #6
 80090f2:	f7f7 f8a5 	bl	8000240 <memchr>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d03f      	beq.n	800917a <_vfiprintf_r+0x20e>
 80090fa:	4b26      	ldr	r3, [pc, #152]	; (8009194 <_vfiprintf_r+0x228>)
 80090fc:	bb1b      	cbnz	r3, 8009146 <_vfiprintf_r+0x1da>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	3307      	adds	r3, #7
 8009102:	f023 0307 	bic.w	r3, r3, #7
 8009106:	3308      	adds	r3, #8
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910c:	443b      	add	r3, r7
 800910e:	9309      	str	r3, [sp, #36]	; 0x24
 8009110:	e768      	b.n	8008fe4 <_vfiprintf_r+0x78>
 8009112:	fb0c 3202 	mla	r2, ip, r2, r3
 8009116:	460c      	mov	r4, r1
 8009118:	2001      	movs	r0, #1
 800911a:	e7a6      	b.n	800906a <_vfiprintf_r+0xfe>
 800911c:	2300      	movs	r3, #0
 800911e:	3401      	adds	r4, #1
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	4619      	mov	r1, r3
 8009124:	f04f 0c0a 	mov.w	ip, #10
 8009128:	4620      	mov	r0, r4
 800912a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800912e:	3a30      	subs	r2, #48	; 0x30
 8009130:	2a09      	cmp	r2, #9
 8009132:	d903      	bls.n	800913c <_vfiprintf_r+0x1d0>
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0c6      	beq.n	80090c6 <_vfiprintf_r+0x15a>
 8009138:	9105      	str	r1, [sp, #20]
 800913a:	e7c4      	b.n	80090c6 <_vfiprintf_r+0x15a>
 800913c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009140:	4604      	mov	r4, r0
 8009142:	2301      	movs	r3, #1
 8009144:	e7f0      	b.n	8009128 <_vfiprintf_r+0x1bc>
 8009146:	ab03      	add	r3, sp, #12
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	462a      	mov	r2, r5
 800914c:	4b12      	ldr	r3, [pc, #72]	; (8009198 <_vfiprintf_r+0x22c>)
 800914e:	a904      	add	r1, sp, #16
 8009150:	4630      	mov	r0, r6
 8009152:	f7fd fda1 	bl	8006c98 <_printf_float>
 8009156:	4607      	mov	r7, r0
 8009158:	1c78      	adds	r0, r7, #1
 800915a:	d1d6      	bne.n	800910a <_vfiprintf_r+0x19e>
 800915c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915e:	07d9      	lsls	r1, r3, #31
 8009160:	d405      	bmi.n	800916e <_vfiprintf_r+0x202>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	059a      	lsls	r2, r3, #22
 8009166:	d402      	bmi.n	800916e <_vfiprintf_r+0x202>
 8009168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800916a:	f7fe fb09 	bl	8007780 <__retarget_lock_release_recursive>
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	065b      	lsls	r3, r3, #25
 8009172:	f53f af1d 	bmi.w	8008fb0 <_vfiprintf_r+0x44>
 8009176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009178:	e71c      	b.n	8008fb4 <_vfiprintf_r+0x48>
 800917a:	ab03      	add	r3, sp, #12
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	462a      	mov	r2, r5
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <_vfiprintf_r+0x22c>)
 8009182:	a904      	add	r1, sp, #16
 8009184:	4630      	mov	r0, r6
 8009186:	f7fe f80f 	bl	80071a8 <_printf_i>
 800918a:	e7e4      	b.n	8009156 <_vfiprintf_r+0x1ea>
 800918c:	0800a094 	.word	0x0800a094
 8009190:	0800a09e 	.word	0x0800a09e
 8009194:	08006c99 	.word	0x08006c99
 8009198:	08008f47 	.word	0x08008f47
 800919c:	0800a09a 	.word	0x0800a09a

080091a0 <__sflush_r>:
 80091a0:	898a      	ldrh	r2, [r1, #12]
 80091a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a6:	4605      	mov	r5, r0
 80091a8:	0710      	lsls	r0, r2, #28
 80091aa:	460c      	mov	r4, r1
 80091ac:	d458      	bmi.n	8009260 <__sflush_r+0xc0>
 80091ae:	684b      	ldr	r3, [r1, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dc05      	bgt.n	80091c0 <__sflush_r+0x20>
 80091b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dc02      	bgt.n	80091c0 <__sflush_r+0x20>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091c2:	2e00      	cmp	r6, #0
 80091c4:	d0f9      	beq.n	80091ba <__sflush_r+0x1a>
 80091c6:	2300      	movs	r3, #0
 80091c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091cc:	682f      	ldr	r7, [r5, #0]
 80091ce:	6a21      	ldr	r1, [r4, #32]
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	d032      	beq.n	800923a <__sflush_r+0x9a>
 80091d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	075a      	lsls	r2, r3, #29
 80091da:	d505      	bpl.n	80091e8 <__sflush_r+0x48>
 80091dc:	6863      	ldr	r3, [r4, #4]
 80091de:	1ac0      	subs	r0, r0, r3
 80091e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091e2:	b10b      	cbz	r3, 80091e8 <__sflush_r+0x48>
 80091e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091e6:	1ac0      	subs	r0, r0, r3
 80091e8:	2300      	movs	r3, #0
 80091ea:	4602      	mov	r2, r0
 80091ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ee:	6a21      	ldr	r1, [r4, #32]
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b0      	blx	r6
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	d106      	bne.n	8009208 <__sflush_r+0x68>
 80091fa:	6829      	ldr	r1, [r5, #0]
 80091fc:	291d      	cmp	r1, #29
 80091fe:	d82b      	bhi.n	8009258 <__sflush_r+0xb8>
 8009200:	4a29      	ldr	r2, [pc, #164]	; (80092a8 <__sflush_r+0x108>)
 8009202:	410a      	asrs	r2, r1
 8009204:	07d6      	lsls	r6, r2, #31
 8009206:	d427      	bmi.n	8009258 <__sflush_r+0xb8>
 8009208:	2200      	movs	r2, #0
 800920a:	6062      	str	r2, [r4, #4]
 800920c:	04d9      	lsls	r1, r3, #19
 800920e:	6922      	ldr	r2, [r4, #16]
 8009210:	6022      	str	r2, [r4, #0]
 8009212:	d504      	bpl.n	800921e <__sflush_r+0x7e>
 8009214:	1c42      	adds	r2, r0, #1
 8009216:	d101      	bne.n	800921c <__sflush_r+0x7c>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b903      	cbnz	r3, 800921e <__sflush_r+0x7e>
 800921c:	6560      	str	r0, [r4, #84]	; 0x54
 800921e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009220:	602f      	str	r7, [r5, #0]
 8009222:	2900      	cmp	r1, #0
 8009224:	d0c9      	beq.n	80091ba <__sflush_r+0x1a>
 8009226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800922a:	4299      	cmp	r1, r3
 800922c:	d002      	beq.n	8009234 <__sflush_r+0x94>
 800922e:	4628      	mov	r0, r5
 8009230:	f7ff f89e 	bl	8008370 <_free_r>
 8009234:	2000      	movs	r0, #0
 8009236:	6360      	str	r0, [r4, #52]	; 0x34
 8009238:	e7c0      	b.n	80091bc <__sflush_r+0x1c>
 800923a:	2301      	movs	r3, #1
 800923c:	4628      	mov	r0, r5
 800923e:	47b0      	blx	r6
 8009240:	1c41      	adds	r1, r0, #1
 8009242:	d1c8      	bne.n	80091d6 <__sflush_r+0x36>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0c5      	beq.n	80091d6 <__sflush_r+0x36>
 800924a:	2b1d      	cmp	r3, #29
 800924c:	d001      	beq.n	8009252 <__sflush_r+0xb2>
 800924e:	2b16      	cmp	r3, #22
 8009250:	d101      	bne.n	8009256 <__sflush_r+0xb6>
 8009252:	602f      	str	r7, [r5, #0]
 8009254:	e7b1      	b.n	80091ba <__sflush_r+0x1a>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	e7ad      	b.n	80091bc <__sflush_r+0x1c>
 8009260:	690f      	ldr	r7, [r1, #16]
 8009262:	2f00      	cmp	r7, #0
 8009264:	d0a9      	beq.n	80091ba <__sflush_r+0x1a>
 8009266:	0793      	lsls	r3, r2, #30
 8009268:	680e      	ldr	r6, [r1, #0]
 800926a:	bf08      	it	eq
 800926c:	694b      	ldreq	r3, [r1, #20]
 800926e:	600f      	str	r7, [r1, #0]
 8009270:	bf18      	it	ne
 8009272:	2300      	movne	r3, #0
 8009274:	eba6 0807 	sub.w	r8, r6, r7
 8009278:	608b      	str	r3, [r1, #8]
 800927a:	f1b8 0f00 	cmp.w	r8, #0
 800927e:	dd9c      	ble.n	80091ba <__sflush_r+0x1a>
 8009280:	6a21      	ldr	r1, [r4, #32]
 8009282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009284:	4643      	mov	r3, r8
 8009286:	463a      	mov	r2, r7
 8009288:	4628      	mov	r0, r5
 800928a:	47b0      	blx	r6
 800928c:	2800      	cmp	r0, #0
 800928e:	dc06      	bgt.n	800929e <__sflush_r+0xfe>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	e78e      	b.n	80091bc <__sflush_r+0x1c>
 800929e:	4407      	add	r7, r0
 80092a0:	eba8 0800 	sub.w	r8, r8, r0
 80092a4:	e7e9      	b.n	800927a <__sflush_r+0xda>
 80092a6:	bf00      	nop
 80092a8:	dfbffffe 	.word	0xdfbffffe

080092ac <_fflush_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	b913      	cbnz	r3, 80092bc <_fflush_r+0x10>
 80092b6:	2500      	movs	r5, #0
 80092b8:	4628      	mov	r0, r5
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	b118      	cbz	r0, 80092c6 <_fflush_r+0x1a>
 80092be:	6a03      	ldr	r3, [r0, #32]
 80092c0:	b90b      	cbnz	r3, 80092c6 <_fflush_r+0x1a>
 80092c2:	f7fe f91f 	bl	8007504 <__sinit>
 80092c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0f3      	beq.n	80092b6 <_fflush_r+0xa>
 80092ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092d0:	07d0      	lsls	r0, r2, #31
 80092d2:	d404      	bmi.n	80092de <_fflush_r+0x32>
 80092d4:	0599      	lsls	r1, r3, #22
 80092d6:	d402      	bmi.n	80092de <_fflush_r+0x32>
 80092d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092da:	f7fe fa50 	bl	800777e <__retarget_lock_acquire_recursive>
 80092de:	4628      	mov	r0, r5
 80092e0:	4621      	mov	r1, r4
 80092e2:	f7ff ff5d 	bl	80091a0 <__sflush_r>
 80092e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092e8:	07da      	lsls	r2, r3, #31
 80092ea:	4605      	mov	r5, r0
 80092ec:	d4e4      	bmi.n	80092b8 <_fflush_r+0xc>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	059b      	lsls	r3, r3, #22
 80092f2:	d4e1      	bmi.n	80092b8 <_fflush_r+0xc>
 80092f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092f6:	f7fe fa43 	bl	8007780 <__retarget_lock_release_recursive>
 80092fa:	e7dd      	b.n	80092b8 <_fflush_r+0xc>

080092fc <__swbuf_r>:
 80092fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fe:	460e      	mov	r6, r1
 8009300:	4614      	mov	r4, r2
 8009302:	4605      	mov	r5, r0
 8009304:	b118      	cbz	r0, 800930e <__swbuf_r+0x12>
 8009306:	6a03      	ldr	r3, [r0, #32]
 8009308:	b90b      	cbnz	r3, 800930e <__swbuf_r+0x12>
 800930a:	f7fe f8fb 	bl	8007504 <__sinit>
 800930e:	69a3      	ldr	r3, [r4, #24]
 8009310:	60a3      	str	r3, [r4, #8]
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	071a      	lsls	r2, r3, #28
 8009316:	d525      	bpl.n	8009364 <__swbuf_r+0x68>
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	b31b      	cbz	r3, 8009364 <__swbuf_r+0x68>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	6922      	ldr	r2, [r4, #16]
 8009320:	1a98      	subs	r0, r3, r2
 8009322:	6963      	ldr	r3, [r4, #20]
 8009324:	b2f6      	uxtb	r6, r6
 8009326:	4283      	cmp	r3, r0
 8009328:	4637      	mov	r7, r6
 800932a:	dc04      	bgt.n	8009336 <__swbuf_r+0x3a>
 800932c:	4621      	mov	r1, r4
 800932e:	4628      	mov	r0, r5
 8009330:	f7ff ffbc 	bl	80092ac <_fflush_r>
 8009334:	b9e0      	cbnz	r0, 8009370 <__swbuf_r+0x74>
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	3b01      	subs	r3, #1
 800933a:	60a3      	str	r3, [r4, #8]
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	6022      	str	r2, [r4, #0]
 8009342:	701e      	strb	r6, [r3, #0]
 8009344:	6962      	ldr	r2, [r4, #20]
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	429a      	cmp	r2, r3
 800934a:	d004      	beq.n	8009356 <__swbuf_r+0x5a>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	07db      	lsls	r3, r3, #31
 8009350:	d506      	bpl.n	8009360 <__swbuf_r+0x64>
 8009352:	2e0a      	cmp	r6, #10
 8009354:	d104      	bne.n	8009360 <__swbuf_r+0x64>
 8009356:	4621      	mov	r1, r4
 8009358:	4628      	mov	r0, r5
 800935a:	f7ff ffa7 	bl	80092ac <_fflush_r>
 800935e:	b938      	cbnz	r0, 8009370 <__swbuf_r+0x74>
 8009360:	4638      	mov	r0, r7
 8009362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009364:	4621      	mov	r1, r4
 8009366:	4628      	mov	r0, r5
 8009368:	f000 f806 	bl	8009378 <__swsetup_r>
 800936c:	2800      	cmp	r0, #0
 800936e:	d0d5      	beq.n	800931c <__swbuf_r+0x20>
 8009370:	f04f 37ff 	mov.w	r7, #4294967295
 8009374:	e7f4      	b.n	8009360 <__swbuf_r+0x64>
	...

08009378 <__swsetup_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4b2a      	ldr	r3, [pc, #168]	; (8009424 <__swsetup_r+0xac>)
 800937c:	4605      	mov	r5, r0
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	460c      	mov	r4, r1
 8009382:	b118      	cbz	r0, 800938c <__swsetup_r+0x14>
 8009384:	6a03      	ldr	r3, [r0, #32]
 8009386:	b90b      	cbnz	r3, 800938c <__swsetup_r+0x14>
 8009388:	f7fe f8bc 	bl	8007504 <__sinit>
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009392:	0718      	lsls	r0, r3, #28
 8009394:	d422      	bmi.n	80093dc <__swsetup_r+0x64>
 8009396:	06d9      	lsls	r1, r3, #27
 8009398:	d407      	bmi.n	80093aa <__swsetup_r+0x32>
 800939a:	2309      	movs	r3, #9
 800939c:	602b      	str	r3, [r5, #0]
 800939e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	e034      	b.n	8009414 <__swsetup_r+0x9c>
 80093aa:	0758      	lsls	r0, r3, #29
 80093ac:	d512      	bpl.n	80093d4 <__swsetup_r+0x5c>
 80093ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093b0:	b141      	cbz	r1, 80093c4 <__swsetup_r+0x4c>
 80093b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b6:	4299      	cmp	r1, r3
 80093b8:	d002      	beq.n	80093c0 <__swsetup_r+0x48>
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7fe ffd8 	bl	8008370 <_free_r>
 80093c0:	2300      	movs	r3, #0
 80093c2:	6363      	str	r3, [r4, #52]	; 0x34
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	2300      	movs	r3, #0
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f043 0308 	orr.w	r3, r3, #8
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	b94b      	cbnz	r3, 80093f4 <__swsetup_r+0x7c>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ea:	d003      	beq.n	80093f4 <__swsetup_r+0x7c>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f90c 	bl	800960c <__smakebuf_r>
 80093f4:	89a0      	ldrh	r0, [r4, #12]
 80093f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093fa:	f010 0301 	ands.w	r3, r0, #1
 80093fe:	d00a      	beq.n	8009416 <__swsetup_r+0x9e>
 8009400:	2300      	movs	r3, #0
 8009402:	60a3      	str	r3, [r4, #8]
 8009404:	6963      	ldr	r3, [r4, #20]
 8009406:	425b      	negs	r3, r3
 8009408:	61a3      	str	r3, [r4, #24]
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	b943      	cbnz	r3, 8009420 <__swsetup_r+0xa8>
 800940e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009412:	d1c4      	bne.n	800939e <__swsetup_r+0x26>
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	0781      	lsls	r1, r0, #30
 8009418:	bf58      	it	pl
 800941a:	6963      	ldrpl	r3, [r4, #20]
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	e7f4      	b.n	800940a <__swsetup_r+0x92>
 8009420:	2000      	movs	r0, #0
 8009422:	e7f7      	b.n	8009414 <__swsetup_r+0x9c>
 8009424:	20000068 	.word	0x20000068

08009428 <memmove>:
 8009428:	4288      	cmp	r0, r1
 800942a:	b510      	push	{r4, lr}
 800942c:	eb01 0402 	add.w	r4, r1, r2
 8009430:	d902      	bls.n	8009438 <memmove+0x10>
 8009432:	4284      	cmp	r4, r0
 8009434:	4623      	mov	r3, r4
 8009436:	d807      	bhi.n	8009448 <memmove+0x20>
 8009438:	1e43      	subs	r3, r0, #1
 800943a:	42a1      	cmp	r1, r4
 800943c:	d008      	beq.n	8009450 <memmove+0x28>
 800943e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009446:	e7f8      	b.n	800943a <memmove+0x12>
 8009448:	4402      	add	r2, r0
 800944a:	4601      	mov	r1, r0
 800944c:	428a      	cmp	r2, r1
 800944e:	d100      	bne.n	8009452 <memmove+0x2a>
 8009450:	bd10      	pop	{r4, pc}
 8009452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800945a:	e7f7      	b.n	800944c <memmove+0x24>

0800945c <_sbrk_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d06      	ldr	r5, [pc, #24]	; (8009478 <_sbrk_r+0x1c>)
 8009460:	2300      	movs	r3, #0
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	f7fa fb4a 	bl	8003b00 <_sbrk>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_sbrk_r+0x1a>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_sbrk_r+0x1a>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	20001d20 	.word	0x20001d20

0800947c <memcpy>:
 800947c:	440a      	add	r2, r1
 800947e:	4291      	cmp	r1, r2
 8009480:	f100 33ff 	add.w	r3, r0, #4294967295
 8009484:	d100      	bne.n	8009488 <memcpy+0xc>
 8009486:	4770      	bx	lr
 8009488:	b510      	push	{r4, lr}
 800948a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800948e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009492:	4291      	cmp	r1, r2
 8009494:	d1f9      	bne.n	800948a <memcpy+0xe>
 8009496:	bd10      	pop	{r4, pc}

08009498 <__assert_func>:
 8009498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800949a:	4614      	mov	r4, r2
 800949c:	461a      	mov	r2, r3
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <__assert_func+0x2c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4605      	mov	r5, r0
 80094a4:	68d8      	ldr	r0, [r3, #12]
 80094a6:	b14c      	cbz	r4, 80094bc <__assert_func+0x24>
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <__assert_func+0x30>)
 80094aa:	9100      	str	r1, [sp, #0]
 80094ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094b0:	4906      	ldr	r1, [pc, #24]	; (80094cc <__assert_func+0x34>)
 80094b2:	462b      	mov	r3, r5
 80094b4:	f000 f872 	bl	800959c <fiprintf>
 80094b8:	f000 f906 	bl	80096c8 <abort>
 80094bc:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <__assert_func+0x38>)
 80094be:	461c      	mov	r4, r3
 80094c0:	e7f3      	b.n	80094aa <__assert_func+0x12>
 80094c2:	bf00      	nop
 80094c4:	20000068 	.word	0x20000068
 80094c8:	0800a0af 	.word	0x0800a0af
 80094cc:	0800a0bc 	.word	0x0800a0bc
 80094d0:	0800a0ea 	.word	0x0800a0ea

080094d4 <_calloc_r>:
 80094d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094d6:	fba1 2402 	umull	r2, r4, r1, r2
 80094da:	b94c      	cbnz	r4, 80094f0 <_calloc_r+0x1c>
 80094dc:	4611      	mov	r1, r2
 80094de:	9201      	str	r2, [sp, #4]
 80094e0:	f7fe ffba 	bl	8008458 <_malloc_r>
 80094e4:	9a01      	ldr	r2, [sp, #4]
 80094e6:	4605      	mov	r5, r0
 80094e8:	b930      	cbnz	r0, 80094f8 <_calloc_r+0x24>
 80094ea:	4628      	mov	r0, r5
 80094ec:	b003      	add	sp, #12
 80094ee:	bd30      	pop	{r4, r5, pc}
 80094f0:	220c      	movs	r2, #12
 80094f2:	6002      	str	r2, [r0, #0]
 80094f4:	2500      	movs	r5, #0
 80094f6:	e7f8      	b.n	80094ea <_calloc_r+0x16>
 80094f8:	4621      	mov	r1, r4
 80094fa:	f7fe f8c2 	bl	8007682 <memset>
 80094fe:	e7f4      	b.n	80094ea <_calloc_r+0x16>

08009500 <__ascii_mbtowc>:
 8009500:	b082      	sub	sp, #8
 8009502:	b901      	cbnz	r1, 8009506 <__ascii_mbtowc+0x6>
 8009504:	a901      	add	r1, sp, #4
 8009506:	b142      	cbz	r2, 800951a <__ascii_mbtowc+0x1a>
 8009508:	b14b      	cbz	r3, 800951e <__ascii_mbtowc+0x1e>
 800950a:	7813      	ldrb	r3, [r2, #0]
 800950c:	600b      	str	r3, [r1, #0]
 800950e:	7812      	ldrb	r2, [r2, #0]
 8009510:	1e10      	subs	r0, r2, #0
 8009512:	bf18      	it	ne
 8009514:	2001      	movne	r0, #1
 8009516:	b002      	add	sp, #8
 8009518:	4770      	bx	lr
 800951a:	4610      	mov	r0, r2
 800951c:	e7fb      	b.n	8009516 <__ascii_mbtowc+0x16>
 800951e:	f06f 0001 	mvn.w	r0, #1
 8009522:	e7f8      	b.n	8009516 <__ascii_mbtowc+0x16>

08009524 <_realloc_r>:
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	4680      	mov	r8, r0
 800952a:	4614      	mov	r4, r2
 800952c:	460e      	mov	r6, r1
 800952e:	b921      	cbnz	r1, 800953a <_realloc_r+0x16>
 8009530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009534:	4611      	mov	r1, r2
 8009536:	f7fe bf8f 	b.w	8008458 <_malloc_r>
 800953a:	b92a      	cbnz	r2, 8009548 <_realloc_r+0x24>
 800953c:	f7fe ff18 	bl	8008370 <_free_r>
 8009540:	4625      	mov	r5, r4
 8009542:	4628      	mov	r0, r5
 8009544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009548:	f000 f8c5 	bl	80096d6 <_malloc_usable_size_r>
 800954c:	4284      	cmp	r4, r0
 800954e:	4607      	mov	r7, r0
 8009550:	d802      	bhi.n	8009558 <_realloc_r+0x34>
 8009552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009556:	d812      	bhi.n	800957e <_realloc_r+0x5a>
 8009558:	4621      	mov	r1, r4
 800955a:	4640      	mov	r0, r8
 800955c:	f7fe ff7c 	bl	8008458 <_malloc_r>
 8009560:	4605      	mov	r5, r0
 8009562:	2800      	cmp	r0, #0
 8009564:	d0ed      	beq.n	8009542 <_realloc_r+0x1e>
 8009566:	42bc      	cmp	r4, r7
 8009568:	4622      	mov	r2, r4
 800956a:	4631      	mov	r1, r6
 800956c:	bf28      	it	cs
 800956e:	463a      	movcs	r2, r7
 8009570:	f7ff ff84 	bl	800947c <memcpy>
 8009574:	4631      	mov	r1, r6
 8009576:	4640      	mov	r0, r8
 8009578:	f7fe fefa 	bl	8008370 <_free_r>
 800957c:	e7e1      	b.n	8009542 <_realloc_r+0x1e>
 800957e:	4635      	mov	r5, r6
 8009580:	e7df      	b.n	8009542 <_realloc_r+0x1e>

08009582 <__ascii_wctomb>:
 8009582:	b149      	cbz	r1, 8009598 <__ascii_wctomb+0x16>
 8009584:	2aff      	cmp	r2, #255	; 0xff
 8009586:	bf85      	ittet	hi
 8009588:	238a      	movhi	r3, #138	; 0x8a
 800958a:	6003      	strhi	r3, [r0, #0]
 800958c:	700a      	strbls	r2, [r1, #0]
 800958e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009592:	bf98      	it	ls
 8009594:	2001      	movls	r0, #1
 8009596:	4770      	bx	lr
 8009598:	4608      	mov	r0, r1
 800959a:	4770      	bx	lr

0800959c <fiprintf>:
 800959c:	b40e      	push	{r1, r2, r3}
 800959e:	b503      	push	{r0, r1, lr}
 80095a0:	4601      	mov	r1, r0
 80095a2:	ab03      	add	r3, sp, #12
 80095a4:	4805      	ldr	r0, [pc, #20]	; (80095bc <fiprintf+0x20>)
 80095a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095aa:	6800      	ldr	r0, [r0, #0]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	f7ff fcdd 	bl	8008f6c <_vfiprintf_r>
 80095b2:	b002      	add	sp, #8
 80095b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095b8:	b003      	add	sp, #12
 80095ba:	4770      	bx	lr
 80095bc:	20000068 	.word	0x20000068

080095c0 <__swhatbuf_r>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	460c      	mov	r4, r1
 80095c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c8:	2900      	cmp	r1, #0
 80095ca:	b096      	sub	sp, #88	; 0x58
 80095cc:	4615      	mov	r5, r2
 80095ce:	461e      	mov	r6, r3
 80095d0:	da0d      	bge.n	80095ee <__swhatbuf_r+0x2e>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095d8:	f04f 0100 	mov.w	r1, #0
 80095dc:	bf0c      	ite	eq
 80095de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095e2:	2340      	movne	r3, #64	; 0x40
 80095e4:	2000      	movs	r0, #0
 80095e6:	6031      	str	r1, [r6, #0]
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	b016      	add	sp, #88	; 0x58
 80095ec:	bd70      	pop	{r4, r5, r6, pc}
 80095ee:	466a      	mov	r2, sp
 80095f0:	f000 f848 	bl	8009684 <_fstat_r>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	dbec      	blt.n	80095d2 <__swhatbuf_r+0x12>
 80095f8:	9901      	ldr	r1, [sp, #4]
 80095fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009602:	4259      	negs	r1, r3
 8009604:	4159      	adcs	r1, r3
 8009606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800960a:	e7eb      	b.n	80095e4 <__swhatbuf_r+0x24>

0800960c <__smakebuf_r>:
 800960c:	898b      	ldrh	r3, [r1, #12]
 800960e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009610:	079d      	lsls	r5, r3, #30
 8009612:	4606      	mov	r6, r0
 8009614:	460c      	mov	r4, r1
 8009616:	d507      	bpl.n	8009628 <__smakebuf_r+0x1c>
 8009618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	6123      	str	r3, [r4, #16]
 8009620:	2301      	movs	r3, #1
 8009622:	6163      	str	r3, [r4, #20]
 8009624:	b002      	add	sp, #8
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	ab01      	add	r3, sp, #4
 800962a:	466a      	mov	r2, sp
 800962c:	f7ff ffc8 	bl	80095c0 <__swhatbuf_r>
 8009630:	9900      	ldr	r1, [sp, #0]
 8009632:	4605      	mov	r5, r0
 8009634:	4630      	mov	r0, r6
 8009636:	f7fe ff0f 	bl	8008458 <_malloc_r>
 800963a:	b948      	cbnz	r0, 8009650 <__smakebuf_r+0x44>
 800963c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009640:	059a      	lsls	r2, r3, #22
 8009642:	d4ef      	bmi.n	8009624 <__smakebuf_r+0x18>
 8009644:	f023 0303 	bic.w	r3, r3, #3
 8009648:	f043 0302 	orr.w	r3, r3, #2
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	e7e3      	b.n	8009618 <__smakebuf_r+0xc>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	6020      	str	r0, [r4, #0]
 8009654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	9b00      	ldr	r3, [sp, #0]
 800965c:	6163      	str	r3, [r4, #20]
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	6120      	str	r0, [r4, #16]
 8009662:	b15b      	cbz	r3, 800967c <__smakebuf_r+0x70>
 8009664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009668:	4630      	mov	r0, r6
 800966a:	f000 f81d 	bl	80096a8 <_isatty_r>
 800966e:	b128      	cbz	r0, 800967c <__smakebuf_r+0x70>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f023 0303 	bic.w	r3, r3, #3
 8009676:	f043 0301 	orr.w	r3, r3, #1
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	431d      	orrs	r5, r3
 8009680:	81a5      	strh	r5, [r4, #12]
 8009682:	e7cf      	b.n	8009624 <__smakebuf_r+0x18>

08009684 <_fstat_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d07      	ldr	r5, [pc, #28]	; (80096a4 <_fstat_r+0x20>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	f7fa fa0c 	bl	8003aae <_fstat>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	d102      	bne.n	80096a0 <_fstat_r+0x1c>
 800969a:	682b      	ldr	r3, [r5, #0]
 800969c:	b103      	cbz	r3, 80096a0 <_fstat_r+0x1c>
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	bd38      	pop	{r3, r4, r5, pc}
 80096a2:	bf00      	nop
 80096a4:	20001d20 	.word	0x20001d20

080096a8 <_isatty_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d06      	ldr	r5, [pc, #24]	; (80096c4 <_isatty_r+0x1c>)
 80096ac:	2300      	movs	r3, #0
 80096ae:	4604      	mov	r4, r0
 80096b0:	4608      	mov	r0, r1
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	f7fa fa0b 	bl	8003ace <_isatty>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_isatty_r+0x1a>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_isatty_r+0x1a>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	20001d20 	.word	0x20001d20

080096c8 <abort>:
 80096c8:	b508      	push	{r3, lr}
 80096ca:	2006      	movs	r0, #6
 80096cc:	f000 f834 	bl	8009738 <raise>
 80096d0:	2001      	movs	r0, #1
 80096d2:	f7fa f99d 	bl	8003a10 <_exit>

080096d6 <_malloc_usable_size_r>:
 80096d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096da:	1f18      	subs	r0, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bfbc      	itt	lt
 80096e0:	580b      	ldrlt	r3, [r1, r0]
 80096e2:	18c0      	addlt	r0, r0, r3
 80096e4:	4770      	bx	lr

080096e6 <_raise_r>:
 80096e6:	291f      	cmp	r1, #31
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4604      	mov	r4, r0
 80096ec:	460d      	mov	r5, r1
 80096ee:	d904      	bls.n	80096fa <_raise_r+0x14>
 80096f0:	2316      	movs	r3, #22
 80096f2:	6003      	str	r3, [r0, #0]
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	bd38      	pop	{r3, r4, r5, pc}
 80096fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80096fc:	b112      	cbz	r2, 8009704 <_raise_r+0x1e>
 80096fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009702:	b94b      	cbnz	r3, 8009718 <_raise_r+0x32>
 8009704:	4620      	mov	r0, r4
 8009706:	f000 f831 	bl	800976c <_getpid_r>
 800970a:	462a      	mov	r2, r5
 800970c:	4601      	mov	r1, r0
 800970e:	4620      	mov	r0, r4
 8009710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009714:	f000 b818 	b.w	8009748 <_kill_r>
 8009718:	2b01      	cmp	r3, #1
 800971a:	d00a      	beq.n	8009732 <_raise_r+0x4c>
 800971c:	1c59      	adds	r1, r3, #1
 800971e:	d103      	bne.n	8009728 <_raise_r+0x42>
 8009720:	2316      	movs	r3, #22
 8009722:	6003      	str	r3, [r0, #0]
 8009724:	2001      	movs	r0, #1
 8009726:	e7e7      	b.n	80096f8 <_raise_r+0x12>
 8009728:	2400      	movs	r4, #0
 800972a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800972e:	4628      	mov	r0, r5
 8009730:	4798      	blx	r3
 8009732:	2000      	movs	r0, #0
 8009734:	e7e0      	b.n	80096f8 <_raise_r+0x12>
	...

08009738 <raise>:
 8009738:	4b02      	ldr	r3, [pc, #8]	; (8009744 <raise+0xc>)
 800973a:	4601      	mov	r1, r0
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f7ff bfd2 	b.w	80096e6 <_raise_r>
 8009742:	bf00      	nop
 8009744:	20000068 	.word	0x20000068

08009748 <_kill_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d07      	ldr	r5, [pc, #28]	; (8009768 <_kill_r+0x20>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	602b      	str	r3, [r5, #0]
 8009756:	f7fa f94b 	bl	80039f0 <_kill>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d102      	bne.n	8009764 <_kill_r+0x1c>
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	b103      	cbz	r3, 8009764 <_kill_r+0x1c>
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	bd38      	pop	{r3, r4, r5, pc}
 8009766:	bf00      	nop
 8009768:	20001d20 	.word	0x20001d20

0800976c <_getpid_r>:
 800976c:	f7fa b938 	b.w	80039e0 <_getpid>

08009770 <sqrt>:
 8009770:	b508      	push	{r3, lr}
 8009772:	ed2d 8b04 	vpush	{d8-d9}
 8009776:	eeb0 8b40 	vmov.f64	d8, d0
 800977a:	f000 fa9d 	bl	8009cb8 <__ieee754_sqrt>
 800977e:	eeb4 8b48 	vcmp.f64	d8, d8
 8009782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009786:	d60c      	bvs.n	80097a2 <sqrt+0x32>
 8009788:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80097a8 <sqrt+0x38>
 800978c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009794:	d505      	bpl.n	80097a2 <sqrt+0x32>
 8009796:	f7fd ffc7 	bl	8007728 <__errno>
 800979a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800979e:	2321      	movs	r3, #33	; 0x21
 80097a0:	6003      	str	r3, [r0, #0]
 80097a2:	ecbd 8b04 	vpop	{d8-d9}
 80097a6:	bd08      	pop	{r3, pc}
	...

080097b0 <checkint>:
 80097b0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80097b4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80097b8:	429a      	cmp	r2, r3
 80097ba:	b570      	push	{r4, r5, r6, lr}
 80097bc:	dd2a      	ble.n	8009814 <checkint+0x64>
 80097be:	f240 4333 	movw	r3, #1075	; 0x433
 80097c2:	429a      	cmp	r2, r3
 80097c4:	dc24      	bgt.n	8009810 <checkint+0x60>
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	f1a3 0620 	sub.w	r6, r3, #32
 80097cc:	f04f 32ff 	mov.w	r2, #4294967295
 80097d0:	fa02 f403 	lsl.w	r4, r2, r3
 80097d4:	fa02 f606 	lsl.w	r6, r2, r6
 80097d8:	f1c3 0520 	rsb	r5, r3, #32
 80097dc:	fa22 f505 	lsr.w	r5, r2, r5
 80097e0:	4334      	orrs	r4, r6
 80097e2:	432c      	orrs	r4, r5
 80097e4:	409a      	lsls	r2, r3
 80097e6:	ea20 0202 	bic.w	r2, r0, r2
 80097ea:	ea21 0404 	bic.w	r4, r1, r4
 80097ee:	4322      	orrs	r2, r4
 80097f0:	f1a3 0420 	sub.w	r4, r3, #32
 80097f4:	f1c3 0220 	rsb	r2, r3, #32
 80097f8:	d10c      	bne.n	8009814 <checkint+0x64>
 80097fa:	40d8      	lsrs	r0, r3
 80097fc:	fa01 f302 	lsl.w	r3, r1, r2
 8009800:	4318      	orrs	r0, r3
 8009802:	40e1      	lsrs	r1, r4
 8009804:	4308      	orrs	r0, r1
 8009806:	f000 0001 	and.w	r0, r0, #1
 800980a:	f1d0 0002 	rsbs	r0, r0, #2
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	2002      	movs	r0, #2
 8009812:	e7fc      	b.n	800980e <checkint+0x5e>
 8009814:	2000      	movs	r0, #0
 8009816:	e7fa      	b.n	800980e <checkint+0x5e>

08009818 <pow>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	ee10 4a90 	vmov	r4, s1
 8009820:	ed2d 8b0a 	vpush	{d8-d12}
 8009824:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8009828:	ee11 aa90 	vmov	sl, s3
 800982c:	f108 32ff 	add.w	r2, r8, #4294967295
 8009830:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8009834:	429a      	cmp	r2, r3
 8009836:	ee10 5a10 	vmov	r5, s0
 800983a:	ee11 0a10 	vmov	r0, s2
 800983e:	b087      	sub	sp, #28
 8009840:	46c4      	mov	ip, r8
 8009842:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8009846:	d806      	bhi.n	8009856 <pow+0x3e>
 8009848:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800984c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8009850:	2b7f      	cmp	r3, #127	; 0x7f
 8009852:	f240 8156 	bls.w	8009b02 <pow+0x2ea>
 8009856:	1802      	adds	r2, r0, r0
 8009858:	eb4a 010a 	adc.w	r1, sl, sl
 800985c:	f06f 0b01 	mvn.w	fp, #1
 8009860:	1e57      	subs	r7, r2, #1
 8009862:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009866:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800986a:	45bb      	cmp	fp, r7
 800986c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8009870:	d242      	bcs.n	80098f8 <pow+0xe0>
 8009872:	ea52 0301 	orrs.w	r3, r2, r1
 8009876:	f04f 0300 	mov.w	r3, #0
 800987a:	d10c      	bne.n	8009896 <pow+0x7e>
 800987c:	196d      	adds	r5, r5, r5
 800987e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8009882:	4164      	adcs	r4, r4
 8009884:	42ab      	cmp	r3, r5
 8009886:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800988a:	41a3      	sbcs	r3, r4
 800988c:	f0c0 808f 	bcc.w	80099ae <pow+0x196>
 8009890:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009894:	e02b      	b.n	80098ee <pow+0xd6>
 8009896:	4ed4      	ldr	r6, [pc, #848]	; (8009be8 <pow+0x3d0>)
 8009898:	42b4      	cmp	r4, r6
 800989a:	bf08      	it	eq
 800989c:	429d      	cmpeq	r5, r3
 800989e:	d109      	bne.n	80098b4 <pow+0x9c>
 80098a0:	1800      	adds	r0, r0, r0
 80098a2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 80098a6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80098aa:	4283      	cmp	r3, r0
 80098ac:	4bcf      	ldr	r3, [pc, #828]	; (8009bec <pow+0x3d4>)
 80098ae:	eb73 030a 	sbcs.w	r3, r3, sl
 80098b2:	e7eb      	b.n	800988c <pow+0x74>
 80098b4:	196d      	adds	r5, r5, r5
 80098b6:	48ce      	ldr	r0, [pc, #824]	; (8009bf0 <pow+0x3d8>)
 80098b8:	4164      	adcs	r4, r4
 80098ba:	42ab      	cmp	r3, r5
 80098bc:	eb70 0604 	sbcs.w	r6, r0, r4
 80098c0:	d375      	bcc.n	80099ae <pow+0x196>
 80098c2:	4281      	cmp	r1, r0
 80098c4:	bf08      	it	eq
 80098c6:	429a      	cmpeq	r2, r3
 80098c8:	d171      	bne.n	80099ae <pow+0x196>
 80098ca:	4aca      	ldr	r2, [pc, #808]	; (8009bf4 <pow+0x3dc>)
 80098cc:	4294      	cmp	r4, r2
 80098ce:	bf08      	it	eq
 80098d0:	429d      	cmpeq	r5, r3
 80098d2:	d0dd      	beq.n	8009890 <pow+0x78>
 80098d4:	4294      	cmp	r4, r2
 80098d6:	ea6f 0a0a 	mvn.w	sl, sl
 80098da:	bf34      	ite	cc
 80098dc:	2400      	movcc	r4, #0
 80098de:	2401      	movcs	r4, #1
 80098e0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80098e4:	4554      	cmp	r4, sl
 80098e6:	f040 81dc 	bne.w	8009ca2 <pow+0x48a>
 80098ea:	ee21 0b01 	vmul.f64	d0, d1, d1
 80098ee:	b007      	add	sp, #28
 80098f0:	ecbd 8b0a 	vpop	{d8-d12}
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	196f      	adds	r7, r5, r5
 80098fa:	eb44 0904 	adc.w	r9, r4, r4
 80098fe:	1e7a      	subs	r2, r7, #1
 8009900:	f169 0300 	sbc.w	r3, r9, #0
 8009904:	4593      	cmp	fp, r2
 8009906:	eb7e 0303 	sbcs.w	r3, lr, r3
 800990a:	d225      	bcs.n	8009958 <pow+0x140>
 800990c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8009910:	2c00      	cmp	r4, #0
 8009912:	da13      	bge.n	800993c <pow+0x124>
 8009914:	4651      	mov	r1, sl
 8009916:	f7ff ff4b 	bl	80097b0 <checkint>
 800991a:	2801      	cmp	r0, #1
 800991c:	d10e      	bne.n	800993c <pow+0x124>
 800991e:	eeb1 0b40 	vneg.f64	d0, d0
 8009922:	ea57 0909 	orrs.w	r9, r7, r9
 8009926:	d10b      	bne.n	8009940 <pow+0x128>
 8009928:	f1ba 0f00 	cmp.w	sl, #0
 800992c:	dadf      	bge.n	80098ee <pow+0xd6>
 800992e:	b007      	add	sp, #28
 8009930:	ecbd 8b0a 	vpop	{d8-d12}
 8009934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	f000 b9ee 	b.w	8009d18 <__math_divzero>
 800993c:	2000      	movs	r0, #0
 800993e:	e7f0      	b.n	8009922 <pow+0x10a>
 8009940:	f1ba 0f00 	cmp.w	sl, #0
 8009944:	dad3      	bge.n	80098ee <pow+0xd6>
 8009946:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800994a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800994e:	ed8d 7b00 	vstr	d7, [sp]
 8009952:	ed9d 0b00 	vldr	d0, [sp]
 8009956:	e7ca      	b.n	80098ee <pow+0xd6>
 8009958:	2c00      	cmp	r4, #0
 800995a:	da2b      	bge.n	80099b4 <pow+0x19c>
 800995c:	4651      	mov	r1, sl
 800995e:	f7ff ff27 	bl	80097b0 <checkint>
 8009962:	b930      	cbnz	r0, 8009972 <pow+0x15a>
 8009964:	b007      	add	sp, #28
 8009966:	ecbd 8b0a 	vpop	{d8-d12}
 800996a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996e:	f000 b9eb 	b.w	8009d48 <__math_invalid>
 8009972:	1e41      	subs	r1, r0, #1
 8009974:	4248      	negs	r0, r1
 8009976:	4148      	adcs	r0, r1
 8009978:	0480      	lsls	r0, r0, #18
 800997a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800997e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8009982:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8009986:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800998a:	2b7f      	cmp	r3, #127	; 0x7f
 800998c:	d92d      	bls.n	80099ea <pow+0x1d2>
 800998e:	4b96      	ldr	r3, [pc, #600]	; (8009be8 <pow+0x3d0>)
 8009990:	2000      	movs	r0, #0
 8009992:	429c      	cmp	r4, r3
 8009994:	bf08      	it	eq
 8009996:	4285      	cmpeq	r5, r0
 8009998:	f43f af7a 	beq.w	8009890 <pow+0x78>
 800999c:	f240 31bd 	movw	r1, #957	; 0x3bd
 80099a0:	428a      	cmp	r2, r1
 80099a2:	d80c      	bhi.n	80099be <pow+0x1a6>
 80099a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80099a8:	42a8      	cmp	r0, r5
 80099aa:	41a3      	sbcs	r3, r4
 80099ac:	d204      	bcs.n	80099b8 <pow+0x1a0>
 80099ae:	ee31 0b00 	vadd.f64	d0, d1, d0
 80099b2:	e79c      	b.n	80098ee <pow+0xd6>
 80099b4:	2000      	movs	r0, #0
 80099b6:	e7e4      	b.n	8009982 <pow+0x16a>
 80099b8:	ee30 0b41 	vsub.f64	d0, d0, d1
 80099bc:	e797      	b.n	80098ee <pow+0xd6>
 80099be:	2d01      	cmp	r5, #1
 80099c0:	eb74 0303 	sbcs.w	r3, r4, r3
 80099c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80099c8:	bf34      	ite	cc
 80099ca:	2301      	movcc	r3, #1
 80099cc:	2300      	movcs	r3, #0
 80099ce:	4296      	cmp	r6, r2
 80099d0:	bf8c      	ite	hi
 80099d2:	2600      	movhi	r6, #0
 80099d4:	2601      	movls	r6, #1
 80099d6:	42b3      	cmp	r3, r6
 80099d8:	f000 809b 	beq.w	8009b12 <pow+0x2fa>
 80099dc:	b007      	add	sp, #28
 80099de:	ecbd 8b0a 	vpop	{d8-d12}
 80099e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e6:	f000 b98f 	b.w	8009d08 <__math_oflow>
 80099ea:	f1bc 0f00 	cmp.w	ip, #0
 80099ee:	d10b      	bne.n	8009a08 <pow+0x1f0>
 80099f0:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8009bd8 <pow+0x3c0>
 80099f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80099f8:	ec53 2b17 	vmov	r2, r3, d7
 80099fc:	ee17 5a10 	vmov	r5, s14
 8009a00:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009a04:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8009a08:	4b7b      	ldr	r3, [pc, #492]	; (8009bf8 <pow+0x3e0>)
 8009a0a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009a0e:	4423      	add	r3, r4
 8009a10:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8009a14:	1519      	asrs	r1, r3, #20
 8009a16:	0d1b      	lsrs	r3, r3, #20
 8009a18:	051b      	lsls	r3, r3, #20
 8009a1a:	1ae7      	subs	r7, r4, r3
 8009a1c:	4b77      	ldr	r3, [pc, #476]	; (8009bfc <pow+0x3e4>)
 8009a1e:	ee03 1a10 	vmov	s6, r1
 8009a22:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8009a26:	1e2e      	subs	r6, r5, #0
 8009a28:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8009a2c:	ec47 6b15 	vmov	d5, r6, r7
 8009a30:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8009a34:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009a38:	ed93 7b00 	vldr	d7, [r3]
 8009a3c:	ed93 5b02 	vldr	d5, [r3, #8]
 8009a40:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8009a44:	eea3 2b07 	vfma.f64	d2, d3, d7
 8009a48:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8009a4c:	ee36 4b02 	vadd.f64	d4, d6, d2
 8009a50:	ee32 2b44 	vsub.f64	d2, d2, d4
 8009a54:	eea3 7b05 	vfma.f64	d7, d3, d5
 8009a58:	ed93 5b04 	vldr	d5, [r3, #16]
 8009a5c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8009a60:	ee37 7b02 	vadd.f64	d7, d7, d2
 8009a64:	ee26 5b05 	vmul.f64	d5, d6, d5
 8009a68:	ee26 0b05 	vmul.f64	d0, d6, d5
 8009a6c:	ee34 8b00 	vadd.f64	d8, d4, d0
 8009a70:	eeb0 9b40 	vmov.f64	d9, d0
 8009a74:	ee34 4b48 	vsub.f64	d4, d4, d8
 8009a78:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8009a7c:	ee34 ab00 	vadd.f64	d10, d4, d0
 8009a80:	ed93 5b06 	vldr	d5, [r3, #24]
 8009a84:	ee26 bb00 	vmul.f64	d11, d6, d0
 8009a88:	ee37 7b09 	vadd.f64	d7, d7, d9
 8009a8c:	ed93 4b08 	vldr	d4, [r3, #32]
 8009a90:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8009a94:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8009a98:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009a9c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8009aa0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8009aa4:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009aa8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8009aac:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8009ab0:	eea0 4b03 	vfma.f64	d4, d0, d3
 8009ab4:	eea0 5b04 	vfma.f64	d5, d0, d4
 8009ab8:	eeab 7b05 	vfma.f64	d7, d11, d5
 8009abc:	ee38 4b07 	vadd.f64	d4, d8, d7
 8009ac0:	ee21 6b04 	vmul.f64	d6, d1, d4
 8009ac4:	ee16 3a90 	vmov	r3, s13
 8009ac8:	eeb0 5b46 	vmov.f64	d5, d6
 8009acc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8009ad0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8009ad4:	18b2      	adds	r2, r6, r2
 8009ad6:	2a3e      	cmp	r2, #62	; 0x3e
 8009ad8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8009adc:	ee38 8b44 	vsub.f64	d8, d8, d4
 8009ae0:	ee38 8b07 	vadd.f64	d8, d8, d7
 8009ae4:	eea1 5b08 	vfma.f64	d5, d1, d8
 8009ae8:	d91b      	bls.n	8009b22 <pow+0x30a>
 8009aea:	2a00      	cmp	r2, #0
 8009aec:	da0b      	bge.n	8009b06 <pow+0x2ee>
 8009aee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009af2:	ee36 0b00 	vadd.f64	d0, d6, d0
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f43f aef9 	beq.w	80098ee <pow+0xd6>
 8009afc:	eeb1 0b40 	vneg.f64	d0, d0
 8009b00:	e6f5      	b.n	80098ee <pow+0xd6>
 8009b02:	2000      	movs	r0, #0
 8009b04:	e780      	b.n	8009a08 <pow+0x1f0>
 8009b06:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8009b0a:	d909      	bls.n	8009b20 <pow+0x308>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f6bf af65 	bge.w	80099dc <pow+0x1c4>
 8009b12:	b007      	add	sp, #28
 8009b14:	ecbd 8b0a 	vpop	{d8-d12}
 8009b18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	f000 b8ec 	b.w	8009cf8 <__math_uflow>
 8009b20:	2600      	movs	r6, #0
 8009b22:	4937      	ldr	r1, [pc, #220]	; (8009c00 <pow+0x3e8>)
 8009b24:	ed91 4b02 	vldr	d4, [r1, #8]
 8009b28:	ed91 3b00 	vldr	d3, [r1]
 8009b2c:	eeb0 7b44 	vmov.f64	d7, d4
 8009b30:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009b34:	ee17 5a10 	vmov	r5, s14
 8009b38:	ee37 7b44 	vsub.f64	d7, d7, d4
 8009b3c:	ed91 4b04 	vldr	d4, [r1, #16]
 8009b40:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8009b44:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009b48:	ed91 4b06 	vldr	d4, [r1, #24]
 8009b4c:	18dc      	adds	r4, r3, r3
 8009b4e:	f104 030f 	add.w	r3, r4, #15
 8009b52:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009b56:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009b5a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8009b5e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8009b62:	ee25 6b05 	vmul.f64	d6, d5, d5
 8009b66:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8009b6a:	ed91 4b08 	vldr	d4, [r1, #32]
 8009b6e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009b72:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8009b76:	eea5 4b03 	vfma.f64	d4, d5, d3
 8009b7a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8009b7e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8009b82:	ee26 6b06 	vmul.f64	d6, d6, d6
 8009b86:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8009b8a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8009b8e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8009b92:	eea5 4b03 	vfma.f64	d4, d5, d3
 8009b96:	1940      	adds	r0, r0, r5
 8009b98:	2700      	movs	r7, #0
 8009b9a:	eb17 020c 	adds.w	r2, r7, ip
 8009b9e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8009ba2:	eea6 7b04 	vfma.f64	d7, d6, d4
 8009ba6:	2e00      	cmp	r6, #0
 8009ba8:	d176      	bne.n	8009c98 <pow+0x480>
 8009baa:	42bd      	cmp	r5, r7
 8009bac:	db2a      	blt.n	8009c04 <pow+0x3ec>
 8009bae:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8009bb2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	ec41 0b10 	vmov	d0, r0, r1
 8009bbc:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009bc0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009be0 <pow+0x3c8>
 8009bc4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009bc8:	b007      	add	sp, #28
 8009bca:	ecbd 8b0a 	vpop	{d8-d12}
 8009bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd2:	f000 b8d1 	b.w	8009d78 <__math_check_oflow>
 8009bd6:	bf00      	nop
 8009bd8:	00000000 	.word	0x00000000
 8009bdc:	43300000 	.word	0x43300000
 8009be0:	00000000 	.word	0x00000000
 8009be4:	7f000000 	.word	0x7f000000
 8009be8:	3ff00000 	.word	0x3ff00000
 8009bec:	fff00000 	.word	0xfff00000
 8009bf0:	ffe00000 	.word	0xffe00000
 8009bf4:	7fe00000 	.word	0x7fe00000
 8009bf8:	c0196aab 	.word	0xc0196aab
 8009bfc:	0800a1f0 	.word	0x0800a1f0
 8009c00:	0800b238 	.word	0x0800b238
 8009c04:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009c08:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	ec41 0b15 	vmov	d5, r0, r1
 8009c12:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8009c16:	ee27 6b05 	vmul.f64	d6, d7, d5
 8009c1a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8009c1e:	eeb0 4bc7 	vabs.f64	d4, d7
 8009c22:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8009c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009ca8 <pow+0x490>
 8009c2e:	d52a      	bpl.n	8009c86 <pow+0x46e>
 8009c30:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009c34:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8009c40:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8009c44:	bf58      	it	pl
 8009c46:	eeb0 4b43 	vmovpl.f64	d4, d3
 8009c4a:	ee37 3b04 	vadd.f64	d3, d7, d4
 8009c4e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8009c52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009c56:	ee36 6b05 	vadd.f64	d6, d6, d5
 8009c5a:	ee36 6b03 	vadd.f64	d6, d6, d3
 8009c5e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8009c62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6a:	d104      	bne.n	8009c76 <pow+0x45e>
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009c72:	ec43 2b17 	vmov	d7, r2, r3
 8009c76:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c7a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c7e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8009c82:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009c86:	ee27 0b00 	vmul.f64	d0, d7, d0
 8009c8a:	b007      	add	sp, #28
 8009c8c:	ecbd 8b0a 	vpop	{d8-d12}
 8009c90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	f000 b867 	b.w	8009d66 <__math_check_uflow>
 8009c98:	ec43 2b10 	vmov	d0, r2, r3
 8009c9c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009ca0:	e625      	b.n	80098ee <pow+0xd6>
 8009ca2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8009cb0 <pow+0x498>
 8009ca6:	e622      	b.n	80098ee <pow+0xd6>
 8009ca8:	00000000 	.word	0x00000000
 8009cac:	00100000 	.word	0x00100000
	...

08009cb8 <__ieee754_sqrt>:
 8009cb8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8009cbc:	4770      	bx	lr

08009cbe <with_errno>:
 8009cbe:	b513      	push	{r0, r1, r4, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	ed8d 0b00 	vstr	d0, [sp]
 8009cc6:	f7fd fd2f 	bl	8007728 <__errno>
 8009cca:	ed9d 0b00 	vldr	d0, [sp]
 8009cce:	6004      	str	r4, [r0, #0]
 8009cd0:	b002      	add	sp, #8
 8009cd2:	bd10      	pop	{r4, pc}

08009cd4 <xflow>:
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	b158      	cbz	r0, 8009cf0 <xflow+0x1c>
 8009cd8:	eeb1 7b40 	vneg.f64	d7, d0
 8009cdc:	ed8d 7b00 	vstr	d7, [sp]
 8009ce0:	ed9d 7b00 	vldr	d7, [sp]
 8009ce4:	2022      	movs	r0, #34	; 0x22
 8009ce6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009cea:	b002      	add	sp, #8
 8009cec:	f7ff bfe7 	b.w	8009cbe <with_errno>
 8009cf0:	eeb0 7b40 	vmov.f64	d7, d0
 8009cf4:	e7f2      	b.n	8009cdc <xflow+0x8>
	...

08009cf8 <__math_uflow>:
 8009cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d00 <__math_uflow+0x8>
 8009cfc:	f7ff bfea 	b.w	8009cd4 <xflow>
 8009d00:	00000000 	.word	0x00000000
 8009d04:	10000000 	.word	0x10000000

08009d08 <__math_oflow>:
 8009d08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d10 <__math_oflow+0x8>
 8009d0c:	f7ff bfe2 	b.w	8009cd4 <xflow>
 8009d10:	00000000 	.word	0x00000000
 8009d14:	70000000 	.word	0x70000000

08009d18 <__math_divzero>:
 8009d18:	b082      	sub	sp, #8
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009d20:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8009d24:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8009d28:	ed8d 7b00 	vstr	d7, [sp]
 8009d2c:	ed9d 0b00 	vldr	d0, [sp]
 8009d30:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8009d40 <__math_divzero+0x28>
 8009d34:	2022      	movs	r0, #34	; 0x22
 8009d36:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8009d3a:	b002      	add	sp, #8
 8009d3c:	f7ff bfbf 	b.w	8009cbe <with_errno>
	...

08009d48 <__math_invalid>:
 8009d48:	eeb0 7b40 	vmov.f64	d7, d0
 8009d4c:	eeb4 7b47 	vcmp.f64	d7, d7
 8009d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d54:	ee30 6b40 	vsub.f64	d6, d0, d0
 8009d58:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8009d5c:	d602      	bvs.n	8009d64 <__math_invalid+0x1c>
 8009d5e:	2021      	movs	r0, #33	; 0x21
 8009d60:	f7ff bfad 	b.w	8009cbe <with_errno>
 8009d64:	4770      	bx	lr

08009d66 <__math_check_uflow>:
 8009d66:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	d102      	bne.n	8009d76 <__math_check_uflow+0x10>
 8009d70:	2022      	movs	r0, #34	; 0x22
 8009d72:	f7ff bfa4 	b.w	8009cbe <with_errno>
 8009d76:	4770      	bx	lr

08009d78 <__math_check_oflow>:
 8009d78:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8009d98 <__math_check_oflow+0x20>
 8009d7c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009d80:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	dd02      	ble.n	8009d90 <__math_check_oflow+0x18>
 8009d8a:	2022      	movs	r0, #34	; 0x22
 8009d8c:	f7ff bf97 	b.w	8009cbe <with_errno>
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	f3af 8000 	nop.w
 8009d98:	ffffffff 	.word	0xffffffff
 8009d9c:	7fefffff 	.word	0x7fefffff

08009da0 <_init>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr

08009dac <_fini>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr
