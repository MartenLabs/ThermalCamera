
STM_AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e6c  0800ece0  0800ece0  0001ece0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b4c  08010b4c  00030ea4  2**0
                  CONTENTS
  4 .ARM          00000008  08010b4c  08010b4c  00020b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b54  08010b54  00030ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b54  08010b54  00020b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b58  08010b58  00020b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ea4  20000000  08010b5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030ea4  2**0
                  CONTENTS
 10 .bss          00012618  20000ec0  20000ec0  00030ec0  2**5
                  ALLOC
 11 ._user_heap_stack 00001000  200134d8  200134d8  00030ec0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030ea4  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00030ed4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a64f  00000000  00000000  00030f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a9b  00000000  00000000  0004b5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd8  00000000  00000000  00050058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e41  00000000  00000000  00050c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000262aa  00000000  00000000  00051a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000170c2  00000000  00000000  00077d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da982  00000000  00000000  0008eddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035ac  00000000  00000000  00169760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000088ff  00000000  00000000  0016cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  0017560b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000ec0 	.word	0x20000ec0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecb4 	.word	0x0800ecb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000ec4 	.word	0x20000ec4
 80001cc:	0800ecb4 	.word	0x0800ecb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b9c2 	b.w	8001160 <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f858 	bl	8000e98 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_f2lz>:
 8000df4:	ee07 0a90 	vmov	s15, r0
 8000df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	d401      	bmi.n	8000e06 <__aeabi_f2lz+0x12>
 8000e02:	f000 b80b 	b.w	8000e1c <__aeabi_f2ulz>
 8000e06:	eef1 7a67 	vneg.f32	s15, s15
 8000e0a:	b508      	push	{r3, lr}
 8000e0c:	ee17 0a90 	vmov	r0, s15
 8000e10:	f000 f804 	bl	8000e1c <__aeabi_f2ulz>
 8000e14:	4240      	negs	r0, r0
 8000e16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <__aeabi_f2ulz>:
 8000e1c:	b5d0      	push	{r4, r6, r7, lr}
 8000e1e:	f7ff fb93 	bl	8000548 <__aeabi_f2d>
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__aeabi_f2ulz+0x38>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	4606      	mov	r6, r0
 8000e28:	460f      	mov	r7, r1
 8000e2a:	f7ff fbe5 	bl	80005f8 <__aeabi_dmul>
 8000e2e:	f000 f999 	bl	8001164 <__aeabi_d2uiz>
 8000e32:	4604      	mov	r4, r0
 8000e34:	f7ff fb66 	bl	8000504 <__aeabi_ui2d>
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <__aeabi_f2ulz+0x3c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f7ff fbdc 	bl	80005f8 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4630      	mov	r0, r6
 8000e46:	4639      	mov	r1, r7
 8000e48:	f7ff fa1e 	bl	8000288 <__aeabi_dsub>
 8000e4c:	f000 f98a 	bl	8001164 <__aeabi_d2uiz>
 8000e50:	4621      	mov	r1, r4
 8000e52:	bdd0      	pop	{r4, r6, r7, pc}
 8000e54:	3df00000 	.word	0x3df00000
 8000e58:	41f00000 	.word	0x41f00000

08000e5c <__aeabi_d2ulz>:
 8000e5c:	b5d0      	push	{r4, r6, r7, lr}
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__aeabi_d2ulz+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	4606      	mov	r6, r0
 8000e64:	460f      	mov	r7, r1
 8000e66:	f7ff fbc7 	bl	80005f8 <__aeabi_dmul>
 8000e6a:	f000 f97b 	bl	8001164 <__aeabi_d2uiz>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	f7ff fb48 	bl	8000504 <__aeabi_ui2d>
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <__aeabi_d2ulz+0x38>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f7ff fbbe 	bl	80005f8 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4630      	mov	r0, r6
 8000e82:	4639      	mov	r1, r7
 8000e84:	f7ff fa00 	bl	8000288 <__aeabi_dsub>
 8000e88:	f000 f96c 	bl	8001164 <__aeabi_d2uiz>
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e90:	3df00000 	.word	0x3df00000
 8000e94:	41f00000 	.word	0x41f00000

08000e98 <__udivmoddi4>:
 8000e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e9c:	9e08      	ldr	r6, [sp, #32]
 8000e9e:	460d      	mov	r5, r1
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	460f      	mov	r7, r1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14a      	bne.n	8000f3e <__udivmoddi4+0xa6>
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	4694      	mov	ip, r2
 8000eac:	d965      	bls.n	8000f7a <__udivmoddi4+0xe2>
 8000eae:	fab2 f382 	clz	r3, r2
 8000eb2:	b143      	cbz	r3, 8000ec6 <__udivmoddi4+0x2e>
 8000eb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb8:	f1c3 0220 	rsb	r2, r3, #32
 8000ebc:	409f      	lsls	r7, r3
 8000ebe:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec2:	4317      	orrs	r7, r2
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000eca:	fa1f f58c 	uxth.w	r5, ip
 8000ece:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ed2:	0c22      	lsrs	r2, r4, #16
 8000ed4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ed8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000edc:	fb01 f005 	mul.w	r0, r1, r5
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x62>
 8000ee4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ee8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000eec:	f080 811c 	bcs.w	8001128 <__udivmoddi4+0x290>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f240 8119 	bls.w	8001128 <__udivmoddi4+0x290>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a12      	subs	r2, r2, r0
 8000efc:	b2a4      	uxth	r4, r4
 8000efe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f0a:	fb00 f505 	mul.w	r5, r0, r5
 8000f0e:	42a5      	cmp	r5, r4
 8000f10:	d90a      	bls.n	8000f28 <__udivmoddi4+0x90>
 8000f12:	eb1c 0404 	adds.w	r4, ip, r4
 8000f16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f1a:	f080 8107 	bcs.w	800112c <__udivmoddi4+0x294>
 8000f1e:	42a5      	cmp	r5, r4
 8000f20:	f240 8104 	bls.w	800112c <__udivmoddi4+0x294>
 8000f24:	4464      	add	r4, ip
 8000f26:	3802      	subs	r0, #2
 8000f28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f2c:	1b64      	subs	r4, r4, r5
 8000f2e:	2100      	movs	r1, #0
 8000f30:	b11e      	cbz	r6, 8000f3a <__udivmoddi4+0xa2>
 8000f32:	40dc      	lsrs	r4, r3
 8000f34:	2300      	movs	r3, #0
 8000f36:	e9c6 4300 	strd	r4, r3, [r6]
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0xbc>
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	f000 80ed 	beq.w	8001122 <__udivmoddi4+0x28a>
 8000f48:	2100      	movs	r1, #0
 8000f4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000f4e:	4608      	mov	r0, r1
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	fab3 f183 	clz	r1, r3
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	d149      	bne.n	8000ff0 <__udivmoddi4+0x158>
 8000f5c:	42ab      	cmp	r3, r5
 8000f5e:	d302      	bcc.n	8000f66 <__udivmoddi4+0xce>
 8000f60:	4282      	cmp	r2, r0
 8000f62:	f200 80f8 	bhi.w	8001156 <__udivmoddi4+0x2be>
 8000f66:	1a84      	subs	r4, r0, r2
 8000f68:	eb65 0203 	sbc.w	r2, r5, r3
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	4617      	mov	r7, r2
 8000f70:	2e00      	cmp	r6, #0
 8000f72:	d0e2      	beq.n	8000f3a <__udivmoddi4+0xa2>
 8000f74:	e9c6 4700 	strd	r4, r7, [r6]
 8000f78:	e7df      	b.n	8000f3a <__udivmoddi4+0xa2>
 8000f7a:	b902      	cbnz	r2, 8000f7e <__udivmoddi4+0xe6>
 8000f7c:	deff      	udf	#255	; 0xff
 8000f7e:	fab2 f382 	clz	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f040 8090 	bne.w	80010a8 <__udivmoddi4+0x210>
 8000f88:	1a8a      	subs	r2, r1, r2
 8000f8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	2101      	movs	r1, #1
 8000f94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f98:	fb07 2015 	mls	r0, r7, r5, r2
 8000f9c:	0c22      	lsrs	r2, r4, #16
 8000f9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fa2:	fb0e f005 	mul.w	r0, lr, r5
 8000fa6:	4290      	cmp	r0, r2
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x124>
 8000faa:	eb1c 0202 	adds.w	r2, ip, r2
 8000fae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fb2:	d202      	bcs.n	8000fba <__udivmoddi4+0x122>
 8000fb4:	4290      	cmp	r0, r2
 8000fb6:	f200 80cb 	bhi.w	8001150 <__udivmoddi4+0x2b8>
 8000fba:	4645      	mov	r5, r8
 8000fbc:	1a12      	subs	r2, r2, r0
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000fc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000fd0:	45a6      	cmp	lr, r4
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x14e>
 8000fd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fdc:	d202      	bcs.n	8000fe4 <__udivmoddi4+0x14c>
 8000fde:	45a6      	cmp	lr, r4
 8000fe0:	f200 80bb 	bhi.w	800115a <__udivmoddi4+0x2c2>
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	eba4 040e 	sub.w	r4, r4, lr
 8000fea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000fee:	e79f      	b.n	8000f30 <__udivmoddi4+0x98>
 8000ff0:	f1c1 0720 	rsb	r7, r1, #32
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ffa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffe:	fa05 f401 	lsl.w	r4, r5, r1
 8001002:	fa20 f307 	lsr.w	r3, r0, r7
 8001006:	40fd      	lsrs	r5, r7
 8001008:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800100c:	4323      	orrs	r3, r4
 800100e:	fbb5 f8f9 	udiv	r8, r5, r9
 8001012:	fa1f fe8c 	uxth.w	lr, ip
 8001016:	fb09 5518 	mls	r5, r9, r8, r5
 800101a:	0c1c      	lsrs	r4, r3, #16
 800101c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001020:	fb08 f50e 	mul.w	r5, r8, lr
 8001024:	42a5      	cmp	r5, r4
 8001026:	fa02 f201 	lsl.w	r2, r2, r1
 800102a:	fa00 f001 	lsl.w	r0, r0, r1
 800102e:	d90b      	bls.n	8001048 <__udivmoddi4+0x1b0>
 8001030:	eb1c 0404 	adds.w	r4, ip, r4
 8001034:	f108 3aff 	add.w	sl, r8, #4294967295
 8001038:	f080 8088 	bcs.w	800114c <__udivmoddi4+0x2b4>
 800103c:	42a5      	cmp	r5, r4
 800103e:	f240 8085 	bls.w	800114c <__udivmoddi4+0x2b4>
 8001042:	f1a8 0802 	sub.w	r8, r8, #2
 8001046:	4464      	add	r4, ip
 8001048:	1b64      	subs	r4, r4, r5
 800104a:	b29d      	uxth	r5, r3
 800104c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001050:	fb09 4413 	mls	r4, r9, r3, r4
 8001054:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001058:	fb03 fe0e 	mul.w	lr, r3, lr
 800105c:	45a6      	cmp	lr, r4
 800105e:	d908      	bls.n	8001072 <__udivmoddi4+0x1da>
 8001060:	eb1c 0404 	adds.w	r4, ip, r4
 8001064:	f103 35ff 	add.w	r5, r3, #4294967295
 8001068:	d26c      	bcs.n	8001144 <__udivmoddi4+0x2ac>
 800106a:	45a6      	cmp	lr, r4
 800106c:	d96a      	bls.n	8001144 <__udivmoddi4+0x2ac>
 800106e:	3b02      	subs	r3, #2
 8001070:	4464      	add	r4, ip
 8001072:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001076:	fba3 9502 	umull	r9, r5, r3, r2
 800107a:	eba4 040e 	sub.w	r4, r4, lr
 800107e:	42ac      	cmp	r4, r5
 8001080:	46c8      	mov	r8, r9
 8001082:	46ae      	mov	lr, r5
 8001084:	d356      	bcc.n	8001134 <__udivmoddi4+0x29c>
 8001086:	d053      	beq.n	8001130 <__udivmoddi4+0x298>
 8001088:	b156      	cbz	r6, 80010a0 <__udivmoddi4+0x208>
 800108a:	ebb0 0208 	subs.w	r2, r0, r8
 800108e:	eb64 040e 	sbc.w	r4, r4, lr
 8001092:	fa04 f707 	lsl.w	r7, r4, r7
 8001096:	40ca      	lsrs	r2, r1
 8001098:	40cc      	lsrs	r4, r1
 800109a:	4317      	orrs	r7, r2
 800109c:	e9c6 7400 	strd	r7, r4, [r6]
 80010a0:	4618      	mov	r0, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a8:	f1c3 0120 	rsb	r1, r3, #32
 80010ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80010b0:	fa20 f201 	lsr.w	r2, r0, r1
 80010b4:	fa25 f101 	lsr.w	r1, r5, r1
 80010b8:	409d      	lsls	r5, r3
 80010ba:	432a      	orrs	r2, r5
 80010bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010c0:	fa1f fe8c 	uxth.w	lr, ip
 80010c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80010c8:	fb07 1510 	mls	r5, r7, r0, r1
 80010cc:	0c11      	lsrs	r1, r2, #16
 80010ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010d2:	fb00 f50e 	mul.w	r5, r0, lr
 80010d6:	428d      	cmp	r5, r1
 80010d8:	fa04 f403 	lsl.w	r4, r4, r3
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x258>
 80010de:	eb1c 0101 	adds.w	r1, ip, r1
 80010e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80010e6:	d22f      	bcs.n	8001148 <__udivmoddi4+0x2b0>
 80010e8:	428d      	cmp	r5, r1
 80010ea:	d92d      	bls.n	8001148 <__udivmoddi4+0x2b0>
 80010ec:	3802      	subs	r0, #2
 80010ee:	4461      	add	r1, ip
 80010f0:	1b49      	subs	r1, r1, r5
 80010f2:	b292      	uxth	r2, r2
 80010f4:	fbb1 f5f7 	udiv	r5, r1, r7
 80010f8:	fb07 1115 	mls	r1, r7, r5, r1
 80010fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001100:	fb05 f10e 	mul.w	r1, r5, lr
 8001104:	4291      	cmp	r1, r2
 8001106:	d908      	bls.n	800111a <__udivmoddi4+0x282>
 8001108:	eb1c 0202 	adds.w	r2, ip, r2
 800110c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001110:	d216      	bcs.n	8001140 <__udivmoddi4+0x2a8>
 8001112:	4291      	cmp	r1, r2
 8001114:	d914      	bls.n	8001140 <__udivmoddi4+0x2a8>
 8001116:	3d02      	subs	r5, #2
 8001118:	4462      	add	r2, ip
 800111a:	1a52      	subs	r2, r2, r1
 800111c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001120:	e738      	b.n	8000f94 <__udivmoddi4+0xfc>
 8001122:	4631      	mov	r1, r6
 8001124:	4630      	mov	r0, r6
 8001126:	e708      	b.n	8000f3a <__udivmoddi4+0xa2>
 8001128:	4639      	mov	r1, r7
 800112a:	e6e6      	b.n	8000efa <__udivmoddi4+0x62>
 800112c:	4610      	mov	r0, r2
 800112e:	e6fb      	b.n	8000f28 <__udivmoddi4+0x90>
 8001130:	4548      	cmp	r0, r9
 8001132:	d2a9      	bcs.n	8001088 <__udivmoddi4+0x1f0>
 8001134:	ebb9 0802 	subs.w	r8, r9, r2
 8001138:	eb65 0e0c 	sbc.w	lr, r5, ip
 800113c:	3b01      	subs	r3, #1
 800113e:	e7a3      	b.n	8001088 <__udivmoddi4+0x1f0>
 8001140:	4645      	mov	r5, r8
 8001142:	e7ea      	b.n	800111a <__udivmoddi4+0x282>
 8001144:	462b      	mov	r3, r5
 8001146:	e794      	b.n	8001072 <__udivmoddi4+0x1da>
 8001148:	4640      	mov	r0, r8
 800114a:	e7d1      	b.n	80010f0 <__udivmoddi4+0x258>
 800114c:	46d0      	mov	r8, sl
 800114e:	e77b      	b.n	8001048 <__udivmoddi4+0x1b0>
 8001150:	3d02      	subs	r5, #2
 8001152:	4462      	add	r2, ip
 8001154:	e732      	b.n	8000fbc <__udivmoddi4+0x124>
 8001156:	4608      	mov	r0, r1
 8001158:	e70a      	b.n	8000f70 <__udivmoddi4+0xd8>
 800115a:	4464      	add	r4, ip
 800115c:	3802      	subs	r0, #2
 800115e:	e742      	b.n	8000fe6 <__udivmoddi4+0x14e>

08001160 <__aeabi_idiv0>:
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_d2uiz>:
 8001164:	004a      	lsls	r2, r1, #1
 8001166:	d211      	bcs.n	800118c <__aeabi_d2uiz+0x28>
 8001168:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800116c:	d211      	bcs.n	8001192 <__aeabi_d2uiz+0x2e>
 800116e:	d50d      	bpl.n	800118c <__aeabi_d2uiz+0x28>
 8001170:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001174:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001178:	d40e      	bmi.n	8001198 <__aeabi_d2uiz+0x34>
 800117a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800117e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001182:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001186:	fa23 f002 	lsr.w	r0, r3, r2
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001196:	d102      	bne.n	800119e <__aeabi_d2uiz+0x3a>
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	4770      	bx	lr
 800119e:	f04f 0000 	mov.w	r0, #0
 80011a2:	4770      	bx	lr

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b510      	push	{r4, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a8:	2210      	movs	r2, #16
 80011aa:	2100      	movs	r1, #0
 80011ac:	a80a      	add	r0, sp, #40	; 0x28
 80011ae:	f00b fad4 	bl	800c75a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b2:	2214      	movs	r2, #20
 80011b4:	2100      	movs	r1, #0
 80011b6:	a803      	add	r0, sp, #12
 80011b8:	f00b facf 	bl	800c75a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <SystemClock_Config+0x98>)
 80011be:	2100      	movs	r1, #0
 80011c0:	9101      	str	r1, [sp, #4]
 80011c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <SystemClock_Config+0x9c>)
 80011d6:	9102      	str	r1, [sp, #8]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ea:	2101      	movs	r1, #1
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f2:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fa:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011fe:	22a8      	movs	r2, #168	; 0xa8
 8001200:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001204:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001208:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f000 fb2c 	bl	8001868 <HAL_RCC_OscConfig>
 8001210:	b108      	cbz	r0, 8001216 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001212:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001226:	2105      	movs	r1, #5
 8001228:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800122a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800122e:	f000 fcf5 	bl	8001c1c <HAL_RCC_ClockConfig>
 8001232:	b108      	cbz	r0, 8001238 <SystemClock_Config+0x94>
 8001234:	b672      	cpsid	i
  while (1)
 8001236:	e7fe      	b.n	8001236 <SystemClock_Config+0x92>
}
 8001238:	b014      	add	sp, #80	; 0x50
 800123a:	bd10      	pop	{r4, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <main>:
{
 8001244:	b500      	push	{lr}
 8001246:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001248:	f000 f974 	bl	8001534 <HAL_Init>
  SystemClock_Config();
 800124c:	f7ff ffaa 	bl	80011a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	2214      	movs	r2, #20
 8001252:	2100      	movs	r1, #0
 8001254:	a803      	add	r0, sp, #12
 8001256:	f00b fa80 	bl	800c75a <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2400      	movs	r4, #0
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <main+0xd4>)
 800125e:	9401      	str	r4, [sp, #4]
 8001260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001262:	482e      	ldr	r0, [pc, #184]	; (800131c <main+0xd8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
 800126a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001270:	9201      	str	r2, [sp, #4]
 8001272:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	9402      	str	r4, [sp, #8]
 8001276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001278:	f042 0208 	orr.w	r2, r2, #8
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001286:	4622      	mov	r2, r4
 8001288:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800128e:	f000 fae5 	bl	800185c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <main+0xd8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f000 fa00 	bl	80016a8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <main+0xdc>)
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <main+0xe0>)
 80012ac:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012ae:	f000 f9eb 	bl	8001688 <HAL_CRC_Init>
 80012b2:	b108      	cbz	r0, 80012b8 <main+0x74>
 80012b4:	b672      	cpsid	i
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <main+0x72>
  MX_X_CUBE_AI_Init();
 80012b8:	f002 fb02 	bl	80038c0 <MX_X_CUBE_AI_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012bc:	4c17      	ldr	r4, [pc, #92]	; (800131c <main+0xd8>)
 80012be:	4620      	mov	r0, r4
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c6:	f000 fac9 	bl	800185c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80012ca:	4620      	mov	r0, r4
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d2:	f000 fac3 	bl	800185c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012dc:	4620      	mov	r0, r4
 80012de:	f000 fabd 	bl	800185c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012e2:	2064      	movs	r0, #100	; 0x64
 80012e4:	f000 f952 	bl	800158c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80012e8:	4620      	mov	r0, r4
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	f000 fab4 	bl	800185c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80012f4:	4620      	mov	r0, r4
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fc:	f000 faae 	bl	800185c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001306:	4620      	mov	r0, r4
 8001308:	f000 faa8 	bl	800185c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800130c:	2064      	movs	r0, #100	; 0x64
 800130e:	f000 f93d 	bl	800158c <HAL_Delay>
  MX_X_CUBE_AI_Process();
 8001312:	f002 fadc 	bl	80038ce <MX_X_CUBE_AI_Process>
  while (1)
 8001316:	e7d2      	b.n	80012be <main+0x7a>
 8001318:	40023800 	.word	0x40023800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	20000edc 	.word	0x20000edc
 8001324:	40023000 	.word	0x40023000

08001328 <MX_USART3_UART_Init>:
  huart3.Instance = USART3;
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <MX_USART3_UART_Init+0x2c>)
  huart3.Init.BaudRate = 115200;
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <MX_USART3_UART_Init+0x30>)
{
 800132c:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 800132e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001332:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001338:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800133a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001342:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001346:	f000 fde7 	bl	8001f18 <HAL_UART_Init>
 800134a:	b108      	cbz	r0, 8001350 <MX_USART3_UART_Init+0x28>
 800134c:	b672      	cpsid	i
  while (1)
 800134e:	e7fe      	b.n	800134e <MX_USART3_UART_Init+0x26>
}
 8001350:	bd08      	pop	{r3, pc}
 8001352:	bf00      	nop
 8001354:	20000ee4 	.word	0x20000ee4
 8001358:	40004800 	.word	0x40004800

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x34>)
 8001360:	2100      	movs	r1, #0
 8001362:	9100      	str	r1, [sp, #0]
 8001364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800136a:	645a      	str	r2, [r3, #68]	; 0x44
 800136c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800136e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001372:	9200      	str	r2, [sp, #0]
 8001374:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	9101      	str	r1, [sp, #4]
 8001378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	b002      	add	sp, #8
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001394:	6802      	ldr	r2, [r0, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_CRC_MspInit+0x28>)
 8001398:	429a      	cmp	r2, r3
{
 800139a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800139c:	d10b      	bne.n	80013b6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_CRC_MspInit+0x2c>)
 80013a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013b6:	b002      	add	sp, #8
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023000 	.word	0x40023000
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
 80013c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	2214      	movs	r2, #20
 80013cc:	2100      	movs	r1, #0
 80013ce:	a803      	add	r0, sp, #12
 80013d0:	f00b f9c3 	bl	800c75a <memset>
  if(huart->Instance==USART3)
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_UART_MspInit+0x64>)
 80013d8:	429a      	cmp	r2, r3
 80013da:	d123      	bne.n	8001424 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013dc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80013e0:	2100      	movs	r1, #0
 80013e2:	9101      	str	r1, [sp, #4]
 80013e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
 80013ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	9102      	str	r1, [sp, #8]
 80013fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013fc:	f042 0208 	orr.w	r2, r2, #8
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001410:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001412:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001418:	2307      	movs	r3, #7
 800141a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	a903      	add	r1, sp, #12
 8001420:	f000 f942 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001424:	b008      	add	sp, #32
 8001426:	bd10      	pop	{r4, pc}
 8001428:	40004800 	.word	0x40004800
 800142c:	40020c00 	.word	0x40020c00

08001430 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler>

08001432 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler>

08001434 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler>

08001436 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler>

08001438 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler>

0800143a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 b892 	b.w	8001568 <HAL_IncTick>

08001444 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <_sbrk+0x30>)
 8001446:	6811      	ldr	r1, [r2, #0]
{
 8001448:	b510      	push	{r4, lr}
 800144a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800144c:	b909      	cbnz	r1, 8001452 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800144e:	490a      	ldr	r1, [pc, #40]	; (8001478 <_sbrk+0x34>)
 8001450:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	6810      	ldr	r0, [r2, #0]
 8001454:	4909      	ldr	r1, [pc, #36]	; (800147c <_sbrk+0x38>)
 8001456:	4c0a      	ldr	r4, [pc, #40]	; (8001480 <_sbrk+0x3c>)
 8001458:	4403      	add	r3, r0
 800145a:	1b09      	subs	r1, r1, r4
 800145c:	428b      	cmp	r3, r1
 800145e:	d906      	bls.n	800146e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001460:	f00b f9f0 	bl	800c844 <__errno>
 8001464:	230c      	movs	r3, #12
 8001466:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001468:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800146c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800146e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001470:	e7fc      	b.n	800146c <_sbrk+0x28>
 8001472:	bf00      	nop
 8001474:	20000f2c 	.word	0x20000f2c
 8001478:	200134d8 	.word	0x200134d8
 800147c:	2001c000 	.word	0x2001c000
 8001480:	00000800 	.word	0x00000800

08001484 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4a03      	ldr	r2, [pc, #12]	; (8001494 <SystemInit+0x10>)
 8001486:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800148a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800149c:	f7ff fff2 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f00b f9c3 	bl	800c850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff febb 	bl	8001244 <main>
  bx  lr    
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014d0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000ea4 	.word	0x20000ea4
  ldr r2, =_sidata
 80014dc:	08010b5c 	.word	0x08010b5c
  ldr r2, =_sbss
 80014e0:	20000ec0 	.word	0x20000ec0
  ldr r4, =_ebss
 80014e4:	200134d8 	.word	0x200134d8

080014e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC_IRQHandler>
	...

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_InitTick+0x3c>)
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_InitTick+0x40>)
{
 80014fc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fe:	6810      	ldr	r0, [r2, #0]
 8001500:	fbb0 f0f3 	udiv	r0, r0, r3
 8001504:	f000 f8ac 	bl	8001660 <HAL_SYSTICK_Config>
 8001508:	4604      	mov	r4, r0
 800150a:	b958      	cbnz	r0, 8001524 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	2d0f      	cmp	r5, #15
 800150e:	d809      	bhi.n	8001524 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	4602      	mov	r2, r0
 8001512:	4629      	mov	r1, r5
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f870 	bl	80015fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_InitTick+0x44>)
 800151e:	4620      	mov	r0, r4
 8001520:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001522:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
 8001526:	e7fc      	b.n	8001522 <HAL_InitTick+0x36>
 8001528:	20000004 	.word	0x20000004
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008

08001534 <HAL_Init>:
{
 8001534:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_Init+0x30>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001546:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f841 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f7ff ffc8 	bl	80014ec <HAL_InitTick>
  HAL_MspInit();
 800155c:	f7ff fefe 	bl	800135c <HAL_MspInit>
}
 8001560:	2000      	movs	r0, #0
 8001562:	bd08      	pop	{r3, pc}
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001568:	4a03      	ldr	r2, [pc, #12]	; (8001578 <HAL_IncTick+0x10>)
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_IncTick+0x14>)
 800156c:	6811      	ldr	r1, [r2, #0]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	440b      	add	r3, r1
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000f30 	.word	0x20000f30
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_GetTick+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000f30 	.word	0x20000f30

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fff6 	bl	8001580 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001594:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	bf1c      	itt	ne
 8001598:	4b05      	ldrne	r3, [pc, #20]	; (80015b0 <HAL_Delay+0x24>)
 800159a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800159c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800159e:	bf18      	it	ne
 80015a0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a2:	f7ff ffed 	bl	8001580 <HAL_GetTick>
 80015a6:	1b43      	subs	r3, r0, r5
 80015a8:	42a3      	cmp	r3, r4
 80015aa:	d3fa      	bcc.n	80015a2 <HAL_Delay+0x16>
  {
  }
}
 80015ac:	bd38      	pop	{r3, r4, r5, pc}
 80015ae:	bf00      	nop
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 80015b4:	4800      	ldr	r0, [pc, #0]	; (80015b8 <HAL_GetHalVersion+0x4>)
 80015b6:	4770      	bx	lr
 80015b8:	01080200 	.word	0x01080200

080015bc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <HAL_GetREVID+0x8>)
 80015be:	6818      	ldr	r0, [r3, #0]
}
 80015c0:	0c00      	lsrs	r0, r0, #16
 80015c2:	4770      	bx	lr
 80015c4:	e0042000 	.word	0xe0042000

080015c8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_GetDEVID+0xc>)
 80015ca:	6818      	ldr	r0, [r3, #0]
}
 80015cc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e0042000 	.word	0xe0042000

080015d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015da:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80015f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fe:	b530      	push	{r4, r5, lr}
 8001600:	68dc      	ldr	r4, [r3, #12]
 8001602:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001606:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	2b04      	cmp	r3, #4
 800160e:	bf28      	it	cs
 8001610:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001618:	bf8c      	ite	hi
 800161a:	3c03      	subhi	r4, #3
 800161c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161e:	fa05 f303 	lsl.w	r3, r5, r3
 8001622:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001626:	40a5      	lsls	r5, r4
 8001628:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800162e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	bfac      	ite	ge
 8001636:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	4a08      	ldrlt	r2, [pc, #32]	; (800165c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	bfb8      	it	lt
 8001642:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	b2db      	uxtb	r3, r3
 8001648:	bfaa      	itet	ge
 800164a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001654:	bd30      	pop	{r4, r5, pc}
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	e000ed14 	.word	0xe000ed14

08001660 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	3801      	subs	r0, #1
 8001662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001666:	d20b      	bcs.n	8001680 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001668:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	21f0      	movs	r1, #240	; 0xf0
 8001672:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001676:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001678:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001680:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001688:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800168a:	4604      	mov	r4, r0
 800168c:	b150      	cbz	r0, 80016a4 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800168e:	7943      	ldrb	r3, [r0, #5]
 8001690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001694:	b913      	cbnz	r3, 800169c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001696:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001698:	f7ff fe7c 	bl	8001394 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800169c:	2301      	movs	r3, #1
 800169e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80016a0:	2000      	movs	r0, #0
}
 80016a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016a4:	2001      	movs	r0, #1
 80016a6:	e7fc      	b.n	80016a2 <HAL_CRC_Init+0x1a>

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001858 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b0:	4a67      	ldr	r2, [pc, #412]	; (8001850 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80016b6:	2401      	movs	r4, #1
 80016b8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80016be:	43ac      	bics	r4, r5
 80016c0:	f040 80b1 	bne.w	8001826 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c4:	684d      	ldr	r5, [r1, #4]
 80016c6:	f005 0403 	and.w	r4, r5, #3
 80016ca:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ce:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016dc:	d834      	bhi.n	8001748 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80016de:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e4:	68cf      	ldr	r7, [r1, #12]
 80016e6:	fa07 f708 	lsl.w	r7, r7, r8
 80016ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80016ee:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016f0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80016fa:	409f      	lsls	r7, r3
 80016fc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001700:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001702:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001704:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001708:	688f      	ldr	r7, [r1, #8]
 800170a:	fa07 f708 	lsl.w	r7, r7, r8
 800170e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001714:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	d119      	bne.n	800174c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001718:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800171c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001720:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001724:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001728:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800172c:	f04f 0e0f 	mov.w	lr, #15
 8001730:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001734:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	690f      	ldr	r7, [r1, #16]
 800173a:	fa07 f70b 	lsl.w	r7, r7, fp
 800173e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001742:	f8ca 7020 	str.w	r7, [sl, #32]
 8001746:	e001      	b.n	800174c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001748:	2c03      	cmp	r4, #3
 800174a:	d1da      	bne.n	8001702 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800174c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001752:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001754:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001756:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800175a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800175c:	d063      	beq.n	8001826 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	f04f 0a00 	mov.w	sl, #0
 8001762:	f8cd a004 	str.w	sl, [sp, #4]
 8001766:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	4c3a      	ldr	r4, [pc, #232]	; (8001854 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001770:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001774:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001778:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800177c:	9601      	str	r6, [sp, #4]
 800177e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001780:	f023 0603 	bic.w	r6, r3, #3
 8001784:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001788:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001790:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001794:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001798:	270f      	movs	r7, #15
 800179a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a4:	d046      	beq.n	8001834 <HAL_GPIO_Init+0x18c>
 80017a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017aa:	42a0      	cmp	r0, r4
 80017ac:	d044      	beq.n	8001838 <HAL_GPIO_Init+0x190>
 80017ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017b2:	42a0      	cmp	r0, r4
 80017b4:	d042      	beq.n	800183c <HAL_GPIO_Init+0x194>
 80017b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ba:	42a0      	cmp	r0, r4
 80017bc:	d040      	beq.n	8001840 <HAL_GPIO_Init+0x198>
 80017be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017c2:	42a0      	cmp	r0, r4
 80017c4:	d03e      	beq.n	8001844 <HAL_GPIO_Init+0x19c>
 80017c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ca:	42a0      	cmp	r0, r4
 80017cc:	d03c      	beq.n	8001848 <HAL_GPIO_Init+0x1a0>
 80017ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017d2:	42a0      	cmp	r0, r4
 80017d4:	d03a      	beq.n	800184c <HAL_GPIO_Init+0x1a4>
 80017d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017da:	42a0      	cmp	r0, r4
 80017dc:	bf0c      	ite	eq
 80017de:	2407      	moveq	r4, #7
 80017e0:	2408      	movne	r4, #8
 80017e2:	fa04 f40e 	lsl.w	r4, r4, lr
 80017e6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80017ea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80017f2:	bf54      	ite	pl
 80017f4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017f6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80017fa:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017fe:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001800:	bf54      	ite	pl
 8001802:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001804:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001808:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800180a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800180e:	bf54      	ite	pl
 8001810:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001812:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001816:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001818:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800181c:	bf54      	ite	pl
 800181e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001820:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001824:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	3301      	adds	r3, #1
 8001828:	2b10      	cmp	r3, #16
 800182a:	f47f af43 	bne.w	80016b4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800182e:	b003      	add	sp, #12
 8001830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001834:	4654      	mov	r4, sl
 8001836:	e7d4      	b.n	80017e2 <HAL_GPIO_Init+0x13a>
 8001838:	2401      	movs	r4, #1
 800183a:	e7d2      	b.n	80017e2 <HAL_GPIO_Init+0x13a>
 800183c:	2402      	movs	r4, #2
 800183e:	e7d0      	b.n	80017e2 <HAL_GPIO_Init+0x13a>
 8001840:	2403      	movs	r4, #3
 8001842:	e7ce      	b.n	80017e2 <HAL_GPIO_Init+0x13a>
 8001844:	2404      	movs	r4, #4
 8001846:	e7cc      	b.n	80017e2 <HAL_GPIO_Init+0x13a>
 8001848:	2405      	movs	r4, #5
 800184a:	e7ca      	b.n	80017e2 <HAL_GPIO_Init+0x13a>
 800184c:	2406      	movs	r4, #6
 800184e:	e7c8      	b.n	80017e2 <HAL_GPIO_Init+0x13a>
 8001850:	40013c00 	.word	0x40013c00
 8001854:	40020000 	.word	0x40020000
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	b10a      	cbz	r2, 8001862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185e:	6181      	str	r1, [r0, #24]
  }
}
 8001860:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001862:	0409      	lsls	r1, r1, #16
 8001864:	e7fb      	b.n	800185e <HAL_GPIO_WritePin+0x2>
	...

08001868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800186c:	4604      	mov	r4, r0
 800186e:	b340      	cbz	r0, 80018c2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001870:	6803      	ldr	r3, [r0, #0]
 8001872:	07dd      	lsls	r5, r3, #31
 8001874:	d410      	bmi.n	8001898 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	0798      	lsls	r0, r3, #30
 800187a:	d45b      	bmi.n	8001934 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	071a      	lsls	r2, r3, #28
 8001880:	f100 809d 	bmi.w	80019be <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	075b      	lsls	r3, r3, #29
 8001888:	f100 80bd 	bmi.w	8001a06 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188c:	69a0      	ldr	r0, [r4, #24]
 800188e:	2800      	cmp	r0, #0
 8001890:	f040 8124 	bne.w	8001adc <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2000      	movs	r0, #0
 8001896:	e02c      	b.n	80018f2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001898:	4b8d      	ldr	r3, [pc, #564]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	f002 020c 	and.w	r2, r2, #12
 80018a0:	2a04      	cmp	r2, #4
 80018a2:	d007      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018aa:	2a08      	cmp	r2, #8
 80018ac:	d10b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0259      	lsls	r1, r3, #9
 80018b2:	d508      	bpl.n	80018c6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	4b86      	ldr	r3, [pc, #536]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	039a      	lsls	r2, r3, #14
 80018ba:	d5dc      	bpl.n	8001876 <HAL_RCC_OscConfig+0xe>
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1d9      	bne.n	8001876 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e015      	b.n	80018f2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	6863      	ldr	r3, [r4, #4]
 80018c8:	4d81      	ldr	r5, [pc, #516]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d113      	bne.n	80018f8 <HAL_RCC_OscConfig+0x90>
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018d8:	f7ff fe52 	bl	8001580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018dc:	4e7c      	ldr	r6, [pc, #496]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80018de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e0:	6833      	ldr	r3, [r6, #0]
 80018e2:	039b      	lsls	r3, r3, #14
 80018e4:	d4c7      	bmi.n	8001876 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e6:	f7ff fe4b 	bl	8001580 <HAL_GetTick>
 80018ea:	1b40      	subs	r0, r0, r5
 80018ec:	2864      	cmp	r0, #100	; 0x64
 80018ee:	d9f7      	bls.n	80018e0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80018f0:	2003      	movs	r0, #3
}
 80018f2:	b002      	add	sp, #8
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fc:	d104      	bne.n	8001908 <HAL_RCC_OscConfig+0xa0>
 80018fe:	682b      	ldr	r3, [r5, #0]
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	602b      	str	r3, [r5, #0]
 8001906:	e7e3      	b.n	80018d0 <HAL_RCC_OscConfig+0x68>
 8001908:	682a      	ldr	r2, [r5, #0]
 800190a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800190e:	602a      	str	r2, [r5, #0]
 8001910:	682a      	ldr	r2, [r5, #0]
 8001912:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001916:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1dd      	bne.n	80018d8 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 800191c:	f7ff fe30 	bl	8001580 <HAL_GetTick>
 8001920:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	039f      	lsls	r7, r3, #14
 8001926:	d5a6      	bpl.n	8001876 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fe2a 	bl	8001580 <HAL_GetTick>
 800192c:	1b80      	subs	r0, r0, r6
 800192e:	2864      	cmp	r0, #100	; 0x64
 8001930:	d9f7      	bls.n	8001922 <HAL_RCC_OscConfig+0xba>
 8001932:	e7dd      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001934:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	f012 0f0c 	tst.w	r2, #12
 800193c:	d007      	beq.n	800194e <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001944:	2a08      	cmp	r2, #8
 8001946:	d111      	bne.n	800196c <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	025e      	lsls	r6, r3, #9
 800194c:	d40e      	bmi.n	800196c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4a60      	ldr	r2, [pc, #384]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	079d      	lsls	r5, r3, #30
 8001954:	d502      	bpl.n	800195c <HAL_RCC_OscConfig+0xf4>
 8001956:	68e3      	ldr	r3, [r4, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d1b2      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	6921      	ldr	r1, [r4, #16]
 8001960:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001964:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001968:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	e787      	b.n	800187c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800196c:	68e2      	ldr	r2, [r4, #12]
 800196e:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001970:	b1b2      	cbz	r2, 80019a0 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001976:	f7ff fe03 	bl	8001580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	4d55      	ldr	r5, [pc, #340]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800197c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	682b      	ldr	r3, [r5, #0]
 8001980:	0798      	lsls	r0, r3, #30
 8001982:	d507      	bpl.n	8001994 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	6922      	ldr	r2, [r4, #16]
 8001988:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800198c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001990:	602b      	str	r3, [r5, #0]
 8001992:	e773      	b.n	800187c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fdf4 	bl	8001580 <HAL_GetTick>
 8001998:	1b80      	subs	r0, r0, r6
 800199a:	2802      	cmp	r0, #2
 800199c:	d9ef      	bls.n	800197e <HAL_RCC_OscConfig+0x116>
 800199e:	e7a7      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80019a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019a2:	f7ff fded 	bl	8001580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4e4a      	ldr	r6, [pc, #296]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80019a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	6833      	ldr	r3, [r6, #0]
 80019ac:	0799      	lsls	r1, r3, #30
 80019ae:	f57f af65 	bpl.w	800187c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fde5 	bl	8001580 <HAL_GetTick>
 80019b6:	1b40      	subs	r0, r0, r5
 80019b8:	2802      	cmp	r0, #2
 80019ba:	d9f6      	bls.n	80019aa <HAL_RCC_OscConfig+0x142>
 80019bc:	e798      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019be:	6962      	ldr	r2, [r4, #20]
 80019c0:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	b182      	cbz	r2, 80019e6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80019c4:	2201      	movs	r2, #1
 80019c6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80019ca:	f7ff fdd9 	bl	8001580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	4e40      	ldr	r6, [pc, #256]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80019d0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80019d4:	079f      	lsls	r7, r3, #30
 80019d6:	f53f af55 	bmi.w	8001884 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fdd1 	bl	8001580 <HAL_GetTick>
 80019de:	1b40      	subs	r0, r0, r5
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d9f6      	bls.n	80019d2 <HAL_RCC_OscConfig+0x16a>
 80019e4:	e784      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80019e6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80019ea:	f7ff fdc9 	bl	8001580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ee:	4e38      	ldr	r6, [pc, #224]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80019f0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80019f4:	0798      	lsls	r0, r3, #30
 80019f6:	f57f af45 	bpl.w	8001884 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff fdc1 	bl	8001580 <HAL_GetTick>
 80019fe:	1b40      	subs	r0, r0, r5
 8001a00:	2802      	cmp	r0, #2
 8001a02:	d9f6      	bls.n	80019f2 <HAL_RCC_OscConfig+0x18a>
 8001a04:	e774      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a06:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 8001a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0a:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001a0e:	d128      	bne.n	8001a62 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a24:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4d2c      	ldr	r5, [pc, #176]	; (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	05d9      	lsls	r1, r3, #23
 8001a2c:	d51b      	bpl.n	8001a66 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2e:	68a3      	ldr	r3, [r4, #8]
 8001a30:	4d27      	ldr	r5, [pc, #156]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d127      	bne.n	8001a86 <HAL_RCC_OscConfig+0x21e>
 8001a36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fd9f 	bl	8001580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a42:	4e23      	ldr	r6, [pc, #140]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001a44:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001a4c:	079b      	lsls	r3, r3, #30
 8001a4e:	d539      	bpl.n	8001ac4 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8001a50:	2f00      	cmp	r7, #0
 8001a52:	f43f af1b 	beq.w	800188c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <HAL_RCC_OscConfig+0x268>)
 8001a58:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	e714      	b.n	800188c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001a62:	2700      	movs	r7, #0
 8001a64:	e7df      	b.n	8001a26 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	682b      	ldr	r3, [r5, #0]
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fd87 	bl	8001580 <HAL_GetTick>
 8001a72:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	682b      	ldr	r3, [r5, #0]
 8001a76:	05da      	lsls	r2, r3, #23
 8001a78:	d4d9      	bmi.n	8001a2e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff fd81 	bl	8001580 <HAL_GetTick>
 8001a7e:	1b80      	subs	r0, r0, r6
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9f7      	bls.n	8001a74 <HAL_RCC_OscConfig+0x20c>
 8001a84:	e734      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d104      	bne.n	8001a94 <HAL_RCC_OscConfig+0x22c>
 8001a8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	672b      	str	r3, [r5, #112]	; 0x70
 8001a92:	e7d0      	b.n	8001a36 <HAL_RCC_OscConfig+0x1ce>
 8001a94:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	672a      	str	r2, [r5, #112]	; 0x70
 8001a9c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a9e:	f022 0204 	bic.w	r2, r2, #4
 8001aa2:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ca      	bne.n	8001a3e <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fd6a 	bl	8001580 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ab0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ab4:	0798      	lsls	r0, r3, #30
 8001ab6:	d5cb      	bpl.n	8001a50 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fd62 	bl	8001580 <HAL_GetTick>
 8001abc:	1b80      	subs	r0, r0, r6
 8001abe:	4540      	cmp	r0, r8
 8001ac0:	d9f7      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x24a>
 8001ac2:	e715      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fd5c 	bl	8001580 <HAL_GetTick>
 8001ac8:	1b40      	subs	r0, r0, r5
 8001aca:	4540      	cmp	r0, r8
 8001acc:	d9bd      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1e2>
 8001ace:	e70f      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	42470000 	.word	0x42470000
 8001ad8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001adc:	4d36      	ldr	r5, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
 8001ade:	68ab      	ldr	r3, [r5, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d03d      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_OscConfig+0x354>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001aee:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af0:	d12b      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 8001af2:	f7ff fd45 	bl	8001580 <HAL_GetTick>
 8001af6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	0199      	lsls	r1, r3, #6
 8001afc:	d41f      	bmi.n	8001b3e <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afe:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b12:	0852      	lsrs	r2, r2, #1
 8001b14:	3a01      	subs	r2, #1
 8001b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b1a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x354>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4d26      	ldr	r5, [pc, #152]	; (8001bb8 <HAL_RCC_OscConfig+0x350>)
        __HAL_RCC_PLL_ENABLE();
 8001b20:	2201      	movs	r2, #1
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001b24:	f7ff fd2c 	bl	8001580 <HAL_GetTick>
 8001b28:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	682b      	ldr	r3, [r5, #0]
 8001b2c:	019a      	lsls	r2, r3, #6
 8001b2e:	f53f aeb1 	bmi.w	8001894 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff fd25 	bl	8001580 <HAL_GetTick>
 8001b36:	1b00      	subs	r0, r0, r4
 8001b38:	2802      	cmp	r0, #2
 8001b3a:	d9f6      	bls.n	8001b2a <HAL_RCC_OscConfig+0x2c2>
 8001b3c:	e6d8      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff fd1f 	bl	8001580 <HAL_GetTick>
 8001b42:	1b80      	subs	r0, r0, r6
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d9d7      	bls.n	8001af8 <HAL_RCC_OscConfig+0x290>
 8001b48:	e6d2      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fd19 	bl	8001580 <HAL_GetTick>
 8001b4e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	019b      	lsls	r3, r3, #6
 8001b54:	f57f ae9e 	bpl.w	8001894 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff fd12 	bl	8001580 <HAL_GetTick>
 8001b5c:	1b00      	subs	r0, r0, r4
 8001b5e:	2802      	cmp	r0, #2
 8001b60:	d9f6      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2e8>
 8001b62:	e6c5      	b.n	80018f0 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b64:	2801      	cmp	r0, #1
 8001b66:	f43f aec4 	beq.w	80018f2 <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 8001b6a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b72:	4291      	cmp	r1, r2
 8001b74:	f47f aea5 	bne.w	80018c2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b78:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	f47f ae9f 	bne.w	80018c2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b84:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b86:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001b90:	f47f ae97 	bne.w	80018c2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b96:	0852      	lsrs	r2, r2, #1
 8001b98:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001b9c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b9e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001ba2:	f47f ae8e 	bne.w	80018c2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ba8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bac:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001bb0:	f43f ae70 	beq.w	8001894 <HAL_RCC_OscConfig+0x2c>
 8001bb4:	e685      	b.n	80018c2 <HAL_RCC_OscConfig+0x5a>
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470000 	.word	0x42470000

08001bc0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc0:	4913      	ldr	r1, [pc, #76]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001bc2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc4:	688b      	ldr	r3, [r1, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d01c      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x48>
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bdc:	bf14      	ite	ne
 8001bde:	480d      	ldrne	r0, [pc, #52]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be0:	480d      	ldreq	r0, [pc, #52]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001be6:	bf18      	it	ne
 8001be8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bee:	fba1 0100 	umull	r0, r1, r1, r0
 8001bf2:	f7ff f8e7 	bl	8000dc4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x50>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c02:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c06:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x54>)
 8001c0a:	e7fc      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001c0e:	e7fa      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x46>
 8001c10:	40023800 	.word	0x40023800
 8001c14:	007a1200 	.word	0x007a1200
 8001c18:	00f42400 	.word	0x00f42400

08001c1c <HAL_RCC_ClockConfig>:
{
 8001c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c20:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c22:	4604      	mov	r4, r0
 8001c24:	b910      	cbnz	r0, 8001c2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c26:	2001      	movs	r0, #1
}
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_ClockConfig+0x120>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	f002 0207 	and.w	r2, r2, #7
 8001c34:	428a      	cmp	r2, r1
 8001c36:	d328      	bcc.n	8001c8a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	6821      	ldr	r1, [r4, #0]
 8001c3a:	078f      	lsls	r7, r1, #30
 8001c3c:	d42d      	bmi.n	8001c9a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	07c8      	lsls	r0, r1, #31
 8001c40:	d440      	bmi.n	8001cc4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_ClockConfig+0x120>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f002 0207 	and.w	r2, r2, #7
 8001c4a:	42aa      	cmp	r2, r5
 8001c4c:	d865      	bhi.n	8001d1a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	0751      	lsls	r1, r2, #29
 8001c52:	d46b      	bmi.n	8001d2c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	0713      	lsls	r3, r2, #28
 8001c56:	d507      	bpl.n	8001c68 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c58:	4a39      	ldr	r2, [pc, #228]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001c5a:	6921      	ldr	r1, [r4, #16]
 8001c5c:	6893      	ldr	r3, [r2, #8]
 8001c5e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c66:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c68:	f7ff ffaa 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001c6e:	4a35      	ldr	r2, [pc, #212]	; (8001d44 <HAL_RCC_ClockConfig+0x128>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	40d8      	lsrs	r0, r3
 8001c7a:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_RCC_ClockConfig+0x12c>)
 8001c7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_ClockConfig+0x130>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	f7ff fc33 	bl	80014ec <HAL_InitTick>
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	e7ce      	b.n	8001c28 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	428b      	cmp	r3, r1
 8001c96:	d1c6      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xa>
 8001c98:	e7ce      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001c9c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca0:	bf1e      	ittt	ne
 8001ca2:	689a      	ldrne	r2, [r3, #8]
 8001ca4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001ca8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cac:	bf42      	ittt	mi
 8001cae:	689a      	ldrmi	r2, [r3, #8]
 8001cb0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001cb4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	68a0      	ldr	r0, [r4, #8]
 8001cba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	e7bc      	b.n	8001c3e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc4:	6862      	ldr	r2, [r4, #4]
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001cc8:	2a01      	cmp	r2, #1
 8001cca:	d11c      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	d0a8      	beq.n	8001c26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	4e1a      	ldr	r6, [pc, #104]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001cd6:	68b3      	ldr	r3, [r6, #8]
 8001cd8:	f023 0303 	bic.w	r3, r3, #3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fc4e 	bl	8001580 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ce8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	68b3      	ldr	r3, [r6, #8]
 8001cec:	6862      	ldr	r2, [r4, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cf6:	d0a4      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff fc42 	bl	8001580 <HAL_GetTick>
 8001cfc:	1bc0      	subs	r0, r0, r7
 8001cfe:	4540      	cmp	r0, r8
 8001d00:	d9f3      	bls.n	8001cea <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d02:	2003      	movs	r0, #3
 8001d04:	e790      	b.n	8001c28 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	1e91      	subs	r1, r2, #2
 8001d08:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0c:	d802      	bhi.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d12:	e7de      	b.n	8001cd2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	f013 0f02 	tst.w	r3, #2
 8001d18:	e7db      	b.n	8001cd2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	b2ea      	uxtb	r2, r5
 8001d1c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	42ab      	cmp	r3, r5
 8001d26:	f47f af7e 	bne.w	8001c26 <HAL_RCC_ClockConfig+0xa>
 8001d2a:	e790      	b.n	8001c4e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001d2e:	68e0      	ldr	r0, [r4, #12]
 8001d30:	688b      	ldr	r3, [r1, #8]
 8001d32:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d36:	4303      	orrs	r3, r0
 8001d38:	608b      	str	r3, [r1, #8]
 8001d3a:	e78b      	b.n	8001c54 <HAL_RCC_ClockConfig+0x38>
 8001d3c:	40023c00 	.word	0x40023c00
 8001d40:	40023800 	.word	0x40023800
 8001d44:	0800f478 	.word	0x0800f478
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000008 	.word	0x20000008

08001d50 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d50:	4b01      	ldr	r3, [pc, #4]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d6a:	6810      	ldr	r0, [r2, #0]
}
 8001d6c:	40d8      	lsrs	r0, r3
 8001d6e:	4770      	bx	lr
 8001d70:	40023800 	.word	0x40023800
 8001d74:	0800f488 	.word	0x0800f488
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d8a:	6810      	ldr	r0, [r2, #0]
}
 8001d8c:	40d8      	lsrs	r0, r3
 8001d8e:	4770      	bx	lr
 8001d90:	40023800 	.word	0x40023800
 8001d94:	0800f488 	.word	0x0800f488
 8001d98:	20000000 	.word	0x20000000

08001d9c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d9c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d9e:	f102 030c 	add.w	r3, r2, #12
 8001da2:	e853 3f00 	ldrex	r3, [r3]
 8001da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001daa:	320c      	adds	r2, #12
 8001dac:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001db0:	6802      	ldr	r2, [r0, #0]
 8001db2:	2900      	cmp	r1, #0
 8001db4:	d1f2      	bne.n	8001d9c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db6:	f102 0314 	add.w	r3, r2, #20
 8001dba:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc2:	f102 0c14 	add.w	ip, r2, #20
 8001dc6:	e84c 3100 	strex	r1, r3, [ip]
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	d1f3      	bne.n	8001db6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10b      	bne.n	8001dec <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd4:	f102 030c 	add.w	r3, r2, #12
 8001dd8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ddc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001de0:	f102 0c0c 	add.w	ip, r2, #12
 8001de4:	e84c 3100 	strex	r1, r3, [ip]
 8001de8:	2900      	cmp	r1, #0
 8001dea:	d1f3      	bne.n	8001dd4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dec:	2320      	movs	r3, #32
 8001dee:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001df2:	2300      	movs	r3, #0
 8001df4:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001df6:	4770      	bx	lr

08001df8 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df8:	6802      	ldr	r2, [r0, #0]
 8001dfa:	68c1      	ldr	r1, [r0, #12]
 8001dfc:	6913      	ldr	r3, [r2, #16]
 8001dfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e02:	430b      	orrs	r3, r1
{
 8001e04:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e06:	6113      	str	r3, [r2, #16]
{
 8001e08:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e0a:	6883      	ldr	r3, [r0, #8]
 8001e0c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001e0e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e10:	4303      	orrs	r3, r0
 8001e12:	6968      	ldr	r0, [r5, #20]
 8001e14:	4303      	orrs	r3, r0
 8001e16:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001e18:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001e1c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e20:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001e22:	430b      	orrs	r3, r1
 8001e24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e26:	6953      	ldr	r3, [r2, #20]
 8001e28:	69a9      	ldr	r1, [r5, #24]
 8001e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <UART_SetConfig+0xb8>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d003      	beq.n	8001e40 <UART_SetConfig+0x48>
 8001e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d123      	bne.n	8001e88 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e40:	f7ff ff9c 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e44:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e46:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e4c:	e9d5 4600 	ldrd	r4, r6, [r5]
 8001e50:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e54:	d11b      	bne.n	8001e8e <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e56:	19b2      	adds	r2, r6, r6
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	415b      	adcs	r3, r3
 8001e5e:	f7fe ffb1 	bl	8000dc4 <__aeabi_uldivmod>
 8001e62:	2264      	movs	r2, #100	; 0x64
 8001e64:	fbb0 f1f2 	udiv	r1, r0, r2
 8001e68:	fb02 0311 	mls	r3, r2, r1, r0
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	3332      	adds	r3, #50	; 0x32
 8001e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e74:	f003 0207 	and.w	r2, r3, #7
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001e7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e82:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e84:	60a3      	str	r3, [r4, #8]
  }
}
 8001e86:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e88:	f7ff ff68 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8001e8c:	e7da      	b.n	8001e44 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e8e:	00b2      	lsls	r2, r6, #2
 8001e90:	0fb3      	lsrs	r3, r6, #30
 8001e92:	f7fe ff97 	bl	8000dc4 <__aeabi_uldivmod>
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	fbb0 f1f2 	udiv	r1, r0, r2
 8001e9c:	fb02 0311 	mls	r3, r2, r1, r0
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	3332      	adds	r3, #50	; 0x32
 8001ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ea8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001eac:	e7ea      	b.n	8001e84 <UART_SetConfig+0x8c>
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000

08001eb4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001eb6:	4605      	mov	r5, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	4617      	mov	r7, r2
 8001ebc:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ebe:	682a      	ldr	r2, [r5, #0]
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	ea34 0303 	bics.w	r3, r4, r3
 8001ec6:	d101      	bne.n	8001ecc <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001ec8:	2000      	movs	r0, #0
 8001eca:	e021      	b.n	8001f10 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	1c70      	adds	r0, r6, #1
 8001ece:	d0f7      	beq.n	8001ec0 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed0:	f7ff fb56 	bl	8001580 <HAL_GetTick>
 8001ed4:	1bc0      	subs	r0, r0, r7
 8001ed6:	4286      	cmp	r6, r0
 8001ed8:	d31c      	bcc.n	8001f14 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8001eda:	b1de      	cbz	r6, 8001f14 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	0751      	lsls	r1, r2, #29
 8001ee2:	d5ec      	bpl.n	8001ebe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001ee4:	2c80      	cmp	r4, #128	; 0x80
 8001ee6:	d0ea      	beq.n	8001ebe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001ee8:	2c40      	cmp	r4, #64	; 0x40
 8001eea:	d0e8      	beq.n	8001ebe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	0712      	lsls	r2, r2, #28
 8001ef0:	d5e5      	bpl.n	8001ebe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	9401      	str	r4, [sp, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	9201      	str	r2, [sp, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001efe:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f00:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001f02:	f7ff ff4b 	bl	8001d9c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f06:	2308      	movs	r3, #8
 8001f08:	646b      	str	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(huart);
 8001f0a:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
          return HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
}
 8001f10:	b003      	add	sp, #12
 8001f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001f14:	2003      	movs	r0, #3
 8001f16:	e7fb      	b.n	8001f10 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08001f18 <HAL_UART_Init>:
{
 8001f18:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	b348      	cbz	r0, 8001f72 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f26:	b91b      	cbnz	r3, 8001f30 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f28:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8001f2c:	f7ff fa4a 	bl	80013c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f30:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f32:	2324      	movs	r3, #36	; 0x24
 8001f34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8001f38:	68d3      	ldr	r3, [r2, #12]
 8001f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f3e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff ff59 	bl	8001df8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f56:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f5e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f60:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001f62:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f64:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f6e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001f70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
 8001f74:	e7fc      	b.n	8001f70 <HAL_UART_Init+0x58>

08001f76 <HAL_UART_Transmit>:
{
 8001f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f78:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001f7a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 8001f7e:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8001f80:	2a20      	cmp	r2, #32
{
 8001f82:	4604      	mov	r4, r0
 8001f84:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001f86:	d140      	bne.n	800200a <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	d040      	beq.n	800200e <HAL_UART_Transmit+0x98>
 8001f8c:	2f00      	cmp	r7, #0
 8001f8e:	d03e      	beq.n	800200e <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f90:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f92:	2500      	movs	r5, #0
 8001f94:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f96:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8001f9a:	f7ff faf1 	bl	8001580 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f9e:	68a1      	ldr	r1, [r4, #8]
 8001fa0:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8001fa2:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001fa8:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8001faa:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fac:	d103      	bne.n	8001fb6 <HAL_UART_Transmit+0x40>
 8001fae:	6921      	ldr	r1, [r4, #16]
 8001fb0:	b909      	cbnz	r1, 8001fb6 <HAL_UART_Transmit+0x40>
 8001fb2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001fb4:	460e      	mov	r6, r1
    while (huart->TxXferCount > 0U)
 8001fb6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001fb8:	b289      	uxth	r1, r1
 8001fba:	b949      	cbnz	r1, 8001fd0 <HAL_UART_Transmit+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fbc:	2140      	movs	r1, #64	; 0x40
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff ff78 	bl	8001eb4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001fc4:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8001fc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fca:	b968      	cbnz	r0, 8001fe8 <HAL_UART_Transmit+0x72>
}
 8001fcc:	b003      	add	sp, #12
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8001fd8:	f7ff ff6c 	bl	8001eb4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001fe0:	b120      	cbz	r0, 8001fec <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 8001fe8:	2003      	movs	r0, #3
 8001fea:	e7ef      	b.n	8001fcc <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fec:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8001fee:	b94e      	cbnz	r6, 8002004 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff0:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001ff4:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ff8:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8001ffa:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001ffc:	3901      	subs	r1, #1
 8001ffe:	b289      	uxth	r1, r1
 8002000:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002002:	e7d8      	b.n	8001fb6 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002004:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002008:	e7f6      	b.n	8001ff8 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800200a:	2002      	movs	r0, #2
 800200c:	e7de      	b.n	8001fcc <HAL_UART_Transmit+0x56>
      return  HAL_ERROR;
 800200e:	2001      	movs	r0, #1
 8002010:	e7dc      	b.n	8001fcc <HAL_UART_Transmit+0x56>

08002012 <HAL_UART_Receive>:
{
 8002012:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002016:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002018:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800201c:	2b20      	cmp	r3, #32
{
 800201e:	4604      	mov	r4, r0
 8002020:	460f      	mov	r7, r1
 8002022:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002024:	d146      	bne.n	80020b4 <HAL_UART_Receive+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8002026:	2900      	cmp	r1, #0
 8002028:	d046      	beq.n	80020b8 <HAL_UART_Receive+0xa6>
 800202a:	2a00      	cmp	r2, #0
 800202c:	d044      	beq.n	80020b8 <HAL_UART_Receive+0xa6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800202e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002030:	2600      	movs	r6, #0
 8002032:	6446      	str	r6, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002034:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002038:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800203a:	f7ff faa1 	bl	8001580 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800203e:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002040:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002046:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8002048:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800204a:	d103      	bne.n	8002054 <HAL_UART_Receive+0x42>
 800204c:	6923      	ldr	r3, [r4, #16]
 800204e:	b90b      	cbnz	r3, 8002054 <HAL_UART_Receive+0x42>
 8002050:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 8002052:	461f      	mov	r7, r3
    while (huart->RxXferCount > 0U)
 8002054:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8002056:	b2a8      	uxth	r0, r5
 8002058:	b918      	cbnz	r0, 8002062 <HAL_UART_Receive+0x50>
    huart->RxState = HAL_UART_STATE_READY;
 800205a:	2320      	movs	r3, #32
 800205c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 8002060:	e00a      	b.n	8002078 <HAL_UART_Receive+0x66>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002062:	464b      	mov	r3, r9
 8002064:	4642      	mov	r2, r8
 8002066:	2120      	movs	r1, #32
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff ff23 	bl	8001eb4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800206e:	b128      	cbz	r0, 800207c <HAL_UART_Receive+0x6a>
        huart->RxState = HAL_UART_STATE_READY;
 8002070:	2320      	movs	r3, #32
 8002072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        return HAL_TIMEOUT;
 8002076:	2003      	movs	r0, #3
}
 8002078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800207c:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800207e:	b94f      	cbnz	r7, 8002094 <HAL_UART_Receive+0x82>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002086:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 800208a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800208c:	3b01      	subs	r3, #1
 800208e:	b29b      	uxth	r3, r3
 8002090:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002092:	e7df      	b.n	8002054 <HAL_UART_Receive+0x42>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002094:	68a2      	ldr	r2, [r4, #8]
 8002096:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800209a:	d002      	beq.n	80020a2 <HAL_UART_Receive+0x90>
 800209c:	b932      	cbnz	r2, 80020ac <HAL_UART_Receive+0x9a>
 800209e:	6922      	ldr	r2, [r4, #16]
 80020a0:	b922      	cbnz	r2, 80020ac <HAL_UART_Receive+0x9a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	b2c9      	uxtb	r1, r1
 80020a6:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 80020aa:	e7ee      	b.n	800208a <HAL_UART_Receive+0x78>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020ac:	6859      	ldr	r1, [r3, #4]
 80020ae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80020b2:	e7f8      	b.n	80020a6 <HAL_UART_Receive+0x94>
    return HAL_BUSY;
 80020b4:	2002      	movs	r0, #2
 80020b6:	e7df      	b.n	8002078 <HAL_UART_Receive+0x66>
      return  HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
 80020ba:	e7dd      	b.n	8002078 <HAL_UART_Receive+0x66>

080020bc <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80020be:	4d0e      	ldr	r5, [pc, #56]	; (80020f8 <write_callback+0x3c>)
{
 80020c0:	460e      	mov	r6, r1
 80020c2:	4614      	mov	r4, r2
  bool res = true;
 80020c4:	2001      	movs	r0, #1
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 80020c6:	2700      	movs	r7, #0
  while (count) {
 80020c8:	b93c      	cbnz	r4, 80020da <write_callback+0x1e>
 80020ca:	e00b      	b.n	80020e4 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 80020cc:	18ea      	adds	r2, r5, r3
 80020ce:	f816 1b01 	ldrb.w	r1, [r6], #1
 80020d2:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80020d4:	3301      	adds	r3, #1
      count--;
 80020d6:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80020d8:	702b      	strb	r3, [r5, #0]
 80020da:	782b      	ldrb	r3, [r5, #0]
 80020dc:	2b1f      	cmp	r3, #31
 80020de:	d802      	bhi.n	80020e6 <write_callback+0x2a>
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d1f3      	bne.n	80020cc <write_callback+0x10>
    }
  }
  return res;
}
 80020e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d1ee      	bne.n	80020c8 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80020ea:	2121      	movs	r1, #33	; 0x21
 80020ec:	4628      	mov	r0, r5
 80020ee:	f000 fc85 	bl	80029fc <ioRawWriteBuffer>
      o_packet.pw = 0;
 80020f2:	702f      	strb	r7, [r5, #0]
 80020f4:	e7e8      	b.n	80020c8 <write_callback+0xc>
 80020f6:	bf00      	nop
 80020f8:	20000f5c 	.word	0x20000f5c

080020fc <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 80020fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002100:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8002102:	4615      	mov	r5, r2
 8002104:	b35a      	cbz	r2, 800215e <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8002106:	4e20      	ldr	r6, [pc, #128]	; (8002188 <read_callback+0x8c>)
 8002108:	4f20      	ldr	r7, [pc, #128]	; (800218c <read_callback+0x90>)
 800210a:	7833      	ldrb	r3, [r6, #0]
 800210c:	2bff      	cmp	r3, #255	; 0xff
 800210e:	d008      	beq.n	8002122 <read_callback+0x26>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002110:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002188 <read_callback+0x8c>

  if (res == false)
    return res;

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002114:	f04f 0900 	mov.w	r9, #0
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	18f0      	adds	r0, r6, r3
 800211e:	1b1b      	subs	r3, r3, r4
 8002120:	e013      	b.n	800214a <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002122:	2121      	movs	r1, #33	; 0x21
 8002124:	4630      	mov	r0, r6
 8002126:	f000 fc77 	bl	8002a18 <ioRawReadBuffer>
  i_ridx = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
  if (res == false)
 800212e:	2800      	cmp	r0, #0
 8002130:	d1ee      	bne.n	8002110 <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 8002132:	b003      	add	sp, #12
 8002134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8002138:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800213c:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002140:	7832      	ldrb	r2, [r6, #0]
 8002142:	3a01      	subs	r2, #1
 8002144:	7032      	strb	r2, [r6, #0]
      count--;
 8002146:	3d01      	subs	r5, #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002148:	2201      	movs	r2, #1
 800214a:	f896 c000 	ldrb.w	ip, [r6]
 800214e:	18e1      	adds	r1, r4, r3
 8002150:	f1bc 0f00 	cmp.w	ip, #0
 8002154:	d005      	beq.n	8002162 <read_callback+0x66>
 8002156:	2d00      	cmp	r5, #0
 8002158:	d1ee      	bne.n	8002138 <read_callback+0x3c>
 800215a:	b102      	cbz	r2, 800215e <read_callback+0x62>
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	2001      	movs	r0, #1
 8002160:	e7e7      	b.n	8002132 <read_callback+0x36>
 8002162:	b102      	cbz	r2, 8002166 <read_callback+0x6a>
 8002164:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8002166:	2d00      	cmp	r5, #0
 8002168:	d0f9      	beq.n	800215e <read_callback+0x62>
      uint8_t sync = 0xAA;
 800216a:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 800216c:	2101      	movs	r1, #1
 800216e:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8002172:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8002176:	f000 fc41 	bl	80029fc <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800217a:	2121      	movs	r1, #33	; 0x21
 800217c:	4640      	mov	r0, r8
 800217e:	f000 fc4b 	bl	8002a18 <ioRawReadBuffer>
  i_ridx = 0;
 8002182:	f8c7 9000 	str.w	r9, [r7]
  while (count) {
 8002186:	e7c7      	b.n	8002118 <read_callback+0x1c>
 8002188:	20000f34 	.word	0x20000f34
 800218c:	20000f58 	.word	0x20000f58

08002190 <pb_io_flush_ostream>:
{
 8002190:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002192:	4c06      	ldr	r4, [pc, #24]	; (80021ac <pb_io_flush_ostream+0x1c>)
 8002194:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002196:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002198:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 800219c:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800219e:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80021a0:	f000 fc2c 	bl	80029fc <ioRawWriteBuffer>
  o_packet.pw = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	7023      	strb	r3, [r4, #0]
}
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	bf00      	nop
 80021ac:	20000f5c 	.word	0x20000f5c

080021b0 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <pb_io_flush_istream+0x10>)
 80021b2:	22ff      	movs	r2, #255	; 0xff
 80021b4:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 80021b6:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <pb_io_flush_istream+0x14>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000f34 	.word	0x20000f34
 80021c4:	20000f58 	.word	0x20000f58

080021c8 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
 80021c8:	b510      	push	{r4, lr}
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 80021ca:	2200      	movs	r2, #0
 80021cc:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 80021d0:	4a03      	ldr	r2, [pc, #12]	; (80021e0 <pb_io_ostream+0x18>)
 80021d2:	e9c0 2100 	strd	r2, r1, [r0]
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295
 80021da:	6082      	str	r2, [r0, #8]
}
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	bf00      	nop
 80021e0:	080020bd 	.word	0x080020bd

080021e4 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 80021e4:	2200      	movs	r2, #0
 80021e6:	60c2      	str	r2, [r0, #12]
  return stream;
 80021e8:	4a03      	ldr	r2, [pc, #12]	; (80021f8 <pb_io_istream+0x14>)
 80021ea:	e9c0 2100 	strd	r2, r1, [r0]
 80021ee:	f04f 32ff 	mov.w	r2, #4294967295
 80021f2:	6082      	str	r2, [r0, #8]
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	080020fd 	.word	0x080020fd

080021fc <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 80021fc:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 80021fe:	f000 fc19 	bl	8002a34 <ioRawDisableLLWrite>
  return 0;
}
 8002202:	2000      	movs	r0, #0
 8002204:	bd08      	pop	{r3, pc}

08002206 <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 8002206:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 800220a:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
 800220e:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (int i = 0; i < array->size; i++)
 8002212:	2600      	movs	r6, #0
 8002214:	2c00      	cmp	r4, #0
{
 8002216:	4607      	mov	r7, r0
 8002218:	4689      	mov	r9, r1
 800221a:	bf08      	it	eq
 800221c:	2404      	moveq	r4, #4
  for (int i = 0; i < array->size; i++)
 800221e:	4635      	mov	r5, r6
 8002220:	f8d8 3000 	ldr.w	r3, [r8]
 8002224:	429d      	cmp	r5, r3
 8002226:	d301      	bcc.n	800222c <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8002228:	2001      	movs	r0, #1
 800222a:	e005      	b.n	8002238 <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 800222c:	4649      	mov	r1, r9
 800222e:	4638      	mov	r0, r7
 8002230:	f002 ffb4 	bl	800519c <pb_encode_tag_for_field>
 8002234:	b910      	cbnz	r0, 800223c <encode_uint32+0x36>
      return false;
 8002236:	2000      	movs	r0, #0
}
 8002238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 800223c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8002240:	2c02      	cmp	r4, #2
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8002242:	bf14      	ite	ne
 8002244:	599a      	ldrne	r2, [r3, r6]
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002246:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 800224a:	4638      	mov	r0, r7
 800224c:	17d3      	asrs	r3, r2, #31
 800224e:	f002 fedd 	bl	800500c <pb_encode_varint>
 8002252:	4426      	add	r6, r4
 8002254:	2800      	cmp	r0, #0
 8002256:	d0ee      	beq.n	8002236 <encode_uint32+0x30>
  for (int i = 0; i < array->size; i++)
 8002258:	3501      	adds	r5, #1
 800225a:	e7e1      	b.n	8002220 <encode_uint32+0x1a>

0800225c <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 800225c:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 800225e:	6815      	ldr	r5, [r2, #0]
{
 8002260:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8002262:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 8002264:	f002 ff9a 	bl	800519c <pb_encode_tag_for_field>
 8002268:	b130      	cbz	r0, 8002278 <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 800226a:	686a      	ldr	r2, [r5, #4]
 800226c:	4631      	mov	r1, r6
 800226e:	4620      	mov	r0, r4
    return false;

  return true;
}
 8002270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 8002274:	f003 b8ec 	b.w	8005450 <pb_encode_string>
}
 8002278:	bd70      	pop	{r4, r5, r6, pc}

0800227a <decode_data_cb>:
{
 800227a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 800227c:	6814      	ldr	r4, [r2, #0]
  uint8_t *pw = (uint8_t *)data->addr;
 800227e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
{
 8002282:	4605      	mov	r5, r0
  data->nb_read = 0;
 8002284:	2300      	movs	r3, #0
    data->nb_read += itsize;
 8002286:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 8002288:	68ab      	ldr	r3, [r5, #8]
 800228a:	b913      	cbnz	r3, 8002292 <decode_data_cb+0x18>
  return true;
 800228c:	2001      	movs	r0, #1
}
 800228e:	b003      	add	sp, #12
 8002290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8002292:	2201      	movs	r2, #1
 8002294:	4669      	mov	r1, sp
 8002296:	4628      	mov	r0, r5
 8002298:	f002 f97e 	bl	8004598 <pb_read>
 800229c:	2800      	cmp	r0, #0
 800229e:	d0f6      	beq.n	800228e <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 80022a0:	b13f      	cbz	r7, 80022b2 <decode_data_cb+0x38>
 80022a2:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 80022a4:	bfc2      	ittt	gt
 80022a6:	f89d 3000 	ldrbgt.w	r3, [sp]
 80022aa:	f807 3b01 	strbgt.w	r3, [r7], #1
      maxr--;
 80022ae:	f106 36ff 	addgt.w	r6, r6, #4294967295
    data->nb_read += itsize;
 80022b2:	68e3      	ldr	r3, [r4, #12]
 80022b4:	3301      	adds	r3, #1
 80022b6:	e7e6      	b.n	8002286 <decode_data_cb+0xc>

080022b8 <aiPbMgrInit>:
{
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80022ba:	4c1b      	ldr	r4, [pc, #108]	; (8002328 <aiPbMgrInit+0x70>)
{
 80022bc:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80022be:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80022c2:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 80022c4:	ad06      	add	r5, sp, #24
{
 80022c6:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80022c8:	4620      	mov	r0, r4
 80022ca:	f00a fa46 	bl	800c75a <memset>
  pb_io_stream_init();
 80022ce:	f7ff ff95 	bl	80021fc <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 80022d2:	4628      	mov	r0, r5
 80022d4:	2100      	movs	r1, #0
 80022d6:	f7ff ff85 	bl	80021e4 <pb_io_istream>
 80022da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 80022de:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 80022e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 80022e4:	2100      	movs	r1, #0
 80022e6:	4668      	mov	r0, sp
 80022e8:	f7ff ff6e 	bl	80021c8 <pb_io_ostream>
 80022ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ee:	f104 0610 	add.w	r6, r4, #16
 80022f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 80022f8:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 80022fa:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 80022fe:	b97f      	cbnz	r7, 8002320 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8002300:	2301      	movs	r3, #1
 8002302:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
}
 8002306:	b00b      	add	sp, #44	; 0x2c
 8002308:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 800230a:	320c      	adds	r2, #12
 800230c:	462b      	mov	r3, r5
 800230e:	2101      	movs	r1, #1
    while (cfunc->process) {
 8002310:	6850      	ldr	r0, [r2, #4]
 8002312:	1c5d      	adds	r5, r3, #1
 8002314:	2800      	cmp	r0, #0
 8002316:	d1f8      	bne.n	800230a <aiPbMgrInit+0x52>
 8002318:	b101      	cbz	r1, 800231c <aiPbMgrInit+0x64>
 800231a:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 800231c:	6267      	str	r7, [r4, #36]	; 0x24
 800231e:	e7ef      	b.n	8002300 <aiPbMgrInit+0x48>
 8002320:	463a      	mov	r2, r7
 8002322:	4619      	mov	r1, r3
 8002324:	e7f4      	b.n	8002310 <aiPbMgrInit+0x58>
 8002326:	bf00      	nop
 8002328:	20000f80 	.word	0x20000f80

0800232c <aiPbStrCopy>:
{
 800232c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800232e:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8002330:	4a10      	ldr	r2, [pc, #64]	; (8002374 <aiPbStrCopy+0x48>)
{
 8002332:	4605      	mov	r5, r0
 8002334:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8002336:	6810      	ldr	r0, [r2, #0]
 8002338:	6851      	ldr	r1, [r2, #4]
 800233a:	8912      	ldrh	r2, [r2, #8]
 800233c:	ab01      	add	r3, sp, #4
 800233e:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8002340:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 8002342:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8002344:	f7fd ff94 	bl	8000270 <strlen>
  if (l > max)
 8002348:	42b0      	cmp	r0, r6
    l = max-1;
 800234a:	bf88      	it	hi
 800234c:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8002350:	b174      	cbz	r4, 8002370 <aiPbStrCopy+0x44>
  if (src && l)
 8002352:	b138      	cbz	r0, 8002364 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8002354:	1c42      	adds	r2, r0, #1
 8002356:	4629      	mov	r1, r5
 8002358:	4620      	mov	r0, r4
}
 800235a:	b004      	add	sp, #16
 800235c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8002360:	f00a ba9d 	b.w	800c89e <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8002364:	ab01      	add	r3, sp, #4
 8002366:	cb03      	ldmia	r3!, {r0, r1}
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	6020      	str	r0, [r4, #0]
 800236c:	6061      	str	r1, [r4, #4]
 800236e:	8123      	strh	r3, [r4, #8]
}
 8002370:	b004      	add	sp, #16
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	0800f490 	.word	0x0800f490

08002378 <encode_tensor_desc>:
{
 8002378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 800237c:	6816      	ldr	r6, [r2, #0]
    msg.dims.funcs.encode = encode_uint32;
 800237e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80023d8 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002382:	f8df a058 	ldr.w	sl, [pc, #88]	; 80023dc <encode_tensor_desc+0x64>
{
 8002386:	b09c      	sub	sp, #112	; 0x70
 8002388:	4605      	mov	r5, r0
 800238a:	4688      	mov	r8, r1
  for (size_t i = 0; i < tensors->size; i++)
 800238c:	2400      	movs	r4, #0
 800238e:	6873      	ldr	r3, [r6, #4]
 8002390:	42a3      	cmp	r3, r4
 8002392:	d801      	bhi.n	8002398 <encode_tensor_desc+0x20>
  return true;
 8002394:	2001      	movs	r0, #1
 8002396:	e01c      	b.n	80023d2 <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8002398:	2264      	movs	r2, #100	; 0x64
 800239a:	2100      	movs	r1, #0
 800239c:	a803      	add	r0, sp, #12
 800239e:	f00a f9dc 	bl	800c75a <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 80023a2:	68b1      	ldr	r1, [r6, #8]
 80023a4:	6837      	ldr	r7, [r6, #0]
 80023a6:	4620      	mov	r0, r4
 80023a8:	466b      	mov	r3, sp
 80023aa:	aa03      	add	r2, sp, #12
 80023ac:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 80023ae:	4641      	mov	r1, r8
 80023b0:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 80023b2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 80023b6:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 80023ba:	f002 feef 	bl	800519c <pb_encode_tag_for_field>
 80023be:	b138      	cbz	r0, 80023d0 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 80023c0:	aa03      	add	r2, sp, #12
 80023c2:	4651      	mov	r1, sl
 80023c4:	4628      	mov	r0, r5
 80023c6:	f003 f893 	bl	80054f0 <pb_encode_submessage>
 80023ca:	b108      	cbz	r0, 80023d0 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 80023cc:	3401      	adds	r4, #1
 80023ce:	e7de      	b.n	800238e <encode_tensor_desc+0x16>
      return false;
 80023d0:	2000      	movs	r0, #0
}
 80023d2:	b01c      	add	sp, #112	; 0x70
 80023d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d8:	08002207 	.word	0x08002207
 80023dc:	08010520 	.word	0x08010520

080023e0 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 80023e0:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 80023e2:	6803      	ldr	r3, [r0, #0]
 80023e4:	600b      	str	r3, [r1, #0]
  resp->state = state;
 80023e6:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80023e8:	4804      	ldr	r0, [pc, #16]	; (80023fc <aiPbMgrSendResp+0x1c>)
 80023ea:	460a      	mov	r2, r1
 80023ec:	4904      	ldr	r1, [pc, #16]	; (8002400 <aiPbMgrSendResp+0x20>)
 80023ee:	f002 fffb 	bl	80053e8 <pb_encode>
  pb_io_flush_ostream();
}
 80023f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 80023f6:	f7ff becb 	b.w	8002190 <pb_io_flush_ostream>
 80023fa:	bf00      	nop
 80023fc:	20000f90 	.word	0x20000f90
 8002400:	08010685 	.word	0x08010685

08002404 <aiPbMgrWaitAndProcess>:
{
 8002404:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002406:	4c1d      	ldr	r4, [pc, #116]	; (800247c <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8002408:	f7ff fed2 	bl	80021b0 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 800240c:	491c      	ldr	r1, [pc, #112]	; (8002480 <aiPbMgrWaitAndProcess+0x7c>)
 800240e:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8002412:	4620      	mov	r0, r4
 8002414:	f002 fd04 	bl	8004e20 <pb_decode_delimited>
 8002418:	b348      	cbz	r0, 800246e <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 800241a:	f7ff fec9 	bl	80021b0 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 800241e:	2302      	movs	r3, #2
 8002420:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002424:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002426:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800242a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800242c:	2500      	movs	r5, #0
 800242e:	42a9      	cmp	r1, r5
 8002430:	d00d      	beq.n	800244e <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 8002432:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002434:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8002438:	4286      	cmp	r6, r0
 800243a:	d11c      	bne.n	8002476 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 800243c:	4911      	ldr	r1, [pc, #68]	; (8002484 <aiPbMgrWaitAndProcess+0x80>)
 800243e:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8002442:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 8002446:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8002448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800244a:	42ab      	cmp	r3, r5
 800244c:	d10c      	bne.n	8002468 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8002450:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8002452:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8002454:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->which_payload = respMsg_ack_tag;
 8002458:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  resp->payload.ack.param = param;
 800245c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  resp->payload.ack.error = error;
 8002460:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
  aiPbMgrSendResp(req, resp, state);
 8002464:	f7ff ffbc 	bl	80023e0 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8002468:	2301      	movs	r3, #1
 800246a:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
  pb_io_flush_istream();
 800246e:	f7ff fe9f 	bl	80021b0 <pb_io_flush_istream>
}
 8002472:	2000      	movs	r0, #0
 8002474:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002476:	3501      	adds	r5, #1
 8002478:	e7d9      	b.n	800242e <aiPbMgrWaitAndProcess+0x2a>
 800247a:	bf00      	nop
 800247c:	20000f80 	.word	0x20000f80
 8002480:	0801062b 	.word	0x0801062b
 8002484:	20001000 	.word	0x20001000

08002488 <aiPbMgrSendAck>:
{
 8002488:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 800248a:	260c      	movs	r6, #12
{
 800248c:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->which_payload = respMsg_ack_tag;
 8002490:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8002492:	730d      	strb	r5, [r1, #12]
  resp->payload.ack.param = param;
 8002494:	608b      	str	r3, [r1, #8]
}
 8002496:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8002498:	f7ff bfa2 	b.w	80023e0 <aiPbMgrSendResp>

0800249c <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 800249c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 800249e:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80024a0:	4907      	ldr	r1, [pc, #28]	; (80024c0 <aiPbMgrWaitAck+0x24>)
 80024a2:	4808      	ldr	r0, [pc, #32]	; (80024c4 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 80024a4:	9302      	str	r3, [sp, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80024a6:	aa02      	add	r2, sp, #8
  ackMsg ack = ackMsg_init_default;
 80024a8:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80024ac:	f002 fcb8 	bl	8004e20 <pb_decode_delimited>
 80024b0:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 80024b2:	f7ff fe7d 	bl	80021b0 <pb_io_flush_istream>
  return res;
}
 80024b6:	9801      	ldr	r0, [sp, #4]
 80024b8:	b005      	add	sp, #20
 80024ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80024be:	bf00      	nop
 80024c0:	08010330 	.word	0x08010330
 80024c4:	20000f80 	.word	0x20000f80

080024c8 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 80024c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80024ca:	4c19      	ldr	r4, [pc, #100]	; (8002530 <aiPbMgrSendLogV2+0x68>)
{
 80024cc:	460e      	mov	r6, r1
 80024ce:	4611      	mov	r1, r2
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80024d0:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
  ackMsg ack = ackMsg_init_default;
 80024d4:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80024d6:	2a02      	cmp	r2, #2
{
 80024d8:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80024e0:	d123      	bne.n	800252a <aiPbMgrSendLogV2+0x62>
    return false;

  size_t len = strlen(str);
 80024e2:	4608      	mov	r0, r1
 80024e4:	9101      	str	r1, [sp, #4]
 80024e6:	f7fd fec3 	bl	8000270 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80024ea:	287f      	cmp	r0, #127	; 0x7f
 80024ec:	bf28      	it	cs
 80024ee:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80024f0:	230d      	movs	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80024f2:	1c42      	adds	r2, r0, #1
 80024f4:	9901      	ldr	r1, [sp, #4]
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80024f6:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80024fa:	f104 008c 	add.w	r0, r4, #140	; 0x8c
  pbContextMgr.resp.payload.log.level = lvl;
 80024fe:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002502:	f00a f9cc 	bl	800c89e <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8002506:	f104 0180 	add.w	r1, r4, #128	; 0x80
 800250a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800250e:	462a      	mov	r2, r5
 8002510:	f7ff ff66 	bl	80023e0 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002514:	4620      	mov	r0, r4
 8002516:	4907      	ldr	r1, [pc, #28]	; (8002534 <aiPbMgrSendLogV2+0x6c>)
 8002518:	aa02      	add	r2, sp, #8
 800251a:	f002 fc81 	bl	8004e20 <pb_decode_delimited>
 800251e:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002520:	f7ff fe46 	bl	80021b0 <pb_io_flush_istream>
  return res;
}
 8002524:	4620      	mov	r0, r4
 8002526:	b004      	add	sp, #16
 8002528:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 800252a:	461c      	mov	r4, r3
 800252c:	e7fa      	b.n	8002524 <aiPbMgrSendLogV2+0x5c>
 800252e:	bf00      	nop
 8002530:	20000f80 	.word	0x20000f80
 8002534:	08010330 	.word	0x08010330

08002538 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8002538:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <aiPbMgrReceiveData+0x28>)
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 800253c:	4909      	ldr	r1, [pc, #36]	; (8002564 <aiPbMgrReceiveData+0x2c>)
{
 800253e:	b086      	sub	sp, #24
  msg.datas.arg = (void *)data;
 8002540:	e9cd 3004 	strd	r3, r0, [sp, #16]
{
 8002544:	4604      	mov	r4, r0
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8002546:	aa01      	add	r2, sp, #4
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <aiPbMgrReceiveData+0x30>)
 800254a:	f002 fc69 	bl	8004e20 <pb_decode_delimited>
  pb_io_flush_istream();
 800254e:	f7ff fe2f 	bl	80021b0 <pb_io_flush_istream>

  data->type = msg.type;
 8002552:	9b01      	ldr	r3, [sp, #4]
 8002554:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 8002556:	9b03      	ldr	r3, [sp, #12]
 8002558:	60a3      	str	r3, [r4, #8]

  return true;
}
 800255a:	2001      	movs	r0, #1
 800255c:	b006      	add	sp, #24
 800255e:	bd10      	pop	{r4, pc}
 8002560:	0800227b 	.word	0x0800227b
 8002564:	08010364 	.word	0x08010364
 8002568:	20000f80 	.word	0x20000f80

0800256c <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	4617      	mov	r7, r2
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 8002572:	2210      	movs	r2, #16
{
 8002574:	4606      	mov	r6, r0
 8002576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  resp->which_payload = respMsg_op_tag;
 8002578:	80ca      	strh	r2, [r1, #6]
{
 800257a:	460c      	mov	r4, r1
  if (name)
 800257c:	4618      	mov	r0, r3
 800257e:	b1fb      	cbz	r3, 80025c0 <aiPbMgrSendOperator+0x54>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	3108      	adds	r1, #8
 8002584:	f7ff fed2 	bl	800232c <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8002588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800258a:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 800258c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800258e:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 8002590:	b1d5      	cbz	r5, 80025c8 <aiPbMgrSendOperator+0x5c>
    resp->payload.op.duration = perf->duration;
 8002592:	682b      	ldr	r3, [r5, #0]
 8002594:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 8002596:	686b      	ldr	r3, [r5, #4]
 8002598:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 800259a:	68eb      	ldr	r3, [r5, #12]
 800259c:	b193      	cbz	r3, 80025c4 <aiPbMgrSendOperator+0x58>
      array.size = perf->counter_n;
 800259e:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 80025a0:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 80025a4:	2304      	movs	r3, #4
 80025a6:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <aiPbMgrSendOperator+0x68>)
 80025aa:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 80025ac:	ab01      	add	r3, sp, #4
 80025ae:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 80025b0:	4630      	mov	r0, r6
 80025b2:	463a      	mov	r2, r7
 80025b4:	4621      	mov	r1, r4
 80025b6:	f7ff ff13 	bl	80023e0 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 80025ba:	2001      	movs	r0, #1
 80025bc:	b005      	add	sp, #20
 80025be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 80025c0:	720b      	strb	r3, [r1, #8]
 80025c2:	e7e1      	b.n	8002588 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 80025c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80025c6:	e7f3      	b.n	80025b0 <aiPbMgrSendOperator+0x44>
    resp->payload.op.duration = 0.0f;
 80025c8:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 80025ca:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 80025ce:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 80025d0:	e7ee      	b.n	80025b0 <aiPbMgrSendOperator+0x44>
 80025d2:	bf00      	nop
 80025d4:	08002207 	.word	0x08002207

080025d8 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 80025d8:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 80025da:	240a      	movs	r4, #10
 80025dc:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 80025de:	f44f 7440 	mov.w	r4, #768	; 0x300
 80025e2:	608c      	str	r4, [r1, #8]
#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
  resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

  resp->payload.sync.rtid = (uint32_t)param >> 16;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80025e4:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 80025e6:	0c12      	lsrs	r2, r2, #16

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 80025e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80025ec:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 80025ee:	610a      	str	r2, [r1, #16]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 80025f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80025f4:	2200      	movs	r2, #0
 80025f6:	f7ff bef3 	b.w	80023e0 <aiPbMgrSendResp>
	...

080025fc <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 80025fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80025fe:	f003 f9ff 	bl	8005a00 <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8002602:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2201      	movs	r2, #1
 800260a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800260e:	b2c0      	uxtb	r0, r0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	9000      	str	r0, [sp, #0]
 8002614:	2300      	movs	r3, #0
 8002616:	4803      	ldr	r0, [pc, #12]	; (8002624 <aiPlatformVersion+0x28>)
 8002618:	4611      	mov	r1, r2
 800261a:	f000 fa31 	bl	8002a80 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 800261e:	b007      	add	sp, #28
 8002620:	f85d fb04 	ldr.w	pc, [sp], #4
 8002624:	0800ece0 	.word	0x0800ece0

08002628 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8002628:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800262a:	f3c0 2317 	ubfx	r3, r0, #8, #24
 800262e:	b2c4      	uxtb	r4, r0
  if (fct)
 8002630:	b129      	cbz	r1, 800263e <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002632:	4622      	mov	r2, r4
 8002634:	4805      	ldr	r0, [pc, #20]	; (800264c <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8002636:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800263a:	f000 ba21 	b.w	8002a80 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800263e:	4621      	mov	r1, r4
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <aiLogErr+0x28>)
}
 8002642:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8002646:	461a      	mov	r2, r3
 8002648:	f000 ba1a 	b.w	8002a80 <lc_print>
 800264c:	0800ed12 	.word	0x0800ed12
 8002650:	0800ed3f 	.word	0x0800ed3f

08002654 <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 8002654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8002658:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 800265a:	6807      	ldr	r7, [r0, #0]
{
 800265c:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 800265e:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8002662:	486b      	ldr	r0, [pc, #428]	; (8002810 <aiPrintBufferInfo+0x1bc>)
 8002664:	6809      	ldr	r1, [r1, #0]
 8002666:	f000 fa0b 	bl	8002a80 <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 800266a:	696a      	ldr	r2, [r5, #20]
 800266c:	69a8      	ldr	r0, [r5, #24]
 800266e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002672:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8002676:	d119      	bne.n	80026ac <aiPrintBufferInfo+0x58>
  {
    LC_PRINT("%d,%d)",
 8002678:	6842      	ldr	r2, [r0, #4]
 800267a:	6901      	ldr	r1, [r0, #16]
 800267c:	4865      	ldr	r0, [pc, #404]	; (8002814 <aiPrintBufferInfo+0x1c0>)
 800267e:	f000 f9ff 	bl	8002a80 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8002682:	2101      	movs	r1, #1
 8002684:	4628      	mov	r0, r5
 8002686:	f002 ffd3 	bl	8005630 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800268a:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800268e:	4601      	mov	r1, r0
 8002690:	4861      	ldr	r0, [pc, #388]	; (8002818 <aiPrintBufferInfo+0x1c4>)
 8002692:	f000 f9f5 	bl	8002a80 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8002696:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002698:	ea4f 19e7 	mov.w	r9, r7, asr #7
 800269c:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80026a0:	d113      	bne.n	80026ca <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80026a2:	485e      	ldr	r0, [pc, #376]	; (800281c <aiPrintBufferInfo+0x1c8>)
 80026a4:	4621      	mov	r1, r4
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
      }
      LC_PRINT((s_ > max_)?"..":"");
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80026a6:	f000 f9eb 	bl	8002a80 <lc_print>
 80026aa:	e046      	b.n	800273a <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80026ac:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 80026b0:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80026b2:	d105      	bne.n	80026c0 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 80026b4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 80026b8:	4859      	ldr	r0, [pc, #356]	; (8002820 <aiPrintBufferInfo+0x1cc>)
 80026ba:	f000 f9e1 	bl	8002a80 <lc_print>
 80026be:	e7e0      	b.n	8002682 <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 80026c0:	4858      	ldr	r0, [pc, #352]	; (8002824 <aiPrintBufferInfo+0x1d0>)
 80026c2:	4619      	mov	r1, r3
 80026c4:	f000 f9dc 	bl	8002a80 <lc_print>
 80026c8:	e7db      	b.n	8002682 <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80026ca:	2e03      	cmp	r6, #3
 80026cc:	d102      	bne.n	80026d4 <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80026ce:	4856      	ldr	r0, [pc, #344]	; (8002828 <aiPrintBufferInfo+0x1d4>)
 80026d0:	4621      	mov	r1, r4
 80026d2:	e7e8      	b.n	80026a6 <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80026d4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8002840 <aiPrintBufferInfo+0x1ec>
 80026d8:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 80026dc:	f108 0102 	add.w	r1, r8, #2
 80026e0:	4622      	mov	r2, r4
 80026e2:	bf18      	it	ne
 80026e4:	4641      	movne	r1, r8
 80026e6:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 80026ea:	f000 f9c9 	bl	8002a80 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80026ee:	2e02      	cmp	r6, #2
 80026f0:	d123      	bne.n	800273a <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80026f2:	68ab      	ldr	r3, [r5, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d069      	beq.n	80027cc <aiPrintBufferInfo+0x178>
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	07d2      	lsls	r2, r2, #31
 80026fc:	d566      	bpl.n	80027cc <aiPrintBufferInfo+0x178>
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d063      	beq.n	80027cc <aiPrintBufferInfo+0x178>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8002704:	f8b3 a002 	ldrh.w	sl, [r3, #2]
      LC_PRINT(" %d:", s_);
 8002708:	f108 0040 	add.w	r0, r8, #64	; 0x40
      const int max_ = s_> 4?4:s_;
 800270c:	f1ba 0f04 	cmp.w	sl, #4
      LC_PRINT(" %d:", s_);
 8002710:	4651      	mov	r1, sl
      const int max_ = s_> 4?4:s_;
 8002712:	46d3      	mov	fp, sl
 8002714:	bf28      	it	cs
 8002716:	f04f 0b04 	movcs.w	fp, #4
      LC_PRINT(" %d:", s_);
 800271a:	f000 f9b1 	bl	8002a80 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800271e:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002720:	f04f 0900 	mov.w	r9, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8002724:	f108 0845 	add.w	r8, r8, #69	; 0x45
      for (int idx=0; idx<max_; idx++) {
 8002728:	455e      	cmp	r6, fp
 800272a:	db18      	blt.n	800275e <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 800272c:	4b3f      	ldr	r3, [pc, #252]	; (800282c <aiPrintBufferInfo+0x1d8>)
 800272e:	1cd8      	adds	r0, r3, #3
 8002730:	45d3      	cmp	fp, sl
 8002732:	bf38      	it	cc
 8002734:	4618      	movcc	r0, r3
 8002736:	f000 f9a3 	bl	8002a80 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 800273a:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 800273c:	2101      	movs	r1, #1
 800273e:	4628      	mov	r0, r5
  if (buffer->data)
 8002740:	2c00      	cmp	r4, #0
 8002742:	d054      	beq.n	80027ee <aiPrintBufferInfo+0x19a>
    LC_PRINT(" @0x%X/%d",
 8002744:	f002 ff74 	bl	8005630 <ai_buffer_get_size>
 8002748:	4639      	mov	r1, r7
 800274a:	f002 ffa5 	bl	8005698 <ai_buffer_get_byte_size>
 800274e:	4602      	mov	r2, r0
 8002750:	4837      	ldr	r0, [pc, #220]	; (8002830 <aiPrintBufferInfo+0x1dc>)
 8002752:	4621      	mov	r1, r4
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8002754:	b003      	add	sp, #12
 8002756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 800275a:	f000 b991 	b.w	8002a80 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800275e:	68ab      	ldr	r3, [r5, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02e      	beq.n	80027c2 <aiPrintBufferInfo+0x16e>
 8002764:	681c      	ldr	r4, [r3, #0]
 8002766:	f014 0401 	ands.w	r4, r4, #1
 800276a:	d02d      	beq.n	80027c8 <aiPrintBufferInfo+0x174>
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	2a00      	cmp	r2, #0
 8002770:	d049      	beq.n	8002806 <aiPrintBufferInfo+0x1b2>
 8002772:	6853      	ldr	r3, [r2, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d049      	beq.n	800280c <aiPrintBufferInfo+0x1b8>
 8002778:	8851      	ldrh	r1, [r2, #2]
 800277a:	42b1      	cmp	r1, r6
 800277c:	dd46      	ble.n	800280c <aiPrintBufferInfo+0x1b8>
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002784:	6818      	ldr	r0, [r3, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002786:	2a00      	cmp	r2, #0
 8002788:	d03e      	beq.n	8002808 <aiPrintBufferInfo+0x1b4>
 800278a:	8814      	ldrh	r4, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800278c:	6853      	ldr	r3, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800278e:	f014 0402 	ands.w	r4, r4, #2
 8002792:	d00f      	beq.n	80027b4 <aiPrintBufferInfo+0x160>
 8002794:	b1b3      	cbz	r3, 80027c4 <aiPrintBufferInfo+0x170>
 8002796:	8852      	ldrh	r2, [r2, #2]
 8002798:	42b2      	cmp	r2, r6
 800279a:	dd35      	ble.n	8002808 <aiPrintBufferInfo+0x1b4>
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80027a0:	f7fd fed2 	bl	8000548 <__aeabi_f2d>
 80027a4:	9400      	str	r4, [sp, #0]
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4640      	mov	r0, r8
 80027ac:	f000 f968 	bl	8002a80 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7b9      	b.n	8002728 <aiPrintBufferInfo+0xd4>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80027b4:	b133      	cbz	r3, 80027c4 <aiPrintBufferInfo+0x170>
 80027b6:	8852      	ldrh	r2, [r2, #2]
 80027b8:	42b2      	cmp	r2, r6
 80027ba:	ddf1      	ble.n	80027a0 <aiPrintBufferInfo+0x14c>
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	579c      	ldrsb	r4, [r3, r6]
 80027c0:	e7ee      	b.n	80027a0 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80027c2:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80027c4:	461c      	mov	r4, r3
 80027c6:	e7eb      	b.n	80027a0 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80027c8:	4648      	mov	r0, r9
 80027ca:	e7e9      	b.n	80027a0 <aiPrintBufferInfo+0x14c>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 80027cc:	f019 0f78 	tst.w	r9, #120	; 0x78
 80027d0:	d102      	bne.n	80027d8 <aiPrintBufferInfo+0x184>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80027d2:	4818      	ldr	r0, [pc, #96]	; (8002834 <aiPrintBufferInfo+0x1e0>)
 80027d4:	4621      	mov	r1, r4
 80027d6:	e766      	b.n	80026a6 <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 80027d8:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 80027dc:	3a40      	subs	r2, #64	; 0x40
 80027de:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 80027e2:	4411      	add	r1, r2
 80027e4:	4814      	ldr	r0, [pc, #80]	; (8002838 <aiPrintBufferInfo+0x1e4>)
 80027e6:	1a61      	subs	r1, r4, r1
 80027e8:	f000 f94a 	bl	8002a80 <lc_print>
 80027ec:	e7a5      	b.n	800273a <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 80027ee:	f002 ff1f 	bl	8005630 <ai_buffer_get_size>
 80027f2:	4639      	mov	r1, r7
 80027f4:	f002 ff50 	bl	8005698 <ai_buffer_get_byte_size>
 80027f8:	4601      	mov	r1, r0
 80027fa:	4810      	ldr	r0, [pc, #64]	; (800283c <aiPrintBufferInfo+0x1e8>)
}
 80027fc:	b003      	add	sp, #12
 80027fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 8002802:	f000 b93d 	b.w	8002a80 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002806:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002808:	2400      	movs	r4, #0
 800280a:	e7c9      	b.n	80027a0 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800280c:	4648      	mov	r0, r9
 800280e:	e7ba      	b.n	8002786 <aiPrintBufferInfo+0x132>
 8002810:	0800ed6f 	.word	0x0800ed6f
 8002814:	0800ed7a 	.word	0x0800ed7a
 8002818:	0800ed8f 	.word	0x0800ed8f
 800281c:	0800ed93 	.word	0x0800ed93
 8002820:	0800ed81 	.word	0x0800ed81
 8002824:	0800ed8b 	.word	0x0800ed8b
 8002828:	0800ed9b 	.word	0x0800ed9b
 800282c:	0800ed6b 	.word	0x0800ed6b
 8002830:	0800edc8 	.word	0x0800edc8
 8002834:	0800edb5 	.word	0x0800edb5
 8002838:	0800edc0 	.word	0x0800edc0
 800283c:	0800edd2 	.word	0x0800edd2
 8002840:	0800ed67 	.word	0x0800ed67

08002844 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8002844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002848:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 800284a:	484b      	ldr	r0, [pc, #300]	; (8002978 <aiPrintNetworkInfo+0x134>)
 800284c:	f000 f918 	bl	8002a80 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8002850:	6821      	ldr	r1, [r4, #0]
 8002852:	484a      	ldr	r0, [pc, #296]	; (800297c <aiPrintNetworkInfo+0x138>)
 8002854:	f000 f914 	bl	8002a80 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8002858:	6861      	ldr	r1, [r4, #4]
 800285a:	4849      	ldr	r0, [pc, #292]	; (8002980 <aiPrintNetworkInfo+0x13c>)
 800285c:	f000 f910 	bl	8002a80 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8002860:	68a1      	ldr	r1, [r4, #8]
 8002862:	4848      	ldr	r0, [pc, #288]	; (8002984 <aiPrintNetworkInfo+0x140>)
 8002864:	f000 f90c 	bl	8002a80 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8002868:	68e1      	ldr	r1, [r4, #12]
 800286a:	4847      	ldr	r0, [pc, #284]	; (8002988 <aiPrintNetworkInfo+0x144>)
 800286c:	f000 f908 	bl	8002a80 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
#endif
  if (report->tool_revision[0])
 8002870:	69a1      	ldr	r1, [r4, #24]
 8002872:	780b      	ldrb	r3, [r1, #0]
 8002874:	b113      	cbz	r3, 800287c <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8002876:	4845      	ldr	r0, [pc, #276]	; (800298c <aiPrintNetworkInfo+0x148>)
 8002878:	f000 f902 	bl	8002a80 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800287c:	7f21      	ldrb	r1, [r4, #28]
 800287e:	7fa3      	ldrb	r3, [r4, #30]
 8002880:	7f62      	ldrb	r2, [r4, #29]
 8002882:	4843      	ldr	r0, [pc, #268]	; (8002990 <aiPrintNetworkInfo+0x14c>)
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8002884:	4f43      	ldr	r7, [pc, #268]	; (8002994 <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002886:	f000 f8fb 	bl	8002a80 <lc_print>
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 800288a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800288e:	4842      	ldr	r0, [pc, #264]	; (8002998 <aiPrintNetworkInfo+0x154>)
 8002890:	f000 f8f6 	bl	8002a80 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8002894:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002896:	4841      	ldr	r0, [pc, #260]	; (800299c <aiPrintNetworkInfo+0x158>)
 8002898:	f000 f8f2 	bl	8002a80 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 800289c:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 80028a0:	483f      	ldr	r0, [pc, #252]	; (80029a0 <aiPrintNetworkInfo+0x15c>)
 80028a2:	f000 f8ed 	bl	8002a80 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80028a6:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80028a8:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 80028ac:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80028b0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80028b4:	42ab      	cmp	r3, r5
 80028b6:	dc25      	bgt.n	8002904 <aiPrintNetworkInfo+0xc0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 80028b8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80028bc:	4839      	ldr	r0, [pc, #228]	; (80029a4 <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 80028be:	4f35      	ldr	r7, [pc, #212]	; (8002994 <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 80028c0:	f000 f8de 	bl	8002a80 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80028c4:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80028c6:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 80028ca:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80028ce:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80028d2:	42ab      	cmp	r3, r5
 80028d4:	dc25      	bgt.n	8002922 <aiPrintNetworkInfo+0xde>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80028d6:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80028d8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80028da:	4833      	ldr	r0, [pc, #204]	; (80029a8 <aiPrintNetworkInfo+0x164>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 80028dc:	4e33      	ldr	r6, [pc, #204]	; (80029ac <aiPrintNetworkInfo+0x168>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80028de:	f000 f8cf 	bl	8002a80 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80028e2:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80028e4:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80028e6:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  for (int i=0; i<report->n_inputs; i++) {
 80028ea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80028ec:	42ab      	cmp	r3, r5
 80028ee:	dc27      	bgt.n	8002940 <aiPrintNetworkInfo+0xfc>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 80028f0:	4e2f      	ldr	r6, [pc, #188]	; (80029b0 <aiPrintNetworkInfo+0x16c>)
  for (int i=0; i<report->n_outputs; i++) {
 80028f2:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80028f4:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80028f6:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80028fa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80028fc:	42ab      	cmp	r3, r5
 80028fe:	dc2d      	bgt.n	800295c <aiPrintNetworkInfo+0x118>
  }
}
 8002900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002904:	6d60      	ldr	r0, [r4, #84]	; 0x54
      LC_PRINT("  [%d] ", idx);
 8002906:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002908:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 800290c:	4638      	mov	r0, r7
 800290e:	f000 f8b7 	bl	8002a80 <lc_print>
      aiPrintBufferInfo(buffer);
 8002912:	4630      	mov	r0, r6
 8002914:	f7ff fe9e 	bl	8002654 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8002918:	4648      	mov	r0, r9
 800291a:	f000 f8b1 	bl	8002a80 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800291e:	3501      	adds	r5, #1
 8002920:	e7c6      	b.n	80028b0 <aiPrintNetworkInfo+0x6c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002922:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8002924:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002926:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 800292a:	4638      	mov	r0, r7
 800292c:	f000 f8a8 	bl	8002a80 <lc_print>
      aiPrintBufferInfo(buffer);
 8002930:	4630      	mov	r0, r6
 8002932:	f7ff fe8f 	bl	8002654 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8002936:	4648      	mov	r0, r9
 8002938:	f000 f8a2 	bl	8002a80 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800293c:	3501      	adds	r5, #1
 800293e:	e7c6      	b.n	80028ce <aiPrintNetworkInfo+0x8a>
    LC_PRINT("  I[%d] ", i);
 8002940:	4629      	mov	r1, r5
 8002942:	4630      	mov	r0, r6
 8002944:	f000 f89c 	bl	8002a80 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8002948:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800294a:	fb07 0005 	mla	r0, r7, r5, r0
 800294e:	f7ff fe81 	bl	8002654 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8002952:	4640      	mov	r0, r8
 8002954:	f000 f894 	bl	8002a80 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8002958:	3501      	adds	r5, #1
 800295a:	e7c6      	b.n	80028ea <aiPrintNetworkInfo+0xa6>
    LC_PRINT("  O[%d] ", i);
 800295c:	4629      	mov	r1, r5
 800295e:	4630      	mov	r0, r6
 8002960:	f000 f88e 	bl	8002a80 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8002964:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002966:	fb07 0005 	mla	r0, r7, r5, r0
 800296a:	f7ff fe73 	bl	8002654 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800296e:	4640      	mov	r0, r8
 8002970:	f000 f886 	bl	8002a80 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8002974:	3501      	adds	r5, #1
 8002976:	e7c0      	b.n	80028fa <aiPrintNetworkInfo+0xb6>
 8002978:	0800ede4 	.word	0x0800ede4
 800297c:	0800edfe 	.word	0x0800edfe
 8002980:	0800ee19 	.word	0x0800ee19
 8002984:	0800ee34 	.word	0x0800ee34
 8002988:	0800ee4f 	.word	0x0800ee4f
 800298c:	0800ee6a 	.word	0x0800ee6a
 8002990:	0800ee85 	.word	0x0800ee85
 8002994:	0800eefe 	.word	0x0800eefe
 8002998:	0800eea6 	.word	0x0800eea6
 800299c:	0800eec8 	.word	0x0800eec8
 80029a0:	0800eee3 	.word	0x0800eee3
 80029a4:	0800ef09 	.word	0x0800ef09
 80029a8:	0800ef24 	.word	0x0800ef24
 80029ac:	0800ef42 	.word	0x0800ef42
 80029b0:	0800ef4b 	.word	0x0800ef4b

080029b4 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 80029b4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d207      	bcs.n	80029ce <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 80029be:	6803      	ldr	r3, [r0, #0]
 80029c0:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
 80029c2:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 80029c4:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 80029c6:	3301      	adds	r3, #1
    buffer->buffer[buffer->pos] = 0;
 80029c8:	2100      	movs	r1, #0
    buffer->pos++;
 80029ca:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 80029cc:	54d1      	strb	r1, [r2, r3]
  }
}
 80029ce:	4770      	bx	lr

080029d0 <_put_c_driver>:
{
 80029d0:	b507      	push	{r0, r1, r2, lr}
  if (_ioWriteAllowed)
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_put_c_driver+0x24>)
{
 80029d4:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b13b      	cbz	r3, 80029ec <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <_put_c_driver+0x28>)
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	2201      	movs	r2, #1
 80029e4:	f10d 0107 	add.w	r1, sp, #7
 80029e8:	f7ff fac5 	bl	8001f76 <HAL_UART_Transmit>
}
 80029ec:	b003      	add	sp, #12
 80029ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	20000ee4 	.word	0x20000ee4

080029fc <ioRawWriteBuffer>:
{
 80029fc:	b508      	push	{r3, lr}
 80029fe:	b28a      	uxth	r2, r1
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	4601      	mov	r1, r0
 8002a06:	4803      	ldr	r0, [pc, #12]	; (8002a14 <ioRawWriteBuffer+0x18>)
 8002a08:	f7ff fab5 	bl	8001f76 <HAL_UART_Transmit>
}
 8002a0c:	fab0 f080 	clz	r0, r0
 8002a10:	0940      	lsrs	r0, r0, #5
 8002a12:	bd08      	pop	{r3, pc}
 8002a14:	20000ee4 	.word	0x20000ee4

08002a18 <ioRawReadBuffer>:
{
 8002a18:	b508      	push	{r3, lr}

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002a1a:	b28a      	uxth	r2, r1
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	4601      	mov	r1, r0
 8002a22:	4803      	ldr	r0, [pc, #12]	; (8002a30 <ioRawReadBuffer+0x18>)
 8002a24:	f7ff faf5 	bl	8002012 <HAL_UART_Receive>
}
 8002a28:	fab0 f080 	clz	r0, r0
 8002a2c:	0940      	lsrs	r0, r0, #5
 8002a2e:	bd08      	pop	{r3, pc}
 8002a30:	20000ee4 	.word	0x20000ee4

08002a34 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <ioRawDisableLLWrite+0x8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
}
 8002a3a:	4770      	bx	lr
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <_write>:
{
 8002a40:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8002a42:	1e14      	subs	r4, r2, #0
 8002a44:	da0a      	bge.n	8002a5c <_write+0x1c>
 8002a46:	3801      	subs	r0, #1
 8002a48:	2801      	cmp	r0, #1
 8002a4a:	d907      	bls.n	8002a5c <_write+0x1c>
    errno = EBADF;
 8002a4c:	f009 fefa 	bl	800c844 <__errno>
 8002a50:	2309      	movs	r3, #9
 8002a52:	6003      	str	r3, [r0, #0]
    return -1;
 8002a54:	f04f 34ff 	mov.w	r4, #4294967295
}
 8002a58:	4620      	mov	r0, r4
 8002a5a:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <_write+0x38>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f9      	beq.n	8002a58 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002a64:	b2a2      	uxth	r2, r4
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <_write+0x3c>)
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6c:	f7ff fa83 	bl	8001f76 <HAL_UART_Transmit>
  return (status ? count : 0);
 8002a70:	2800      	cmp	r0, #0
 8002a72:	bf18      	it	ne
 8002a74:	2400      	movne	r4, #0
 8002a76:	e7ef      	b.n	8002a58 <_write+0x18>
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	20000ee4 	.word	0x20000ee4

08002a80 <lc_print>:
{
 8002a80:	b40f      	push	{r0, r1, r2, r3}
 8002a82:	b507      	push	{r0, r1, r2, lr}
 8002a84:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002a86:	2100      	movs	r1, #0
{
 8002a88:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002a8c:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <lc_print+0x20>)
  va_start(ap, fmt);
 8002a8e:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002a90:	f001 f866 	bl	8003b60 <vlc_print>
}
 8002a94:	b003      	add	sp, #12
 8002a96:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a9a:	b004      	add	sp, #16
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	080029d1 	.word	0x080029d1

08002aa4 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 8002aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 8002aa6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8002aae:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <lc_vsnprint+0x1c>)
 8002ab0:	a901      	add	r1, sp, #4
 8002ab2:	f001 f855 	bl	8003b60 <vlc_print>
  return buffer.pos - 1;
}
 8002ab6:	9803      	ldr	r0, [sp, #12]
 8002ab8:	3801      	subs	r0, #1
 8002aba:	b005      	add	sp, #20
 8002abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ac0:	080029b5 	.word	0x080029b5

08002ac4 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8002ac4:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8002ac6:	4d11      	ldr	r5, [pc, #68]	; (8002b0c <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8002ac8:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8002aca:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002acc:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002ad0:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002ad4:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8002ad8:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002ada:	f009 f81f 	bl	800bb1c <malloc>

  /* remember size */
  if (ptr) {
 8002ade:	b1a0      	cbz	r0, 8002b0a <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002ae0:	1903      	adds	r3, r0, r4
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8002ae4:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	07db      	lsls	r3, r3, #31
 8002aec:	d50c      	bpl.n	8002b08 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8002aee:	68eb      	ldr	r3, [r5, #12]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8002af4:	686b      	ldr	r3, [r5, #4]
 8002af6:	4423      	add	r3, r4
 8002af8:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8002afa:	69ab      	ldr	r3, [r5, #24]
 8002afc:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8002afe:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8002b00:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8002b02:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8002b04:	bf88      	it	hi
 8002b06:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8002b08:	3004      	adds	r0, #4
}
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
 8002b0c:	2000112c 	.word	0x2000112c
 8002b10:	efdcba98 	.word	0xefdcba98

08002b14 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8002b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b18:	4604      	mov	r4, r0
 8002b1a:	468a      	mov	sl, r1
  if (!t)
 8002b1c:	4617      	mov	r7, r2
 8002b1e:	b382      	cbz	r2, 8002b82 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 8002b20:	f7ff f916 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8002b24:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8002b26:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8002b28:	9001      	str	r0, [sp, #4]
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7fe f949 	bl	8000dc4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8002b32:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8002b36:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8002b38:	fba4 0106 	umull	r0, r1, r4, r6
 8002b3c:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002b3e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002b88 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 8002b42:	2300      	movs	r3, #0
 8002b44:	fb06 110a 	mla	r1, r6, sl, r1
 8002b48:	f7fe f93c 	bl	8000dc4 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8002b4c:	fbab 3106 	umull	r3, r1, fp, r6
 8002b50:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002b52:	fba4 0109 	umull	r0, r1, r4, r9
 8002b56:	9a01      	ldr	r2, [sp, #4]
 8002b58:	fb09 110a 	mla	r1, r9, sl, r1
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f7fe f931 	bl	8000dc4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 8002b62:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8002b64:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8002b66:	fbab 8909 	umull	r8, r9, fp, r9
 8002b6a:	eba0 0008 	sub.w	r0, r0, r8
 8002b6e:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 8002b72:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8002b76:	1b40      	subs	r0, r0, r5
  t->us = us;
 8002b78:	60f8      	str	r0, [r7, #12]
  return 0;
 8002b7a:	2000      	movs	r0, #0
}
 8002b7c:	b003      	add	sp, #12
 8002b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8002b82:	f04f 30ff 	mov.w	r0, #4294967295
 8002b86:	e7f9      	b.n	8002b7c <dwtCyclesToTime+0x68>
 8002b88:	000f4240 	.word	0x000f4240

08002b8c <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	ed2d 8b02 	vpush	{d8}
 8002b92:	b082      	sub	sp, #8
 8002b94:	4604      	mov	r4, r0
 8002b96:	9101      	str	r1, [sp, #4]
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 8002b98:	f7ff f8da 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 8002b9c:	9901      	ldr	r1, [sp, #4]
  float fcpu = (float)port_hal_get_cpu_freq();
 8002b9e:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7fe f8c8 	bl	8000d38 <__aeabi_ul2f>
 8002ba8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002bc4 <dwtCyclesToFloatMs+0x38>
 8002bac:	ee07 0a10 	vmov	s14, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 8002bb0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8002bb4:	ee27 0a27 	vmul.f32	s0, s14, s15
  return res;
}
 8002bb8:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8002bbc:	b002      	add	sp, #8
 8002bbe:	ecbd 8b02 	vpop	{d8}
 8002bc2:	bd10      	pop	{r4, pc}
 8002bc4:	447a0000 	.word	0x447a0000

08002bc8 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <getFlashCacheConf+0x38>)
{
 8002bca:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002bd0:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8002bd2:	9b01      	ldr	r3, [sp, #4]
 8002bd4:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8002bd6:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002bd8:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 8002bdc:	bf4c      	ite	mi
 8002bde:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002be2:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8002be6:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8002be8:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 8002bea:	bf48      	it	mi
 8002bec:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8002bf0:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8002bf2:	bf48      	it	mi
 8002bf4:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8002bf8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002bfc:	b002      	add	sp, #8
 8002bfe:	4770      	bx	lr
 8002c00:	40023c00 	.word	0x40023c00

08002c04 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8002c08:	f7ff f8a2 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8002c0c:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8002c0e:	f7ff f89f 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8002c12:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8002c14:	f7ff ffd8 	bl	8002bc8 <getFlashCacheConf>
 8002c18:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8002c1a:	f7fe fcd5 	bl	80015c8 <HAL_GetDEVID>
 8002c1e:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8002c20:	f7fe fccc 	bl	80015bc <HAL_GetREVID>
 8002c24:	6120      	str	r0, [r4, #16]
}
 8002c26:	bd10      	pop	{r4, pc}

08002c28 <getSysConf>:
  if (!conf)
 8002c28:	b108      	cbz	r0, 8002c2e <getSysConf+0x6>
 8002c2a:	f7ff bfeb 	b.w	8002c04 <getSysConf.part.0>
}
 8002c2e:	4770      	bx	lr

08002c30 <systemSettingLog>:

void systemSettingLog(void)
{
 8002c30:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002c32:	2203      	movs	r2, #3
{
 8002c34:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002c36:	2301      	movs	r3, #1
 8002c38:	210b      	movs	r1, #11
 8002c3a:	4826      	ldr	r0, [pc, #152]	; (8002cd4 <systemSettingLog+0xa4>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002c3c:	4c26      	ldr	r4, [pc, #152]	; (8002cd8 <systemSettingLog+0xa8>)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002c3e:	f7ff ff1f 	bl	8002a80 <lc_print>
  if (!conf)
 8002c42:	a803      	add	r0, sp, #12
 8002c44:	f7ff ffde 	bl	8002c04 <getSysConf.part.0>
  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8002c48:	4824      	ldr	r0, [pc, #144]	; (8002cdc <systemSettingLog+0xac>)
 8002c4a:	f7ff ff19 	bl	8002a80 <lc_print>
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002c4e:	9906      	ldr	r1, [sp, #24]
 8002c50:	4823      	ldr	r0, [pc, #140]	; (8002ce0 <systemSettingLog+0xb0>)
 8002c52:	f2a1 4313 	subw	r3, r1, #1043	; 0x413
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b50      	cmp	r3, #80	; 0x50
 8002c5a:	bf96      	itet	ls
 8002c5c:	4a21      	ldrls	r2, [pc, #132]	; (8002ce4 <systemSettingLog+0xb4>)
 8002c5e:	4a22      	ldrhi	r2, [pc, #136]	; (8002ce8 <systemSettingLog+0xb8>)
 8002c60:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8002c64:	9b07      	ldr	r3, [sp, #28]
 8002c66:	f7ff ff0b 	bl	8002a80 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <systemSettingLog+0xbc>)
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	1d5a      	adds	r2, r3, #5
 8002c70:	f103 000a 	add.w	r0, r3, #10
 8002c74:	f7ff ff04 	bl	8002a80 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8002c78:	f7fe fc9c 	bl	80015b4 <HAL_GetHalVersion>
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <systemSettingLog+0xc0>)
 8002c80:	f7ff fefe 	bl	8002a80 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002c84:	9903      	ldr	r1, [sp, #12]
 8002c86:	481b      	ldr	r0, [pc, #108]	; (8002cf4 <systemSettingLog+0xc4>)
 8002c88:	fb91 f1f4 	sdiv	r1, r1, r4
 8002c8c:	f7ff fef8 	bl	8002a80 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8002c90:	9904      	ldr	r1, [sp, #16]
 8002c92:	4819      	ldr	r0, [pc, #100]	; (8002cf8 <systemSettingLog+0xc8>)
 8002c94:	fb91 f1f4 	sdiv	r1, r1, r4
 8002c98:	f7ff fef2 	bl	8002a80 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <systemSettingLog+0xcc>)
    return "False";
 8002c9e:	4818      	ldr	r0, [pc, #96]	; (8002d00 <systemSettingLog+0xd0>)
  uint32_t acr = FLASH->ACR;
 8002ca0:	6819      	ldr	r1, [r3, #0]
    return "False";
 8002ca2:	1d44      	adds	r4, r0, #5
 8002ca4:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002ca8:	bf14      	ite	ne
 8002caa:	4602      	movne	r2, r0
 8002cac:	4622      	moveq	r2, r4
 8002cae:	f411 7f00 	tst.w	r1, #512	; 0x200
 8002cb2:	bf14      	ite	ne
 8002cb4:	4603      	movne	r3, r0
 8002cb6:	4623      	moveq	r3, r4
 8002cb8:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8002cbc:	bf18      	it	ne
 8002cbe:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8002cc0:	f001 0507 	and.w	r5, r1, #7
 8002cc4:	e9cd 4500 	strd	r4, r5, [sp]
 8002cc8:	30ec      	adds	r0, #236	; 0xec
 8002cca:	f7ff fed9 	bl	8002a80 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8002cce:	b009      	add	sp, #36	; 0x24
 8002cd0:	bd30      	pop	{r4, r5, pc}
 8002cd2:	bf00      	nop
 8002cd4:	0800efcd 	.word	0x0800efcd
 8002cd8:	000f4240 	.word	0x000f4240
 8002cdc:	0800efea 	.word	0x0800efea
 8002ce0:	0800f00a 	.word	0x0800f00a
 8002ce4:	0800f49c 	.word	0x0800f49c
 8002ce8:	0800efba 	.word	0x0800efba
 8002cec:	0800f03b 	.word	0x0800f03b
 8002cf0:	0800f063 	.word	0x0800f063
 8002cf4:	0800f07c 	.word	0x0800f07c
 8002cf8:	0800f095 	.word	0x0800f095
 8002cfc:	40023c00 	.word	0x40023c00
 8002d00:	0800efc2 	.word	0x0800efc2

08002d04 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8002d04:	b530      	push	{r4, r5, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	460c      	mov	r4, r1
 8002d0a:	4605      	mov	r5, r0
  UNUSED(param);
  struct mcu_conf conf;

  getSysConf(&conf);
 8002d0c:	a801      	add	r0, sp, #4
 8002d0e:	f7ff ff8b 	bl	8002c28 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 8002d12:	230b      	movs	r3, #11
 8002d14:	80e3      	strh	r3, [r4, #6]

  resp->payload.sinfo.devid = conf.devid;
 8002d16:	9b04      	ldr	r3, [sp, #16]
 8002d18:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 8002d1a:	9b01      	ldr	r3, [sp, #4]
 8002d1c:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 8002d1e:	9b02      	ldr	r3, [sp, #8]
 8002d20:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 8002d22:	9b03      	ldr	r3, [sp, #12]
 8002d24:	6163      	str	r3, [r4, #20]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002d26:	2200      	movs	r2, #0
 8002d28:	4621      	mov	r1, r4
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	f7ff fb58 	bl	80023e0 <aiPbMgrSendResp>
}
 8002d30:	b007      	add	sp, #28
 8002d32:	bd30      	pop	{r4, r5, pc}

08002d34 <encode_mempool_to_tensor_desc>:
{
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	461e      	mov	r6, r3
  array_u32->size = 1;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	6033      	str	r3, [r6, #0]
  if (info->name)
 8002d3c:	6808      	ldr	r0, [r1, #0]
  array_u32->data = (void *)&info->size;
 8002d3e:	1d0b      	adds	r3, r1, #4
 8002d40:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8002d42:	2304      	movs	r3, #4
{
 8002d44:	460d      	mov	r5, r1
 8002d46:	4614      	mov	r4, r2
  array_u32->offset = 4;
 8002d48:	60b3      	str	r3, [r6, #8]
  if (info->name)
 8002d4a:	b1a0      	cbz	r0, 8002d76 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 8002d4c:	2240      	movs	r2, #64	; 0x40
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f7ff faec 	bl	800232c <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <encode_mempool_to_tensor_desc+0x48>)
 8002d56:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 8002d58:	686b      	ldr	r3, [r5, #4]
 8002d5a:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = AI_SHAPE_BCWH << 24 | array_u32->size;
 8002d5c:	6833      	ldr	r3, [r6, #0]
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d62:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 8002d6c:	68ab      	ldr	r3, [r5, #8]
 8002d6e:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 8002d70:	2308      	movs	r3, #8
 8002d72:	6623      	str	r3, [r4, #96]	; 0x60
}
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 8002d76:	7010      	strb	r0, [r2, #0]
 8002d78:	e7ec      	b.n	8002d54 <encode_mempool_to_tensor_desc+0x20>
 8002d7a:	bf00      	nop
 8002d7c:	00040440 	.word	0x00040440

08002d80 <fill_tensor_desc_msg>:
{
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 8002d84:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 8002d86:	6986      	ldr	r6, [r0, #24]
  array_u32->size = buff->shape.size;
 8002d88:	f3c1 2117 	ubfx	r1, r1, #8, #24
  array_u32->offset = sizeof(buff->shape.data[0]);
 8002d8c:	2704      	movs	r7, #4
{
 8002d8e:	ed2d 8b02 	vpush	{d8}
  array_u32->size = buff->shape.size;
 8002d92:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 8002d94:	6056      	str	r6, [r2, #4]
  array_u32->offset = sizeof(buff->shape.data[0]);
 8002d96:	6097      	str	r7, [r2, #8]
  msg->name[0] = 0;
 8002d98:	2200      	movs	r2, #0
 8002d9a:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 8002d9c:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 8002d9e:	6623      	str	r3, [r4, #96]	; 0x60
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 8002da0:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 8002da2:	6422      	str	r2, [r4, #64]	; 0x40
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 8002da4:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8002da8:	64a1      	str	r1, [r4, #72]	; 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002daa:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002dac:	6836      	ldr	r6, [r6, #0]
{
 8002dae:	4605      	mov	r5, r0
 8002db0:	eeb0 8a40 	vmov.f32	s16, s0
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002db4:	f002 fc3c 	bl	8005630 <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8002db8:	68ab      	ldr	r3, [r5, #8]
  msg->zeropoint = zero_point;
 8002dba:	9a08      	ldr	r2, [sp, #32]
  msg->scale = scale;
 8002dbc:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002dc0:	4370      	muls	r0, r6
  msg->size = _get_buffer_element_size(buff);
 8002dc2:	6460      	str	r0, [r4, #68]	; 0x44
  msg->zeropoint = zero_point;
 8002dc4:	65a2      	str	r2, [r4, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8002dc6:	b1a3      	cbz	r3, 8002df2 <fill_tensor_desc_msg+0x72>
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	07d0      	lsls	r0, r2, #31
 8002dcc:	d511      	bpl.n	8002df2 <fill_tensor_desc_msg+0x72>
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b17b      	cbz	r3, 8002df2 <fill_tensor_desc_msg+0x72>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	b192      	cbz	r2, 8002dfc <fill_tensor_desc_msg+0x7c>
 8002dd6:	8859      	ldrh	r1, [r3, #2]
 8002dd8:	b181      	cbz	r1, 8002dfc <fill_tensor_desc_msg+0x7c>
 8002dda:	6811      	ldr	r1, [r2, #0]
 8002ddc:	6809      	ldr	r1, [r1, #0]
 8002dde:	6561      	str	r1, [r4, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8002de0:	8819      	ldrh	r1, [r3, #0]
 8002de2:	0789      	lsls	r1, r1, #30
 8002de4:	d50c      	bpl.n	8002e00 <fill_tensor_desc_msg+0x80>
 8002de6:	b19a      	cbz	r2, 8002e10 <fill_tensor_desc_msg+0x90>
 8002de8:	885b      	ldrh	r3, [r3, #2]
 8002dea:	b10b      	cbz	r3, 8002df0 <fill_tensor_desc_msg+0x70>
 8002dec:	6853      	ldr	r3, [r2, #4]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8002df2:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 8002df6:	686b      	ldr	r3, [r5, #4]
 8002df8:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8002dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	e7ee      	b.n	8002dde <fill_tensor_desc_msg+0x5e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8002e00:	b132      	cbz	r2, 8002e10 <fill_tensor_desc_msg+0x90>
 8002e02:	885b      	ldrh	r3, [r3, #2]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f3      	beq.n	8002df0 <fill_tensor_desc_msg+0x70>
 8002e08:	6853      	ldr	r3, [r2, #4]
 8002e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e0e:	e7ef      	b.n	8002df0 <fill_tensor_desc_msg+0x70>
 8002e10:	4613      	mov	r3, r2
 8002e12:	e7ed      	b.n	8002df0 <fill_tensor_desc_msg+0x70>

08002e14 <encode_ai_buffer_to_tensor_desc>:
{
 8002e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e16:	460c      	mov	r4, r1
 8002e18:	4611      	mov	r1, r2
 8002e1a:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8002e1c:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8002e1e:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	ed94 0a02 	vldr	s0, [r4, #8]
 8002e26:	6863      	ldr	r3, [r4, #4]
 8002e28:	241c      	movs	r4, #28
 8002e2a:	fb04 5000 	mla	r0, r4, r0, r5
 8002e2e:	f7ff ffa7 	bl	8002d80 <fill_tensor_desc_msg>
}
 8002e32:	b003      	add	sp, #12
 8002e34:	bd30      	pop	{r4, r5, pc}

08002e36 <_get_buffer_size>:
{
 8002e36:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002e38:	6983      	ldr	r3, [r0, #24]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002e3a:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002e3c:	681d      	ldr	r5, [r3, #0]
{
 8002e3e:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002e40:	f002 fbf6 	bl	8005630 <ai_buffer_get_size>
 8002e44:	6821      	ldr	r1, [r4, #0]
 8002e46:	4368      	muls	r0, r5
}
 8002e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002e4c:	f002 bc24 	b.w	8005698 <ai_buffer_get_byte_size>

08002e50 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8002e50:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 8002e52:	f7fe fb95 	bl	8001580 <HAL_GetTick>
 8002e56:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <cyclesCounterStart+0x1c>)
  cyclesCount.tick_start = port_hal_get_tick();
 8002e5a:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8002e60:	6852      	ldr	r2, [r2, #4]
 8002e62:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8002e64:	bd08      	pop	{r3, pc}
 8002e66:	bf00      	nop
 8002e68:	20001120 	.word	0x20001120
 8002e6c:	e0001000 	.word	0xe0001000

08002e70 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8002e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <cyclesCounterEnd+0x44>)
 8002e74:	4d10      	ldr	r5, [pc, #64]	; (8002eb8 <cyclesCounterEnd+0x48>)
 8002e76:	685c      	ldr	r4, [r3, #4]
 8002e78:	686b      	ldr	r3, [r5, #4]
 8002e7a:	1ae4      	subs	r4, r4, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002e80:	f7fe fb7e 	bl	8001580 <HAL_GetTick>
 8002e84:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8002e86:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002e88:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8002e8a:	682a      	ldr	r2, [r5, #0]
 8002e8c:	4290      	cmp	r0, r2
 8002e8e:	d90c      	bls.n	8002eaa <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8002e90:	4619      	mov	r1, r3
 8002e92:	f7fd ff97 	bl	8000dc4 <__aeabi_uldivmod>
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	fba0 0303 	umull	r0, r3, r0, r3
 8002e9e:	1900      	adds	r0, r0, r4
 8002ea0:	eba3 0301 	sub.w	r3, r3, r1
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8002eaa:	4620      	mov	r0, r4
 8002eac:	4619      	mov	r1, r3
 8002eae:	b003      	add	sp, #12
 8002eb0:	bd30      	pop	{r4, r5, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e0001000 	.word	0xe0001000
 8002eb8:	20001120 	.word	0x20001120

08002ebc <aiExecCtx>:
{
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8002ec0:	7800      	ldrb	r0, [r0, #0]
 8002ec2:	b930      	cbnz	r0, 8002ed2 <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8002ec4:	b921      	cbnz	r1, 8002ed0 <aiExecCtx+0x14>
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <aiExecCtx+0x4c>)
 8002ec8:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	bf18      	it	ne
 8002ece:	4618      	movne	r0, r3
}
 8002ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 8002ed2:	4e0d      	ldr	r6, [pc, #52]	; (8002f08 <aiExecCtx+0x4c>)
 8002ed4:	6830      	ldr	r0, [r6, #0]
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d0fa      	beq.n	8002ed0 <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8002eda:	68b7      	ldr	r7, [r6, #8]
 8002edc:	4638      	mov	r0, r7
 8002ede:	f7fd f9c7 	bl	8000270 <strlen>
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f7fd f9c3 	bl	8000270 <strlen>
      if (cur->handle &&
 8002eea:	4285      	cmp	r5, r0
 8002eec:	d109      	bne.n	8002f02 <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 8002eee:	462a      	mov	r2, r5
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f009 fc39 	bl	800c76a <strncmp>
      cur = &net_exec_ctx[pos];
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	4630      	moveq	r0, r6
 8002efe:	2000      	movne	r0, #0
 8002f00:	e7e6      	b.n	8002ed0 <aiExecCtx+0x14>
 8002f02:	2000      	movs	r0, #0
 8002f04:	e7e4      	b.n	8002ed0 <aiExecCtx+0x14>
 8002f06:	bf00      	nop
 8002f08:	20001198 	.word	0x20001198

08002f0c <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f10:	b08b      	sub	sp, #44	; 0x2c
 8002f12:	461d      	mov	r5, r3
 8002f14:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  resp->which_payload = respMsg_tensor_tag;
 8002f18:	2311      	movs	r3, #17
 8002f1a:	80cb      	strh	r3, [r1, #6]
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002f1c:	f10d 090c 	add.w	r9, sp, #12
 8002f20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f22:	9300      	str	r3, [sp, #0]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002f24:	460c      	mov	r4, r1
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002f26:	4643      	mov	r3, r8
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002f28:	4606      	mov	r6, r0
 8002f2a:	4617      	mov	r7, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002f2c:	3108      	adds	r1, #8
 8002f2e:	464a      	mov	r2, r9
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7ff ff25 	bl	8002d80 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8002f38:	f418 7f00 	tst.w	r8, #512	; 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 8002f3c:	e9c4 3915 	strd	r3, r9, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 8002f40:	686b      	ldr	r3, [r5, #4]
 8002f42:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8002f44:	d115      	bne.n	8002f72 <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8002f46:	4628      	mov	r0, r5
 8002f48:	f7ff ff75 	bl	8002e36 <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002f4c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    resp->payload.tensor.data.size = 0;
 8002f4e:	6720      	str	r0, [r4, #112]	; 0x70
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002f50:	2200      	movs	r2, #0
 8002f52:	e9cd 3208 	strd	r3, r2, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <send_ai_io_tensor.isra.0+0x70>)
 8002f58:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8002f5a:	ab06      	add	r3, sp, #24
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002f5c:	e9cd 2006 	strd	r2, r0, [sp, #24]
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8002f60:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 8002f62:	463a      	mov	r2, r7
 8002f64:	4621      	mov	r1, r4
 8002f66:	4630      	mov	r0, r6
 8002f68:	f7ff fa3a 	bl	80023e0 <aiPbMgrSendResp>
}
 8002f6c:	b00b      	add	sp, #44	; 0x2c
 8002f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f72:	2000      	movs	r0, #0
 8002f74:	e7ea      	b.n	8002f4c <send_ai_io_tensor.isra.0+0x40>
 8002f76:	bf00      	nop
 8002f78:	08002207 	.word	0x08002207
 8002f7c:	0800225d 	.word	0x0800225d

08002f80 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 8002f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f84:	ed2d 8b02 	vpush	{d8}
 8002f88:	b093      	sub	sp, #76	; 0x4c
 8002f8a:	460d      	mov	r5, r1
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8002f8c:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
    const ai_observer_node *node) {
 8002f90:	4617      	mov	r7, r2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8002f92:	f7ff ff6d 	bl	8002e70 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8002f96:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8002f9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8002f9e:	d011      	beq.n	8002fc4 <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 8002fa0:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8002fa2:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 8002fa4:	f103 0301 	add.w	r3, r3, #1
 8002fa8:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8002faa:	d503      	bpl.n	8002fb4 <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 8002fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fb0:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8002fb4:	f7ff ff4c 	bl	8002e50 <cyclesCounterStart>
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	b013      	add	sp, #76	; 0x4c
 8002fbc:	ecbd 8b02 	vpop	{d8}
 8002fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8002fc4:	076b      	lsls	r3, r5, #29
 8002fc6:	d5f5      	bpl.n	8002fb4 <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 8002fc8:	f7ff ff42 	bl	8002e50 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8002fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fd0:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8002fd4:	181b      	adds	r3, r3, r0
 8002fd6:	eb42 0201 	adc.w	r2, r2, r1
 8002fda:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8002fde:	68a3      	ldr	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8002fe0:	f415 7f00 	tst.w	r5, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8002fe4:	887d      	ldrh	r5, [r7, #2]
    obs_ctx->n_cb_out++;
 8002fe6:	f103 0301 	add.w	r3, r3, #1
 8002fea:	60a3      	str	r3, [r4, #8]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8002fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8002ff0:	bf0c      	ite	eq
 8002ff2:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8002ff6:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    type |= (node->type & (ai_u16)0x7FFF);
 8002ffa:	f3c5 050e 	ubfx	r5, r5, #0, #15
 8002ffe:	431d      	orrs	r5, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003000:	f7ff fdc4 	bl	8002b8c <dwtCyclesToFloatMs>
 8003004:	ab04      	add	r3, sp, #16
 8003006:	930a      	str	r3, [sp, #40]	; 0x28
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003008:	ab07      	add	r3, sp, #28
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	88bb      	ldrh	r3, [r7, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 800300e:	ed8d 0a07 	vstr	s0, [sp, #28]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003012:	e9cd 5300 	strd	r5, r3, [sp]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003016:	2202      	movs	r2, #2
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003018:	4633      	mov	r3, r6
 800301a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 800301e:	9209      	str	r2, [sp, #36]	; 0x24
 8003020:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003022:	f7ff faa3 	bl	800256c <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	881a      	ldrh	r2, [r3, #0]
 800302a:	2a01      	cmp	r2, #1
 800302c:	d90e      	bls.n	800304c <aiOnExecNode_cb+0xcc>
 800302e:	f8d3 8004 	ldr.w	r8, [r3, #4]
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003032:	eddf 8a39 	vldr	s17, [pc, #228]	; 8003118 <aiOnExecNode_cb+0x198>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003036:	46b1      	mov	r9, r6
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003038:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800303c:	429e      	cmp	r6, r3
 800303e:	d205      	bcs.n	800304c <aiOnExecNode_cb+0xcc>
 8003040:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003044:	b113      	cbz	r3, 800304c <aiOnExecNode_cb+0xcc>
 8003046:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800304a:	b94f      	cbnz	r7, 8003060 <aiOnExecNode_cb+0xe0>
    obs_ctx->tcom += cyclesCounterEnd();
 800304c:	f7ff ff10 	bl	8002e70 <cyclesCounterEnd>
 8003050:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8003054:	1818      	adds	r0, r3, r0
 8003056:	eb42 0101 	adc.w	r1, r2, r1
 800305a:	e9c4 0106 	strd	r0, r1, [r4, #24]
 800305e:	e7a9      	b.n	8002fb4 <aiOnExecNode_cb+0x34>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d046      	beq.n	80030f4 <aiOnExecNode_cb+0x174>
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	2a00      	cmp	r2, #0
 800306a:	d043      	beq.n	80030f4 <aiOnExecNode_cb+0x174>
 800306c:	8859      	ldrh	r1, [r3, #2]
 800306e:	2900      	cmp	r1, #0
 8003070:	d040      	beq.n	80030f4 <aiOnExecNode_cb+0x174>
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8003078:	69b8      	ldr	r0, [r7, #24]
 800307a:	6802      	ldr	r2, [r0, #0]
 800307c:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 8003080:	d03b      	beq.n	80030fa <aiOnExecNode_cb+0x17a>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003082:	2b00      	cmp	r3, #0
 8003084:	d044      	beq.n	8003110 <aiOnExecNode_cb+0x190>
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	2900      	cmp	r1, #0
 800308a:	d043      	beq.n	8003114 <aiOnExecNode_cb+0x194>
 800308c:	885d      	ldrh	r5, [r3, #2]
 800308e:	b115      	cbz	r5, 8003096 <aiOnExecNode_cb+0x116>
 8003090:	684b      	ldr	r3, [r1, #4]
 8003092:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8003096:	68c3      	ldr	r3, [r0, #12]
 8003098:	920b      	str	r2, [sp, #44]	; 0x2c
          AI_BUFFER_INIT(
 800309a:	2101      	movs	r1, #1
 800309c:	4638      	mov	r0, r7
      ai_buffer buffer =
 800309e:	e9cd 390c 	strd	r3, r9, [sp, #48]	; 0x30
 80030a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
          AI_BUFFER_INIT(
 80030a6:	f002 fa97 	bl	80055d8 <get_tensor_size>
      ai_buffer buffer =
 80030aa:	7a3b      	ldrb	r3, [r7, #8]
 80030ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 80030b0:	68bb      	ldr	r3, [r7, #8]
      ai_buffer buffer =
 80030b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80030b4:	900f      	str	r0, [sp, #60]	; 0x3c
          AI_BUFFER_INIT(
 80030b6:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 80030ba:	f363 221f 	bfi	r2, r3, #8, #24
 80030be:	9210      	str	r2, [sp, #64]	; 0x40
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	9311      	str	r3, [sp, #68]	; 0x44
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1))
 80030c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
      if (obs_ctx->no_data)
 80030c8:	7d22      	ldrb	r2, [r4, #20]
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1))
 80030ca:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 80030cc:	429e      	cmp	r6, r3
 80030ce:	bf14      	ite	ne
 80030d0:	2304      	movne	r3, #4
 80030d2:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 80030d6:	b10a      	cbz	r2, 80030dc <aiOnExecNode_cb+0x15c>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 80030d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80030dc:	e9cd 3500 	strd	r3, r5, [sp]
 80030e0:	eeb0 0a48 	vmov.f32	s0, s16
 80030e4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80030e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80030ea:	2202      	movs	r2, #2
 80030ec:	f7ff ff0e 	bl	8002f0c <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7a1      	b.n	8003038 <aiOnExecNode_cb+0xb8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80030f4:	eeb0 8a68 	vmov.f32	s16, s17
 80030f8:	e7be      	b.n	8003078 <aiOnExecNode_cb+0xf8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0cb      	beq.n	8003096 <aiOnExecNode_cb+0x116>
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	2900      	cmp	r1, #0
 8003102:	d0c8      	beq.n	8003096 <aiOnExecNode_cb+0x116>
 8003104:	885b      	ldrh	r3, [r3, #2]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0c5      	beq.n	8003096 <aiOnExecNode_cb+0x116>
 800310a:	684b      	ldr	r3, [r1, #4]
 800310c:	781d      	ldrb	r5, [r3, #0]
 800310e:	e7c2      	b.n	8003096 <aiOnExecNode_cb+0x116>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003110:	461d      	mov	r5, r3
 8003112:	e7c0      	b.n	8003096 <aiOnExecNode_cb+0x116>
 8003114:	460d      	mov	r5, r1
 8003116:	e7be      	b.n	8003096 <aiOnExecNode_cb+0x116>
 8003118:	00000000 	.word	0x00000000

0800311c <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003120:	4606      	mov	r6, r0
 8003122:	b09c      	sub	sp, #112	; 0x70
 8003124:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8003126:	300c      	adds	r0, #12
 8003128:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800312c:	f7ff fec6 	bl	8002ebc <aiExecCtx>
  if (ctx)
 8003130:	4605      	mov	r5, r0
 8003132:	2800      	cmp	r0, #0
 8003134:	f000 80a9 	beq.w	800328a <aiPbCmdNNInfo+0x16e>
  resp->which_payload = respMsg_minfo_tag;
 8003138:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 800313a:	f890 7091 	ldrb.w	r7, [r0, #145]	; 0x91
 800313e:	f890 8090 	ldrb.w	r8, [r0, #144]	; 0x90
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8003142:	6880      	ldr	r0, [r0, #8]
  resp->which_payload = respMsg_minfo_tag;
 8003144:	80e3      	strh	r3, [r4, #6]
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	f104 0108 	add.w	r1, r4, #8
 800314c:	f7ff f8ee 	bl	800232c <aiPbStrCopy>
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 8003150:	2301      	movs	r3, #1
 8003152:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 8003154:	68e8      	ldr	r0, [r5, #12]
 8003156:	2240      	movs	r2, #64	; 0x40
 8003158:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800315c:	f7ff f8e6 	bl	800232c <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 8003160:	6968      	ldr	r0, [r5, #20]
 8003162:	2240      	movs	r2, #64	; 0x40
 8003164:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8003168:	f7ff f8e0 	bl	800232c <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 800316c:	69eb      	ldr	r3, [r5, #28]
  struct _encode_tensor_desc tensor_ins = {
 800316e:	484b      	ldr	r0, [pc, #300]	; (800329c <aiPbCmdNNInfo+0x180>)
 8003170:	9002      	str	r0, [sp, #8]
 8003172:	ba1b      	rev	r3, r3
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 8003174:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8003178:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  struct _encode_tensor_desc tensor_outs = {
 800317a:	9005      	str	r0, [sp, #20]
 800317c:	ba1b      	rev	r3, r3
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 800317e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003182:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003186:	f1b8 0f00 	cmp.w	r8, #0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 800318a:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 800318e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003192:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003194:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003198:	f240 4301 	movw	r3, #1025	; 0x401
 800319c:	bf08      	it	eq
 800319e:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80031a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 80031a4:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
  struct _encode_tensor_desc tensor_ins = {
 80031a8:	9203      	str	r2, [sp, #12]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80031aa:	2300      	movs	r3, #0
  resp->payload.minfo.n_inputs = nn->n_inputs;
 80031ac:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 80031b0:	429f      	cmp	r7, r3
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 80031b2:	aa02      	add	r2, sp, #8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80031b4:	6caf      	ldr	r7, [r5, #72]	; 0x48
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 80031b6:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
  struct _encode_tensor_desc tensor_ins = {
 80031ba:	a914      	add	r1, sp, #80	; 0x50
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 80031bc:	f240 4202 	movw	r2, #1026	; 0x402
 80031c0:	bf08      	it	eq
 80031c2:	2202      	moveq	r2, #2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80031c4:	e9cd 7218 	strd	r7, r2, [sp, #96]	; 0x60
  struct _encode_tensor_desc tensor_ins = {
 80031c8:	9104      	str	r1, [sp, #16]
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 80031ca:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 80031ce:	4934      	ldr	r1, [pc, #208]	; (80032a0 <aiPbCmdNNInfo+0x184>)
  struct _encode_tensor_desc tensor_outs = {
 80031d0:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 80031d2:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80031d6:	f04f 0c00 	mov.w	ip, #0
  struct _encode_tensor_desc tensor_outs = {
 80031da:	a818      	add	r0, sp, #96	; 0x60
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 80031dc:	aa05      	add	r2, sp, #20
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80031de:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 80031e2:	9317      	str	r3, [sp, #92]	; 0x5c
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 80031e4:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80031e8:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 80031ec:	931b      	str	r3, [sp, #108]	; 0x6c
  struct _encode_tensor_desc tensor_outs = {
 80031ee:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 80031f0:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 80031f4:	f8b5 705a 	ldrh.w	r7, [r5, #90]	; 0x5a
 80031f8:	2f00      	cmp	r7, #0
 80031fa:	d042      	beq.n	8003282 <aiPbCmdNNInfo+0x166>
      size_acts += nn->map_activations.buffer[i].size;
 80031fc:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 80031fe:	461a      	mov	r2, r3
      size_acts += nn->map_activations.buffer[i].size;
 8003200:	3010      	adds	r0, #16
 8003202:	f04f 0e1c 	mov.w	lr, #28
 8003206:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_activations.size; i++)
 800320a:	3201      	adds	r2, #1
      size_acts += nn->map_activations.buffer[i].size;
 800320c:	f850 c00c 	ldr.w	ip, [r0, ip]
    for (int i=0; i<nn->map_activations.size; i++)
 8003210:	42ba      	cmp	r2, r7
      size_acts += nn->map_activations.buffer[i].size;
 8003212:	4463      	add	r3, ip
    for (int i=0; i<nn->map_activations.size; i++)
 8003214:	dbf7      	blt.n	8003206 <aiPbCmdNNInfo+0xea>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003216:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <aiPbCmdNNInfo+0x188>)
  struct _encode_tensor_desc tensor_acts = {
 8003218:	4f23      	ldr	r7, [pc, #140]	; (80032a8 <aiPbCmdNNInfo+0x18c>)
 800321a:	970b      	str	r7, [sp, #44]	; 0x2c
 800321c:	a808      	add	r0, sp, #32
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800321e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 8003222:	900d      	str	r0, [sp, #52]	; 0x34
 8003224:	2201      	movs	r2, #1
  if (nn->map_weights.size) {
 8003226:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
  struct _encode_tensor_desc tensor_acts = {
 800322a:	920c      	str	r2, [sp, #48]	; 0x30
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 800322c:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003230:	2300      	movs	r3, #0
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003232:	aa0b      	add	r2, sp, #44	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003234:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003236:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 800323a:	b320      	cbz	r0, 8003286 <aiPbCmdNNInfo+0x16a>
      size_params += nn->map_weights.buffer[i].size;
 800323c:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 800323e:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 8003240:	3510      	adds	r5, #16
 8003242:	f04f 0e1c 	mov.w	lr, #28
 8003246:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_weights.size; i++)
 800324a:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 800324c:	f855 c00c 	ldr.w	ip, [r5, ip]
    for (int i=0; i<nn->map_weights.size; i++)
 8003250:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 8003252:	4463      	add	r3, ip
    for (int i=0; i<nn->map_weights.size; i++)
 8003254:	dbf7      	blt.n	8003246 <aiPbCmdNNInfo+0x12a>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <aiPbCmdNNInfo+0x190>)
 8003258:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 800325c:	2301      	movs	r3, #1
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 800325e:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  struct _encode_tensor_desc tensor_w = {
 8003262:	a80e      	add	r0, sp, #56	; 0x38
 8003264:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003266:	ab11      	add	r3, sp, #68	; 0x44
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003268:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 800326a:	9013      	str	r0, [sp, #76]	; 0x4c
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 800326c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  aiPbMgrSendResp(req, resp, state);
 8003270:	4621      	mov	r1, r4
 8003272:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 8003274:	e9cd 2710 	strd	r2, r7, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 8003278:	f7ff f8b2 	bl	80023e0 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 800327c:	b01c      	add	sp, #112	; 0x70
 800327e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size_acts = 0;
 8003282:	463b      	mov	r3, r7
 8003284:	e7c7      	b.n	8003216 <aiPbCmdNNInfo+0xfa>
  ai_size size_params = 0;
 8003286:	4603      	mov	r3, r0
 8003288:	e7e5      	b.n	8003256 <aiPbCmdNNInfo+0x13a>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800328a:	2304      	movs	r3, #4
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	4621      	mov	r1, r4
 8003292:	4630      	mov	r0, r6
 8003294:	f7ff f8f8 	bl	8002488 <aiPbMgrSendAck>
}
 8003298:	e7f0      	b.n	800327c <aiPbCmdNNInfo+0x160>
 800329a:	bf00      	nop
 800329c:	08002e15 	.word	0x08002e15
 80032a0:	08002379 	.word	0x08002379
 80032a4:	0800f161 	.word	0x0800f161
 80032a8:	08002d35 	.word	0x08002d35
 80032ac:	0800f166 	.word	0x0800f166

080032b0 <_print_debug>:
{
 80032b0:	b40e      	push	{r1, r2, r3}
 80032b2:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 80032b4:	b178      	cbz	r0, 80032d6 <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80032b6:	4c0f      	ldr	r4, [pc, #60]	; (80032f4 <_print_debug+0x44>)
 80032b8:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, fmt);
 80032ba:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80032bc:	2150      	movs	r1, #80	; 0x50
 80032be:	4620      	mov	r0, r4
  va_start(ap, fmt);
 80032c0:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80032c2:	f7ff fbef 	bl	8002aa4 <lc_vsnprint>
      _print_buffer[s] = 0;
 80032c6:	2100      	movs	r1, #0
 80032c8:	1823      	adds	r3, r4, r0
  while (s) {
 80032ca:	b948      	cbnz	r0, 80032e0 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 80032cc:	2101      	movs	r1, #1
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <_print_debug+0x44>)
 80032d0:	4608      	mov	r0, r1
 80032d2:	f7ff f8f9 	bl	80024c8 <aiPbMgrSendLogV2>
}
 80032d6:	b003      	add	sp, #12
 80032d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032dc:	b003      	add	sp, #12
 80032de:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	2a0a      	cmp	r2, #10
 80032e4:	d001      	beq.n	80032ea <_print_debug+0x3a>
 80032e6:	2a0d      	cmp	r2, #13
 80032e8:	d100      	bne.n	80032ec <_print_debug+0x3c>
      _print_buffer[s] = 0;
 80032ea:	7019      	strb	r1, [r3, #0]
    s--;
 80032ec:	3801      	subs	r0, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	e7eb      	b.n	80032ca <_print_debug+0x1a>
 80032f2:	bf00      	nop
 80032f4:	20001148 	.word	0x20001148

080032f8 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 80032f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fc:	ed2d 8b02 	vpush	{d8}
 8003300:	4605      	mov	r5, r0
 8003302:	b0a1      	sub	sp, #132	; 0x84
 8003304:	460e      	mov	r6, r1
  ai_buffer *ai_output;

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8003306:	300c      	adds	r0, #12
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	f7ff fdd6 	bl	8002ebc <aiExecCtx>
  if (!ctx) {
 8003310:	4604      	mov	r4, r0
 8003312:	b910      	cbnz	r0, 800331a <aiPbCmdNNRun+0x22>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003314:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	e098      	b.n	800344c <aiPbCmdNNRun+0x154>
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 800331a:	68ab      	ldr	r3, [r5, #8]
  net_obs_ctx.no_data = true;
 800331c:	4a9d      	ldr	r2, [pc, #628]	; (8003594 <aiPbCmdNNRun+0x29c>)
  ctx->obs_ctx = &net_obs_ctx;
 800331e:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8003322:	075f      	lsls	r7, r3, #29
  net_obs_ctx.no_data = true;
 8003324:	f04f 0101 	mov.w	r1, #1
 8003328:	7511      	strb	r1, [r2, #20]
    net_obs_ctx.is_enabled = true;
 800332a:	bf4a      	itet	mi
 800332c:	7011      	strbmi	r1, [r2, #0]
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 800332e:	f3c3 0140 	ubfxpl	r1, r3, #1, #1
    net_obs_ctx.no_data = false;
 8003332:	2100      	movmi	r1, #0
  net_obs_ctx.tcom = 0ULL;
 8003334:	f04f 0800 	mov.w	r8, #0
 8003338:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.n_cb_in  = 0;
 800333c:	f04f 0700 	mov.w	r7, #0
 8003340:	bf54      	ite	pl
 8003342:	7011      	strbpl	r1, [r2, #0]
    net_obs_ctx.no_data = false;
 8003344:	7511      	strbmi	r1, [r2, #20]
  net_obs_ctx.tcom = 0ULL;
 8003346:	e9c2 8906 	strd	r8, r9, [r2, #24]
  net_obs_ctx.tnodes = 0ULL;
 800334a:	e9c2 8908 	strd	r8, r9, [r2, #32]
  net_obs_ctx.n_cb_out = 0;
 800334e:	e9c2 7701 	strd	r7, r7, [r2, #4]
  bool first_only = req->param & EnumRunParam_P_RUN_CONF_SAME_VALUE?true:false;
 8003352:	f3c3 2240 	ubfx	r2, r3, #9, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8003356:	f3c3 2000 	ubfx	r0, r3, #8, #1
  bool first_only = req->param & EnumRunParam_P_RUN_CONF_SAME_VALUE?true:false;
 800335a:	9206      	str	r2, [sp, #24]
  bool direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 800335c:	f3c3 2280 	ubfx	r2, r3, #10, #1
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 8003360:	498d      	ldr	r1, [pc, #564]	; (8003598 <aiPbCmdNNRun+0x2a0>)
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8003362:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
  bool direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 8003366:	9205      	str	r2, [sp, #20]
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 8003368:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800336a:	f7ff ffa1 	bl	80032b0 <_print_debug>
  ai_output = ctx->report.outputs;
 800336e:	e9d4 a311 	ldrd	sl, r3, [r4, #68]	; 0x44
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8003372:	4650      	mov	r0, sl
  ai_output = ctx->report.outputs;
 8003374:	9307      	str	r3, [sp, #28]
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8003376:	f7ff fd5e 	bl	8002e36 <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 800337a:	9700      	str	r7, [sp, #0]
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 800337c:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 800337e:	2201      	movs	r2, #1
 8003380:	4631      	mov	r1, r6
 8003382:	4628      	mov	r0, r5
 8003384:	f7ff f880 	bl	8002488 <aiPbMgrSendAck>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003388:	46d0      	mov	r8, sl
 800338a:	f8b4 9040 	ldrh.w	r9, [r4, #64]	; 0x40
 800338e:	45b9      	cmp	r9, r7
 8003390:	dc2b      	bgt.n	80033ea <aiPbCmdNNRun+0xf2>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003392:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
  if (obs_ctx->is_enabled == false)
 8003396:	783b      	ldrb	r3, [r7, #0]
 8003398:	b18b      	cbz	r3, 80033be <aiPbCmdNNRun+0xc6>
  if (ctx->handle == AI_HANDLE_NULL)
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	b178      	cbz	r0, 80033be <aiPbCmdNNRun+0xc6>
  ai_mnetwork_get_private_handle(ctx->handle,
 800339e:	a90e      	add	r1, sp, #56	; 0x38
  obs_ctx->cresp = cresp;
 80033a0:	e9c7 5603 	strd	r5, r6, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 80033a4:	aa12      	add	r2, sp, #72	; 0x48
 80033a6:	f000 fb2d 	bl	8003a04 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 80033aa:	4b7c      	ldr	r3, [pc, #496]	; (800359c <aiPbCmdNNRun+0x2a4>)
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 80033ac:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80033b0:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80033b2:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80033b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80033ba:	f003 fcb3 	bl	8006d24 <ai_platform_observer_register_s>
  PB_LC_PRINT(ctx->debug, "RUN: processing\r\n");
 80033be:	4978      	ldr	r1, [pc, #480]	; (80035a0 <aiPbCmdNNRun+0x2a8>)
 80033c0:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 80033c4:	f7ff ff74 	bl	80032b0 <_print_debug>
  cyclesCounterStart();
 80033c8:	f7ff fd42 	bl	8002e50 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80033cc:	9a07      	ldr	r2, [sp, #28]
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	4651      	mov	r1, sl
 80033d2:	f000 fb06 	bl	80039e2 <ai_mnetwork_run>
  if (batch != 1) {
 80033d6:	2801      	cmp	r0, #1
 80033d8:	d073      	beq.n	80034c2 <aiPbCmdNNRun+0x1ca>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 80033da:	6820      	ldr	r0, [r4, #0]
 80033dc:	f000 fad5 	bl	800398a <ai_mnetwork_get_error>
 80033e0:	4970      	ldr	r1, [pc, #448]	; (80035a4 <aiPbCmdNNRun+0x2ac>)
 80033e2:	f7ff f921 	bl	8002628 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80033e6:	230a      	movs	r3, #10
 80033e8:	e795      	b.n	8003316 <aiPbCmdNNRun+0x1e>
    if ((i + 1) == ctx->report.n_inputs)
 80033ea:	3701      	adds	r7, #1
      state = EnumState_S_PROCESSING;
 80033ec:	454f      	cmp	r7, r9
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2302      	moveq	r3, #2
 80033f4:	ee08 3a10 	vmov	s16, r3
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 80033f8:	4640      	mov	r0, r8
 80033fa:	2300      	movs	r3, #0
 80033fc:	9312      	str	r3, [sp, #72]	; 0x48
 80033fe:	f7ff fd1a 	bl	8002e36 <_get_buffer_size>
 8003402:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003406:	9314      	str	r3, [sp, #80]	; 0x50
 8003408:	2300      	movs	r3, #0
 800340a:	9315      	str	r3, [sp, #84]	; 0x54
  if ((first_only) || (direct_write))
 800340c:	9b06      	ldr	r3, [sp, #24]
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 800340e:	9013      	str	r0, [sp, #76]	; 0x4c
  if ((first_only) || (direct_write))
 8003410:	b90b      	cbnz	r3, 8003416 <aiPbCmdNNRun+0x11e>
 8003412:	9b05      	ldr	r3, [sp, #20]
 8003414:	b183      	cbz	r3, 8003438 <aiPbCmdNNRun+0x140>
    data.size = _get_element_size(buffer);
 8003416:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 800341a:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <aiPbCmdNNRun+0x2b0>)
 800341c:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 8003420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003424:	4293      	cmp	r3, r2
 8003426:	d01b      	beq.n	8003460 <aiPbCmdNNRun+0x168>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8003428:	2001      	movs	r0, #1
 800342a:	f002 f935 	bl	8005698 <ai_buffer_get_byte_size>
  if (direct_write)
 800342e:	9b05      	ldr	r3, [sp, #20]
    data.size = _get_element_size(buffer);
 8003430:	9013      	str	r0, [sp, #76]	; 0x4c
  if (direct_write)
 8003432:	b10b      	cbz	r3, 8003438 <aiPbCmdNNRun+0x140>
    data.addr = (uintptr_t)&temp;
 8003434:	ab0e      	add	r3, sp, #56	; 0x38
 8003436:	9314      	str	r3, [sp, #80]	; 0x50
  aiPbMgrReceiveData(&data);
 8003438:	a812      	add	r0, sp, #72	; 0x48
 800343a:	f7ff f87d 	bl	8002538 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 800343e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003440:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8003444:	454b      	cmp	r3, r9
 8003446:	d00d      	beq.n	8003464 <aiPbCmdNNRun+0x16c>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003448:	2201      	movs	r2, #1
 800344a:	9200      	str	r2, [sp, #0]
 800344c:	2204      	movs	r2, #4
 800344e:	4631      	mov	r1, r6
 8003450:	4628      	mov	r0, r5
 8003452:	f7ff f819 	bl	8002488 <aiPbMgrSendAck>
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
  }

  aiObserverUnbind(ctx);
}
 8003456:	b021      	add	sp, #132	; 0x84
 8003458:	ecbd 8b02 	vpop	{d8}
 800345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 4;
 8003460:	2004      	movs	r0, #4
 8003462:	e7e4      	b.n	800342e <aiPbCmdNNRun+0x136>
  if ((first_only) && (!direct_write))/* broadcast the value */
 8003464:	9b06      	ldr	r3, [sp, #24]
 8003466:	b96b      	cbnz	r3, 8003484 <aiPbCmdNNRun+0x18c>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 8003468:	2300      	movs	r3, #0
 800346a:	ee18 2a10 	vmov	r2, s16
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	4631      	mov	r1, r6
 8003472:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003474:	4628      	mov	r0, r5
 8003476:	f7ff f807 	bl	8002488 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 800347a:	f108 081c 	add.w	r8, r8, #28
 800347e:	f7ff f80d 	bl	800249c <aiPbMgrWaitAck>
    if (res != true)
 8003482:	e782      	b.n	800338a <aiPbCmdNNRun+0x92>
  if ((first_only) && (!direct_write))/* broadcast the value */
 8003484:	9b05      	ldr	r3, [sp, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ee      	bne.n	8003468 <aiPbCmdNNRun+0x170>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 800348a:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 800348e:	f04f 0b01 	mov.w	fp, #1
      uintptr_t w_ptr = r_ptr + el_s;
 8003492:	eb01 0309 	add.w	r3, r1, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8003496:	4640      	mov	r0, r8
 8003498:	e9cd 1308 	strd	r1, r3, [sp, #32]
 800349c:	f7ff fccb 	bl	8002e36 <_get_buffer_size>
 80034a0:	fbb0 f0f9 	udiv	r0, r0, r9
 80034a4:	4583      	cmp	fp, r0
 80034a6:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
 80034aa:	d2dd      	bcs.n	8003468 <aiPbCmdNNRun+0x170>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 80034ac:	4618      	mov	r0, r3
 80034ae:	464a      	mov	r2, r9
 80034b0:	9108      	str	r1, [sp, #32]
 80034b2:	f009 f9f4 	bl	800c89e <memcpy>
 80034b6:	4603      	mov	r3, r0
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80034b8:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 80034ba:	444b      	add	r3, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80034bc:	f10b 0b01 	add.w	fp, fp, #1
 80034c0:	e7e9      	b.n	8003496 <aiPbCmdNNRun+0x19e>
  tend = cyclesCounterEnd();
 80034c2:	f7ff fcd5 	bl	8002e70 <cyclesCounterEnd>
 80034c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: processing done\r\n");
 80034ca:	4938      	ldr	r1, [pc, #224]	; (80035ac <aiPbCmdNNRun+0x2b4>)
 80034cc:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80034d0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 80035b0 <aiPbCmdNNRun+0x2b8>
  PB_LC_PRINT(ctx->debug, "RUN: processing done\r\n");
 80034d4:	f7ff feec 	bl	80032b0 <_print_debug>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 80034d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 80034dc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80034e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80034e4:	1880      	adds	r0, r0, r2
 80034e6:	eb41 0103 	adc.w	r1, r1, r3
 80034ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034ec:	18c0      	adds	r0, r0, r3
 80034ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034f0:	eb41 0103 	adc.w	r1, r1, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 80034f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 80034f8:	f7ff fb48 	bl	8002b8c <dwtCyclesToFloatMs>
 80034fc:	ab0c      	add	r3, sp, #48	; 0x30
 80034fe:	2700      	movs	r7, #0
 8003500:	9311      	str	r3, [sp, #68]	; 0x44
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8003502:	ab0e      	add	r3, sp, #56	; 0x38
 8003504:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003508:	9700      	str	r7, [sp, #0]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 800350a:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800350c:	68a3      	ldr	r3, [r4, #8]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 800350e:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8003512:	4631      	mov	r1, r6
 8003514:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8003516:	e9cd 720f 	strd	r7, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800351a:	f7ff f827 	bl	800256c <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send output tensors\r\n");
 800351e:	4925      	ldr	r1, [pc, #148]	; (80035b4 <aiPbCmdNNRun+0x2bc>)
 8003520:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 8003524:	f7ff fec4 	bl	80032b0 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003528:	f8dd 801c 	ldr.w	r8, [sp, #28]
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 800352c:	f240 2902 	movw	r9, #514	; 0x202
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003530:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8003534:	42ba      	cmp	r2, r7
 8003536:	dc0f      	bgt.n	8003558 <aiPbCmdNNRun+0x260>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003538:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (obs_ctx->is_enabled == false)
 800353c:	782b      	ldrb	r3, [r5, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d089      	beq.n	8003456 <aiPbCmdNNRun+0x15e>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8003542:	a90b      	add	r1, sp, #44	; 0x2c
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	aa12      	add	r2, sp, #72	; 0x48
 8003548:	f000 fa5c 	bl	8003a04 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 800354c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800354e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8003552:	f003 fc7d 	bl	8006e50 <ai_platform_observer_unregister_s>
  return 0;
 8003556:	e77e      	b.n	8003456 <aiPbCmdNNRun+0x15e>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8003558:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 800355a:	3701      	adds	r7, #1
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 800355c:	f013 0f08 	tst.w	r3, #8
 8003560:	bf0c      	ite	eq
 8003562:	2302      	moveq	r3, #2
 8003564:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8003566:	4297      	cmp	r7, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003568:	bf08      	it	eq
 800356a:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	e9cd 3100 	strd	r3, r1, [sp]
      state = EnumState_S_DONE;
 8003576:	bf08      	it	eq
 8003578:	2203      	moveq	r2, #3
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800357a:	4643      	mov	r3, r8
    EnumState state = EnumState_S_PROCESSING;
 800357c:	bf18      	it	ne
 800357e:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003580:	eeb0 0a48 	vmov.f32	s0, s16
 8003584:	4631      	mov	r1, r6
 8003586:	4628      	mov	r0, r5
 8003588:	f7ff fcc0 	bl	8002f0c <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800358c:	f108 081c 	add.w	r8, r8, #28
 8003590:	e7ce      	b.n	8003530 <aiPbCmdNNRun+0x238>
 8003592:	bf00      	nop
 8003594:	20001230 	.word	0x20001230
 8003598:	0800f16d 	.word	0x0800f16d
 800359c:	08002f81 	.word	0x08002f81
 80035a0:	0800f198 	.word	0x0800f198
 80035a4:	0800f1aa 	.word	0x0800f1aa
 80035a8:	000400c0 	.word	0x000400c0
 80035ac:	0800f1ba 	.word	0x0800f1ba
 80035b0:	00000000 	.word	0x00000000
 80035b4:	0800f1d1 	.word	0x0800f1d1

080035b8 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 80035b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 80035ba:	4c20      	ldr	r4, [pc, #128]	; (800363c <aiValidationInit+0x84>)
  port_dwt_reset();
 80035bc:	4e20      	ldr	r6, [pc, #128]	; (8003640 <aiValidationInit+0x88>)
 80035be:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 80035c2:	f7ff fa5d 	bl	8002a80 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80035c6:	2300      	movs	r3, #0
 80035c8:	f104 0191 	add.w	r1, r4, #145	; 0x91
 80035cc:	2207      	movs	r2, #7
 80035ce:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 80035d2:	f7ff fa55 	bl	8002a80 <lc_print>
 80035d6:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 80035d8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80035dc:	f7ff fa50 	bl	8002a80 <lc_print>

  systemSettingLog();
 80035e0:	f7ff fb26 	bl	8002c30 <systemSettingLog>

  crcIpInit();
 80035e4:	f000 f924 	bl	8003830 <port_hal_crc_ip_init_imp>
  port_dwt_init();
 80035e8:	f000 f934 	bl	8003854 <port_dwt_init_imp>
  port_dwt_reset();
 80035ec:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 80035ee:	2064      	movs	r0, #100	; 0x64
 80035f0:	f7fd ffcc 	bl	800158c <HAL_Delay>
  st = port_dwt_get_cycles();
 80035f4:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 80035f6:	466a      	mov	r2, sp
 80035f8:	2664      	movs	r6, #100	; 0x64
 80035fa:	4629      	mov	r1, r5
 80035fc:	fbb0 f0f6 	udiv	r0, r0, r6
 8003600:	f7ff fa88 	bl	8002b14 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8003604:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8003608:	9a03      	ldr	r2, [sp, #12]
 800360a:	fb06 3101 	mla	r1, r6, r1, r3
 800360e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8003612:	f7ff fa35 	bl	8002a80 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8003616:	466a      	mov	r2, sp
 8003618:	2100      	movs	r1, #0
 800361a:	f04f 30ff 	mov.w	r0, #4294967295
 800361e:	f7ff fa79 	bl	8002b14 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8003622:	9a01      	ldr	r2, [sp, #4]
 8003624:	9b02      	ldr	r3, [sp, #8]
 8003626:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800362a:	fb01 3302 	mla	r3, r1, r2, r3
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <aiValidationInit+0x8c>)
 8003630:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8003632:	f000 f90f 	bl	8003854 <port_dwt_init_imp>
  cyclesCounterInit();

  return 0;
}
 8003636:	4628      	mov	r0, r5
 8003638:	b004      	add	sp, #16
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	0800f161 	.word	0x0800f161
 8003640:	e0001000 	.word	0xe0001000
 8003644:	20001120 	.word	0x20001120

08003648 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800364c:	4c66      	ldr	r4, [pc, #408]	; (80037e8 <aiValidationProcess+0x1a0>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800364e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8003824 <aiValidationProcess+0x1dc>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003652:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8003828 <aiValidationProcess+0x1e0>
  aiPlatformVersion();
 8003656:	f7fe ffd1 	bl	80025fc <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800365a:	2700      	movs	r7, #0
  LC_PRINT("Discovering the network(s)...\r\n");
 800365c:	4863      	ldr	r0, [pc, #396]	; (80037ec <aiValidationProcess+0x1a4>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800365e:	f844 7b08 	str.w	r7, [r4], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8003662:	f7ff fa0d 	bl	8002a80 <lc_print>
  int res = -1;
 8003666:	f04f 35ff 	mov.w	r5, #4294967295
    nn_name = ai_mnetwork_find(NULL, idx);
 800366a:	4639      	mov	r1, r7
 800366c:	2000      	movs	r0, #0
 800366e:	f000 f931 	bl	80038d4 <ai_mnetwork_find>
    if (nn_name) {
 8003672:	4606      	mov	r6, r0
 8003674:	b1b0      	cbz	r0, 80036a4 <aiValidationProcess+0x5c>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003676:	4601      	mov	r1, r0
 8003678:	4640      	mov	r0, r8
 800367a:	f7ff fa01 	bl	8002a80 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 800367e:	485c      	ldr	r0, [pc, #368]	; (80037f0 <aiValidationProcess+0x1a8>)
 8003680:	4631      	mov	r1, r6
 8003682:	f7ff f9fd 	bl	8002a80 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003686:	2200      	movs	r2, #0
 8003688:	f1a4 0108 	sub.w	r1, r4, #8
 800368c:	4630      	mov	r0, r6
 800368e:	f000 f92f 	bl	80038f0 <ai_mnetwork_create>
  if (err.type) {
 8003692:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8003696:	d016      	beq.n	80036c6 <aiValidationProcess+0x7e>
    aiLogErr(err, "ai_mnetwork_create");
 8003698:	4956      	ldr	r1, [pc, #344]	; (80037f4 <aiValidationProcess+0x1ac>)
 800369a:	f7fe ffc5 	bl	8002628 <aiLogErr>
        nn_name = NULL;
 800369e:	2600      	movs	r6, #0
    return -1;
 80036a0:	f04f 35ff 	mov.w	r5, #4294967295
    idx++;
 80036a4:	3701      	adds	r7, #1
  } while (nn_name);
 80036a6:	3498      	adds	r4, #152	; 0x98
 80036a8:	2e00      	cmp	r6, #0
 80036aa:	d1de      	bne.n	800366a <aiValidationProcess+0x22>
  int r;

  r = aiInit();
  if (r) {
 80036ac:	2d00      	cmp	r5, #0
 80036ae:	d077      	beq.n	80037a0 <aiValidationProcess+0x158>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 80036b0:	4851      	ldr	r0, [pc, #324]	; (80037f8 <aiValidationProcess+0x1b0>)
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7ff f9e4 	bl	8002a80 <lc_print>
    port_hal_delay(2000);
 80036b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036bc:	f7fd ff66 	bl	800158c <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 80036c0:	4628      	mov	r0, r5
 80036c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LC_PRINT("Initializing the network\r\n");
 80036c6:	484d      	ldr	r0, [pc, #308]	; (80037fc <aiValidationProcess+0x1b4>)
 80036c8:	f7ff f9da 	bl	8002a80 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80036cc:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80036d0:	4621      	mov	r1, r4
 80036d2:	f000 f94f 	bl	8003974 <ai_mnetwork_get_report>
 80036d6:	4682      	mov	sl, r0
    err = ai_mnetwork_get_error(ctx->handle);
 80036d8:	f854 0c08 	ldr.w	r0, [r4, #-8]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80036dc:	f1ba 0f00 	cmp.w	sl, #0
 80036e0:	d10e      	bne.n	8003700 <aiValidationProcess+0xb8>
    err = ai_mnetwork_get_error(ctx->handle);
 80036e2:	f000 f952 	bl	800398a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 80036e6:	4946      	ldr	r1, [pc, #280]	; (8003800 <aiValidationProcess+0x1b8>)
 80036e8:	f7fe ff9e 	bl	8002628 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80036ec:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80036f0:	f000 f928 	bl	8003944 <ai_mnetwork_destroy>
        nn_name = NULL;
 80036f4:	4656      	mov	r6, sl
    ctx->handle = AI_HANDLE_NULL;
 80036f6:	f844 ac08 	str.w	sl, [r4, #-8]
    return -2;
 80036fa:	f06f 0501 	mvn.w	r5, #1
 80036fe:	e7d1      	b.n	80036a4 <aiValidationProcess+0x5c>
  if (!ai_mnetwork_init(ctx->handle)) {
 8003700:	f000 f950 	bl	80039a4 <ai_mnetwork_init>
 8003704:	4682      	mov	sl, r0
 8003706:	b980      	cbnz	r0, 800372a <aiValidationProcess+0xe2>
    err = ai_mnetwork_get_error(ctx->handle);
 8003708:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800370c:	f000 f93d 	bl	800398a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003710:	493c      	ldr	r1, [pc, #240]	; (8003804 <aiValidationProcess+0x1bc>)
 8003712:	f7fe ff89 	bl	8002628 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003716:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800371a:	f000 f913 	bl	8003944 <ai_mnetwork_destroy>
        nn_name = NULL;
 800371e:	4656      	mov	r6, sl
    ctx->handle = AI_HANDLE_NULL;
 8003720:	f844 ac08 	str.w	sl, [r4, #-8]
    return -4;
 8003724:	f06f 0503 	mvn.w	r5, #3
 8003728:	e7bc      	b.n	80036a4 <aiValidationProcess+0x5c>
  if (ai_mnetwork_get_report(ctx->handle,
 800372a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800372e:	4621      	mov	r1, r4
 8003730:	f000 f920 	bl	8003974 <ai_mnetwork_get_report>
 8003734:	4682      	mov	sl, r0
 8003736:	b1b0      	cbz	r0, 8003766 <aiValidationProcess+0x11e>
    aiPrintNetworkInfo(&ctx->report);
 8003738:	4620      	mov	r0, r4
 800373a:	f7ff f883 	bl	8002844 <aiPrintNetworkInfo>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 800373e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800382c <aiValidationProcess+0x1e4>
  ctx->inputs_in_activations = false;
 8003742:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
  ctx->outputs_in_activations = false;
 8003746:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800374a:	462b      	mov	r3, r5
    if (!ctx->report.inputs[i].data)
 800374c:	201c      	movs	r0, #28
      ctx->inputs_in_activations = true;
 800374e:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003750:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8003752:	4293      	cmp	r3, r2
 8003754:	db0a      	blt.n	800376c <aiValidationProcess+0x124>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003756:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8003758:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 800375a:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800375c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800375e:	4293      	cmp	r3, r2
 8003760:	db11      	blt.n	8003786 <aiValidationProcess+0x13e>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8003762:	2500      	movs	r5, #0
 8003764:	e79e      	b.n	80036a4 <aiValidationProcess+0x5c>
    err = ai_mnetwork_get_error(ctx->handle);
 8003766:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800376a:	e7ba      	b.n	80036e2 <aiValidationProcess+0x9a>
    if (!ctx->report.inputs[i].data)
 800376c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800376e:	fb00 2203 	mla	r2, r0, r3, r2
 8003772:	6851      	ldr	r1, [r2, #4]
 8003774:	b921      	cbnz	r1, 8003780 <aiValidationProcess+0x138>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003776:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 800377a:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800377c:	3301      	adds	r3, #1
 800377e:	e7e7      	b.n	8003750 <aiValidationProcess+0x108>
      ctx->inputs_in_activations = true;
 8003780:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 8003784:	e7fa      	b.n	800377c <aiValidationProcess+0x134>
    if (!ctx->report.outputs[i].data)
 8003786:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003788:	fb00 2203 	mla	r2, r0, r3, r2
 800378c:	6851      	ldr	r1, [r2, #4]
 800378e:	b921      	cbnz	r1, 800379a <aiValidationProcess+0x152>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003790:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8003794:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003796:	3301      	adds	r3, #1
 8003798:	e7e0      	b.n	800375c <aiValidationProcess+0x114>
      ctx->outputs_in_activations = true;
 800379a:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 800379e:	e7fa      	b.n	8003796 <aiValidationProcess+0x14e>
    LC_PRINT("\r\n");
 80037a0:	4819      	ldr	r0, [pc, #100]	; (8003808 <aiValidationProcess+0x1c0>)
 80037a2:	f7ff f96d 	bl	8002a80 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80037a6:	4819      	ldr	r0, [pc, #100]	; (800380c <aiValidationProcess+0x1c4>)
 80037a8:	f7ff f96a 	bl	8002a80 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 80037ac:	4818      	ldr	r0, [pc, #96]	; (8003810 <aiValidationProcess+0x1c8>)
 80037ae:	f7ff f967 	bl	8002a80 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80037b2:	4816      	ldr	r0, [pc, #88]	; (800380c <aiValidationProcess+0x1c4>)
 80037b4:	f7ff f964 	bl	8002a80 <lc_print>
    LC_PRINT("\r\n");
 80037b8:	4813      	ldr	r0, [pc, #76]	; (8003808 <aiValidationProcess+0x1c0>)
 80037ba:	f7ff f961 	bl	8002a80 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 80037be:	4815      	ldr	r0, [pc, #84]	; (8003814 <aiValidationProcess+0x1cc>)
 80037c0:	f7ff f95e 	bl	8002a80 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 80037c4:	4814      	ldr	r0, [pc, #80]	; (8003818 <aiValidationProcess+0x1d0>)
 80037c6:	f7ff f95b 	bl	8002a80 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 80037ca:	4814      	ldr	r0, [pc, #80]	; (800381c <aiValidationProcess+0x1d4>)
 80037cc:	462a      	mov	r2, r5
 80037ce:	2103      	movs	r1, #3
 80037d0:	f7ff f956 	bl	8002a80 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 80037d4:	4812      	ldr	r0, [pc, #72]	; (8003820 <aiValidationProcess+0x1d8>)
 80037d6:	f7fe fd6f 	bl	80022b8 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 80037da:	f7fe fe13 	bl	8002404 <aiPbMgrWaitAndProcess>
  } while (r==0);
 80037de:	4605      	mov	r5, r0
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d0fa      	beq.n	80037da <aiValidationProcess+0x192>
 80037e4:	e76c      	b.n	80036c0 <aiValidationProcess+0x78>
 80037e6:	bf00      	nop
 80037e8:	20001198 	.word	0x20001198
 80037ec:	0800f247 	.word	0x0800f247
 80037f0:	0800f27e 	.word	0x0800f27e
 80037f4:	0800f29c 	.word	0x0800f29c
 80037f8:	0800f2f0 	.word	0x0800f2f0
 80037fc:	0800f2af 	.word	0x0800f2af
 8003800:	0800f2ca 	.word	0x0800f2ca
 8003804:	0800f2df 	.word	0x0800f2df
 8003808:	0800f306 	.word	0x0800f306
 800380c:	0800f309 	.word	0x0800f309
 8003810:	0800f337 	.word	0x0800f337
 8003814:	0800f365 	.word	0x0800f365
 8003818:	0800f3ab 	.word	0x0800f3ab
 800381c:	0800f3d9 	.word	0x0800f3d9
 8003820:	20000010 	.word	0x20000010
 8003824:	0800f267 	.word	0x0800f267
 8003828:	20000054 	.word	0x20000054
 800382c:	20000050 	.word	0x20000050

08003830 <port_hal_crc_ip_init_imp>:

#if !defined(NO_PORT_CRC_IP_INIT_IMP)
#if defined(HAS_CRC_IP) && HAS_CRC_IP == 1

void port_hal_crc_ip_init_imp(void)
{
 8003830:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <port_hal_crc_ip_init_imp+0x20>)
 8003838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	9b01      	ldr	r3, [sp, #4]
#endif
}
 800384a:	b002      	add	sp, #8
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003854:	4a07      	ldr	r2, [pc, #28]	; (8003874 <port_dwt_init_imp+0x20>)
 8003856:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <port_dwt_init_imp+0x24>)
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00
 8003878:	e0001000 	.word	0xe0001000

0800387c <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <ai_mnetwork_handle+0x18>)
 800387e:	b120      	cbz	r0, 800388a <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003880:	4298      	cmp	r0, r3
 8003882:	bf0c      	ite	eq
 8003884:	4618      	moveq	r0, r3
 8003886:	2000      	movne	r0, #0
 8003888:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800388a:	681a      	ldr	r2, [r3, #0]
            return inst;
 800388c:	2a00      	cmp	r2, #0
 800388e:	bf08      	it	eq
 8003890:	4618      	moveq	r0, r3
}
 8003892:	4770      	bx	lr
 8003894:	20001278 	.word	0x20001278

08003898 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003898:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800389a:	4604      	mov	r4, r0
 800389c:	b160      	cbz	r0, 80038b8 <ai_mnetwork_is_valid.constprop.0+0x20>
 800389e:	f7fc fce7 	bl	8000270 <strlen>
 80038a2:	2807      	cmp	r0, #7
 80038a4:	4602      	mov	r2, r0
 80038a6:	d107      	bne.n	80038b8 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 80038a8:	4804      	ldr	r0, [pc, #16]	; (80038bc <ai_mnetwork_is_valid.constprop.0+0x24>)
 80038aa:	4621      	mov	r1, r4
 80038ac:	f008 ff5d 	bl	800c76a <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 80038b0:	fab0 f080 	clz	r0, r0
 80038b4:	0940      	lsrs	r0, r0, #5
}
 80038b6:	bd10      	pop	{r4, pc}
    return false;
 80038b8:	2000      	movs	r0, #0
 80038ba:	e7fc      	b.n	80038b6 <ai_mnetwork_is_valid.constprop.0+0x1e>
 80038bc:	0800f5e0 	.word	0x0800f5e0

080038c0 <MX_X_CUBE_AI_Init>:
{
 80038c0:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 80038c2:	f7fd fd31 	bl	8001328 <MX_USART3_UART_Init>
}
 80038c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 80038ca:	f7ff be75 	b.w	80035b8 <aiValidationInit>

080038ce <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 80038ce:	f7ff bebb 	b.w	8003648 <aiValidationProcess>
	...

080038d4 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80038d4:	b510      	push	{r4, lr}
 80038d6:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80038d8:	f7ff ffde 	bl	8003898 <ai_mnetwork_is_valid.constprop.0>
 80038dc:	b920      	cbnz	r0, 80038e8 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 80038de:	2c00      	cmp	r4, #0
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <ai_mnetwork_find+0x18>)
 80038e2:	bf18      	it	ne
 80038e4:	2000      	movne	r0, #0
}
 80038e6:	bd10      	pop	{r4, pc}
            return entry->name;
 80038e8:	4800      	ldr	r0, [pc, #0]	; (80038ec <ai_mnetwork_find+0x18>)
 80038ea:	e7fc      	b.n	80038e6 <ai_mnetwork_find+0x12>
 80038ec:	0800f5e0 	.word	0x0800f5e0

080038f0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80038f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038f2:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80038f4:	2000      	movs	r0, #0
{
 80038f6:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80038f8:	f7ff ffc0 	bl	800387c <ai_mnetwork_handle>
{
 80038fc:	460d      	mov	r5, r1

    if (!inst) {
 80038fe:	4604      	mov	r4, r0
 8003900:	b1e0      	cbz	r0, 800393c <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003902:	4630      	mov	r0, r6
 8003904:	f7ff ffc8 	bl	8003898 <ai_mnetwork_is_valid.constprop.0>
 8003908:	9901      	ldr	r1, [sp, #4]
 800390a:	b910      	cbnz	r0, 8003912 <ai_mnetwork_create+0x22>
 800390c:	2214      	movs	r2, #20
 800390e:	2310      	movs	r3, #16
 8003910:	e00d      	b.n	800392e <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003912:	4628      	mov	r0, r5
 8003914:	f000 fbc8 	bl	80040a8 <ai_network_create>
 8003918:	b2c2      	uxtb	r2, r0
 800391a:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800391e:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003922:	d104      	bne.n	800392e <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8003924:	4906      	ldr	r1, [pc, #24]	; (8003940 <ai_mnetwork_create+0x50>)
 8003926:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003928:	6829      	ldr	r1, [r5, #0]
 800392a:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 800392c:	602c      	str	r4, [r5, #0]
        return err;
 800392e:	2000      	movs	r0, #0
 8003930:	f362 0007 	bfi	r0, r2, #0, #8
 8003934:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003938:	b002      	add	sp, #8
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	2231      	movs	r2, #49	; 0x31
 800393e:	e7e6      	b.n	800390e <ai_mnetwork_create+0x1e>
 8003940:	0800f5e8 	.word	0x0800f5e8

08003944 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003948:	f7ff ff98 	bl	800387c <ai_mnetwork_handle>
    if (inn) {
 800394c:	4605      	mov	r5, r0
 800394e:	b160      	cbz	r0, 800396a <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003950:	6803      	ldr	r3, [r0, #0]
 8003952:	6840      	ldr	r0, [r0, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003958:	686b      	ldr	r3, [r5, #4]
 800395a:	4283      	cmp	r3, r0
 800395c:	d005      	beq.n	800396a <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <ai_mnetwork_destroy+0x2c>)
 8003960:	429d      	cmp	r5, r3
 8003962:	f04f 0400 	mov.w	r4, #0
 8003966:	d100      	bne.n	800396a <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8003968:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 800396a:	4620      	mov	r0, r4
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	20001278 	.word	0x20001278

08003974 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003974:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003976:	f7ff ff81 	bl	800387c <ai_mnetwork_handle>
    if (inn)
 800397a:	b128      	cbz	r0, 8003988 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 800397c:	6802      	ldr	r2, [r0, #0]
 800397e:	6840      	ldr	r0, [r0, #4]
 8003980:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003986:	4710      	bx	r2
}
 8003988:	bd10      	pop	{r4, pc}

0800398a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800398a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800398c:	f7ff ff76 	bl	800387c <ai_mnetwork_handle>
    if (inn)
 8003990:	b128      	cbz	r0, 800399e <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003992:	6803      	ldr	r3, [r0, #0]
 8003994:	6840      	ldr	r0, [r0, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 800399c:	4718      	bx	r3
}
 800399e:	f241 0014 	movw	r0, #4116	; 0x1014
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 80039a4:	b530      	push	{r4, r5, lr}
 80039a6:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80039a8:	f7ff ff68 	bl	800387c <ai_mnetwork_handle>
    if (inn) {
 80039ac:	4604      	mov	r4, r0
 80039ae:	b168      	cbz	r0, 80039cc <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80039b0:	6803      	ldr	r3, [r0, #0]
 80039b2:	4668      	mov	r0, sp
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80039b8:	2500      	movs	r5, #0
 80039ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80039be:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80039c0:	42aa      	cmp	r2, r5
 80039c2:	dc05      	bgt.n	80039d0 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	6860      	ldr	r0, [r4, #4]
 80039c8:	4669      	mov	r1, sp
 80039ca:	4798      	blx	r3
    }
    else
        return false;
}
 80039cc:	b00f      	add	sp, #60	; 0x3c
 80039ce:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	4629      	mov	r1, r5
 80039d4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80039d8:	a803      	add	r0, sp, #12
 80039da:	f001 fe6f 	bl	80056bc <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 80039de:	3501      	adds	r5, #1
 80039e0:	e7eb      	b.n	80039ba <ai_mnetwork_init+0x16>

080039e2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 80039e2:	b513      	push	{r0, r1, r4, lr}
 80039e4:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80039e6:	f7ff ff49 	bl	800387c <ai_mnetwork_handle>
    if (inn)
 80039ea:	4603      	mov	r3, r0
 80039ec:	b140      	cbz	r0, 8003a00 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 80039ee:	6800      	ldr	r0, [r0, #0]
 80039f0:	9a01      	ldr	r2, [sp, #4]
 80039f2:	6a04      	ldr	r4, [r0, #32]
 80039f4:	6858      	ldr	r0, [r3, #4]
 80039f6:	4623      	mov	r3, r4
    else
        return 0;
}
 80039f8:	b002      	add	sp, #8
 80039fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80039fe:	4718      	bx	r3
}
 8003a00:	b002      	add	sp, #8
 8003a02:	bd10      	pop	{r4, pc}

08003a04 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003a08:	f7ff ff38 	bl	800387c <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8003a0c:	b188      	cbz	r0, 8003a32 <ai_mnetwork_get_private_handle+0x2e>
 8003a0e:	b181      	cbz	r1, 8003a32 <ai_mnetwork_get_private_handle+0x2e>
 8003a10:	b17d      	cbz	r5, 8003a32 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8003a12:	6843      	ldr	r3, [r0, #4]
 8003a14:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8003a16:	f100 0408 	add.w	r4, r0, #8
 8003a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a2a:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8003a2e:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8003a30:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8003a32:	f04f 30ff 	mov.w	r0, #4294967295
 8003a36:	e7fb      	b.n	8003a30 <ai_mnetwork_get_private_handle+0x2c>

08003a38 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8003a3c:	6896      	ldr	r6, [r2, #8]
{
 8003a3e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8003a40:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003a42:	f016 0304 	ands.w	r3, r6, #4
{
 8003a46:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8003a48:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003a4c:	d028      	beq.n	8003aa0 <_write_number+0x68>
    if ((int64_t)number < 0) {
 8003a4e:	42a9      	cmp	r1, r5
 8003a50:	da07      	bge.n	8003a62 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8003a52:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8003a54:	4240      	negs	r0, r0
      specifier->width -= 1;
 8003a56:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8003a5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8003a5e:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8003a60:	252d      	movs	r5, #45	; 0x2d
 8003a62:	f016 0f08 	tst.w	r6, #8
 8003a66:	bf14      	ite	ne
 8003a68:	f04f 0841 	movne.w	r8, #65	; 0x41
 8003a6c:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8003a70:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003a74:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8003a76:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003a7a:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8003a7e:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8003a82:	f1ba 0f00 	cmp.w	sl, #0
 8003a86:	d033      	beq.n	8003af0 <_write_number+0xb8>
      chr = number & 0x0F;
 8003a88:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8003a8c:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003a8e:	2b09      	cmp	r3, #9
      t = number >> 4;
 8003a90:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8003a94:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003a98:	d906      	bls.n	8003aa8 <_write_number+0x70>
 8003a9a:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e004      	b.n	8003aaa <_write_number+0x72>
  char sign_neg = 0;
 8003aa0:	461d      	mov	r5, r3
 8003aa2:	e7de      	b.n	8003a62 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8003aa4:	4617      	mov	r7, r2
 8003aa6:	e7ea      	b.n	8003a7e <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003aa8:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8003aaa:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8003aae:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8003ab2:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8003ab6:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8003aba:	d1f3      	bne.n	8003aa4 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8003abc:	f006 0101 	and.w	r1, r6, #1
 8003ac0:	b155      	cbz	r5, 8003ad8 <_write_number+0xa0>
 8003ac2:	b949      	cbnz	r1, 8003ad8 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8003ac4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8003ac8:	eb0d 0203 	add.w	r2, sp, r3
 8003acc:	232d      	movs	r3, #45	; 0x2d
 8003ace:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 8003ad2:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8003ad6:	1eba      	subs	r2, r7, #2
 8003ad8:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	bf14      	ite	ne
 8003ade:	2130      	movne	r1, #48	; 0x30
 8003ae0:	2120      	moveq	r1, #32
 8003ae2:	f006 0602 	and.w	r6, r6, #2
 8003ae6:	455b      	cmp	r3, fp
 8003ae8:	dd13      	ble.n	8003b12 <_write_number+0xda>
 8003aea:	b166      	cbz	r6, 8003b06 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003aec:	b9a5      	cbnz	r5, 8003b18 <_write_number+0xe0>
 8003aee:	e01c      	b.n	8003b2a <_write_number+0xf2>
      t = number / 10;
 8003af0:	220a      	movs	r2, #10
 8003af2:	2300      	movs	r3, #0
 8003af4:	f7fd f966 	bl	8000dc4 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8003af8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8003afc:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003b00:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003b04:	e7ca      	b.n	8003a9c <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8003b06:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8003b0a:	f10b 0b01 	add.w	fp, fp, #1
 8003b0e:	3a01      	subs	r2, #1
 8003b10:	e7e9      	b.n	8003ae6 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003b12:	b155      	cbz	r5, 8003b2a <_write_number+0xf2>
 8003b14:	455b      	cmp	r3, fp
 8003b16:	d108      	bne.n	8003b2a <_write_number+0xf2>
    buf[idx--] = sign_neg;
 8003b18:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8003b1c:	446b      	add	r3, sp
 8003b1e:	212d      	movs	r1, #45	; 0x2d
 8003b20:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 8003b24:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8003b28:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8003b2a:	eb0d 0602 	add.w	r6, sp, r2
 8003b2e:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8003b30:	68e3      	ldr	r3, [r4, #12]
 8003b32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b36:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 8003b38:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8003b3a:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8003b3c:	45ab      	cmp	fp, r5
 8003b3e:	d1f7      	bne.n	8003b30 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8003b40:	68a3      	ldr	r3, [r4, #8]
 8003b42:	079b      	lsls	r3, r3, #30
 8003b44:	d408      	bmi.n	8003b58 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8003b46:	4628      	mov	r0, r5
 8003b48:	b011      	add	sp, #68	; 0x44
 8003b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8003b4e:	68e3      	ldr	r3, [r4, #12]
 8003b50:	6920      	ldr	r0, [r4, #16]
 8003b52:	2120      	movs	r1, #32
 8003b54:	4798      	blx	r3
 8003b56:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	42ab      	cmp	r3, r5
 8003b5c:	dcf7      	bgt.n	8003b4e <_write_number+0x116>
 8003b5e:	e7f2      	b.n	8003b46 <_write_number+0x10e>

08003b60 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	4682      	mov	sl, r0
 8003b66:	b09d      	sub	sp, #116	; 0x74
 8003b68:	4688      	mov	r8, r1
 8003b6a:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8003b6c:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 8003b70:	4613      	mov	r3, r2
 8003b72:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003b76:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8003b78:	b919      	cbnz	r1, 8003b82 <vlc_print+0x22>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8003b7a:	4658      	mov	r0, fp
 8003b7c:	b01d      	add	sp, #116	; 0x74
 8003b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8003b82:	290a      	cmp	r1, #10
 8003b84:	d104      	bne.n	8003b90 <vlc_print+0x30>
      putc_fct(user, c);
 8003b86:	4640      	mov	r0, r8
 8003b88:	47d0      	blx	sl
      count++;
 8003b8a:	f10b 0b01 	add.w	fp, fp, #1
 8003b8e:	e0fb      	b.n	8003d88 <vlc_print+0x228>
    else if (c == '%')
 8003b90:	2925      	cmp	r1, #37	; 0x25
 8003b92:	d1f8      	bne.n	8003b86 <vlc_print+0x26>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8003b94:	2300      	movs	r3, #0
 8003b96:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003b9a:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 8003b9e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003ba2:	461f      	mov	r7, r3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	461e      	mov	r6, r3
      bool long_type = false;
 8003bac:	469c      	mov	ip, r3
      bool has_precision = false;
 8003bae:	469e      	mov	lr, r3
  return *(*fmtP)++;
 8003bb0:	9904      	ldr	r1, [sp, #16]
 8003bb2:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003bb6:	9104      	str	r1, [sp, #16]
        if (!c)
 8003bb8:	b32d      	cbz	r5, 8003c06 <vlc_print+0xa6>
        else if (c == '0')
 8003bba:	2d39      	cmp	r5, #57	; 0x39
 8003bbc:	d814      	bhi.n	8003be8 <vlc_print+0x88>
 8003bbe:	2d2c      	cmp	r5, #44	; 0x2c
 8003bc0:	d91e      	bls.n	8003c00 <vlc_print+0xa0>
 8003bc2:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 8003bc6:	290c      	cmp	r1, #12
 8003bc8:	d811      	bhi.n	8003bee <vlc_print+0x8e>
 8003bca:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003bce:	0044      	.short	0x0044
 8003bd0:	001001ff 	.word	0x001001ff
 8003bd4:	00470030 	.word	0x00470030
 8003bd8:	00470047 	.word	0x00470047
 8003bdc:	00470047 	.word	0x00470047
 8003be0:	00470047 	.word	0x00470047
 8003be4:	00470047 	.word	0x00470047
 8003be8:	2d6c      	cmp	r5, #108	; 0x6c
 8003bea:	f000 8202 	beq.w	8003ff2 <vlc_print+0x492>
          switch(c)
 8003bee:	2d78      	cmp	r5, #120	; 0x78
 8003bf0:	d809      	bhi.n	8003c06 <vlc_print+0xa6>
 8003bf2:	2d62      	cmp	r5, #98	; 0x62
 8003bf4:	d83d      	bhi.n	8003c72 <vlc_print+0x112>
 8003bf6:	2d46      	cmp	r5, #70	; 0x46
 8003bf8:	f000 810c 	beq.w	8003e14 <vlc_print+0x2b4>
 8003bfc:	2d58      	cmp	r5, #88	; 0x58
 8003bfe:	d06b      	beq.n	8003cd8 <vlc_print+0x178>
 8003c00:	2d25      	cmp	r5, #37	; 0x25
 8003c02:	f000 8088 	beq.w	8003d16 <vlc_print+0x1b6>
 8003c06:	b103      	cbz	r3, 8003c0a <vlc_print+0xaa>
 8003c08:	9709      	str	r7, [sp, #36]	; 0x24
 8003c0a:	b100      	cbz	r0, 8003c0e <vlc_print+0xae>
 8003c0c:	9208      	str	r2, [sp, #32]
 8003c0e:	9b00      	ldr	r3, [sp, #0]
 8003c10:	b103      	cbz	r3, 8003c14 <vlc_print+0xb4>
 8003c12:	9607      	str	r6, [sp, #28]
        putc_fct(user, '<');
 8003c14:	213c      	movs	r1, #60	; 0x3c
 8003c16:	4640      	mov	r0, r8
 8003c18:	47d0      	blx	sl
        putc_fct(user, '!');
 8003c1a:	2121      	movs	r1, #33	; 0x21
 8003c1c:	4640      	mov	r0, r8
 8003c1e:	47d0      	blx	sl
        putc_fct(user, '>');
 8003c20:	213e      	movs	r1, #62	; 0x3e
 8003c22:	4640      	mov	r0, r8
 8003c24:	47d0      	blx	sl
        va_arg(vl, signed long);
 8003c26:	3404      	adds	r4, #4
        count += 3;
 8003c28:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 8003c2c:	e0ac      	b.n	8003d88 <vlc_print+0x228>
          if (!specifier.width && !specifier.precision) {
 8003c2e:	ea56 0502 	orrs.w	r5, r6, r2
 8003c32:	d105      	bne.n	8003c40 <vlc_print+0xe0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8003c34:	f047 0701 	orr.w	r7, r7, #1
 8003c38:	462a      	mov	r2, r5
 8003c3a:	462e      	mov	r6, r5
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e7b7      	b.n	8003bb0 <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003c40:	210a      	movs	r1, #10
          } else if (has_precision) {
 8003c42:	f1be 0f00 	cmp.w	lr, #0
 8003c46:	d002      	beq.n	8003c4e <vlc_print+0xee>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003c48:	434a      	muls	r2, r1
 8003c4a:	4670      	mov	r0, lr
 8003c4c:	e7b0      	b.n	8003bb0 <vlc_print+0x50>
            specifier.width = specifier.width * 10 + (c - '0');
 8003c4e:	434e      	muls	r6, r1
            specifier.width = specifier.width * 10 + (c - '0');
 8003c50:	2101      	movs	r1, #1
 8003c52:	9100      	str	r1, [sp, #0]
 8003c54:	e7ac      	b.n	8003bb0 <vlc_print+0x50>
          specifier.flags |= FLAG_NEG_PAD;
 8003c56:	f047 0702 	orr.w	r7, r7, #2
 8003c5a:	e7ef      	b.n	8003c3c <vlc_print+0xdc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003c5c:	3d30      	subs	r5, #48	; 0x30
 8003c5e:	210a      	movs	r1, #10
          if (has_precision) {
 8003c60:	f1be 0f00 	cmp.w	lr, #0
 8003c64:	d002      	beq.n	8003c6c <vlc_print+0x10c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003c66:	fb01 5202 	mla	r2, r1, r2, r5
 8003c6a:	e7ee      	b.n	8003c4a <vlc_print+0xea>
            specifier.width = specifier.width * 10 + (c - '0');
 8003c6c:	fb01 5606 	mla	r6, r1, r6, r5
 8003c70:	e7ee      	b.n	8003c50 <vlc_print+0xf0>
          switch(c)
 8003c72:	3d63      	subs	r5, #99	; 0x63
 8003c74:	2d15      	cmp	r5, #21
 8003c76:	d8c6      	bhi.n	8003c06 <vlc_print+0xa6>
 8003c78:	f20f 0e04 	addw	lr, pc, #4
 8003c7c:	f85e f025 	ldr.w	pc, [lr, r5, lsl #2]
 8003c80:	08003d29 	.word	0x08003d29
 8003c84:	08003ddd 	.word	0x08003ddd
 8003c88:	08003c07 	.word	0x08003c07
 8003c8c:	08003e15 	.word	0x08003e15
 8003c90:	08003c07 	.word	0x08003c07
 8003c94:	08003c07 	.word	0x08003c07
 8003c98:	08003ddd 	.word	0x08003ddd
 8003c9c:	08003c07 	.word	0x08003c07
 8003ca0:	08003c07 	.word	0x08003c07
 8003ca4:	08003c07 	.word	0x08003c07
 8003ca8:	08003c07 	.word	0x08003c07
 8003cac:	08003c07 	.word	0x08003c07
 8003cb0:	08003c07 	.word	0x08003c07
 8003cb4:	08003dc7 	.word	0x08003dc7
 8003cb8:	08003c07 	.word	0x08003c07
 8003cbc:	08003c07 	.word	0x08003c07
 8003cc0:	08003d3d 	.word	0x08003d3d
 8003cc4:	08003c07 	.word	0x08003c07
 8003cc8:	08003fd3 	.word	0x08003fd3
 8003ccc:	08003c07 	.word	0x08003c07
 8003cd0:	08003c07 	.word	0x08003c07
 8003cd4:	08003cf1 	.word	0x08003cf1
 8003cd8:	b103      	cbz	r3, 8003cdc <vlc_print+0x17c>
 8003cda:	9709      	str	r7, [sp, #36]	; 0x24
 8003cdc:	b100      	cbz	r0, 8003ce0 <vlc_print+0x180>
 8003cde:	9208      	str	r2, [sp, #32]
 8003ce0:	9b00      	ldr	r3, [sp, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <vlc_print+0x186>
 8003ce4:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8003ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce8:	f043 0308 	orr.w	r3, r3, #8
 8003cec:	9309      	str	r3, [sp, #36]	; 0x24
 8003cee:	e006      	b.n	8003cfe <vlc_print+0x19e>
 8003cf0:	b103      	cbz	r3, 8003cf4 <vlc_print+0x194>
 8003cf2:	9709      	str	r7, [sp, #36]	; 0x24
 8003cf4:	b100      	cbz	r0, 8003cf8 <vlc_print+0x198>
 8003cf6:	9208      	str	r2, [sp, #32]
 8003cf8:	9b00      	ldr	r3, [sp, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <vlc_print+0x19e>
 8003cfc:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8003cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8003d00:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8003d04:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8003d08:	aa07      	add	r2, sp, #28
 8003d0a:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8003d0e:	f7ff fe93 	bl	8003a38 <_write_number>
 8003d12:	4483      	add	fp, r0
            break;
 8003d14:	e038      	b.n	8003d88 <vlc_print+0x228>
 8003d16:	b103      	cbz	r3, 8003d1a <vlc_print+0x1ba>
 8003d18:	9709      	str	r7, [sp, #36]	; 0x24
 8003d1a:	b100      	cbz	r0, 8003d1e <vlc_print+0x1be>
 8003d1c:	9208      	str	r2, [sp, #32]
 8003d1e:	9b00      	ldr	r3, [sp, #0]
 8003d20:	b103      	cbz	r3, 8003d24 <vlc_print+0x1c4>
 8003d22:	9607      	str	r6, [sp, #28]
            putc_fct(user, c);
 8003d24:	2125      	movs	r1, #37	; 0x25
 8003d26:	e72e      	b.n	8003b86 <vlc_print+0x26>
 8003d28:	b103      	cbz	r3, 8003d2c <vlc_print+0x1cc>
 8003d2a:	9709      	str	r7, [sp, #36]	; 0x24
 8003d2c:	b100      	cbz	r0, 8003d30 <vlc_print+0x1d0>
 8003d2e:	9208      	str	r2, [sp, #32]
 8003d30:	9b00      	ldr	r3, [sp, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <vlc_print+0x1d6>
 8003d34:	9607      	str	r6, [sp, #28]
            putc_fct(user, t);
 8003d36:	f814 1b04 	ldrb.w	r1, [r4], #4
 8003d3a:	e724      	b.n	8003b86 <vlc_print+0x26>
 8003d3c:	b103      	cbz	r3, 8003d40 <vlc_print+0x1e0>
 8003d3e:	9709      	str	r7, [sp, #36]	; 0x24
 8003d40:	b100      	cbz	r0, 8003d44 <vlc_print+0x1e4>
 8003d42:	9208      	str	r2, [sp, #32]
 8003d44:	9b00      	ldr	r3, [sp, #0]
 8003d46:	b103      	cbz	r3, 8003d4a <vlc_print+0x1ea>
 8003d48:	9607      	str	r6, [sp, #28]
            if (!str) str = "(null)";
 8003d4a:	4bab      	ldr	r3, [pc, #684]	; (8003ff8 <vlc_print+0x498>)
            str = va_arg(vl, char*);
 8003d4c:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8003d50:	f1b9 0f00 	cmp.w	r9, #0
 8003d54:	bf08      	it	eq
 8003d56:	4699      	moveq	r9, r3
  int len = strlen(str);
 8003d58:	4648      	mov	r0, r9
 8003d5a:	f7fc fa89 	bl	8000270 <strlen>
  if (specifier->precision) {
 8003d5e:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8003d60:	4606      	mov	r6, r0
  if (specifier->precision) {
 8003d62:	b113      	cbz	r3, 8003d6a <vlc_print+0x20a>
    len = (len > specifier->precision)?specifier->precision:len;
 8003d64:	4298      	cmp	r0, r3
 8003d66:	bfa8      	it	ge
 8003d68:	461e      	movge	r6, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8003d6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d6c:	f017 0702 	ands.w	r7, r7, #2
 8003d70:	d015      	beq.n	8003d9e <vlc_print+0x23e>
  int count = 0;
 8003d72:	2500      	movs	r5, #0
 8003d74:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8003d76:	eba2 0309 	sub.w	r3, r2, r9
 8003d7a:	429e      	cmp	r6, r3
 8003d7c:	dc11      	bgt.n	8003da2 <vlc_print+0x242>
 8003d7e:	2e00      	cmp	r6, #0
 8003d80:	bfa8      	it	ge
 8003d82:	19ad      	addge	r5, r5, r6
  if (specifier->flags & FLAG_NEG_PAD) {
 8003d84:	b9ef      	cbnz	r7, 8003dc2 <vlc_print+0x262>
            count += _write_string(str, &specifier);
 8003d86:	44ab      	add	fp, r5
            break;
 8003d88:	9a04      	ldr	r2, [sp, #16]
 8003d8a:	e6f1      	b.n	8003b70 <vlc_print+0x10>
      _WRITE_C(' ');
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	4640      	mov	r0, r8
 8003d90:	47d0      	blx	sl
 8003d92:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8003d94:	9a07      	ldr	r2, [sp, #28]
 8003d96:	19ab      	adds	r3, r5, r6
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	dcf7      	bgt.n	8003d8c <vlc_print+0x22c>
 8003d9c:	e7ea      	b.n	8003d74 <vlc_print+0x214>
  int count = 0;
 8003d9e:	463d      	mov	r5, r7
 8003da0:	e7f8      	b.n	8003d94 <vlc_print+0x234>
    _WRITE_C(*str++);
 8003da2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003da6:	9200      	str	r2, [sp, #0]
 8003da8:	4640      	mov	r0, r8
 8003daa:	47d0      	blx	sl
 8003dac:	9a00      	ldr	r2, [sp, #0]
  for (int i = 0; i < len; i++) {
 8003dae:	e7e2      	b.n	8003d76 <vlc_print+0x216>
      _WRITE_C(' ');
 8003db0:	2120      	movs	r1, #32
 8003db2:	4640      	mov	r0, r8
 8003db4:	47d0      	blx	sl
 8003db6:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8003db8:	9a07      	ldr	r2, [sp, #28]
 8003dba:	1973      	adds	r3, r6, r5
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	dcf7      	bgt.n	8003db0 <vlc_print+0x250>
 8003dc0:	e7e1      	b.n	8003d86 <vlc_print+0x226>
 8003dc2:	1b76      	subs	r6, r6, r5
 8003dc4:	e7f8      	b.n	8003db8 <vlc_print+0x258>
 8003dc6:	b103      	cbz	r3, 8003dca <vlc_print+0x26a>
 8003dc8:	9709      	str	r7, [sp, #36]	; 0x24
 8003dca:	b100      	cbz	r0, 8003dce <vlc_print+0x26e>
 8003dcc:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8003dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	9307      	str	r3, [sp, #28]
 8003dda:	e784      	b.n	8003ce6 <vlc_print+0x186>
 8003ddc:	b103      	cbz	r3, 8003de0 <vlc_print+0x280>
 8003dde:	9709      	str	r7, [sp, #36]	; 0x24
 8003de0:	b100      	cbz	r0, 8003de4 <vlc_print+0x284>
 8003de2:	9208      	str	r2, [sp, #32]
 8003de4:	9b00      	ldr	r3, [sp, #0]
 8003de6:	b103      	cbz	r3, 8003dea <vlc_print+0x28a>
 8003de8:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 8003dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dec:	f043 0304 	orr.w	r3, r3, #4
 8003df0:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 8003df2:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 8003df4:	1d25      	adds	r5, r4, #4
                val = va_arg(vl, signed int);
 8003df6:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8003df8:	aa07      	add	r2, sp, #28
 8003dfa:	f7ff fe1d 	bl	8003a38 <_write_number>
            break;
 8003dfe:	462c      	mov	r4, r5
            count += _write_number(val, &specifier);
 8003e00:	4483      	add	fp, r0
            break;
 8003e02:	e7c1      	b.n	8003d88 <vlc_print+0x228>
                val = va_arg(vl, uint64_t);
 8003e04:	3407      	adds	r4, #7
 8003e06:	f024 0407 	bic.w	r4, r4, #7
 8003e0a:	4625      	mov	r5, r4
 8003e0c:	6861      	ldr	r1, [r4, #4]
 8003e0e:	f855 0b08 	ldr.w	r0, [r5], #8
 8003e12:	e7f1      	b.n	8003df8 <vlc_print+0x298>
 8003e14:	b103      	cbz	r3, 8003e18 <vlc_print+0x2b8>
 8003e16:	9709      	str	r7, [sp, #36]	; 0x24
 8003e18:	b100      	cbz	r0, 8003e1c <vlc_print+0x2bc>
 8003e1a:	9208      	str	r2, [sp, #32]
 8003e1c:	9b00      	ldr	r3, [sp, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <vlc_print+0x2c2>
 8003e20:	9607      	str	r6, [sp, #28]
            dbl = va_arg(vl, double);
 8003e22:	3407      	adds	r4, #7
 8003e24:	f024 0407 	bic.w	r4, r4, #7
 8003e28:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8003e2c:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8003e2e:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8003e32:	b90b      	cbnz	r3, 8003e38 <vlc_print+0x2d8>
              specifier.precision = 6;
 8003e34:	2306      	movs	r3, #6
 8003e36:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8003e38:	9d08      	ldr	r5, [sp, #32]
  double mul = 1.0;
 8003e3a:	4f70      	ldr	r7, [pc, #448]	; (8003ffc <vlc_print+0x49c>)
  for (int i=0;i <specifier->precision; i++)
 8003e3c:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8003e40:	2600      	movs	r6, #0
  for (int i=0;i <specifier->precision; i++)
 8003e42:	45a9      	cmp	r9, r5
    mul *= 10;
 8003e44:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8003e48:	f2c0 80ac 	blt.w	8003fa4 <vlc_print+0x444>
  if (is_signed)
 8003e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e50:	2300      	movs	r3, #0
 8003e52:	f7fc fe43 	bl	8000adc <__aeabi_dcmplt>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f000 80ae 	beq.w	8003fb8 <vlc_print+0x458>
    number = -number;
 8003e5c:	9b00      	ldr	r3, [sp, #0]
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	9b01      	ldr	r3, [sp, #4]
 8003e62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e66:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8003e68:	4632      	mov	r2, r6
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4964      	ldr	r1, [pc, #400]	; (8004000 <vlc_print+0x4a0>)
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fc fcec 	bl	800084c <__aeabi_ddiv>
 8003e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e78:	f7fc fa08 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 8003e7c:	4632      	mov	r2, r6
 8003e7e:	463b      	mov	r3, r7
 8003e80:	f7fc fbba 	bl	80005f8 <__aeabi_dmul>
 8003e84:	f7fc ffea 	bl	8000e5c <__aeabi_d2ulz>
  uint32_t count = 0;
 8003e88:	2600      	movs	r6, #0
  val = (uint64_t)(number * mul);
 8003e8a:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8003e8c:	273f      	movs	r7, #63	; 0x3f
    uint64_t t = val / 10;
 8003e8e:	4691      	mov	r9, r2
 8003e90:	2300      	movs	r3, #0
 8003e92:	220a      	movs	r2, #10
 8003e94:	4648      	mov	r0, r9
 8003e96:	9105      	str	r1, [sp, #20]
 8003e98:	f7fc ff94 	bl	8000dc4 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8003e9c:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8003ea0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8003ea4:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8003ea6:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 8003eaa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003eae:	446b      	add	r3, sp
 8003eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8003eb4:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8003eb8:	1c73      	adds	r3, r6, #1
    if (count == specifier->precision) {
 8003eba:	429d      	cmp	r5, r3
      buf[idx--] = '.';
 8003ebc:	bf01      	itttt	eq
 8003ebe:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8003ec2:	eb0d 0c03 	addeq.w	ip, sp, r3
 8003ec6:	232e      	moveq	r3, #46	; 0x2e
 8003ec8:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 8003ecc:	bf18      	it	ne
 8003ece:	461e      	movne	r6, r3
  } while (val);
 8003ed0:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 8003ed2:	bf06      	itte	eq
 8003ed4:	3f02      	subeq	r7, #2
      count++;
 8003ed6:	3602      	addeq	r6, #2
    buf[idx--] = chr;
 8003ed8:	4667      	movne	r7, ip
  } while (val);
 8003eda:	f1b9 0f0a 	cmp.w	r9, #10
 8003ede:	f173 0900 	sbcs.w	r9, r3, #0
 8003ee2:	d2d4      	bcs.n	8003e8e <vlc_print+0x32e>
    buf[idx--] = '0';
 8003ee4:	42ae      	cmp	r6, r5
 8003ee6:	f1c5 0001 	rsb	r0, r5, #1
 8003eea:	4430      	add	r0, r6
 8003eec:	f04f 0130 	mov.w	r1, #48	; 0x30
 8003ef0:	bf88      	it	hi
 8003ef2:	2001      	movhi	r0, #1
 8003ef4:	eba5 0906 	sub.w	r9, r5, r6
 8003ef8:	eb0d 0301 	add.w	r3, sp, r1
 8003efc:	bf88      	it	hi
 8003efe:	f04f 0900 	movhi.w	r9, #0
 8003f02:	4438      	add	r0, r7
 8003f04:	4418      	add	r0, r3
 8003f06:	464a      	mov	r2, r9
 8003f08:	f008 fc27 	bl	800c75a <memset>
 8003f0c:	1b73      	subs	r3, r6, r5
 8003f0e:	42ae      	cmp	r6, r5
 8003f10:	bf88      	it	hi
 8003f12:	2300      	movhi	r3, #0
 8003f14:	444e      	add	r6, r9
  if (count == specifier->precision) {
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	441f      	add	r7, r3
 8003f1a:	f105 0501 	add.w	r5, r5, #1
 8003f1e:	d107      	bne.n	8003f30 <vlc_print+0x3d0>
    buf[idx--] = '.';
 8003f20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f24:	446b      	add	r3, sp
 8003f26:	222e      	movs	r2, #46	; 0x2e
 8003f28:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003f2c:	462e      	mov	r6, r5
    buf[idx--] = '.';
 8003f2e:	3f01      	subs	r7, #1
  if (count == specifier->precision + 1)
 8003f30:	42b5      	cmp	r5, r6
 8003f32:	d107      	bne.n	8003f44 <vlc_print+0x3e4>
    buf[idx--] = '0';
 8003f34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f38:	446b      	add	r3, sp
 8003f3a:	2230      	movs	r2, #48	; 0x30
 8003f3c:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003f40:	3601      	adds	r6, #1
    buf[idx--] = '0';
 8003f42:	3f01      	subs	r7, #1
  if (is_signed) {
 8003f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f7fc fdc6 	bl	8000adc <__aeabi_dcmplt>
 8003f50:	b138      	cbz	r0, 8003f62 <vlc_print+0x402>
    buf[idx--] = '-';
 8003f52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f56:	446b      	add	r3, sp
 8003f58:	222d      	movs	r2, #45	; 0x2d
 8003f5a:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003f5e:	3601      	adds	r6, #1
    buf[idx--] = '-';
 8003f60:	3f01      	subs	r7, #1
  while (count < specifier->width) {
 8003f62:	9d07      	ldr	r5, [sp, #28]
    buf[idx--] = ' ';
 8003f64:	42ae      	cmp	r6, r5
 8003f66:	f1c5 0001 	rsb	r0, r5, #1
 8003f6a:	4430      	add	r0, r6
 8003f6c:	bf88      	it	hi
 8003f6e:	2001      	movhi	r0, #1
 8003f70:	eba5 0906 	sub.w	r9, r5, r6
 8003f74:	ab0c      	add	r3, sp, #48	; 0x30
 8003f76:	bf88      	it	hi
 8003f78:	f04f 0900 	movhi.w	r9, #0
 8003f7c:	4438      	add	r0, r7
 8003f7e:	464a      	mov	r2, r9
 8003f80:	4418      	add	r0, r3
 8003f82:	2120      	movs	r1, #32
 8003f84:	f008 fbe9 	bl	800c75a <memset>
 8003f88:	1b73      	subs	r3, r6, r5
 8003f8a:	42ae      	cmp	r6, r5
 8003f8c:	bf88      	it	hi
 8003f8e:	2300      	movhi	r3, #0
 8003f90:	443b      	add	r3, r7
 8003f92:	aa0c      	add	r2, sp, #48	; 0x30
 8003f94:	444e      	add	r6, r9
  for(int i = 0; i < count; i++) {
 8003f96:	18d7      	adds	r7, r2, r3
 8003f98:	4433      	add	r3, r6
 8003f9a:	189d      	adds	r5, r3, r2
 8003f9c:	42bd      	cmp	r5, r7
 8003f9e:	d110      	bne.n	8003fc2 <vlc_print+0x462>
            count += _write_double(dbl, &specifier);
 8003fa0:	44b3      	add	fp, r6
            break;
 8003fa2:	e6f1      	b.n	8003d88 <vlc_print+0x228>
    mul *= 10;
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <vlc_print+0x4a4>)
 8003faa:	f7fc fb25 	bl	80005f8 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8003fae:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	460f      	mov	r7, r1
  for (int i=0;i <specifier->precision; i++)
 8003fb6:	e744      	b.n	8003e42 <vlc_print+0x2e2>
 8003fb8:	ed9d 7b00 	vldr	d7, [sp]
 8003fbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003fc0:	e752      	b.n	8003e68 <vlc_print+0x308>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8003fc2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 8003fca:	e7e7      	b.n	8003f9c <vlc_print+0x43c>
        if (!c)
 8003fcc:	f04f 0e01 	mov.w	lr, #1
 8003fd0:	e5ee      	b.n	8003bb0 <vlc_print+0x50>
 8003fd2:	b103      	cbz	r3, 8003fd6 <vlc_print+0x476>
 8003fd4:	9709      	str	r7, [sp, #36]	; 0x24
 8003fd6:	b100      	cbz	r0, 8003fda <vlc_print+0x47a>
 8003fd8:	9208      	str	r2, [sp, #32]
 8003fda:	9b00      	ldr	r3, [sp, #0]
 8003fdc:	b103      	cbz	r3, 8003fe0 <vlc_print+0x480>
 8003fde:	9607      	str	r6, [sp, #28]
              if (long_type)
 8003fe0:	f1bc 0f00 	cmp.w	ip, #0
 8003fe4:	f47f af0e 	bne.w	8003e04 <vlc_print+0x2a4>
                val = va_arg(vl, unsigned int);
 8003fe8:	4625      	mov	r5, r4
 8003fea:	4661      	mov	r1, ip
 8003fec:	f855 0b04 	ldr.w	r0, [r5], #4
 8003ff0:	e702      	b.n	8003df8 <vlc_print+0x298>
        if (!c)
 8003ff2:	f04f 0c01 	mov.w	ip, #1
      while (done == false) {
 8003ff6:	e5db      	b.n	8003bb0 <vlc_print+0x50>
 8003ff8:	0800f614 	.word	0x0800f614
 8003ffc:	3ff00000 	.word	0x3ff00000
 8004000:	3fe00000 	.word	0x3fe00000
 8004004:	40240000 	.word	0x40240000

08004008 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	b0a2      	sub	sp, #136	; 0x88
 800400c:	4606      	mov	r6, r0
 800400e:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004010:	f001 fdda 	bl	8005bc8 <ai_platform_context_acquire>
 8004014:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004016:	2d00      	cmp	r5, #0
 8004018:	d034      	beq.n	8004084 <ai_network_get_report+0x7c>
 800401a:	2800      	cmp	r0, #0
 800401c:	d02f      	beq.n	800407e <ai_network_get_report+0x76>
  {
    ai_network_report r = {
 800401e:	2278      	movs	r2, #120	; 0x78
 8004020:	2100      	movs	r1, #0
 8004022:	a804      	add	r0, sp, #16
 8004024:	f008 fb99 	bl	800c75a <memset>
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <ai_network_get_report+0x80>)
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <ai_network_get_report+0x84>)
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <ai_network_get_report+0x88>)
 8004032:	9302      	str	r3, [sp, #8]
 8004034:	4b17      	ldr	r3, [pc, #92]	; (8004094 <ai_network_get_report+0x8c>)
 8004036:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004038:	f001 fcaa 	bl	8005990 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800403c:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 800403e:	f001 fcdf 	bl	8005a00 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <ai_network_get_report+0x90>)
 8004044:	9306      	str	r3, [sp, #24]
 8004046:	f44f 7384 	mov.w	r3, #264	; 0x108
 800404a:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 800404e:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004050:	f001 fd22 	bl	8005a98 <ai_platform_api_get_version>
 8004054:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004056:	f001 fd6b 	bl	8005b30 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <ai_network_get_report+0x94>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800405c:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 800405e:	2300      	movs	r3, #0
 8004060:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004064:	4669      	mov	r1, sp
    ai_network_report r = {
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <ai_network_get_report+0x98>)
 8004068:	9311      	str	r3, [sp, #68]	; 0x44
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800406a:	4630      	mov	r0, r6
 800406c:	f001 fe60 	bl	8005d30 <ai_platform_api_get_network_report>
 8004070:	4604      	mov	r4, r0
 8004072:	b120      	cbz	r0, 800407e <ai_network_get_report+0x76>

    *report = r;
 8004074:	2288      	movs	r2, #136	; 0x88
 8004076:	4669      	mov	r1, sp
 8004078:	4628      	mov	r0, r5
 800407a:	f008 fc10 	bl	800c89e <memcpy>
    return true;
  }
  return false;
}
 800407e:	4620      	mov	r0, r4
 8004080:	b022      	add	sp, #136	; 0x88
 8004082:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004084:	462c      	mov	r4, r5
 8004086:	e7fa      	b.n	800407e <ai_network_get_report+0x76>
 8004088:	0800f5e0 	.word	0x0800f5e0
 800408c:	0800f61b 	.word	0x0800f61b
 8004090:	0800f63c 	.word	0x0800f63c
 8004094:	0800f655 	.word	0x0800f655
 8004098:	08010a21 	.word	0x08010a21
 800409c:	0001484a 	.word	0x0001484a
 80040a0:	a1facade 	.word	0xa1facade

080040a4 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80040a4:	f001 bdd0 	b.w	8005c48 <ai_platform_network_get_error>

080040a8 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80040a8:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80040aa:	2305      	movs	r3, #5
 80040ac:	2200      	movs	r2, #0
 80040ae:	e9cd 3200 	strd	r3, r2, [sp]
 80040b2:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <ai_network_create+0x18>)
 80040b4:	2301      	movs	r3, #1
 80040b6:	f002 f8f9 	bl	80062ac <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80040ba:	b003      	add	sp, #12
 80040bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80040c0:	20000934 	.word	0x20000934

080040c4 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80040c4:	f002 b9c8 	b.w	8006458 <ai_platform_network_destroy>

080040c8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80040c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040cc:	4607      	mov	r7, r0
 80040ce:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80040d0:	f002 fa2e 	bl	8006530 <ai_platform_network_init>
  if (!net_ctx) return false;
 80040d4:	4604      	mov	r4, r0
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f000 80a9 	beq.w	800422e <ai_network_init+0x166>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80040dc:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80042ac <ai_network_init+0x1e4>
 80040e0:	4632      	mov	r2, r6
 80040e2:	2101      	movs	r1, #1
 80040e4:	4640      	mov	r0, r8
 80040e6:	f001 fb89 	bl	80057fc <ai_platform_get_weights_map>
 80040ea:	4605      	mov	r5, r0
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f000 80a0 	beq.w	8004232 <ai_network_init+0x16a>
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80040f2:	4a56      	ldr	r2, [pc, #344]	; (800424c <ai_network_init+0x184>)
 80040f4:	6813      	ldr	r3, [r2, #0]
 80040f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040fa:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80040fc:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004100:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004104:	4a52      	ldr	r2, [pc, #328]	; (8004250 <ai_network_init+0x188>)
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800410c:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 16);
 800410e:	f103 0110 	add.w	r1, r3, #16
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 16);
 8004112:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004116:	4a4f      	ldr	r2, [pc, #316]	; (8004254 <ai_network_init+0x18c>)
 8004118:	6811      	ldr	r1, [r2, #0]
 800411a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800411e:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 80);
 8004120:	f103 0150 	add.w	r1, r3, #80	; 0x50
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 80);
 8004124:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004128:	4a4b      	ldr	r2, [pc, #300]	; (8004258 <ai_network_init+0x190>)
 800412a:	6811      	ldr	r1, [r2, #0]
 800412c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004130:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 112);
 8004132:	f103 0170 	add.w	r1, r3, #112	; 0x70
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 112);
 8004136:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800413a:	4a48      	ldr	r2, [pc, #288]	; (800425c <ai_network_init+0x194>)
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004142:	6011      	str	r1, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 240);
 8004144:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 240);
 8004148:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800414c:	4a44      	ldr	r2, [pc, #272]	; (8004260 <ai_network_init+0x198>)
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004154:	6011      	str	r1, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 1776);
 8004156:	f503 61de 	add.w	r1, r3, #1776	; 0x6f0
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1776);
 800415a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800415e:	4a41      	ldr	r2, [pc, #260]	; (8004264 <ai_network_init+0x19c>)
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004166:	6011      	str	r1, [r2, #0]
    gemm_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 1904);
 8004168:	f503 61ee 	add.w	r1, r3, #1904	; 0x770
    gemm_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1904);
 800416c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004170:	4a3d      	ldr	r2, [pc, #244]	; (8004268 <ai_network_init+0x1a0>)
 8004172:	6811      	ldr	r1, [r2, #0]
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 2064);
 8004174:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004178:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800417c:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2064);
 800417e:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8004182:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80042b0 <ai_network_init+0x1e8>
 8004186:	4632      	mov	r2, r6
 8004188:	2101      	movs	r1, #1
 800418a:	4640      	mov	r0, r8
 800418c:	f001 fb8a 	bl	80058a4 <ai_platform_get_activations_map>
 8004190:	4606      	mov	r6, r0
 8004192:	2800      	cmp	r0, #0
 8004194:	d053      	beq.n	800423e <ai_network_init+0x176>
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 36096);
 8004196:	f8d8 3000 	ldr.w	r3, [r8]
 800419a:	4934      	ldr	r1, [pc, #208]	; (800426c <ai_network_init+0x1a4>)
 800419c:	f503 420d 	add.w	r2, r3, #36096	; 0x8d00
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36096);
 80041a0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 36096);
 80041a4:	4932      	ldr	r1, [pc, #200]	; (8004270 <ai_network_init+0x1a8>)
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36096);
 80041a6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 35932);
 80041aa:	4932      	ldr	r1, [pc, #200]	; (8004274 <ai_network_init+0x1ac>)
 80041ac:	f503 420c 	add.w	r2, r3, #35840	; 0x8c00
 80041b0:	325c      	adds	r2, #92	; 0x5c
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 35932);
 80041b2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 36864);
 80041b6:	4930      	ldr	r1, [pc, #192]	; (8004278 <ai_network_init+0x1b0>)
 80041b8:	f503 4210 	add.w	r2, r3, #36864	; 0x9000
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36864);
 80041bc:	e9c1 2202 	strd	r2, r2, [r1, #8]
    pool_1_output_array.data = AI_PTR(g_network_activations_map[0] + 35328);
 80041c0:	492e      	ldr	r1, [pc, #184]	; (800427c <ai_network_init+0x1b4>)
 80041c2:	f503 400a 	add.w	r0, r3, #35328	; 0x8a00
    pool_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 35328);
 80041c6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 35004);
 80041ca:	482d      	ldr	r0, [pc, #180]	; (8004280 <ai_network_init+0x1b8>)
 80041cc:	f503 4108 	add.w	r1, r3, #34816	; 0x8800
 80041d0:	31bc      	adds	r1, #188	; 0xbc
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 35004);
 80041d2:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 49152);
 80041d6:	492b      	ldr	r1, [pc, #172]	; (8004284 <ai_network_init+0x1bc>)
 80041d8:	f503 4040 	add.w	r0, r3, #49152	; 0xc000
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 49152);
 80041dc:	e9c1 0002 	strd	r0, r0, [r1, #8]
    concat_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80041e0:	4929      	ldr	r1, [pc, #164]	; (8004288 <ai_network_init+0x1c0>)
    concat_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80041e2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    pool_5_output_array.data = AI_PTR(g_network_activations_map[0] + 36864);
 80041e6:	4929      	ldr	r1, [pc, #164]	; (800428c <ai_network_init+0x1c4>)
    pool_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36864);
 80041e8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80041ec:	4a28      	ldr	r2, [pc, #160]	; (8004290 <ai_network_init+0x1c8>)
    gemm_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80041ee:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 96);
 80041f2:	4a28      	ldr	r2, [pc, #160]	; (8004294 <ai_network_init+0x1cc>)
 80041f4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 96);
 80041f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80041fc:	4a26      	ldr	r2, [pc, #152]	; (8004298 <ai_network_init+0x1d0>)
    gemm_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80041fe:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 8004202:	4a26      	ldr	r2, [pc, #152]	; (800429c <ai_network_init+0x1d4>)
 8004204:	f103 0140 	add.w	r1, r3, #64	; 0x40
    gemm_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 8004208:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_9_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800420c:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <ai_network_init+0x1d8>)
    nl_9_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800420e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_9_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8004212:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <ai_network_init+0x1dc>)
 8004214:	f103 0114 	add.w	r1, r3, #20
    nl_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8004218:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conversion_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800421c:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <ai_network_init+0x1e0>)
    conversion_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800421e:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004222:	4638      	mov	r0, r7
 8004224:	f002 fa72 	bl	800670c <ai_platform_network_post_init>
 8004228:	4030      	ands	r0, r6
 800422a:	4005      	ands	r5, r0
 800422c:	b2e8      	uxtb	r0, r5

  return ok;
}
 800422e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004232:	2212      	movs	r2, #18
 8004234:	2130      	movs	r1, #48	; 0x30
 8004236:	4620      	mov	r0, r4
 8004238:	f001 fd74 	bl	8005d24 <ai_platform_network_set_error>
  return false;
 800423c:	e7a1      	b.n	8004182 <ai_network_init+0xba>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800423e:	2213      	movs	r2, #19
 8004240:	2130      	movs	r1, #48	; 0x30
 8004242:	4620      	mov	r0, r4
 8004244:	f001 fd6e 	bl	8005d24 <ai_platform_network_set_error>
  return false;
 8004248:	e7eb      	b.n	8004222 <ai_network_init+0x15a>
 800424a:	bf00      	nop
 800424c:	2000088c 	.word	0x2000088c
 8004250:	200007c4 	.word	0x200007c4
 8004254:	20000798 	.word	0x20000798
 8004258:	200006d0 	.word	0x200006d0
 800425c:	20000a3c 	.word	0x20000a3c
 8004260:	2000099c 	.word	0x2000099c
 8004264:	20000b08 	.word	0x20000b08
 8004268:	20000a68 	.word	0x20000a68
 800426c:	20000c74 	.word	0x20000c74
 8004270:	200008d8 	.word	0x200008d8
 8004274:	20000860 	.word	0x20000860
 8004278:	20000834 	.word	0x20000834
 800427c:	20000be4 	.word	0x20000be4
 8004280:	2000076c 	.word	0x2000076c
 8004284:	20000740 	.word	0x20000740
 8004288:	200006a4 	.word	0x200006a4
 800428c:	20000c48 	.word	0x20000c48
 8004290:	20000a10 	.word	0x20000a10
 8004294:	200009e4 	.word	0x200009e4
 8004298:	20000adc 	.word	0x20000adc
 800429c:	20000ab0 	.word	0x20000ab0
 80042a0:	20000b80 	.word	0x20000b80
 80042a4:	20000b54 	.word	0x20000b54
 80042a8:	20000924 	.word	0x20000924
 80042ac:	20013388 	.word	0x20013388
 80042b0:	20013384 	.word	0x20013384

080042b4 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80042b4:	f002 bab2 	b.w	800681c <ai_platform_network_process>

080042b8 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80042b8:	2200      	movs	r2, #0
 80042ba:	f002 baaf 	b.w	800681c <ai_platform_network_process>
	...

080042c0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80042c0:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80042c2:	4603      	mov	r3, r0
{
 80042c4:	b085      	sub	sp, #20
  if (!params) return false;
 80042c6:	b170      	cbz	r0, 80042e6 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80042c8:	4c08      	ldr	r4, [pc, #32]	; (80042ec <ai_network_data_params_get+0x2c>)
 80042ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ce:	466a      	mov	r2, sp
 80042d0:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80042d4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80042d8:	ad02      	add	r5, sp, #8
 80042da:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80042de:	4629      	mov	r1, r5
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fb33 	bl	800594c <ai_platform_bind_network_params>
}
 80042e6:	b005      	add	sp, #20
 80042e8:	bd30      	pop	{r4, r5, pc}
 80042ea:	bf00      	nop
 80042ec:	0800f458 	.word	0x0800f458

080042f0 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 80042f0:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 80042f2:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pos = fields;
 80042f6:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80042fa:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 80042fe:	441a      	add	r2, r3
 8004300:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004302:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 8004306:	441a      	add	r2, r3
 8004308:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 800430a:	8808      	ldrh	r0, [r1, #0]
}
 800430c:	3800      	subs	r0, #0
 800430e:	bf18      	it	ne
 8004310:	2001      	movne	r0, #1
 8004312:	4770      	bx	lr

08004314 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8004314:	6841      	ldr	r1, [r0, #4]

    if (prev_field->tag == 0)
 8004316:	880a      	ldrh	r2, [r1, #0]
{
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	4603      	mov	r3, r0
    if (prev_field->tag == 0)
 800431c:	2a00      	cmp	r2, #0
 800431e:	d038      	beq.n	8004392 <pb_field_iter_next+0x7e>
        return false;
    }
    
    iter->pos++;
    
    if (iter->pos->tag == 0)
 8004320:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 8004324:	f101 020f 	add.w	r2, r1, #15
 8004328:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 800432a:	b92c      	cbnz	r4, 8004338 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 800432c:	68c2      	ldr	r2, [r0, #12]
 800432e:	6801      	ldr	r1, [r0, #0]
 8004330:	f7ff ffde 	bl	80042f0 <pb_field_iter_begin>
        return false;
 8004334:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8004336:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004338:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 800433a:	f8b1 2007 	ldrh.w	r2, [r1, #7]
            iter->pos->data_offset == PB_SIZE_MAX)
 800433e:	8a4c      	ldrh	r4, [r1, #18]
 8004340:	f000 0630 	and.w	r6, r0, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004344:	2e30      	cmp	r6, #48	; 0x30
 8004346:	d10a      	bne.n	800435e <pb_field_iter_next+0x4a>
 8004348:	7c4d      	ldrb	r5, [r1, #17]
 800434a:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800434e:	2d30      	cmp	r5, #48	; 0x30
 8004350:	d119      	bne.n	8004386 <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8004352:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004356:	42ac      	cmp	r4, r5
 8004358:	d115      	bne.n	8004386 <pb_field_iter_next+0x72>
            return true;
 800435a:	2001      	movs	r0, #1
 800435c:	e7eb      	b.n	8004336 <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800435e:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8004362:	2d20      	cmp	r5, #32
 8004364:	d10f      	bne.n	8004386 <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 8004366:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 800436a:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 800436c:	b916      	cbnz	r6, 8004374 <pb_field_iter_next+0x60>
            iter->required_field_index++;
 800436e:	6898      	ldr	r0, [r3, #8]
 8004370:	3001      	adds	r0, #1
 8004372:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8004374:	4414      	add	r4, r2
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	4422      	add	r2, r4
 800437a:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800437c:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8004380:	440a      	add	r2, r1
 8004382:	615a      	str	r2, [r3, #20]
        return true;
 8004384:	e7e9      	b.n	800435a <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8004386:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 800438a:	2880      	cmp	r0, #128	; 0x80
 800438c:	bf08      	it	eq
 800438e:	2204      	moveq	r2, #4
 8004390:	e7ec      	b.n	800436c <pb_field_iter_next+0x58>
        return false;
 8004392:	4610      	mov	r0, r2
 8004394:	e7cf      	b.n	8004336 <pb_field_iter_next+0x22>

08004396 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8004396:	b570      	push	{r4, r5, r6, lr}
    const pb_field_t *start = iter->pos;
 8004398:	6846      	ldr	r6, [r0, #4]
{
 800439a:	4604      	mov	r4, r0
 800439c:	460d      	mov	r5, r1
    
    do {
        if (iter->pos->tag == tag &&
 800439e:	6863      	ldr	r3, [r4, #4]
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	42aa      	cmp	r2, r5
 80043a4:	d104      	bne.n	80043b0 <pb_field_iter_find+0x1a>
 80043a6:	789b      	ldrb	r3, [r3, #2]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d107      	bne.n	80043c0 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff ffaf 	bl	8004314 <pb_field_iter_next>
    } while (iter->pos != start);
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	42b3      	cmp	r3, r6
 80043ba:	d1f0      	bne.n	800439e <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80043bc:	2000      	movs	r0, #0
}
 80043be:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 80043c0:	2001      	movs	r0, #1
 80043c2:	e7fc      	b.n	80043be <pb_field_iter_find+0x28>

080043c4 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80043c4:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80043c6:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 80043c8:	18a3      	adds	r3, r4, r2
 80043ca:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 80043cc:	b939      	cbnz	r1, 80043de <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 80043ce:	2001      	movs	r0, #1
 80043d0:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 80043d2:	5ce0      	ldrb	r0, [r4, r3]
 80043d4:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 80043d6:	3301      	adds	r3, #1
 80043d8:	4293      	cmp	r3, r2
 80043da:	d1fa      	bne.n	80043d2 <buf_read+0xe>
 80043dc:	e7f7      	b.n	80043ce <buf_read+0xa>
 80043de:	2300      	movs	r3, #0
 80043e0:	e7fa      	b.n	80043d8 <buf_read+0x14>

080043e2 <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 80043e2:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 80043e4:	6845      	ldr	r5, [r0, #4]
 80043e6:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80043e8:	f002 060f 	and.w	r6, r2, #15
 80043ec:	2e08      	cmp	r6, #8
{
 80043ee:	b086      	sub	sp, #24
 80043f0:	4603      	mov	r3, r0
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80043f2:	d11f      	bne.n	8004434 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80043f4:	6903      	ldr	r3, [r0, #16]
 80043f6:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 80043f8:	2600      	movs	r6, #0
        while (ext != NULL)
 80043fa:	b90c      	cbnz	r4, 8004400 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 80043fc:	b006      	add	sp, #24
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8004400:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8004402:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8004404:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 8004406:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8004408:	4629      	mov	r1, r5
 800440a:	4668      	mov	r0, sp
 800440c:	f7ff ff70 	bl	80042f0 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8004410:	6863      	ldr	r3, [r4, #4]
 8004412:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 8004414:	f104 030c 	add.w	r3, r4, #12
 8004418:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800441a:	78ab      	ldrb	r3, [r5, #2]
 800441c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004420:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8004422:	bf08      	it	eq
 8004424:	1d23      	addeq	r3, r4, #4
            pb_field_set_to_default(&ext_iter);
 8004426:	4668      	mov	r0, sp
        iter->pData = &extension->dest;
 8004428:	bf08      	it	eq
 800442a:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 800442c:	f7ff ffd9 	bl	80043e2 <pb_field_set_to_default>
            ext = ext->next;
 8004430:	68a4      	ldr	r4, [r4, #8]
 8004432:	e7e2      	b.n	80043fa <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004434:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 8004438:	d127      	bne.n	800448a <pb_field_set_to_default+0xa8>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800443a:	f002 0030 	and.w	r0, r2, #48	; 0x30
 800443e:	2810      	cmp	r0, #16
 8004440:	d110      	bne.n	8004464 <pb_field_set_to_default+0x82>
 8004442:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8004446:	4282      	cmp	r2, r0
 8004448:	d000      	beq.n	800444c <pb_field_set_to_default+0x6a>
            *(bool*)iter->pSize = false;
 800444a:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800444c:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800444e:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8004452:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004454:	d10b      	bne.n	800446e <pb_field_set_to_default+0x8c>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004456:	4601      	mov	r1, r0
 8004458:	4620      	mov	r0, r4
}
 800445a:	b006      	add	sp, #24
 800445c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004460:	f000 b81b 	b.w	800449a <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004464:	0690      	lsls	r0, r2, #26
 8004466:	d5f1      	bpl.n	800444c <pb_field_set_to_default+0x6a>
            *(pb_size_t*)iter->pSize = 0;
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	8019      	strh	r1, [r3, #0]
}
 800446c:	e7c6      	b.n	80043fc <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800446e:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8004472:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 8004474:	b124      	cbz	r4, 8004480 <pb_field_set_to_default+0x9e>
}
 8004476:	b006      	add	sp, #24
 8004478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800447c:	f008 ba0f 	b.w	800c89e <memcpy>
}
 8004480:	b006      	add	sp, #24
 8004482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8004486:	f008 b968 	b.w	800c75a <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800448a:	2980      	cmp	r1, #128	; 0x80
 800448c:	d1b6      	bne.n	80043fc <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 800448e:	6900      	ldr	r0, [r0, #16]
 8004490:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004492:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8004494:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004496:	d5b1      	bpl.n	80043fc <pb_field_set_to_default+0x1a>
 8004498:	e7e6      	b.n	8004468 <pb_field_set_to_default+0x86>

0800449a <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800449a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800449c:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800449e:	4601      	mov	r1, r0
 80044a0:	4668      	mov	r0, sp
 80044a2:	f7ff ff25 	bl	80042f0 <pb_field_iter_begin>
 80044a6:	b130      	cbz	r0, 80044b6 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 80044a8:	4668      	mov	r0, sp
 80044aa:	f7ff ff9a 	bl	80043e2 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 80044ae:	4668      	mov	r0, sp
 80044b0:	f7ff ff30 	bl	8004314 <pb_field_iter_next>
 80044b4:	e7f7      	b.n	80044a6 <pb_message_set_to_defaults+0xc>
}
 80044b6:	b007      	add	sp, #28
 80044b8:	f85d fb04 	ldr.w	pc, [sp], #4

080044bc <pb_readbyte>:
    if (stream->bytes_left == 0)
 80044bc:	6883      	ldr	r3, [r0, #8]
{
 80044be:	b510      	push	{r4, lr}
 80044c0:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 80044c2:	b93b      	cbnz	r3, 80044d4 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80044c4:	68c2      	ldr	r2, [r0, #12]
 80044c6:	490b      	ldr	r1, [pc, #44]	; (80044f4 <pb_readbyte+0x38>)
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	bf08      	it	eq
 80044cc:	460a      	moveq	r2, r1
 80044ce:	60c2      	str	r2, [r0, #12]
 80044d0:	4618      	mov	r0, r3
}
 80044d2:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 80044d4:	6803      	ldr	r3, [r0, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	4798      	blx	r3
 80044da:	b930      	cbnz	r0, 80044ea <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 80044dc:	68e3      	ldr	r3, [r4, #12]
 80044de:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <pb_readbyte+0x3c>)
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf08      	it	eq
 80044e4:	4613      	moveq	r3, r2
 80044e6:	60e3      	str	r3, [r4, #12]
 80044e8:	e7f3      	b.n	80044d2 <pb_readbyte+0x16>
    stream->bytes_left--;
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60a3      	str	r3, [r4, #8]
    return true;    
 80044f0:	e7ef      	b.n	80044d2 <pb_readbyte+0x16>
 80044f2:	bf00      	nop
 80044f4:	08010128 	.word	0x08010128
 80044f8:	08010136 	.word	0x08010136

080044fc <pb_decode_varint32_eof>:
{
 80044fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004500:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 8004502:	f10d 0107 	add.w	r1, sp, #7
{
 8004506:	4605      	mov	r5, r0
 8004508:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 800450a:	f7ff ffd7 	bl	80044bc <pb_readbyte>
 800450e:	4606      	mov	r6, r0
 8004510:	b958      	cbnz	r0, 800452a <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 8004512:	68ab      	ldr	r3, [r5, #8]
 8004514:	b10b      	cbz	r3, 800451a <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8004516:	2600      	movs	r6, #0
 8004518:	e003      	b.n	8004522 <pb_decode_varint32_eof+0x26>
            if (eof)
 800451a:	2c00      	cmp	r4, #0
 800451c:	d0fb      	beq.n	8004516 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 800451e:	2301      	movs	r3, #1
 8004520:	7023      	strb	r3, [r4, #0]
}
 8004522:	4630      	mov	r0, r6
 8004524:	b002      	add	sp, #8
 8004526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 800452a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800452e:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da2a      	bge.n	800458c <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 8004536:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 800453a:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 800453c:	f10d 0107 	add.w	r1, sp, #7
 8004540:	4628      	mov	r0, r5
 8004542:	f7ff ffbb 	bl	80044bc <pb_readbyte>
 8004546:	2800      	cmp	r0, #0
 8004548:	d0e5      	beq.n	8004516 <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800454a:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 800454e:	2f1f      	cmp	r7, #31
 8004550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004554:	d90f      	bls.n	8004576 <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8004556:	2f3f      	cmp	r7, #63	; 0x3f
 8004558:	bf34      	ite	cc
 800455a:	21ff      	movcc	r1, #255	; 0xff
 800455c:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800455e:	b162      	cbz	r2, 800457a <pb_decode_varint32_eof+0x7e>
 8004560:	2c00      	cmp	r4, #0
 8004562:	da01      	bge.n	8004568 <pb_decode_varint32_eof+0x6c>
 8004564:	4299      	cmp	r1, r3
 8004566:	d008      	beq.n	800457a <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8004568:	68eb      	ldr	r3, [r5, #12]
 800456a:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <pb_decode_varint32_eof+0x98>)
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf08      	it	eq
 8004570:	4613      	moveq	r3, r2
 8004572:	60eb      	str	r3, [r5, #12]
 8004574:	e7cf      	b.n	8004516 <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8004576:	40ba      	lsls	r2, r7
 8004578:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 800457a:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 800457c:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 8004580:	d4dc      	bmi.n	800453c <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8004582:	2f23      	cmp	r7, #35	; 0x23
 8004584:	d102      	bne.n	800458c <pb_decode_varint32_eof+0x90>
 8004586:	f013 0f70 	tst.w	r3, #112	; 0x70
 800458a:	d1ed      	bne.n	8004568 <pb_decode_varint32_eof+0x6c>
   *dest = result;
 800458c:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8004590:	e7c7      	b.n	8004522 <pb_decode_varint32_eof+0x26>
 8004592:	bf00      	nop
 8004594:	0801013f 	.word	0x0801013f

08004598 <pb_read>:
{
 8004598:	b530      	push	{r4, r5, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	b085      	sub	sp, #20
 800459e:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 80045a0:	b9a9      	cbnz	r1, 80045ce <pb_read+0x36>
 80045a2:	6802      	ldr	r2, [r0, #0]
 80045a4:	4b17      	ldr	r3, [pc, #92]	; (8004604 <pb_read+0x6c>)
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d011      	beq.n	80045ce <pb_read+0x36>
		while (count > 16)
 80045aa:	2d10      	cmp	r5, #16
 80045ac:	d806      	bhi.n	80045bc <pb_read+0x24>
		return pb_read(stream, tmp, count);
 80045ae:	462a      	mov	r2, r5
 80045b0:	4669      	mov	r1, sp
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff fff0 	bl	8004598 <pb_read>
}
 80045b8:	b005      	add	sp, #20
 80045ba:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 80045bc:	2210      	movs	r2, #16
 80045be:	4669      	mov	r1, sp
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff ffe9 	bl	8004598 <pb_read>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d0f6      	beq.n	80045b8 <pb_read+0x20>
			count -= 16;
 80045ca:	3d10      	subs	r5, #16
 80045cc:	e7ed      	b.n	80045aa <pb_read+0x12>
    if (stream->bytes_left < count)
 80045ce:	68a3      	ldr	r3, [r4, #8]
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	d207      	bcs.n	80045e4 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80045d4:	68e3      	ldr	r3, [r4, #12]
 80045d6:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <pb_read+0x70>)
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf08      	it	eq
 80045dc:	4613      	moveq	r3, r2
 80045de:	60e3      	str	r3, [r4, #12]
 80045e0:	2000      	movs	r0, #0
 80045e2:	e7e9      	b.n	80045b8 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	462a      	mov	r2, r5
 80045e8:	4620      	mov	r0, r4
 80045ea:	4798      	blx	r3
 80045ec:	b930      	cbnz	r0, 80045fc <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 80045ee:	68e3      	ldr	r3, [r4, #12]
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <pb_read+0x74>)
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf08      	it	eq
 80045f6:	4613      	moveq	r3, r2
 80045f8:	60e3      	str	r3, [r4, #12]
 80045fa:	e7dd      	b.n	80045b8 <pb_read+0x20>
    stream->bytes_left -= count;
 80045fc:	68a3      	ldr	r3, [r4, #8]
 80045fe:	1b5b      	subs	r3, r3, r5
 8004600:	60a3      	str	r3, [r4, #8]
    return true;
 8004602:	e7d9      	b.n	80045b8 <pb_read+0x20>
 8004604:	080043c5 	.word	0x080043c5
 8004608:	08010128 	.word	0x08010128
 800460c:	08010136 	.word	0x08010136

08004610 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8004610:	2200      	movs	r2, #0
 8004612:	f7ff bf73 	b.w	80044fc <pb_decode_varint32_eof>
	...

08004618 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8004618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800461a:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800461c:	a901      	add	r1, sp, #4
{
 800461e:	4604      	mov	r4, r0
 8004620:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8004622:	f7ff fff5 	bl	8004610 <pb_decode_varint32>
 8004626:	4605      	mov	r5, r0
 8004628:	b188      	cbz	r0, 800464e <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 800462a:	9901      	ldr	r1, [sp, #4]
 800462c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004630:	d307      	bcc.n	8004642 <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004632:	68e3      	ldr	r3, [r4, #12]
 8004634:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <pb_dec_fixed_length_bytes+0x58>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf08      	it	eq
 800463a:	4613      	moveq	r3, r2
 800463c:	60e3      	str	r3, [r4, #12]
 800463e:	2500      	movs	r5, #0
 8004640:	e005      	b.n	800464e <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 8004642:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 8004646:	b929      	cbnz	r1, 8004654 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 8004648:	4630      	mov	r0, r6
 800464a:	f008 f886 	bl	800c75a <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 800464e:	4628      	mov	r0, r5
 8004650:	b003      	add	sp, #12
 8004652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8004654:	4291      	cmp	r1, r2
 8004656:	d002      	beq.n	800465e <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004658:	68e3      	ldr	r3, [r4, #12]
 800465a:	4a06      	ldr	r2, [pc, #24]	; (8004674 <pb_dec_fixed_length_bytes+0x5c>)
 800465c:	e7eb      	b.n	8004636 <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800465e:	460a      	mov	r2, r1
 8004660:	4620      	mov	r0, r4
 8004662:	4631      	mov	r1, r6
}
 8004664:	b003      	add	sp, #12
 8004666:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800466a:	f7ff bf95 	b.w	8004598 <pb_read>
 800466e:	bf00      	nop
 8004670:	0801014f 	.word	0x0801014f
 8004674:	0801015e 	.word	0x0801015e

08004678 <pb_dec_string>:
{
 8004678:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800467c:	4688      	mov	r8, r1
    if (!pb_decode_varint32(stream, &size))
 800467e:	a901      	add	r1, sp, #4
{
 8004680:	4604      	mov	r4, r0
 8004682:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8004684:	f7ff ffc4 	bl	8004610 <pb_decode_varint32>
 8004688:	b1a0      	cbz	r0, 80046b4 <pb_dec_string+0x3c>
    alloc_size = size + 1;
 800468a:	9d01      	ldr	r5, [sp, #4]
 800468c:	1c6a      	adds	r2, r5, #1
 800468e:	f04f 0700 	mov.w	r7, #0
 8004692:	d208      	bcs.n	80046a6 <pb_dec_string+0x2e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004694:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004698:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d10c      	bne.n	80046ba <pb_dec_string+0x42>
        PB_RETURN_ERROR(stream, "no malloc support");
 80046a0:	68e3      	ldr	r3, [r4, #12]
 80046a2:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <pb_dec_string+0x60>)
 80046a4:	e001      	b.n	80046aa <pb_dec_string+0x32>
        PB_RETURN_ERROR(stream, "size too large");
 80046a6:	68e3      	ldr	r3, [r4, #12]
 80046a8:	4a0c      	ldr	r2, [pc, #48]	; (80046dc <pb_dec_string+0x64>)
        PB_RETURN_ERROR(stream, "no malloc support");
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf08      	it	eq
 80046ae:	4613      	moveq	r3, r2
 80046b0:	60e3      	str	r3, [r4, #12]
 80046b2:	4638      	mov	r0, r7
}
 80046b4:	b002      	add	sp, #8
 80046b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (alloc_size > field->data_size)
 80046ba:	f8b8 3007 	ldrh.w	r3, [r8, #7]
 80046be:	4293      	cmp	r3, r2
 80046c0:	d202      	bcs.n	80046c8 <pb_dec_string+0x50>
            PB_RETURN_ERROR(stream, "string overflow");
 80046c2:	68e3      	ldr	r3, [r4, #12]
 80046c4:	4a06      	ldr	r2, [pc, #24]	; (80046e0 <pb_dec_string+0x68>)
 80046c6:	e7f0      	b.n	80046aa <pb_dec_string+0x32>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 80046c8:	462a      	mov	r2, r5
 80046ca:	4631      	mov	r1, r6
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7ff ff63 	bl	8004598 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 80046d2:	5577      	strb	r7, [r6, r5]
    return status;
 80046d4:	e7ee      	b.n	80046b4 <pb_dec_string+0x3c>
 80046d6:	bf00      	nop
 80046d8:	0801018f 	.word	0x0801018f
 80046dc:	08010180 	.word	0x08010180
 80046e0:	080101a1 	.word	0x080101a1

080046e4 <pb_dec_bytes>:
{
 80046e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046e6:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 80046e8:	a901      	add	r1, sp, #4
{
 80046ea:	4604      	mov	r4, r0
 80046ec:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 80046ee:	f7ff ff8f 	bl	8004610 <pb_decode_varint32>
 80046f2:	b198      	cbz	r0, 800471c <pb_dec_bytes+0x38>
    if (size > PB_SIZE_MAX)
 80046f4:	9a01      	ldr	r2, [sp, #4]
 80046f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80046fa:	d302      	bcc.n	8004702 <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80046fc:	68e3      	ldr	r3, [r4, #12]
 80046fe:	4a0f      	ldr	r2, [pc, #60]	; (800473c <pb_dec_bytes+0x58>)
 8004700:	e008      	b.n	8004714 <pb_dec_bytes+0x30>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004702:	78b3      	ldrb	r3, [r6, #2]
 8004704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004708:	2b80      	cmp	r3, #128	; 0x80
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800470a:	f102 0102 	add.w	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800470e:	d108      	bne.n	8004722 <pb_dec_bytes+0x3e>
        PB_RETURN_ERROR(stream, "no malloc support");
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	4a0b      	ldr	r2, [pc, #44]	; (8004740 <pb_dec_bytes+0x5c>)
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf08      	it	eq
 8004718:	4613      	moveq	r3, r2
 800471a:	60e3      	str	r3, [r4, #12]
}
 800471c:	2000      	movs	r0, #0
 800471e:	b002      	add	sp, #8
 8004720:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 8004722:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004726:	428b      	cmp	r3, r1
 8004728:	d3e8      	bcc.n	80046fc <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 800472a:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 800472c:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 800472e:	f821 2b02 	strh.w	r2, [r1], #2
}
 8004732:	b002      	add	sp, #8
 8004734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 8004738:	f7ff bf2e 	b.w	8004598 <pb_read>
 800473c:	0801014f 	.word	0x0801014f
 8004740:	0801018f 	.word	0x0801018f

08004744 <pb_decode_varint>:
{
 8004744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8004748:	2500      	movs	r5, #0
{
 800474a:	4606      	mov	r6, r0
 800474c:	460f      	mov	r7, r1
    uint64_t result = 0;
 800474e:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 8004750:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8004752:	f10d 0107 	add.w	r1, sp, #7
 8004756:	4630      	mov	r0, r6
 8004758:	f7ff feb0 	bl	80044bc <pb_readbyte>
 800475c:	b310      	cbz	r0, 80047a4 <pb_decode_varint+0x60>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800475e:	f89d c007 	ldrb.w	ip, [sp, #7]
 8004762:	f1a4 0320 	sub.w	r3, r4, #32
 8004766:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
 800476a:	f1c4 0120 	rsb	r1, r4, #32
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	fa22 f101 	lsr.w	r1, r2, r1
 8004776:	430b      	orrs	r3, r1
 8004778:	40a2      	lsls	r2, r4
    } while (byte & 0x80);
 800477a:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800477e:	ea45 0502 	orr.w	r5, r5, r2
 8004782:	ea43 0808 	orr.w	r8, r3, r8
        bitpos = (uint_fast8_t)(bitpos + 7);
 8004786:	f104 0407 	add.w	r4, r4, #7
    } while (byte & 0x80);
 800478a:	d102      	bne.n	8004792 <pb_decode_varint+0x4e>
    *dest = result;
 800478c:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 8004790:	e008      	b.n	80047a4 <pb_decode_varint+0x60>
        if (bitpos >= 64)
 8004792:	2c46      	cmp	r4, #70	; 0x46
 8004794:	d1dd      	bne.n	8004752 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8004796:	68f3      	ldr	r3, [r6, #12]
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <pb_decode_varint+0x68>)
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf08      	it	eq
 800479e:	4613      	moveq	r3, r2
 80047a0:	60f3      	str	r3, [r6, #12]
 80047a2:	2000      	movs	r0, #0
}
 80047a4:	b002      	add	sp, #8
 80047a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047aa:	bf00      	nop
 80047ac:	0801013f 	.word	0x0801013f

080047b0 <pb_dec_uvarint>:
{
 80047b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047b2:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 80047b4:	4669      	mov	r1, sp
{
 80047b6:	4604      	mov	r4, r0
 80047b8:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 80047ba:	f7ff ffc3 	bl	8004744 <pb_decode_varint>
 80047be:	b138      	cbz	r0, 80047d0 <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 80047c0:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d105      	bne.n	80047d4 <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 80047c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047cc:	e9c5 2300 	strd	r2, r3, [r5]
}
 80047d0:	b002      	add	sp, #8
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d10b      	bne.n	80047f0 <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 80047d8:	9b00      	ldr	r3, [sp, #0]
 80047da:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 80047dc:	e9dd 5100 	ldrd	r5, r1, [sp]
 80047e0:	2200      	movs	r2, #0
 80047e2:	4291      	cmp	r1, r2
 80047e4:	bf08      	it	eq
 80047e6:	429d      	cmpeq	r5, r3
 80047e8:	d0f2      	beq.n	80047d0 <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	4a0b      	ldr	r2, [pc, #44]	; (800481c <pb_dec_uvarint+0x6c>)
 80047ee:	e00e      	b.n	800480e <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d103      	bne.n	80047fc <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 80047f4:	9b00      	ldr	r3, [sp, #0]
 80047f6:	802b      	strh	r3, [r5, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	e7ef      	b.n	80047dc <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d104      	bne.n	800480a <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8004800:	9b00      	ldr	r3, [sp, #0]
 8004802:	702b      	strb	r3, [r5, #0]
 8004804:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004808:	e7e8      	b.n	80047dc <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	4a04      	ldr	r2, [pc, #16]	; (8004820 <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf08      	it	eq
 8004812:	4613      	moveq	r3, r2
 8004814:	60e3      	str	r3, [r4, #12]
 8004816:	2000      	movs	r0, #0
 8004818:	e7da      	b.n	80047d0 <pb_dec_uvarint+0x20>
 800481a:	bf00      	nop
 800481c:	080101c3 	.word	0x080101c3
 8004820:	080101b1 	.word	0x080101b1

08004824 <pb_dec_varint>:
{
 8004824:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004826:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8004828:	4669      	mov	r1, sp
{
 800482a:	4605      	mov	r5, r0
 800482c:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 800482e:	f7ff ff89 	bl	8004744 <pb_decode_varint>
 8004832:	b138      	cbz	r0, 8004844 <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8004834:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004838:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 800483a:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 800483e:	d103      	bne.n	8004848 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 8004840:	e9c4 2100 	strd	r2, r1, [r4]
}
 8004844:	b002      	add	sp, #8
 8004846:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8004848:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 800484a:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 800484e:	d101      	bne.n	8004854 <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8004850:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 8004852:	e7f7      	b.n	8004844 <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 8004854:	2b02      	cmp	r3, #2
 8004856:	d109      	bne.n	800486c <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8004858:	b213      	sxth	r3, r2
 800485a:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800485c:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 800485e:	42b1      	cmp	r1, r6
 8004860:	bf08      	it	eq
 8004862:	4293      	cmpeq	r3, r2
 8004864:	d0ee      	beq.n	8004844 <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8004866:	68eb      	ldr	r3, [r5, #12]
 8004868:	4a07      	ldr	r2, [pc, #28]	; (8004888 <pb_dec_varint+0x64>)
 800486a:	e006      	b.n	800487a <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 800486c:	2b01      	cmp	r3, #1
 800486e:	d102      	bne.n	8004876 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004870:	b253      	sxtb	r3, r2
 8004872:	7023      	strb	r3, [r4, #0]
 8004874:	e7f2      	b.n	800485c <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8004876:	68eb      	ldr	r3, [r5, #12]
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf08      	it	eq
 800487e:	4613      	moveq	r3, r2
 8004880:	60eb      	str	r3, [r5, #12]
 8004882:	2000      	movs	r0, #0
 8004884:	e7de      	b.n	8004844 <pb_dec_varint+0x20>
 8004886:	bf00      	nop
 8004888:	080101c3 	.word	0x080101c3
 800488c:	080101b1 	.word	0x080101b1

08004890 <pb_decode_tag>:
{
 8004890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004892:	461d      	mov	r5, r3
    *eof = false;
 8004894:	2300      	movs	r3, #0
 8004896:	702b      	strb	r3, [r5, #0]
{
 8004898:	460e      	mov	r6, r1
    *wire_type = (pb_wire_type_t) 0;
 800489a:	700b      	strb	r3, [r1, #0]
{
 800489c:	4617      	mov	r7, r2
    *tag = 0;
 800489e:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80048a0:	a901      	add	r1, sp, #4
 80048a2:	462a      	mov	r2, r5
 80048a4:	f7ff fe2a 	bl	80044fc <pb_decode_varint32_eof>
 80048a8:	b120      	cbz	r0, 80048b4 <pb_decode_tag+0x24>
    if (temp == 0)
 80048aa:	9c01      	ldr	r4, [sp, #4]
 80048ac:	b924      	cbnz	r4, 80048b8 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 80048ae:	2301      	movs	r3, #1
 80048b0:	702b      	strb	r3, [r5, #0]
        return false;
 80048b2:	4620      	mov	r0, r4
}
 80048b4:	b003      	add	sp, #12
 80048b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 80048b8:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 80048ba:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 80048be:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80048c0:	7034      	strb	r4, [r6, #0]
    return true;
 80048c2:	e7f7      	b.n	80048b4 <pb_decode_tag+0x24>

080048c4 <pb_skip_field>:
{
 80048c4:	b513      	push	{r0, r1, r4, lr}
 80048c6:	4604      	mov	r4, r0
    switch (wire_type)
 80048c8:	2905      	cmp	r1, #5
 80048ca:	d821      	bhi.n	8004910 <pb_skip_field+0x4c>
 80048cc:	e8df f001 	tbb	[pc, r1]
 80048d0:	20170f03 	.word	0x20170f03
 80048d4:	1e20      	.short	0x1e20
        if (!pb_read(stream, &byte, 1))
 80048d6:	2201      	movs	r2, #1
 80048d8:	a901      	add	r1, sp, #4
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff fe5c 	bl	8004598 <pb_read>
 80048e0:	b118      	cbz	r0, 80048ea <pb_skip_field+0x26>
    } while (byte & 0x80);
 80048e2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	dbf5      	blt.n	80048d6 <pb_skip_field+0x12>
}
 80048ea:	b002      	add	sp, #8
 80048ec:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80048ee:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80048f0:	2100      	movs	r1, #0
 80048f2:	4620      	mov	r0, r4
}
 80048f4:	b002      	add	sp, #8
 80048f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80048fa:	f7ff be4d 	b.w	8004598 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 80048fe:	a901      	add	r1, sp, #4
 8004900:	f7ff fe86 	bl	8004610 <pb_decode_varint32>
 8004904:	2800      	cmp	r0, #0
 8004906:	d0f0      	beq.n	80048ea <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8004908:	9a01      	ldr	r2, [sp, #4]
 800490a:	e7f1      	b.n	80048f0 <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800490c:	2204      	movs	r2, #4
 800490e:	e7ef      	b.n	80048f0 <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8004910:	68c3      	ldr	r3, [r0, #12]
 8004912:	4a03      	ldr	r2, [pc, #12]	; (8004920 <pb_skip_field+0x5c>)
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf08      	it	eq
 8004918:	4613      	moveq	r3, r2
 800491a:	60c3      	str	r3, [r0, #12]
 800491c:	2000      	movs	r0, #0
 800491e:	e7e4      	b.n	80048ea <pb_skip_field+0x26>
 8004920:	080101d5 	.word	0x080101d5

08004924 <pb_make_string_substream>:
{
 8004924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004926:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004928:	a901      	add	r1, sp, #4
{
 800492a:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 800492c:	f7ff fe70 	bl	8004610 <pb_decode_varint32>
 8004930:	4606      	mov	r6, r0
 8004932:	b168      	cbz	r0, 8004950 <pb_make_string_substream+0x2c>
    *substream = *stream;
 8004934:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004938:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800493c:	9901      	ldr	r1, [sp, #4]
 800493e:	428a      	cmp	r2, r1
 8004940:	d209      	bcs.n	8004956 <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	4a06      	ldr	r2, [pc, #24]	; (8004960 <pb_make_string_substream+0x3c>)
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf08      	it	eq
 800494a:	4613      	moveq	r3, r2
 800494c:	60e3      	str	r3, [r4, #12]
 800494e:	2600      	movs	r6, #0
}
 8004950:	4630      	mov	r0, r6
 8004952:	b002      	add	sp, #8
 8004954:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 8004956:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8004958:	68a3      	ldr	r3, [r4, #8]
 800495a:	1a5b      	subs	r3, r3, r1
 800495c:	60a3      	str	r3, [r4, #8]
    return true;
 800495e:	e7f7      	b.n	8004950 <pb_make_string_substream+0x2c>
 8004960:	080101e7 	.word	0x080101e7

08004964 <pb_close_string_substream>:
    if (substream->bytes_left) {
 8004964:	688a      	ldr	r2, [r1, #8]
{
 8004966:	b538      	push	{r3, r4, r5, lr}
 8004968:	4605      	mov	r5, r0
 800496a:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 800496c:	b92a      	cbnz	r2, 800497a <pb_close_string_substream+0x16>
    stream->state = substream->state;
 800496e:	6863      	ldr	r3, [r4, #4]
 8004970:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 8004972:	68e3      	ldr	r3, [r4, #12]
 8004974:	60eb      	str	r3, [r5, #12]
    return true;
 8004976:	2001      	movs	r0, #1
}
 8004978:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 800497a:	2100      	movs	r1, #0
 800497c:	4620      	mov	r0, r4
 800497e:	f7ff fe0b 	bl	8004598 <pb_read>
 8004982:	2800      	cmp	r0, #0
 8004984:	d1f3      	bne.n	800496e <pb_close_string_substream+0xa>
 8004986:	e7f7      	b.n	8004978 <pb_close_string_substream+0x14>

08004988 <decode_field>:
{
 8004988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800498c:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 800498e:	6851      	ldr	r1, [r2, #4]
{
 8004990:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 8004992:	788a      	ldrb	r2, [r1, #2]
 8004994:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8004998:	2c40      	cmp	r4, #64	; 0x40
{
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 800499e:	f000 8083 	beq.w	8004aa8 <decode_field+0x120>
 80049a2:	2c80      	cmp	r4, #128	; 0x80
 80049a4:	d07d      	beq.n	8004aa2 <decode_field+0x11a>
 80049a6:	b964      	cbnz	r4, 80049c2 <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 80049a8:	f002 0c0f 	and.w	ip, r2, #15
 80049ac:	4f6f      	ldr	r7, [pc, #444]	; (8004b6c <decode_field+0x1e4>)
 80049ae:	f002 0230 	and.w	r2, r2, #48	; 0x30
    switch (PB_HTYPE(type))
 80049b2:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 80049b4:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 80049b8:	d02b      	beq.n	8004a12 <decode_field+0x8a>
 80049ba:	d805      	bhi.n	80049c8 <decode_field+0x40>
 80049bc:	b1da      	cbz	r2, 80049f6 <decode_field+0x6e>
 80049be:	2a10      	cmp	r2, #16
 80049c0:	d01f      	beq.n	8004a02 <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 80049c2:	68eb      	ldr	r3, [r5, #12]
 80049c4:	4a6a      	ldr	r2, [pc, #424]	; (8004b70 <decode_field+0x1e8>)
 80049c6:	e04c      	b.n	8004a62 <decode_field+0xda>
    switch (PB_HTYPE(type))
 80049c8:	2a30      	cmp	r2, #48	; 0x30
 80049ca:	d1fa      	bne.n	80049c2 <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 80049cc:	6973      	ldr	r3, [r6, #20]
 80049ce:	880a      	ldrh	r2, [r1, #0]
 80049d0:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80049d2:	f1bc 0f07 	cmp.w	ip, #7
 80049d6:	d10b      	bne.n	80049f0 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 80049d8:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80049dc:	6930      	ldr	r0, [r6, #16]
 80049de:	4621      	mov	r1, r4
 80049e0:	f007 febb 	bl	800c75a <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 80049e4:	6873      	ldr	r3, [r6, #4]
 80049e6:	6931      	ldr	r1, [r6, #16]
 80049e8:	f8d3 000b 	ldr.w	r0, [r3, #11]
 80049ec:	f7ff fd55 	bl	800449a <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 80049f0:	6932      	ldr	r2, [r6, #16]
 80049f2:	6871      	ldr	r1, [r6, #4]
 80049f4:	e00b      	b.n	8004a0e <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 80049f6:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 80049f8:	463b      	mov	r3, r7
}
 80049fa:	b009      	add	sp, #36	; 0x24
 80049fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8004a00:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8004a02:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8004a06:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8004a08:	bf1c      	itt	ne
 8004a0a:	2001      	movne	r0, #1
 8004a0c:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8004a0e:	4628      	mov	r0, r5
 8004a10:	e7f2      	b.n	80049f8 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 8004a12:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8004a14:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 8004a18:	d134      	bne.n	8004a84 <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8004a1a:	f1bc 0f04 	cmp.w	ip, #4
 8004a1e:	d831      	bhi.n	8004a84 <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 8004a20:	a904      	add	r1, sp, #16
 8004a22:	f7ff ff7f 	bl	8004924 <pb_make_string_substream>
 8004a26:	4604      	mov	r4, r0
 8004a28:	b970      	cbnz	r0, 8004a48 <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 8004a2a:	2400      	movs	r4, #0
 8004a2c:	e026      	b.n	8004a7c <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004a2e:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 8004a32:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 8004a34:	fb03 2200 	mla	r2, r3, r0, r2
 8004a38:	a804      	add	r0, sp, #16
 8004a3a:	47b8      	blx	r7
 8004a3c:	b1b0      	cbz	r0, 8004a6c <decode_field+0xe4>
                    (*size)++;
 8004a3e:	f8b8 3000 	ldrh.w	r3, [r8]
 8004a42:	3301      	adds	r3, #1
 8004a44:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8004a48:	9b06      	ldr	r3, [sp, #24]
 8004a4a:	b133      	cbz	r3, 8004a5a <decode_field+0xd2>
 8004a4c:	6871      	ldr	r1, [r6, #4]
 8004a4e:	f8b8 3000 	ldrh.w	r3, [r8]
 8004a52:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d8e9      	bhi.n	8004a2e <decode_field+0xa6>
                if (substream.bytes_left != 0)
 8004a5a:	9b06      	ldr	r3, [sp, #24]
 8004a5c:	b143      	cbz	r3, 8004a70 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 8004a5e:	68eb      	ldr	r3, [r5, #12]
 8004a60:	4a44      	ldr	r2, [pc, #272]	; (8004b74 <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf08      	it	eq
 8004a66:	4613      	moveq	r3, r2
 8004a68:	60eb      	str	r3, [r5, #12]
 8004a6a:	e7de      	b.n	8004a2a <decode_field+0xa2>
                        status = false;
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	e7f4      	b.n	8004a5a <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7ff ff76 	bl	8004964 <pb_close_string_substream>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d0d6      	beq.n	8004a2a <decode_field+0xa2>
}
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	b009      	add	sp, #36	; 0x24
 8004a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004a84:	f8b8 3000 	ldrh.w	r3, [r8]
 8004a88:	6932      	ldr	r2, [r6, #16]
 8004a8a:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 8004a8e:	1c5c      	adds	r4, r3, #1
 8004a90:	f8a8 4000 	strh.w	r4, [r8]
 8004a94:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	d9e0      	bls.n	8004a5e <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 8004a9c:	fb03 2200 	mla	r2, r3, r0, r2
 8004aa0:	e7b5      	b.n	8004a0e <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 8004aa2:	68c3      	ldr	r3, [r0, #12]
 8004aa4:	4a34      	ldr	r2, [pc, #208]	; (8004b78 <decode_field+0x1f0>)
 8004aa6:	e7dc      	b.n	8004a62 <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8004aa8:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8004aaa:	b10f      	cbz	r7, 8004ab0 <decode_field+0x128>
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b932      	cbnz	r2, 8004abe <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4628      	mov	r0, r5
}
 8004ab4:	b009      	add	sp, #36	; 0x24
 8004ab6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8004aba:	f7ff bf03 	b.w	80048c4 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8004abe:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8004ac0:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8004ac4:	d11c      	bne.n	8004b00 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 8004ac6:	a904      	add	r1, sp, #16
 8004ac8:	f7ff ff2c 	bl	8004924 <pb_make_string_substream>
 8004acc:	4604      	mov	r4, r0
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0d4      	beq.n	8004a7c <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6871      	ldr	r1, [r6, #4]
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	a804      	add	r0, sp, #16
 8004ada:	4798      	blx	r3
 8004adc:	4604      	mov	r4, r0
 8004ade:	b930      	cbnz	r0, 8004aee <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 8004ae0:	68eb      	ldr	r3, [r5, #12]
 8004ae2:	4a26      	ldr	r2, [pc, #152]	; (8004b7c <decode_field+0x1f4>)
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf08      	it	eq
 8004ae8:	4613      	moveq	r3, r2
 8004aea:	60eb      	str	r3, [r5, #12]
 8004aec:	e7c6      	b.n	8004a7c <decode_field+0xf4>
        } while (substream.bytes_left);
 8004aee:	9b06      	ldr	r3, [sp, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ee      	bne.n	8004ad2 <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 8004af4:	a904      	add	r1, sp, #16
 8004af6:	4628      	mov	r0, r5
 8004af8:	f7ff ff34 	bl	8004964 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004afc:	4604      	mov	r4, r0
 8004afe:	e7bd      	b.n	8004a7c <decode_field+0xf4>
    switch (wire_type)
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d020      	beq.n	8004b46 <decode_field+0x1be>
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d026      	beq.n	8004b56 <decode_field+0x1ce>
 8004b08:	bb63      	cbnz	r3, 8004b64 <decode_field+0x1dc>
 8004b0a:	461c      	mov	r4, r3
 8004b0c:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 8004b10:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 8004b12:	2c0b      	cmp	r4, #11
 8004b14:	d089      	beq.n	8004a2a <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 8004b16:	2201      	movs	r2, #1
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f7ff fd3c 	bl	8004598 <pb_read>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d082      	beq.n	8004a2a <decode_field+0xa2>
            } while (*buf++ & 0x80);
 8004b24:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dbf1      	blt.n	8004b10 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <decode_field+0x1f8>)
 8004b2e:	9304      	str	r3, [sp, #16]
 8004b30:	ab01      	add	r3, sp, #4
 8004b32:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004b3a:	6871      	ldr	r1, [r6, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4642      	mov	r2, r8
 8004b40:	a804      	add	r0, sp, #16
 8004b42:	4798      	blx	r3
 8004b44:	e7da      	b.n	8004afc <decode_field+0x174>
            return pb_read(stream, buf, 8);
 8004b46:	2208      	movs	r2, #8
 8004b48:	a901      	add	r1, sp, #4
 8004b4a:	f7ff fd25 	bl	8004598 <pb_read>
            *size = 8;
 8004b4e:	2408      	movs	r4, #8
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d1eb      	bne.n	8004b2c <decode_field+0x1a4>
 8004b54:	e769      	b.n	8004a2a <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 8004b56:	2204      	movs	r2, #4
 8004b58:	eb0d 0102 	add.w	r1, sp, r2
 8004b5c:	f7ff fd1c 	bl	8004598 <pb_read>
            *size = 4;
 8004b60:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8004b62:	e7f5      	b.n	8004b50 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8004b64:	68c3      	ldr	r3, [r0, #12]
 8004b66:	4a07      	ldr	r2, [pc, #28]	; (8004b84 <decode_field+0x1fc>)
 8004b68:	e77b      	b.n	8004a62 <decode_field+0xda>
 8004b6a:	bf00      	nop
 8004b6c:	08010284 	.word	0x08010284
 8004b70:	0801020e 	.word	0x0801020e
 8004b74:	080101ff 	.word	0x080101ff
 8004b78:	0801018f 	.word	0x0801018f
 8004b7c:	08010221 	.word	0x08010221
 8004b80:	080043c5 	.word	0x080043c5
 8004b84:	080101d5 	.word	0x080101d5

08004b88 <pb_decode_noinit>:
{
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	b091      	sub	sp, #68	; 0x44
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8004b8e:	2500      	movs	r5, #0
{
 8004b90:	4604      	mov	r4, r0
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8004b92:	a804      	add	r0, sp, #16
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8004b94:	e9cd 5502 	strd	r5, r5, [sp, #8]
    pb_size_t fixed_count_size = 0;
 8004b98:	f8ad 5002 	strh.w	r5, [sp, #2]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8004b9c:	f7ff fba8 	bl	80042f0 <pb_field_iter_begin>
    uint32_t extension_range_start = 0;
 8004ba0:	46a8      	mov	r8, r5
    while (stream->bytes_left)
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	b9f3      	cbnz	r3, 8004be4 <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 8004ba6:	b135      	cbz	r5, 8004bb6 <pb_decode_noinit+0x2e>
 8004ba8:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 8004bac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	f040 8094 	bne.w	8004cde <pb_decode_noinit+0x156>
            last_type = iter.pos->type;
 8004bb6:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
        } while (pb_field_iter_next(&iter));
 8004bba:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8004bbc:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8004bbe:	f7ff fba9 	bl	8004314 <pb_field_iter_next>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d1f7      	bne.n	8004bb6 <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8004bc6:	f016 0f30 	tst.w	r6, #48	; 0x30
 8004bca:	d103      	bne.n	8004bd4 <pb_decode_noinit+0x4c>
 8004bcc:	9b05      	ldr	r3, [sp, #20]
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b103      	cbz	r3, 8004bd4 <pb_decode_noinit+0x4c>
            req_field_count++;
 8004bd2:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004bd4:	2d40      	cmp	r5, #64	; 0x40
 8004bd6:	f200 80ca 	bhi.w	8004d6e <pb_decode_noinit+0x1e6>
        if (req_field_count > 0)
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	f040 80c8 	bne.w	8004d70 <pb_decode_noinit+0x1e8>
    return true;
 8004be0:	2001      	movs	r0, #1
 8004be2:	e00c      	b.n	8004bfe <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004be4:	f10d 0301 	add.w	r3, sp, #1
 8004be8:	aa01      	add	r2, sp, #4
 8004bea:	4669      	mov	r1, sp
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff fe4f 	bl	8004890 <pb_decode_tag>
 8004bf2:	b938      	cbnz	r0, 8004c04 <pb_decode_noinit+0x7c>
            if (eof)
 8004bf4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1d4      	bne.n	8004ba6 <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004bfc:	2000      	movs	r0, #0
}
 8004bfe:	b011      	add	sp, #68	; 0x44
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8004c04:	9f01      	ldr	r7, [sp, #4]
 8004c06:	a804      	add	r0, sp, #16
 8004c08:	4639      	mov	r1, r7
 8004c0a:	f7ff fbc4 	bl	8004396 <pb_field_iter_find>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d152      	bne.n	8004cb8 <pb_decode_noinit+0x130>
            if (tag >= extension_range_start)
 8004c12:	4547      	cmp	r7, r8
 8004c14:	f0c0 80b3 	bcc.w	8004d7e <pb_decode_noinit+0x1f6>
    const pb_field_t *start = iter->pos;
 8004c18:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8004c1a:	9a05      	ldr	r2, [sp, #20]
 8004c1c:	7893      	ldrb	r3, [r2, #2]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	f000 80b4 	beq.w	8004d90 <pb_decode_noinit+0x208>
        (void)pb_field_iter_next(iter);
 8004c28:	a804      	add	r0, sp, #16
 8004c2a:	f7ff fb73 	bl	8004314 <pb_field_iter_next>
    } while (iter->pos != start);
 8004c2e:	9b05      	ldr	r3, [sp, #20]
 8004c30:	429e      	cmp	r6, r3
 8004c32:	d1f2      	bne.n	8004c1a <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 8004c34:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 8004c38:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8004c3a:	f89d b000 	ldrb.w	fp, [sp]
                if (tag >= extension_range_start)
 8004c3e:	f0c0 809e 	bcc.w	8004d7e <pb_decode_noinit+0x1f6>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8004c42:	9a08      	ldr	r2, [sp, #32]
                    size_t pos = stream->bytes_left;
 8004c44:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8004c48:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004c4a:	68a2      	ldr	r2, [r4, #8]
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	f000 8093 	beq.w	8004d78 <pb_decode_noinit+0x1f0>
 8004c52:	4591      	cmp	r9, r2
 8004c54:	d1a5      	bne.n	8004ba2 <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8004c56:	6832      	ldr	r2, [r6, #0]
 8004c58:	f8d2 a000 	ldr.w	sl, [r2]
 8004c5c:	f1ba 0f00 	cmp.w	sl, #0
 8004c60:	d008      	beq.n	8004c74 <pb_decode_noinit+0xec>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8004c62:	465b      	mov	r3, fp
 8004c64:	463a      	mov	r2, r7
 8004c66:	4631      	mov	r1, r6
 8004c68:	4620      	mov	r0, r4
 8004c6a:	47d0      	blx	sl
        if (!status)
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d0c5      	beq.n	8004bfc <pb_decode_noinit+0x74>
        extension = extension->next;
 8004c70:	68b6      	ldr	r6, [r6, #8]
 8004c72:	e7ea      	b.n	8004c4a <pb_decode_noinit+0xc2>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8004c74:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8004c78:	f8ba 2000 	ldrh.w	r2, [sl]
 8004c7c:	4297      	cmp	r7, r2
 8004c7e:	d1f7      	bne.n	8004c70 <pb_decode_noinit+0xe8>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8004c80:	6872      	ldr	r2, [r6, #4]
 8004c82:	4651      	mov	r1, sl
 8004c84:	a80a      	add	r0, sp, #40	; 0x28
 8004c86:	f7ff fb33 	bl	80042f0 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8004c8a:	6872      	ldr	r2, [r6, #4]
 8004c8c:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8004c8e:	f106 020c 	add.w	r2, r6, #12
 8004c92:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004c94:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8004c98:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004c9c:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8004c9e:	bf08      	it	eq
 8004ca0:	1d32      	addeq	r2, r6, #4
    extension->found = true;
 8004ca2:	f04f 0301 	mov.w	r3, #1
        iter->pData = &extension->dest;
 8004ca6:	bf08      	it	eq
 8004ca8:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8004caa:	4659      	mov	r1, fp
    extension->found = true;
 8004cac:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8004cae:	aa0a      	add	r2, sp, #40	; 0x28
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7ff fe69 	bl	8004988 <decode_field>
 8004cb6:	e7d9      	b.n	8004c6c <pb_decode_noinit+0xe4>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8004cb8:	9a05      	ldr	r2, [sp, #20]
 8004cba:	7893      	ldrb	r3, [r2, #2]
 8004cbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d121      	bne.n	8004d08 <pb_decode_noinit+0x180>
            && iter.pSize == iter.pData)
 8004cc4:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	d116      	bne.n	8004cfa <pb_decode_noinit+0x172>
            if (fixed_count_field != iter.pos) {
 8004ccc:	42aa      	cmp	r2, r5
 8004cce:	d010      	beq.n	8004cf2 <pb_decode_noinit+0x16a>
                if (fixed_count_field != NULL &&
 8004cd0:	b165      	cbz	r5, 8004cec <pb_decode_noinit+0x164>
 8004cd2:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 8004cd6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004cda:	4299      	cmp	r1, r3
 8004cdc:	d006      	beq.n	8004cec <pb_decode_noinit+0x164>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004cde:	68e3      	ldr	r3, [r4, #12]
 8004ce0:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <pb_decode_noinit+0x210>)
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf08      	it	eq
 8004ce6:	4613      	moveq	r3, r2
 8004ce8:	60e3      	str	r3, [r4, #12]
 8004cea:	e787      	b.n	8004bfc <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8004cf2:	f10d 0302 	add.w	r3, sp, #2
 8004cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf8:	4615      	mov	r5, r2
        if (!decode_field(stream, wire_type, &iter))
 8004cfa:	f89d 1000 	ldrb.w	r1, [sp]
 8004cfe:	aa04      	add	r2, sp, #16
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7ff fe41 	bl	8004988 <decode_field>
 8004d06:	e03f      	b.n	8004d88 <pb_decode_noinit+0x200>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f6      	bne.n	8004cfa <pb_decode_noinit+0x172>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8004d0c:	9a06      	ldr	r2, [sp, #24]
 8004d0e:	2a3f      	cmp	r2, #63	; 0x3f
 8004d10:	d8f3      	bhi.n	8004cfa <pb_decode_noinit+0x172>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8004d12:	0951      	lsrs	r1, r2, #5
 8004d14:	ab10      	add	r3, sp, #64	; 0x40
 8004d16:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004d1a:	f002 021f 	and.w	r2, r2, #31
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8004d22:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f841 3c38 	str.w	r3, [r1, #-56]
 8004d2c:	e7e5      	b.n	8004cfa <pb_decode_noinit+0x172>
                if (fields_seen[i] != allbits)
 8004d2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d32:	3601      	adds	r6, #1
 8004d34:	d006      	beq.n	8004d44 <pb_decode_noinit+0x1bc>
                    PB_RETURN_ERROR(stream, "missing required field");
 8004d36:	68e3      	ldr	r3, [r4, #12]
 8004d38:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <pb_decode_noinit+0x214>)
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf08      	it	eq
 8004d3e:	4613      	moveq	r3, r2
 8004d40:	60e3      	str	r3, [r4, #12]
 8004d42:	e75c      	b.n	8004bfe <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 8004d44:	3201      	adds	r2, #1
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d1f1      	bne.n	8004d2e <pb_decode_noinit+0x1a6>
            if ((req_field_count & 31) != 0)
 8004d4a:	f015 051f 	ands.w	r5, r5, #31
 8004d4e:	f43f af47 	beq.w	8004be0 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 8004d52:	aa10      	add	r2, sp, #64	; 0x40
 8004d54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8004d58:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 8004d5c:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8004d60:	f04f 32ff 	mov.w	r2, #4294967295
 8004d64:	40ea      	lsrs	r2, r5
                if (fields_seen[req_field_count >> 5] !=
 8004d66:	4293      	cmp	r3, r2
 8004d68:	f43f af3a 	beq.w	8004be0 <pb_decode_noinit+0x58>
 8004d6c:	e7e3      	b.n	8004d36 <pb_decode_noinit+0x1ae>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004d6e:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8004d70:	096b      	lsrs	r3, r5, #5
 8004d72:	a902      	add	r1, sp, #8
 8004d74:	2200      	movs	r2, #0
 8004d76:	e7e6      	b.n	8004d46 <pb_decode_noinit+0x1be>
                    if (pos != stream->bytes_left)
 8004d78:	4591      	cmp	r9, r2
 8004d7a:	f47f af12 	bne.w	8004ba2 <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8004d7e:	f89d 1000 	ldrb.w	r1, [sp]
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff fd9e 	bl	80048c4 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	f47f af0a 	bne.w	8004ba2 <pb_decode_noinit+0x1a>
 8004d8e:	e735      	b.n	8004bfc <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 8004d90:	f8b2 8000 	ldrh.w	r8, [r2]
 8004d94:	e750      	b.n	8004c38 <pb_decode_noinit+0xb0>
 8004d96:	bf00      	nop
 8004d98:	08010231 	.word	0x08010231
 8004d9c:	08010252 	.word	0x08010252

08004da0 <pb_decode>:
{
 8004da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004da2:	460c      	mov	r4, r1
 8004da4:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 8004da6:	4611      	mov	r1, r2
 8004da8:	4620      	mov	r0, r4
 8004daa:	9201      	str	r2, [sp, #4]
 8004dac:	f7ff fb75 	bl	800449a <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8004db0:	9a01      	ldr	r2, [sp, #4]
 8004db2:	4621      	mov	r1, r4
 8004db4:	4628      	mov	r0, r5
}
 8004db6:	b003      	add	sp, #12
 8004db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8004dbc:	f7ff bee4 	b.w	8004b88 <pb_decode_noinit>

08004dc0 <pb_dec_submessage>:
{
 8004dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	460e      	mov	r6, r1
 8004dc6:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8004dc8:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 8004dcc:	a902      	add	r1, sp, #8
{
 8004dce:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8004dd0:	f7ff fda8 	bl	8004924 <pb_make_string_substream>
 8004dd4:	b1e0      	cbz	r0, 8004e10 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 8004dd6:	f8d6 400b 	ldr.w	r4, [r6, #11]
 8004dda:	9a01      	ldr	r2, [sp, #4]
 8004ddc:	b944      	cbnz	r4, 8004df0 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004dde:	68eb      	ldr	r3, [r5, #12]
 8004de0:	4a0e      	ldr	r2, [pc, #56]	; (8004e1c <pb_dec_submessage+0x5c>)
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf08      	it	eq
 8004de6:	4613      	moveq	r3, r2
 8004de8:	60eb      	str	r3, [r5, #12]
}
 8004dea:	4620      	mov	r0, r4
 8004dec:	b007      	add	sp, #28
 8004dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8004df0:	78b3      	ldrb	r3, [r6, #2]
 8004df2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004df6:	2b20      	cmp	r3, #32
        status = pb_decode(&substream, submsg_fields, dest);
 8004df8:	4639      	mov	r1, r7
 8004dfa:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8004dfc:	d10a      	bne.n	8004e14 <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 8004dfe:	f7ff ffcf 	bl	8004da0 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8004e02:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8004e04:	a902      	add	r1, sp, #8
 8004e06:	4628      	mov	r0, r5
 8004e08:	f7ff fdac 	bl	8004964 <pb_close_string_substream>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d1ec      	bne.n	8004dea <pb_dec_submessage+0x2a>
        return false;
 8004e10:	2400      	movs	r4, #0
 8004e12:	e7ea      	b.n	8004dea <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8004e14:	f7ff feb8 	bl	8004b88 <pb_decode_noinit>
 8004e18:	e7f3      	b.n	8004e02 <pb_dec_submessage+0x42>
 8004e1a:	bf00      	nop
 8004e1c:	08010269 	.word	0x08010269

08004e20 <pb_decode_delimited>:
{
 8004e20:	b530      	push	{r4, r5, lr}
 8004e22:	b087      	sub	sp, #28
 8004e24:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8004e26:	a902      	add	r1, sp, #8
{
 8004e28:	4605      	mov	r5, r0
 8004e2a:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8004e2c:	f7ff fd7a 	bl	8004924 <pb_make_string_substream>
 8004e30:	b150      	cbz	r0, 8004e48 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8004e32:	4621      	mov	r1, r4
 8004e34:	9a01      	ldr	r2, [sp, #4]
 8004e36:	a802      	add	r0, sp, #8
 8004e38:	f7ff ffb2 	bl	8004da0 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8004e3c:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 8004e3e:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff fd8f 	bl	8004964 <pb_close_string_substream>
 8004e46:	b900      	cbnz	r0, 8004e4a <pb_decode_delimited+0x2a>
        return false;
 8004e48:	2400      	movs	r4, #0
}
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	b007      	add	sp, #28
 8004e4e:	bd30      	pop	{r4, r5, pc}

08004e50 <pb_decode_svarint>:
{
 8004e50:	b513      	push	{r0, r1, r4, lr}
 8004e52:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8004e54:	4669      	mov	r1, sp
 8004e56:	f7ff fc75 	bl	8004744 <pb_decode_varint>
 8004e5a:	b160      	cbz	r0, 8004e76 <pb_decode_svarint+0x26>
    if (value & 1)
 8004e5c:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8004e60:	084a      	lsrs	r2, r1, #1
 8004e62:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    if (value & 1)
 8004e66:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8004e68:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8004e6c:	bf44      	itt	mi
 8004e6e:	43d2      	mvnmi	r2, r2
 8004e70:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8004e72:	e9c4 2300 	strd	r2, r3, [r4]
}
 8004e76:	b002      	add	sp, #8
 8004e78:	bd10      	pop	{r4, pc}
	...

08004e7c <pb_dec_svarint>:
{
 8004e7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e7e:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 8004e80:	4669      	mov	r1, sp
{
 8004e82:	4604      	mov	r4, r0
 8004e84:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 8004e86:	f7ff ffe3 	bl	8004e50 <pb_decode_svarint>
 8004e8a:	b138      	cbz	r0, 8004e9c <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8004e8c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d105      	bne.n	8004ea0 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 8004e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e98:	e9c5 2300 	strd	r2, r3, [r5]
}
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d10b      	bne.n	8004ebc <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 8004ea4:	9b00      	ldr	r3, [sp, #0]
 8004ea6:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 8004ea8:	e9dd 5100 	ldrd	r5, r1, [sp]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8004eac:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 8004eae:	4291      	cmp	r1, r2
 8004eb0:	bf08      	it	eq
 8004eb2:	429d      	cmpeq	r5, r3
 8004eb4:	d0f2      	beq.n	8004e9c <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <pb_dec_svarint+0x68>)
 8004eba:	e00d      	b.n	8004ed8 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d103      	bne.n	8004ec8 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8004ec0:	f9bd 3000 	ldrsh.w	r3, [sp]
 8004ec4:	802b      	strh	r3, [r5, #0]
 8004ec6:	e7ef      	b.n	8004ea8 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d103      	bne.n	8004ed4 <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8004ecc:	f99d 3000 	ldrsb.w	r3, [sp]
 8004ed0:	702b      	strb	r3, [r5, #0]
 8004ed2:	e7e9      	b.n	8004ea8 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8004ed4:	68e3      	ldr	r3, [r4, #12]
 8004ed6:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf08      	it	eq
 8004edc:	4613      	moveq	r3, r2
 8004ede:	60e3      	str	r3, [r4, #12]
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e7db      	b.n	8004e9c <pb_dec_svarint+0x20>
 8004ee4:	080101c3 	.word	0x080101c3
 8004ee8:	080101b1 	.word	0x080101b1

08004eec <pb_decode_fixed32>:
{
 8004eec:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 4))
 8004eee:	2204      	movs	r2, #4
{
 8004ef0:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 8004ef2:	eb0d 0102 	add.w	r1, sp, r2
 8004ef6:	f7ff fb4f 	bl	8004598 <pb_read>
 8004efa:	b108      	cbz	r0, 8004f00 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8004efc:	9b01      	ldr	r3, [sp, #4]
 8004efe:	6023      	str	r3, [r4, #0]
}
 8004f00:	b002      	add	sp, #8
 8004f02:	bd10      	pop	{r4, pc}

08004f04 <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8004f04:	4611      	mov	r1, r2
 8004f06:	f7ff bff1 	b.w	8004eec <pb_decode_fixed32>

08004f0a <pb_decode_fixed64>:
{
 8004f0a:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8004f0c:	2208      	movs	r2, #8
{
 8004f0e:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8004f10:	4669      	mov	r1, sp
 8004f12:	f7ff fb41 	bl	8004598 <pb_read>
 8004f16:	b118      	cbz	r0, 8004f20 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8004f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f1c:	e9c4 2300 	strd	r2, r3, [r4]
}
 8004f20:	b002      	add	sp, #8
 8004f22:	bd10      	pop	{r4, pc}

08004f24 <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8004f24:	4611      	mov	r1, r2
 8004f26:	f7ff bff0 	b.w	8004f0a <pb_decode_fixed64>

08004f2a <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	460a      	mov	r2, r1
    pb_type_t type = field->type;
 8004f2e:	7881      	ldrb	r1, [r0, #2]
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8004f30:	f011 0330 	ands.w	r3, r1, #48	; 0x30
{
 8004f34:	b086      	sub	sp, #24
    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8004f36:	d042      	beq.n	8004fbe <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8004f38:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8004f3a:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8004f3e:	d104      	bne.n	8004f4a <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8004f40:	5b10      	ldrh	r0, [r2, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8004f42:	fab0 f080 	clz	r0, r0
 8004f46:	0940      	lsrs	r0, r0, #5
 8004f48:	e007      	b.n	8004f5a <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004f4a:	2b30      	cmp	r3, #48	; 0x30
 8004f4c:	d0f8      	beq.n	8004f40 <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d105      	bne.n	8004f5e <pb_check_proto3_default_value+0x34>
 8004f52:	b124      	cbz	r4, 8004f5e <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 8004f54:	5d10      	ldrb	r0, [r2, r4]
 8004f56:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8004f5a:	b006      	add	sp, #24
 8004f5c:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004f5e:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8004f62:	d006      	beq.n	8004f72 <pb_check_proto3_default_value+0x48>
 8004f64:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 8004f68:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d123      	bne.n	8004fb6 <pb_check_proto3_default_value+0x8c>
	    return true;
 8004f6e:	2001      	movs	r0, #1
 8004f70:	e7f3      	b.n	8004f5a <pb_check_proto3_default_value+0x30>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8004f72:	f001 030f 	and.w	r3, r1, #15
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d101      	bne.n	8004f7e <pb_check_proto3_default_value+0x54>
            return bytes->size == 0;
 8004f7a:	8810      	ldrh	r0, [r2, #0]
 8004f7c:	e7e1      	b.n	8004f42 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d101      	bne.n	8004f86 <pb_check_proto3_default_value+0x5c>
            return *(const char*)pData == '\0';
 8004f82:	7810      	ldrb	r0, [r2, #0]
 8004f84:	e7dd      	b.n	8004f42 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	d102      	bne.n	8004f90 <pb_check_proto3_default_value+0x66>
            return field->data_size == 0;
 8004f8a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8004f8e:	e7d8      	b.n	8004f42 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004f90:	2b07      	cmp	r3, #7
 8004f92:	d1e7      	bne.n	8004f64 <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8004f94:	f8d0 100b 	ldr.w	r1, [r0, #11]
 8004f98:	4668      	mov	r0, sp
 8004f9a:	f7ff f9a9 	bl	80042f0 <pb_field_iter_begin>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d0e5      	beq.n	8004f6e <pb_check_proto3_default_value+0x44>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8004fa2:	9904      	ldr	r1, [sp, #16]
 8004fa4:	9801      	ldr	r0, [sp, #4]
 8004fa6:	f7ff ffc0 	bl	8004f2a <pb_check_proto3_default_value>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d0d5      	beq.n	8004f5a <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 8004fae:	4668      	mov	r0, sp
 8004fb0:	f7ff f9b0 	bl	8004314 <pb_field_iter_next>
 8004fb4:	e7f3      	b.n	8004f9e <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 8004fb6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	d0d5      	beq.n	8004f6a <pb_check_proto3_default_value+0x40>
        return false;
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e7cb      	b.n	8004f5a <pb_check_proto3_default_value+0x30>
	...

08004fc4 <pb_write>:
{
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8004fc6:	6806      	ldr	r6, [r0, #0]
        if (stream->bytes_written + count > stream->max_size)
 8004fc8:	68c3      	ldr	r3, [r0, #12]
{
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8004fce:	b1a6      	cbz	r6, 8004ffa <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 8004fd0:	6887      	ldr	r7, [r0, #8]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	429f      	cmp	r7, r3
 8004fd6:	d207      	bcs.n	8004fe8 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 8004fd8:	6903      	ldr	r3, [r0, #16]
 8004fda:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <pb_write+0x40>)
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf08      	it	eq
 8004fe0:	4613      	moveq	r3, r2
 8004fe2:	6103      	str	r3, [r0, #16]
 8004fe4:	2000      	movs	r0, #0
}
 8004fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 8004fe8:	47b0      	blx	r6
 8004fea:	b930      	cbnz	r0, 8004ffa <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	4a06      	ldr	r2, [pc, #24]	; (8005008 <pb_write+0x44>)
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf08      	it	eq
 8004ff4:	4613      	moveq	r3, r2
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	e7f5      	b.n	8004fe6 <pb_write+0x22>
    stream->bytes_written += count;
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	442b      	add	r3, r5
 8004ffe:	60e3      	str	r3, [r4, #12]
    return true;
 8005000:	2001      	movs	r0, #1
 8005002:	e7f0      	b.n	8004fe6 <pb_write+0x22>
 8005004:	080102ac 	.word	0x080102ac
 8005008:	08010136 	.word	0x08010136

0800500c <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 800500e:	2a80      	cmp	r2, #128	; 0x80
 8005010:	f173 0100 	sbcs.w	r1, r3, #0
{
 8005014:	b085      	sub	sp, #20
 8005016:	4605      	mov	r5, r0
    if (value <= 0x7F)
 8005018:	d207      	bcs.n	800502a <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 800501a:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 800501e:	a901      	add	r1, sp, #4
 8005020:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8005022:	f7ff ffcf 	bl	8004fc4 <pb_write>
}
 8005026:	b005      	add	sp, #20
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502a:	ae01      	add	r6, sp, #4
    size_t i = 0;
 800502c:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800502e:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8005032:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 8005036:	09d1      	lsrs	r1, r2, #7
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005038:	b2d0      	uxtb	r0, r2
        value >>= 7;
 800503a:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 800503e:	09db      	lsrs	r3, r3, #7
    while (value)
 8005040:	ea52 0703 	orrs.w	r7, r2, r3
 8005044:	4621      	mov	r1, r4
        i++;
 8005046:	f104 0401 	add.w	r4, r4, #1
    while (value)
 800504a:	d1f0      	bne.n	800502e <pb_encode_varint+0x22>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800504c:	f101 0310 	add.w	r3, r1, #16
 8005050:	446b      	add	r3, sp
 8005052:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8005056:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 800505a:	a901      	add	r1, sp, #4
 800505c:	4622      	mov	r2, r4
 800505e:	4628      	mov	r0, r5
 8005060:	e7df      	b.n	8005022 <pb_encode_varint+0x16>
	...

08005064 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005064:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d104      	bne.n	8005076 <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 800506c:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 800506e:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8005070:	460a      	mov	r2, r1
 8005072:	f7ff bfcb 	b.w	800500c <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005076:	2b02      	cmp	r3, #2
 8005078:	d101      	bne.n	800507e <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 800507a:	8811      	ldrh	r1, [r2, #0]
 800507c:	e7f7      	b.n	800506e <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 800507e:	2b04      	cmp	r3, #4
 8005080:	d101      	bne.n	8005086 <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 8005082:	6811      	ldr	r1, [r2, #0]
 8005084:	e7f3      	b.n	800506e <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005086:	2b08      	cmp	r3, #8
 8005088:	d102      	bne.n	8005090 <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 800508a:	e9d2 1300 	ldrd	r1, r3, [r2]
 800508e:	e7ef      	b.n	8005070 <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005090:	6903      	ldr	r3, [r0, #16]
 8005092:	4a03      	ldr	r2, [pc, #12]	; (80050a0 <pb_enc_uvarint+0x3c>)
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf08      	it	eq
 8005098:	4613      	moveq	r3, r2
 800509a:	6103      	str	r3, [r0, #16]
}
 800509c:	2000      	movs	r0, #0
 800509e:	4770      	bx	lr
 80050a0:	080101b1 	.word	0x080101b1

080050a4 <pb_enc_varint>:
{
 80050a4:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 80050a6:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80050aa:	2a01      	cmp	r2, #1
 80050ac:	d104      	bne.n	80050b8 <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 80050ae:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 80050b2:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 80050b4:	f7ff bfaa 	b.w	800500c <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 80050b8:	2a02      	cmp	r2, #2
 80050ba:	d102      	bne.n	80050c2 <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 80050bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050c0:	e7f7      	b.n	80050b2 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 80050c2:	2a04      	cmp	r2, #4
 80050c4:	d101      	bne.n	80050ca <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	e7f3      	b.n	80050b2 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 80050ca:	2a08      	cmp	r2, #8
 80050cc:	d102      	bne.n	80050d4 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	e7ef      	b.n	80050b4 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80050d4:	6903      	ldr	r3, [r0, #16]
 80050d6:	4a03      	ldr	r2, [pc, #12]	; (80050e4 <pb_enc_varint+0x40>)
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf08      	it	eq
 80050dc:	4613      	moveq	r3, r2
 80050de:	6103      	str	r3, [r0, #16]
}
 80050e0:	2000      	movs	r0, #0
 80050e2:	4770      	bx	lr
 80050e4:	080101b1 	.word	0x080101b1

080050e8 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 80050e8:	1892      	adds	r2, r2, r2
 80050ea:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 80050ee:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 80050f2:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 80050f6:	f7ff bf89 	b.w	800500c <pb_encode_varint>
	...

080050fc <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80050fc:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 80050fe:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8005102:	2a01      	cmp	r2, #1
 8005104:	d104      	bne.n	8005110 <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 8005106:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 800510a:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 800510c:	f7ff bfec 	b.w	80050e8 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 8005110:	2a02      	cmp	r2, #2
 8005112:	d102      	bne.n	800511a <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 8005114:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005118:	e7f7      	b.n	800510a <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 800511a:	2a04      	cmp	r2, #4
 800511c:	d101      	bne.n	8005122 <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	e7f3      	b.n	800510a <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8005122:	2a08      	cmp	r2, #8
 8005124:	d102      	bne.n	800512c <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	e7ef      	b.n	800510c <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800512c:	6903      	ldr	r3, [r0, #16]
 800512e:	4a03      	ldr	r2, [pc, #12]	; (800513c <pb_enc_svarint+0x40>)
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf08      	it	eq
 8005134:	4613      	moveq	r3, r2
 8005136:	6103      	str	r3, [r0, #16]
}
 8005138:	2000      	movs	r0, #0
 800513a:	4770      	bx	lr
 800513c:	080101b1 	.word	0x080101b1

08005140 <pb_encode_fixed32>:
{
 8005140:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 8005142:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005144:	680b      	ldr	r3, [r1, #0]
 8005146:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 8005148:	eb0d 0102 	add.w	r1, sp, r2
 800514c:	f7ff ff3a 	bl	8004fc4 <pb_write>
}
 8005150:	b003      	add	sp, #12
 8005152:	f85d fb04 	ldr.w	pc, [sp], #4

08005156 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8005156:	4611      	mov	r1, r2
 8005158:	f7ff bff2 	b.w	8005140 <pb_encode_fixed32>

0800515c <pb_encode_fixed64>:
{
 800515c:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800515e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005162:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005164:	0a1a      	lsrs	r2, r3, #8
 8005166:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800516a:	0c1a      	lsrs	r2, r3, #16
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800516c:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005170:	f88d 2006 	strb.w	r2, [sp, #6]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005174:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 8);
 8005176:	2208      	movs	r2, #8
 8005178:	4669      	mov	r1, sp
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800517a:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 800517e:	f7ff ff21 	bl	8004fc4 <pb_write>
}
 8005182:	b003      	add	sp, #12
 8005184:	f85d fb04 	ldr.w	pc, [sp], #4

08005188 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8005188:	4611      	mov	r1, r2
 800518a:	f7ff bfe7 	b.w	800515c <pb_encode_fixed64>

0800518e <pb_encode_tag>:
{
 800518e:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8005190:	0f5b      	lsrs	r3, r3, #29
 8005192:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8005196:	f7ff bf39 	b.w	800500c <pb_encode_varint>
	...

0800519c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 800519c:	788b      	ldrb	r3, [r1, #2]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	2b09      	cmp	r3, #9
 80051a4:	d811      	bhi.n	80051ca <pb_encode_tag_for_field+0x2e>
 80051a6:	e8df f003 	tbb	[pc, r3]
 80051aa:	0c0c      	.short	0x0c0c
 80051ac:	0a0e050c 	.word	0x0a0e050c
 80051b0:	0a100a0a 	.word	0x0a100a0a
 80051b4:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 80051b6:	880a      	ldrh	r2, [r1, #0]
 80051b8:	4619      	mov	r1, r3
 80051ba:	f7ff bfe8 	b.w	800518e <pb_encode_tag>
            wiretype = PB_WT_STRING;
 80051be:	2302      	movs	r3, #2
            break;
 80051c0:	e7f9      	b.n	80051b6 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e7f7      	b.n	80051b6 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_64BIT;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e7f5      	b.n	80051b6 <pb_encode_tag_for_field+0x1a>
            PB_RETURN_ERROR(stream, "invalid field type");
 80051ca:	6903      	ldr	r3, [r0, #16]
 80051cc:	4a03      	ldr	r2, [pc, #12]	; (80051dc <pb_encode_tag_for_field+0x40>)
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bf08      	it	eq
 80051d2:	4613      	moveq	r3, r2
 80051d4:	6103      	str	r3, [r0, #16]
}
 80051d6:	2000      	movs	r0, #0
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	0801020e 	.word	0x0801020e

080051e0 <encode_field>:
{
 80051e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 80051e6:	788a      	ldrb	r2, [r1, #2]
 80051e8:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 80051ec:	2b40      	cmp	r3, #64	; 0x40
{
 80051ee:	b086      	sub	sp, #24
 80051f0:	4605      	mov	r5, r0
 80051f2:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 80051f4:	f000 80dd 	beq.w	80053b2 <encode_field+0x1d2>
 80051f8:	0653      	lsls	r3, r2, #25
 80051fa:	d41b      	bmi.n	8005234 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 80051fc:	4b75      	ldr	r3, [pc, #468]	; (80053d4 <encode_field+0x1f4>)
 80051fe:	f002 010f 	and.w	r1, r2, #15
 8005202:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 8005206:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 800520a:	b1b3      	cbz	r3, 800523a <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 800520c:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800520e:	78a2      	ldrb	r2, [r4, #2]
 8005210:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8005214:	2880      	cmp	r0, #128	; 0x80
 8005216:	d105      	bne.n	8005224 <encode_field+0x44>
        pData = *(const void* const*)pData;
 8005218:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 800521a:	1e31      	subs	r1, r6, #0
 800521c:	bf18      	it	ne
 800521e:	2101      	movne	r1, #1
 8005220:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 8005224:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8005228:	2920      	cmp	r1, #32
 800522a:	d03e      	beq.n	80052aa <encode_field+0xca>
 800522c:	d818      	bhi.n	8005260 <encode_field+0x80>
 800522e:	b361      	cbz	r1, 800528a <encode_field+0xaa>
 8005230:	2910      	cmp	r1, #16
 8005232:	d033      	beq.n	800529c <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005234:	692b      	ldr	r3, [r5, #16]
 8005236:	4a68      	ldr	r2, [pc, #416]	; (80053d8 <encode_field+0x1f8>)
 8005238:	e02b      	b.n	8005292 <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800523a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800523e:	2a10      	cmp	r2, #16
 8005240:	d10a      	bne.n	8005258 <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8005242:	4631      	mov	r1, r6
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff fe70 	bl	8004f2a <pb_check_proto3_default_value>
 800524a:	f080 0001 	eor.w	r0, r0, #1
 800524e:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 8005252:	f10d 0303 	add.w	r3, sp, #3
 8005256:	e7da      	b.n	800520e <encode_field+0x2e>
        implicit_has = true;
 8005258:	2301      	movs	r3, #1
 800525a:	f88d 3003 	strb.w	r3, [sp, #3]
 800525e:	e7f8      	b.n	8005252 <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 8005260:	2930      	cmp	r1, #48	; 0x30
 8005262:	d1e7      	bne.n	8005234 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	8823      	ldrh	r3, [r4, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d11a      	bne.n	80052a2 <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 800526c:	4621      	mov	r1, r4
 800526e:	4628      	mov	r0, r5
 8005270:	f7ff ff94 	bl	800519c <pb_encode_tag_for_field>
 8005274:	2800      	cmp	r0, #0
 8005276:	f000 8090 	beq.w	800539a <encode_field+0x1ba>
                if (!func(stream, field, pData))
 800527a:	4632      	mov	r2, r6
 800527c:	4621      	mov	r1, r4
 800527e:	4628      	mov	r0, r5
 8005280:	463b      	mov	r3, r7
}
 8005282:	b006      	add	sp, #24
 8005284:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 8005288:	4718      	bx	r3
            if (!pData)
 800528a:	2e00      	cmp	r6, #0
 800528c:	d1ee      	bne.n	800526c <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 800528e:	692b      	ldr	r3, [r5, #16]
 8005290:	4a52      	ldr	r2, [pc, #328]	; (80053dc <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf08      	it	eq
 8005296:	4613      	moveq	r3, r2
 8005298:	612b      	str	r3, [r5, #16]
 800529a:	e07e      	b.n	800539a <encode_field+0x1ba>
            if (*(const bool*)pSize)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e4      	bne.n	800526c <encode_field+0x8c>
    return true;
 80052a2:	2001      	movs	r0, #1
}
 80052a4:	b006      	add	sp, #24
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 80052aa:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 80052ae:	b169      	cbz	r1, 80052cc <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 80052b0:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 80052b4:	f1b8 0f00 	cmp.w	r8, #0
 80052b8:	d0f3      	beq.n	80052a2 <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 80052ba:	2880      	cmp	r0, #128	; 0x80
 80052bc:	d009      	beq.n	80052d2 <encode_field+0xf2>
 80052be:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 80052c2:	4598      	cmp	r8, r3
 80052c4:	d905      	bls.n	80052d2 <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 80052c6:	692b      	ldr	r3, [r5, #16]
 80052c8:	4a45      	ldr	r2, [pc, #276]	; (80053e0 <encode_field+0x200>)
 80052ca:	e7e2      	b.n	8005292 <encode_field+0xb2>
                count = field->array_size;
 80052cc:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 80052d0:	e7f0      	b.n	80052b4 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80052d2:	f002 020f 	and.w	r2, r2, #15
 80052d6:	2a04      	cmp	r2, #4
 80052d8:	d849      	bhi.n	800536e <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 80052da:	8822      	ldrh	r2, [r4, #0]
 80052dc:	2102      	movs	r1, #2
 80052de:	4628      	mov	r0, r5
 80052e0:	f7ff ff55 	bl	800518e <pb_encode_tag>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d058      	beq.n	800539a <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80052e8:	78a3      	ldrb	r3, [r4, #2]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d111      	bne.n	8005316 <encode_field+0x136>
            size = 4 * count;
 80052f2:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80052f6:	464a      	mov	r2, r9
 80052f8:	2300      	movs	r3, #0
 80052fa:	4628      	mov	r0, r5
 80052fc:	f7ff fe86 	bl	800500c <pb_encode_varint>
 8005300:	2800      	cmp	r0, #0
 8005302:	d04a      	beq.n	800539a <encode_field+0x1ba>
        if (stream->callback == NULL)
 8005304:	6829      	ldr	r1, [r5, #0]
 8005306:	bb19      	cbnz	r1, 8005350 <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005308:	464a      	mov	r2, r9
 800530a:	4628      	mov	r0, r5
}
 800530c:	b006      	add	sp, #24
 800530e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005312:	f7ff be57 	b.w	8004fc4 <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005316:	2b04      	cmp	r3, #4
 8005318:	d102      	bne.n	8005320 <encode_field+0x140>
            size = 8 * count;
 800531a:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800531e:	e7ea      	b.n	80052f6 <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8005320:	2214      	movs	r2, #20
 8005322:	2100      	movs	r1, #0
 8005324:	a801      	add	r0, sp, #4
 8005326:	f007 fa18 	bl	800c75a <memset>
 800532a:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 800532c:	f04f 0900 	mov.w	r9, #0
                if (!func(&sizestream, field, p))
 8005330:	4652      	mov	r2, sl
 8005332:	4621      	mov	r1, r4
 8005334:	a801      	add	r0, sp, #4
 8005336:	47b8      	blx	r7
 8005338:	2800      	cmp	r0, #0
 800533a:	d0b3      	beq.n	80052a4 <encode_field+0xc4>
                p = (const char*)p + field->data_size;
 800533c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 8005340:	f109 0901 	add.w	r9, r9, #1
 8005344:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 8005346:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 8005348:	d8f2      	bhi.n	8005330 <encode_field+0x150>
            size = sizestream.bytes_written;
 800534a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800534e:	e7d2      	b.n	80052f6 <encode_field+0x116>
        for (i = 0; i < count; i++)
 8005350:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8005354:	4632      	mov	r2, r6
 8005356:	4621      	mov	r1, r4
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	b1e8      	cbz	r0, 800539a <encode_field+0x1ba>
            p = (const char*)p + field->data_size;
 800535e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8005362:	f109 0901 	add.w	r9, r9, #1
 8005366:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8005368:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800536a:	d8f3      	bhi.n	8005354 <encode_field+0x174>
 800536c:	e799      	b.n	80052a2 <encode_field+0xc2>
        for (i = 0; i < count; i++)
 800536e:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8005372:	4621      	mov	r1, r4
 8005374:	4628      	mov	r0, r5
 8005376:	f7ff ff11 	bl	800519c <pb_encode_tag_for_field>
 800537a:	b170      	cbz	r0, 800539a <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800537c:	78a3      	ldrb	r3, [r4, #2]
 800537e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005382:	2a80      	cmp	r2, #128	; 0x80
 8005384:	d113      	bne.n	80053ae <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800538c:	2b01      	cmp	r3, #1
 800538e:	d80e      	bhi.n	80053ae <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 8005390:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	b908      	cbnz	r0, 800539e <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 800539a:	2000      	movs	r0, #0
 800539c:	e782      	b.n	80052a4 <encode_field+0xc4>
            p = (const char*)p + field->data_size;
 800539e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 80053a2:	f109 0901 	add.w	r9, r9, #1
 80053a6:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 80053a8:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 80053aa:	d8e2      	bhi.n	8005372 <encode_field+0x192>
 80053ac:	e779      	b.n	80052a2 <encode_field+0xc2>
                if (!func(stream, field, p))
 80053ae:	4632      	mov	r2, r6
 80053b0:	e7ef      	b.n	8005392 <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 80053b2:	6833      	ldr	r3, [r6, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f43f af74 	beq.w	80052a2 <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 80053ba:	1d32      	adds	r2, r6, #4
 80053bc:	4798      	blx	r3
 80053be:	2800      	cmp	r0, #0
 80053c0:	f47f af6f 	bne.w	80052a2 <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 80053c4:	692b      	ldr	r3, [r5, #16]
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <encode_field+0x204>)
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf08      	it	eq
 80053cc:	4613      	moveq	r3, r2
 80053ce:	612b      	str	r3, [r5, #16]
 80053d0:	e768      	b.n	80052a4 <encode_field+0xc4>
 80053d2:	bf00      	nop
 80053d4:	08010308 	.word	0x08010308
 80053d8:	0801020e 	.word	0x0801020e
 80053dc:	08010252 	.word	0x08010252
 80053e0:	080102b8 	.word	0x080102b8
 80053e4:	080102d0 	.word	0x080102d0

080053e8 <pb_encode>:
{
 80053e8:	b530      	push	{r4, r5, lr}
 80053ea:	b087      	sub	sp, #28
 80053ec:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 80053ee:	4668      	mov	r0, sp
 80053f0:	f7fe ff7e 	bl	80042f0 <pb_field_iter_begin>
 80053f4:	b910      	cbnz	r0, 80053fc <pb_encode+0x14>
        return true; /* Empty message type */
 80053f6:	2001      	movs	r0, #1
}
 80053f8:	b007      	add	sp, #28
 80053fa:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80053fc:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 80053fe:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8005400:	788b      	ldrb	r3, [r1, #2]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	2b08      	cmp	r3, #8
 8005408:	d11c      	bne.n	8005444 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800540a:	6814      	ldr	r4, [r2, #0]
    while (extension)
 800540c:	b91c      	cbnz	r4, 8005416 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 800540e:	4668      	mov	r0, sp
 8005410:	f7fe ff80 	bl	8004314 <pb_field_iter_next>
 8005414:	e7ee      	b.n	80053f4 <pb_encode+0xc>
        if (extension->type->encode)
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	b12a      	cbz	r2, 8005428 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	4790      	blx	r2
        if (!status)
 8005422:	b968      	cbnz	r0, 8005440 <pb_encode+0x58>
                return false;
 8005424:	2000      	movs	r0, #0
 8005426:	e7e7      	b.n	80053f8 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005428:	6899      	ldr	r1, [r3, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800542a:	788b      	ldrb	r3, [r1, #2]
 800542c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005430:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, extension->dest);
 8005432:	bf14      	ite	ne
 8005434:	6862      	ldrne	r2, [r4, #4]
        return encode_field(stream, field, &extension->dest);
 8005436:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 8005438:	4628      	mov	r0, r5
 800543a:	f7ff fed1 	bl	80051e0 <encode_field>
 800543e:	e7f0      	b.n	8005422 <pb_encode+0x3a>
        extension = extension->next;
 8005440:	68a4      	ldr	r4, [r4, #8]
 8005442:	e7e3      	b.n	800540c <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 8005444:	4628      	mov	r0, r5
 8005446:	f7ff fecb 	bl	80051e0 <encode_field>
 800544a:	2800      	cmp	r0, #0
 800544c:	d1df      	bne.n	800540e <pb_encode+0x26>
 800544e:	e7e9      	b.n	8005424 <pb_encode+0x3c>

08005450 <pb_encode_string>:
{
 8005450:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005452:	2300      	movs	r3, #0
{
 8005454:	4604      	mov	r4, r0
 8005456:	9101      	str	r1, [sp, #4]
 8005458:	4615      	mov	r5, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800545a:	f7ff fdd7 	bl	800500c <pb_encode_varint>
 800545e:	b138      	cbz	r0, 8005470 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 8005460:	9901      	ldr	r1, [sp, #4]
 8005462:	462a      	mov	r2, r5
 8005464:	4620      	mov	r0, r4
}
 8005466:	b003      	add	sp, #12
 8005468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 800546c:	f7ff bdaa 	b.w	8004fc4 <pb_write>
}
 8005470:	b003      	add	sp, #12
 8005472:	bd30      	pop	{r4, r5, pc}

08005474 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8005474:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8005476:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800547a:	4619      	mov	r1, r3
 800547c:	f7ff bfe8 	b.w	8005450 <pb_encode_string>

08005480 <pb_enc_string>:
{
 8005480:	b410      	push	{r4}
    size_t max_size = field->data_size;
 8005482:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005486:	7889      	ldrb	r1, [r1, #2]
 8005488:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 800548c:	2980      	cmp	r1, #128	; 0x80
 800548e:	bf08      	it	eq
 8005490:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 8005494:	4611      	mov	r1, r2
 8005496:	b122      	cbz	r2, 80054a2 <pb_enc_string+0x22>
    size_t size = 0;
 8005498:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 800549a:	429a      	cmp	r2, r3
 800549c:	d001      	beq.n	80054a2 <pb_enc_string+0x22>
 800549e:	5c8c      	ldrb	r4, [r1, r2]
 80054a0:	b91c      	cbnz	r4, 80054aa <pb_enc_string+0x2a>
}
 80054a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 80054a6:	f7ff bfd3 	b.w	8005450 <pb_encode_string>
            size++;
 80054aa:	3201      	adds	r2, #1
            p++;
 80054ac:	e7f5      	b.n	800549a <pb_enc_string+0x1a>
	...

080054b0 <pb_enc_bytes>:
{
 80054b0:	b470      	push	{r4, r5, r6}
 80054b2:	4603      	mov	r3, r0
 80054b4:	460c      	mov	r4, r1
    if (src == NULL)
 80054b6:	4611      	mov	r1, r2
 80054b8:	b912      	cbnz	r2, 80054c0 <pb_enc_bytes+0x10>
}
 80054ba:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80054bc:	f7ff bfc8 	b.w	8005450 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80054c0:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80054c2:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80054c4:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 80054c8:	d104      	bne.n	80054d4 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80054ca:	f8b4 6007 	ldrh.w	r6, [r4, #7]
 80054ce:	1c95      	adds	r5, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80054d0:	42b5      	cmp	r5, r6
 80054d2:	d802      	bhi.n	80054da <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80054d4:	3102      	adds	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	e7ef      	b.n	80054ba <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	4903      	ldr	r1, [pc, #12]	; (80054ec <pb_enc_bytes+0x3c>)
 80054de:	2a00      	cmp	r2, #0
 80054e0:	bf08      	it	eq
 80054e2:	460a      	moveq	r2, r1
}
 80054e4:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80054e6:	611a      	str	r2, [r3, #16]
}
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	080102df 	.word	0x080102df

080054f0 <pb_encode_submessage>:
{
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	460f      	mov	r7, r1
 80054f8:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80054fa:	2100      	movs	r1, #0
 80054fc:	2214      	movs	r2, #20
{
 80054fe:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005500:	a801      	add	r0, sp, #4
 8005502:	f007 f92a 	bl	800c75a <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8005506:	4642      	mov	r2, r8
 8005508:	4639      	mov	r1, r7
 800550a:	a801      	add	r0, sp, #4
 800550c:	f7ff ff6c 	bl	80053e8 <pb_encode>
 8005510:	b910      	cbnz	r0, 8005518 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 8005512:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	e00d      	b.n	8005534 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 8005518:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800551a:	2500      	movs	r5, #0
 800551c:	4632      	mov	r2, r6
 800551e:	462b      	mov	r3, r5
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff fd73 	bl	800500c <pb_encode_varint>
 8005526:	b128      	cbz	r0, 8005534 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 8005528:	6821      	ldr	r1, [r4, #0]
 800552a:	b931      	cbnz	r1, 800553a <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800552c:	4632      	mov	r2, r6
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff fd48 	bl	8004fc4 <pb_write>
}
 8005534:	b006      	add	sp, #24
 8005536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	68a2      	ldr	r2, [r4, #8]
 800553e:	4433      	add	r3, r6
 8005540:	4293      	cmp	r3, r2
 8005542:	d907      	bls.n	8005554 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	4a0e      	ldr	r2, [pc, #56]	; (8005580 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf08      	it	eq
 800554c:	4613      	moveq	r3, r2
 800554e:	6123      	str	r3, [r4, #16]
 8005550:	4628      	mov	r0, r5
 8005552:	e7ef      	b.n	8005534 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 8005554:	6863      	ldr	r3, [r4, #4]
    substream.callback = stream->callback;
 8005556:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 8005558:	4642      	mov	r2, r8
 800555a:	4639      	mov	r1, r7
 800555c:	a801      	add	r0, sp, #4
    substream.max_size = size;
 800555e:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 8005562:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 8005566:	f7ff ff3f 	bl	80053e8 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 800556a:	9a04      	ldr	r2, [sp, #16]
 800556c:	68e3      	ldr	r3, [r4, #12]
 800556e:	4413      	add	r3, r2
 8005570:	60e3      	str	r3, [r4, #12]
    if (substream.bytes_written != size)
 8005572:	42b2      	cmp	r2, r6
    stream->state = substream.state;
 8005574:	9b02      	ldr	r3, [sp, #8]
 8005576:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 8005578:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 800557a:	d0cb      	beq.n	8005514 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800557c:	4a01      	ldr	r2, [pc, #4]	; (8005584 <pb_encode_submessage+0x94>)
 800557e:	e7e3      	b.n	8005548 <pb_encode_submessage+0x58>
 8005580:	080102ac 	.word	0x080102ac
 8005584:	080102f3 	.word	0x080102f3

08005588 <pb_enc_submessage>:
    if (field->ptr == NULL)
 8005588:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 800558c:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 800558e:	b109      	cbz	r1, 8005594 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8005590:	f7ff bfae 	b.w	80054f0 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005594:	6902      	ldr	r2, [r0, #16]
 8005596:	4803      	ldr	r0, [pc, #12]	; (80055a4 <pb_enc_submessage+0x1c>)
 8005598:	2a00      	cmp	r2, #0
 800559a:	bf08      	it	eq
 800559c:	4602      	moveq	r2, r0
 800559e:	611a      	str	r2, [r3, #16]
}
 80055a0:	4608      	mov	r0, r1
 80055a2:	4770      	bx	lr
 80055a4:	08010269 	.word	0x08010269

080055a8 <ai_version_get>:
 80055a8:	0212      	lsls	r2, r2, #8
 80055aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055ae:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80055b2:	4770      	bx	lr

080055b4 <ai_platform_version_get>:
 80055b4:	0e02      	lsrs	r2, r0, #24
 80055b6:	2300      	movs	r3, #0
 80055b8:	f362 0307 	bfi	r3, r2, #0, #8
 80055bc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80055c0:	f362 230f 	bfi	r3, r2, #8, #8
 80055c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80055c8:	f360 4317 	bfi	r3, r0, #16, #8
 80055cc:	b082      	sub	sp, #8
 80055ce:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80055d2:	b002      	add	sp, #8
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <get_tensor_size>:
 80055d8:	b111      	cbz	r1, 80055e0 <get_tensor_size+0x8>
 80055da:	6983      	ldr	r3, [r0, #24]
 80055dc:	6858      	ldr	r0, [r3, #4]
 80055de:	4770      	bx	lr
 80055e0:	6883      	ldr	r3, [r0, #8]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	d00a      	beq.n	80055fc <get_tensor_size+0x24>
 80055e6:	68c1      	ldr	r1, [r0, #12]
 80055e8:	2001      	movs	r0, #1
 80055ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80055ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80055f2:	4299      	cmp	r1, r3
 80055f4:	fb02 f000 	mul.w	r0, r2, r0
 80055f8:	d1f9      	bne.n	80055ee <get_tensor_size+0x16>
 80055fa:	4770      	bx	lr
 80055fc:	2001      	movs	r0, #1
 80055fe:	4770      	bx	lr

08005600 <get_tensor_byte_size>:
 8005600:	b410      	push	{r4}
 8005602:	6983      	ldr	r3, [r0, #24]
 8005604:	68c4      	ldr	r4, [r0, #12]
 8005606:	6941      	ldr	r1, [r0, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68e0      	ldr	r0, [r4, #12]
 800560c:	4a07      	ldr	r2, [pc, #28]	; (800562c <get_tensor_byte_size+0x2c>)
 800560e:	68c9      	ldr	r1, [r1, #12]
 8005610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005614:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005618:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800561c:	fb01 f000 	mul.w	r0, r1, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	bf04      	itt	eq
 8005624:	3007      	addeq	r0, #7
 8005626:	08c0      	lsreq	r0, r0, #3
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	000400c0 	.word	0x000400c0

08005630 <ai_buffer_get_size>:
 8005630:	b378      	cbz	r0, 8005692 <ai_buffer_get_size+0x62>
 8005632:	b410      	push	{r4}
 8005634:	6803      	ldr	r3, [r0, #0]
 8005636:	4a17      	ldr	r2, [pc, #92]	; (8005694 <ai_buffer_get_size+0x64>)
 8005638:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800563c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005640:	4293      	cmp	r3, r2
 8005642:	d01e      	beq.n	8005682 <ai_buffer_get_size+0x52>
 8005644:	6984      	ldr	r4, [r0, #24]
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	7d03      	ldrb	r3, [r0, #20]
 800564a:	6941      	ldr	r1, [r0, #20]
 800564c:	f1a3 0301 	sub.w	r3, r3, #1
 8005650:	fab3 f383 	clz	r3, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800565a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800565e:	da0b      	bge.n	8005678 <ai_buffer_get_size+0x48>
 8005660:	2b01      	cmp	r3, #1
 8005662:	d102      	bne.n	800566a <ai_buffer_get_size+0x3a>
 8005664:	2802      	cmp	r0, #2
 8005666:	d007      	beq.n	8005678 <ai_buffer_get_size+0x48>
 8005668:	2302      	movs	r3, #2
 800566a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800566e:	3301      	adds	r3, #1
 8005670:	4298      	cmp	r0, r3
 8005672:	fb01 f202 	mul.w	r2, r1, r2
 8005676:	d1f3      	bne.n	8005660 <ai_buffer_get_size+0x30>
 8005678:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800567c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	2900      	cmp	r1, #0
 8005684:	d0de      	beq.n	8005644 <ai_buffer_get_size+0x14>
 8005686:	6984      	ldr	r4, [r0, #24]
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	331f      	adds	r3, #31
 800568c:	f023 021f 	bic.w	r2, r3, #31
 8005690:	e7da      	b.n	8005648 <ai_buffer_get_size+0x18>
 8005692:	4770      	bx	lr
 8005694:	000400c0 	.word	0x000400c0

08005698 <ai_buffer_get_byte_size>:
 8005698:	b128      	cbz	r0, 80056a6 <ai_buffer_get_byte_size+0xe>
 800569a:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800569e:	fb01 f000 	mul.w	r0, r1, r0
 80056a2:	3007      	adds	r0, #7
 80056a4:	08c0      	lsrs	r0, r0, #3
 80056a6:	4770      	bx	lr

080056a8 <ai_buffer_array_sane>:
 80056a8:	b138      	cbz	r0, 80056ba <ai_buffer_array_sane+0x12>
 80056aa:	6843      	ldr	r3, [r0, #4]
 80056ac:	b123      	cbz	r3, 80056b8 <ai_buffer_array_sane+0x10>
 80056ae:	8840      	ldrh	r0, [r0, #2]
 80056b0:	3800      	subs	r0, #0
 80056b2:	bf18      	it	ne
 80056b4:	2001      	movne	r0, #1
 80056b6:	4770      	bx	lr
 80056b8:	4618      	mov	r0, r3
 80056ba:	4770      	bx	lr

080056bc <ai_buffer_array_item_set_address>:
 80056bc:	b150      	cbz	r0, 80056d4 <ai_buffer_array_item_set_address+0x18>
 80056be:	6843      	ldr	r3, [r0, #4]
 80056c0:	b14b      	cbz	r3, 80056d6 <ai_buffer_array_item_set_address+0x1a>
 80056c2:	8840      	ldrh	r0, [r0, #2]
 80056c4:	b900      	cbnz	r0, 80056c8 <ai_buffer_array_item_set_address+0xc>
 80056c6:	4770      	bx	lr
 80056c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80056cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80056d0:	2001      	movs	r0, #1
 80056d2:	604a      	str	r2, [r1, #4]
 80056d4:	4770      	bx	lr
 80056d6:	4618      	mov	r0, r3
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop

080056dc <_platform_observer_node_exec_cb>:
 80056dc:	2a00      	cmp	r2, #0
 80056de:	d07d      	beq.n	80057dc <_platform_observer_node_exec_cb+0x100>
 80056e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056e4:	6815      	ldr	r5, [r2, #0]
 80056e6:	b085      	sub	sp, #20
 80056e8:	4614      	mov	r4, r2
 80056ea:	2d00      	cmp	r5, #0
 80056ec:	d078      	beq.n	80057e0 <_platform_observer_node_exec_cb+0x104>
 80056ee:	8992      	ldrh	r2, [r2, #12]
 80056f0:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 80056f4:	2a00      	cmp	r2, #0
 80056f6:	460b      	mov	r3, r1
 80056f8:	f240 3102 	movw	r1, #770	; 0x302
 80056fc:	f240 2e02 	movw	lr, #514	; 0x202
 8005700:	bf08      	it	eq
 8005702:	460e      	moveq	r6, r1
 8005704:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005708:	f240 2101 	movw	r1, #513	; 0x201
 800570c:	bf1c      	itt	ne
 800570e:	4676      	movne	r6, lr
 8005710:	f44f 7901 	movne.w	r9, #516	; 0x204
 8005714:	f240 3e01 	movw	lr, #769	; 0x301
 8005718:	bf0e      	itee	eq
 800571a:	f44f 7941 	moveq.w	r9, #772	; 0x304
 800571e:	468e      	movne	lr, r1
 8005720:	f04f 0804 	movne.w	r8, #4
 8005724:	f240 1101 	movw	r1, #257	; 0x101
 8005728:	bf0d      	iteet	eq
 800572a:	f44f 7882 	moveq.w	r8, #260	; 0x104
 800572e:	2101      	movne	r1, #1
 8005730:	2702      	movne	r7, #2
 8005732:	f44f 7781 	moveq.w	r7, #258	; 0x102
 8005736:	4594      	cmp	ip, r2
 8005738:	d034      	beq.n	80057a4 <_platform_observer_node_exec_cb+0xc8>
 800573a:	b300      	cbz	r0, 800577e <_platform_observer_node_exec_cb+0xa2>
 800573c:	2801      	cmp	r0, #1
 800573e:	d053      	beq.n	80057e8 <_platform_observer_node_exec_cb+0x10c>
 8005740:	2802      	cmp	r0, #2
 8005742:	d035      	beq.n	80057b0 <_platform_observer_node_exec_cb+0xd4>
 8005744:	2803      	cmp	r0, #3
 8005746:	d116      	bne.n	8005776 <_platform_observer_node_exec_cb+0x9a>
 8005748:	68a3      	ldr	r3, [r4, #8]
 800574a:	075b      	lsls	r3, r3, #29
 800574c:	d511      	bpl.n	8005772 <_platform_observer_node_exec_cb+0x96>
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	f8ad 2000 	strh.w	r2, [sp]
 8005754:	885a      	ldrh	r2, [r3, #2]
 8005756:	f8ad 2004 	strh.w	r2, [sp, #4]
 800575a:	881a      	ldrh	r2, [r3, #0]
 800575c:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	6860      	ldr	r0, [r4, #4]
 8005764:	2300      	movs	r3, #0
 8005766:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800576a:	4641      	mov	r1, r8
 800576c:	466a      	mov	r2, sp
 800576e:	47a8      	blx	r5
 8005770:	89a2      	ldrh	r2, [r4, #12]
 8005772:	3201      	adds	r2, #1
 8005774:	81a2      	strh	r2, [r4, #12]
 8005776:	2000      	movs	r0, #0
 8005778:	b005      	add	sp, #20
 800577a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800577e:	68a6      	ldr	r6, [r4, #8]
 8005780:	07f6      	lsls	r6, r6, #31
 8005782:	d5f6      	bpl.n	8005772 <_platform_observer_node_exec_cb+0x96>
 8005784:	9002      	str	r0, [sp, #8]
 8005786:	8858      	ldrh	r0, [r3, #2]
 8005788:	f8ad 0004 	strh.w	r0, [sp, #4]
 800578c:	8818      	ldrh	r0, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f8ad 2000 	strh.w	r2, [sp]
 8005794:	f8ad 0002 	strh.w	r0, [sp, #2]
 8005798:	466a      	mov	r2, sp
 800579a:	6860      	ldr	r0, [r4, #4]
 800579c:	9303      	str	r3, [sp, #12]
 800579e:	47a8      	blx	r5
 80057a0:	89a2      	ldrh	r2, [r4, #12]
 80057a2:	e7e6      	b.n	8005772 <_platform_observer_node_exec_cb+0x96>
 80057a4:	46c8      	mov	r8, r9
 80057a6:	4637      	mov	r7, r6
 80057a8:	4671      	mov	r1, lr
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d1c6      	bne.n	800573c <_platform_observer_node_exec_cb+0x60>
 80057ae:	e7e6      	b.n	800577e <_platform_observer_node_exec_cb+0xa2>
 80057b0:	68a1      	ldr	r1, [r4, #8]
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	0789      	lsls	r1, r1, #30
 80057b6:	d5de      	bpl.n	8005776 <_platform_observer_node_exec_cb+0x9a>
 80057b8:	f8ad 2000 	strh.w	r2, [sp]
 80057bc:	885a      	ldrh	r2, [r3, #2]
 80057be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80057c2:	881a      	ldrh	r2, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	6860      	ldr	r0, [r4, #4]
 80057c8:	f8ad 2002 	strh.w	r2, [sp, #2]
 80057cc:	2400      	movs	r4, #0
 80057ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80057d2:	4639      	mov	r1, r7
 80057d4:	466a      	mov	r2, sp
 80057d6:	47a8      	blx	r5
 80057d8:	4620      	mov	r0, r4
 80057da:	e7cd      	b.n	8005778 <_platform_observer_node_exec_cb+0x9c>
 80057dc:	2001      	movs	r0, #1
 80057de:	4770      	bx	lr
 80057e0:	2001      	movs	r0, #1
 80057e2:	b005      	add	sp, #20
 80057e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057e8:	2000      	movs	r0, #0
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	81a0      	strh	r0, [r4, #12]
 80057ee:	b005      	add	sp, #20
 80057f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080057f4 <_ai_platform_acquire_crc>:
 80057f4:	2001      	movs	r0, #1
 80057f6:	4770      	bx	lr

080057f8 <_ai_platform_release_crc>:
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop

080057fc <ai_platform_get_weights_map>:
 80057fc:	2a00      	cmp	r2, #0
 80057fe:	d037      	beq.n	8005870 <ai_platform_get_weights_map+0x74>
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	4604      	mov	r4, r0
 8005804:	b1a0      	cbz	r0, 8005830 <ai_platform_get_weights_map+0x34>
 8005806:	460f      	mov	r7, r1
 8005808:	b191      	cbz	r1, 8005830 <ai_platform_get_weights_map+0x34>
 800580a:	4b25      	ldr	r3, [pc, #148]	; (80058a0 <ai_platform_get_weights_map+0xa4>)
 800580c:	6810      	ldr	r0, [r2, #0]
 800580e:	4298      	cmp	r0, r3
 8005810:	4615      	mov	r5, r2
 8005812:	d00f      	beq.n	8005834 <ai_platform_get_weights_map+0x38>
 8005814:	6855      	ldr	r5, [r2, #4]
 8005816:	b15d      	cbz	r5, 8005830 <ai_platform_get_weights_map+0x34>
 8005818:	682e      	ldr	r6, [r5, #0]
 800581a:	429e      	cmp	r6, r3
 800581c:	d02a      	beq.n	8005874 <ai_platform_get_weights_map+0x78>
 800581e:	f1a1 0001 	sub.w	r0, r1, #1
 8005822:	6025      	str	r5, [r4, #0]
 8005824:	fab0 f080 	clz	r0, r0
 8005828:	0940      	lsrs	r0, r0, #5
 800582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582c:	42a7      	cmp	r7, r4
 800582e:	d034      	beq.n	800589a <ai_platform_get_weights_map+0x9e>
 8005830:	2000      	movs	r0, #0
 8005832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005834:	1d10      	adds	r0, r2, #4
 8005836:	f7ff ff37 	bl	80056a8 <ai_buffer_array_sane>
 800583a:	2800      	cmp	r0, #0
 800583c:	d0f8      	beq.n	8005830 <ai_platform_get_weights_map+0x34>
 800583e:	88eb      	ldrh	r3, [r5, #6]
 8005840:	429f      	cmp	r7, r3
 8005842:	d1f5      	bne.n	8005830 <ai_platform_get_weights_map+0x34>
 8005844:	f04f 0e00 	mov.w	lr, #0
 8005848:	1f23      	subs	r3, r4, #4
 800584a:	4670      	mov	r0, lr
 800584c:	68aa      	ldr	r2, [r5, #8]
 800584e:	eb02 0c0e 	add.w	ip, r2, lr
 8005852:	f10e 0e1c 	add.w	lr, lr, #28
 8005856:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800585a:	b124      	cbz	r4, 8005866 <ai_platform_get_weights_map+0x6a>
 800585c:	3001      	adds	r0, #1
 800585e:	4287      	cmp	r7, r0
 8005860:	f843 4f04 	str.w	r4, [r3, #4]!
 8005864:	d1f2      	bne.n	800584c <ai_platform_get_weights_map+0x50>
 8005866:	1a38      	subs	r0, r7, r0
 8005868:	fab0 f080 	clz	r0, r0
 800586c:	0940      	lsrs	r0, r0, #5
 800586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005870:	2000      	movs	r0, #0
 8005872:	4770      	bx	lr
 8005874:	1f23      	subs	r3, r4, #4
 8005876:	4628      	mov	r0, r5
 8005878:	2400      	movs	r4, #0
 800587a:	e000      	b.n	800587e <ai_platform_get_weights_map+0x82>
 800587c:	4614      	mov	r4, r2
 800587e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005882:	42b2      	cmp	r2, r6
 8005884:	d0d2      	beq.n	800582c <ai_platform_get_weights_map+0x30>
 8005886:	f843 2f04 	str.w	r2, [r3, #4]!
 800588a:	1c62      	adds	r2, r4, #1
 800588c:	4297      	cmp	r7, r2
 800588e:	d1f5      	bne.n	800587c <ai_platform_get_weights_map+0x80>
 8005890:	3402      	adds	r4, #2
 8005892:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005896:	42b3      	cmp	r3, r6
 8005898:	d1ca      	bne.n	8005830 <ai_platform_get_weights_map+0x34>
 800589a:	2001      	movs	r0, #1
 800589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589e:	bf00      	nop
 80058a0:	a1facade 	.word	0xa1facade

080058a4 <ai_platform_get_activations_map>:
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	d038      	beq.n	800591a <ai_platform_get_activations_map+0x76>
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	4604      	mov	r4, r0
 80058ac:	b1a0      	cbz	r0, 80058d8 <ai_platform_get_activations_map+0x34>
 80058ae:	460f      	mov	r7, r1
 80058b0:	b191      	cbz	r1, 80058d8 <ai_platform_get_activations_map+0x34>
 80058b2:	4b25      	ldr	r3, [pc, #148]	; (8005948 <ai_platform_get_activations_map+0xa4>)
 80058b4:	6810      	ldr	r0, [r2, #0]
 80058b6:	4298      	cmp	r0, r3
 80058b8:	4615      	mov	r5, r2
 80058ba:	d00f      	beq.n	80058dc <ai_platform_get_activations_map+0x38>
 80058bc:	6a15      	ldr	r5, [r2, #32]
 80058be:	b15d      	cbz	r5, 80058d8 <ai_platform_get_activations_map+0x34>
 80058c0:	682e      	ldr	r6, [r5, #0]
 80058c2:	429e      	cmp	r6, r3
 80058c4:	d02b      	beq.n	800591e <ai_platform_get_activations_map+0x7a>
 80058c6:	f1a1 0001 	sub.w	r0, r1, #1
 80058ca:	6025      	str	r5, [r4, #0]
 80058cc:	fab0 f080 	clz	r0, r0
 80058d0:	0940      	lsrs	r0, r0, #5
 80058d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d4:	42a7      	cmp	r7, r4
 80058d6:	d035      	beq.n	8005944 <ai_platform_get_activations_map+0xa0>
 80058d8:	2000      	movs	r0, #0
 80058da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058dc:	f102 000c 	add.w	r0, r2, #12
 80058e0:	f7ff fee2 	bl	80056a8 <ai_buffer_array_sane>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d0f7      	beq.n	80058d8 <ai_platform_get_activations_map+0x34>
 80058e8:	89eb      	ldrh	r3, [r5, #14]
 80058ea:	429f      	cmp	r7, r3
 80058ec:	d1f4      	bne.n	80058d8 <ai_platform_get_activations_map+0x34>
 80058ee:	f04f 0e00 	mov.w	lr, #0
 80058f2:	1f23      	subs	r3, r4, #4
 80058f4:	4670      	mov	r0, lr
 80058f6:	692a      	ldr	r2, [r5, #16]
 80058f8:	eb02 0c0e 	add.w	ip, r2, lr
 80058fc:	f10e 0e1c 	add.w	lr, lr, #28
 8005900:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005904:	b124      	cbz	r4, 8005910 <ai_platform_get_activations_map+0x6c>
 8005906:	3001      	adds	r0, #1
 8005908:	4287      	cmp	r7, r0
 800590a:	f843 4f04 	str.w	r4, [r3, #4]!
 800590e:	d1f2      	bne.n	80058f6 <ai_platform_get_activations_map+0x52>
 8005910:	1a38      	subs	r0, r7, r0
 8005912:	fab0 f080 	clz	r0, r0
 8005916:	0940      	lsrs	r0, r0, #5
 8005918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800591a:	2000      	movs	r0, #0
 800591c:	4770      	bx	lr
 800591e:	1f23      	subs	r3, r4, #4
 8005920:	4628      	mov	r0, r5
 8005922:	2400      	movs	r4, #0
 8005924:	e000      	b.n	8005928 <ai_platform_get_activations_map+0x84>
 8005926:	4614      	mov	r4, r2
 8005928:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800592c:	42b2      	cmp	r2, r6
 800592e:	d0d1      	beq.n	80058d4 <ai_platform_get_activations_map+0x30>
 8005930:	f843 2f04 	str.w	r2, [r3, #4]!
 8005934:	1c62      	adds	r2, r4, #1
 8005936:	4297      	cmp	r7, r2
 8005938:	d1f5      	bne.n	8005926 <ai_platform_get_activations_map+0x82>
 800593a:	3402      	adds	r4, #2
 800593c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005940:	42b3      	cmp	r3, r6
 8005942:	d1c9      	bne.n	80058d8 <ai_platform_get_activations_map+0x34>
 8005944:	2001      	movs	r0, #1
 8005946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005948:	a1facade 	.word	0xa1facade

0800594c <ai_platform_bind_network_params>:
 800594c:	b1a0      	cbz	r0, 8005978 <ai_platform_bind_network_params+0x2c>
 800594e:	b1b1      	cbz	r1, 800597e <ai_platform_bind_network_params+0x32>
 8005950:	b1c2      	cbz	r2, 8005984 <ai_platform_bind_network_params+0x38>
 8005952:	b410      	push	{r4}
 8005954:	4603      	mov	r3, r0
 8005956:	4c0d      	ldr	r4, [pc, #52]	; (800598c <ai_platform_bind_network_params+0x40>)
 8005958:	f843 4b04 	str.w	r4, [r3], #4
 800595c:	f100 0c0c 	add.w	ip, r0, #12
 8005960:	c903      	ldmia	r1, {r0, r1}
 8005962:	e883 0003 	stmia.w	r3, {r0, r1}
 8005966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800596a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800596e:	2301      	movs	r3, #1
 8005970:	4618      	mov	r0, r3
 8005972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	4603      	mov	r3, r0
 800597a:	4618      	mov	r0, r3
 800597c:	4770      	bx	lr
 800597e:	460b      	mov	r3, r1
 8005980:	4618      	mov	r0, r3
 8005982:	4770      	bx	lr
 8005984:	4613      	mov	r3, r2
 8005986:	4618      	mov	r0, r3
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	a1facade 	.word	0xa1facade

08005990 <ai_platform_runtime_get_revision>:
 8005990:	b508      	push	{r3, lr}
 8005992:	f7ff ff2f 	bl	80057f4 <_ai_platform_acquire_crc>
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <ai_platform_runtime_get_revision+0x58>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a2:	d010      	beq.n	80059c6 <ai_platform_runtime_get_revision+0x36>
 80059a4:	4a11      	ldr	r2, [pc, #68]	; (80059ec <ai_platform_runtime_get_revision+0x5c>)
 80059a6:	2301      	movs	r3, #1
 80059a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80059ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1fb      	bne.n	80059ac <ai_platform_runtime_get_revision+0x1c>
 80059b4:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <ai_platform_runtime_get_revision+0x60>)
 80059b6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80059ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <ai_platform_runtime_get_revision+0x64>)
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d00c      	beq.n	80059de <ai_platform_runtime_get_revision+0x4e>
 80059c4:	e7fe      	b.n	80059c4 <ai_platform_runtime_get_revision+0x34>
 80059c6:	4a0c      	ldr	r2, [pc, #48]	; (80059f8 <ai_platform_runtime_get_revision+0x68>)
 80059c8:	2301      	movs	r3, #1
 80059ca:	6093      	str	r3, [r2, #8]
 80059cc:	6893      	ldr	r3, [r2, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1fc      	bne.n	80059cc <ai_platform_runtime_get_revision+0x3c>
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <ai_platform_runtime_get_revision+0x60>)
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <ai_platform_runtime_get_revision+0x64>)
 80059da:	429a      	cmp	r2, r3
 80059dc:	d103      	bne.n	80059e6 <ai_platform_runtime_get_revision+0x56>
 80059de:	f7ff ff0b 	bl	80057f8 <_ai_platform_release_crc>
 80059e2:	4806      	ldr	r0, [pc, #24]	; (80059fc <ai_platform_runtime_get_revision+0x6c>)
 80059e4:	bd08      	pop	{r3, pc}
 80059e6:	e7fe      	b.n	80059e6 <ai_platform_runtime_get_revision+0x56>
 80059e8:	e0042000 	.word	0xe0042000
 80059ec:	58024000 	.word	0x58024000
 80059f0:	f407a5c2 	.word	0xf407a5c2
 80059f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80059f8:	40023000 	.word	0x40023000
 80059fc:	080107b4 	.word	0x080107b4

08005a00 <ai_platform_runtime_get_version>:
 8005a00:	b500      	push	{lr}
 8005a02:	b083      	sub	sp, #12
 8005a04:	f7ff fef6 	bl	80057f4 <_ai_platform_acquire_crc>
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <ai_platform_runtime_get_version+0x80>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a14:	d010      	beq.n	8005a38 <ai_platform_runtime_get_version+0x38>
 8005a16:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <ai_platform_runtime_get_version+0x84>)
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1fb      	bne.n	8005a1e <ai_platform_runtime_get_version+0x1e>
 8005a26:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <ai_platform_runtime_get_version+0x88>)
 8005a28:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <ai_platform_runtime_get_version+0x8c>)
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d00c      	beq.n	8005a50 <ai_platform_runtime_get_version+0x50>
 8005a36:	e7fe      	b.n	8005a36 <ai_platform_runtime_get_version+0x36>
 8005a38:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <ai_platform_runtime_get_version+0x90>)
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	6093      	str	r3, [r2, #8]
 8005a3e:	6893      	ldr	r3, [r2, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1fc      	bne.n	8005a3e <ai_platform_runtime_get_version+0x3e>
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <ai_platform_runtime_get_version+0x88>)
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <ai_platform_runtime_get_version+0x8c>)
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d115      	bne.n	8005a7c <ai_platform_runtime_get_version+0x7c>
 8005a50:	f7ff fed2 	bl	80057f8 <_ai_platform_release_crc>
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <ai_platform_runtime_get_version+0x94>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2000      	movs	r0, #0
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	f362 0007 	bfi	r0, r2, #0, #8
 8005a60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005a64:	f362 200f 	bfi	r0, r2, #8, #8
 8005a68:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005a6c:	f362 4017 	bfi	r0, r2, #16, #8
 8005a70:	0e1b      	lsrs	r3, r3, #24
 8005a72:	f363 601f 	bfi	r0, r3, #24, #8
 8005a76:	b003      	add	sp, #12
 8005a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a7c:	e7fe      	b.n	8005a7c <ai_platform_runtime_get_version+0x7c>
 8005a7e:	bf00      	nop
 8005a80:	e0042000 	.word	0xe0042000
 8005a84:	58024000 	.word	0x58024000
 8005a88:	f407a5c2 	.word	0xf407a5c2
 8005a8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a90:	40023000 	.word	0x40023000
 8005a94:	080107b8 	.word	0x080107b8

08005a98 <ai_platform_api_get_version>:
 8005a98:	b500      	push	{lr}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	f7ff feaa 	bl	80057f4 <_ai_platform_acquire_crc>
 8005aa0:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <ai_platform_api_get_version+0x80>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aac:	d010      	beq.n	8005ad0 <ai_platform_api_get_version+0x38>
 8005aae:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <ai_platform_api_get_version+0x84>)
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ab6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1fb      	bne.n	8005ab6 <ai_platform_api_get_version+0x1e>
 8005abe:	4b18      	ldr	r3, [pc, #96]	; (8005b20 <ai_platform_api_get_version+0x88>)
 8005ac0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ac4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ac8:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <ai_platform_api_get_version+0x8c>)
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d00c      	beq.n	8005ae8 <ai_platform_api_get_version+0x50>
 8005ace:	e7fe      	b.n	8005ace <ai_platform_api_get_version+0x36>
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <ai_platform_api_get_version+0x90>)
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	6093      	str	r3, [r2, #8]
 8005ad6:	6893      	ldr	r3, [r2, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1fc      	bne.n	8005ad6 <ai_platform_api_get_version+0x3e>
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <ai_platform_api_get_version+0x88>)
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <ai_platform_api_get_version+0x8c>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d115      	bne.n	8005b14 <ai_platform_api_get_version+0x7c>
 8005ae8:	f7ff fe86 	bl	80057f8 <_ai_platform_release_crc>
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <ai_platform_api_get_version+0x94>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2000      	movs	r0, #0
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	f362 0007 	bfi	r0, r2, #0, #8
 8005af8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005afc:	f362 200f 	bfi	r0, r2, #8, #8
 8005b00:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005b04:	f362 4017 	bfi	r0, r2, #16, #8
 8005b08:	0e1b      	lsrs	r3, r3, #24
 8005b0a:	f363 601f 	bfi	r0, r3, #24, #8
 8005b0e:	b003      	add	sp, #12
 8005b10:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b14:	e7fe      	b.n	8005b14 <ai_platform_api_get_version+0x7c>
 8005b16:	bf00      	nop
 8005b18:	e0042000 	.word	0xe0042000
 8005b1c:	58024000 	.word	0x58024000
 8005b20:	f407a5c2 	.word	0xf407a5c2
 8005b24:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b28:	40023000 	.word	0x40023000
 8005b2c:	080107bc 	.word	0x080107bc

08005b30 <ai_platform_interface_api_get_version>:
 8005b30:	b500      	push	{lr}
 8005b32:	b083      	sub	sp, #12
 8005b34:	f7ff fe5e 	bl	80057f4 <_ai_platform_acquire_crc>
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <ai_platform_interface_api_get_version+0x80>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b44:	d010      	beq.n	8005b68 <ai_platform_interface_api_get_version+0x38>
 8005b46:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <ai_platform_interface_api_get_version+0x84>)
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1fb      	bne.n	8005b4e <ai_platform_interface_api_get_version+0x1e>
 8005b56:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <ai_platform_interface_api_get_version+0x88>)
 8005b58:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b5c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <ai_platform_interface_api_get_version+0x8c>)
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d00c      	beq.n	8005b80 <ai_platform_interface_api_get_version+0x50>
 8005b66:	e7fe      	b.n	8005b66 <ai_platform_interface_api_get_version+0x36>
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <ai_platform_interface_api_get_version+0x90>)
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	6093      	str	r3, [r2, #8]
 8005b6e:	6893      	ldr	r3, [r2, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1fc      	bne.n	8005b6e <ai_platform_interface_api_get_version+0x3e>
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <ai_platform_interface_api_get_version+0x88>)
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <ai_platform_interface_api_get_version+0x8c>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d115      	bne.n	8005bac <ai_platform_interface_api_get_version+0x7c>
 8005b80:	f7ff fe3a 	bl	80057f8 <_ai_platform_release_crc>
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <ai_platform_interface_api_get_version+0x94>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2000      	movs	r0, #0
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	f362 0007 	bfi	r0, r2, #0, #8
 8005b90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005b94:	f362 200f 	bfi	r0, r2, #8, #8
 8005b98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005b9c:	f362 4017 	bfi	r0, r2, #16, #8
 8005ba0:	0e1b      	lsrs	r3, r3, #24
 8005ba2:	f363 601f 	bfi	r0, r3, #24, #8
 8005ba6:	b003      	add	sp, #12
 8005ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bac:	e7fe      	b.n	8005bac <ai_platform_interface_api_get_version+0x7c>
 8005bae:	bf00      	nop
 8005bb0:	e0042000 	.word	0xe0042000
 8005bb4:	58024000 	.word	0x58024000
 8005bb8:	f407a5c2 	.word	0xf407a5c2
 8005bbc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005bc0:	40023000 	.word	0x40023000
 8005bc4:	080107c0 	.word	0x080107c0

08005bc8 <ai_platform_context_acquire>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	4604      	mov	r4, r0
 8005bcc:	b120      	cbz	r0, 8005bd8 <ai_platform_context_acquire+0x10>
 8005bce:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <ai_platform_context_acquire+0x68>)
 8005bd0:	6802      	ldr	r2, [r0, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	bf18      	it	ne
 8005bd6:	2400      	movne	r4, #0
 8005bd8:	f7ff fe0c 	bl	80057f4 <_ai_platform_acquire_crc>
 8005bdc:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <ai_platform_context_acquire+0x6c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d010      	beq.n	8005c0c <ai_platform_context_acquire+0x44>
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <ai_platform_context_acquire+0x70>)
 8005bec:	2301      	movs	r3, #1
 8005bee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005bf2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1fb      	bne.n	8005bf2 <ai_platform_context_acquire+0x2a>
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <ai_platform_context_acquire+0x74>)
 8005bfc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005c00:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <ai_platform_context_acquire+0x78>)
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d00c      	beq.n	8005c24 <ai_platform_context_acquire+0x5c>
 8005c0a:	e7fe      	b.n	8005c0a <ai_platform_context_acquire+0x42>
 8005c0c:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <ai_platform_context_acquire+0x7c>)
 8005c0e:	2301      	movs	r3, #1
 8005c10:	6093      	str	r3, [r2, #8]
 8005c12:	6893      	ldr	r3, [r2, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1fc      	bne.n	8005c12 <ai_platform_context_acquire+0x4a>
 8005c18:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <ai_platform_context_acquire+0x74>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <ai_platform_context_acquire+0x78>)
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d103      	bne.n	8005c2c <ai_platform_context_acquire+0x64>
 8005c24:	f7ff fde8 	bl	80057f8 <_ai_platform_release_crc>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bd10      	pop	{r4, pc}
 8005c2c:	e7fe      	b.n	8005c2c <ai_platform_context_acquire+0x64>
 8005c2e:	bf00      	nop
 8005c30:	a1c00100 	.word	0xa1c00100
 8005c34:	e0042000 	.word	0xe0042000
 8005c38:	58024000 	.word	0x58024000
 8005c3c:	f407a5c2 	.word	0xf407a5c2
 8005c40:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c44:	40023000 	.word	0x40023000

08005c48 <ai_platform_network_get_error>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	b1f0      	cbz	r0, 8005c8a <ai_platform_network_get_error+0x42>
 8005c4c:	4b2f      	ldr	r3, [pc, #188]	; (8005d0c <ai_platform_network_get_error+0xc4>)
 8005c4e:	6802      	ldr	r2, [r0, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	4604      	mov	r4, r0
 8005c54:	d119      	bne.n	8005c8a <ai_platform_network_get_error+0x42>
 8005c56:	f7ff fdcd 	bl	80057f4 <_ai_platform_acquire_crc>
 8005c5a:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <ai_platform_network_get_error+0xc8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c66:	d03c      	beq.n	8005ce2 <ai_platform_network_get_error+0x9a>
 8005c68:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <ai_platform_network_get_error+0xcc>)
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1fb      	bne.n	8005c70 <ai_platform_network_get_error+0x28>
 8005c78:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <ai_platform_network_get_error+0xd0>)
 8005c7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005c7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c82:	4b26      	ldr	r3, [pc, #152]	; (8005d1c <ai_platform_network_get_error+0xd4>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d038      	beq.n	8005cfa <ai_platform_network_get_error+0xb2>
 8005c88:	e7fe      	b.n	8005c88 <ai_platform_network_get_error+0x40>
 8005c8a:	f7ff fdb3 	bl	80057f4 <_ai_platform_acquire_crc>
 8005c8e:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <ai_platform_network_get_error+0xc8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9a:	d010      	beq.n	8005cbe <ai_platform_network_get_error+0x76>
 8005c9c:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <ai_platform_network_get_error+0xcc>)
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ca4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1fb      	bne.n	8005ca4 <ai_platform_network_get_error+0x5c>
 8005cac:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <ai_platform_network_get_error+0xd0>)
 8005cae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005cb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005cb6:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <ai_platform_network_get_error+0xd4>)
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d00d      	beq.n	8005cd8 <ai_platform_network_get_error+0x90>
 8005cbc:	e7fe      	b.n	8005cbc <ai_platform_network_get_error+0x74>
 8005cbe:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <ai_platform_network_get_error+0xd8>)
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	6093      	str	r3, [r2, #8]
 8005cc4:	6893      	ldr	r3, [r2, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1fc      	bne.n	8005cc4 <ai_platform_network_get_error+0x7c>
 8005cca:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <ai_platform_network_get_error+0xd0>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <ai_platform_network_get_error+0xd4>)
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d000      	beq.n	8005cd8 <ai_platform_network_get_error+0x90>
 8005cd6:	e7fe      	b.n	8005cd6 <ai_platform_network_get_error+0x8e>
 8005cd8:	f7ff fd8e 	bl	80057f8 <_ai_platform_release_crc>
 8005cdc:	f241 0010 	movw	r0, #4112	; 0x1010
 8005ce0:	bd10      	pop	{r4, pc}
 8005ce2:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <ai_platform_network_get_error+0xd8>)
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	6093      	str	r3, [r2, #8]
 8005ce8:	6893      	ldr	r3, [r2, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1fc      	bne.n	8005ce8 <ai_platform_network_get_error+0xa0>
 8005cee:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <ai_platform_network_get_error+0xd0>)
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <ai_platform_network_get_error+0xd4>)
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d107      	bne.n	8005d0a <ai_platform_network_get_error+0xc2>
 8005cfa:	f7ff fd7d 	bl	80057f8 <_ai_platform_release_crc>
 8005cfe:	f104 0010 	add.w	r0, r4, #16
 8005d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d06:	f001 b91b 	b.w	8006f40 <core_get_error>
 8005d0a:	e7fe      	b.n	8005d0a <ai_platform_network_get_error+0xc2>
 8005d0c:	a1c00100 	.word	0xa1c00100
 8005d10:	e0042000 	.word	0xe0042000
 8005d14:	58024000 	.word	0x58024000
 8005d18:	f407a5c2 	.word	0xf407a5c2
 8005d1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d20:	40023000 	.word	0x40023000

08005d24 <ai_platform_network_set_error>:
 8005d24:	b110      	cbz	r0, 8005d2c <ai_platform_network_set_error+0x8>
 8005d26:	3010      	adds	r0, #16
 8005d28:	f001 b910 	b.w	8006f4c <core_set_error>
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop

08005d30 <ai_platform_api_get_network_report>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	b087      	sub	sp, #28
 8005d36:	b1f8      	cbz	r0, 8005d78 <ai_platform_api_get_network_report+0x48>
 8005d38:	4b95      	ldr	r3, [pc, #596]	; (8005f90 <ai_platform_api_get_network_report+0x260>)
 8005d3a:	6802      	ldr	r2, [r0, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	4607      	mov	r7, r0
 8005d40:	d11a      	bne.n	8005d78 <ai_platform_api_get_network_report+0x48>
 8005d42:	468b      	mov	fp, r1
 8005d44:	f7ff fd56 	bl	80057f4 <_ai_platform_acquire_crc>
 8005d48:	4b92      	ldr	r3, [pc, #584]	; (8005f94 <ai_platform_api_get_network_report+0x264>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d54:	d03e      	beq.n	8005dd4 <ai_platform_api_get_network_report+0xa4>
 8005d56:	4a90      	ldr	r2, [pc, #576]	; (8005f98 <ai_platform_api_get_network_report+0x268>)
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005d5e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1fb      	bne.n	8005d5e <ai_platform_api_get_network_report+0x2e>
 8005d66:	4b8d      	ldr	r3, [pc, #564]	; (8005f9c <ai_platform_api_get_network_report+0x26c>)
 8005d68:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005d6c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005d70:	4b8b      	ldr	r3, [pc, #556]	; (8005fa0 <ai_platform_api_get_network_report+0x270>)
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d03a      	beq.n	8005dec <ai_platform_api_get_network_report+0xbc>
 8005d76:	e7fe      	b.n	8005d76 <ai_platform_api_get_network_report+0x46>
 8005d78:	f7ff fd3c 	bl	80057f4 <_ai_platform_acquire_crc>
 8005d7c:	4b85      	ldr	r3, [pc, #532]	; (8005f94 <ai_platform_api_get_network_report+0x264>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	d010      	beq.n	8005dac <ai_platform_api_get_network_report+0x7c>
 8005d8a:	4a83      	ldr	r2, [pc, #524]	; (8005f98 <ai_platform_api_get_network_report+0x268>)
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005d92:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1fb      	bne.n	8005d92 <ai_platform_api_get_network_report+0x62>
 8005d9a:	4b80      	ldr	r3, [pc, #512]	; (8005f9c <ai_platform_api_get_network_report+0x26c>)
 8005d9c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005da0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005da4:	4b7e      	ldr	r3, [pc, #504]	; (8005fa0 <ai_platform_api_get_network_report+0x270>)
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d00d      	beq.n	8005dc6 <ai_platform_api_get_network_report+0x96>
 8005daa:	e7fe      	b.n	8005daa <ai_platform_api_get_network_report+0x7a>
 8005dac:	4a7d      	ldr	r2, [pc, #500]	; (8005fa4 <ai_platform_api_get_network_report+0x274>)
 8005dae:	2301      	movs	r3, #1
 8005db0:	6093      	str	r3, [r2, #8]
 8005db2:	6893      	ldr	r3, [r2, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1fc      	bne.n	8005db2 <ai_platform_api_get_network_report+0x82>
 8005db8:	4b78      	ldr	r3, [pc, #480]	; (8005f9c <ai_platform_api_get_network_report+0x26c>)
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	4b78      	ldr	r3, [pc, #480]	; (8005fa0 <ai_platform_api_get_network_report+0x270>)
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d000      	beq.n	8005dc6 <ai_platform_api_get_network_report+0x96>
 8005dc4:	e7fe      	b.n	8005dc4 <ai_platform_api_get_network_report+0x94>
 8005dc6:	f7ff fd17 	bl	80057f8 <_ai_platform_release_crc>
 8005dca:	2400      	movs	r4, #0
 8005dcc:	4620      	mov	r0, r4
 8005dce:	b007      	add	sp, #28
 8005dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd4:	4a73      	ldr	r2, [pc, #460]	; (8005fa4 <ai_platform_api_get_network_report+0x274>)
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	6093      	str	r3, [r2, #8]
 8005dda:	6893      	ldr	r3, [r2, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1fc      	bne.n	8005dda <ai_platform_api_get_network_report+0xaa>
 8005de0:	4b6e      	ldr	r3, [pc, #440]	; (8005f9c <ai_platform_api_get_network_report+0x26c>)
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	4b6e      	ldr	r3, [pc, #440]	; (8005fa0 <ai_platform_api_get_network_report+0x270>)
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d112      	bne.n	8005e12 <ai_platform_api_get_network_report+0xe2>
 8005dec:	f7ff fd04 	bl	80057f8 <_ai_platform_release_crc>
 8005df0:	f1bb 0f00 	cmp.w	fp, #0
 8005df4:	d0e9      	beq.n	8005dca <ai_platform_api_get_network_report+0x9a>
 8005df6:	2400      	movs	r4, #0
 8005df8:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	b14b      	cbz	r3, 8005e14 <ai_platform_api_get_network_report+0xe4>
 8005e00:	3401      	adds	r4, #1
 8005e02:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d003      	beq.n	8005e14 <ai_platform_api_get_network_report+0xe4>
 8005e0c:	b112      	cbz	r2, 8005e14 <ai_platform_api_get_network_report+0xe4>
 8005e0e:	4613      	mov	r3, r2
 8005e10:	e7f5      	b.n	8005dfe <ai_platform_api_get_network_report+0xce>
 8005e12:	e7fe      	b.n	8005e12 <ai_platform_api_get_network_report+0xe2>
 8005e14:	2c00      	cmp	r4, #0
 8005e16:	f000 819e 	beq.w	8006156 <ai_platform_api_get_network_report+0x426>
 8005e1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d04e      	beq.n	8005ebe <ai_platform_api_get_network_report+0x18e>
 8005e20:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8005e24:	f1b9 0f00 	cmp.w	r9, #0
 8005e28:	d049      	beq.n	8005ebe <ai_platform_api_get_network_report+0x18e>
 8005e2a:	f04f 0a00 	mov.w	sl, #0
 8005e2e:	e9cd 7b00 	strd	r7, fp, [sp]
 8005e32:	4655      	mov	r5, sl
 8005e34:	e016      	b.n	8005e64 <ai_platform_api_get_network_report+0x134>
 8005e36:	2101      	movs	r1, #1
 8005e38:	f847 100e 	str.w	r1, [r7, lr]
 8005e3c:	69b1      	ldr	r1, [r6, #24]
 8005e3e:	6849      	ldr	r1, [r1, #4]
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	f04f 0301 	mov.w	r3, #1
 8005e46:	7523      	strb	r3, [r4, #20]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60e3      	str	r3, [r4, #12]
 8005e4c:	6963      	ldr	r3, [r4, #20]
 8005e4e:	6121      	str	r1, [r4, #16]
 8005e50:	e9c4 0200 	strd	r0, r2, [r4]
 8005e54:	f368 231f 	bfi	r3, r8, #8, #24
 8005e58:	f8c4 b018 	str.w	fp, [r4, #24]
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	f10a 0a1c 	add.w	sl, sl, #28
 8005e62:	6163      	str	r3, [r4, #20]
 8005e64:	f8b9 3000 	ldrh.w	r3, [r9]
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	b2aa      	uxth	r2, r5
 8005e6c:	d933      	bls.n	8005ed6 <ai_platform_api_get_network_report+0x1a6>
 8005e6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005e72:	b383      	cbz	r3, 8005ed6 <ai_platform_api_get_network_report+0x1a6>
 8005e74:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005e78:	b36e      	cbz	r6, 8005ed6 <ai_platform_api_get_network_report+0x1a6>
 8005e7a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005e7e:	69b2      	ldr	r2, [r6, #24]
 8005e80:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005e84:	6810      	ldr	r0, [r2, #0]
 8005e86:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005e8a:	68b3      	ldr	r3, [r6, #8]
 8005e8c:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005e90:	f005 fd9e 	bl	800b9d0 <ai_array_to_buffer_fmt>
 8005e94:	69b1      	ldr	r1, [r6, #24]
 8005e96:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005e9a:	688a      	ldr	r2, [r1, #8]
 8005e9c:	4454      	add	r4, sl
 8005e9e:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0cb      	beq.n	8005e3e <ai_platform_api_get_network_report+0x10e>
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005eac:	6831      	ldr	r1, [r6, #0]
 8005eae:	6059      	str	r1, [r3, #4]
 8005eb0:	b111      	cbz	r1, 8005eb8 <ai_platform_api_get_network_report+0x188>
 8005eb2:	8849      	ldrh	r1, [r1, #2]
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d1be      	bne.n	8005e36 <ai_platform_api_get_network_report+0x106>
 8005eb8:	69b1      	ldr	r1, [r6, #24]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e7bf      	b.n	8005e3e <ai_platform_api_get_network_report+0x10e>
 8005ebe:	2400      	movs	r4, #0
 8005ec0:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 8005ec4:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 8005ec8:	2218      	movs	r2, #24
 8005eca:	2112      	movs	r1, #18
 8005ecc:	f107 0010 	add.w	r0, r7, #16
 8005ed0:	f001 f83c 	bl	8006f4c <core_set_error>
 8005ed4:	e77a      	b.n	8005dcc <ai_platform_api_get_network_report+0x9c>
 8005ed6:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	d0ef      	beq.n	8005ebe <ai_platform_api_get_network_report+0x18e>
 8005ede:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8005ee8:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 8005eec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	f240 8125 	bls.w	800613e <ai_platform_api_get_network_report+0x40e>
 8005ef4:	f04f 0a00 	mov.w	sl, #0
 8005ef8:	e9cd 7b00 	strd	r7, fp, [sp]
 8005efc:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8005f00:	4655      	mov	r5, sl
 8005f02:	e016      	b.n	8005f32 <ai_platform_api_get_network_report+0x202>
 8005f04:	2101      	movs	r1, #1
 8005f06:	f847 100e 	str.w	r1, [r7, lr]
 8005f0a:	69b1      	ldr	r1, [r6, #24]
 8005f0c:	6849      	ldr	r1, [r1, #4]
 8005f0e:	60a3      	str	r3, [r4, #8]
 8005f10:	f04f 0301 	mov.w	r3, #1
 8005f14:	7523      	strb	r3, [r4, #20]
 8005f16:	2300      	movs	r3, #0
 8005f18:	60e3      	str	r3, [r4, #12]
 8005f1a:	6963      	ldr	r3, [r4, #20]
 8005f1c:	6121      	str	r1, [r4, #16]
 8005f1e:	e9c4 0200 	strd	r0, r2, [r4]
 8005f22:	f368 231f 	bfi	r3, r8, #8, #24
 8005f26:	f8c4 b018 	str.w	fp, [r4, #24]
 8005f2a:	3501      	adds	r5, #1
 8005f2c:	f10a 0a1c 	add.w	sl, sl, #28
 8005f30:	6163      	str	r3, [r4, #20]
 8005f32:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005f36:	42ab      	cmp	r3, r5
 8005f38:	b2aa      	uxth	r2, r5
 8005f3a:	d935      	bls.n	8005fa8 <ai_platform_api_get_network_report+0x278>
 8005f3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d031      	beq.n	8005fa8 <ai_platform_api_get_network_report+0x278>
 8005f44:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005f48:	b376      	cbz	r6, 8005fa8 <ai_platform_api_get_network_report+0x278>
 8005f4a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005f4e:	69b2      	ldr	r2, [r6, #24]
 8005f50:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005f54:	6810      	ldr	r0, [r2, #0]
 8005f56:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005f5a:	68b3      	ldr	r3, [r6, #8]
 8005f5c:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005f60:	f005 fd36 	bl	800b9d0 <ai_array_to_buffer_fmt>
 8005f64:	69b1      	ldr	r1, [r6, #24]
 8005f66:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005f6a:	688a      	ldr	r2, [r1, #8]
 8005f6c:	4454      	add	r4, sl
 8005f6e:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0ca      	beq.n	8005f0c <ai_platform_api_get_network_report+0x1dc>
 8005f76:	2100      	movs	r1, #0
 8005f78:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005f7c:	6831      	ldr	r1, [r6, #0]
 8005f7e:	6059      	str	r1, [r3, #4]
 8005f80:	b111      	cbz	r1, 8005f88 <ai_platform_api_get_network_report+0x258>
 8005f82:	8849      	ldrh	r1, [r1, #2]
 8005f84:	2900      	cmp	r1, #0
 8005f86:	d1bd      	bne.n	8005f04 <ai_platform_api_get_network_report+0x1d4>
 8005f88:	69b1      	ldr	r1, [r6, #24]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e7be      	b.n	8005f0c <ai_platform_api_get_network_report+0x1dc>
 8005f8e:	bf00      	nop
 8005f90:	a1c00100 	.word	0xa1c00100
 8005f94:	e0042000 	.word	0xe0042000
 8005f98:	58024000 	.word	0x58024000
 8005f9c:	f407a5c2 	.word	0xf407a5c2
 8005fa0:	b5e8b5cd 	.word	0xb5e8b5cd
 8005fa4:	40023000 	.word	0x40023000
 8005fa8:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	f000 80c6 	beq.w	800613e <ai_platform_api_get_network_report+0x40e>
 8005fb2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005fb6:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8005fc0:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f7ff fb6f 	bl	80056a8 <ai_buffer_array_sane>
 8005fca:	4604      	mov	r4, r0
 8005fcc:	b938      	cbnz	r0, 8005fde <ai_platform_api_get_network_report+0x2ae>
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f7ff fb6a 	bl	80056a8 <ai_buffer_array_sane>
 8005fd4:	b118      	cbz	r0, 8005fde <ai_platform_api_get_network_report+0x2ae>
 8005fd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 80c5 	bne.w	8006168 <ai_platform_api_get_network_report+0x438>
 8005fde:	f107 081c 	add.w	r8, r7, #28
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f7ff fb60 	bl	80056a8 <ai_buffer_array_sane>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	b938      	cbnz	r0, 8005ffc <ai_platform_api_get_network_report+0x2cc>
 8005fec:	4640      	mov	r0, r8
 8005fee:	f7ff fb5b 	bl	80056a8 <ai_buffer_array_sane>
 8005ff2:	b118      	cbz	r0, 8005ffc <ai_platform_api_get_network_report+0x2cc>
 8005ff4:	8bfb      	ldrh	r3, [r7, #30]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f040 80bd 	bne.w	8006176 <ai_platform_api_get_network_report+0x446>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 8006002:	f7ff fbf7 	bl	80057f4 <_ai_platform_acquire_crc>
 8006006:	4ba0      	ldr	r3, [pc, #640]	; (8006288 <ai_platform_api_get_network_report+0x558>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800600e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006012:	d010      	beq.n	8006036 <ai_platform_api_get_network_report+0x306>
 8006014:	4a9d      	ldr	r2, [pc, #628]	; (800628c <ai_platform_api_get_network_report+0x55c>)
 8006016:	2301      	movs	r3, #1
 8006018:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800601c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1fb      	bne.n	800601c <ai_platform_api_get_network_report+0x2ec>
 8006024:	4b9a      	ldr	r3, [pc, #616]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 8006026:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800602a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800602e:	4b99      	ldr	r3, [pc, #612]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 8006030:	429a      	cmp	r2, r3
 8006032:	d00d      	beq.n	8006050 <ai_platform_api_get_network_report+0x320>
 8006034:	e7fe      	b.n	8006034 <ai_platform_api_get_network_report+0x304>
 8006036:	4a98      	ldr	r2, [pc, #608]	; (8006298 <ai_platform_api_get_network_report+0x568>)
 8006038:	2301      	movs	r3, #1
 800603a:	6093      	str	r3, [r2, #8]
 800603c:	6893      	ldr	r3, [r2, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1fc      	bne.n	800603c <ai_platform_api_get_network_report+0x30c>
 8006042:	4b93      	ldr	r3, [pc, #588]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	4b92      	ldr	r3, [pc, #584]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 800604a:	429a      	cmp	r2, r3
 800604c:	f040 808a 	bne.w	8006164 <ai_platform_api_get_network_report+0x434>
 8006050:	f7ff fbd2 	bl	80057f8 <_ai_platform_release_crc>
 8006054:	4b91      	ldr	r3, [pc, #580]	; (800629c <ai_platform_api_get_network_report+0x56c>)
 8006056:	f8cb 3010 	str.w	r3, [fp, #16]
 800605a:	f7ff fbcb 	bl	80057f4 <_ai_platform_acquire_crc>
 800605e:	4b8a      	ldr	r3, [pc, #552]	; (8006288 <ai_platform_api_get_network_report+0x558>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606a:	d010      	beq.n	800608e <ai_platform_api_get_network_report+0x35e>
 800606c:	4b87      	ldr	r3, [pc, #540]	; (800628c <ai_platform_api_get_network_report+0x55c>)
 800606e:	2201      	movs	r2, #1
 8006070:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006074:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006078:	2a00      	cmp	r2, #0
 800607a:	d1fb      	bne.n	8006074 <ai_platform_api_get_network_report+0x344>
 800607c:	4a84      	ldr	r2, [pc, #528]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 800607e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006082:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006086:	4b83      	ldr	r3, [pc, #524]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 8006088:	429a      	cmp	r2, r3
 800608a:	d00c      	beq.n	80060a6 <ai_platform_api_get_network_report+0x376>
 800608c:	e7fe      	b.n	800608c <ai_platform_api_get_network_report+0x35c>
 800608e:	4b82      	ldr	r3, [pc, #520]	; (8006298 <ai_platform_api_get_network_report+0x568>)
 8006090:	2201      	movs	r2, #1
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	2a00      	cmp	r2, #0
 8006098:	d1fc      	bne.n	8006094 <ai_platform_api_get_network_report+0x364>
 800609a:	4a7d      	ldr	r2, [pc, #500]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b7c      	ldr	r3, [pc, #496]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d15f      	bne.n	8006166 <ai_platform_api_get_network_report+0x436>
 80060a6:	f7ff fba7 	bl	80057f8 <_ai_platform_release_crc>
 80060aa:	f44f 7384 	mov.w	r3, #264	; 0x108
 80060ae:	f8cb 3014 	str.w	r3, [fp, #20]
 80060b2:	f7ff fb9f 	bl	80057f4 <_ai_platform_acquire_crc>
 80060b6:	4b74      	ldr	r3, [pc, #464]	; (8006288 <ai_platform_api_get_network_report+0x558>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	d010      	beq.n	80060e6 <ai_platform_api_get_network_report+0x3b6>
 80060c4:	4b71      	ldr	r3, [pc, #452]	; (800628c <ai_platform_api_get_network_report+0x55c>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80060cc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	d1fb      	bne.n	80060cc <ai_platform_api_get_network_report+0x39c>
 80060d4:	4a6e      	ldr	r2, [pc, #440]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 80060d6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80060da:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80060de:	4b6d      	ldr	r3, [pc, #436]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d00c      	beq.n	80060fe <ai_platform_api_get_network_report+0x3ce>
 80060e4:	e7fe      	b.n	80060e4 <ai_platform_api_get_network_report+0x3b4>
 80060e6:	4b6c      	ldr	r3, [pc, #432]	; (8006298 <ai_platform_api_get_network_report+0x568>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	2a00      	cmp	r2, #0
 80060f0:	d1fc      	bne.n	80060ec <ai_platform_api_get_network_report+0x3bc>
 80060f2:	4a67      	ldr	r2, [pc, #412]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b66      	ldr	r3, [pc, #408]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d142      	bne.n	8006184 <ai_platform_api_get_network_report+0x454>
 80060fe:	f7ff fb7b 	bl	80057f8 <_ai_platform_release_crc>
 8006102:	f240 2301 	movw	r3, #513	; 0x201
 8006106:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800610a:	f7ff fb73 	bl	80057f4 <_ai_platform_acquire_crc>
 800610e:	4b5e      	ldr	r3, [pc, #376]	; (8006288 <ai_platform_api_get_network_report+0x558>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611a:	d034      	beq.n	8006186 <ai_platform_api_get_network_report+0x456>
 800611c:	4b5b      	ldr	r3, [pc, #364]	; (800628c <ai_platform_api_get_network_report+0x55c>)
 800611e:	2201      	movs	r2, #1
 8006120:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006124:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006128:	2a00      	cmp	r2, #0
 800612a:	d1fb      	bne.n	8006124 <ai_platform_api_get_network_report+0x3f4>
 800612c:	4a58      	ldr	r2, [pc, #352]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 800612e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006132:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006136:	4b57      	ldr	r3, [pc, #348]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d030      	beq.n	800619e <ai_platform_api_get_network_report+0x46e>
 800613c:	e7fe      	b.n	800613c <ai_platform_api_get_network_report+0x40c>
 800613e:	2400      	movs	r4, #0
 8006140:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 8006144:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 8006148:	2218      	movs	r2, #24
 800614a:	2113      	movs	r1, #19
 800614c:	f107 0010 	add.w	r0, r7, #16
 8006150:	f000 fefc 	bl	8006f4c <core_set_error>
 8006154:	e63a      	b.n	8005dcc <ai_platform_api_get_network_report+0x9c>
 8006156:	2218      	movs	r2, #24
 8006158:	2111      	movs	r1, #17
 800615a:	f107 0010 	add.w	r0, r7, #16
 800615e:	f000 fef5 	bl	8006f4c <core_set_error>
 8006162:	e633      	b.n	8005dcc <ai_platform_api_get_network_report+0x9c>
 8006164:	e7fe      	b.n	8006164 <ai_platform_api_get_network_report+0x434>
 8006166:	e7fe      	b.n	8006166 <ai_platform_api_get_network_report+0x436>
 8006168:	2213      	movs	r2, #19
 800616a:	2111      	movs	r1, #17
 800616c:	f107 0010 	add.w	r0, r7, #16
 8006170:	f000 feec 	bl	8006f4c <core_set_error>
 8006174:	e62a      	b.n	8005dcc <ai_platform_api_get_network_report+0x9c>
 8006176:	2212      	movs	r2, #18
 8006178:	2111      	movs	r1, #17
 800617a:	f107 0010 	add.w	r0, r7, #16
 800617e:	f000 fee5 	bl	8006f4c <core_set_error>
 8006182:	e623      	b.n	8005dcc <ai_platform_api_get_network_report+0x9c>
 8006184:	e7fe      	b.n	8006184 <ai_platform_api_get_network_report+0x454>
 8006186:	4b44      	ldr	r3, [pc, #272]	; (8006298 <ai_platform_api_get_network_report+0x568>)
 8006188:	2201      	movs	r2, #1
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	2a00      	cmp	r2, #0
 8006190:	d1fc      	bne.n	800618c <ai_platform_api_get_network_report+0x45c>
 8006192:	4a3f      	ldr	r2, [pc, #252]	; (8006290 <ai_platform_api_get_network_report+0x560>)
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <ai_platform_api_get_network_report+0x564>)
 800619a:	429a      	cmp	r2, r3
 800619c:	d14a      	bne.n	8006234 <ai_platform_api_get_network_report+0x504>
 800619e:	f7ff fb2b 	bl	80057f8 <_ai_platform_release_crc>
 80061a2:	f240 5301 	movw	r3, #1281	; 0x501
 80061a6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 80061aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80061ac:	f7ff fa02 	bl	80055b4 <ai_platform_version_get>
 80061b0:	4b3b      	ldr	r3, [pc, #236]	; (80062a0 <ai_platform_api_get_network_report+0x570>)
 80061b2:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 80061b6:	f8cb 0020 	str.w	r0, [fp, #32]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d10d      	bne.n	80061da <ai_platform_api_get_network_report+0x4aa>
 80061be:	e896 0003 	ldmia.w	r6, {r0, r1}
 80061c2:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 80061c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80061ca:	e898 0003 	ldmia.w	r8, {r0, r1}
 80061ce:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 80061d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80061d6:	2401      	movs	r4, #1
 80061d8:	e5f8      	b.n	8005dcc <ai_platform_api_get_network_report+0x9c>
 80061da:	4a32      	ldr	r2, [pc, #200]	; (80062a4 <ai_platform_api_get_network_report+0x574>)
 80061dc:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <ai_platform_api_get_network_report+0x578>)
 80061de:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 80061e2:	2000      	movs	r0, #0
 80061e4:	2100      	movs	r1, #0
 80061e6:	f240 4201 	movw	r2, #1025	; 0x401
 80061ea:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 80061ee:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 80061f2:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 80061f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061f8:	f10d 0908 	add.w	r9, sp, #8
 80061fc:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 8006200:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 8006204:	46a6      	mov	lr, r4
 8006206:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800620a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800620e:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 8006212:	46ac      	mov	ip, r5
 8006214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006218:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800621c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8006220:	4630      	mov	r0, r6
 8006222:	f7ff fa41 	bl	80056a8 <ai_buffer_array_sane>
 8006226:	b990      	cbnz	r0, 800624e <ai_platform_api_get_network_report+0x51e>
 8006228:	4640      	mov	r0, r8
 800622a:	f7ff fa3d 	bl	80056a8 <ai_buffer_array_sane>
 800622e:	b910      	cbnz	r0, 8006236 <ai_platform_api_get_network_report+0x506>
 8006230:	2401      	movs	r4, #1
 8006232:	e5cb      	b.n	8005dcc <ai_platform_api_get_network_report+0x9c>
 8006234:	e7fe      	b.n	8006234 <ai_platform_api_get_network_report+0x504>
 8006236:	4640      	mov	r0, r8
 8006238:	f7ff fa36 	bl	80056a8 <ai_buffer_array_sane>
 800623c:	b198      	cbz	r0, 8006266 <ai_platform_api_get_network_report+0x536>
 800623e:	6a3d      	ldr	r5, [r7, #32]
 8006240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006244:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800624c:	e7f0      	b.n	8006230 <ai_platform_api_get_network_report+0x500>
 800624e:	4630      	mov	r0, r6
 8006250:	f7ff fa2a 	bl	80056a8 <ai_buffer_array_sane>
 8006254:	b178      	cbz	r0, 8006276 <ai_platform_api_get_network_report+0x546>
 8006256:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8006258:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800625a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006260:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006264:	e7e0      	b.n	8006228 <ai_platform_api_get_network_report+0x4f8>
 8006266:	4605      	mov	r5, r0
 8006268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800626a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800626c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006274:	deff      	udf	#255	; 0xff
 8006276:	4604      	mov	r4, r0
 8006278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800627a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800627c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006280:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006284:	deff      	udf	#255	; 0xff
 8006286:	bf00      	nop
 8006288:	e0042000 	.word	0xe0042000
 800628c:	58024000 	.word	0x58024000
 8006290:	f407a5c2 	.word	0xf407a5c2
 8006294:	b5e8b5cd 	.word	0xb5e8b5cd
 8006298:	40023000 	.word	0x40023000
 800629c:	080107b4 	.word	0x080107b4
 80062a0:	a1facade 	.word	0xa1facade
 80062a4:	00040440 	.word	0x00040440
 80062a8:	0800f468 	.word	0x0800f468

080062ac <ai_platform_network_create>:
 80062ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062b0:	b083      	sub	sp, #12
 80062b2:	4606      	mov	r6, r0
 80062b4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80062b8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80062bc:	4615      	mov	r5, r2
 80062be:	461f      	mov	r7, r3
 80062c0:	f7ff fa98 	bl	80057f4 <_ai_platform_acquire_crc>
 80062c4:	b188      	cbz	r0, 80062ea <ai_platform_network_create+0x3e>
 80062c6:	4a5d      	ldr	r2, [pc, #372]	; (800643c <ai_platform_network_create+0x190>)
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80062ce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80062d2:	4603      	mov	r3, r0
 80062d4:	d00e      	beq.n	80062f4 <ai_platform_network_create+0x48>
 80062d6:	4a5a      	ldr	r2, [pc, #360]	; (8006440 <ai_platform_network_create+0x194>)
 80062d8:	2118      	movs	r1, #24
 80062da:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80062de:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80062e2:	2918      	cmp	r1, #24
 80062e4:	d018      	beq.n	8006318 <ai_platform_network_create+0x6c>
 80062e6:	f7ff fa87 	bl	80057f8 <_ai_platform_release_crc>
 80062ea:	f244 1033 	movw	r0, #16691	; 0x4133
 80062ee:	b003      	add	sp, #12
 80062f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062f4:	4a53      	ldr	r2, [pc, #332]	; (8006444 <ai_platform_network_create+0x198>)
 80062f6:	2101      	movs	r1, #1
 80062f8:	6091      	str	r1, [r2, #8]
 80062fa:	2114      	movs	r1, #20
 80062fc:	e001      	b.n	8006302 <ai_platform_network_create+0x56>
 80062fe:	3901      	subs	r1, #1
 8006300:	d002      	beq.n	8006308 <ai_platform_network_create+0x5c>
 8006302:	6894      	ldr	r4, [r2, #8]
 8006304:	2c00      	cmp	r4, #0
 8006306:	d1fa      	bne.n	80062fe <ai_platform_network_create+0x52>
 8006308:	4a4e      	ldr	r2, [pc, #312]	; (8006444 <ai_platform_network_create+0x198>)
 800630a:	6891      	ldr	r1, [r2, #8]
 800630c:	b911      	cbnz	r1, 8006314 <ai_platform_network_create+0x68>
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	3201      	adds	r2, #1
 8006312:	d008      	beq.n	8006326 <ai_platform_network_create+0x7a>
 8006314:	4618      	mov	r0, r3
 8006316:	e7e6      	b.n	80062e6 <ai_platform_network_create+0x3a>
 8006318:	2101      	movs	r1, #1
 800631a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800631e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006322:	2900      	cmp	r1, #0
 8006324:	d1fb      	bne.n	800631e <ai_platform_network_create+0x72>
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fa66 	bl	80057f8 <_ai_platform_release_crc>
 800632c:	f7ff fa62 	bl	80057f4 <_ai_platform_acquire_crc>
 8006330:	4b42      	ldr	r3, [pc, #264]	; (800643c <ai_platform_network_create+0x190>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633c:	d010      	beq.n	8006360 <ai_platform_network_create+0xb4>
 800633e:	4b40      	ldr	r3, [pc, #256]	; (8006440 <ai_platform_network_create+0x194>)
 8006340:	2201      	movs	r2, #1
 8006342:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006346:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800634a:	2900      	cmp	r1, #0
 800634c:	d1fb      	bne.n	8006346 <ai_platform_network_create+0x9a>
 800634e:	4a3e      	ldr	r2, [pc, #248]	; (8006448 <ai_platform_network_create+0x19c>)
 8006350:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006354:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006358:	4b3c      	ldr	r3, [pc, #240]	; (800644c <ai_platform_network_create+0x1a0>)
 800635a:	429a      	cmp	r2, r3
 800635c:	d00c      	beq.n	8006378 <ai_platform_network_create+0xcc>
 800635e:	e7fe      	b.n	800635e <ai_platform_network_create+0xb2>
 8006360:	4a38      	ldr	r2, [pc, #224]	; (8006444 <ai_platform_network_create+0x198>)
 8006362:	2301      	movs	r3, #1
 8006364:	6093      	str	r3, [r2, #8]
 8006366:	6893      	ldr	r3, [r2, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1fc      	bne.n	8006366 <ai_platform_network_create+0xba>
 800636c:	4b36      	ldr	r3, [pc, #216]	; (8006448 <ai_platform_network_create+0x19c>)
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	4b36      	ldr	r3, [pc, #216]	; (800644c <ai_platform_network_create+0x1a0>)
 8006374:	429a      	cmp	r2, r3
 8006376:	d122      	bne.n	80063be <ai_platform_network_create+0x112>
 8006378:	f7ff fa3e 	bl	80057f8 <_ai_platform_release_crc>
 800637c:	b38e      	cbz	r6, 80063e2 <ai_platform_network_create+0x136>
 800637e:	4b34      	ldr	r3, [pc, #208]	; (8006450 <ai_platform_network_create+0x1a4>)
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	6035      	str	r5, [r6, #0]
 8006384:	f000 fdda 	bl	8006f3c <core_init>
 8006388:	b1d0      	cbz	r0, 80063c0 <ai_platform_network_create+0x114>
 800638a:	f7ff fa33 	bl	80057f4 <_ai_platform_acquire_crc>
 800638e:	4b2b      	ldr	r3, [pc, #172]	; (800643c <ai_platform_network_create+0x190>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639a:	d025      	beq.n	80063e8 <ai_platform_network_create+0x13c>
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <ai_platform_network_create+0x194>)
 800639e:	2301      	movs	r3, #1
 80063a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80063a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1fb      	bne.n	80063a4 <ai_platform_network_create+0xf8>
 80063ac:	4b26      	ldr	r3, [pc, #152]	; (8006448 <ai_platform_network_create+0x19c>)
 80063ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80063b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80063b6:	4b25      	ldr	r3, [pc, #148]	; (800644c <ai_platform_network_create+0x1a0>)
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d022      	beq.n	8006402 <ai_platform_network_create+0x156>
 80063bc:	e7fe      	b.n	80063bc <ai_platform_network_create+0x110>
 80063be:	e7fe      	b.n	80063be <ai_platform_network_create+0x112>
 80063c0:	2430      	movs	r4, #48	; 0x30
 80063c2:	2300      	movs	r3, #0
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	2610      	movs	r6, #16
 80063c8:	464a      	mov	r2, r9
 80063ca:	4641      	mov	r1, r8
 80063cc:	4638      	mov	r0, r7
 80063ce:	f7ff f8eb 	bl	80055a8 <ai_version_get>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2000      	movs	r0, #0
 80063d6:	f364 0007 	bfi	r0, r4, #0, #8
 80063da:	64ab      	str	r3, [r5, #72]	; 0x48
 80063dc:	f366 201f 	bfi	r0, r6, #8, #24
 80063e0:	e785      	b.n	80062ee <ai_platform_network_create+0x42>
 80063e2:	f241 0010 	movw	r0, #4112	; 0x1010
 80063e6:	e782      	b.n	80062ee <ai_platform_network_create+0x42>
 80063e8:	4a16      	ldr	r2, [pc, #88]	; (8006444 <ai_platform_network_create+0x198>)
 80063ea:	2301      	movs	r3, #1
 80063ec:	6093      	str	r3, [r2, #8]
 80063ee:	6893      	ldr	r3, [r2, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1fc      	bne.n	80063ee <ai_platform_network_create+0x142>
 80063f4:	4b14      	ldr	r3, [pc, #80]	; (8006448 <ai_platform_network_create+0x19c>)
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	4b14      	ldr	r3, [pc, #80]	; (800644c <ai_platform_network_create+0x1a0>)
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d000      	beq.n	8006402 <ai_platform_network_create+0x156>
 8006400:	e7fe      	b.n	8006400 <ai_platform_network_create+0x154>
 8006402:	f7ff f9f9 	bl	80057f8 <_ai_platform_release_crc>
 8006406:	2200      	movs	r2, #0
 8006408:	4641      	mov	r1, r8
 800640a:	4638      	mov	r0, r7
 800640c:	f7ff f8cc 	bl	80055a8 <ai_version_get>
 8006410:	2200      	movs	r2, #0
 8006412:	4604      	mov	r4, r0
 8006414:	2105      	movs	r1, #5
 8006416:	2001      	movs	r0, #1
 8006418:	f7ff f8c6 	bl	80055a8 <ai_version_get>
 800641c:	4284      	cmp	r4, r0
 800641e:	d001      	beq.n	8006424 <ai_platform_network_create+0x178>
 8006420:	2401      	movs	r4, #1
 8006422:	e7ce      	b.n	80063c2 <ai_platform_network_create+0x116>
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <ai_platform_network_create+0x1a8>)
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	a801      	add	r0, sp, #4
 800642a:	f000 fee9 	bl	8007200 <ai_check_custom_types>
 800642e:	b110      	cbz	r0, 8006436 <ai_platform_network_create+0x18a>
 8006430:	2600      	movs	r6, #0
 8006432:	4634      	mov	r4, r6
 8006434:	e7c8      	b.n	80063c8 <ai_platform_network_create+0x11c>
 8006436:	2402      	movs	r4, #2
 8006438:	e7c3      	b.n	80063c2 <ai_platform_network_create+0x116>
 800643a:	bf00      	nop
 800643c:	e0042000 	.word	0xe0042000
 8006440:	58024000 	.word	0x58024000
 8006444:	40023000 	.word	0x40023000
 8006448:	f407a5c2 	.word	0xf407a5c2
 800644c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006450:	a1c00100 	.word	0xa1c00100
 8006454:	84048403 	.word	0x84048403

08006458 <ai_platform_network_destroy>:
 8006458:	b510      	push	{r4, lr}
 800645a:	4604      	mov	r4, r0
 800645c:	b1e8      	cbz	r0, 800649a <ai_platform_network_destroy+0x42>
 800645e:	4b2e      	ldr	r3, [pc, #184]	; (8006518 <ai_platform_network_destroy+0xc0>)
 8006460:	6802      	ldr	r2, [r0, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d119      	bne.n	800649a <ai_platform_network_destroy+0x42>
 8006466:	f7ff f9c5 	bl	80057f4 <_ai_platform_acquire_crc>
 800646a:	4b2c      	ldr	r3, [pc, #176]	; (800651c <ai_platform_network_destroy+0xc4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006476:	d03b      	beq.n	80064f0 <ai_platform_network_destroy+0x98>
 8006478:	4a29      	ldr	r2, [pc, #164]	; (8006520 <ai_platform_network_destroy+0xc8>)
 800647a:	2301      	movs	r3, #1
 800647c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006480:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1fb      	bne.n	8006480 <ai_platform_network_destroy+0x28>
 8006488:	4b26      	ldr	r3, [pc, #152]	; (8006524 <ai_platform_network_destroy+0xcc>)
 800648a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800648e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006492:	4b25      	ldr	r3, [pc, #148]	; (8006528 <ai_platform_network_destroy+0xd0>)
 8006494:	429a      	cmp	r2, r3
 8006496:	d037      	beq.n	8006508 <ai_platform_network_destroy+0xb0>
 8006498:	e7fe      	b.n	8006498 <ai_platform_network_destroy+0x40>
 800649a:	f7ff f9ab 	bl	80057f4 <_ai_platform_acquire_crc>
 800649e:	4b1f      	ldr	r3, [pc, #124]	; (800651c <ai_platform_network_destroy+0xc4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064aa:	d010      	beq.n	80064ce <ai_platform_network_destroy+0x76>
 80064ac:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <ai_platform_network_destroy+0xc8>)
 80064ae:	2301      	movs	r3, #1
 80064b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1fb      	bne.n	80064b4 <ai_platform_network_destroy+0x5c>
 80064bc:	4b19      	ldr	r3, [pc, #100]	; (8006524 <ai_platform_network_destroy+0xcc>)
 80064be:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80064c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80064c6:	4b18      	ldr	r3, [pc, #96]	; (8006528 <ai_platform_network_destroy+0xd0>)
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d00d      	beq.n	80064e8 <ai_platform_network_destroy+0x90>
 80064cc:	e7fe      	b.n	80064cc <ai_platform_network_destroy+0x74>
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <ai_platform_network_destroy+0xd4>)
 80064d0:	2301      	movs	r3, #1
 80064d2:	6093      	str	r3, [r2, #8]
 80064d4:	6893      	ldr	r3, [r2, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1fc      	bne.n	80064d4 <ai_platform_network_destroy+0x7c>
 80064da:	4b12      	ldr	r3, [pc, #72]	; (8006524 <ai_platform_network_destroy+0xcc>)
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	4b11      	ldr	r3, [pc, #68]	; (8006528 <ai_platform_network_destroy+0xd0>)
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d000      	beq.n	80064e8 <ai_platform_network_destroy+0x90>
 80064e6:	e7fe      	b.n	80064e6 <ai_platform_network_destroy+0x8e>
 80064e8:	f7ff f986 	bl	80057f8 <_ai_platform_release_crc>
 80064ec:	4620      	mov	r0, r4
 80064ee:	bd10      	pop	{r4, pc}
 80064f0:	4a0e      	ldr	r2, [pc, #56]	; (800652c <ai_platform_network_destroy+0xd4>)
 80064f2:	2301      	movs	r3, #1
 80064f4:	6093      	str	r3, [r2, #8]
 80064f6:	6893      	ldr	r3, [r2, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1fc      	bne.n	80064f6 <ai_platform_network_destroy+0x9e>
 80064fc:	4b09      	ldr	r3, [pc, #36]	; (8006524 <ai_platform_network_destroy+0xcc>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <ai_platform_network_destroy+0xd0>)
 8006504:	429a      	cmp	r2, r3
 8006506:	d106      	bne.n	8006516 <ai_platform_network_destroy+0xbe>
 8006508:	f7ff f976 	bl	80057f8 <_ai_platform_release_crc>
 800650c:	4620      	mov	r0, r4
 800650e:	f000 ff0d 	bl	800732c <ai_layers_destroy_all>
 8006512:	2000      	movs	r0, #0
 8006514:	bd10      	pop	{r4, pc}
 8006516:	e7fe      	b.n	8006516 <ai_platform_network_destroy+0xbe>
 8006518:	a1c00100 	.word	0xa1c00100
 800651c:	e0042000 	.word	0xe0042000
 8006520:	58024000 	.word	0x58024000
 8006524:	f407a5c2 	.word	0xf407a5c2
 8006528:	b5e8b5cd 	.word	0xb5e8b5cd
 800652c:	40023000 	.word	0x40023000

08006530 <ai_platform_network_init>:
 8006530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006534:	b1f8      	cbz	r0, 8006576 <ai_platform_network_init+0x46>
 8006536:	4b6e      	ldr	r3, [pc, #440]	; (80066f0 <ai_platform_network_init+0x1c0>)
 8006538:	6802      	ldr	r2, [r0, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	4604      	mov	r4, r0
 800653e:	d11a      	bne.n	8006576 <ai_platform_network_init+0x46>
 8006540:	460e      	mov	r6, r1
 8006542:	f7ff f957 	bl	80057f4 <_ai_platform_acquire_crc>
 8006546:	4b6b      	ldr	r3, [pc, #428]	; (80066f4 <ai_platform_network_init+0x1c4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006552:	d03d      	beq.n	80065d0 <ai_platform_network_init+0xa0>
 8006554:	4a68      	ldr	r2, [pc, #416]	; (80066f8 <ai_platform_network_init+0x1c8>)
 8006556:	2301      	movs	r3, #1
 8006558:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800655c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1fb      	bne.n	800655c <ai_platform_network_init+0x2c>
 8006564:	4b65      	ldr	r3, [pc, #404]	; (80066fc <ai_platform_network_init+0x1cc>)
 8006566:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800656a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800656e:	4b64      	ldr	r3, [pc, #400]	; (8006700 <ai_platform_network_init+0x1d0>)
 8006570:	429a      	cmp	r2, r3
 8006572:	d039      	beq.n	80065e8 <ai_platform_network_init+0xb8>
 8006574:	e7fe      	b.n	8006574 <ai_platform_network_init+0x44>
 8006576:	f7ff f93d 	bl	80057f4 <_ai_platform_acquire_crc>
 800657a:	4b5e      	ldr	r3, [pc, #376]	; (80066f4 <ai_platform_network_init+0x1c4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006586:	d010      	beq.n	80065aa <ai_platform_network_init+0x7a>
 8006588:	4a5b      	ldr	r2, [pc, #364]	; (80066f8 <ai_platform_network_init+0x1c8>)
 800658a:	2301      	movs	r3, #1
 800658c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006590:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1fb      	bne.n	8006590 <ai_platform_network_init+0x60>
 8006598:	4b58      	ldr	r3, [pc, #352]	; (80066fc <ai_platform_network_init+0x1cc>)
 800659a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800659e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80065a2:	4b57      	ldr	r3, [pc, #348]	; (8006700 <ai_platform_network_init+0x1d0>)
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d00d      	beq.n	80065c4 <ai_platform_network_init+0x94>
 80065a8:	e7fe      	b.n	80065a8 <ai_platform_network_init+0x78>
 80065aa:	4a56      	ldr	r2, [pc, #344]	; (8006704 <ai_platform_network_init+0x1d4>)
 80065ac:	2301      	movs	r3, #1
 80065ae:	6093      	str	r3, [r2, #8]
 80065b0:	6893      	ldr	r3, [r2, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1fc      	bne.n	80065b0 <ai_platform_network_init+0x80>
 80065b6:	4b51      	ldr	r3, [pc, #324]	; (80066fc <ai_platform_network_init+0x1cc>)
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	4b50      	ldr	r3, [pc, #320]	; (8006700 <ai_platform_network_init+0x1d0>)
 80065be:	429a      	cmp	r2, r3
 80065c0:	d000      	beq.n	80065c4 <ai_platform_network_init+0x94>
 80065c2:	e7fe      	b.n	80065c2 <ai_platform_network_init+0x92>
 80065c4:	f7ff f918 	bl	80057f8 <_ai_platform_release_crc>
 80065c8:	2600      	movs	r6, #0
 80065ca:	4630      	mov	r0, r6
 80065cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d0:	4a4c      	ldr	r2, [pc, #304]	; (8006704 <ai_platform_network_init+0x1d4>)
 80065d2:	2301      	movs	r3, #1
 80065d4:	6093      	str	r3, [r2, #8]
 80065d6:	6893      	ldr	r3, [r2, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1fc      	bne.n	80065d6 <ai_platform_network_init+0xa6>
 80065dc:	4b47      	ldr	r3, [pc, #284]	; (80066fc <ai_platform_network_init+0x1cc>)
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <ai_platform_network_init+0x1d0>)
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d11c      	bne.n	8006622 <ai_platform_network_init+0xf2>
 80065e8:	f7ff f906 	bl	80057f8 <_ai_platform_release_crc>
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	d06f      	beq.n	80066d0 <ai_platform_network_init+0x1a0>
 80065f0:	4b45      	ldr	r3, [pc, #276]	; (8006708 <ai_platform_network_init+0x1d8>)
 80065f2:	6832      	ldr	r2, [r6, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d115      	bne.n	8006624 <ai_platform_network_init+0xf4>
 80065f8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80065fc:	6933      	ldr	r3, [r6, #16]
 80065fe:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8006602:	89f7      	ldrh	r7, [r6, #14]
 8006604:	62a3      	str	r3, [r4, #40]	; 0x28
 8006606:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800660a:	2303      	movs	r3, #3
 800660c:	84e7      	strh	r7, [r4, #38]	; 0x26
 800660e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8006612:	60e3      	str	r3, [r4, #12]
 8006614:	4620      	mov	r0, r4
 8006616:	4626      	mov	r6, r4
 8006618:	f000 fe1c 	bl	8007254 <ai_layers_init_all>
 800661c:	4630      	mov	r0, r6
 800661e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006622:	e7fe      	b.n	8006622 <ai_platform_network_init+0xf2>
 8006624:	2101      	movs	r1, #1
 8006626:	4630      	mov	r0, r6
 8006628:	4635      	mov	r5, r6
 800662a:	6876      	ldr	r6, [r6, #4]
 800662c:	f7ff f800 	bl	8005630 <ai_buffer_get_size>
 8006630:	f105 081c 	add.w	r8, r5, #28
 8006634:	4681      	mov	r9, r0
 8006636:	2101      	movs	r1, #1
 8006638:	4640      	mov	r0, r8
 800663a:	6a2f      	ldr	r7, [r5, #32]
 800663c:	f7fe fff8 	bl	8005630 <ai_buffer_get_size>
 8006640:	f1b9 0f00 	cmp.w	r9, #0
 8006644:	d025      	beq.n	8006692 <ai_platform_network_init+0x162>
 8006646:	2201      	movs	r2, #1
 8006648:	4696      	mov	lr, r2
 800664a:	bb30      	cbnz	r0, 800669a <ai_platform_network_init+0x16a>
 800664c:	4680      	mov	r8, r0
 800664e:	4607      	mov	r7, r0
 8006650:	b376      	cbz	r6, 80066b0 <ai_platform_network_init+0x180>
 8006652:	8be3      	ldrh	r3, [r4, #30]
 8006654:	4573      	cmp	r3, lr
 8006656:	d323      	bcc.n	80066a0 <ai_platform_network_init+0x170>
 8006658:	b142      	cbz	r2, 800666c <ai_platform_network_init+0x13c>
 800665a:	46ac      	mov	ip, r5
 800665c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006660:	6a25      	ldr	r5, [r4, #32]
 8006662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006664:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006668:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800666c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800666e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8006672:	2600      	movs	r6, #0
 8006674:	42bb      	cmp	r3, r7
 8006676:	83a6      	strh	r6, [r4, #28]
 8006678:	d323      	bcc.n	80066c2 <ai_platform_network_init+0x192>
 800667a:	b37f      	cbz	r7, 80066dc <ai_platform_network_init+0x1ac>
 800667c:	46c4      	mov	ip, r8
 800667e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006682:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006686:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800668a:	46b6      	mov	lr, r6
 800668c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006690:	e7bb      	b.n	800660a <ai_platform_network_init+0xda>
 8006692:	464a      	mov	r2, r9
 8006694:	46ce      	mov	lr, r9
 8006696:	464d      	mov	r5, r9
 8006698:	e7d7      	b.n	800664a <ai_platform_network_init+0x11a>
 800669a:	b30f      	cbz	r7, 80066e0 <ai_platform_network_init+0x1b0>
 800669c:	2701      	movs	r7, #1
 800669e:	e7d7      	b.n	8006650 <ai_platform_network_init+0x120>
 80066a0:	2212      	movs	r2, #18
 80066a2:	2116      	movs	r1, #22
 80066a4:	f104 0010 	add.w	r0, r4, #16
 80066a8:	f000 fc50 	bl	8006f4c <core_set_error>
 80066ac:	2600      	movs	r6, #0
 80066ae:	e78c      	b.n	80065ca <ai_platform_network_init+0x9a>
 80066b0:	f1b9 0f00 	cmp.w	r9, #0
 80066b4:	d0cd      	beq.n	8006652 <ai_platform_network_init+0x122>
 80066b6:	2110      	movs	r1, #16
 80066b8:	2212      	movs	r2, #18
 80066ba:	1860      	adds	r0, r4, r1
 80066bc:	f000 fc46 	bl	8006f4c <core_set_error>
 80066c0:	e783      	b.n	80065ca <ai_platform_network_init+0x9a>
 80066c2:	2213      	movs	r2, #19
 80066c4:	2116      	movs	r1, #22
 80066c6:	f104 0010 	add.w	r0, r4, #16
 80066ca:	f000 fc3f 	bl	8006f4c <core_set_error>
 80066ce:	e77c      	b.n	80065ca <ai_platform_network_init+0x9a>
 80066d0:	2110      	movs	r1, #16
 80066d2:	2211      	movs	r2, #17
 80066d4:	1860      	adds	r0, r4, r1
 80066d6:	f000 fc39 	bl	8006f4c <core_set_error>
 80066da:	e776      	b.n	80065ca <ai_platform_network_init+0x9a>
 80066dc:	46be      	mov	lr, r7
 80066de:	e794      	b.n	800660a <ai_platform_network_init+0xda>
 80066e0:	2110      	movs	r1, #16
 80066e2:	2213      	movs	r2, #19
 80066e4:	1860      	adds	r0, r4, r1
 80066e6:	f000 fc31 	bl	8006f4c <core_set_error>
 80066ea:	463e      	mov	r6, r7
 80066ec:	e76d      	b.n	80065ca <ai_platform_network_init+0x9a>
 80066ee:	bf00      	nop
 80066f0:	a1c00100 	.word	0xa1c00100
 80066f4:	e0042000 	.word	0xe0042000
 80066f8:	58024000 	.word	0x58024000
 80066fc:	f407a5c2 	.word	0xf407a5c2
 8006700:	b5e8b5cd 	.word	0xb5e8b5cd
 8006704:	40023000 	.word	0x40023000
 8006708:	a1facade 	.word	0xa1facade

0800670c <ai_platform_network_post_init>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	b1f0      	cbz	r0, 800674e <ai_platform_network_post_init+0x42>
 8006710:	4b3c      	ldr	r3, [pc, #240]	; (8006804 <ai_platform_network_post_init+0xf8>)
 8006712:	6802      	ldr	r2, [r0, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	4604      	mov	r4, r0
 8006718:	d119      	bne.n	800674e <ai_platform_network_post_init+0x42>
 800671a:	f7ff f86b 	bl	80057f4 <_ai_platform_acquire_crc>
 800671e:	4b3a      	ldr	r3, [pc, #232]	; (8006808 <ai_platform_network_post_init+0xfc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672a:	d03b      	beq.n	80067a4 <ai_platform_network_post_init+0x98>
 800672c:	4a37      	ldr	r2, [pc, #220]	; (800680c <ai_platform_network_post_init+0x100>)
 800672e:	2301      	movs	r3, #1
 8006730:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006734:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1fb      	bne.n	8006734 <ai_platform_network_post_init+0x28>
 800673c:	4b34      	ldr	r3, [pc, #208]	; (8006810 <ai_platform_network_post_init+0x104>)
 800673e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006742:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006746:	4b33      	ldr	r3, [pc, #204]	; (8006814 <ai_platform_network_post_init+0x108>)
 8006748:	429a      	cmp	r2, r3
 800674a:	d037      	beq.n	80067bc <ai_platform_network_post_init+0xb0>
 800674c:	e7fe      	b.n	800674c <ai_platform_network_post_init+0x40>
 800674e:	f7ff f851 	bl	80057f4 <_ai_platform_acquire_crc>
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <ai_platform_network_post_init+0xfc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800675a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675e:	d010      	beq.n	8006782 <ai_platform_network_post_init+0x76>
 8006760:	4a2a      	ldr	r2, [pc, #168]	; (800680c <ai_platform_network_post_init+0x100>)
 8006762:	2301      	movs	r3, #1
 8006764:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006768:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1fb      	bne.n	8006768 <ai_platform_network_post_init+0x5c>
 8006770:	4b27      	ldr	r3, [pc, #156]	; (8006810 <ai_platform_network_post_init+0x104>)
 8006772:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006776:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800677a:	4b26      	ldr	r3, [pc, #152]	; (8006814 <ai_platform_network_post_init+0x108>)
 800677c:	429a      	cmp	r2, r3
 800677e:	d00d      	beq.n	800679c <ai_platform_network_post_init+0x90>
 8006780:	e7fe      	b.n	8006780 <ai_platform_network_post_init+0x74>
 8006782:	4a25      	ldr	r2, [pc, #148]	; (8006818 <ai_platform_network_post_init+0x10c>)
 8006784:	2301      	movs	r3, #1
 8006786:	6093      	str	r3, [r2, #8]
 8006788:	6893      	ldr	r3, [r2, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1fc      	bne.n	8006788 <ai_platform_network_post_init+0x7c>
 800678e:	4b20      	ldr	r3, [pc, #128]	; (8006810 <ai_platform_network_post_init+0x104>)
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	4b1f      	ldr	r3, [pc, #124]	; (8006814 <ai_platform_network_post_init+0x108>)
 8006796:	429a      	cmp	r2, r3
 8006798:	d000      	beq.n	800679c <ai_platform_network_post_init+0x90>
 800679a:	e7fe      	b.n	800679a <ai_platform_network_post_init+0x8e>
 800679c:	f7ff f82c 	bl	80057f8 <_ai_platform_release_crc>
 80067a0:	2000      	movs	r0, #0
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <ai_platform_network_post_init+0x10c>)
 80067a6:	2301      	movs	r3, #1
 80067a8:	6093      	str	r3, [r2, #8]
 80067aa:	6893      	ldr	r3, [r2, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1fc      	bne.n	80067aa <ai_platform_network_post_init+0x9e>
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <ai_platform_network_post_init+0x104>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	4b17      	ldr	r3, [pc, #92]	; (8006814 <ai_platform_network_post_init+0x108>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d11a      	bne.n	80067f2 <ai_platform_network_post_init+0xe6>
 80067bc:	f7ff f81c 	bl	80057f8 <_ai_platform_release_crc>
 80067c0:	68e3      	ldr	r3, [r4, #12]
 80067c2:	f013 0502 	ands.w	r5, r3, #2
 80067c6:	d015      	beq.n	80067f4 <ai_platform_network_post_init+0xe8>
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fd51 	bl	8007270 <ai_layers_post_init_all>
 80067ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067d0:	b16b      	cbz	r3, 80067ee <ai_platform_network_post_init+0xe2>
 80067d2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80067d4:	e007      	b.n	80067e6 <ai_platform_network_post_init+0xda>
 80067d6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80067da:	4798      	blx	r3
 80067dc:	692b      	ldr	r3, [r5, #16]
 80067de:	42ab      	cmp	r3, r5
 80067e0:	d005      	beq.n	80067ee <ai_platform_network_post_init+0xe2>
 80067e2:	b123      	cbz	r3, 80067ee <ai_platform_network_post_init+0xe2>
 80067e4:	461d      	mov	r5, r3
 80067e6:	4629      	mov	r1, r5
 80067e8:	2000      	movs	r0, #0
 80067ea:	2d00      	cmp	r5, #0
 80067ec:	d1f3      	bne.n	80067d6 <ai_platform_network_post_init+0xca>
 80067ee:	2001      	movs	r0, #1
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	e7fe      	b.n	80067f2 <ai_platform_network_post_init+0xe6>
 80067f4:	2210      	movs	r2, #16
 80067f6:	2111      	movs	r1, #17
 80067f8:	18a0      	adds	r0, r4, r2
 80067fa:	f000 fba7 	bl	8006f4c <core_set_error>
 80067fe:	4628      	mov	r0, r5
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	a1c00100 	.word	0xa1c00100
 8006808:	e0042000 	.word	0xe0042000
 800680c:	58024000 	.word	0x58024000
 8006810:	f407a5c2 	.word	0xf407a5c2
 8006814:	b5e8b5cd 	.word	0xb5e8b5cd
 8006818:	40023000 	.word	0x40023000

0800681c <ai_platform_network_process>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	460e      	mov	r6, r1
 8006822:	b085      	sub	sp, #20
 8006824:	4693      	mov	fp, r2
 8006826:	4605      	mov	r5, r0
 8006828:	b120      	cbz	r0, 8006834 <ai_platform_network_process+0x18>
 800682a:	4bb8      	ldr	r3, [pc, #736]	; (8006b0c <ai_platform_network_process+0x2f0>)
 800682c:	6802      	ldr	r2, [r0, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	bf18      	it	ne
 8006832:	2500      	movne	r5, #0
 8006834:	f7fe ffde 	bl	80057f4 <_ai_platform_acquire_crc>
 8006838:	4bb5      	ldr	r3, [pc, #724]	; (8006b10 <ai_platform_network_process+0x2f4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006844:	d010      	beq.n	8006868 <ai_platform_network_process+0x4c>
 8006846:	4ab3      	ldr	r2, [pc, #716]	; (8006b14 <ai_platform_network_process+0x2f8>)
 8006848:	2301      	movs	r3, #1
 800684a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800684e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1fb      	bne.n	800684e <ai_platform_network_process+0x32>
 8006856:	4bb0      	ldr	r3, [pc, #704]	; (8006b18 <ai_platform_network_process+0x2fc>)
 8006858:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800685c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006860:	4bae      	ldr	r3, [pc, #696]	; (8006b1c <ai_platform_network_process+0x300>)
 8006862:	429a      	cmp	r2, r3
 8006864:	d00d      	beq.n	8006882 <ai_platform_network_process+0x66>
 8006866:	e7fe      	b.n	8006866 <ai_platform_network_process+0x4a>
 8006868:	4aad      	ldr	r2, [pc, #692]	; (8006b20 <ai_platform_network_process+0x304>)
 800686a:	2301      	movs	r3, #1
 800686c:	6093      	str	r3, [r2, #8]
 800686e:	6893      	ldr	r3, [r2, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1fc      	bne.n	800686e <ai_platform_network_process+0x52>
 8006874:	4ba8      	ldr	r3, [pc, #672]	; (8006b18 <ai_platform_network_process+0x2fc>)
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	4ba8      	ldr	r3, [pc, #672]	; (8006b1c <ai_platform_network_process+0x300>)
 800687c:	429a      	cmp	r2, r3
 800687e:	f040 812c 	bne.w	8006ada <ai_platform_network_process+0x2be>
 8006882:	f7fe ffb9 	bl	80057f8 <_ai_platform_release_crc>
 8006886:	2d00      	cmp	r5, #0
 8006888:	f000 8154 	beq.w	8006b34 <ai_platform_network_process+0x318>
 800688c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8124 	beq.w	8006adc <ai_platform_network_process+0x2c0>
 8006894:	68eb      	ldr	r3, [r5, #12]
 8006896:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2700      	movs	r7, #0
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	616f      	str	r7, [r5, #20]
 80068a4:	f040 813e 	bne.w	8006b24 <ai_platform_network_process+0x308>
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	f000 811d 	beq.w	8006ae8 <ai_platform_network_process+0x2cc>
 80068ae:	f1ba 0f00 	cmp.w	sl, #0
 80068b2:	f000 8119 	beq.w	8006ae8 <ai_platform_network_process+0x2cc>
 80068b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8114 	beq.w	8006ae8 <ai_platform_network_process+0x2cc>
 80068c0:	69b3      	ldr	r3, [r6, #24]
 80068c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80068cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d072      	beq.n	80069ba <ai_platform_network_process+0x19e>
 80068d4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80068d8:	2c00      	cmp	r4, #0
 80068da:	d06e      	beq.n	80069ba <ai_platform_network_process+0x19e>
 80068dc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80068e0:	f8d3 9000 	ldr.w	r9, [r3]
 80068e4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80068e8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80068ec:	f000 81de 	beq.w	8006cac <ai_platform_network_process+0x490>
 80068f0:	69a3      	ldr	r3, [r4, #24]
 80068f2:	2101      	movs	r1, #1
 80068f4:	4630      	mov	r0, r6
 80068f6:	685d      	ldr	r5, [r3, #4]
 80068f8:	f7fe fe9a 	bl	8005630 <ai_buffer_get_size>
 80068fc:	4285      	cmp	r5, r0
 80068fe:	f0c0 811b 	bcc.w	8006b38 <ai_platform_network_process+0x31c>
 8006902:	68e0      	ldr	r0, [r4, #12]
 8006904:	69b1      	ldr	r1, [r6, #24]
 8006906:	68c2      	ldr	r2, [r0, #12]
 8006908:	68cb      	ldr	r3, [r1, #12]
 800690a:	429a      	cmp	r2, r3
 800690c:	f040 8114 	bne.w	8006b38 <ai_platform_network_process+0x31c>
 8006910:	6882      	ldr	r2, [r0, #8]
 8006912:	688b      	ldr	r3, [r1, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	f040 810f 	bne.w	8006b38 <ai_platform_network_process+0x31c>
 800691a:	6842      	ldr	r2, [r0, #4]
 800691c:	684b      	ldr	r3, [r1, #4]
 800691e:	429a      	cmp	r2, r3
 8006920:	f040 810a 	bne.w	8006b38 <ai_platform_network_process+0x31c>
 8006924:	69a3      	ldr	r3, [r4, #24]
 8006926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800692a:	f005 f8e5 	bl	800baf8 <ai_array_get_data_byte_size>
 800692e:	4605      	mov	r5, r0
 8006930:	4620      	mov	r0, r4
 8006932:	f7fe fe65 	bl	8005600 <get_tensor_byte_size>
 8006936:	4285      	cmp	r5, r0
 8006938:	f0c0 80fe 	bcc.w	8006b38 <ai_platform_network_process+0x31c>
 800693c:	69a3      	ldr	r3, [r4, #24]
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	f005 f846 	bl	800b9d0 <ai_array_to_buffer_fmt>
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	4058      	eors	r0, r3
 8006948:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800694c:	f040 81b9 	bne.w	8006cc2 <ai_platform_network_process+0x4a6>
 8006950:	6873      	ldr	r3, [r6, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 81ac 	beq.w	8006cb0 <ai_platform_network_process+0x494>
 8006958:	69b3      	ldr	r3, [r6, #24]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 819c 	beq.w	8006c9a <ai_platform_network_process+0x47e>
 8006962:	9a01      	ldr	r2, [sp, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	bf38      	it	cc
 8006968:	461a      	movcc	r2, r3
 800696a:	4620      	mov	r0, r4
 800696c:	9201      	str	r2, [sp, #4]
 800696e:	f7fe fe47 	bl	8005600 <get_tensor_byte_size>
 8006972:	f8c8 0008 	str.w	r0, [r8, #8]
 8006976:	69b3      	ldr	r3, [r6, #24]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	fb00 f303 	mul.w	r3, r0, r3
 800697e:	f8c8 300c 	str.w	r3, [r8, #12]
 8006982:	6871      	ldr	r1, [r6, #4]
 8006984:	f8c8 1004 	str.w	r1, [r8, #4]
 8006988:	440b      	add	r3, r1
 800698a:	f849 300b 	str.w	r3, [r9, fp]
 800698e:	69a0      	ldr	r0, [r4, #24]
 8006990:	6803      	ldr	r3, [r0, #0]
 8006992:	009a      	lsls	r2, r3, #2
 8006994:	f107 0701 	add.w	r7, r7, #1
 8006998:	f106 061c 	add.w	r6, r6, #28
 800699c:	f100 80af 	bmi.w	8006afe <ai_platform_network_process+0x2e2>
 80069a0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	4419      	add	r1, r3
 80069a8:	6081      	str	r1, [r0, #8]
 80069aa:	69a3      	ldr	r3, [r4, #24]
 80069ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80069b0:	60da      	str	r2, [r3, #12]
 80069b2:	f8ba 3000 	ldrh.w	r3, [sl]
 80069b6:	42bb      	cmp	r3, r7
 80069b8:	d888      	bhi.n	80068cc <ai_platform_network_process+0xb0>
 80069ba:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80069be:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80069c0:	f1bb 0f00 	cmp.w	fp, #0
 80069c4:	f000 8186 	beq.w	8006cd4 <ai_platform_network_process+0x4b8>
 80069c8:	2a01      	cmp	r2, #1
 80069ca:	f240 815e 	bls.w	8006c8a <ai_platform_network_process+0x46e>
 80069ce:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80069d2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8157 	beq.w	8006c8a <ai_platform_network_process+0x46e>
 80069dc:	465e      	mov	r6, fp
 80069de:	2700      	movs	r7, #0
 80069e0:	462c      	mov	r4, r5
 80069e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 80b4 	beq.w	8006b54 <ai_platform_network_process+0x338>
 80069ec:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	f000 80af 	beq.w	8006b54 <ai_platform_network_process+0x338>
 80069f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80069fa:	f8d3 8000 	ldr.w	r8, [r3]
 80069fe:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8006a02:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006a06:	f000 8171 	beq.w	8006cec <ai_platform_network_process+0x4d0>
 8006a0a:	69ab      	ldr	r3, [r5, #24]
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	9302      	str	r3, [sp, #8]
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7fe fe0c 	bl	8005630 <ai_buffer_get_size>
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	4283      	cmp	r3, r0
 8006a1c:	f0c0 8134 	bcc.w	8006c88 <ai_platform_network_process+0x46c>
 8006a20:	68e8      	ldr	r0, [r5, #12]
 8006a22:	69b1      	ldr	r1, [r6, #24]
 8006a24:	68c2      	ldr	r2, [r0, #12]
 8006a26:	68cb      	ldr	r3, [r1, #12]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	f040 812d 	bne.w	8006c88 <ai_platform_network_process+0x46c>
 8006a2e:	6882      	ldr	r2, [r0, #8]
 8006a30:	688b      	ldr	r3, [r1, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	f040 8128 	bne.w	8006c88 <ai_platform_network_process+0x46c>
 8006a38:	6842      	ldr	r2, [r0, #4]
 8006a3a:	684b      	ldr	r3, [r1, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	f040 8123 	bne.w	8006c88 <ai_platform_network_process+0x46c>
 8006a42:	69ab      	ldr	r3, [r5, #24]
 8006a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a48:	f005 f856 	bl	800baf8 <ai_array_get_data_byte_size>
 8006a4c:	9002      	str	r0, [sp, #8]
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7fe fdd6 	bl	8005600 <get_tensor_byte_size>
 8006a54:	9b02      	ldr	r3, [sp, #8]
 8006a56:	4283      	cmp	r3, r0
 8006a58:	f0c0 8116 	bcc.w	8006c88 <ai_platform_network_process+0x46c>
 8006a5c:	69ab      	ldr	r3, [r5, #24]
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	f004 ffb6 	bl	800b9d0 <ai_array_to_buffer_fmt>
 8006a64:	6833      	ldr	r3, [r6, #0]
 8006a66:	4058      	eors	r0, r3
 8006a68:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006a6c:	f040 8136 	bne.w	8006cdc <ai_platform_network_process+0x4c0>
 8006a70:	6873      	ldr	r3, [r6, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 814d 	beq.w	8006d12 <ai_platform_network_process+0x4f6>
 8006a78:	69b3      	ldr	r3, [r6, #24]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 813f 	beq.w	8006d00 <ai_platform_network_process+0x4e4>
 8006a82:	9a01      	ldr	r2, [sp, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	bf38      	it	cc
 8006a88:	461a      	movcc	r2, r3
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	f7fe fdb7 	bl	8005600 <get_tensor_byte_size>
 8006a92:	f8ca 0008 	str.w	r0, [sl, #8]
 8006a96:	69b3      	ldr	r3, [r6, #24]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	fb00 f303 	mul.w	r3, r0, r3
 8006a9e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006aa2:	6871      	ldr	r1, [r6, #4]
 8006aa4:	f8ca 1004 	str.w	r1, [sl, #4]
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f848 300b 	str.w	r3, [r8, fp]
 8006aae:	69a8      	ldr	r0, [r5, #24]
 8006ab0:	6803      	ldr	r3, [r0, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	f107 0701 	add.w	r7, r7, #1
 8006ab8:	f106 061c 	add.w	r6, r6, #28
 8006abc:	d445      	bmi.n	8006b4a <ai_platform_network_process+0x32e>
 8006abe:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	4419      	add	r1, r3
 8006ac6:	6081      	str	r1, [r0, #8]
 8006ac8:	69ab      	ldr	r3, [r5, #24]
 8006aca:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006ad4:	429f      	cmp	r7, r3
 8006ad6:	d384      	bcc.n	80069e2 <ai_platform_network_process+0x1c6>
 8006ad8:	e03c      	b.n	8006b54 <ai_platform_network_process+0x338>
 8006ada:	e7fe      	b.n	8006ada <ai_platform_network_process+0x2be>
 8006adc:	68ea      	ldr	r2, [r5, #12]
 8006ade:	616b      	str	r3, [r5, #20]
 8006ae0:	f002 0203 	and.w	r2, r2, #3
 8006ae4:	2a03      	cmp	r2, #3
 8006ae6:	d11d      	bne.n	8006b24 <ai_platform_network_process+0x308>
 8006ae8:	2217      	movs	r2, #23
 8006aea:	2112      	movs	r1, #18
 8006aec:	f105 0010 	add.w	r0, r5, #16
 8006af0:	f000 fa2c 	bl	8006f4c <core_set_error>
 8006af4:	2400      	movs	r4, #0
 8006af6:	4620      	mov	r0, r4
 8006af8:	b005      	add	sp, #20
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	f8ba 3000 	ldrh.w	r3, [sl]
 8006b02:	429f      	cmp	r7, r3
 8006b04:	f4ff aee2 	bcc.w	80068cc <ai_platform_network_process+0xb0>
 8006b08:	e757      	b.n	80069ba <ai_platform_network_process+0x19e>
 8006b0a:	bf00      	nop
 8006b0c:	a1c00100 	.word	0xa1c00100
 8006b10:	e0042000 	.word	0xe0042000
 8006b14:	58024000 	.word	0x58024000
 8006b18:	f407a5c2 	.word	0xf407a5c2
 8006b1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b20:	40023000 	.word	0x40023000
 8006b24:	2230      	movs	r2, #48	; 0x30
 8006b26:	2111      	movs	r1, #17
 8006b28:	f105 0010 	add.w	r0, r5, #16
 8006b2c:	f000 fa0e 	bl	8006f4c <core_set_error>
 8006b30:	2400      	movs	r4, #0
 8006b32:	e7e0      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006b34:	462c      	mov	r4, r5
 8006b36:	e7de      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006b38:	9d02      	ldr	r5, [sp, #8]
 8006b3a:	2218      	movs	r2, #24
 8006b3c:	2112      	movs	r1, #18
 8006b3e:	f105 0010 	add.w	r0, r5, #16
 8006b42:	f000 fa03 	bl	8006f4c <core_set_error>
 8006b46:	2400      	movs	r4, #0
 8006b48:	e7d5      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006b4a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006b4e:	429f      	cmp	r7, r3
 8006b50:	f4ff af47 	bcc.w	80069e2 <ai_platform_network_process+0x1c6>
 8006b54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006b58:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006b5a:	82a3      	strh	r3, [r4, #20]
 8006b5c:	4625      	mov	r5, r4
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	f040 808c 	bne.w	8006c7c <ai_platform_network_process+0x460>
 8006b64:	4616      	mov	r6, r2
 8006b66:	4617      	mov	r7, r2
 8006b68:	8aec      	ldrh	r4, [r5, #22]
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	bf38      	it	cc
 8006b6e:	46ab      	movcc	fp, r5
 8006b70:	d2c1      	bcs.n	8006af6 <ai_platform_network_process+0x2da>
 8006b72:	2e00      	cmp	r6, #0
 8006b74:	d030      	beq.n	8006bd8 <ai_platform_network_process+0x3bc>
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	e014      	b.n	8006ba6 <ai_platform_network_process+0x38a>
 8006b7c:	6882      	ldr	r2, [r0, #8]
 8006b7e:	68c5      	ldr	r5, [r0, #12]
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	1b52      	subs	r2, r2, r5
 8006b84:	4413      	add	r3, r2
 8006b86:	6083      	str	r3, [r0, #8]
 8006b88:	698b      	ldr	r3, [r1, #24]
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8006b92:	f859 200a 	ldr.w	r2, [r9, sl]
 8006b96:	440b      	add	r3, r1
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	bf24      	itt	cs
 8006b9c:	68e3      	ldrcs	r3, [r4, #12]
 8006b9e:	1ad3      	subcs	r3, r2, r3
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	f108 0801 	add.w	r8, r8, #1
 8006ba6:	8833      	ldrh	r3, [r6, #0]
 8006ba8:	4543      	cmp	r3, r8
 8006baa:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006bae:	d913      	bls.n	8006bd8 <ai_platform_network_process+0x3bc>
 8006bb0:	6873      	ldr	r3, [r6, #4]
 8006bb2:	b18b      	cbz	r3, 8006bd8 <ai_platform_network_process+0x3bc>
 8006bb4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006bb8:	b171      	cbz	r1, 8006bd8 <ai_platform_network_process+0x3bc>
 8006bba:	6988      	ldr	r0, [r1, #24]
 8006bbc:	68b2      	ldr	r2, [r6, #8]
 8006bbe:	6803      	ldr	r3, [r0, #0]
 8006bc0:	f8d2 9000 	ldr.w	r9, [r2]
 8006bc4:	009d      	lsls	r5, r3, #2
 8006bc6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006bca:	d5d7      	bpl.n	8006b7c <ai_platform_network_process+0x360>
 8006bcc:	6881      	ldr	r1, [r0, #8]
 8006bce:	68a2      	ldr	r2, [r4, #8]
 8006bd0:	6860      	ldr	r0, [r4, #4]
 8006bd2:	f003 f9f5 	bl	8009fc0 <st_int8_copy>
 8006bd6:	e7da      	b.n	8006b8e <ai_platform_network_process+0x372>
 8006bd8:	4658      	mov	r0, fp
 8006bda:	f000 fb5d 	bl	8007298 <ai_layers_forward_all>
 8006bde:	2f00      	cmp	r7, #0
 8006be0:	d03d      	beq.n	8006c5e <ai_platform_network_process+0x442>
 8006be2:	2400      	movs	r4, #0
 8006be4:	e016      	b.n	8006c14 <ai_platform_network_process+0x3f8>
 8006be6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006bea:	f859 100a 	ldr.w	r1, [r9, sl]
 8006bee:	4413      	add	r3, r2
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf24      	itt	cs
 8006bf4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006bf8:	1acb      	subcs	r3, r1, r3
 8006bfa:	f8c8 3004 	str.w	r3, [r8, #4]
 8006bfe:	6981      	ldr	r1, [r0, #24]
 8006c00:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006c04:	1b52      	subs	r2, r2, r5
 8006c06:	4413      	add	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
 8006c0a:	6983      	ldr	r3, [r0, #24]
 8006c0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006c10:	60da      	str	r2, [r3, #12]
 8006c12:	3401      	adds	r4, #1
 8006c14:	883b      	ldrh	r3, [r7, #0]
 8006c16:	42a3      	cmp	r3, r4
 8006c18:	d921      	bls.n	8006c5e <ai_platform_network_process+0x442>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	b1fb      	cbz	r3, 8006c5e <ai_platform_network_process+0x442>
 8006c1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006c22:	b1e0      	cbz	r0, 8006c5e <ai_platform_network_process+0x442>
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	6983      	ldr	r3, [r0, #24]
 8006c28:	f8d2 9000 	ldr.w	r9, [r2]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8006c34:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006c38:	d5d5      	bpl.n	8006be6 <ai_platform_network_process+0x3ca>
 8006c3a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006c3e:	6898      	ldr	r0, [r3, #8]
 8006c40:	f003 f9be 	bl	8009fc0 <st_int8_copy>
 8006c44:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006c48:	f859 200a 	ldr.w	r2, [r9, sl]
 8006c4c:	440b      	add	r3, r1
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	bf24      	itt	cs
 8006c52:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006c56:	1ad3      	subcs	r3, r2, r3
 8006c58:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c5c:	e7d9      	b.n	8006c12 <ai_platform_network_process+0x3f6>
 8006c5e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8006c62:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006c66:	3401      	adds	r4, #1
 8006c68:	b2a4      	uxth	r4, r4
 8006c6a:	42a3      	cmp	r3, r4
 8006c6c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006c70:	f63f af7f 	bhi.w	8006b72 <ai_platform_network_process+0x356>
 8006c74:	4620      	mov	r0, r4
 8006c76:	b005      	add	sp, #20
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	2a01      	cmp	r2, #1
 8006c7e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006c80:	d03c      	beq.n	8006cfc <ai_platform_network_process+0x4e0>
 8006c82:	f106 070c 	add.w	r7, r6, #12
 8006c86:	e76f      	b.n	8006b68 <ai_platform_network_process+0x34c>
 8006c88:	4625      	mov	r5, r4
 8006c8a:	2218      	movs	r2, #24
 8006c8c:	2113      	movs	r1, #19
 8006c8e:	f105 0010 	add.w	r0, r5, #16
 8006c92:	f000 f95b 	bl	8006f4c <core_set_error>
 8006c96:	2400      	movs	r4, #0
 8006c98:	e72d      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006c9a:	9d02      	ldr	r5, [sp, #8]
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	2221      	movs	r2, #33	; 0x21
 8006ca0:	2112      	movs	r1, #18
 8006ca2:	f105 0010 	add.w	r0, r5, #16
 8006ca6:	f000 f951 	bl	8006f4c <core_set_error>
 8006caa:	e724      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006cac:	9d02      	ldr	r5, [sp, #8]
 8006cae:	e71b      	b.n	8006ae8 <ai_platform_network_process+0x2cc>
 8006cb0:	9d02      	ldr	r5, [sp, #8]
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	2217      	movs	r2, #23
 8006cb6:	2112      	movs	r1, #18
 8006cb8:	f105 0010 	add.w	r0, r5, #16
 8006cbc:	f000 f946 	bl	8006f4c <core_set_error>
 8006cc0:	e719      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006cc2:	9d02      	ldr	r5, [sp, #8]
 8006cc4:	2219      	movs	r2, #25
 8006cc6:	2112      	movs	r1, #18
 8006cc8:	f105 0010 	add.w	r0, r5, #16
 8006ccc:	f000 f93e 	bl	8006f4c <core_set_error>
 8006cd0:	2400      	movs	r4, #0
 8006cd2:	e710      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006cd4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006cd8:	82ab      	strh	r3, [r5, #20]
 8006cda:	e740      	b.n	8006b5e <ai_platform_network_process+0x342>
 8006cdc:	f104 0010 	add.w	r0, r4, #16
 8006ce0:	2219      	movs	r2, #25
 8006ce2:	2113      	movs	r1, #19
 8006ce4:	f000 f932 	bl	8006f4c <core_set_error>
 8006ce8:	2400      	movs	r4, #0
 8006cea:	e704      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006cec:	f104 0010 	add.w	r0, r4, #16
 8006cf0:	2217      	movs	r2, #23
 8006cf2:	2113      	movs	r1, #19
 8006cf4:	f000 f92a 	bl	8006f4c <core_set_error>
 8006cf8:	4654      	mov	r4, sl
 8006cfa:	e6fc      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006cfc:	2700      	movs	r7, #0
 8006cfe:	e733      	b.n	8006b68 <ai_platform_network_process+0x34c>
 8006d00:	4625      	mov	r5, r4
 8006d02:	2221      	movs	r2, #33	; 0x21
 8006d04:	4604      	mov	r4, r0
 8006d06:	2113      	movs	r1, #19
 8006d08:	f105 0010 	add.w	r0, r5, #16
 8006d0c:	f000 f91e 	bl	8006f4c <core_set_error>
 8006d10:	e6f1      	b.n	8006af6 <ai_platform_network_process+0x2da>
 8006d12:	4625      	mov	r5, r4
 8006d14:	2217      	movs	r2, #23
 8006d16:	4604      	mov	r4, r0
 8006d18:	2113      	movs	r1, #19
 8006d1a:	f105 0010 	add.w	r0, r5, #16
 8006d1e:	f000 f915 	bl	8006f4c <core_set_error>
 8006d22:	e6e8      	b.n	8006af6 <ai_platform_network_process+0x2da>

08006d24 <ai_platform_observer_register_s>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	b1f8      	cbz	r0, 8006d68 <ai_platform_observer_register_s+0x44>
 8006d28:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <ai_platform_observer_register_s+0x110>)
 8006d2a:	6802      	ldr	r2, [r0, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	4604      	mov	r4, r0
 8006d30:	d11a      	bne.n	8006d68 <ai_platform_observer_register_s+0x44>
 8006d32:	460d      	mov	r5, r1
 8006d34:	f7fe fd5e 	bl	80057f4 <_ai_platform_acquire_crc>
 8006d38:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <ai_platform_observer_register_s+0x114>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d44:	d03b      	beq.n	8006dbe <ai_platform_observer_register_s+0x9a>
 8006d46:	4a3d      	ldr	r2, [pc, #244]	; (8006e3c <ai_platform_observer_register_s+0x118>)
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1fb      	bne.n	8006d4e <ai_platform_observer_register_s+0x2a>
 8006d56:	4b3a      	ldr	r3, [pc, #232]	; (8006e40 <ai_platform_observer_register_s+0x11c>)
 8006d58:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d5c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d60:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <ai_platform_observer_register_s+0x120>)
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d037      	beq.n	8006dd6 <ai_platform_observer_register_s+0xb2>
 8006d66:	e7fe      	b.n	8006d66 <ai_platform_observer_register_s+0x42>
 8006d68:	f7fe fd44 	bl	80057f4 <_ai_platform_acquire_crc>
 8006d6c:	4b32      	ldr	r3, [pc, #200]	; (8006e38 <ai_platform_observer_register_s+0x114>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d78:	d010      	beq.n	8006d9c <ai_platform_observer_register_s+0x78>
 8006d7a:	4a30      	ldr	r2, [pc, #192]	; (8006e3c <ai_platform_observer_register_s+0x118>)
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d82:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1fb      	bne.n	8006d82 <ai_platform_observer_register_s+0x5e>
 8006d8a:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <ai_platform_observer_register_s+0x11c>)
 8006d8c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d94:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <ai_platform_observer_register_s+0x120>)
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d00d      	beq.n	8006db6 <ai_platform_observer_register_s+0x92>
 8006d9a:	e7fe      	b.n	8006d9a <ai_platform_observer_register_s+0x76>
 8006d9c:	4a2a      	ldr	r2, [pc, #168]	; (8006e48 <ai_platform_observer_register_s+0x124>)
 8006d9e:	2301      	movs	r3, #1
 8006da0:	6093      	str	r3, [r2, #8]
 8006da2:	6893      	ldr	r3, [r2, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1fc      	bne.n	8006da2 <ai_platform_observer_register_s+0x7e>
 8006da8:	4b25      	ldr	r3, [pc, #148]	; (8006e40 <ai_platform_observer_register_s+0x11c>)
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	4b25      	ldr	r3, [pc, #148]	; (8006e44 <ai_platform_observer_register_s+0x120>)
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d000      	beq.n	8006db6 <ai_platform_observer_register_s+0x92>
 8006db4:	e7fe      	b.n	8006db4 <ai_platform_observer_register_s+0x90>
 8006db6:	f7fe fd1f 	bl	80057f8 <_ai_platform_release_crc>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	bd38      	pop	{r3, r4, r5, pc}
 8006dbe:	4a22      	ldr	r2, [pc, #136]	; (8006e48 <ai_platform_observer_register_s+0x124>)
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	6093      	str	r3, [r2, #8]
 8006dc4:	6893      	ldr	r3, [r2, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1fc      	bne.n	8006dc4 <ai_platform_observer_register_s+0xa0>
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <ai_platform_observer_register_s+0x11c>)
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <ai_platform_observer_register_s+0x120>)
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d11d      	bne.n	8006e12 <ai_platform_observer_register_s+0xee>
 8006dd6:	f7fe fd0f 	bl	80057f8 <_ai_platform_release_crc>
 8006dda:	b1dd      	cbz	r5, 8006e14 <ai_platform_observer_register_s+0xf0>
 8006ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dde:	bb03      	cbnz	r3, 8006e22 <ai_platform_observer_register_s+0xfe>
 8006de0:	81eb      	strh	r3, [r5, #14]
 8006de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006de4:	2101      	movs	r1, #1
 8006de6:	e006      	b.n	8006df6 <ai_platform_observer_register_s+0xd2>
 8006de8:	81e9      	strh	r1, [r5, #14]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	b281      	uxth	r1, r0
 8006df0:	d004      	beq.n	8006dfc <ai_platform_observer_register_s+0xd8>
 8006df2:	b11a      	cbz	r2, 8006dfc <ai_platform_observer_register_s+0xd8>
 8006df4:	4613      	mov	r3, r2
 8006df6:	1c48      	adds	r0, r1, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f5      	bne.n	8006de8 <ai_platform_observer_register_s+0xc4>
 8006dfc:	7a2b      	ldrb	r3, [r5, #8]
 8006dfe:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <ai_platform_observer_register_s+0x128>)
 8006e00:	2100      	movs	r1, #0
 8006e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e06:	81a9      	strh	r1, [r5, #12]
 8006e08:	60ab      	str	r3, [r5, #8]
 8006e0a:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 8006e0e:	2001      	movs	r0, #1
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	e7fe      	b.n	8006e12 <ai_platform_observer_register_s+0xee>
 8006e14:	2110      	movs	r1, #16
 8006e16:	2211      	movs	r2, #17
 8006e18:	1860      	adds	r0, r4, r1
 8006e1a:	f000 f897 	bl	8006f4c <core_set_error>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	2240      	movs	r2, #64	; 0x40
 8006e24:	2111      	movs	r1, #17
 8006e26:	f104 0010 	add.w	r0, r4, #16
 8006e2a:	f000 f88f 	bl	8006f4c <core_set_error>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
 8006e32:	bf00      	nop
 8006e34:	a1c00100 	.word	0xa1c00100
 8006e38:	e0042000 	.word	0xe0042000
 8006e3c:	58024000 	.word	0x58024000
 8006e40:	f407a5c2 	.word	0xf407a5c2
 8006e44:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e48:	40023000 	.word	0x40023000
 8006e4c:	080056dd 	.word	0x080056dd

08006e50 <ai_platform_observer_unregister_s>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	b1f8      	cbz	r0, 8006e94 <ai_platform_observer_unregister_s+0x44>
 8006e54:	4b33      	ldr	r3, [pc, #204]	; (8006f24 <ai_platform_observer_unregister_s+0xd4>)
 8006e56:	6802      	ldr	r2, [r0, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	d11a      	bne.n	8006e94 <ai_platform_observer_unregister_s+0x44>
 8006e5e:	460d      	mov	r5, r1
 8006e60:	f7fe fcc8 	bl	80057f4 <_ai_platform_acquire_crc>
 8006e64:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <ai_platform_observer_unregister_s+0xd8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e70:	d03b      	beq.n	8006eea <ai_platform_observer_unregister_s+0x9a>
 8006e72:	4a2e      	ldr	r2, [pc, #184]	; (8006f2c <ai_platform_observer_unregister_s+0xdc>)
 8006e74:	2301      	movs	r3, #1
 8006e76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1fb      	bne.n	8006e7a <ai_platform_observer_unregister_s+0x2a>
 8006e82:	4b2b      	ldr	r3, [pc, #172]	; (8006f30 <ai_platform_observer_unregister_s+0xe0>)
 8006e84:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e8c:	4b29      	ldr	r3, [pc, #164]	; (8006f34 <ai_platform_observer_unregister_s+0xe4>)
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d037      	beq.n	8006f02 <ai_platform_observer_unregister_s+0xb2>
 8006e92:	e7fe      	b.n	8006e92 <ai_platform_observer_unregister_s+0x42>
 8006e94:	f7fe fcae 	bl	80057f4 <_ai_platform_acquire_crc>
 8006e98:	4b23      	ldr	r3, [pc, #140]	; (8006f28 <ai_platform_observer_unregister_s+0xd8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea4:	d010      	beq.n	8006ec8 <ai_platform_observer_unregister_s+0x78>
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <ai_platform_observer_unregister_s+0xdc>)
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006eae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1fb      	bne.n	8006eae <ai_platform_observer_unregister_s+0x5e>
 8006eb6:	4b1e      	ldr	r3, [pc, #120]	; (8006f30 <ai_platform_observer_unregister_s+0xe0>)
 8006eb8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006ebc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ec0:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <ai_platform_observer_unregister_s+0xe4>)
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d00d      	beq.n	8006ee2 <ai_platform_observer_unregister_s+0x92>
 8006ec6:	e7fe      	b.n	8006ec6 <ai_platform_observer_unregister_s+0x76>
 8006ec8:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <ai_platform_observer_unregister_s+0xe8>)
 8006eca:	2301      	movs	r3, #1
 8006ecc:	6093      	str	r3, [r2, #8]
 8006ece:	6893      	ldr	r3, [r2, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1fc      	bne.n	8006ece <ai_platform_observer_unregister_s+0x7e>
 8006ed4:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <ai_platform_observer_unregister_s+0xe0>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	6812      	ldr	r2, [r2, #0]
 8006eda:	4b16      	ldr	r3, [pc, #88]	; (8006f34 <ai_platform_observer_unregister_s+0xe4>)
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d000      	beq.n	8006ee2 <ai_platform_observer_unregister_s+0x92>
 8006ee0:	e7fe      	b.n	8006ee0 <ai_platform_observer_unregister_s+0x90>
 8006ee2:	f7fe fc89 	bl	80057f8 <_ai_platform_release_crc>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
 8006eea:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <ai_platform_observer_unregister_s+0xe8>)
 8006eec:	2301      	movs	r3, #1
 8006eee:	6093      	str	r3, [r2, #8]
 8006ef0:	6893      	ldr	r3, [r2, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1fc      	bne.n	8006ef0 <ai_platform_observer_unregister_s+0xa0>
 8006ef6:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <ai_platform_observer_unregister_s+0xe0>)
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <ai_platform_observer_unregister_s+0xe4>)
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d107      	bne.n	8006f12 <ai_platform_observer_unregister_s+0xc2>
 8006f02:	f7fe fc79 	bl	80057f8 <_ai_platform_release_crc>
 8006f06:	b12d      	cbz	r5, 8006f14 <ai_platform_observer_unregister_s+0xc4>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8006f0e:	2001      	movs	r0, #1
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	e7fe      	b.n	8006f12 <ai_platform_observer_unregister_s+0xc2>
 8006f14:	2110      	movs	r1, #16
 8006f16:	2211      	movs	r2, #17
 8006f18:	1860      	adds	r0, r4, r1
 8006f1a:	f000 f817 	bl	8006f4c <core_set_error>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	bd38      	pop	{r3, r4, r5, pc}
 8006f22:	bf00      	nop
 8006f24:	a1c00100 	.word	0xa1c00100
 8006f28:	e0042000 	.word	0xe0042000
 8006f2c:	58024000 	.word	0x58024000
 8006f30:	f407a5c2 	.word	0xf407a5c2
 8006f34:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f38:	40023000 	.word	0x40023000

08006f3c <core_init>:
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	4770      	bx	lr

08006f40 <core_get_error>:
 8006f40:	4603      	mov	r3, r0
 8006f42:	2200      	movs	r2, #0
 8006f44:	6800      	ldr	r0, [r0, #0]
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop

08006f4c <core_set_error>:
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	7800      	ldrb	r0, [r0, #0]
 8006f50:	b108      	cbz	r0, 8006f56 <core_set_error+0xa>
 8006f52:	2000      	movs	r0, #0
 8006f54:	4770      	bx	lr
 8006f56:	7019      	strb	r1, [r3, #0]
 8006f58:	6819      	ldr	r1, [r3, #0]
 8006f5a:	f362 211f 	bfi	r1, r2, #8, #24
 8006f5e:	2001      	movs	r0, #1
 8006f60:	6019      	str	r1, [r3, #0]
 8006f62:	4770      	bx	lr

08006f64 <node_convert>:
 8006f64:	6982      	ldr	r2, [r0, #24]
 8006f66:	8813      	ldrh	r3, [r2, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d04a      	beq.n	8007002 <node_convert+0x9e>
 8006f6c:	6852      	ldr	r2, [r2, #4]
 8006f6e:	6850      	ldr	r0, [r2, #4]
 8006f70:	b100      	cbz	r0, 8006f74 <node_convert+0x10>
 8006f72:	6800      	ldr	r0, [r0, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	f000 813c 	beq.w	80071f2 <node_convert+0x28e>
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	6915      	ldr	r5, [r2, #16]
 8006f80:	b105      	cbz	r5, 8006f84 <node_convert+0x20>
 8006f82:	682d      	ldr	r5, [r5, #0]
 8006f84:	6883      	ldr	r3, [r0, #8]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	f000 80ed 	beq.w	8007166 <node_convert+0x202>
 8006f8c:	68c1      	ldr	r1, [r0, #12]
 8006f8e:	2401      	movs	r4, #1
 8006f90:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006f94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	fb02 f404 	mul.w	r4, r2, r4
 8006f9e:	d1f9      	bne.n	8006f94 <node_convert+0x30>
 8006fa0:	6982      	ldr	r2, [r0, #24]
 8006fa2:	69af      	ldr	r7, [r5, #24]
 8006fa4:	6813      	ldr	r3, [r2, #0]
 8006fa6:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8006faa:	2901      	cmp	r1, #1
 8006fac:	d02b      	beq.n	8007006 <node_convert+0xa2>
 8006fae:	6801      	ldr	r1, [r0, #0]
 8006fb0:	68bd      	ldr	r5, [r7, #8]
 8006fb2:	2900      	cmp	r1, #0
 8006fb4:	d069      	beq.n	800708a <node_convert+0x126>
 8006fb6:	684e      	ldr	r6, [r1, #4]
 8006fb8:	6892      	ldr	r2, [r2, #8]
 8006fba:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	f000 80b7 	beq.w	8007132 <node_convert+0x1ce>
 8006fc4:	884b      	ldrh	r3, [r1, #2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8088 	beq.w	80070dc <node_convert+0x178>
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	ed93 7a00 	vldr	s14, [r3]
 8006fd2:	6873      	ldr	r3, [r6, #4]
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	f000 80c4 	beq.w	8007162 <node_convert+0x1fe>
 8006fda:	f993 0000 	ldrsb.w	r0, [r3]
 8006fde:	b174      	cbz	r4, 8006ffe <node_convert+0x9a>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4414      	add	r4, r2
 8006fe4:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8006fe8:	1a1b      	subs	r3, r3, r0
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff2:	42a2      	cmp	r2, r4
 8006ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ff8:	ece1 7a01 	vstmia	r1!, {s15}
 8006ffc:	d1f2      	bne.n	8006fe4 <node_convert+0x80>
 8006ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	deff      	udf	#255	; 0xff
 8007006:	682e      	ldr	r6, [r5, #0]
 8007008:	6895      	ldr	r5, [r2, #8]
 800700a:	2e00      	cmp	r6, #0
 800700c:	f000 80ad 	beq.w	800716a <node_convert+0x206>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6871      	ldr	r1, [r6, #4]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800701a:	2900      	cmp	r1, #0
 800701c:	d063      	beq.n	80070e6 <node_convert+0x182>
 800701e:	8870      	ldrh	r0, [r6, #2]
 8007020:	2800      	cmp	r0, #0
 8007022:	d066      	beq.n	80070f2 <node_convert+0x18e>
 8007024:	6808      	ldr	r0, [r1, #0]
 8007026:	edd0 7a00 	vldr	s15, [r0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80d6 	beq.w	80071dc <node_convert+0x278>
 8007030:	684b      	ldr	r3, [r1, #4]
 8007032:	f993 3000 	ldrsb.w	r3, [r3]
 8007036:	ee06 3a90 	vmov	s13, r3
 800703a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800703e:	2c00      	cmp	r4, #0
 8007040:	d0dd      	beq.n	8006ffe <node_convert+0x9a>
 8007042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007046:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800704a:	4414      	add	r4, r2
 800704c:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 80071f8 <node_convert+0x294>
 8007050:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007054:	ecb5 7a01 	vldmia	r5!, {s14}
 8007058:	eef0 7a66 	vmov.f32	s15, s13
 800705c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007068:	bfac      	ite	ge
 800706a:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 800706e:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8007072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007076:	ee17 3a90 	vmov	r3, s15
 800707a:	f303 0307 	ssat	r3, #8, r3
 800707e:	f802 3b01 	strb.w	r3, [r2], #1
 8007082:	42a2      	cmp	r2, r4
 8007084:	d1e6      	bne.n	8007054 <node_convert+0xf0>
 8007086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800708a:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800708e:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8007092:	1b8e      	subs	r6, r1, r6
 8007094:	3640      	adds	r6, #64	; 0x40
 8007096:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800709a:	2908      	cmp	r1, #8
 800709c:	6890      	ldr	r0, [r2, #8]
 800709e:	eba6 0603 	sub.w	r6, r6, r3
 80070a2:	4622      	mov	r2, r4
 80070a4:	4629      	mov	r1, r5
 80070a6:	f000 808b 	beq.w	80071c0 <node_convert+0x25c>
 80070aa:	f004 fbc5 	bl	800b838 <arm_q15_to_float>
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	d0a5      	beq.n	8006ffe <node_convert+0x9a>
 80070b2:	ee07 6a90 	vmov	s15, r6
 80070b6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80070ba:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80070be:	f007 f9fd 	bl	800e4bc <powf>
 80070c2:	2c00      	cmp	r4, #0
 80070c4:	d09b      	beq.n	8006ffe <node_convert+0x9a>
 80070c6:	2300      	movs	r3, #0
 80070c8:	ecf5 7a01 	vldmia	r5!, {s15}
 80070cc:	3301      	adds	r3, #1
 80070ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80070d2:	429c      	cmp	r4, r3
 80070d4:	ed45 7a01 	vstr	s15, [r5, #-4]
 80070d8:	d1f6      	bne.n	80070c8 <node_convert+0x164>
 80070da:	e790      	b.n	8006ffe <node_convert+0x9a>
 80070dc:	b358      	cbz	r0, 8007136 <node_convert+0x1d2>
 80070de:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80071fc <node_convert+0x298>
 80070e2:	4618      	mov	r0, r3
 80070e4:	e77b      	b.n	8006fde <node_convert+0x7a>
 80070e6:	b133      	cbz	r3, 80070f6 <node_convert+0x192>
 80070e8:	eddf 6a44 	vldr	s13, [pc, #272]	; 80071fc <node_convert+0x298>
 80070ec:	eef0 7a66 	vmov.f32	s15, s13
 80070f0:	e7a5      	b.n	800703e <node_convert+0xda>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f8      	bne.n	80070e8 <node_convert+0x184>
 80070f6:	eddf 7a41 	vldr	s15, [pc, #260]	; 80071fc <node_convert+0x298>
 80070fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80070fe:	2c00      	cmp	r4, #0
 8007100:	f43f af7d 	beq.w	8006ffe <node_convert+0x9a>
 8007104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007108:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800710c:	4414      	add	r4, r2
 800710e:	ecb5 7a01 	vldmia	r5!, {s14}
 8007112:	eef0 7a66 	vmov.f32	s15, s13
 8007116:	eee7 7a06 	vfma.f32	s15, s14, s12
 800711a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800711e:	ee17 3a90 	vmov	r3, s15
 8007122:	f383 0308 	usat	r3, #8, r3
 8007126:	f802 3b01 	strb.w	r3, [r2], #1
 800712a:	42a2      	cmp	r2, r4
 800712c:	d1ef      	bne.n	800710e <node_convert+0x1aa>
 800712e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007132:	2800      	cmp	r0, #0
 8007134:	d147      	bne.n	80071c6 <node_convert+0x262>
 8007136:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80071fc <node_convert+0x298>
 800713a:	2c00      	cmp	r4, #0
 800713c:	f43f af5f 	beq.w	8006ffe <node_convert+0x9a>
 8007140:	4629      	mov	r1, r5
 8007142:	4414      	add	r4, r2
 8007144:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007148:	1a1b      	subs	r3, r3, r0
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007152:	42a2      	cmp	r2, r4
 8007154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007158:	ece1 7a01 	vstmia	r1!, {s15}
 800715c:	d1f2      	bne.n	8007144 <node_convert+0x1e0>
 800715e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007162:	7818      	ldrb	r0, [r3, #0]
 8007164:	e7e9      	b.n	800713a <node_convert+0x1d6>
 8007166:	2401      	movs	r4, #1
 8007168:	e71a      	b.n	8006fa0 <node_convert+0x3c>
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8007170:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8007174:	eba8 0303 	sub.w	r3, r8, r3
 8007178:	3340      	adds	r3, #64	; 0x40
 800717a:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800717e:	1a9b      	subs	r3, r3, r2
 8007180:	d014      	beq.n	80071ac <node_convert+0x248>
 8007182:	425b      	negs	r3, r3
 8007184:	ee00 3a90 	vmov	s1, r3
 8007188:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800718c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007190:	f007 f994 	bl	800e4bc <powf>
 8007194:	b154      	cbz	r4, 80071ac <node_convert+0x248>
 8007196:	4633      	mov	r3, r6
 8007198:	462a      	mov	r2, r5
 800719a:	ecf2 7a01 	vldmia	r2!, {s15}
 800719e:	3301      	adds	r3, #1
 80071a0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	ed42 7a01 	vstr	s15, [r2, #-4]
 80071aa:	d1f6      	bne.n	800719a <node_convert+0x236>
 80071ac:	f1b8 0f08 	cmp.w	r8, #8
 80071b0:	d00d      	beq.n	80071ce <node_convert+0x26a>
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4622      	mov	r2, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	f004 b998 	b.w	800b4f0 <arm_float_to_q15>
 80071c0:	f004 fba0 	bl	800b904 <arm_q7_to_float>
 80071c4:	e773      	b.n	80070ae <node_convert+0x14a>
 80071c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80071fc <node_convert+0x298>
 80071ca:	4630      	mov	r0, r6
 80071cc:	e707      	b.n	8006fde <node_convert+0x7a>
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	4622      	mov	r2, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	f004 ba50 	b.w	800b67c <arm_float_to_q7>
 80071dc:	684b      	ldr	r3, [r1, #4]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	ee06 3a90 	vmov	s13, r3
 80071e4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071ec:	ee76 6a87 	vadd.f32	s13, s13, s14
 80071f0:	e785      	b.n	80070fe <node_convert+0x19a>
 80071f2:	2300      	movs	r3, #0
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	deff      	udf	#255	; 0xff
 80071f8:	3efffffc 	.word	0x3efffffc
 80071fc:	00000000 	.word	0x00000000

08007200 <ai_check_custom_types>:
 8007200:	b082      	sub	sp, #8
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <ai_check_custom_types+0x50>)
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	b118      	cbz	r0, 8007210 <ai_check_custom_types+0x10>
 8007208:	7803      	ldrb	r3, [r0, #0]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d002      	beq.n	8007214 <ai_check_custom_types+0x14>
 800720e:	2000      	movs	r0, #0
 8007210:	b002      	add	sp, #8
 8007212:	4770      	bx	lr
 8007214:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007218:	4293      	cmp	r3, r2
 800721a:	d004      	beq.n	8007226 <ai_check_custom_types+0x26>
 800721c:	2001      	movs	r0, #1
 800721e:	f080 0001 	eor.w	r0, r0, #1
 8007222:	b002      	add	sp, #8
 8007224:	4770      	bx	lr
 8007226:	7842      	ldrb	r2, [r0, #1]
 8007228:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800722c:	429a      	cmp	r2, r3
 800722e:	f100 0001 	add.w	r0, r0, #1
 8007232:	d1f3      	bne.n	800721c <ai_check_custom_types+0x1c>
 8007234:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007238:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800723c:	429a      	cmp	r2, r3
 800723e:	d1ed      	bne.n	800721c <ai_check_custom_types+0x1c>
 8007240:	7842      	ldrb	r2, [r0, #1]
 8007242:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007246:	429a      	cmp	r2, r3
 8007248:	d1e8      	bne.n	800721c <ai_check_custom_types+0x1c>
 800724a:	2000      	movs	r0, #0
 800724c:	e7e7      	b.n	800721e <ai_check_custom_types+0x1e>
 800724e:	bf00      	nop
 8007250:	84048403 	.word	0x84048403

08007254 <ai_layers_init_all>:
 8007254:	4601      	mov	r1, r0
 8007256:	2000      	movs	r0, #0
 8007258:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800725a:	b143      	cbz	r3, 800726e <ai_layers_init_all+0x1a>
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	60d9      	str	r1, [r3, #12]
 8007260:	429a      	cmp	r2, r3
 8007262:	f100 0001 	add.w	r0, r0, #1
 8007266:	d002      	beq.n	800726e <ai_layers_init_all+0x1a>
 8007268:	b10a      	cbz	r2, 800726e <ai_layers_init_all+0x1a>
 800726a:	4613      	mov	r3, r2
 800726c:	e7f5      	b.n	800725a <ai_layers_init_all+0x6>
 800726e:	4770      	bx	lr

08007270 <ai_layers_post_init_all>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007274:	2500      	movs	r5, #0
 8007276:	b16c      	cbz	r4, 8007294 <ai_layers_post_init_all+0x24>
 8007278:	6863      	ldr	r3, [r4, #4]
 800727a:	07db      	lsls	r3, r3, #31
 800727c:	d504      	bpl.n	8007288 <ai_layers_post_init_all+0x18>
 800727e:	6a23      	ldr	r3, [r4, #32]
 8007280:	4620      	mov	r0, r4
 8007282:	b10b      	cbz	r3, 8007288 <ai_layers_post_init_all+0x18>
 8007284:	4798      	blx	r3
 8007286:	3501      	adds	r5, #1
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	42a3      	cmp	r3, r4
 800728c:	d002      	beq.n	8007294 <ai_layers_post_init_all+0x24>
 800728e:	b10b      	cbz	r3, 8007294 <ai_layers_post_init_all+0x24>
 8007290:	461c      	mov	r4, r3
 8007292:	e7f0      	b.n	8007276 <ai_layers_post_init_all+0x6>
 8007294:	4628      	mov	r0, r5
 8007296:	bd38      	pop	{r3, r4, r5, pc}

08007298 <ai_layers_forward_all>:
 8007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80072a0:	4604      	mov	r4, r0
 80072a2:	f1b8 0f00 	cmp.w	r8, #0
 80072a6:	d02b      	beq.n	8007300 <ai_layers_forward_all+0x68>
 80072a8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80072aa:	6381      	str	r1, [r0, #56]	; 0x38
 80072ac:	b321      	cbz	r1, 80072f8 <ai_layers_forward_all+0x60>
 80072ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80072b0:	2001      	movs	r0, #1
 80072b2:	47c0      	blx	r8
 80072b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80072b6:	b1fe      	cbz	r6, 80072f8 <ai_layers_forward_all+0x60>
 80072b8:	2700      	movs	r7, #0
 80072ba:	4631      	mov	r1, r6
 80072bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072be:	2002      	movs	r0, #2
 80072c0:	47c0      	blx	r8
 80072c2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80072c4:	4628      	mov	r0, r5
 80072c6:	696b      	ldr	r3, [r5, #20]
 80072c8:	4798      	blx	r3
 80072ca:	692e      	ldr	r6, [r5, #16]
 80072cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072d0:	42b5      	cmp	r5, r6
 80072d2:	f04f 0003 	mov.w	r0, #3
 80072d6:	d007      	beq.n	80072e8 <ai_layers_forward_all+0x50>
 80072d8:	47c0      	blx	r8
 80072da:	3701      	adds	r7, #1
 80072dc:	63a6      	str	r6, [r4, #56]	; 0x38
 80072de:	2e00      	cmp	r6, #0
 80072e0:	d1eb      	bne.n	80072ba <ai_layers_forward_all+0x22>
 80072e2:	4638      	mov	r0, r7
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e8:	2003      	movs	r0, #3
 80072ea:	47c0      	blx	r8
 80072ec:	2300      	movs	r3, #0
 80072ee:	3701      	adds	r7, #1
 80072f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80072f2:	4638      	mov	r0, r7
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	2700      	movs	r7, #0
 80072fa:	4638      	mov	r0, r7
 80072fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007300:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007302:	6385      	str	r5, [r0, #56]	; 0x38
 8007304:	2d00      	cmp	r5, #0
 8007306:	d0f7      	beq.n	80072f8 <ai_layers_forward_all+0x60>
 8007308:	4647      	mov	r7, r8
 800730a:	696b      	ldr	r3, [r5, #20]
 800730c:	4628      	mov	r0, r5
 800730e:	4798      	blx	r3
 8007310:	462b      	mov	r3, r5
 8007312:	692d      	ldr	r5, [r5, #16]
 8007314:	429d      	cmp	r5, r3
 8007316:	d004      	beq.n	8007322 <ai_layers_forward_all+0x8a>
 8007318:	63a5      	str	r5, [r4, #56]	; 0x38
 800731a:	3701      	adds	r7, #1
 800731c:	2d00      	cmp	r5, #0
 800731e:	d1f4      	bne.n	800730a <ai_layers_forward_all+0x72>
 8007320:	e7df      	b.n	80072e2 <ai_layers_forward_all+0x4a>
 8007322:	2300      	movs	r3, #0
 8007324:	63a3      	str	r3, [r4, #56]	; 0x38
 8007326:	3701      	adds	r7, #1
 8007328:	e7db      	b.n	80072e2 <ai_layers_forward_all+0x4a>
 800732a:	bf00      	nop

0800732c <ai_layers_destroy_all>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007330:	2500      	movs	r5, #0
 8007332:	b16c      	cbz	r4, 8007350 <ai_layers_destroy_all+0x24>
 8007334:	6863      	ldr	r3, [r4, #4]
 8007336:	075b      	lsls	r3, r3, #29
 8007338:	d504      	bpl.n	8007344 <ai_layers_destroy_all+0x18>
 800733a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800733c:	4620      	mov	r0, r4
 800733e:	b10b      	cbz	r3, 8007344 <ai_layers_destroy_all+0x18>
 8007340:	4798      	blx	r3
 8007342:	3501      	adds	r5, #1
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	42a3      	cmp	r3, r4
 8007348:	d002      	beq.n	8007350 <ai_layers_destroy_all+0x24>
 800734a:	b10b      	cbz	r3, 8007350 <ai_layers_destroy_all+0x24>
 800734c:	461c      	mov	r4, r3
 800734e:	e7f0      	b.n	8007332 <ai_layers_destroy_all+0x6>
 8007350:	4628      	mov	r0, r5
 8007352:	bd38      	pop	{r3, r4, r5, pc}

08007354 <forward_dense_integer_SSSA>:
 8007354:	6982      	ldr	r2, [r0, #24]
 8007356:	8813      	ldrh	r3, [r2, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80c8 	beq.w	80074ee <forward_dense_integer_SSSA+0x19a>
 800735e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007362:	6852      	ldr	r2, [r2, #4]
 8007364:	6854      	ldr	r4, [r2, #4]
 8007366:	b093      	sub	sp, #76	; 0x4c
 8007368:	b104      	cbz	r4, 800736c <forward_dense_integer_SSSA+0x18>
 800736a:	6824      	ldr	r4, [r4, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	f000 815f 	beq.w	8007630 <forward_dense_integer_SSSA+0x2dc>
 8007372:	6911      	ldr	r1, [r2, #16]
 8007374:	b101      	cbz	r1, 8007378 <forward_dense_integer_SSSA+0x24>
 8007376:	6809      	ldr	r1, [r1, #0]
 8007378:	2b02      	cmp	r3, #2
 800737a:	f000 815c 	beq.w	8007636 <forward_dense_integer_SSSA+0x2e2>
 800737e:	69d5      	ldr	r5, [r2, #28]
 8007380:	2d00      	cmp	r5, #0
 8007382:	f000 8108 	beq.w	8007596 <forward_dense_integer_SSSA+0x242>
 8007386:	8b16      	ldrh	r6, [r2, #24]
 8007388:	6828      	ldr	r0, [r5, #0]
 800738a:	2e01      	cmp	r6, #1
 800738c:	f240 812d 	bls.w	80075ea <forward_dense_integer_SSSA+0x296>
 8007390:	686d      	ldr	r5, [r5, #4]
 8007392:	2b03      	cmp	r3, #3
 8007394:	f000 8152 	beq.w	800763c <forward_dense_integer_SSSA+0x2e8>
 8007398:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800739c:	69ab      	ldr	r3, [r5, #24]
 800739e:	f1b9 0f00 	cmp.w	r9, #0
 80073a2:	f000 810f 	beq.w	80075c4 <forward_dense_integer_SSSA+0x270>
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	68e2      	ldr	r2, [r4, #12]
 80073aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ac:	68cb      	ldr	r3, [r1, #12]
 80073ae:	6856      	ldr	r6, [r2, #4]
 80073b0:	f8d9 9000 	ldr.w	r9, [r9]
 80073b4:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80073b8:	698d      	ldr	r5, [r1, #24]
 80073ba:	960f      	str	r6, [sp, #60]	; 0x3c
 80073bc:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	fb03 f302 	mul.w	r3, r3, r2
 80073c6:	930c      	str	r3, [sp, #48]	; 0x30
 80073c8:	b2b2      	uxth	r2, r6
 80073ca:	fa1f f38a 	uxth.w	r3, sl
 80073ce:	f1b9 0f00 	cmp.w	r9, #0
 80073d2:	d003      	beq.n	80073dc <forward_dense_integer_SSSA+0x88>
 80073d4:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80073d8:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80073dc:	6827      	ldr	r7, [r4, #0]
 80073de:	f8d0 b000 	ldr.w	fp, [r0]
 80073e2:	680c      	ldr	r4, [r1, #0]
 80073e4:	6981      	ldr	r1, [r0, #24]
 80073e6:	2f00      	cmp	r7, #0
 80073e8:	f000 8083 	beq.w	80074f2 <forward_dense_integer_SSSA+0x19e>
 80073ec:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80073f0:	f1bc 0f00 	cmp.w	ip, #0
 80073f4:	f000 80b1 	beq.w	800755a <forward_dense_integer_SSSA+0x206>
 80073f8:	8878      	ldrh	r0, [r7, #2]
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f000 809c 	beq.w	8007538 <forward_dense_integer_SSSA+0x1e4>
 8007400:	f8dc 6000 	ldr.w	r6, [ip]
 8007404:	edd6 7a00 	vldr	s15, [r6]
 8007408:	2c00      	cmp	r4, #0
 800740a:	f000 809a 	beq.w	8007542 <forward_dense_integer_SSSA+0x1ee>
 800740e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007412:	f1b8 0f00 	cmp.w	r8, #0
 8007416:	f000 80a9 	beq.w	800756c <forward_dense_integer_SSSA+0x218>
 800741a:	8860      	ldrh	r0, [r4, #2]
 800741c:	2800      	cmp	r0, #0
 800741e:	d074      	beq.n	800750a <forward_dense_integer_SSSA+0x1b6>
 8007420:	68ae      	ldr	r6, [r5, #8]
 8007422:	f8de 5008 	ldr.w	r5, [lr, #8]
 8007426:	950d      	str	r5, [sp, #52]	; 0x34
 8007428:	f8d8 5000 	ldr.w	r5, [r8]
 800742c:	6889      	ldr	r1, [r1, #8]
 800742e:	ed95 0a00 	vldr	s0, [r5]
 8007432:	f1bc 0f00 	cmp.w	ip, #0
 8007436:	d076      	beq.n	8007526 <forward_dense_integer_SSSA+0x1d2>
 8007438:	8878      	ldrh	r0, [r7, #2]
 800743a:	2800      	cmp	r0, #0
 800743c:	f000 80a3 	beq.w	8007586 <forward_dense_integer_SSSA+0x232>
 8007440:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007444:	f990 7000 	ldrsb.w	r7, [r0]
 8007448:	2c00      	cmp	r4, #0
 800744a:	f000 80d6 	beq.w	80075fa <forward_dense_integer_SSSA+0x2a6>
 800744e:	f1b8 0f00 	cmp.w	r8, #0
 8007452:	f000 809d 	beq.w	8007590 <forward_dense_integer_SSSA+0x23c>
 8007456:	8860      	ldrh	r0, [r4, #2]
 8007458:	2800      	cmp	r0, #0
 800745a:	d167      	bne.n	800752c <forward_dense_integer_SSSA+0x1d8>
 800745c:	900a      	str	r0, [sp, #40]	; 0x28
 800745e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007462:	910e      	str	r1, [sp, #56]	; 0x38
 8007464:	f1bb 0f00 	cmp.w	fp, #0
 8007468:	f000 80dc 	beq.w	8007624 <forward_dense_integer_SSSA+0x2d0>
 800746c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007470:	2800      	cmp	r0, #0
 8007472:	f000 80d7 	beq.w	8007624 <forward_dense_integer_SSSA+0x2d0>
 8007476:	6800      	ldr	r0, [r0, #0]
 8007478:	2400      	movs	r4, #0
 800747a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800747e:	9411      	str	r4, [sp, #68]	; 0x44
 8007480:	ed90 7a00 	vldr	s14, [r0]
 8007484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007488:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800748c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007490:	4640      	mov	r0, r8
 8007492:	f002 fa17 	bl	80098c4 <align_factor>
 8007496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007498:	9011      	str	r0, [sp, #68]	; 0x44
 800749a:	b32b      	cbz	r3, 80074e8 <forward_dense_integer_SSSA+0x194>
 800749c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80074a0:	4699      	mov	r9, r3
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 80074a8:	9a08      	ldr	r2, [sp, #32]
 80074aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80074ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80074ae:	970d      	str	r7, [sp, #52]	; 0x34
 80074b0:	fa1f fa8a 	uxth.w	sl, sl
 80074b4:	461f      	mov	r7, r3
 80074b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074b8:	9306      	str	r3, [sp, #24]
 80074ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c4:	9605      	str	r6, [sp, #20]
 80074c6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80074ca:	ab11      	add	r3, sp, #68	; 0x44
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4628      	mov	r0, r5
 80074d0:	3401      	adds	r4, #1
 80074d2:	463b      	mov	r3, r7
 80074d4:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80074d8:	f002 fa78 	bl	80099cc <st_sssa8_fully_connected>
 80074dc:	454c      	cmp	r4, r9
 80074de:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80074e2:	4456      	add	r6, sl
 80074e4:	445d      	add	r5, fp
 80074e6:	d1e6      	bne.n	80074b6 <forward_dense_integer_SSSA+0x162>
 80074e8:	b013      	add	sp, #76	; 0x4c
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	deff      	udf	#255	; 0xff
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	d056      	beq.n	80075a4 <forward_dense_integer_SSSA+0x250>
 80074f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80074fa:	f1b8 0f00 	cmp.w	r8, #0
 80074fe:	d05d      	beq.n	80075bc <forward_dense_integer_SSSA+0x268>
 8007500:	8860      	ldrh	r0, [r4, #2]
 8007502:	2800      	cmp	r0, #0
 8007504:	d17b      	bne.n	80075fe <forward_dense_integer_SSSA+0x2aa>
 8007506:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 800750a:	68ae      	ldr	r6, [r5, #8]
 800750c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8007510:	6889      	ldr	r1, [r1, #8]
 8007512:	950d      	str	r5, [sp, #52]	; 0x34
 8007514:	2f00      	cmp	r7, #0
 8007516:	d041      	beq.n	800759c <forward_dense_integer_SSSA+0x248>
 8007518:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800751c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 8007520:	f1bc 0f00 	cmp.w	ip, #0
 8007524:	d188      	bne.n	8007438 <forward_dense_integer_SSSA+0xe4>
 8007526:	4667      	mov	r7, ip
 8007528:	2800      	cmp	r0, #0
 800752a:	d097      	beq.n	800745c <forward_dense_integer_SSSA+0x108>
 800752c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007530:	f990 0000 	ldrsb.w	r0, [r0]
 8007534:	900a      	str	r0, [sp, #40]	; 0x28
 8007536:	e792      	b.n	800745e <forward_dense_integer_SSSA+0x10a>
 8007538:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 800753c:	2c00      	cmp	r4, #0
 800753e:	f47f af66 	bne.w	800740e <forward_dense_integer_SSSA+0xba>
 8007542:	68ae      	ldr	r6, [r5, #8]
 8007544:	f8de 5008 	ldr.w	r5, [lr, #8]
 8007548:	6889      	ldr	r1, [r1, #8]
 800754a:	950d      	str	r5, [sp, #52]	; 0x34
 800754c:	2800      	cmp	r0, #0
 800754e:	d14e      	bne.n	80075ee <forward_dense_integer_SSSA+0x29a>
 8007550:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 8007554:	900a      	str	r0, [sp, #40]	; 0x28
 8007556:	4607      	mov	r7, r0
 8007558:	e781      	b.n	800745e <forward_dense_integer_SSSA+0x10a>
 800755a:	b31c      	cbz	r4, 80075a4 <forward_dense_integer_SSSA+0x250>
 800755c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007560:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 8007564:	f1b8 0f00 	cmp.w	r8, #0
 8007568:	f47f af57 	bne.w	800741a <forward_dense_integer_SSSA+0xc6>
 800756c:	f8de 0008 	ldr.w	r0, [lr, #8]
 8007570:	68ae      	ldr	r6, [r5, #8]
 8007572:	6889      	ldr	r1, [r1, #8]
 8007574:	900d      	str	r0, [sp, #52]	; 0x34
 8007576:	f1bc 0f00 	cmp.w	ip, #0
 800757a:	d00e      	beq.n	800759a <forward_dense_integer_SSSA+0x246>
 800757c:	8878      	ldrh	r0, [r7, #2]
 800757e:	2800      	cmp	r0, #0
 8007580:	d149      	bne.n	8007616 <forward_dense_integer_SSSA+0x2c2>
 8007582:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 8007586:	2700      	movs	r7, #0
 8007588:	f1b8 0f00 	cmp.w	r8, #0
 800758c:	f47f af63 	bne.w	8007456 <forward_dense_integer_SSSA+0x102>
 8007590:	2000      	movs	r0, #0
 8007592:	900a      	str	r0, [sp, #40]	; 0x28
 8007594:	e763      	b.n	800745e <forward_dense_integer_SSSA+0x10a>
 8007596:	4628      	mov	r0, r5
 8007598:	e6fb      	b.n	8007392 <forward_dense_integer_SSSA+0x3e>
 800759a:	4667      	mov	r7, ip
 800759c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 80075a0:	970a      	str	r7, [sp, #40]	; 0x28
 80075a2:	e75c      	b.n	800745e <forward_dense_integer_SSSA+0x10a>
 80075a4:	eddf 7a27 	vldr	s15, [pc, #156]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 80075a8:	4627      	mov	r7, r4
 80075aa:	f8de 0008 	ldr.w	r0, [lr, #8]
 80075ae:	68ae      	ldr	r6, [r5, #8]
 80075b0:	6889      	ldr	r1, [r1, #8]
 80075b2:	900d      	str	r0, [sp, #52]	; 0x34
 80075b4:	eeb0 0a67 	vmov.f32	s0, s15
 80075b8:	970a      	str	r7, [sp, #40]	; 0x28
 80075ba:	e750      	b.n	800745e <forward_dense_integer_SSSA+0x10a>
 80075bc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 80075c0:	4647      	mov	r7, r8
 80075c2:	e7f2      	b.n	80075aa <forward_dense_integer_SSSA+0x256>
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	68e2      	ldr	r2, [r4, #12]
 80075c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ca:	68cb      	ldr	r3, [r1, #12]
 80075cc:	6856      	ldr	r6, [r2, #4]
 80075ce:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80075d2:	698d      	ldr	r5, [r1, #24]
 80075d4:	960f      	str	r6, [sp, #60]	; 0x3c
 80075d6:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	fb03 f302 	mul.w	r3, r3, r2
 80075e0:	930c      	str	r3, [sp, #48]	; 0x30
 80075e2:	b2b2      	uxth	r2, r6
 80075e4:	fa1f f38a 	uxth.w	r3, sl
 80075e8:	e6f8      	b.n	80073dc <forward_dense_integer_SSSA+0x88>
 80075ea:	2500      	movs	r5, #0
 80075ec:	e6d1      	b.n	8007392 <forward_dense_integer_SSSA+0x3e>
 80075ee:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80075f2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 80075f6:	f990 7000 	ldrsb.w	r7, [r0]
 80075fa:	940a      	str	r4, [sp, #40]	; 0x28
 80075fc:	e72f      	b.n	800745e <forward_dense_integer_SSSA+0x10a>
 80075fe:	f8de 0008 	ldr.w	r0, [lr, #8]
 8007602:	900d      	str	r0, [sp, #52]	; 0x34
 8007604:	f8d8 0000 	ldr.w	r0, [r8]
 8007608:	68ae      	ldr	r6, [r5, #8]
 800760a:	6889      	ldr	r1, [r1, #8]
 800760c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 8007610:	ed90 0a00 	vldr	s0, [r0]
 8007614:	e78a      	b.n	800752c <forward_dense_integer_SSSA+0x1d8>
 8007616:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800761a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8007644 <forward_dense_integer_SSSA+0x2f0>
 800761e:	f990 7000 	ldrsb.w	r7, [r0]
 8007622:	e7b5      	b.n	8007590 <forward_dense_integer_SSSA+0x23c>
 8007624:	2300      	movs	r3, #0
 8007626:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800762a:	9311      	str	r3, [sp, #68]	; 0x44
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	deff      	udf	#255	; 0xff
 8007630:	2300      	movs	r3, #0
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	deff      	udf	#255	; 0xff
 8007636:	2300      	movs	r3, #0
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	deff      	udf	#255	; 0xff
 800763c:	2300      	movs	r3, #0
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	deff      	udf	#255	; 0xff
 8007642:	bf00      	nop
 8007644:	00000000 	.word	0x00000000

08007648 <forward_concat>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	ed2d 8b06 	vpush	{d8-d10}
 8007650:	6982      	ldr	r2, [r0, #24]
 8007652:	b085      	sub	sp, #20
 8007654:	8813      	ldrh	r3, [r2, #0]
 8007656:	9002      	str	r0, [sp, #8]
 8007658:	b90b      	cbnz	r3, 800765e <forward_concat+0x16>
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	deff      	udf	#255	; 0xff
 800765e:	2b01      	cmp	r3, #1
 8007660:	6856      	ldr	r6, [r2, #4]
 8007662:	f000 8293 	beq.w	8007b8c <forward_concat+0x544>
 8007666:	6933      	ldr	r3, [r6, #16]
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	b10b      	cbz	r3, 8007670 <forward_concat+0x28>
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	8834      	ldrh	r4, [r6, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	4621      	mov	r1, r4
 8007676:	4618      	mov	r0, r3
 8007678:	e00c      	b.n	8007694 <forward_concat+0x4c>
 800767a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800767e:	b172      	cbz	r2, 800769e <forward_concat+0x56>
 8007680:	6992      	ldr	r2, [r2, #24]
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8007688:	2a01      	cmp	r2, #1
 800768a:	bf0c      	ite	eq
 800768c:	2201      	moveq	r2, #1
 800768e:	2202      	movne	r2, #2
 8007690:	3301      	adds	r3, #1
 8007692:	4310      	orrs	r0, r2
 8007694:	429c      	cmp	r4, r3
 8007696:	d002      	beq.n	800769e <forward_concat+0x56>
 8007698:	6872      	ldr	r2, [r6, #4]
 800769a:	2a00      	cmp	r2, #0
 800769c:	d1ed      	bne.n	800767a <forward_concat+0x32>
 800769e:	9b01      	ldr	r3, [sp, #4]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	6813      	ldr	r3, [r2, #0]
 80076a4:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80076a8:	f3c3 4243 	ubfx	r2, r3, #17, #4
 80076ac:	2a01      	cmp	r2, #1
 80076ae:	d006      	beq.n	80076be <forward_concat+0x76>
 80076b0:	2801      	cmp	r0, #1
 80076b2:	d146      	bne.n	8007742 <forward_concat+0xfa>
 80076b4:	b005      	add	sp, #20
 80076b6:	ecbd 8b06 	vpop	{d8-d10}
 80076ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076be:	2801      	cmp	r0, #1
 80076c0:	d134      	bne.n	800772c <forward_concat+0xe4>
 80076c2:	f04f 0800 	mov.w	r8, #0
 80076c6:	4541      	cmp	r1, r8
 80076c8:	d9f4      	bls.n	80076b4 <forward_concat+0x6c>
 80076ca:	6873      	ldr	r3, [r6, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f1      	beq.n	80076b4 <forward_concat+0x6c>
 80076d0:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	d0ed      	beq.n	80076b4 <forward_concat+0x6c>
 80076d8:	69ab      	ldr	r3, [r5, #24]
 80076da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076de:	f004 f9e3 	bl	800baa8 <ai_array_get_byte_size>
 80076e2:	69ab      	ldr	r3, [r5, #24]
 80076e4:	6969      	ldr	r1, [r5, #20]
 80076e6:	689c      	ldr	r4, [r3, #8]
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	68ea      	ldr	r2, [r5, #12]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80076f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076f6:	fb02 f905 	mul.w	r9, r2, r5
 80076fa:	9a01      	ldr	r2, [sp, #4]
 80076fc:	68d1      	ldr	r1, [r2, #12]
 80076fe:	1827      	adds	r7, r4, r0
 8007700:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007704:	42bc      	cmp	r4, r7
 8007706:	fb03 f505 	mul.w	r5, r3, r5
 800770a:	bf38      	it	cc
 800770c:	46da      	movcc	sl, fp
 800770e:	d208      	bcs.n	8007722 <forward_concat+0xda>
 8007710:	4651      	mov	r1, sl
 8007712:	4620      	mov	r0, r4
 8007714:	464a      	mov	r2, r9
 8007716:	444c      	add	r4, r9
 8007718:	f002 fc52 	bl	8009fc0 <st_int8_copy>
 800771c:	42a7      	cmp	r7, r4
 800771e:	44aa      	add	sl, r5
 8007720:	d8f6      	bhi.n	8007710 <forward_concat+0xc8>
 8007722:	8831      	ldrh	r1, [r6, #0]
 8007724:	44cb      	add	fp, r9
 8007726:	f108 0801 	add.w	r8, r8, #1
 800772a:	e7cc      	b.n	80076c6 <forward_concat+0x7e>
 800772c:	0782      	lsls	r2, r0, #30
 800772e:	d4c1      	bmi.n	80076b4 <forward_concat+0x6c>
 8007730:	9a01      	ldr	r2, [sp, #4]
 8007732:	f8d2 8000 	ldr.w	r8, [r2]
 8007736:	f1b8 0f00 	cmp.w	r8, #0
 800773a:	d109      	bne.n	8007750 <forward_concat+0x108>
 800773c:	ed9f 8aba 	vldr	s16, [pc, #744]	; 8007a28 <forward_concat+0x3e0>
 8007740:	e011      	b.n	8007766 <forward_concat+0x11e>
 8007742:	9a01      	ldr	r2, [sp, #4]
 8007744:	f8d2 8000 	ldr.w	r8, [r2]
 8007748:	f1b8 0f00 	cmp.w	r8, #0
 800774c:	f000 8216 	beq.w	8007b7c <forward_concat+0x534>
 8007750:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007754:	2a00      	cmp	r2, #0
 8007756:	d0f1      	beq.n	800773c <forward_concat+0xf4>
 8007758:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800775c:	2900      	cmp	r1, #0
 800775e:	d0ed      	beq.n	800773c <forward_concat+0xf4>
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	ed92 8a00 	vldr	s16, [r2]
 8007766:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800776a:	ee87 9a88 	vdiv.f32	s18, s15, s16
 800776e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007772:	9303      	str	r3, [sp, #12]
 8007774:	4621      	mov	r1, r4
 8007776:	4633      	mov	r3, r6
 8007778:	2700      	movs	r7, #0
 800777a:	4646      	mov	r6, r8
 800777c:	4698      	mov	r8, r3
 800777e:	ed9f aaa8 	vldr	s20, [pc, #672]	; 8007a20 <forward_concat+0x3d8>
 8007782:	eddf 8aa9 	vldr	s17, [pc, #676]	; 8007a28 <forward_concat+0x3e0>
 8007786:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800778a:	42b9      	cmp	r1, r7
 800778c:	d992      	bls.n	80076b4 <forward_concat+0x6c>
 800778e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d08e      	beq.n	80076b4 <forward_concat+0x6c>
 8007796:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d08a      	beq.n	80076b4 <forward_concat+0x6c>
 800779e:	9a02      	ldr	r2, [sp, #8]
 80077a0:	68d9      	ldr	r1, [r3, #12]
 80077a2:	69d4      	ldr	r4, [r2, #28]
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 80077aa:	68d2      	ldr	r2, [r2, #12]
 80077ac:	6958      	ldr	r0, [r3, #20]
 80077ae:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80077b2:	699a      	ldr	r2, [r3, #24]
 80077b4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80077b8:	f8d2 9000 	ldr.w	r9, [r2]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	fb01 fa00 	mul.w	sl, r1, r0
 80077c2:	fb00 f505 	mul.w	r5, r0, r5
 80077c6:	e9d2 1401 	ldrd	r1, r4, [r2, #4]
 80077ca:	4648      	mov	r0, r9
 80077cc:	f004 f96c 	bl	800baa8 <ai_array_get_byte_size>
 80077d0:	f3c9 4243 	ubfx	r2, r9, #17, #4
 80077d4:	2a01      	cmp	r2, #1
 80077d6:	9b00      	ldr	r3, [sp, #0]
 80077d8:	eb04 0900 	add.w	r9, r4, r0
 80077dc:	d079      	beq.n	80078d2 <forward_concat+0x28a>
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	2800      	cmp	r0, #0
 80077e2:	f000 8118 	beq.w	8007a16 <forward_concat+0x3ce>
 80077e6:	6841      	ldr	r1, [r0, #4]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	f000 8166 	beq.w	8007aba <forward_concat+0x472>
 80077ee:	8842      	ldrh	r2, [r0, #2]
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	f000 815f 	beq.w	8007ab4 <forward_concat+0x46c>
 80077f6:	680b      	ldr	r3, [r1, #0]
 80077f8:	edd3 6a00 	vldr	s13, [r3]
 80077fc:	684b      	ldr	r3, [r1, #4]
 80077fe:	f993 2000 	ldrsb.w	r2, [r3]
 8007802:	2e00      	cmp	r6, #0
 8007804:	f000 8105 	beq.w	8007a12 <forward_concat+0x3ca>
 8007808:	6871      	ldr	r1, [r6, #4]
 800780a:	2900      	cmp	r1, #0
 800780c:	f000 8159 	beq.w	8007ac2 <forward_concat+0x47a>
 8007810:	8873      	ldrh	r3, [r6, #2]
 8007812:	b113      	cbz	r3, 800781a <forward_concat+0x1d2>
 8007814:	684b      	ldr	r3, [r1, #4]
 8007816:	f993 3000 	ldrsb.w	r3, [r3]
 800781a:	eeb4 8a66 	vcmp.f32	s16, s13
 800781e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007822:	d102      	bne.n	800782a <forward_concat+0x1e2>
 8007824:	429a      	cmp	r2, r3
 8007826:	f000 818b 	beq.w	8007b40 <forward_concat+0x4f8>
 800782a:	9b03      	ldr	r3, [sp, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 809a 	bne.w	8007966 <forward_concat+0x31e>
 8007832:	2800      	cmp	r0, #0
 8007834:	f000 8150 	beq.w	8007ad8 <forward_concat+0x490>
 8007838:	6843      	ldr	r3, [r0, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8143 	beq.w	8007ac6 <forward_concat+0x47e>
 8007840:	8842      	ldrh	r2, [r0, #2]
 8007842:	2a00      	cmp	r2, #0
 8007844:	f000 813f 	beq.w	8007ac6 <forward_concat+0x47e>
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	7819      	ldrb	r1, [r3, #0]
 800784c:	2e00      	cmp	r6, #0
 800784e:	f000 813e 	beq.w	8007ace <forward_concat+0x486>
 8007852:	6872      	ldr	r2, [r6, #4]
 8007854:	2a00      	cmp	r2, #0
 8007856:	f000 816d 	beq.w	8007b34 <forward_concat+0x4ec>
 800785a:	8873      	ldrh	r3, [r6, #2]
 800785c:	b10b      	cbz	r3, 8007862 <forward_concat+0x21a>
 800785e:	6853      	ldr	r3, [r2, #4]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	eeb4 8a66 	vcmp.f32	s16, s13
 8007866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786a:	d102      	bne.n	8007872 <forward_concat+0x22a>
 800786c:	4299      	cmp	r1, r3
 800786e:	f000 814c 	beq.w	8007b0a <forward_concat+0x4c2>
 8007872:	454c      	cmp	r4, r9
 8007874:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007878:	f080 80c7 	bcs.w	8007a0a <forward_concat+0x3c2>
 800787c:	2d00      	cmp	r5, #0
 800787e:	f340 80c4 	ble.w	8007a0a <forward_concat+0x3c2>
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800788a:	1960      	adds	r0, r4, r5
 800788c:	ee36 6a29 	vadd.f32	s12, s12, s19
 8007890:	4602      	mov	r2, r0
 8007892:	46dc      	mov	ip, fp
 8007894:	46e6      	mov	lr, ip
 8007896:	f814 3b01 	ldrb.w	r3, [r4], #1
 800789a:	1a5b      	subs	r3, r3, r1
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078a4:	eeb0 7a46 	vmov.f32	s14, s12
 80078a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80078ac:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80078b0:	ee17 3a90 	vmov	r3, s15
 80078b4:	f383 0308 	usat	r3, #8, r3
 80078b8:	4294      	cmp	r4, r2
 80078ba:	f80e 3b01 	strb.w	r3, [lr], #1
 80078be:	d1ea      	bne.n	8007896 <forward_concat+0x24e>
 80078c0:	4548      	cmp	r0, r9
 80078c2:	eb04 0205 	add.w	r2, r4, r5
 80078c6:	44d4      	add	ip, sl
 80078c8:	4604      	mov	r4, r0
 80078ca:	f080 809e 	bcs.w	8007a0a <forward_concat+0x3c2>
 80078ce:	4428      	add	r0, r5
 80078d0:	e7e0      	b.n	8007894 <forward_concat+0x24c>
 80078d2:	2d00      	cmp	r5, #0
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	4629      	mov	r1, r5
 80078d8:	bfb8      	it	lt
 80078da:	1ce9      	addlt	r1, r5, #3
 80078dc:	1089      	asrs	r1, r1, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 80a4 	bne.w	8007a2c <forward_concat+0x3e4>
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	f000 80f4 	beq.w	8007ad2 <forward_concat+0x48a>
 80078ea:	6873      	ldr	r3, [r6, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80f0 	beq.w	8007ad2 <forward_concat+0x48a>
 80078f2:	8872      	ldrh	r2, [r6, #2]
 80078f4:	2a00      	cmp	r2, #0
 80078f6:	f000 80ec 	beq.w	8007ad2 <forward_concat+0x48a>
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	ee06 3a90 	vmov	s13, r3
 8007902:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007906:	ee76 6aa9 	vadd.f32	s13, s13, s19
 800790a:	454c      	cmp	r4, r9
 800790c:	d226      	bcs.n	800795c <forward_concat+0x314>
 800790e:	2d03      	cmp	r5, #3
 8007910:	ebaa 0a01 	sub.w	sl, sl, r1
 8007914:	bfc8      	it	gt
 8007916:	46de      	movgt	lr, fp
 8007918:	dd20      	ble.n	800795c <forward_concat+0x314>
 800791a:	46f4      	mov	ip, lr
 800791c:	4620      	mov	r0, r4
 800791e:	2200      	movs	r2, #0
 8007920:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007924:	ee07 3a10 	vmov	s14, r3
 8007928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800792c:	eef0 7a66 	vmov.f32	s15, s13
 8007930:	eee7 7a09 	vfma.f32	s15, s14, s18
 8007934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007938:	ee17 3a90 	vmov	r3, s15
 800793c:	f383 0308 	usat	r3, #8, r3
 8007940:	3201      	adds	r2, #1
 8007942:	4291      	cmp	r1, r2
 8007944:	f80c 3b01 	strb.w	r3, [ip], #1
 8007948:	dcea      	bgt.n	8007920 <forward_concat+0x2d8>
 800794a:	2d03      	cmp	r5, #3
 800794c:	bfcc      	ite	gt
 800794e:	460b      	movgt	r3, r1
 8007950:	2301      	movle	r3, #1
 8007952:	441c      	add	r4, r3
 8007954:	45a1      	cmp	r9, r4
 8007956:	4453      	add	r3, sl
 8007958:	449e      	add	lr, r3
 800795a:	d8de      	bhi.n	800791a <forward_concat+0x2d2>
 800795c:	448b      	add	fp, r1
 800795e:	f8b8 1000 	ldrh.w	r1, [r8]
 8007962:	3701      	adds	r7, #1
 8007964:	e711      	b.n	800778a <forward_concat+0x142>
 8007966:	b140      	cbz	r0, 800797a <forward_concat+0x332>
 8007968:	6843      	ldr	r3, [r0, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80e4 	beq.w	8007b38 <forward_concat+0x4f0>
 8007970:	8840      	ldrh	r0, [r0, #2]
 8007972:	b110      	cbz	r0, 800797a <forward_concat+0x332>
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f993 0000 	ldrsb.w	r0, [r3]
 800797a:	2e00      	cmp	r6, #0
 800797c:	f000 80ae 	beq.w	8007adc <forward_concat+0x494>
 8007980:	6872      	ldr	r2, [r6, #4]
 8007982:	2a00      	cmp	r2, #0
 8007984:	f000 80da 	beq.w	8007b3c <forward_concat+0x4f4>
 8007988:	8873      	ldrh	r3, [r6, #2]
 800798a:	b113      	cbz	r3, 8007992 <forward_concat+0x34a>
 800798c:	6853      	ldr	r3, [r2, #4]
 800798e:	f993 3000 	ldrsb.w	r3, [r3]
 8007992:	eeb4 8a66 	vcmp.f32	s16, s13
 8007996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799a:	d102      	bne.n	80079a2 <forward_concat+0x35a>
 800799c:	4298      	cmp	r0, r3
 800799e:	f000 809f 	beq.w	8007ae0 <forward_concat+0x498>
 80079a2:	454c      	cmp	r4, r9
 80079a4:	ee66 6a89 	vmul.f32	s13, s13, s18
 80079a8:	d22f      	bcs.n	8007a0a <forward_concat+0x3c2>
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	dd2d      	ble.n	8007a0a <forward_concat+0x3c2>
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eb0b 0e05 	add.w	lr, fp, r5
 80079b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80079ba:	46f4      	mov	ip, lr
 80079bc:	465a      	mov	r2, fp
 80079be:	4621      	mov	r1, r4
 80079c0:	f911 3b01 	ldrsb.w	r3, [r1], #1
 80079c4:	1a1b      	subs	r3, r3, r0
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079ce:	eef0 7a46 	vmov.f32	s15, s12
 80079d2:	eee7 7a26 	vfma.f32	s15, s14, s13
 80079d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079de:	bf4c      	ite	mi
 80079e0:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 80079e4:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 80079e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079ec:	ee17 3a90 	vmov	r3, s15
 80079f0:	f303 0307 	ssat	r3, #8, r3
 80079f4:	f802 3b01 	strb.w	r3, [r2], #1
 80079f8:	4562      	cmp	r2, ip
 80079fa:	d1e1      	bne.n	80079c0 <forward_concat+0x378>
 80079fc:	442c      	add	r4, r5
 80079fe:	454c      	cmp	r4, r9
 8007a00:	44d3      	add	fp, sl
 8007a02:	44d4      	add	ip, sl
 8007a04:	d3da      	bcc.n	80079bc <forward_concat+0x374>
 8007a06:	46f3      	mov	fp, lr
 8007a08:	e7a9      	b.n	800795e <forward_concat+0x316>
 8007a0a:	eb0b 0e05 	add.w	lr, fp, r5
 8007a0e:	46f3      	mov	fp, lr
 8007a10:	e7a5      	b.n	800795e <forward_concat+0x316>
 8007a12:	4633      	mov	r3, r6
 8007a14:	e701      	b.n	800781a <forward_concat+0x1d2>
 8007a16:	eef0 6a68 	vmov.f32	s13, s17
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	e6f1      	b.n	8007802 <forward_concat+0x1ba>
 8007a1e:	bf00      	nop
 8007a20:	3efffffc 	.word	0x3efffffc
 8007a24:	7f800000 	.word	0x7f800000
 8007a28:	00000000 	.word	0x00000000
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	f000 809c 	beq.w	8007b6a <forward_concat+0x522>
 8007a32:	6873      	ldr	r3, [r6, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 809e 	beq.w	8007b76 <forward_concat+0x52e>
 8007a3a:	8872      	ldrh	r2, [r6, #2]
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	f000 8097 	beq.w	8007b70 <forward_concat+0x528>
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f993 3000 	ldrsb.w	r3, [r3]
 8007a48:	ee06 3a90 	vmov	s13, r3
 8007a4c:	454c      	cmp	r4, r9
 8007a4e:	d285      	bcs.n	800795c <forward_concat+0x314>
 8007a50:	2d03      	cmp	r5, #3
 8007a52:	ebaa 0a01 	sub.w	sl, sl, r1
 8007a56:	dd81      	ble.n	800795c <forward_concat+0x314>
 8007a58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007a5c:	46de      	mov	lr, fp
 8007a5e:	46f4      	mov	ip, lr
 8007a60:	4620      	mov	r0, r4
 8007a62:	2200      	movs	r2, #0
 8007a64:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007a68:	ee07 3a10 	vmov	s14, r3
 8007a6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a70:	eef0 7a66 	vmov.f32	s15, s13
 8007a74:	eee7 7a09 	vfma.f32	s15, s14, s18
 8007a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a80:	bf4c      	ite	mi
 8007a82:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 8007a86:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 8007a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a8e:	ee17 3a90 	vmov	r3, s15
 8007a92:	f303 0307 	ssat	r3, #8, r3
 8007a96:	3201      	adds	r2, #1
 8007a98:	4291      	cmp	r1, r2
 8007a9a:	f80c 3b01 	strb.w	r3, [ip], #1
 8007a9e:	dce1      	bgt.n	8007a64 <forward_concat+0x41c>
 8007aa0:	2d03      	cmp	r5, #3
 8007aa2:	bfcc      	ite	gt
 8007aa4:	460b      	movgt	r3, r1
 8007aa6:	2301      	movle	r3, #1
 8007aa8:	441c      	add	r4, r3
 8007aaa:	45a1      	cmp	r9, r4
 8007aac:	4453      	add	r3, sl
 8007aae:	449e      	add	lr, r3
 8007ab0:	d8d5      	bhi.n	8007a5e <forward_concat+0x416>
 8007ab2:	e753      	b.n	800795c <forward_concat+0x314>
 8007ab4:	eef0 6a68 	vmov.f32	s13, s17
 8007ab8:	e6a3      	b.n	8007802 <forward_concat+0x1ba>
 8007aba:	eef0 6a68 	vmov.f32	s13, s17
 8007abe:	460a      	mov	r2, r1
 8007ac0:	e69f      	b.n	8007802 <forward_concat+0x1ba>
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	e6a9      	b.n	800781a <forward_concat+0x1d2>
 8007ac6:	9903      	ldr	r1, [sp, #12]
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	f47f aec2 	bne.w	8007852 <forward_concat+0x20a>
 8007ace:	4633      	mov	r3, r6
 8007ad0:	e6c7      	b.n	8007862 <forward_concat+0x21a>
 8007ad2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007ad6:	e718      	b.n	800790a <forward_concat+0x2c2>
 8007ad8:	4619      	mov	r1, r3
 8007ada:	e6b7      	b.n	800784c <forward_concat+0x204>
 8007adc:	4633      	mov	r3, r6
 8007ade:	e758      	b.n	8007992 <forward_concat+0x34a>
 8007ae0:	454c      	cmp	r4, r9
 8007ae2:	d292      	bcs.n	8007a0a <forward_concat+0x3c2>
 8007ae4:	9600      	str	r6, [sp, #0]
 8007ae6:	462e      	mov	r6, r5
 8007ae8:	464d      	mov	r5, r9
 8007aea:	46d9      	mov	r9, fp
 8007aec:	4649      	mov	r1, r9
 8007aee:	4620      	mov	r0, r4
 8007af0:	4632      	mov	r2, r6
 8007af2:	4434      	add	r4, r6
 8007af4:	f002 fa64 	bl	8009fc0 <st_int8_copy>
 8007af8:	42a5      	cmp	r5, r4
 8007afa:	44d1      	add	r9, sl
 8007afc:	d8f6      	bhi.n	8007aec <forward_concat+0x4a4>
 8007afe:	4635      	mov	r5, r6
 8007b00:	9e00      	ldr	r6, [sp, #0]
 8007b02:	eb0b 0e05 	add.w	lr, fp, r5
 8007b06:	46f3      	mov	fp, lr
 8007b08:	e729      	b.n	800795e <forward_concat+0x316>
 8007b0a:	454c      	cmp	r4, r9
 8007b0c:	f4bf af7d 	bcs.w	8007a0a <forward_concat+0x3c2>
 8007b10:	9600      	str	r6, [sp, #0]
 8007b12:	462e      	mov	r6, r5
 8007b14:	464d      	mov	r5, r9
 8007b16:	46d9      	mov	r9, fp
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4434      	add	r4, r6
 8007b20:	f002 fa4e 	bl	8009fc0 <st_int8_copy>
 8007b24:	42a5      	cmp	r5, r4
 8007b26:	44d1      	add	r9, sl
 8007b28:	d8f6      	bhi.n	8007b18 <forward_concat+0x4d0>
 8007b2a:	4635      	mov	r5, r6
 8007b2c:	eb0b 0e05 	add.w	lr, fp, r5
 8007b30:	9e00      	ldr	r6, [sp, #0]
 8007b32:	e7e8      	b.n	8007b06 <forward_concat+0x4be>
 8007b34:	4613      	mov	r3, r2
 8007b36:	e694      	b.n	8007862 <forward_concat+0x21a>
 8007b38:	4618      	mov	r0, r3
 8007b3a:	e71e      	b.n	800797a <forward_concat+0x332>
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	e728      	b.n	8007992 <forward_concat+0x34a>
 8007b40:	454c      	cmp	r4, r9
 8007b42:	f4bf af62 	bcs.w	8007a0a <forward_concat+0x3c2>
 8007b46:	9600      	str	r6, [sp, #0]
 8007b48:	462e      	mov	r6, r5
 8007b4a:	464d      	mov	r5, r9
 8007b4c:	46d9      	mov	r9, fp
 8007b4e:	4649      	mov	r1, r9
 8007b50:	4620      	mov	r0, r4
 8007b52:	4632      	mov	r2, r6
 8007b54:	4434      	add	r4, r6
 8007b56:	f002 fa33 	bl	8009fc0 <st_int8_copy>
 8007b5a:	42a5      	cmp	r5, r4
 8007b5c:	44d1      	add	r9, sl
 8007b5e:	d8f6      	bhi.n	8007b4e <forward_concat+0x506>
 8007b60:	4635      	mov	r5, r6
 8007b62:	eb0b 0e05 	add.w	lr, fp, r5
 8007b66:	9e00      	ldr	r6, [sp, #0]
 8007b68:	e7cd      	b.n	8007b06 <forward_concat+0x4be>
 8007b6a:	ee06 6a90 	vmov	s13, r6
 8007b6e:	e76d      	b.n	8007a4c <forward_concat+0x404>
 8007b70:	ee06 2a90 	vmov	s13, r2
 8007b74:	e76a      	b.n	8007a4c <forward_concat+0x404>
 8007b76:	ee06 3a90 	vmov	s13, r3
 8007b7a:	e767      	b.n	8007a4c <forward_concat+0x404>
 8007b7c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007b80:	ed1f 9a58 	vldr	s18, [pc, #-352]	; 8007a24 <forward_concat+0x3dc>
 8007b84:	ed1f 8a58 	vldr	s16, [pc, #-352]	; 8007a28 <forward_concat+0x3e0>
 8007b88:	9303      	str	r3, [sp, #12]
 8007b8a:	e5f4      	b.n	8007776 <forward_concat+0x12e>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e564      	b.n	800765a <forward_concat+0x12>

08007b90 <forward_sm_integer>:
 8007b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b94:	6983      	ldr	r3, [r0, #24]
 8007b96:	881f      	ldrh	r7, [r3, #0]
 8007b98:	b086      	sub	sp, #24
 8007b9a:	2f00      	cmp	r7, #0
 8007b9c:	d042      	beq.n	8007c24 <forward_sm_integer+0x94>
 8007b9e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007ba2:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8007ba6:	b106      	cbz	r6, 8007baa <forward_sm_integer+0x1a>
 8007ba8:	6836      	ldr	r6, [r6, #0]
 8007baa:	2f01      	cmp	r7, #1
 8007bac:	d043      	beq.n	8007c36 <forward_sm_integer+0xa6>
 8007bae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d044      	beq.n	8007c40 <forward_sm_integer+0xb0>
 8007bb6:	f8d3 e000 	ldr.w	lr, [r3]
 8007bba:	68b1      	ldr	r1, [r6, #8]
 8007bbc:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007bc0:	68f5      	ldr	r5, [r6, #12]
 8007bc2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007bc6:	686b      	ldr	r3, [r5, #4]
 8007bc8:	0a09      	lsrs	r1, r1, #8
 8007bca:	d032      	beq.n	8007c32 <forward_sm_integer+0xa2>
 8007bcc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bd6:	428d      	cmp	r5, r1
 8007bd8:	fb04 f202 	mul.w	r2, r4, r2
 8007bdc:	d1f9      	bne.n	8007bd2 <forward_sm_integer+0x42>
 8007bde:	69c1      	ldr	r1, [r0, #28]
 8007be0:	2f03      	cmp	r7, #3
 8007be2:	688c      	ldr	r4, [r1, #8]
 8007be4:	d927      	bls.n	8007c36 <forward_sm_integer+0xa6>
 8007be6:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8007bea:	b339      	cbz	r1, 8007c3c <forward_sm_integer+0xac>
 8007bec:	6809      	ldr	r1, [r1, #0]
 8007bee:	69b0      	ldr	r0, [r6, #24]
 8007bf0:	6989      	ldr	r1, [r1, #24]
 8007bf2:	4e14      	ldr	r6, [pc, #80]	; (8007c44 <forward_sm_integer+0xb4>)
 8007bf4:	688d      	ldr	r5, [r1, #8]
 8007bf6:	6801      	ldr	r1, [r0, #0]
 8007bf8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8007bfc:	42b1      	cmp	r1, r6
 8007bfe:	f8de 6018 	ldr.w	r6, [lr, #24]
 8007c02:	6881      	ldr	r1, [r0, #8]
 8007c04:	68b0      	ldr	r0, [r6, #8]
 8007c06:	9505      	str	r5, [sp, #20]
 8007c08:	68a5      	ldr	r5, [r4, #8]
 8007c0a:	9504      	str	r5, [sp, #16]
 8007c0c:	6865      	ldr	r5, [r4, #4]
 8007c0e:	9503      	str	r5, [sp, #12]
 8007c10:	6824      	ldr	r4, [r4, #0]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	e9cd c401 	strd	ip, r4, [sp, #4]
 8007c18:	d006      	beq.n	8007c28 <forward_sm_integer+0x98>
 8007c1a:	f001 fa1f 	bl	800905c <forward_lite_nl_softmax_iu8ou8>
 8007c1e:	b006      	add	sp, #24
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	deff      	udf	#255	; 0xff
 8007c28:	f000 fdde 	bl	80087e8 <forward_lite_nl_softmax_is8os8>
 8007c2c:	b006      	add	sp, #24
 8007c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c32:	2201      	movs	r2, #1
 8007c34:	e7d3      	b.n	8007bde <forward_sm_integer+0x4e>
 8007c36:	2300      	movs	r3, #0
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	deff      	udf	#255	; 0xff
 8007c3c:	698b      	ldr	r3, [r1, #24]
 8007c3e:	deff      	udf	#255	; 0xff
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	deff      	udf	#255	; 0xff
 8007c44:	00840440 	.word	0x00840440

08007c48 <forward_mp_integer_INT8>:
 8007c48:	6983      	ldr	r3, [r0, #24]
 8007c4a:	881a      	ldrh	r2, [r3, #0]
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	d07e      	beq.n	8007d4e <forward_mp_integer_INT8+0x106>
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	684b      	ldr	r3, [r1, #4]
 8007c54:	b103      	cbz	r3, 8007c58 <forward_mp_integer_INT8+0x10>
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2a01      	cmp	r2, #1
 8007c5a:	f000 80fd 	beq.w	8007e58 <forward_mp_integer_INT8+0x210>
 8007c5e:	690a      	ldr	r2, [r1, #16]
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	f000 80f7 	beq.w	8007e54 <forward_mp_integer_INT8+0x20c>
 8007c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6a:	68de      	ldr	r6, [r3, #12]
 8007c6c:	6811      	ldr	r1, [r2, #0]
 8007c6e:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8007c70:	681c      	ldr	r4, [r3, #0]
 8007c72:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8007c76:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 8007c7a:	8932      	ldrh	r2, [r6, #8]
 8007c7c:	89b3      	ldrh	r3, [r6, #12]
 8007c7e:	8b86      	ldrh	r6, [r0, #28]
 8007c80:	68cd      	ldr	r5, [r1, #12]
 8007c82:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8007c86:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8007c8a:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8007c8e:	b095      	sub	sp, #84	; 0x54
 8007c90:	960d      	str	r6, [sp, #52]	; 0x34
 8007c92:	8c06      	ldrh	r6, [r0, #32]
 8007c94:	960e      	str	r6, [sp, #56]	; 0x38
 8007c96:	88be      	ldrh	r6, [r7, #4]
 8007c98:	960f      	str	r6, [sp, #60]	; 0x3c
 8007c9a:	883e      	ldrh	r6, [r7, #0]
 8007c9c:	9610      	str	r6, [sp, #64]	; 0x40
 8007c9e:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8007ca0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8007ca2:	9611      	str	r6, [sp, #68]	; 0x44
 8007ca4:	9012      	str	r0, [sp, #72]	; 0x48
 8007ca6:	680e      	ldr	r6, [r1, #0]
 8007ca8:	2c00      	cmp	r4, #0
 8007caa:	d06d      	beq.n	8007d88 <forward_mp_integer_INT8+0x140>
 8007cac:	6867      	ldr	r7, [r4, #4]
 8007cae:	2f00      	cmp	r7, #0
 8007cb0:	d04f      	beq.n	8007d52 <forward_mp_integer_INT8+0x10a>
 8007cb2:	8865      	ldrh	r5, [r4, #2]
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	f000 8083 	beq.w	8007dc0 <forward_mp_integer_INT8+0x178>
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	edd1 7a00 	vldr	s15, [r1]
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	f000 8082 	beq.w	8007dca <forward_mp_integer_INT8+0x182>
 8007cc6:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007cca:	f1b9 0f00 	cmp.w	r9, #0
 8007cce:	d049      	beq.n	8007d64 <forward_mp_integer_INT8+0x11c>
 8007cd0:	8871      	ldrh	r1, [r6, #2]
 8007cd2:	9113      	str	r1, [sp, #76]	; 0x4c
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d064      	beq.n	8007da2 <forward_mp_integer_INT8+0x15a>
 8007cd8:	f8d9 5000 	ldr.w	r5, [r9]
 8007cdc:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007ce0:	ed95 7a00 	vldr	s14, [r5]
 8007ce4:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007ce8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007cec:	2f00      	cmp	r7, #0
 8007cee:	d065      	beq.n	8007dbc <forward_mp_integer_INT8+0x174>
 8007cf0:	8864      	ldrh	r4, [r4, #2]
 8007cf2:	2c00      	cmp	r4, #0
 8007cf4:	f000 8092 	beq.w	8007e1c <forward_mp_integer_INT8+0x1d4>
 8007cf8:	687c      	ldr	r4, [r7, #4]
 8007cfa:	f994 4000 	ldrsb.w	r4, [r4]
 8007cfe:	2e00      	cmp	r6, #0
 8007d00:	d040      	beq.n	8007d84 <forward_mp_integer_INT8+0x13c>
 8007d02:	f1b9 0f00 	cmp.w	r9, #0
 8007d06:	d03d      	beq.n	8007d84 <forward_mp_integer_INT8+0x13c>
 8007d08:	8875      	ldrh	r5, [r6, #2]
 8007d0a:	9513      	str	r5, [sp, #76]	; 0x4c
 8007d0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007d0e:	b11d      	cbz	r5, 8007d18 <forward_mp_integer_INT8+0xd0>
 8007d10:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8007d14:	f995 5000 	ldrsb.w	r5, [r5]
 8007d18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d20:	da66      	bge.n	8007df0 <forward_mp_integer_INT8+0x1a8>
 8007d22:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8007d26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007d28:	9406      	str	r4, [sp, #24]
 8007d2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007d2c:	9405      	str	r4, [sp, #20]
 8007d2e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007d30:	9404      	str	r4, [sp, #16]
 8007d32:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007d34:	9403      	str	r4, [sp, #12]
 8007d36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007d38:	9402      	str	r4, [sp, #8]
 8007d3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007d3c:	e9cd ce07 	strd	ip, lr, [sp, #28]
 8007d40:	e9cd 8400 	strd	r8, r4, [sp]
 8007d44:	f000 fbb8 	bl	80084b8 <forward_lite_maxpool_is8os8_scaleneg>
 8007d48:	b015      	add	sp, #84	; 0x54
 8007d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	6853      	ldr	r3, [r2, #4]
 8007d50:	deff      	udf	#255	; 0xff
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	d044      	beq.n	8007de0 <forward_mp_integer_INT8+0x198>
 8007d56:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007d5a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8007e60 <forward_mp_integer_INT8+0x218>
 8007d5e:	f1b9 0f00 	cmp.w	r9, #0
 8007d62:	d1b5      	bne.n	8007cd0 <forward_mp_integer_INT8+0x88>
 8007d64:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8007e60 <forward_mp_integer_INT8+0x218>
 8007d68:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007d6c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007d70:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	d06a      	beq.n	8007e4e <forward_mp_integer_INT8+0x206>
 8007d78:	8864      	ldrh	r4, [r4, #2]
 8007d7a:	2c00      	cmp	r4, #0
 8007d7c:	d04e      	beq.n	8007e1c <forward_mp_integer_INT8+0x1d4>
 8007d7e:	687c      	ldr	r4, [r7, #4]
 8007d80:	f994 4000 	ldrsb.w	r4, [r4]
 8007d84:	2500      	movs	r5, #0
 8007d86:	e7c7      	b.n	8007d18 <forward_mp_integer_INT8+0xd0>
 8007d88:	2e00      	cmp	r6, #0
 8007d8a:	d049      	beq.n	8007e20 <forward_mp_integer_INT8+0x1d8>
 8007d8c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007d90:	f1b9 0f00 	cmp.w	r9, #0
 8007d94:	d024      	beq.n	8007de0 <forward_mp_integer_INT8+0x198>
 8007d96:	8871      	ldrh	r1, [r6, #2]
 8007d98:	9113      	str	r1, [sp, #76]	; 0x4c
 8007d9a:	2900      	cmp	r1, #0
 8007d9c:	d149      	bne.n	8007e32 <forward_mp_integer_INT8+0x1ea>
 8007d9e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8007e60 <forward_mp_integer_INT8+0x218>
 8007da2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007e60 <forward_mp_integer_INT8+0x218>
 8007da6:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007daa:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007dae:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007db2:	2c00      	cmp	r4, #0
 8007db4:	d0e6      	beq.n	8007d84 <forward_mp_integer_INT8+0x13c>
 8007db6:	6867      	ldr	r7, [r4, #4]
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	d199      	bne.n	8007cf0 <forward_mp_integer_INT8+0xa8>
 8007dbc:	463c      	mov	r4, r7
 8007dbe:	e7a5      	b.n	8007d0c <forward_mp_integer_INT8+0xc4>
 8007dc0:	eddf 7a27 	vldr	s15, [pc, #156]	; 8007e60 <forward_mp_integer_INT8+0x218>
 8007dc4:	2e00      	cmp	r6, #0
 8007dc6:	f47f af7e 	bne.w	8007cc6 <forward_mp_integer_INT8+0x7e>
 8007dca:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007e60 <forward_mp_integer_INT8+0x218>
 8007dce:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007dd2:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007dd6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007dda:	bb9d      	cbnz	r5, 8007e44 <forward_mp_integer_INT8+0x1fc>
 8007ddc:	462c      	mov	r4, r5
 8007dde:	e79b      	b.n	8007d18 <forward_mp_integer_INT8+0xd0>
 8007de0:	2400      	movs	r4, #0
 8007de2:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007de6:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007dea:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8007e64 <forward_mp_integer_INT8+0x21c>
 8007dee:	4625      	mov	r5, r4
 8007df0:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8007df4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007df6:	9406      	str	r4, [sp, #24]
 8007df8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007dfa:	9405      	str	r4, [sp, #20]
 8007dfc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007dfe:	9404      	str	r4, [sp, #16]
 8007e00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007e02:	9403      	str	r4, [sp, #12]
 8007e04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007e06:	9402      	str	r4, [sp, #8]
 8007e08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007e0a:	e9cd ce07 	strd	ip, lr, [sp, #28]
 8007e0e:	e9cd 8400 	strd	r8, r4, [sp]
 8007e12:	f000 fa6f 	bl	80082f4 <forward_lite_maxpool_is8os8_scalepos>
 8007e16:	b015      	add	sp, #84	; 0x54
 8007e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1c:	2400      	movs	r4, #0
 8007e1e:	e770      	b.n	8007d02 <forward_mp_integer_INT8+0xba>
 8007e20:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007e24:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007e28:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007e64 <forward_mp_integer_INT8+0x21c>
 8007e2c:	4634      	mov	r4, r6
 8007e2e:	4635      	mov	r5, r6
 8007e30:	e7de      	b.n	8007df0 <forward_mp_integer_INT8+0x1a8>
 8007e32:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8007e60 <forward_mp_integer_INT8+0x218>
 8007e36:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007e3a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007e3e:	eef0 7a40 	vmov.f32	s15, s0
 8007e42:	e765      	b.n	8007d10 <forward_mp_integer_INT8+0xc8>
 8007e44:	687c      	ldr	r4, [r7, #4]
 8007e46:	4635      	mov	r5, r6
 8007e48:	f994 4000 	ldrsb.w	r4, [r4]
 8007e4c:	e764      	b.n	8007d18 <forward_mp_integer_INT8+0xd0>
 8007e4e:	463c      	mov	r4, r7
 8007e50:	463d      	mov	r5, r7
 8007e52:	e761      	b.n	8007d18 <forward_mp_integer_INT8+0xd0>
 8007e54:	68d3      	ldr	r3, [r2, #12]
 8007e56:	deff      	udf	#255	; 0xff
 8007e58:	2300      	movs	r3, #0
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	deff      	udf	#255	; 0xff
 8007e5e:	bf00      	nop
 8007e60:	00000000 	.word	0x00000000
 8007e64:	7fc00000 	.word	0x7fc00000

08007e68 <forward_ap_integer_INT8>:
 8007e68:	6983      	ldr	r3, [r0, #24]
 8007e6a:	881a      	ldrh	r2, [r3, #0]
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	d074      	beq.n	8007f5a <forward_ap_integer_INT8+0xf2>
 8007e70:	6859      	ldr	r1, [r3, #4]
 8007e72:	684b      	ldr	r3, [r1, #4]
 8007e74:	b103      	cbz	r3, 8007e78 <forward_ap_integer_INT8+0x10>
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2a01      	cmp	r2, #1
 8007e7a:	f000 80e0 	beq.w	800803e <forward_ap_integer_INT8+0x1d6>
 8007e7e:	690a      	ldr	r2, [r1, #16]
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	f000 80df 	beq.w	8008044 <forward_ap_integer_INT8+0x1dc>
 8007e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	68de      	ldr	r6, [r3, #12]
 8007e8c:	6811      	ldr	r1, [r2, #0]
 8007e8e:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8007e90:	681c      	ldr	r4, [r3, #0]
 8007e92:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8007e96:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 8007e9a:	8932      	ldrh	r2, [r6, #8]
 8007e9c:	89b3      	ldrh	r3, [r6, #12]
 8007e9e:	8b86      	ldrh	r6, [r0, #28]
 8007ea0:	68cd      	ldr	r5, [r1, #12]
 8007ea2:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8007ea6:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8007eaa:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8007eae:	b095      	sub	sp, #84	; 0x54
 8007eb0:	960d      	str	r6, [sp, #52]	; 0x34
 8007eb2:	8c06      	ldrh	r6, [r0, #32]
 8007eb4:	960e      	str	r6, [sp, #56]	; 0x38
 8007eb6:	88be      	ldrh	r6, [r7, #4]
 8007eb8:	960f      	str	r6, [sp, #60]	; 0x3c
 8007eba:	883e      	ldrh	r6, [r7, #0]
 8007ebc:	9610      	str	r6, [sp, #64]	; 0x40
 8007ebe:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8007ec0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8007ec2:	9611      	str	r6, [sp, #68]	; 0x44
 8007ec4:	9012      	str	r0, [sp, #72]	; 0x48
 8007ec6:	680e      	ldr	r6, [r1, #0]
 8007ec8:	2c00      	cmp	r4, #0
 8007eca:	d060      	beq.n	8007f8e <forward_ap_integer_INT8+0x126>
 8007ecc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007ed0:	f1b9 0f00 	cmp.w	r9, #0
 8007ed4:	d043      	beq.n	8007f5e <forward_ap_integer_INT8+0xf6>
 8007ed6:	8865      	ldrh	r5, [r4, #2]
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	d06e      	beq.n	8007fba <forward_ap_integer_INT8+0x152>
 8007edc:	f8d9 1000 	ldr.w	r1, [r9]
 8007ee0:	ed91 0a00 	vldr	s0, [r1]
 8007ee4:	2e00      	cmp	r6, #0
 8007ee6:	d06c      	beq.n	8007fc2 <forward_ap_integer_INT8+0x15a>
 8007ee8:	6877      	ldr	r7, [r6, #4]
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	d03e      	beq.n	8007f6c <forward_ap_integer_INT8+0x104>
 8007eee:	8871      	ldrh	r1, [r6, #2]
 8007ef0:	9113      	str	r1, [sp, #76]	; 0x4c
 8007ef2:	2900      	cmp	r1, #0
 8007ef4:	d053      	beq.n	8007f9e <forward_ap_integer_INT8+0x136>
 8007ef6:	683d      	ldr	r5, [r7, #0]
 8007ef8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007efc:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007f00:	edd5 0a00 	vldr	s1, [r5]
 8007f04:	f1b9 0f00 	cmp.w	r9, #0
 8007f08:	d055      	beq.n	8007fb6 <forward_ap_integer_INT8+0x14e>
 8007f0a:	8864      	ldrh	r4, [r4, #2]
 8007f0c:	2c00      	cmp	r4, #0
 8007f0e:	d039      	beq.n	8007f84 <forward_ap_integer_INT8+0x11c>
 8007f10:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8007f14:	f994 4000 	ldrsb.w	r4, [r4]
 8007f18:	2e00      	cmp	r6, #0
 8007f1a:	d036      	beq.n	8007f8a <forward_ap_integer_INT8+0x122>
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	d034      	beq.n	8007f8a <forward_ap_integer_INT8+0x122>
 8007f20:	8875      	ldrh	r5, [r6, #2]
 8007f22:	9513      	str	r5, [sp, #76]	; 0x4c
 8007f24:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007f26:	b115      	cbz	r5, 8007f2e <forward_ap_integer_INT8+0xc6>
 8007f28:	687d      	ldr	r5, [r7, #4]
 8007f2a:	f995 5000 	ldrsb.w	r5, [r5]
 8007f2e:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8007f32:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007f34:	9406      	str	r4, [sp, #24]
 8007f36:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007f38:	9405      	str	r4, [sp, #20]
 8007f3a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007f3c:	9404      	str	r4, [sp, #16]
 8007f3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007f40:	9403      	str	r4, [sp, #12]
 8007f42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007f44:	9402      	str	r4, [sp, #8]
 8007f46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007f48:	e9cd ce07 	strd	ip, lr, [sp, #28]
 8007f4c:	e9cd 8400 	strd	r8, r4, [sp]
 8007f50:	f003 f8d0 	bl	800b0f4 <st_int8_avepool>
 8007f54:	b015      	add	sp, #84	; 0x54
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	6853      	ldr	r3, [r2, #4]
 8007f5c:	deff      	udf	#255	; 0xff
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d039      	beq.n	8007fd6 <forward_ap_integer_INT8+0x16e>
 8007f62:	6877      	ldr	r7, [r6, #4]
 8007f64:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007f68:	2f00      	cmp	r7, #0
 8007f6a:	d1c0      	bne.n	8007eee <forward_ap_integer_INT8+0x86>
 8007f6c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007f70:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007f74:	f1b9 0f00 	cmp.w	r9, #0
 8007f78:	d05c      	beq.n	8008034 <forward_ap_integer_INT8+0x1cc>
 8007f7a:	8864      	ldrh	r4, [r4, #2]
 8007f7c:	2c00      	cmp	r4, #0
 8007f7e:	d152      	bne.n	8008026 <forward_ap_integer_INT8+0x1be>
 8007f80:	eddf 0a31 	vldr	s1, [pc, #196]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007f84:	2400      	movs	r4, #0
 8007f86:	2f00      	cmp	r7, #0
 8007f88:	d1ca      	bne.n	8007f20 <forward_ap_integer_INT8+0xb8>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	e7cf      	b.n	8007f2e <forward_ap_integer_INT8+0xc6>
 8007f8e:	b316      	cbz	r6, 8007fd6 <forward_ap_integer_INT8+0x16e>
 8007f90:	6877      	ldr	r7, [r6, #4]
 8007f92:	b35f      	cbz	r7, 8007fec <forward_ap_integer_INT8+0x184>
 8007f94:	8871      	ldrh	r1, [r6, #2]
 8007f96:	9113      	str	r1, [sp, #76]	; 0x4c
 8007f98:	bb99      	cbnz	r1, 8008002 <forward_ap_integer_INT8+0x19a>
 8007f9a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007f9e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007fa2:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007fa6:	b194      	cbz	r4, 8007fce <forward_ap_integer_INT8+0x166>
 8007fa8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007fac:	eddf 0a26 	vldr	s1, [pc, #152]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007fb0:	f1b9 0f00 	cmp.w	r9, #0
 8007fb4:	d1a9      	bne.n	8007f0a <forward_ap_integer_INT8+0xa2>
 8007fb6:	464c      	mov	r4, r9
 8007fb8:	e7b4      	b.n	8007f24 <forward_ap_integer_INT8+0xbc>
 8007fba:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	d192      	bne.n	8007ee8 <forward_ap_integer_INT8+0x80>
 8007fc2:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007fc6:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007fca:	bb25      	cbnz	r5, 8008016 <forward_ap_integer_INT8+0x1ae>
 8007fcc:	462c      	mov	r4, r5
 8007fce:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007fd2:	4625      	mov	r5, r4
 8007fd4:	e7ab      	b.n	8007f2e <forward_ap_integer_INT8+0xc6>
 8007fd6:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007fda:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007fde:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007fe2:	4634      	mov	r4, r6
 8007fe4:	eef0 0a40 	vmov.f32	s1, s0
 8007fe8:	4635      	mov	r5, r6
 8007fea:	e7a0      	b.n	8007f2e <forward_ap_integer_INT8+0xc6>
 8007fec:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8007ff0:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007ff4:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007ff8:	463c      	mov	r4, r7
 8007ffa:	eef0 0a40 	vmov.f32	s1, s0
 8007ffe:	463d      	mov	r5, r7
 8008000:	e795      	b.n	8007f2e <forward_ap_integer_INT8+0xc6>
 8008002:	683d      	ldr	r5, [r7, #0]
 8008004:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008008:	f8da 1008 	ldr.w	r1, [sl, #8]
 800800c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8008010:	edd5 0a00 	vldr	s1, [r5]
 8008014:	e788      	b.n	8007f28 <forward_ap_integer_INT8+0xc0>
 8008016:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800801a:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 800801e:	f994 4000 	ldrsb.w	r4, [r4]
 8008022:	4635      	mov	r5, r6
 8008024:	e783      	b.n	8007f2e <forward_ap_integer_INT8+0xc6>
 8008026:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800802a:	eddf 0a07 	vldr	s1, [pc, #28]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 800802e:	f994 4000 	ldrsb.w	r4, [r4]
 8008032:	e7aa      	b.n	8007f8a <forward_ap_integer_INT8+0x122>
 8008034:	eddf 0a04 	vldr	s1, [pc, #16]	; 8008048 <forward_ap_integer_INT8+0x1e0>
 8008038:	464c      	mov	r4, r9
 800803a:	464d      	mov	r5, r9
 800803c:	e777      	b.n	8007f2e <forward_ap_integer_INT8+0xc6>
 800803e:	2300      	movs	r3, #0
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	deff      	udf	#255	; 0xff
 8008044:	68d3      	ldr	r3, [r2, #12]
 8008046:	deff      	udf	#255	; 0xff
 8008048:	00000000 	.word	0x00000000

0800804c <func_dummy>:
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop

08008050 <forward_pw_sssa8_ch>:
 8008050:	6982      	ldr	r2, [r0, #24]
 8008052:	8813      	ldrh	r3, [r2, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 811b 	beq.w	8008290 <forward_pw_sssa8_ch+0x240>
 800805a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805e:	ed2d 8b02 	vpush	{d8}
 8008062:	6855      	ldr	r5, [r2, #4]
 8008064:	6869      	ldr	r1, [r5, #4]
 8008066:	b09b      	sub	sp, #108	; 0x6c
 8008068:	b101      	cbz	r1, 800806c <forward_pw_sssa8_ch+0x1c>
 800806a:	6809      	ldr	r1, [r1, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	f000 8135 	beq.w	80082dc <forward_pw_sssa8_ch+0x28c>
 8008072:	f8d5 b010 	ldr.w	fp, [r5, #16]
 8008076:	f1bb 0f00 	cmp.w	fp, #0
 800807a:	d001      	beq.n	8008080 <forward_pw_sssa8_ch+0x30>
 800807c:	f8db b000 	ldr.w	fp, [fp]
 8008080:	2b02      	cmp	r3, #2
 8008082:	f000 8102 	beq.w	800828a <forward_pw_sssa8_ch+0x23a>
 8008086:	69ea      	ldr	r2, [r5, #28]
 8008088:	2a00      	cmp	r2, #0
 800808a:	f000 8120 	beq.w	80082ce <forward_pw_sssa8_ch+0x27e>
 800808e:	8b2e      	ldrh	r6, [r5, #24]
 8008090:	6814      	ldr	r4, [r2, #0]
 8008092:	2e01      	cmp	r6, #1
 8008094:	f200 80fe 	bhi.w	8008294 <forward_pw_sssa8_ch+0x244>
 8008098:	2600      	movs	r6, #0
 800809a:	2b03      	cmp	r3, #3
 800809c:	f000 8121 	beq.w	80082e2 <forward_pw_sssa8_ch+0x292>
 80080a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 8116 	beq.w	80082d4 <forward_pw_sssa8_ch+0x284>
 80080a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080aa:	681f      	ldr	r7, [r3, #0]
 80080ac:	9518      	str	r5, [sp, #96]	; 0x60
 80080ae:	9710      	str	r7, [sp, #64]	; 0x40
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	f000 8108 	beq.w	80082c6 <forward_pw_sssa8_ch+0x276>
 80080b6:	685f      	ldr	r7, [r3, #4]
 80080b8:	69b3      	ldr	r3, [r6, #24]
 80080ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80080bc:	68fe      	ldr	r6, [r7, #12]
 80080be:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80080c2:	f8d5 e018 	ldr.w	lr, [r5, #24]
 80080c6:	68f5      	ldr	r5, [r6, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	9515      	str	r5, [sp, #84]	; 0x54
 80080cc:	68b5      	ldr	r5, [r6, #8]
 80080ce:	9319      	str	r3, [sp, #100]	; 0x64
 80080d0:	9516      	str	r5, [sp, #88]	; 0x58
 80080d2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80080d6:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80080da:	9314      	str	r3, [sp, #80]	; 0x50
 80080dc:	950d      	str	r5, [sp, #52]	; 0x34
 80080de:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80080e2:	6873      	ldr	r3, [r6, #4]
 80080e4:	9511      	str	r5, [sp, #68]	; 0x44
 80080e6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80080ea:	f8de a008 	ldr.w	sl, [lr, #8]
 80080ee:	ee08 5a10 	vmov	s16, r5
 80080f2:	b29d      	uxth	r5, r3
 80080f4:	950f      	str	r5, [sp, #60]	; 0x3c
 80080f6:	2a00      	cmp	r2, #0
 80080f8:	f000 80d4 	beq.w	80082a4 <forward_pw_sssa8_ch+0x254>
 80080fc:	6892      	ldr	r2, [r2, #8]
 80080fe:	2a00      	cmp	r2, #0
 8008100:	f000 80d0 	beq.w	80082a4 <forward_pw_sssa8_ch+0x254>
 8008104:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8008108:	f1b8 0f00 	cmp.w	r8, #0
 800810c:	bf18      	it	ne
 800810e:	4690      	movne	r8, r2
 8008110:	680d      	ldr	r5, [r1, #0]
 8008112:	683e      	ldr	r6, [r7, #0]
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	2d00      	cmp	r5, #0
 8008118:	f000 80c1 	beq.w	800829e <forward_pw_sssa8_ch+0x24e>
 800811c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008120:	f1bc 0f00 	cmp.w	ip, #0
 8008124:	f000 80bb 	beq.w	800829e <forward_pw_sssa8_ch+0x24e>
 8008128:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 800812c:	f1b9 0f00 	cmp.w	r9, #0
 8008130:	f000 80b5 	beq.w	800829e <forward_pw_sssa8_ch+0x24e>
 8008134:	f8dc c000 	ldr.w	ip, [ip]
 8008138:	ed9c 0a00 	vldr	s0, [ip]
 800813c:	2e00      	cmp	r6, #0
 800813e:	f000 80ab 	beq.w	8008298 <forward_pw_sssa8_ch+0x248>
 8008142:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8008146:	f1bc 0f00 	cmp.w	ip, #0
 800814a:	f000 80a5 	beq.w	8008298 <forward_pw_sssa8_ch+0x248>
 800814e:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8008152:	f1b9 0f00 	cmp.w	r9, #0
 8008156:	f000 809f 	beq.w	8008298 <forward_pw_sssa8_ch+0x248>
 800815a:	f8dc c000 	ldr.w	ip, [ip]
 800815e:	eddc 0a00 	vldr	s1, [ip]
 8008162:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8008166:	69a1      	ldr	r1, [r4, #24]
 8008168:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800816c:	6889      	ldr	r1, [r1, #8]
 800816e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008170:	69b9      	ldr	r1, [r7, #24]
 8008172:	f8dc 9008 	ldr.w	r9, [ip, #8]
 8008176:	6889      	ldr	r1, [r1, #8]
 8008178:	9012      	str	r0, [sp, #72]	; 0x48
 800817a:	910e      	str	r1, [sp, #56]	; 0x38
 800817c:	b112      	cbz	r2, 8008184 <forward_pw_sssa8_ch+0x134>
 800817e:	6852      	ldr	r2, [r2, #4]
 8008180:	b102      	cbz	r2, 8008184 <forward_pw_sssa8_ch+0x134>
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 8008188:	fb00 f101 	mul.w	r1, r0, r1
 800818c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800818e:	b29b      	uxth	r3, r3
 8008190:	fb03 0101 	mla	r1, r3, r1, r0
 8008194:	4589      	cmp	r9, r1
 8008196:	f080 808e 	bcs.w	80082b6 <forward_pw_sssa8_ch+0x266>
 800819a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800819c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800819e:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
 80081a2:	fb01 f404 	mul.w	r4, r1, r4
 80081a6:	fb0c 9404 	mla	r4, ip, r4, r9
 80081aa:	42a0      	cmp	r0, r4
 80081ac:	bf2c      	ite	cs
 80081ae:	2400      	movcs	r4, #0
 80081b0:	2401      	movcc	r4, #1
 80081b2:	b145      	cbz	r5, 80081c6 <forward_pw_sssa8_ch+0x176>
 80081b4:	6869      	ldr	r1, [r5, #4]
 80081b6:	2900      	cmp	r1, #0
 80081b8:	f000 8081 	beq.w	80082be <forward_pw_sssa8_ch+0x26e>
 80081bc:	886d      	ldrh	r5, [r5, #2]
 80081be:	b115      	cbz	r5, 80081c6 <forward_pw_sssa8_ch+0x176>
 80081c0:	6849      	ldr	r1, [r1, #4]
 80081c2:	f991 5000 	ldrsb.w	r5, [r1]
 80081c6:	b13e      	cbz	r6, 80081d8 <forward_pw_sssa8_ch+0x188>
 80081c8:	6871      	ldr	r1, [r6, #4]
 80081ca:	2900      	cmp	r1, #0
 80081cc:	d079      	beq.n	80082c2 <forward_pw_sssa8_ch+0x272>
 80081ce:	8876      	ldrh	r6, [r6, #2]
 80081d0:	b116      	cbz	r6, 80081d8 <forward_pw_sssa8_ch+0x188>
 80081d2:	6849      	ldr	r1, [r1, #4]
 80081d4:	f991 6000 	ldrsb.w	r6, [r1]
 80081d8:	edcd 0a15 	vstr	s1, [sp, #84]	; 0x54
 80081dc:	e9de 0100 	ldrd	r0, r1, [lr]
 80081e0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80081e4:	ed8d 0a14 	vstr	s0, [sp, #80]	; 0x50
 80081e8:	f003 fc5e 	bl	800baa8 <ai_array_get_byte_size>
 80081ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081f0:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 80081f4:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 80081f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081fa:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80081fe:	4453      	add	r3, sl
 8008200:	4610      	mov	r0, r2
 8008202:	4652      	mov	r2, sl
 8008204:	f001 fbb2 	bl	800996c <align_factor_ch>
 8008208:	2c00      	cmp	r4, #0
 800820a:	d156      	bne.n	80082ba <forward_pw_sssa8_ch+0x26a>
 800820c:	2301      	movs	r3, #1
 800820e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8008212:	930d      	str	r3, [sp, #52]	; 0x34
 8008214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008216:	9214      	str	r2, [sp, #80]	; 0x50
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800821e:	f003 fc43 	bl	800baa8 <ai_array_get_byte_size>
 8008222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008224:	9307      	str	r3, [sp, #28]
 8008226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008228:	9306      	str	r3, [sp, #24]
 800822a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800822c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800822e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8008232:	9503      	str	r5, [sp, #12]
 8008234:	e9cd 6304 	strd	r6, r3, [sp, #16]
 8008238:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800823a:	9302      	str	r3, [sp, #8]
 800823c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	2401      	movs	r4, #1
 8008242:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	e9cd 0a09 	strd	r0, sl, [sp, #36]	; 0x24
 800824a:	ee18 3a10 	vmov	r3, s16
 800824e:	9408      	str	r4, [sp, #32]
 8008250:	4648      	mov	r0, r9
 8008252:	f000 fa11 	bl	8008678 <forward_lite_pw_sssa8_ch>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	0a1b      	lsrs	r3, r3, #8
 800825a:	4622      	mov	r2, r4
 800825c:	d008      	beq.n	8008270 <forward_pw_sssa8_ch+0x220>
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008264:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008268:	4298      	cmp	r0, r3
 800826a:	fb01 f202 	mul.w	r2, r1, r2
 800826e:	d1f9      	bne.n	8008264 <forward_pw_sssa8_ch+0x214>
 8008270:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8008274:	ee17 ca90 	vmov	ip, s15
 8008278:	4643      	mov	r3, r8
 800827a:	4639      	mov	r1, r7
 800827c:	4658      	mov	r0, fp
 800827e:	b01b      	add	sp, #108	; 0x6c
 8008280:	ecbd 8b02 	vpop	{d8}
 8008284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008288:	4760      	bx	ip
 800828a:	2300      	movs	r3, #0
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	deff      	udf	#255	; 0xff
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	deff      	udf	#255	; 0xff
 8008294:	6856      	ldr	r6, [r2, #4]
 8008296:	e700      	b.n	800809a <forward_pw_sssa8_ch+0x4a>
 8008298:	eddf 0a14 	vldr	s1, [pc, #80]	; 80082ec <forward_pw_sssa8_ch+0x29c>
 800829c:	e761      	b.n	8008162 <forward_pw_sssa8_ch+0x112>
 800829e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80082ec <forward_pw_sssa8_ch+0x29c>
 80082a2:	e74b      	b.n	800813c <forward_pw_sssa8_ch+0xec>
 80082a4:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80082a8:	f1b8 0f00 	cmp.w	r8, #0
 80082ac:	f43f af30 	beq.w	8008110 <forward_pw_sssa8_ch+0xc0>
 80082b0:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80082b4:	e72c      	b.n	8008110 <forward_pw_sssa8_ch+0xc0>
 80082b6:	2400      	movs	r4, #0
 80082b8:	e77b      	b.n	80081b2 <forward_pw_sssa8_ch+0x162>
 80082ba:	4622      	mov	r2, r4
 80082bc:	e7aa      	b.n	8008214 <forward_pw_sssa8_ch+0x1c4>
 80082be:	460d      	mov	r5, r1
 80082c0:	e781      	b.n	80081c6 <forward_pw_sssa8_ch+0x176>
 80082c2:	460e      	mov	r6, r1
 80082c4:	e788      	b.n	80081d8 <forward_pw_sssa8_ch+0x188>
 80082c6:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <forward_pw_sssa8_ch+0x2a0>)
 80082c8:	9318      	str	r3, [sp, #96]	; 0x60
 80082ca:	465f      	mov	r7, fp
 80082cc:	e6f4      	b.n	80080b8 <forward_pw_sssa8_ch+0x68>
 80082ce:	4614      	mov	r4, r2
 80082d0:	4616      	mov	r6, r2
 80082d2:	e6e2      	b.n	800809a <forward_pw_sssa8_ch+0x4a>
 80082d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80082d6:	b93a      	cbnz	r2, 80082e8 <forward_pw_sssa8_ch+0x298>
 80082d8:	6993      	ldr	r3, [r2, #24]
 80082da:	deff      	udf	#255	; 0xff
 80082dc:	2300      	movs	r3, #0
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	deff      	udf	#255	; 0xff
 80082e2:	2300      	movs	r3, #0
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	deff      	udf	#255	; 0xff
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	deff      	udf	#255	; 0xff
 80082ec:	00000000 	.word	0x00000000
 80082f0:	0800804d 	.word	0x0800804d

080082f4 <forward_lite_maxpool_is8os8_scalepos>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	b095      	sub	sp, #84	; 0x54
 80082fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80082fe:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 8008302:	910d      	str	r1, [sp, #52]	; 0x34
 8008304:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8008308:	910e      	str	r1, [sp, #56]	; 0x38
 800830a:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800830e:	910f      	str	r1, [sp, #60]	; 0x3c
 8008310:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8008314:	9110      	str	r1, [sp, #64]	; 0x40
 8008316:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 800831a:	f99d 009c 	ldrsb.w	r0, [sp, #156]	; 0x9c
 800831e:	930c      	str	r3, [sp, #48]	; 0x30
 8008320:	9111      	str	r1, [sp, #68]	; 0x44
 8008322:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8008326:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800832a:	9112      	str	r1, [sp, #72]	; 0x48
 800832c:	9001      	str	r0, [sp, #4]
 800832e:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 8008332:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	; 0xa0
 8008336:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 800833a:	9206      	str	r2, [sp, #24]
 800833c:	9313      	str	r3, [sp, #76]	; 0x4c
 800833e:	9107      	str	r1, [sp, #28]
 8008340:	9003      	str	r0, [sp, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 80ad 	beq.w	80084a2 <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 8008348:	2900      	cmp	r1, #0
 800834a:	f000 80aa 	beq.w	80084a2 <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 800834e:	f1ba 0f00 	cmp.w	sl, #0
 8008352:	f000 80a6 	beq.w	80084a2 <forward_lite_maxpool_is8os8_scalepos+0x1ae>
 8008356:	2300      	movs	r3, #0
 8008358:	ed9f 6a56 	vldr	s12, [pc, #344]	; 80084b4 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008362:	fb02 fb0a 	mul.w	fp, r2, sl
 8008366:	9904      	ldr	r1, [sp, #16]
 8008368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800836a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800836c:	eddd 7a03 	vldr	s15, [sp, #12]
 8008370:	fb01 f303 	mul.w	r3, r1, r3
 8008374:	1a1a      	subs	r2, r3, r0
 8008376:	1ac3      	subs	r3, r0, r3
 8008378:	980c      	ldr	r0, [sp, #48]	; 0x30
 800837a:	2a00      	cmp	r2, #0
 800837c:	bfd8      	it	le
 800837e:	4699      	movle	r9, r3
 8008380:	4403      	add	r3, r0
 8008382:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008384:	bfc8      	it	gt
 8008386:	f04f 0900 	movgt.w	r9, #0
 800838a:	4298      	cmp	r0, r3
 800838c:	bfa8      	it	ge
 800838e:	4618      	movge	r0, r3
 8008390:	9b06      	ldr	r3, [sp, #24]
 8008392:	444a      	add	r2, r9
 8008394:	fb03 f302 	mul.w	r3, r3, r2
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	9b07      	ldr	r3, [sp, #28]
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	9308      	str	r3, [sp, #32]
 80083a2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80083a6:	2300      	movs	r3, #0
 80083a8:	4684      	mov	ip, r0
 80083aa:	9305      	str	r3, [sp, #20]
 80083ac:	9905      	ldr	r1, [sp, #20]
 80083ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80083b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80083b4:	fb03 f201 	mul.w	r2, r3, r1
 80083b8:	1a13      	subs	r3, r2, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	eba0 0202 	sub.w	r2, r0, r2
 80083c0:	bfd8      	it	le
 80083c2:	4617      	movle	r7, r2
 80083c4:	9806      	ldr	r0, [sp, #24]
 80083c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c8:	441a      	add	r2, r3
 80083ca:	eba0 0303 	sub.w	r3, r0, r3
 80083ce:	bfc8      	it	gt
 80083d0:	2700      	movgt	r7, #0
 80083d2:	429c      	cmp	r4, r3
 80083d4:	bfa8      	it	ge
 80083d6:	461c      	movge	r4, r3
 80083d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083da:	443a      	add	r2, r7
 80083dc:	fb0a 3302 	mla	r3, sl, r2, r3
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	eb01 0803 	add.w	r8, r1, r3
 80083e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ea:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80083ee:	fb0a 3808 	mla	r8, sl, r8, r3
 80083f2:	f04f 0e00 	mov.w	lr, #0
 80083f6:	45e1      	cmp	r9, ip
 80083f8:	da59      	bge.n	80084ae <forward_lite_maxpool_is8os8_scalepos+0x1ba>
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	464d      	mov	r5, r9
 80083fe:	eb03 060e 	add.w	r6, r3, lr
 8008402:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8008406:	42a7      	cmp	r7, r4
 8008408:	da0a      	bge.n	8008420 <forward_lite_maxpool_is8os8_scalepos+0x12c>
 800840a:	4632      	mov	r2, r6
 800840c:	463b      	mov	r3, r7
 800840e:	f992 0000 	ldrsb.w	r0, [r2]
 8008412:	3301      	adds	r3, #1
 8008414:	4281      	cmp	r1, r0
 8008416:	bfb8      	it	lt
 8008418:	4601      	movlt	r1, r0
 800841a:	429c      	cmp	r4, r3
 800841c:	4452      	add	r2, sl
 800841e:	d1f6      	bne.n	800840e <forward_lite_maxpool_is8os8_scalepos+0x11a>
 8008420:	3501      	adds	r5, #1
 8008422:	45ac      	cmp	ip, r5
 8008424:	445e      	add	r6, fp
 8008426:	d1ee      	bne.n	8008406 <forward_lite_maxpool_is8os8_scalepos+0x112>
 8008428:	eeb4 0a66 	vcmp.f32	s0, s13
 800842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008430:	d103      	bne.n	800843a <forward_lite_maxpool_is8os8_scalepos+0x146>
 8008432:	9b01      	ldr	r3, [sp, #4]
 8008434:	9a03      	ldr	r2, [sp, #12]
 8008436:	4293      	cmp	r3, r2
 8008438:	d036      	beq.n	80084a8 <forward_lite_maxpool_is8os8_scalepos+0x1b4>
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	1ac9      	subs	r1, r1, r3
 800843e:	ee07 1a90 	vmov	s15, r1
 8008442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008446:	eeb0 7a65 	vmov.f32	s14, s11
 800844a:	eea7 7a80 	vfma.f32	s14, s15, s0
 800844e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008456:	bfb4      	ite	lt
 8008458:	eef0 7a46 	vmovlt.f32	s15, s12
 800845c:	eef0 7a45 	vmovge.f32	s15, s10
 8008460:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008468:	ee17 3a90 	vmov	r3, s15
 800846c:	f303 0307 	ssat	r3, #8, r3
 8008470:	f888 3000 	strb.w	r3, [r8]
 8008474:	f10e 0e01 	add.w	lr, lr, #1
 8008478:	fa1f f38e 	uxth.w	r3, lr
 800847c:	459a      	cmp	sl, r3
 800847e:	f108 0801 	add.w	r8, r8, #1
 8008482:	d8b8      	bhi.n	80083f6 <forward_lite_maxpool_is8os8_scalepos+0x102>
 8008484:	9b05      	ldr	r3, [sp, #20]
 8008486:	9a07      	ldr	r2, [sp, #28]
 8008488:	3301      	adds	r3, #1
 800848a:	b29b      	uxth	r3, r3
 800848c:	429a      	cmp	r2, r3
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	d88c      	bhi.n	80083ac <forward_lite_maxpool_is8os8_scalepos+0xb8>
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008496:	3301      	adds	r3, #1
 8008498:	b29b      	uxth	r3, r3
 800849a:	429a      	cmp	r2, r3
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	f63f af62 	bhi.w	8008366 <forward_lite_maxpool_is8os8_scalepos+0x72>
 80084a2:	b015      	add	sp, #84	; 0x54
 80084a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a8:	f888 1000 	strb.w	r1, [r8]
 80084ac:	e7e2      	b.n	8008474 <forward_lite_maxpool_is8os8_scalepos+0x180>
 80084ae:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80084b2:	e7b9      	b.n	8008428 <forward_lite_maxpool_is8os8_scalepos+0x134>
 80084b4:	befffffc 	.word	0xbefffffc

080084b8 <forward_lite_maxpool_is8os8_scaleneg>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	b095      	sub	sp, #84	; 0x54
 80084be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80084c2:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 80084c6:	910d      	str	r1, [sp, #52]	; 0x34
 80084c8:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 80084cc:	910e      	str	r1, [sp, #56]	; 0x38
 80084ce:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 80084d2:	910f      	str	r1, [sp, #60]	; 0x3c
 80084d4:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 80084d8:	9110      	str	r1, [sp, #64]	; 0x40
 80084da:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 80084de:	f99d 009c 	ldrsb.w	r0, [sp, #156]	; 0x9c
 80084e2:	930c      	str	r3, [sp, #48]	; 0x30
 80084e4:	9111      	str	r1, [sp, #68]	; 0x44
 80084e6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80084ea:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 80084ee:	9112      	str	r1, [sp, #72]	; 0x48
 80084f0:	9001      	str	r0, [sp, #4]
 80084f2:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 80084f6:	f99d 00a0 	ldrsb.w	r0, [sp, #160]	; 0xa0
 80084fa:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 80084fe:	9206      	str	r2, [sp, #24]
 8008500:	9313      	str	r3, [sp, #76]	; 0x4c
 8008502:	9107      	str	r1, [sp, #28]
 8008504:	9003      	str	r0, [sp, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80ac 	beq.w	8008664 <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 800850c:	2900      	cmp	r1, #0
 800850e:	f000 80a9 	beq.w	8008664 <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 8008512:	f1ba 0f00 	cmp.w	sl, #0
 8008516:	f000 80a5 	beq.w	8008664 <forward_lite_maxpool_is8os8_scaleneg+0x1ac>
 800851a:	2300      	movs	r3, #0
 800851c:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8008674 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008526:	fb02 fb0a 	mul.w	fp, r2, sl
 800852a:	9904      	ldr	r1, [sp, #16]
 800852c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800852e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008530:	eddd 7a03 	vldr	s15, [sp, #12]
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	1a1a      	subs	r2, r3, r0
 800853a:	1ac3      	subs	r3, r0, r3
 800853c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800853e:	2a00      	cmp	r2, #0
 8008540:	bfd8      	it	le
 8008542:	4699      	movle	r9, r3
 8008544:	4403      	add	r3, r0
 8008546:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008548:	bfc8      	it	gt
 800854a:	f04f 0900 	movgt.w	r9, #0
 800854e:	4298      	cmp	r0, r3
 8008550:	bfa8      	it	ge
 8008552:	4618      	movge	r0, r3
 8008554:	9b06      	ldr	r3, [sp, #24]
 8008556:	444a      	add	r2, r9
 8008558:	fb03 f302 	mul.w	r3, r3, r2
 800855c:	9309      	str	r3, [sp, #36]	; 0x24
 800855e:	9b07      	ldr	r3, [sp, #28]
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	9308      	str	r3, [sp, #32]
 8008566:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800856a:	2300      	movs	r3, #0
 800856c:	4684      	mov	ip, r0
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	9905      	ldr	r1, [sp, #20]
 8008572:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008574:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008576:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008578:	fb03 f201 	mul.w	r2, r3, r1
 800857c:	1a13      	subs	r3, r2, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	eba0 0202 	sub.w	r2, r0, r2
 8008584:	bfd8      	it	le
 8008586:	4617      	movle	r7, r2
 8008588:	9806      	ldr	r0, [sp, #24]
 800858a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800858c:	441a      	add	r2, r3
 800858e:	eba0 0303 	sub.w	r3, r0, r3
 8008592:	bfc8      	it	gt
 8008594:	2700      	movgt	r7, #0
 8008596:	429c      	cmp	r4, r3
 8008598:	bfa8      	it	ge
 800859a:	461c      	movge	r4, r3
 800859c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859e:	443a      	add	r2, r7
 80085a0:	fb0a 3302 	mla	r3, sl, r2, r3
 80085a4:	9302      	str	r3, [sp, #8]
 80085a6:	9b08      	ldr	r3, [sp, #32]
 80085a8:	eb01 0803 	add.w	r8, r1, r3
 80085ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ae:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80085b2:	fb0a 3808 	mla	r8, sl, r8, r3
 80085b6:	f04f 0e00 	mov.w	lr, #0
 80085ba:	45e1      	cmp	r9, ip
 80085bc:	da58      	bge.n	8008670 <forward_lite_maxpool_is8os8_scaleneg+0x1b8>
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	464d      	mov	r5, r9
 80085c2:	eb03 060e 	add.w	r6, r3, lr
 80085c6:	217f      	movs	r1, #127	; 0x7f
 80085c8:	42a7      	cmp	r7, r4
 80085ca:	da0a      	bge.n	80085e2 <forward_lite_maxpool_is8os8_scaleneg+0x12a>
 80085cc:	4632      	mov	r2, r6
 80085ce:	463b      	mov	r3, r7
 80085d0:	f992 0000 	ldrsb.w	r0, [r2]
 80085d4:	3301      	adds	r3, #1
 80085d6:	4281      	cmp	r1, r0
 80085d8:	bfa8      	it	ge
 80085da:	4601      	movge	r1, r0
 80085dc:	429c      	cmp	r4, r3
 80085de:	4452      	add	r2, sl
 80085e0:	d1f6      	bne.n	80085d0 <forward_lite_maxpool_is8os8_scaleneg+0x118>
 80085e2:	3501      	adds	r5, #1
 80085e4:	45ac      	cmp	ip, r5
 80085e6:	445e      	add	r6, fp
 80085e8:	d1ee      	bne.n	80085c8 <forward_lite_maxpool_is8os8_scaleneg+0x110>
 80085ea:	eeb4 0a66 	vcmp.f32	s0, s13
 80085ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f2:	d103      	bne.n	80085fc <forward_lite_maxpool_is8os8_scaleneg+0x144>
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	9a03      	ldr	r2, [sp, #12]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d036      	beq.n	800866a <forward_lite_maxpool_is8os8_scaleneg+0x1b2>
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	1ac9      	subs	r1, r1, r3
 8008600:	ee07 1a90 	vmov	s15, r1
 8008604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008608:	eeb0 7a65 	vmov.f32	s14, s11
 800860c:	eea7 7a80 	vfma.f32	s14, s15, s0
 8008610:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008618:	bfb4      	ite	lt
 800861a:	eef0 7a46 	vmovlt.f32	s15, s12
 800861e:	eef0 7a45 	vmovge.f32	s15, s10
 8008622:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800862a:	ee17 3a90 	vmov	r3, s15
 800862e:	f303 0307 	ssat	r3, #8, r3
 8008632:	f888 3000 	strb.w	r3, [r8]
 8008636:	f10e 0e01 	add.w	lr, lr, #1
 800863a:	fa1f f38e 	uxth.w	r3, lr
 800863e:	459a      	cmp	sl, r3
 8008640:	f108 0801 	add.w	r8, r8, #1
 8008644:	d8b9      	bhi.n	80085ba <forward_lite_maxpool_is8os8_scaleneg+0x102>
 8008646:	9b05      	ldr	r3, [sp, #20]
 8008648:	9a07      	ldr	r2, [sp, #28]
 800864a:	3301      	adds	r3, #1
 800864c:	b29b      	uxth	r3, r3
 800864e:	429a      	cmp	r2, r3
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	d88d      	bhi.n	8008570 <forward_lite_maxpool_is8os8_scaleneg+0xb8>
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008658:	3301      	adds	r3, #1
 800865a:	b29b      	uxth	r3, r3
 800865c:	429a      	cmp	r2, r3
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	f63f af63 	bhi.w	800852a <forward_lite_maxpool_is8os8_scaleneg+0x72>
 8008664:	b015      	add	sp, #84	; 0x54
 8008666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866a:	f888 1000 	strb.w	r1, [r8]
 800866e:	e7e2      	b.n	8008636 <forward_lite_maxpool_is8os8_scaleneg+0x17e>
 8008670:	217f      	movs	r1, #127	; 0x7f
 8008672:	e7ba      	b.n	80085ea <forward_lite_maxpool_is8os8_scaleneg+0x132>
 8008674:	befffffc 	.word	0xbefffffc

08008678 <forward_lite_pw_sssa8_ch>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	b097      	sub	sp, #92	; 0x5c
 800867e:	4604      	mov	r4, r0
 8008680:	f8bd b084 	ldrh.w	fp, [sp, #132]	; 0x84
 8008684:	930d      	str	r3, [sp, #52]	; 0x34
 8008686:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008688:	910c      	str	r1, [sp, #48]	; 0x30
 800868a:	eba3 014b 	sub.w	r1, r3, fp, lsl #1
 800868e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008690:	9215      	str	r2, [sp, #84]	; 0x54
 8008692:	4419      	add	r1, r3
 8008694:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8008698:	9313      	str	r3, [sp, #76]	; 0x4c
 800869a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800869e:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a0:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 80086a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80086a6:	9314      	str	r3, [sp, #80]	; 0x50
 80086a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80086aa:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80086ae:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 80086b2:	f99d 7090 	ldrsb.w	r7, [sp, #144]	; 0x90
 80086b6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80086b8:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80086bc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80086c0:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
 80086c4:	9310      	str	r3, [sp, #64]	; 0x40
 80086c6:	9211      	str	r2, [sp, #68]	; 0x44
 80086c8:	f1bb 0f00 	cmp.w	fp, #0
 80086cc:	f000 8088 	beq.w	80087e0 <forward_lite_pw_sssa8_ch+0x168>
 80086d0:	1d18      	adds	r0, r3, #4
 80086d2:	eb01 0e0a 	add.w	lr, r1, sl
 80086d6:	f04f 0c01 	mov.w	ip, #1
 80086da:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80086de:	1e5a      	subs	r2, r3, #1
 80086e0:	b292      	uxth	r2, r2
 80086e2:	fa0c f603 	lsl.w	r6, ip, r3
 80086e6:	2a14      	cmp	r2, #20
 80086e8:	fa07 f303 	lsl.w	r3, r7, r3
 80086ec:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 80086f0:	d857      	bhi.n	80087a2 <forward_lite_pw_sssa8_ch+0x12a>
 80086f2:	458e      	cmp	lr, r1
 80086f4:	f840 3c04 	str.w	r3, [r0, #-4]
 80086f8:	f100 0004 	add.w	r0, r0, #4
 80086fc:	d1ed      	bne.n	80086da <forward_lite_pw_sssa8_ch+0x62>
 80086fe:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008702:	1899      	adds	r1, r3, r2
 8008704:	eba1 030a 	sub.w	r3, r1, sl
 8008708:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800870a:	9312      	str	r3, [sp, #72]	; 0x48
 800870c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800870e:	fb02 f303 	mul.w	r3, r2, r3
 8008712:	930e      	str	r3, [sp, #56]	; 0x38
 8008714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008716:	2b01      	cmp	r3, #1
 8008718:	d04c      	beq.n	80087b4 <forward_lite_pw_sssa8_ch+0x13c>
 800871a:	2300      	movs	r3, #0
 800871c:	9314      	str	r3, [sp, #80]	; 0x50
 800871e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008720:	07db      	lsls	r3, r3, #31
 8008722:	d545      	bpl.n	80087b0 <forward_lite_pw_sssa8_ch+0x138>
 8008724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008726:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8008728:	441f      	add	r7, r3
 800872a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800872c:	3702      	adds	r7, #2
 800872e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8008732:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d031      	beq.n	800879c <forward_lite_pw_sssa8_ch+0x124>
 8008738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800873c:	fb0b f003 	mul.w	r0, fp, r3
 8008740:	4649      	mov	r1, r9
 8008742:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8008746:	fb02 fa03 	mul.w	sl, r2, r3
 800874a:	2600      	movs	r6, #0
 800874c:	4642      	mov	r2, r8
 800874e:	46d8      	mov	r8, fp
 8008750:	46bb      	mov	fp, r7
 8008752:	4607      	mov	r7, r0
 8008754:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008756:	930b      	str	r3, [sp, #44]	; 0x2c
 8008758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875a:	930a      	str	r3, [sp, #40]	; 0x28
 800875c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800875e:	9309      	str	r3, [sp, #36]	; 0x24
 8008760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008762:	9308      	str	r3, [sp, #32]
 8008764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008766:	9307      	str	r3, [sp, #28]
 8008768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800876a:	9306      	str	r3, [sp, #24]
 800876c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800876e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008772:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8008776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	4620      	mov	r0, r4
 8008784:	462b      	mov	r3, r5
 8008786:	3601      	adds	r6, #1
 8008788:	9222      	str	r2, [sp, #136]	; 0x88
 800878a:	9120      	str	r1, [sp, #128]	; 0x80
 800878c:	f001 fdfe 	bl	800a38c <st_sssa8_ch_nn_mat_mult_nt_t>
 8008790:	45b1      	cmp	r9, r6
 8008792:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008794:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008796:	443d      	add	r5, r7
 8008798:	4454      	add	r4, sl
 800879a:	d1db      	bne.n	8008754 <forward_lite_pw_sssa8_ch+0xdc>
 800879c:	b017      	add	sp, #92	; 0x5c
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	458e      	cmp	lr, r1
 80087a4:	f840 7c04 	str.w	r7, [r0, #-4]
 80087a8:	f100 0004 	add.w	r0, r0, #4
 80087ac:	d195      	bne.n	80086da <forward_lite_pw_sssa8_ch+0x62>
 80087ae:	e7a6      	b.n	80086fe <forward_lite_pw_sssa8_ch+0x86>
 80087b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80087b2:	e7be      	b.n	8008732 <forward_lite_pw_sssa8_ch+0xba>
 80087b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80087b6:	f06f 0309 	mvn.w	r3, #9
 80087ba:	fb03 220b 	mla	r2, r3, fp, r2
 80087be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c0:	fb0b f303 	mul.w	r3, fp, r3
 80087c4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80087c8:	dba7      	blt.n	800871a <forward_lite_pw_sssa8_ch+0xa2>
 80087ca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80087cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087d0:	9601      	str	r6, [sp, #4]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	4659      	mov	r1, fp
 80087d6:	4648      	mov	r0, r9
 80087d8:	f001 fd98 	bl	800a30c <st_sssa8_ch_fullW_prefetch>
 80087dc:	9614      	str	r6, [sp, #80]	; 0x50
 80087de:	e79e      	b.n	800871e <forward_lite_pw_sssa8_ch+0xa6>
 80087e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80087e2:	9310      	str	r3, [sp, #64]	; 0x40
 80087e4:	e78e      	b.n	8008704 <forward_lite_pw_sssa8_ch+0x8c>
 80087e6:	bf00      	nop

080087e8 <forward_lite_nl_softmax_is8os8>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	188a      	adds	r2, r1, r2
 80087ee:	b09b      	sub	sp, #108	; 0x6c
 80087f0:	4291      	cmp	r1, r2
 80087f2:	9102      	str	r1, [sp, #8]
 80087f4:	9218      	str	r2, [sp, #96]	; 0x60
 80087f6:	9015      	str	r0, [sp, #84]	; 0x54
 80087f8:	9303      	str	r3, [sp, #12]
 80087fa:	f080 82fe 	bcs.w	8008dfa <forward_lite_nl_softmax_is8os8+0x612>
 80087fe:	461a      	mov	r2, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	18cb      	adds	r3, r1, r3
 8008804:	9316      	str	r3, [sp, #88]	; 0x58
 8008806:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008808:	3b04      	subs	r3, #4
 800880a:	9317      	str	r3, [sp, #92]	; 0x5c
 800880c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008810:	9319      	str	r3, [sp, #100]	; 0x64
 8008812:	9a03      	ldr	r2, [sp, #12]
 8008814:	9b02      	ldr	r3, [sp, #8]
 8008816:	2a01      	cmp	r2, #1
 8008818:	f993 b000 	ldrsb.w	fp, [r3]
 800881c:	f240 8336 	bls.w	8008e8c <forward_lite_nl_softmax_is8os8+0x6a4>
 8008820:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008822:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 8008826:	4593      	cmp	fp, r2
 8008828:	bfb8      	it	lt
 800882a:	4693      	movlt	fp, r2
 800882c:	428b      	cmp	r3, r1
 800882e:	d1f8      	bne.n	8008822 <forward_lite_nl_softmax_is8os8+0x3a>
 8008830:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008832:	445b      	add	r3, fp
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	f103 39ff 	add.w	r9, r3, #4294967295
 800883c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	2300      	movs	r3, #0
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008846:	0fdb      	lsrs	r3, r3, #31
 8008848:	e9cd 3b13 	strd	r3, fp, [sp, #76]	; 0x4c
 800884c:	e168      	b.n	8008b20 <forward_lite_nl_softmax_is8os8+0x338>
 800884e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008850:	48b9      	ldr	r0, [pc, #740]	; (8008b38 <forward_lite_nl_softmax_is8os8+0x350>)
 8008852:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008858:	4093      	lsls	r3, r2
 800885a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800885c:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 8008860:	bf06      	itte	eq
 8008862:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 8008866:	2200      	moveq	r2, #0
 8008868:	f04f 32ff 	movne.w	r2, #4294967295
 800886c:	fbc1 0203 	smlal	r0, r2, r1, r3
 8008870:	2a00      	cmp	r2, #0
 8008872:	da04      	bge.n	800887e <forward_lite_nl_softmax_is8os8+0x96>
 8008874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008878:	1840      	adds	r0, r0, r1
 800887a:	f142 0200 	adc.w	r2, r2, #0
 800887e:	0fc0      	lsrs	r0, r0, #31
 8008880:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 8008884:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008886:	429a      	cmp	r2, r3
 8008888:	f000 8168 	beq.w	8008b5c <forward_lite_nl_softmax_is8os8+0x374>
 800888c:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8008890:	0169      	lsls	r1, r5, #5
 8008892:	1a2d      	subs	r5, r5, r0
 8008894:	fab0 f080 	clz	r0, r0
 8008898:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 800889c:	0940      	lsrs	r0, r0, #5
 800889e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088a2:	f04f 0a00 	mov.w	sl, #0
 80088a6:	fbc2 3a02 	smlal	r3, sl, r2, r2
 80088aa:	1e41      	subs	r1, r0, #1
 80088ac:	9200      	str	r2, [sp, #0]
 80088ae:	f3c5 7280 	ubfx	r2, r5, #30, #1
 80088b2:	9111      	str	r1, [sp, #68]	; 0x44
 80088b4:	f1ba 0f00 	cmp.w	sl, #0
 80088b8:	f102 31ff 	add.w	r1, r2, #4294967295
 80088bc:	f1c2 0200 	rsb	r2, r2, #0
 80088c0:	9110      	str	r1, [sp, #64]	; 0x40
 80088c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80088c4:	da05      	bge.n	80088d2 <forward_lite_nl_softmax_is8os8+0xea>
 80088c6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80088ca:	eb13 030e 	adds.w	r3, r3, lr
 80088ce:	f14a 0a00 	adc.w	sl, sl, #0
 80088d2:	0fdb      	lsrs	r3, r3, #31
 80088d4:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
 80088d8:	fba3 2403 	umull	r2, r4, r3, r3
 80088dc:	ea4f 7aea 	mov.w	sl, sl, asr #31
 80088e0:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 80088e4:	fb03 f60a 	mul.w	r6, r3, sl
 80088e8:	eb44 0446 	adc.w	r4, r4, r6, lsl #1
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	930e      	str	r3, [sp, #56]	; 0x38
 80088f0:	da04      	bge.n	80088fc <forward_lite_nl_softmax_is8os8+0x114>
 80088f2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80088f6:	1992      	adds	r2, r2, r6
 80088f8:	f144 0400 	adc.w	r4, r4, #0
 80088fc:	4240      	negs	r0, r0
 80088fe:	0fd2      	lsrs	r2, r2, #31
 8008900:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008904:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8008908:	9c00      	ldr	r4, [sp, #0]
 800890a:	910c      	str	r1, [sp, #48]	; 0x30
 800890c:	f002 0103 	and.w	r1, r2, #3
 8008910:	910d      	str	r1, [sp, #52]	; 0x34
 8008912:	9900      	ldr	r1, [sp, #0]
 8008914:	17e0      	asrs	r0, r4, #31
 8008916:	fb04 fa0a 	mul.w	sl, r4, sl
 800891a:	fb03 aa00 	mla	sl, r3, r0, sl
 800891e:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 8008922:	fba1 1303 	umull	r1, r3, r1, r3
 8008926:	9112      	str	r1, [sp, #72]	; 0x48
 8008928:	9900      	ldr	r1, [sp, #0]
 800892a:	f3c5 6c80 	ubfx	ip, r5, #26, #1
 800892e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008932:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008936:	f3c5 7740 	ubfx	r7, r5, #29, #1
 800893a:	910b      	str	r1, [sp, #44]	; 0x2c
 800893c:	f1cc 0100 	rsb	r1, ip, #0
 8008940:	f3c5 66c0 	ubfx	r6, r5, #27, #1
 8008944:	9109      	str	r1, [sp, #36]	; 0x24
 8008946:	1e79      	subs	r1, r7, #1
 8008948:	910a      	str	r1, [sp, #40]	; 0x28
 800894a:	1e71      	subs	r1, r6, #1
 800894c:	f3c5 6400 	ubfx	r4, r5, #24, #1
 8008950:	f3c5 6040 	ubfx	r0, r5, #25, #1
 8008954:	1092      	asrs	r2, r2, #2
 8008956:	f3c5 7500 	ubfx	r5, r5, #28, #1
 800895a:	9108      	str	r1, [sp, #32]
 800895c:	4271      	negs	r1, r6
 800895e:	9107      	str	r1, [sp, #28]
 8008960:	2a00      	cmp	r2, #0
 8008962:	f1c5 0100 	rsb	r1, r5, #0
 8008966:	4453      	add	r3, sl
 8008968:	f104 3cff 	add.w	ip, r4, #4294967295
 800896c:	f1c7 0a00 	rsb	sl, r7, #0
 8008970:	f1c4 0400 	rsb	r4, r4, #0
 8008974:	f100 37ff 	add.w	r7, r0, #4294967295
 8008978:	f105 36ff 	add.w	r6, r5, #4294967295
 800897c:	f1c0 0000 	rsb	r0, r0, #0
 8008980:	9106      	str	r1, [sp, #24]
 8008982:	f2c0 80d6 	blt.w	8008b32 <forward_lite_nl_softmax_is8os8+0x34a>
 8008986:	2501      	movs	r5, #1
 8008988:	990d      	ldr	r1, [sp, #52]	; 0x34
 800898a:	428d      	cmp	r5, r1
 800898c:	bfb8      	it	lt
 800898e:	3201      	addlt	r2, #1
 8008990:	4d69      	ldr	r5, [pc, #420]	; (8008b38 <forward_lite_nl_softmax_is8os8+0x350>)
 8008992:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008994:	45c6      	cmp	lr, r8
 8008996:	bf06      	itte	eq
 8008998:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 800899c:	f04f 0800 	moveq.w	r8, #0
 80089a0:	f04f 38ff 	movne.w	r8, #4294967295
 80089a4:	186d      	adds	r5, r5, r1
 80089a6:	eb43 0308 	adc.w	r3, r3, r8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da05      	bge.n	80089ba <forward_lite_nl_softmax_is8os8+0x1d2>
 80089ae:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80089b2:	eb15 050e 	adds.w	r5, r5, lr
 80089b6:	f143 0300 	adc.w	r3, r3, #0
 80089ba:	0fed      	lsrs	r5, r5, #31
 80089bc:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 80089c0:	442a      	add	r2, r5
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	4b5c      	ldr	r3, [pc, #368]	; (8008b38 <forward_lite_nl_softmax_is8os8+0x350>)
 80089c6:	495d      	ldr	r1, [pc, #372]	; (8008b3c <forward_lite_nl_softmax_is8os8+0x354>)
 80089c8:	bfa6      	itte	ge
 80089ca:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 80089ce:	2500      	movge	r5, #0
 80089d0:	f04f 35ff 	movlt.w	r5, #4294967295
 80089d4:	fbc2 3501 	smlal	r3, r5, r2, r1
 80089d8:	2d00      	cmp	r5, #0
 80089da:	da04      	bge.n	80089e6 <forward_lite_nl_softmax_is8os8+0x1fe>
 80089dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80089e0:	189b      	adds	r3, r3, r2
 80089e2:	f145 0500 	adc.w	r5, r5, #0
 80089e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089e8:	0fdb      	lsrs	r3, r3, #31
 80089ea:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 80089ee:	441a      	add	r2, r3
 80089f0:	4613      	mov	r3, r2
 80089f2:	1052      	asrs	r2, r2, #1
 80089f4:	d402      	bmi.n	80089fc <forward_lite_nl_softmax_is8os8+0x214>
 80089f6:	07dd      	lsls	r5, r3, #31
 80089f8:	bf48      	it	mi
 80089fa:	3201      	addmi	r2, #1
 80089fc:	9900      	ldr	r1, [sp, #0]
 80089fe:	4d50      	ldr	r5, [pc, #320]	; (8008b40 <forward_lite_nl_softmax_is8os8+0x358>)
 8008a00:	4411      	add	r1, r2
 8008a02:	2900      	cmp	r1, #0
 8008a04:	4a4c      	ldr	r2, [pc, #304]	; (8008b38 <forward_lite_nl_softmax_is8os8+0x350>)
 8008a06:	bfa6      	itte	ge
 8008a08:	2300      	movge	r3, #0
 8008a0a:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8008a0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a12:	fbc1 2305 	smlal	r2, r3, r1, r5
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da04      	bge.n	8008a24 <forward_lite_nl_softmax_is8os8+0x23c>
 8008a1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a1e:	1852      	adds	r2, r2, r1
 8008a20:	f143 0300 	adc.w	r3, r3, #0
 8008a24:	0fd2      	lsrs	r2, r2, #31
 8008a26:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8008a2a:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 8008a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a32:	2100      	movs	r1, #0
 8008a34:	4d43      	ldr	r5, [pc, #268]	; (8008b44 <forward_lite_nl_softmax_is8os8+0x35c>)
 8008a36:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 8008a3a:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8008a3e:	4698      	mov	r8, r3
 8008a40:	468e      	mov	lr, r1
 8008a42:	fbc2 8e05 	smlal	r8, lr, r2, r5
 8008a46:	4645      	mov	r5, r8
 8008a48:	0fed      	lsrs	r5, r5, #31
 8008a4a:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 8008a4e:	4025      	ands	r5, r4
 8008a50:	ea02 0c0c 	and.w	ip, r2, ip
 8008a54:	ea8c 0c05 	eor.w	ip, ip, r5
 8008a58:	4d3b      	ldr	r5, [pc, #236]	; (8008b48 <forward_lite_nl_softmax_is8os8+0x360>)
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	fbcc 2405 	smlal	r2, r4, ip, r5
 8008a62:	0fd2      	lsrs	r2, r2, #31
 8008a64:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008a68:	4002      	ands	r2, r0
 8008a6a:	4c38      	ldr	r4, [pc, #224]	; (8008b4c <forward_lite_nl_softmax_is8os8+0x364>)
 8008a6c:	ea0c 0707 	and.w	r7, ip, r7
 8008a70:	4057      	eors	r7, r2
 8008a72:	469c      	mov	ip, r3
 8008a74:	4608      	mov	r0, r1
 8008a76:	fbc7 c004 	smlal	ip, r0, r7, r4
 8008a7a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8008a7e:	ea4c 0c40 	orr.w	ip, ip, r0, lsl #1
 8008a82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a86:	9c08      	ldr	r4, [sp, #32]
 8008a88:	403a      	ands	r2, r7
 8008a8a:	ea00 0c0c 	and.w	ip, r0, ip
 8008a8e:	4f30      	ldr	r7, [pc, #192]	; (8008b50 <forward_lite_nl_softmax_is8os8+0x368>)
 8008a90:	ea82 020c 	eor.w	r2, r2, ip
 8008a94:	4618      	mov	r0, r3
 8008a96:	460d      	mov	r5, r1
 8008a98:	fbc2 0507 	smlal	r0, r5, r2, r7
 8008a9c:	4014      	ands	r4, r2
 8008a9e:	0fc0      	lsrs	r0, r0, #31
 8008aa0:	9a07      	ldr	r2, [sp, #28]
 8008aa2:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8008aa6:	4002      	ands	r2, r0
 8008aa8:	482a      	ldr	r0, [pc, #168]	; (8008b54 <forward_lite_nl_softmax_is8os8+0x36c>)
 8008aaa:	4054      	eors	r4, r2
 8008aac:	461d      	mov	r5, r3
 8008aae:	460a      	mov	r2, r1
 8008ab0:	fbc4 5200 	smlal	r5, r2, r4, r0
 8008ab4:	0fed      	lsrs	r5, r5, #31
 8008ab6:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 8008aba:	9a06      	ldr	r2, [sp, #24]
 8008abc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008abe:	402a      	ands	r2, r5
 8008ac0:	4026      	ands	r6, r4
 8008ac2:	4c25      	ldr	r4, [pc, #148]	; (8008b58 <forward_lite_nl_softmax_is8os8+0x370>)
 8008ac4:	4056      	eors	r6, r2
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	461a      	mov	r2, r3
 8008aca:	fbc6 2504 	smlal	r2, r5, r6, r4
 8008ace:	0fd2      	lsrs	r2, r2, #31
 8008ad0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8008ad4:	ea0a 0202 	and.w	r2, sl, r2
 8008ad8:	4030      	ands	r0, r6
 8008ada:	4050      	eors	r0, r2
 8008adc:	22f2      	movs	r2, #242	; 0xf2
 8008ade:	fbc0 3102 	smlal	r3, r1, r0, r2
 8008ae2:	0fdb      	lsrs	r3, r3, #31
 8008ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ae6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008ae8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008aec:	401a      	ands	r2, r3
 8008aee:	4613      	mov	r3, r2
 8008af0:	4004      	ands	r4, r0
 8008af2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008af4:	4063      	eors	r3, r4
 8008af6:	4013      	ands	r3, r2
 8008af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008afa:	4053      	eors	r3, r2
 8008afc:	131a      	asrs	r2, r3, #12
 8008afe:	0519      	lsls	r1, r3, #20
 8008b00:	9904      	ldr	r1, [sp, #16]
 8008b02:	bf48      	it	mi
 8008b04:	3201      	addmi	r2, #1
 8008b06:	4411      	add	r1, r2
 8008b08:	9104      	str	r1, [sp, #16]
 8008b0a:	9a01      	ldr	r2, [sp, #4]
 8008b0c:	f842 3f04 	str.w	r3, [r2, #4]!
 8008b10:	9201      	str	r2, [sp, #4]
 8008b12:	9a02      	ldr	r2, [sp, #8]
 8008b14:	f10b 0302 	add.w	r3, fp, #2
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	9a03      	ldr	r2, [sp, #12]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d945      	bls.n	8008bac <forward_lite_nl_softmax_is8os8+0x3c4>
 8008b20:	9a05      	ldr	r2, [sp, #20]
 8008b22:	46cb      	mov	fp, r9
 8008b24:	f919 3f01 	ldrsb.w	r3, [r9, #1]!
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	f77f ae90 	ble.w	800884e <forward_lite_nl_softmax_is8os8+0x66>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e7eb      	b.n	8008b0a <forward_lite_nl_softmax_is8os8+0x322>
 8008b32:	2502      	movs	r5, #2
 8008b34:	e728      	b.n	8008988 <forward_lite_nl_softmax_is8os8+0x1a0>
 8008b36:	bf00      	nop
 8008b38:	c0000001 	.word	0xc0000001
 8008b3c:	2aaaaaab 	.word	0x2aaaaaab
 8008b40:	70f5a894 	.word	0x70f5a894
 8008b44:	63afbe7b 	.word	0x63afbe7b
 8008b48:	4da2cbf2 	.word	0x4da2cbf2
 8008b4c:	2f16ac6c 	.word	0x2f16ac6c
 8008b50:	1152aaa4 	.word	0x1152aaa4
 8008b54:	02582ab7 	.word	0x02582ab7
 8008b58:	000afe11 	.word	0x000afe11
 8008b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008b60:	f000 8225 	beq.w	8008fae <forward_lite_nl_softmax_is8os8+0x7c6>
 8008b64:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8008b68:	0169      	lsls	r1, r5, #5
 8008b6a:	1a2d      	subs	r5, r5, r0
 8008b6c:	fab0 f080 	clz	r0, r0
 8008b70:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 8008b74:	0940      	lsrs	r0, r0, #5
 8008b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b7a:	f04f 0a00 	mov.w	sl, #0
 8008b7e:	fbc2 3a02 	smlal	r3, sl, r2, r2
 8008b82:	1e41      	subs	r1, r0, #1
 8008b84:	9200      	str	r2, [sp, #0]
 8008b86:	f3c5 7280 	ubfx	r2, r5, #30, #1
 8008b8a:	9111      	str	r1, [sp, #68]	; 0x44
 8008b8c:	f1ba 0f00 	cmp.w	sl, #0
 8008b90:	f102 31ff 	add.w	r1, r2, #4294967295
 8008b94:	f1c2 0200 	rsb	r2, r2, #0
 8008b98:	9110      	str	r1, [sp, #64]	; 0x40
 8008b9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008b9c:	f6bf ae99 	bge.w	80088d2 <forward_lite_nl_softmax_is8os8+0xea>
 8008ba0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008ba4:	189b      	adds	r3, r3, r2
 8008ba6:	f14a 0a00 	adc.w	sl, sl, #0
 8008baa:	e692      	b.n	80088d2 <forward_lite_nl_softmax_is8os8+0xea>
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 816f 	beq.w	8008e92 <forward_lite_nl_softmax_is8os8+0x6aa>
 8008bb4:	fab3 f483 	clz	r4, r3
 8008bb8:	fa03 f104 	lsl.w	r1, r3, r4
 8008bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bc0:	17da      	asrs	r2, r3, #31
 8008bc2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008bc6:	bf08      	it	eq
 8008bc8:	2900      	cmpeq	r1, #0
 8008bca:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8008bce:	f000 8161 	beq.w	8008e94 <forward_lite_nl_softmax_is8os8+0x6ac>
 8008bd2:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 8008bd6:	f142 0200 	adc.w	r2, r2, #0
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8008be0:	49a8      	ldr	r1, [pc, #672]	; (8008e84 <forward_lite_nl_softmax_is8os8+0x69c>)
 8008be2:	4fa9      	ldr	r7, [pc, #676]	; (8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008be4:	1052      	asrs	r2, r2, #1
 8008be6:	425d      	negs	r5, r3
 8008be8:	fb01 5502 	mla	r5, r1, r2, r5
 8008bec:	fba3 1601 	umull	r1, r6, r3, r1
 8008bf0:	19c9      	adds	r1, r1, r7
 8008bf2:	4435      	add	r5, r6
 8008bf4:	f165 0500 	sbc.w	r5, r5, #0
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	da04      	bge.n	8008c06 <forward_lite_nl_softmax_is8os8+0x41e>
 8008bfc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008c00:	1809      	adds	r1, r1, r0
 8008c02:	f145 0500 	adc.w	r5, r5, #0
 8008c06:	0fc9      	lsrs	r1, r1, #31
 8008c08:	ea41 0045 	orr.w	r0, r1, r5, lsl #1
 8008c0c:	f100 315a 	add.w	r1, r0, #1515870810	; 0x5a5a5a5a
 8008c10:	17ce      	asrs	r6, r1, #31
 8008c12:	fb01 f502 	mul.w	r5, r1, r2
 8008c16:	fb03 5506 	mla	r5, r3, r6, r5
 8008c1a:	fba1 ce03 	umull	ip, lr, r1, r3
 8008c1e:	f11c 4780 	adds.w	r7, ip, #1073741824	; 0x40000000
 8008c22:	44ae      	add	lr, r5
 8008c24:	f14e 0500 	adc.w	r5, lr, #0
 8008c28:	0fff      	lsrs	r7, r7, #31
 8008c2a:	ea47 0745 	orr.w	r7, r7, r5, lsl #1
 8008c2e:	f1d7 5700 	rsbs	r7, r7, #536870912	; 0x20000000
 8008c32:	f140 81dd 	bpl.w	8008ff0 <forward_lite_nl_softmax_is8os8+0x808>
 8008c36:	4e94      	ldr	r6, [pc, #592]	; (8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008c38:	f04f 38ff 	mov.w	r8, #4294967295
 8008c3c:	fbc1 6807 	smlal	r6, r8, r1, r7
 8008c40:	f1b8 0f00 	cmp.w	r8, #0
 8008c44:	da04      	bge.n	8008c50 <forward_lite_nl_softmax_is8os8+0x468>
 8008c46:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8008c4a:	1976      	adds	r6, r6, r5
 8008c4c:	f148 0800 	adc.w	r8, r8, #0
 8008c50:	0ff6      	lsrs	r6, r6, #31
 8008c52:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 8008c56:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8008c5a:	f300 8193 	bgt.w	8008f84 <forward_lite_nl_softmax_is8os8+0x79c>
 8008c5e:	4f8a      	ldr	r7, [pc, #552]	; (8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008c60:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008c64:	07d6      	lsls	r6, r2, #31
 8008c66:	07d9      	lsls	r1, r3, #31
 8008c68:	ebbc 0101 	subs.w	r1, ip, r1
 8008c6c:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
 8008c70:	eb6e 0606 	sbc.w	r6, lr, r6
 8008c74:	19c9      	adds	r1, r1, r7
 8008c76:	f166 0600 	sbc.w	r6, r6, #0
 8008c7a:	2e00      	cmp	r6, #0
 8008c7c:	da04      	bge.n	8008c88 <forward_lite_nl_softmax_is8os8+0x4a0>
 8008c7e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8008c82:	19c9      	adds	r1, r1, r7
 8008c84:	f146 0600 	adc.w	r6, r6, #0
 8008c88:	0fc9      	lsrs	r1, r1, #31
 8008c8a:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8008c8e:	4e7e      	ldr	r6, [pc, #504]	; (8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008c90:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8008c94:	f04f 37ff 	mov.w	r7, #4294967295
 8008c98:	fbc5 6701 	smlal	r6, r7, r5, r1
 8008c9c:	2f00      	cmp	r7, #0
 8008c9e:	da04      	bge.n	8008caa <forward_lite_nl_softmax_is8os8+0x4c2>
 8008ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ca4:	1876      	adds	r6, r6, r1
 8008ca6:	f147 0700 	adc.w	r7, r7, #0
 8008caa:	0ff1      	lsrs	r1, r6, #31
 8008cac:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 8008cb0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008cb4:	f2c0 80a9 	blt.w	8008e0a <forward_lite_nl_softmax_is8os8+0x622>
 8008cb8:	f1a0 35a5 	sub.w	r5, r0, #2779096485	; 0xa5a5a5a5
 8008cbc:	3d02      	subs	r5, #2
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008cc4:	2700      	movs	r7, #0
 8008cc6:	fb05 f202 	mul.w	r2, r5, r2
 8008cca:	17e9      	asrs	r1, r5, #31
 8008ccc:	fb03 2201 	mla	r2, r3, r1, r2
 8008cd0:	fba5 3c03 	umull	r3, ip, r5, r3
 8008cd4:	181b      	adds	r3, r3, r0
 8008cd6:	4462      	add	r2, ip
 8008cd8:	eb42 0707 	adc.w	r7, r2, r7
 8008cdc:	2f00      	cmp	r7, #0
 8008cde:	da04      	bge.n	8008cea <forward_lite_nl_softmax_is8os8+0x502>
 8008ce0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008ce4:	189b      	adds	r3, r3, r2
 8008ce6:	f147 0700 	adc.w	r7, r7, #0
 8008cea:	0fdb      	lsrs	r3, r3, #31
 8008cec:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8008cf0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8008cf4:	0fd8      	lsrs	r0, r3, #31
 8008cf6:	42b0      	cmp	r0, r6
 8008cf8:	4a63      	ldr	r2, [pc, #396]	; (8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008cfa:	bf06      	itte	eq
 8008cfc:	2000      	moveq	r0, #0
 8008cfe:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8008d02:	f04f 30ff 	movne.w	r0, #4294967295
 8008d06:	fb03 f101 	mul.w	r1, r3, r1
 8008d0a:	17de      	asrs	r6, r3, #31
 8008d0c:	fb05 1106 	mla	r1, r5, r6, r1
 8008d10:	fba3 3605 	umull	r3, r6, r3, r5
 8008d14:	189b      	adds	r3, r3, r2
 8008d16:	4431      	add	r1, r6
 8008d18:	eb41 0000 	adc.w	r0, r1, r0
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	da04      	bge.n	8008d2a <forward_lite_nl_softmax_is8os8+0x542>
 8008d20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008d24:	189b      	adds	r3, r3, r2
 8008d26:	f140 0000 	adc.w	r0, r0, #0
 8008d2a:	0fdb      	lsrs	r3, r3, #31
 8008d2c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8008d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d34:	f2c0 8099 	blt.w	8008e6a <forward_lite_nl_softmax_is8os8+0x682>
 8008d38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d3c:	440d      	add	r5, r1
 8008d3e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8008d42:	bfb8      	it	lt
 8008d44:	0069      	lsllt	r1, r5, #1
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d046      	beq.n	8008dda <forward_lite_nl_softmax_is8os8+0x5f2>
 8008d4c:	2601      	movs	r6, #1
 8008d4e:	40a6      	lsls	r6, r4
 8008d50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d52:	f8df c134 	ldr.w	ip, [pc, #308]	; 8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>
 8008d56:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d58:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8008d5c:	3e01      	subs	r6, #1
 8008d5e:	ea4f 0866 	mov.w	r8, r6, asr #1
 8008d62:	f108 0901 	add.w	r9, r8, #1
 8008d66:	0fcf      	lsrs	r7, r1, #31
 8008d68:	1e5d      	subs	r5, r3, #1
 8008d6a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8008d6e:	468a      	mov	sl, r1
 8008d70:	e00a      	b.n	8008d88 <forward_lite_nl_softmax_is8os8+0x5a0>
 8008d72:	4590      	cmp	r8, r2
 8008d74:	da00      	bge.n	8008d78 <forward_lite_nl_softmax_is8os8+0x590>
 8008d76:	3301      	adds	r3, #1
 8008d78:	3b80      	subs	r3, #128	; 0x80
 8008d7a:	2b7e      	cmp	r3, #126	; 0x7e
 8008d7c:	dd40      	ble.n	8008e00 <forward_lite_nl_softmax_is8os8+0x618>
 8008d7e:	237f      	movs	r3, #127	; 0x7f
 8008d80:	4583      	cmp	fp, r0
 8008d82:	f805 3f01 	strb.w	r3, [r5, #1]!
 8008d86:	d028      	beq.n	8008dda <forward_lite_nl_softmax_is8os8+0x5f2>
 8008d88:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8008d8c:	0fcb      	lsrs	r3, r1, #31
 8008d8e:	42bb      	cmp	r3, r7
 8008d90:	bf0b      	itete	eq
 8008d92:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8008d96:	4662      	movne	r2, ip
 8008d98:	2300      	moveq	r3, #0
 8008d9a:	f04f 33ff 	movne.w	r3, #4294967295
 8008d9e:	fbc1 230a 	smlal	r2, r3, r1, sl
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da03      	bge.n	8008dae <forward_lite_nl_softmax_is8os8+0x5c6>
 8008da6:	eb12 020e 	adds.w	r2, r2, lr
 8008daa:	f143 0300 	adc.w	r3, r3, #0
 8008dae:	0fd2      	lsrs	r2, r2, #31
 8008db0:	4551      	cmp	r1, sl
 8008db2:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8008db6:	d104      	bne.n	8008dc2 <forward_lite_nl_softmax_is8os8+0x5da>
 8008db8:	f1ba 4f00 	cmp.w	sl, #2147483648	; 0x80000000
 8008dbc:	bf08      	it	eq
 8008dbe:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8008dc2:	ea06 0203 	and.w	r2, r6, r3
 8008dc6:	4123      	asrs	r3, r4
 8008dc8:	d5d3      	bpl.n	8008d72 <forward_lite_nl_softmax_is8os8+0x58a>
 8008dca:	4591      	cmp	r9, r2
 8008dcc:	dbd3      	blt.n	8008d76 <forward_lite_nl_softmax_is8os8+0x58e>
 8008dce:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8008dd2:	4583      	cmp	fp, r0
 8008dd4:	f805 3f01 	strb.w	r3, [r5, #1]!
 8008dd8:	d1d6      	bne.n	8008d88 <forward_lite_nl_softmax_is8os8+0x5a0>
 8008dda:	9b02      	ldr	r3, [sp, #8]
 8008ddc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008dde:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008de0:	4413      	add	r3, r2
 8008de2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008de4:	9302      	str	r3, [sp, #8]
 8008de6:	440a      	add	r2, r1
 8008de8:	9215      	str	r2, [sp, #84]	; 0x54
 8008dea:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008dec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008dee:	440a      	add	r2, r1
 8008df0:	9216      	str	r2, [sp, #88]	; 0x58
 8008df2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008df4:	429a      	cmp	r2, r3
 8008df6:	f63f ad0c 	bhi.w	8008812 <forward_lite_nl_softmax_is8os8+0x2a>
 8008dfa:	b01b      	add	sp, #108	; 0x6c
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8008e04:	dbe3      	blt.n	8008dce <forward_lite_nl_softmax_is8os8+0x5e6>
 8008e06:	b25b      	sxtb	r3, r3
 8008e08:	e7ba      	b.n	8008d80 <forward_lite_nl_softmax_is8os8+0x598>
 8008e0a:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 8008e0e:	bfc8      	it	gt
 8008e10:	f04f 0800 	movgt.w	r8, #0
 8008e14:	f300 8106 	bgt.w	8009024 <forward_lite_nl_softmax_is8os8+0x83c>
 8008e18:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8008e1c:	17e8      	asrs	r0, r5, #31
 8008e1e:	491a      	ldr	r1, [pc, #104]	; (8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008e20:	fb05 f202 	mul.w	r2, r5, r2
 8008e24:	fb03 2200 	mla	r2, r3, r0, r2
 8008e28:	fba5 3003 	umull	r3, r0, r5, r3
 8008e2c:	185b      	adds	r3, r3, r1
 8008e2e:	4410      	add	r0, r2
 8008e30:	f160 0000 	sbc.w	r0, r0, #0
 8008e34:	2800      	cmp	r0, #0
 8008e36:	da04      	bge.n	8008e42 <forward_lite_nl_softmax_is8os8+0x65a>
 8008e38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008e3c:	189b      	adds	r3, r3, r2
 8008e3e:	f140 0000 	adc.w	r0, r0, #0
 8008e42:	0fdb      	lsrs	r3, r3, #31
 8008e44:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8008e48:	f1c3 5200 	rsb	r2, r3, #536870912	; 0x20000000
 8008e4c:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <forward_lite_nl_softmax_is8os8+0x6a0>)
 8008e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e52:	fbc5 3102 	smlal	r3, r1, r5, r2
 8008e56:	2900      	cmp	r1, #0
 8008e58:	da04      	bge.n	8008e64 <forward_lite_nl_softmax_is8os8+0x67c>
 8008e5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	f141 0100 	adc.w	r1, r1, #0
 8008e64:	0fdb      	lsrs	r3, r3, #31
 8008e66:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008e6a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8008e6e:	f300 80db 	bgt.w	8009028 <forward_lite_nl_softmax_is8os8+0x840>
 8008e72:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008e76:	0069      	lsls	r1, r5, #1
 8008e78:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008e7c:	bfd8      	it	le
 8008e7e:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 8008e82:	e760      	b.n	8008d46 <forward_lite_nl_softmax_is8os8+0x55e>
 8008e84:	c3c3c3c4 	.word	0xc3c3c3c4
 8008e88:	c0000001 	.word	0xc0000001
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	f47f accf 	bne.w	8008830 <forward_lite_nl_softmax_is8os8+0x48>
 8008e92:	2403      	movs	r4, #3
 8008e94:	486a      	ldr	r0, [pc, #424]	; (8009040 <forward_lite_nl_softmax_is8os8+0x858>)
 8008e96:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8009058 <forward_lite_nl_softmax_is8os8+0x870>
 8008e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8008e9e:	f04f 0c00 	mov.w	ip, #0
 8008ea2:	f04f 0801 	mov.w	r8, #1
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	463b      	mov	r3, r7
 8008eaa:	463a      	mov	r2, r7
 8008eac:	46c1      	mov	r9, r8
 8008eae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	eb11 010e 	adds.w	r1, r1, lr
 8008eb8:	eb46 060c 	adc.w	r6, r6, ip
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	da05      	bge.n	8008ecc <forward_lite_nl_softmax_is8os8+0x6e4>
 8008ec0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8008ec4:	eb11 010c 	adds.w	r1, r1, ip
 8008ec8:	f146 0600 	adc.w	r6, r6, #0
 8008ecc:	0fc9      	lsrs	r1, r1, #31
 8008ece:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8008ed2:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8008ed6:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 8008eda:	45cc      	cmp	ip, r9
 8008edc:	4e59      	ldr	r6, [pc, #356]	; (8009044 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008ede:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8008ee2:	fb01 f707 	mul.w	r7, r1, r7
 8008ee6:	fb00 770c 	mla	r7, r0, ip, r7
 8008eea:	bf08      	it	eq
 8008eec:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 8008ef0:	fba1 0100 	umull	r0, r1, r1, r0
 8008ef4:	bf0c      	ite	eq
 8008ef6:	f04f 0c00 	moveq.w	ip, #0
 8008efa:	f04f 3cff 	movne.w	ip, #4294967295
 8008efe:	440f      	add	r7, r1
 8008f00:	1986      	adds	r6, r0, r6
 8008f02:	eb47 070c 	adc.w	r7, r7, ip
 8008f06:	2f00      	cmp	r7, #0
 8008f08:	da04      	bge.n	8008f14 <forward_lite_nl_softmax_is8os8+0x72c>
 8008f0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f0e:	1876      	adds	r6, r6, r1
 8008f10:	f147 0700 	adc.w	r7, r7, #0
 8008f14:	0ff6      	lsrs	r6, r6, #31
 8008f16:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8008f1a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8008f1e:	4631      	mov	r1, r6
 8008f20:	da23      	bge.n	8008f6a <forward_lite_nl_softmax_is8os8+0x782>
 8008f22:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8008f26:	dc7d      	bgt.n	8009024 <forward_lite_nl_softmax_is8os8+0x83c>
 8008f28:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008f2c:	f1b8 0f00 	cmp.w	r8, #0
 8008f30:	f43f af74 	beq.w	8008e1c <forward_lite_nl_softmax_is8os8+0x634>
 8008f34:	fb05 f202 	mul.w	r2, r5, r2
 8008f38:	17e9      	asrs	r1, r5, #31
 8008f3a:	fb03 2201 	mla	r2, r3, r1, r2
 8008f3e:	fba5 3003 	umull	r3, r0, r5, r3
 8008f42:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8008f46:	eb42 0200 	adc.w	r2, r2, r0
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	da04      	bge.n	8008f58 <forward_lite_nl_softmax_is8os8+0x770>
 8008f4e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008f52:	181b      	adds	r3, r3, r0
 8008f54:	f142 0200 	adc.w	r2, r2, #0
 8008f58:	0fdb      	lsrs	r3, r3, #31
 8008f5a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8008f5e:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8008f62:	4a38      	ldr	r2, [pc, #224]	; (8009044 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008f64:	f04f 30ff 	mov.w	r0, #4294967295
 8008f68:	e6cd      	b.n	8008d06 <forward_lite_nl_softmax_is8os8+0x51e>
 8008f6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f6e:	440d      	add	r5, r1
 8008f70:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 8008f74:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008f78:	f43f aea2 	beq.w	8008cc0 <forward_lite_nl_softmax_is8os8+0x4d8>
 8008f7c:	4831      	ldr	r0, [pc, #196]	; (8009044 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008f7e:	f04f 37ff 	mov.w	r7, #4294967295
 8008f82:	e6a0      	b.n	8008cc6 <forward_lite_nl_softmax_is8os8+0x4de>
 8008f84:	eb01 0586 	add.w	r5, r1, r6, lsl #2
 8008f88:	17ef      	asrs	r7, r5, #31
 8008f8a:	fb03 f107 	mul.w	r1, r3, r7
 8008f8e:	fb05 1102 	mla	r1, r5, r2, r1
 8008f92:	fba3 ec05 	umull	lr, ip, r3, r5
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	4628      	mov	r0, r5
 8008f9a:	448c      	add	ip, r1
 8008f9c:	da3f      	bge.n	800901e <forward_lite_nl_softmax_is8os8+0x836>
 8008f9e:	4929      	ldr	r1, [pc, #164]	; (8009044 <forward_lite_nl_softmax_is8os8+0x85c>)
 8008fa0:	f04f 0901 	mov.w	r9, #1
 8008fa4:	f04f 0800 	mov.w	r8, #0
 8008fa8:	f04f 36ff 	mov.w	r6, #4294967295
 8008fac:	e782      	b.n	8008eb4 <forward_lite_nl_softmax_is8os8+0x6cc>
 8008fae:	4a26      	ldr	r2, [pc, #152]	; (8009048 <forward_lite_nl_softmax_is8os8+0x860>)
 8008fb0:	4b26      	ldr	r3, [pc, #152]	; (800904c <forward_lite_nl_softmax_is8os8+0x864>)
 8008fb2:	920e      	str	r2, [sp, #56]	; 0x38
 8008fb4:	f04f 0a00 	mov.w	sl, #0
 8008fb8:	f04f 36ff 	mov.w	r6, #4294967295
 8008fbc:	4a24      	ldr	r2, [pc, #144]	; (8009050 <forward_lite_nl_softmax_is8os8+0x868>)
 8008fbe:	9312      	str	r3, [sp, #72]	; 0x48
 8008fc0:	9200      	str	r2, [sp, #0]
 8008fc2:	e9cd aa06 	strd	sl, sl, [sp, #24]
 8008fc6:	e9cd 6a08 	strd	r6, sl, [sp, #32]
 8008fca:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8008fce:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
 8008fd2:	4b20      	ldr	r3, [pc, #128]	; (8009054 <forward_lite_nl_softmax_is8os8+0x86c>)
 8008fd4:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008fd8:	4650      	mov	r0, sl
 8008fda:	4654      	mov	r4, sl
 8008fdc:	46b4      	mov	ip, r6
 8008fde:	4637      	mov	r7, r6
 8008fe0:	46d6      	mov	lr, sl
 8008fe2:	46d0      	mov	r8, sl
 8008fe4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008fe8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008fec:	9611      	str	r6, [sp, #68]	; 0x44
 8008fee:	e4ca      	b.n	8008986 <forward_lite_nl_softmax_is8os8+0x19e>
 8008ff0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008ff4:	f04f 0800 	mov.w	r8, #0
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	fbc1 5007 	smlal	r5, r0, r1, r7
 8009000:	0fed      	lsrs	r5, r5, #31
 8009002:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 8009006:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800900a:	17ef      	asrs	r7, r5, #31
 800900c:	fb03 f107 	mul.w	r1, r3, r7
 8009010:	fb05 1102 	mla	r1, r5, r2, r1
 8009014:	fba3 ec05 	umull	lr, ip, r3, r5
 8009018:	4628      	mov	r0, r5
 800901a:	448c      	add	ip, r1
 800901c:	e746      	b.n	8008eac <forward_lite_nl_softmax_is8os8+0x6c4>
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	e743      	b.n	8008eac <forward_lite_nl_softmax_is8os8+0x6c4>
 8009024:	0089      	lsls	r1, r1, #2
 8009026:	e7a2      	b.n	8008f6e <forward_lite_nl_softmax_is8os8+0x786>
 8009028:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800902c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009030:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8009034:	f6ff af20 	blt.w	8008e78 <forward_lite_nl_softmax_is8os8+0x690>
 8009038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800903c:	e683      	b.n	8008d46 <forward_lite_nl_softmax_is8os8+0x55e>
 800903e:	bf00      	nop
 8009040:	b4b4b4b6 	.word	0xb4b4b4b6
 8009044:	c0000001 	.word	0xc0000001
 8009048:	01fffff8 	.word	0x01fffff8
 800904c:	40000100 	.word	0x40000100
 8009050:	0fffffe0 	.word	0x0fffffe0
 8009054:	001fffff 	.word	0x001fffff
 8009058:	4b4b4b4a 	.word	0x4b4b4b4a

0800905c <forward_lite_nl_softmax_iu8ou8>:
 800905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009060:	188a      	adds	r2, r1, r2
 8009062:	b09b      	sub	sp, #108	; 0x6c
 8009064:	4291      	cmp	r1, r2
 8009066:	9101      	str	r1, [sp, #4]
 8009068:	9218      	str	r2, [sp, #96]	; 0x60
 800906a:	9015      	str	r0, [sp, #84]	; 0x54
 800906c:	9302      	str	r3, [sp, #8]
 800906e:	f080 82fa 	bcs.w	8009666 <forward_lite_nl_softmax_iu8ou8+0x60a>
 8009072:	461a      	mov	r2, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	18cb      	adds	r3, r1, r3
 8009078:	9316      	str	r3, [sp, #88]	; 0x58
 800907a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800907c:	3b04      	subs	r3, #4
 800907e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009080:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009084:	9319      	str	r3, [sp, #100]	; 0x64
 8009086:	9a02      	ldr	r2, [sp, #8]
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	2a01      	cmp	r2, #1
 800908c:	f893 b000 	ldrb.w	fp, [r3]
 8009090:	f240 8332 	bls.w	80096f8 <forward_lite_nl_softmax_iu8ou8+0x69c>
 8009094:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009096:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800909a:	4593      	cmp	fp, r2
 800909c:	bfb8      	it	lt
 800909e:	4693      	movlt	fp, r2
 80090a0:	428b      	cmp	r3, r1
 80090a2:	d1f8      	bne.n	8009096 <forward_lite_nl_softmax_iu8ou8+0x3a>
 80090a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80090a6:	445b      	add	r3, fp
 80090a8:	2200      	movs	r2, #0
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	9b01      	ldr	r3, [sp, #4]
 80090ae:	9203      	str	r2, [sp, #12]
 80090b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090b2:	f103 39ff 	add.w	r9, r3, #4294967295
 80090b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090b8:	0fd2      	lsrs	r2, r2, #31
 80090ba:	e9cd 2b13 	strd	r2, fp, [sp, #76]	; 0x4c
 80090be:	469a      	mov	sl, r3
 80090c0:	e168      	b.n	8009394 <forward_lite_nl_softmax_iu8ou8+0x338>
 80090c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090c4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80090ca:	4093      	lsls	r3, r2
 80090cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090ce:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 80090d2:	4ac9      	ldr	r2, [pc, #804]	; (80093f8 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 80090d4:	bf06      	itte	eq
 80090d6:	f04f 0e00 	moveq.w	lr, #0
 80090da:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 80090de:	f04f 3eff 	movne.w	lr, #4294967295
 80090e2:	fbc1 2e03 	smlal	r2, lr, r1, r3
 80090e6:	f1be 0f00 	cmp.w	lr, #0
 80090ea:	da04      	bge.n	80090f6 <forward_lite_nl_softmax_iu8ou8+0x9a>
 80090ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090f0:	1852      	adds	r2, r2, r1
 80090f2:	f14e 0e00 	adc.w	lr, lr, #0
 80090f6:	0fd0      	lsrs	r0, r2, #31
 80090f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090fa:	429a      	cmp	r2, r3
 80090fc:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 8009100:	f000 8153 	beq.w	80093aa <forward_lite_nl_softmax_iu8ou8+0x34e>
 8009104:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 8009108:	0169      	lsls	r1, r5, #5
 800910a:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 800910e:	1a2d      	subs	r5, r5, r0
 8009110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009114:	f04f 0c00 	mov.w	ip, #0
 8009118:	fbc2 3c02 	smlal	r3, ip, r2, r2
 800911c:	9200      	str	r2, [sp, #0]
 800911e:	f3c5 7280 	ubfx	r2, r5, #30, #1
 8009122:	1e51      	subs	r1, r2, #1
 8009124:	f3c5 7640 	ubfx	r6, r5, #29, #1
 8009128:	4252      	negs	r2, r2
 800912a:	920f      	str	r2, [sp, #60]	; 0x3c
 800912c:	f1bc 0f00 	cmp.w	ip, #0
 8009130:	f106 32ff 	add.w	r2, r6, #4294967295
 8009134:	9111      	str	r1, [sp, #68]	; 0x44
 8009136:	9210      	str	r2, [sp, #64]	; 0x40
 8009138:	da05      	bge.n	8009146 <forward_lite_nl_softmax_iu8ou8+0xea>
 800913a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 800913e:	eb13 030e 	adds.w	r3, r3, lr
 8009142:	f14c 0c00 	adc.w	ip, ip, #0
 8009146:	0fdb      	lsrs	r3, r3, #31
 8009148:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 800914c:	fba3 2403 	umull	r2, r4, r3, r3
 8009150:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8009154:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 8009158:	fb03 f70c 	mul.w	r7, r3, ip
 800915c:	eb44 0447 	adc.w	r4, r4, r7, lsl #1
 8009160:	2c00      	cmp	r4, #0
 8009162:	930e      	str	r3, [sp, #56]	; 0x38
 8009164:	da04      	bge.n	8009170 <forward_lite_nl_softmax_iu8ou8+0x114>
 8009166:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800916a:	19d2      	adds	r2, r2, r7
 800916c:	f144 0400 	adc.w	r4, r4, #0
 8009170:	fab0 fe80 	clz	lr, r0
 8009174:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8009178:	4271      	negs	r1, r6
 800917a:	f1ce 0800 	rsb	r8, lr, #0
 800917e:	0fd2      	lsrs	r2, r2, #31
 8009180:	9105      	str	r1, [sp, #20]
 8009182:	f028 4100 	bic.w	r1, r8, #2147483648	; 0x80000000
 8009186:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800918a:	910c      	str	r1, [sp, #48]	; 0x30
 800918c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009190:	9800      	ldr	r0, [sp, #0]
 8009192:	9108      	str	r1, [sp, #32]
 8009194:	f002 0103 	and.w	r1, r2, #3
 8009198:	910d      	str	r1, [sp, #52]	; 0x34
 800919a:	9900      	ldr	r1, [sp, #0]
 800919c:	fb00 fc0c 	mul.w	ip, r0, ip
 80091a0:	17c0      	asrs	r0, r0, #31
 80091a2:	fb03 cc00 	mla	ip, r3, r0, ip
 80091a6:	ea4f 78d3 	mov.w	r8, r3, lsr #31
 80091aa:	fba1 1303 	umull	r1, r3, r1, r3
 80091ae:	9112      	str	r1, [sp, #72]	; 0x48
 80091b0:	9900      	ldr	r1, [sp, #0]
 80091b2:	f3c5 6780 	ubfx	r7, r5, #26, #1
 80091b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80091ba:	1e79      	subs	r1, r7, #1
 80091bc:	f3c5 7600 	ubfx	r6, r5, #28, #1
 80091c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80091c2:	4279      	negs	r1, r7
 80091c4:	9109      	str	r1, [sp, #36]	; 0x24
 80091c6:	1e71      	subs	r1, r6, #1
 80091c8:	f3c5 6400 	ubfx	r4, r5, #24, #1
 80091cc:	f3c5 6040 	ubfx	r0, r5, #25, #1
 80091d0:	1092      	asrs	r2, r2, #2
 80091d2:	f3c5 65c0 	ubfx	r5, r5, #27, #1
 80091d6:	910a      	str	r1, [sp, #40]	; 0x28
 80091d8:	4271      	negs	r1, r6
 80091da:	9106      	str	r1, [sp, #24]
 80091dc:	2a00      	cmp	r2, #0
 80091de:	f1c5 0100 	rsb	r1, r5, #0
 80091e2:	4463      	add	r3, ip
 80091e4:	f100 37ff 	add.w	r7, r0, #4294967295
 80091e8:	f104 3cff 	add.w	ip, r4, #4294967295
 80091ec:	f1c0 0000 	rsb	r0, r0, #0
 80091f0:	f1c4 0400 	rsb	r4, r4, #0
 80091f4:	f105 36ff 	add.w	r6, r5, #4294967295
 80091f8:	9107      	str	r1, [sp, #28]
 80091fa:	f2c0 80d4 	blt.w	80093a6 <forward_lite_nl_softmax_iu8ou8+0x34a>
 80091fe:	2501      	movs	r5, #1
 8009200:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009202:	428d      	cmp	r5, r1
 8009204:	bfb8      	it	lt
 8009206:	3201      	addlt	r2, #1
 8009208:	4d7b      	ldr	r5, [pc, #492]	; (80093f8 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 800920a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800920c:	45c6      	cmp	lr, r8
 800920e:	bf06      	itte	eq
 8009210:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8009214:	f04f 0800 	moveq.w	r8, #0
 8009218:	f04f 38ff 	movne.w	r8, #4294967295
 800921c:	186d      	adds	r5, r5, r1
 800921e:	eb43 0308 	adc.w	r3, r3, r8
 8009222:	2b00      	cmp	r3, #0
 8009224:	da05      	bge.n	8009232 <forward_lite_nl_softmax_iu8ou8+0x1d6>
 8009226:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 800922a:	eb15 050e 	adds.w	r5, r5, lr
 800922e:	f143 0300 	adc.w	r3, r3, #0
 8009232:	0fed      	lsrs	r5, r5, #31
 8009234:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 8009238:	442a      	add	r2, r5
 800923a:	2a00      	cmp	r2, #0
 800923c:	4b6e      	ldr	r3, [pc, #440]	; (80093f8 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 800923e:	496f      	ldr	r1, [pc, #444]	; (80093fc <forward_lite_nl_softmax_iu8ou8+0x3a0>)
 8009240:	bfa6      	itte	ge
 8009242:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8009246:	2500      	movge	r5, #0
 8009248:	f04f 35ff 	movlt.w	r5, #4294967295
 800924c:	fbc2 3501 	smlal	r3, r5, r2, r1
 8009250:	2d00      	cmp	r5, #0
 8009252:	da04      	bge.n	800925e <forward_lite_nl_softmax_iu8ou8+0x202>
 8009254:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009258:	189b      	adds	r3, r3, r2
 800925a:	f145 0500 	adc.w	r5, r5, #0
 800925e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009260:	0fdb      	lsrs	r3, r3, #31
 8009262:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8009266:	441a      	add	r2, r3
 8009268:	4613      	mov	r3, r2
 800926a:	1052      	asrs	r2, r2, #1
 800926c:	d402      	bmi.n	8009274 <forward_lite_nl_softmax_iu8ou8+0x218>
 800926e:	07dd      	lsls	r5, r3, #31
 8009270:	bf48      	it	mi
 8009272:	3201      	addmi	r2, #1
 8009274:	9900      	ldr	r1, [sp, #0]
 8009276:	4d62      	ldr	r5, [pc, #392]	; (8009400 <forward_lite_nl_softmax_iu8ou8+0x3a4>)
 8009278:	4411      	add	r1, r2
 800927a:	2900      	cmp	r1, #0
 800927c:	4a5e      	ldr	r2, [pc, #376]	; (80093f8 <forward_lite_nl_softmax_iu8ou8+0x39c>)
 800927e:	bfa6      	itte	ge
 8009280:	2300      	movge	r3, #0
 8009282:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8009286:	f04f 33ff 	movlt.w	r3, #4294967295
 800928a:	fbc1 2305 	smlal	r2, r3, r1, r5
 800928e:	2b00      	cmp	r3, #0
 8009290:	da04      	bge.n	800929c <forward_lite_nl_softmax_iu8ou8+0x240>
 8009292:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009296:	1852      	adds	r2, r2, r1
 8009298:	f143 0300 	adc.w	r3, r3, #0
 800929c:	0fd2      	lsrs	r2, r2, #31
 800929e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 80092a2:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 80092a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092aa:	2100      	movs	r1, #0
 80092ac:	4d55      	ldr	r5, [pc, #340]	; (8009404 <forward_lite_nl_softmax_iu8ou8+0x3a8>)
 80092ae:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 80092b2:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 80092b6:	4698      	mov	r8, r3
 80092b8:	468e      	mov	lr, r1
 80092ba:	fbc2 8e05 	smlal	r8, lr, r2, r5
 80092be:	4645      	mov	r5, r8
 80092c0:	0fed      	lsrs	r5, r5, #31
 80092c2:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 80092c6:	4025      	ands	r5, r4
 80092c8:	ea02 0c0c 	and.w	ip, r2, ip
 80092cc:	ea8c 0c05 	eor.w	ip, ip, r5
 80092d0:	4d4d      	ldr	r5, [pc, #308]	; (8009408 <forward_lite_nl_softmax_iu8ou8+0x3ac>)
 80092d2:	461a      	mov	r2, r3
 80092d4:	460c      	mov	r4, r1
 80092d6:	fbcc 2405 	smlal	r2, r4, ip, r5
 80092da:	0fd2      	lsrs	r2, r2, #31
 80092dc:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80092e0:	4002      	ands	r2, r0
 80092e2:	4d4a      	ldr	r5, [pc, #296]	; (800940c <forward_lite_nl_softmax_iu8ou8+0x3b0>)
 80092e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80092e6:	ea0c 0707 	and.w	r7, ip, r7
 80092ea:	4057      	eors	r7, r2
 80092ec:	460c      	mov	r4, r1
 80092ee:	461a      	mov	r2, r3
 80092f0:	fbc7 2405 	smlal	r2, r4, r7, r5
 80092f4:	0fd2      	lsrs	r2, r2, #31
 80092f6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80092fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80092fc:	4038      	ands	r0, r7
 80092fe:	4014      	ands	r4, r2
 8009300:	4060      	eors	r0, r4
 8009302:	4c43      	ldr	r4, [pc, #268]	; (8009410 <forward_lite_nl_softmax_iu8ou8+0x3b4>)
 8009304:	461d      	mov	r5, r3
 8009306:	460a      	mov	r2, r1
 8009308:	fbc0 5204 	smlal	r5, r2, r0, r4
 800930c:	0fed      	lsrs	r5, r5, #31
 800930e:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 8009312:	9a07      	ldr	r2, [sp, #28]
 8009314:	4006      	ands	r6, r0
 8009316:	402a      	ands	r2, r5
 8009318:	4d3e      	ldr	r5, [pc, #248]	; (8009414 <forward_lite_nl_softmax_iu8ou8+0x3b8>)
 800931a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800931c:	4056      	eors	r6, r2
 800931e:	460c      	mov	r4, r1
 8009320:	461a      	mov	r2, r3
 8009322:	fbc6 2405 	smlal	r2, r4, r6, r5
 8009326:	4030      	ands	r0, r6
 8009328:	0fd2      	lsrs	r2, r2, #31
 800932a:	9e06      	ldr	r6, [sp, #24]
 800932c:	4d3a      	ldr	r5, [pc, #232]	; (8009418 <forward_lite_nl_softmax_iu8ou8+0x3bc>)
 800932e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8009332:	4016      	ands	r6, r2
 8009334:	4070      	eors	r0, r6
 8009336:	461a      	mov	r2, r3
 8009338:	460e      	mov	r6, r1
 800933a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800933c:	fbc0 2605 	smlal	r2, r6, r0, r5
 8009340:	4004      	ands	r4, r0
 8009342:	0fd2      	lsrs	r2, r2, #31
 8009344:	9805      	ldr	r0, [sp, #20]
 8009346:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 800934a:	4010      	ands	r0, r2
 800934c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800934e:	4044      	eors	r4, r0
 8009350:	ea04 0e02 	and.w	lr, r4, r2
 8009354:	22f2      	movs	r2, #242	; 0xf2
 8009356:	fbc4 3102 	smlal	r3, r1, r4, r2
 800935a:	0fdb      	lsrs	r3, r3, #31
 800935c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800935e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009362:	401a      	ands	r2, r3
 8009364:	ea8e 0302 	eor.w	r3, lr, r2
 8009368:	9a08      	ldr	r2, [sp, #32]
 800936a:	ea03 0e02 	and.w	lr, r3, r2
 800936e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009370:	ea8e 0303 	eor.w	r3, lr, r3
 8009374:	131a      	asrs	r2, r3, #12
 8009376:	0519      	lsls	r1, r3, #20
 8009378:	9903      	ldr	r1, [sp, #12]
 800937a:	bf48      	it	mi
 800937c:	3201      	addmi	r2, #1
 800937e:	4411      	add	r1, r2
 8009380:	9103      	str	r1, [sp, #12]
 8009382:	9a01      	ldr	r2, [sp, #4]
 8009384:	f84a 3f04 	str.w	r3, [sl, #4]!
 8009388:	f10b 0302 	add.w	r3, fp, #2
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	9a02      	ldr	r2, [sp, #8]
 8009390:	429a      	cmp	r2, r3
 8009392:	d943      	bls.n	800941c <forward_lite_nl_softmax_iu8ou8+0x3c0>
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	46cb      	mov	fp, r9
 8009398:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800939c:	429a      	cmp	r2, r3
 800939e:	f77f ae90 	ble.w	80090c2 <forward_lite_nl_softmax_iu8ou8+0x66>
 80093a2:	2300      	movs	r3, #0
 80093a4:	e7ed      	b.n	8009382 <forward_lite_nl_softmax_iu8ou8+0x326>
 80093a6:	2502      	movs	r5, #2
 80093a8:	e72a      	b.n	8009200 <forward_lite_nl_softmax_iu8ou8+0x1a4>
 80093aa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80093ae:	f000 8234 	beq.w	800981a <forward_lite_nl_softmax_iu8ou8+0x7be>
 80093b2:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
 80093b6:	0169      	lsls	r1, r5, #5
 80093b8:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 80093bc:	1a2d      	subs	r5, r5, r0
 80093be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093c2:	f04f 0c00 	mov.w	ip, #0
 80093c6:	fbc2 3c02 	smlal	r3, ip, r2, r2
 80093ca:	9200      	str	r2, [sp, #0]
 80093cc:	f3c5 7280 	ubfx	r2, r5, #30, #1
 80093d0:	1e51      	subs	r1, r2, #1
 80093d2:	f3c5 7640 	ubfx	r6, r5, #29, #1
 80093d6:	4252      	negs	r2, r2
 80093d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80093da:	f1bc 0f00 	cmp.w	ip, #0
 80093de:	f106 32ff 	add.w	r2, r6, #4294967295
 80093e2:	9111      	str	r1, [sp, #68]	; 0x44
 80093e4:	9210      	str	r2, [sp, #64]	; 0x40
 80093e6:	f6bf aeae 	bge.w	8009146 <forward_lite_nl_softmax_iu8ou8+0xea>
 80093ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80093ee:	189b      	adds	r3, r3, r2
 80093f0:	f14c 0c00 	adc.w	ip, ip, #0
 80093f4:	e6a7      	b.n	8009146 <forward_lite_nl_softmax_iu8ou8+0xea>
 80093f6:	bf00      	nop
 80093f8:	c0000001 	.word	0xc0000001
 80093fc:	2aaaaaab 	.word	0x2aaaaaab
 8009400:	70f5a894 	.word	0x70f5a894
 8009404:	63afbe7b 	.word	0x63afbe7b
 8009408:	4da2cbf2 	.word	0x4da2cbf2
 800940c:	2f16ac6c 	.word	0x2f16ac6c
 8009410:	1152aaa4 	.word	0x1152aaa4
 8009414:	02582ab7 	.word	0x02582ab7
 8009418:	000afe11 	.word	0x000afe11
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 816d 	beq.w	80096fe <forward_lite_nl_softmax_iu8ou8+0x6a2>
 8009424:	fab3 f483 	clz	r4, r3
 8009428:	fa03 f104 	lsl.w	r1, r3, r4
 800942c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009430:	17da      	asrs	r2, r3, #31
 8009432:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009436:	bf08      	it	eq
 8009438:	2900      	cmpeq	r1, #0
 800943a:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 800943e:	f000 815f 	beq.w	8009700 <forward_lite_nl_softmax_iu8ou8+0x6a4>
 8009442:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 8009446:	f142 0200 	adc.w	r2, r2, #0
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8009450:	49a7      	ldr	r1, [pc, #668]	; (80096f0 <forward_lite_nl_softmax_iu8ou8+0x694>)
 8009452:	4fa8      	ldr	r7, [pc, #672]	; (80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>)
 8009454:	1052      	asrs	r2, r2, #1
 8009456:	425d      	negs	r5, r3
 8009458:	fb01 5502 	mla	r5, r1, r2, r5
 800945c:	fba3 1601 	umull	r1, r6, r3, r1
 8009460:	19c9      	adds	r1, r1, r7
 8009462:	4435      	add	r5, r6
 8009464:	f165 0500 	sbc.w	r5, r5, #0
 8009468:	2d00      	cmp	r5, #0
 800946a:	da04      	bge.n	8009476 <forward_lite_nl_softmax_iu8ou8+0x41a>
 800946c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009470:	1809      	adds	r1, r1, r0
 8009472:	f145 0500 	adc.w	r5, r5, #0
 8009476:	0fc9      	lsrs	r1, r1, #31
 8009478:	ea41 0045 	orr.w	r0, r1, r5, lsl #1
 800947c:	f100 315a 	add.w	r1, r0, #1515870810	; 0x5a5a5a5a
 8009480:	17ce      	asrs	r6, r1, #31
 8009482:	fb01 f502 	mul.w	r5, r1, r2
 8009486:	fb03 5506 	mla	r5, r3, r6, r5
 800948a:	fba1 ce03 	umull	ip, lr, r1, r3
 800948e:	f11c 4780 	adds.w	r7, ip, #1073741824	; 0x40000000
 8009492:	44ae      	add	lr, r5
 8009494:	f14e 0500 	adc.w	r5, lr, #0
 8009498:	0fff      	lsrs	r7, r7, #31
 800949a:	ea47 0745 	orr.w	r7, r7, r5, lsl #1
 800949e:	f1d7 5700 	rsbs	r7, r7, #536870912	; 0x20000000
 80094a2:	f140 81da 	bpl.w	800985a <forward_lite_nl_softmax_iu8ou8+0x7fe>
 80094a6:	4e93      	ldr	r6, [pc, #588]	; (80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>)
 80094a8:	f04f 38ff 	mov.w	r8, #4294967295
 80094ac:	fbc1 6807 	smlal	r6, r8, r1, r7
 80094b0:	f1b8 0f00 	cmp.w	r8, #0
 80094b4:	da04      	bge.n	80094c0 <forward_lite_nl_softmax_iu8ou8+0x464>
 80094b6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80094ba:	1976      	adds	r6, r6, r5
 80094bc:	f148 0800 	adc.w	r8, r8, #0
 80094c0:	0ff6      	lsrs	r6, r6, #31
 80094c2:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 80094c6:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 80094ca:	f300 8191 	bgt.w	80097f0 <forward_lite_nl_softmax_iu8ou8+0x794>
 80094ce:	4f89      	ldr	r7, [pc, #548]	; (80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>)
 80094d0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80094d4:	07d6      	lsls	r6, r2, #31
 80094d6:	07d9      	lsls	r1, r3, #31
 80094d8:	ebbc 0101 	subs.w	r1, ip, r1
 80094dc:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
 80094e0:	eb6e 0606 	sbc.w	r6, lr, r6
 80094e4:	19c9      	adds	r1, r1, r7
 80094e6:	f166 0600 	sbc.w	r6, r6, #0
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	da04      	bge.n	80094f8 <forward_lite_nl_softmax_iu8ou8+0x49c>
 80094ee:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80094f2:	19c9      	adds	r1, r1, r7
 80094f4:	f146 0600 	adc.w	r6, r6, #0
 80094f8:	0fc9      	lsrs	r1, r1, #31
 80094fa:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 80094fe:	4e7d      	ldr	r6, [pc, #500]	; (80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>)
 8009500:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8009504:	f04f 37ff 	mov.w	r7, #4294967295
 8009508:	fbc1 6705 	smlal	r6, r7, r1, r5
 800950c:	2f00      	cmp	r7, #0
 800950e:	da04      	bge.n	800951a <forward_lite_nl_softmax_iu8ou8+0x4be>
 8009510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009514:	1876      	adds	r6, r6, r1
 8009516:	f147 0700 	adc.w	r7, r7, #0
 800951a:	0ff1      	lsrs	r1, r6, #31
 800951c:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 8009520:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009524:	f2c0 80a6 	blt.w	8009674 <forward_lite_nl_softmax_iu8ou8+0x618>
 8009528:	f1a0 35a5 	sub.w	r5, r0, #2779096485	; 0xa5a5a5a5
 800952c:	3d02      	subs	r5, #2
 800952e:	2600      	movs	r6, #0
 8009530:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009534:	2700      	movs	r7, #0
 8009536:	fb05 f202 	mul.w	r2, r5, r2
 800953a:	17e9      	asrs	r1, r5, #31
 800953c:	fb03 2201 	mla	r2, r3, r1, r2
 8009540:	fba5 3c03 	umull	r3, ip, r5, r3
 8009544:	181b      	adds	r3, r3, r0
 8009546:	4462      	add	r2, ip
 8009548:	eb42 0707 	adc.w	r7, r2, r7
 800954c:	2f00      	cmp	r7, #0
 800954e:	da04      	bge.n	800955a <forward_lite_nl_softmax_iu8ou8+0x4fe>
 8009550:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009554:	189b      	adds	r3, r3, r2
 8009556:	f147 0700 	adc.w	r7, r7, #0
 800955a:	0fdb      	lsrs	r3, r3, #31
 800955c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8009560:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8009564:	0fd8      	lsrs	r0, r3, #31
 8009566:	42b0      	cmp	r0, r6
 8009568:	4a62      	ldr	r2, [pc, #392]	; (80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>)
 800956a:	bf06      	itte	eq
 800956c:	2000      	moveq	r0, #0
 800956e:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8009572:	f04f 30ff 	movne.w	r0, #4294967295
 8009576:	fb03 f101 	mul.w	r1, r3, r1
 800957a:	17de      	asrs	r6, r3, #31
 800957c:	fb05 1106 	mla	r1, r5, r6, r1
 8009580:	fba3 3605 	umull	r3, r6, r3, r5
 8009584:	189b      	adds	r3, r3, r2
 8009586:	4431      	add	r1, r6
 8009588:	eb41 0000 	adc.w	r0, r1, r0
 800958c:	2800      	cmp	r0, #0
 800958e:	da04      	bge.n	800959a <forward_lite_nl_softmax_iu8ou8+0x53e>
 8009590:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009594:	189b      	adds	r3, r3, r2
 8009596:	f140 0000 	adc.w	r0, r0, #0
 800959a:	0fdb      	lsrs	r3, r3, #31
 800959c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80095a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a4:	f2c0 8096 	blt.w	80096d4 <forward_lite_nl_softmax_iu8ou8+0x678>
 80095a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095ac:	440d      	add	r5, r1
 80095ae:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80095b2:	bfb8      	it	lt
 80095b4:	0069      	lsllt	r1, r5, #1
 80095b6:	9b02      	ldr	r3, [sp, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d044      	beq.n	8009646 <forward_lite_nl_softmax_iu8ou8+0x5ea>
 80095bc:	2601      	movs	r6, #1
 80095be:	40a6      	lsls	r6, r4
 80095c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095c2:	f8df c130 	ldr.w	ip, [pc, #304]	; 80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>
 80095c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80095c8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80095cc:	3e01      	subs	r6, #1
 80095ce:	ea4f 0866 	mov.w	r8, r6, asr #1
 80095d2:	f108 0901 	add.w	r9, r8, #1
 80095d6:	0fcf      	lsrs	r7, r1, #31
 80095d8:	1e5d      	subs	r5, r3, #1
 80095da:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 80095de:	e009      	b.n	80095f4 <forward_lite_nl_softmax_iu8ou8+0x598>
 80095e0:	4590      	cmp	r8, r2
 80095e2:	da00      	bge.n	80095e6 <forward_lite_nl_softmax_iu8ou8+0x58a>
 80095e4:	3301      	adds	r3, #1
 80095e6:	2bfe      	cmp	r3, #254	; 0xfe
 80095e8:	dd40      	ble.n	800966c <forward_lite_nl_softmax_iu8ou8+0x610>
 80095ea:	23ff      	movs	r3, #255	; 0xff
 80095ec:	4582      	cmp	sl, r0
 80095ee:	f805 3f01 	strb.w	r3, [r5, #1]!
 80095f2:	d028      	beq.n	8009646 <forward_lite_nl_softmax_iu8ou8+0x5ea>
 80095f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80095f8:	ea4f 73db 	mov.w	r3, fp, lsr #31
 80095fc:	42bb      	cmp	r3, r7
 80095fe:	bf0b      	itete	eq
 8009600:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8009604:	4662      	movne	r2, ip
 8009606:	2300      	moveq	r3, #0
 8009608:	f04f 33ff 	movne.w	r3, #4294967295
 800960c:	fbcb 2301 	smlal	r2, r3, fp, r1
 8009610:	2b00      	cmp	r3, #0
 8009612:	da03      	bge.n	800961c <forward_lite_nl_softmax_iu8ou8+0x5c0>
 8009614:	eb12 020e 	adds.w	r2, r2, lr
 8009618:	f143 0300 	adc.w	r3, r3, #0
 800961c:	0fd2      	lsrs	r2, r2, #31
 800961e:	458b      	cmp	fp, r1
 8009620:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8009624:	d104      	bne.n	8009630 <forward_lite_nl_softmax_iu8ou8+0x5d4>
 8009626:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800962a:	bf08      	it	eq
 800962c:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8009630:	ea06 0203 	and.w	r2, r6, r3
 8009634:	4123      	asrs	r3, r4
 8009636:	d5d3      	bpl.n	80095e0 <forward_lite_nl_softmax_iu8ou8+0x584>
 8009638:	4591      	cmp	r9, r2
 800963a:	dbd3      	blt.n	80095e4 <forward_lite_nl_softmax_iu8ou8+0x588>
 800963c:	2300      	movs	r3, #0
 800963e:	4582      	cmp	sl, r0
 8009640:	f805 3f01 	strb.w	r3, [r5, #1]!
 8009644:	d1d6      	bne.n	80095f4 <forward_lite_nl_softmax_iu8ou8+0x598>
 8009646:	9b01      	ldr	r3, [sp, #4]
 8009648:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800964a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800964c:	4413      	add	r3, r2
 800964e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	440a      	add	r2, r1
 8009654:	9215      	str	r2, [sp, #84]	; 0x54
 8009656:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009658:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800965a:	440a      	add	r2, r1
 800965c:	9216      	str	r2, [sp, #88]	; 0x58
 800965e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009660:	429a      	cmp	r2, r3
 8009662:	f63f ad10 	bhi.w	8009086 <forward_lite_nl_softmax_iu8ou8+0x2a>
 8009666:	b01b      	add	sp, #108	; 0x6c
 8009668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966c:	2b00      	cmp	r3, #0
 800966e:	dde5      	ble.n	800963c <forward_lite_nl_softmax_iu8ou8+0x5e0>
 8009670:	b2db      	uxtb	r3, r3
 8009672:	e7bb      	b.n	80095ec <forward_lite_nl_softmax_iu8ou8+0x590>
 8009674:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 8009678:	bfc8      	it	gt
 800967a:	f04f 0800 	movgt.w	r8, #0
 800967e:	f300 8106 	bgt.w	800988e <forward_lite_nl_softmax_iu8ou8+0x832>
 8009682:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8009686:	17e8      	asrs	r0, r5, #31
 8009688:	491a      	ldr	r1, [pc, #104]	; (80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>)
 800968a:	fb05 f202 	mul.w	r2, r5, r2
 800968e:	fb03 2200 	mla	r2, r3, r0, r2
 8009692:	fba5 3003 	umull	r3, r0, r5, r3
 8009696:	185b      	adds	r3, r3, r1
 8009698:	4410      	add	r0, r2
 800969a:	f160 0000 	sbc.w	r0, r0, #0
 800969e:	2800      	cmp	r0, #0
 80096a0:	da04      	bge.n	80096ac <forward_lite_nl_softmax_iu8ou8+0x650>
 80096a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80096a6:	189b      	adds	r3, r3, r2
 80096a8:	f140 0000 	adc.w	r0, r0, #0
 80096ac:	0fdb      	lsrs	r3, r3, #31
 80096ae:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80096b2:	f1c3 5200 	rsb	r2, r3, #536870912	; 0x20000000
 80096b6:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <forward_lite_nl_softmax_iu8ou8+0x698>)
 80096b8:	f04f 31ff 	mov.w	r1, #4294967295
 80096bc:	fbc5 3102 	smlal	r3, r1, r5, r2
 80096c0:	2900      	cmp	r1, #0
 80096c2:	da04      	bge.n	80096ce <forward_lite_nl_softmax_iu8ou8+0x672>
 80096c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80096c8:	189b      	adds	r3, r3, r2
 80096ca:	f141 0100 	adc.w	r1, r1, #0
 80096ce:	0fdb      	lsrs	r3, r3, #31
 80096d0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80096d4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80096d8:	f300 80db 	bgt.w	8009892 <forward_lite_nl_softmax_iu8ou8+0x836>
 80096dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80096e0:	0069      	lsls	r1, r5, #1
 80096e2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80096e6:	bfd8      	it	le
 80096e8:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 80096ec:	e763      	b.n	80095b6 <forward_lite_nl_softmax_iu8ou8+0x55a>
 80096ee:	bf00      	nop
 80096f0:	c3c3c3c4 	.word	0xc3c3c3c4
 80096f4:	c0000001 	.word	0xc0000001
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	f47f acd3 	bne.w	80090a4 <forward_lite_nl_softmax_iu8ou8+0x48>
 80096fe:	2403      	movs	r4, #3
 8009700:	4869      	ldr	r0, [pc, #420]	; (80098a8 <forward_lite_nl_softmax_iu8ou8+0x84c>)
 8009702:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80098c0 <forward_lite_nl_softmax_iu8ou8+0x864>
 8009706:	f04f 37ff 	mov.w	r7, #4294967295
 800970a:	f04f 0c00 	mov.w	ip, #0
 800970e:	f04f 0801 	mov.w	r8, #1
 8009712:	4605      	mov	r5, r0
 8009714:	463b      	mov	r3, r7
 8009716:	463a      	mov	r2, r7
 8009718:	46c1      	mov	r9, r8
 800971a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800971e:	2600      	movs	r6, #0
 8009720:	eb11 010e 	adds.w	r1, r1, lr
 8009724:	eb46 060c 	adc.w	r6, r6, ip
 8009728:	2e00      	cmp	r6, #0
 800972a:	da05      	bge.n	8009738 <forward_lite_nl_softmax_iu8ou8+0x6dc>
 800972c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8009730:	eb11 010c 	adds.w	r1, r1, ip
 8009734:	f146 0600 	adc.w	r6, r6, #0
 8009738:	0fc9      	lsrs	r1, r1, #31
 800973a:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 800973e:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 8009742:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 8009746:	45cc      	cmp	ip, r9
 8009748:	4e58      	ldr	r6, [pc, #352]	; (80098ac <forward_lite_nl_softmax_iu8ou8+0x850>)
 800974a:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800974e:	fb01 f707 	mul.w	r7, r1, r7
 8009752:	fb00 770c 	mla	r7, r0, ip, r7
 8009756:	bf08      	it	eq
 8009758:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 800975c:	fba1 0100 	umull	r0, r1, r1, r0
 8009760:	bf0c      	ite	eq
 8009762:	f04f 0c00 	moveq.w	ip, #0
 8009766:	f04f 3cff 	movne.w	ip, #4294967295
 800976a:	440f      	add	r7, r1
 800976c:	1986      	adds	r6, r0, r6
 800976e:	eb47 070c 	adc.w	r7, r7, ip
 8009772:	2f00      	cmp	r7, #0
 8009774:	da04      	bge.n	8009780 <forward_lite_nl_softmax_iu8ou8+0x724>
 8009776:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800977a:	1876      	adds	r6, r6, r1
 800977c:	f147 0700 	adc.w	r7, r7, #0
 8009780:	0ff6      	lsrs	r6, r6, #31
 8009782:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 8009786:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800978a:	4631      	mov	r1, r6
 800978c:	da23      	bge.n	80097d6 <forward_lite_nl_softmax_iu8ou8+0x77a>
 800978e:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 8009792:	dc7c      	bgt.n	800988e <forward_lite_nl_softmax_iu8ou8+0x832>
 8009794:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8009798:	f1b8 0f00 	cmp.w	r8, #0
 800979c:	f43f af73 	beq.w	8009686 <forward_lite_nl_softmax_iu8ou8+0x62a>
 80097a0:	fb05 f202 	mul.w	r2, r5, r2
 80097a4:	17e9      	asrs	r1, r5, #31
 80097a6:	fb03 2201 	mla	r2, r3, r1, r2
 80097aa:	fba5 3003 	umull	r3, r0, r5, r3
 80097ae:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 80097b2:	eb42 0200 	adc.w	r2, r2, r0
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	da04      	bge.n	80097c4 <forward_lite_nl_softmax_iu8ou8+0x768>
 80097ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80097be:	181b      	adds	r3, r3, r0
 80097c0:	f142 0200 	adc.w	r2, r2, #0
 80097c4:	0fdb      	lsrs	r3, r3, #31
 80097c6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80097ca:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80097ce:	4a37      	ldr	r2, [pc, #220]	; (80098ac <forward_lite_nl_softmax_iu8ou8+0x850>)
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e6cf      	b.n	8009576 <forward_lite_nl_softmax_iu8ou8+0x51a>
 80097d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097da:	440d      	add	r5, r1
 80097dc:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 80097e0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80097e4:	f43f aea4 	beq.w	8009530 <forward_lite_nl_softmax_iu8ou8+0x4d4>
 80097e8:	4830      	ldr	r0, [pc, #192]	; (80098ac <forward_lite_nl_softmax_iu8ou8+0x850>)
 80097ea:	f04f 37ff 	mov.w	r7, #4294967295
 80097ee:	e6a2      	b.n	8009536 <forward_lite_nl_softmax_iu8ou8+0x4da>
 80097f0:	eb01 0586 	add.w	r5, r1, r6, lsl #2
 80097f4:	17ef      	asrs	r7, r5, #31
 80097f6:	fb03 f107 	mul.w	r1, r3, r7
 80097fa:	fb05 1102 	mla	r1, r5, r2, r1
 80097fe:	fba3 ec05 	umull	lr, ip, r3, r5
 8009802:	2d00      	cmp	r5, #0
 8009804:	4628      	mov	r0, r5
 8009806:	448c      	add	ip, r1
 8009808:	da3e      	bge.n	8009888 <forward_lite_nl_softmax_iu8ou8+0x82c>
 800980a:	4928      	ldr	r1, [pc, #160]	; (80098ac <forward_lite_nl_softmax_iu8ou8+0x850>)
 800980c:	f04f 0901 	mov.w	r9, #1
 8009810:	f04f 0800 	mov.w	r8, #0
 8009814:	f04f 36ff 	mov.w	r6, #4294967295
 8009818:	e782      	b.n	8009720 <forward_lite_nl_softmax_iu8ou8+0x6c4>
 800981a:	4925      	ldr	r1, [pc, #148]	; (80098b0 <forward_lite_nl_softmax_iu8ou8+0x854>)
 800981c:	910e      	str	r1, [sp, #56]	; 0x38
 800981e:	2200      	movs	r2, #0
 8009820:	4924      	ldr	r1, [pc, #144]	; (80098b4 <forward_lite_nl_softmax_iu8ou8+0x858>)
 8009822:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <forward_lite_nl_softmax_iu8ou8+0x85c>)
 8009824:	9100      	str	r1, [sp, #0]
 8009826:	f04f 36ff 	mov.w	r6, #4294967295
 800982a:	4611      	mov	r1, r2
 800982c:	e9cd 2609 	strd	r2, r6, [sp, #36]	; 0x24
 8009830:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
 8009834:	9205      	str	r2, [sp, #20]
 8009836:	9312      	str	r3, [sp, #72]	; 0x48
 8009838:	9206      	str	r2, [sp, #24]
 800983a:	9207      	str	r2, [sp, #28]
 800983c:	4610      	mov	r0, r2
 800983e:	4614      	mov	r4, r2
 8009840:	4696      	mov	lr, r2
 8009842:	4690      	mov	r8, r2
 8009844:	e9cd 160f 	strd	r1, r6, [sp, #60]	; 0x3c
 8009848:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <forward_lite_nl_softmax_iu8ou8+0x860>)
 800984a:	9608      	str	r6, [sp, #32]
 800984c:	46b4      	mov	ip, r6
 800984e:	4637      	mov	r7, r6
 8009850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009854:	910d      	str	r1, [sp, #52]	; 0x34
 8009856:	9611      	str	r6, [sp, #68]	; 0x44
 8009858:	e4d1      	b.n	80091fe <forward_lite_nl_softmax_iu8ou8+0x1a2>
 800985a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800985e:	f04f 0800 	mov.w	r8, #0
 8009862:	4605      	mov	r5, r0
 8009864:	4640      	mov	r0, r8
 8009866:	fbc1 5007 	smlal	r5, r0, r1, r7
 800986a:	0fed      	lsrs	r5, r5, #31
 800986c:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 8009870:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8009874:	17ef      	asrs	r7, r5, #31
 8009876:	fb03 f107 	mul.w	r1, r3, r7
 800987a:	fb05 1102 	mla	r1, r5, r2, r1
 800987e:	fba3 ec05 	umull	lr, ip, r3, r5
 8009882:	4628      	mov	r0, r5
 8009884:	448c      	add	ip, r1
 8009886:	e747      	b.n	8009718 <forward_lite_nl_softmax_iu8ou8+0x6bc>
 8009888:	f04f 0800 	mov.w	r8, #0
 800988c:	e744      	b.n	8009718 <forward_lite_nl_softmax_iu8ou8+0x6bc>
 800988e:	0089      	lsls	r1, r1, #2
 8009890:	e7a3      	b.n	80097da <forward_lite_nl_softmax_iu8ou8+0x77e>
 8009892:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989a:	ea4f 0143 	mov.w	r1, r3, lsl #1
 800989e:	f6ff af20 	blt.w	80096e2 <forward_lite_nl_softmax_iu8ou8+0x686>
 80098a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098a6:	e686      	b.n	80095b6 <forward_lite_nl_softmax_iu8ou8+0x55a>
 80098a8:	b4b4b4b6 	.word	0xb4b4b4b6
 80098ac:	c0000001 	.word	0xc0000001
 80098b0:	01fffff8 	.word	0x01fffff8
 80098b4:	0fffffe0 	.word	0x0fffffe0
 80098b8:	40000100 	.word	0x40000100
 80098bc:	001fffff 	.word	0x001fffff
 80098c0:	4b4b4b4a 	.word	0x4b4b4b4a

080098c4 <align_factor>:
 80098c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80098c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80098cc:	b508      	push	{r3, lr}
 80098ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d2:	f04f 0300 	mov.w	r3, #0
 80098d6:	8003      	strh	r3, [r0, #0]
 80098d8:	d425      	bmi.n	8009926 <align_factor+0x62>
 80098da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80098e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80098e6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80098ea:	e005      	b.n	80098f8 <align_factor+0x34>
 80098ec:	8003      	strh	r3, [r0, #0]
 80098ee:	b293      	uxth	r3, r2
 80098f0:	428b      	cmp	r3, r1
 80098f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80098f6:	d02d      	beq.n	8009954 <align_factor+0x90>
 80098f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80098fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009900:	f103 32ff 	add.w	r2, r3, #4294967295
 8009904:	dcf2      	bgt.n	80098ec <align_factor+0x28>
 8009906:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009968 <align_factor+0xa4>
 800990a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800990e:	ee17 0a90 	vmov	r0, s15
 8009912:	f7f7 fa6f 	bl	8000df4 <__aeabi_f2lz>
 8009916:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800991a:	bf1c      	itt	ne
 800991c:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 8009920:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8009924:	bd08      	pop	{r3, pc}
 8009926:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800992a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992e:	ddd4      	ble.n	80098da <align_factor+0x16>
 8009930:	2301      	movs	r3, #1
 8009932:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009936:	e005      	b.n	8009944 <align_factor+0x80>
 8009938:	8003      	strh	r3, [r0, #0]
 800993a:	b293      	uxth	r3, r2
 800993c:	2b21      	cmp	r3, #33	; 0x21
 800993e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009942:	d00d      	beq.n	8009960 <align_factor+0x9c>
 8009944:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	f103 0201 	add.w	r2, r3, #1
 8009950:	d4f2      	bmi.n	8009938 <align_factor+0x74>
 8009952:	e7d8      	b.n	8009906 <align_factor+0x42>
 8009954:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8009958:	ee30 0a00 	vadd.f32	s0, s0, s0
 800995c:	8003      	strh	r3, [r0, #0]
 800995e:	e7d2      	b.n	8009906 <align_factor+0x42>
 8009960:	2300      	movs	r3, #0
 8009962:	8003      	strh	r3, [r0, #0]
 8009964:	4618      	mov	r0, r3
 8009966:	bd08      	pop	{r3, pc}
 8009968:	4f000000 	.word	0x4f000000

0800996c <align_factor_ch>:
 800996c:	b361      	cbz	r1, 80099c8 <align_factor_ch+0x5c>
 800996e:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8009972:	b530      	push	{r4, r5, lr}
 8009974:	f1a2 0c04 	sub.w	ip, r2, #4
 8009978:	f1a3 0e02 	sub.w	lr, r3, #2
 800997c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8009980:	2500      	movs	r5, #0
 8009982:	ecf0 7a01 	vldmia	r0!, {s15}
 8009986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998a:	ee17 2a90 	vmov	r2, s15
 800998e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009992:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8009996:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 800999a:	2a00      	cmp	r2, #0
 800999c:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 80099a0:	bfb8      	it	lt
 80099a2:	425b      	neglt	r3, r3
 80099a4:	291f      	cmp	r1, #31
 80099a6:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80099aa:	dc06      	bgt.n	80099ba <align_factor_ch+0x4e>
 80099ac:	4284      	cmp	r4, r0
 80099ae:	f82e 1f02 	strh.w	r1, [lr, #2]!
 80099b2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80099b6:	d1e4      	bne.n	8009982 <align_factor_ch+0x16>
 80099b8:	bd30      	pop	{r4, r5, pc}
 80099ba:	4284      	cmp	r4, r0
 80099bc:	f82e 5f02 	strh.w	r5, [lr, #2]!
 80099c0:	f84c 5f04 	str.w	r5, [ip, #4]!
 80099c4:	d1dd      	bne.n	8009982 <align_factor_ch+0x16>
 80099c6:	bd30      	pop	{r4, r5, pc}
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop

080099cc <st_sssa8_fully_connected>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	b097      	sub	sp, #92	; 0x5c
 80099d2:	460d      	mov	r5, r1
 80099d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80099d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d8:	9204      	str	r2, [sp, #16]
 80099da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80099de:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80099e0:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 80099e4:	6824      	ldr	r4, [r4, #0]
 80099e6:	9408      	str	r4, [sp, #32]
 80099e8:	1e4b      	subs	r3, r1, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	2a14      	cmp	r2, #20
 80099ee:	930d      	str	r3, [sp, #52]	; 0x34
 80099f0:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 80099f4:	9105      	str	r1, [sp, #20]
 80099f6:	bf9f      	itttt	ls
 80099f8:	2201      	movls	r2, #1
 80099fa:	408b      	lslls	r3, r1
 80099fc:	408a      	lslls	r2, r1
 80099fe:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 8009a02:	9309      	str	r3, [sp, #36]	; 0x24
 8009a04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a06:	4683      	mov	fp, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 81e4 	beq.w	8009dd6 <st_sssa8_fully_connected+0x40a>
 8009a0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a10:	9600      	str	r6, [sp, #0]
 8009a12:	b2b3      	uxth	r3, r6
 8009a14:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009a18:	9e04      	ldr	r6, [sp, #16]
 8009a1a:	0851      	lsrs	r1, r2, #1
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	9115      	str	r1, [sp, #84]	; 0x54
 8009a20:	4632      	mov	r2, r6
 8009a22:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009a24:	f000 fb52 	bl	800a0cc <st_int8_reordered_no_shift_zero>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	2c00      	cmp	r4, #0
 8009a2c:	f000 8149 	beq.w	8009cc2 <st_sssa8_fully_connected+0x2f6>
 8009a30:	4634      	mov	r4, r6
 8009a32:	f1a6 0310 	sub.w	r3, r6, #16
 8009a36:	9e05      	ldr	r6, [sp, #20]
 8009a38:	1e4a      	subs	r2, r1, #1
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	1eb1      	subs	r1, r6, #2
 8009a3e:	fa00 f101 	lsl.w	r1, r0, r1
 8009a42:	9112      	str	r1, [sp, #72]	; 0x48
 8009a44:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009a46:	b292      	uxth	r2, r2
 8009a48:	3110      	adds	r1, #16
 8009a4a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009a4e:	920e      	str	r2, [sp, #56]	; 0x38
 8009a50:	1ee2      	subs	r2, r4, #3
 8009a52:	920f      	str	r2, [sp, #60]	; 0x3c
 8009a54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a56:	3208      	adds	r2, #8
 8009a58:	9206      	str	r2, [sp, #24]
 8009a5a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009a5c:	091b      	lsrs	r3, r3, #4
 8009a5e:	3301      	adds	r3, #1
 8009a60:	3202      	adds	r2, #2
 8009a62:	9207      	str	r2, [sp, #28]
 8009a64:	011a      	lsls	r2, r3, #4
 8009a66:	920a      	str	r2, [sp, #40]	; 0x28
 8009a68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a6a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8009a70:	1f23      	subs	r3, r4, #4
 8009a72:	9311      	str	r3, [sp, #68]	; 0x44
 8009a74:	1b83      	subs	r3, r0, r6
 8009a76:	9314      	str	r3, [sp, #80]	; 0x50
 8009a78:	9a06      	ldr	r2, [sp, #24]
 8009a7a:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 8009a7e:	9a04      	ldr	r2, [sp, #16]
 8009a80:	18ac      	adds	r4, r5, r2
 8009a82:	2a0f      	cmp	r2, #15
 8009a84:	9403      	str	r4, [sp, #12]
 8009a86:	f340 81a0 	ble.w	8009dca <st_sssa8_fully_connected+0x3fe>
 8009a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8c:	18ae      	adds	r6, r5, r2
 8009a8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a90:	460f      	mov	r7, r1
 8009a92:	f8d4 e000 	ldr.w	lr, [r4]
 8009a96:	6828      	ldr	r0, [r5, #0]
 8009a98:	fa2f fc8e 	sxtb16	ip, lr
 8009a9c:	ea4f 2130 	mov.w	r1, r0, ror #8
 8009aa0:	ea4f 283e 	mov.w	r8, lr, ror #8
 8009aa4:	fa2f f080 	sxtb16	r0, r0
 8009aa8:	f8d2 e000 	ldr.w	lr, [r2]
 8009aac:	fa2f f181 	sxtb16	r1, r1
 8009ab0:	fa2f f888 	sxtb16	r8, r8
 8009ab4:	fb2e 3300 	smlad	r3, lr, r0, r3
 8009ab8:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 8009abc:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009ac0:	fb2c 3301 	smlad	r3, ip, r1, r3
 8009ac4:	fb2c e808 	smlad	r8, ip, r8, lr
 8009ac8:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8009acc:	686f      	ldr	r7, [r5, #4]
 8009ace:	fa2f f08c 	sxtb16	r0, ip
 8009ad2:	ea4f 2137 	mov.w	r1, r7, ror #8
 8009ad6:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8009ada:	fa2f f787 	sxtb16	r7, r7
 8009ade:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009ae2:	fa2f f181 	sxtb16	r1, r1
 8009ae6:	fa2f fe8e 	sxtb16	lr, lr
 8009aea:	fb2c 3707 	smlad	r7, ip, r7, r3
 8009aee:	fb2c 8c00 	smlad	ip, ip, r0, r8
 8009af2:	68d0      	ldr	r0, [r2, #12]
 8009af4:	fb20 7701 	smlad	r7, r0, r1, r7
 8009af8:	fb20 ce0e 	smlad	lr, r0, lr, ip
 8009afc:	68a0      	ldr	r0, [r4, #8]
 8009afe:	68a9      	ldr	r1, [r5, #8]
 8009b00:	fa2f fc80 	sxtb16	ip, r0
 8009b04:	ea4f 2331 	mov.w	r3, r1, ror #8
 8009b08:	ea4f 2a30 	mov.w	sl, r0, ror #8
 8009b0c:	fa2f f181 	sxtb16	r1, r1
 8009b10:	6910      	ldr	r0, [r2, #16]
 8009b12:	fa2f f383 	sxtb16	r3, r3
 8009b16:	fa2f fa8a 	sxtb16	sl, sl
 8009b1a:	fb20 7101 	smlad	r1, r0, r1, r7
 8009b1e:	fb20 e00c 	smlad	r0, r0, ip, lr
 8009b22:	6957      	ldr	r7, [r2, #20]
 8009b24:	fb27 1103 	smlad	r1, r7, r3, r1
 8009b28:	fb27 0a0a 	smlad	sl, r7, sl, r0
 8009b2c:	68e7      	ldr	r7, [r4, #12]
 8009b2e:	68e8      	ldr	r0, [r5, #12]
 8009b30:	fa2f fc87 	sxtb16	ip, r7
 8009b34:	ea4f 2930 	mov.w	r9, r0, ror #8
 8009b38:	ea4f 2837 	mov.w	r8, r7, ror #8
 8009b3c:	3510      	adds	r5, #16
 8009b3e:	6997      	ldr	r7, [r2, #24]
 8009b40:	fa2f f380 	sxtb16	r3, r0
 8009b44:	3410      	adds	r4, #16
 8009b46:	fa2f f989 	sxtb16	r9, r9
 8009b4a:	fa2f f888 	sxtb16	r8, r8
 8009b4e:	fb27 1303 	smlad	r3, r7, r3, r1
 8009b52:	fb27 a70c 	smlad	r7, r7, ip, sl
 8009b56:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8009b5a:	3220      	adds	r2, #32
 8009b5c:	fb2e 3309 	smlad	r3, lr, r9, r3
 8009b60:	fb2e 7708 	smlad	r7, lr, r8, r7
 8009b64:	42b5      	cmp	r5, r6
 8009b66:	d194      	bne.n	8009a92 <st_sssa8_fully_connected+0xc6>
 8009b68:	9a03      	ldr	r2, [sp, #12]
 8009b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b6c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8009b70:	4402      	add	r2, r0
 8009b72:	4639      	mov	r1, r7
 8009b74:	9203      	str	r2, [sp, #12]
 8009b76:	4681      	mov	r9, r0
 8009b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b7a:	4591      	cmp	r9, r2
 8009b7c:	f280 8123 	bge.w	8009dc6 <st_sssa8_fully_connected+0x3fa>
 8009b80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b82:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009b86:	eba2 0a09 	sub.w	sl, r2, r9
 8009b8a:	ea4f 029a 	mov.w	r2, sl, lsr #2
 8009b8e:	f102 0a01 	add.w	sl, r2, #1
 8009b92:	920c      	str	r2, [sp, #48]	; 0x30
 8009b94:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8009b98:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b9a:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 8009b9e:	465f      	mov	r7, fp
 8009ba0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ba4:	f856 eb04 	ldr.w	lr, [r6], #4
 8009ba8:	fa2f f082 	sxtb16	r0, r2
 8009bac:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 8009bb0:	ea4f 2532 	mov.w	r5, r2, ror #8
 8009bb4:	fa2f fe8e 	sxtb16	lr, lr
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	fa2f fc8c 	sxtb16	ip, ip
 8009bbe:	fa2f f585 	sxtb16	r5, r5
 8009bc2:	fb22 330e 	smlad	r3, r2, lr, r3
 8009bc6:	fb22 1200 	smlad	r2, r2, r0, r1
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	3708      	adds	r7, #8
 8009bce:	fb21 330c 	smlad	r3, r1, ip, r3
 8009bd2:	fb21 2105 	smlad	r1, r1, r5, r2
 8009bd6:	42a6      	cmp	r6, r4
 8009bd8:	d1e2      	bne.n	8009ba0 <st_sssa8_fully_connected+0x1d4>
 8009bda:	9a03      	ldr	r2, [sp, #12]
 8009bdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009bde:	4402      	add	r2, r0
 8009be0:	9203      	str	r2, [sp, #12]
 8009be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009be4:	f109 0904 	add.w	r9, r9, #4
 8009be8:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 8009bec:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8009bf0:	9d04      	ldr	r5, [sp, #16]
 8009bf2:	454d      	cmp	r5, r9
 8009bf4:	dd38      	ble.n	8009c68 <st_sssa8_fully_connected+0x29c>
 8009bf6:	f9bb 2000 	ldrsh.w	r2, [fp]
 8009bfa:	f994 0000 	ldrsb.w	r0, [r4]
 8009bfe:	9e03      	ldr	r6, [sp, #12]
 8009c00:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009c04:	f996 0000 	ldrsb.w	r0, [r6]
 8009c08:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009c0c:	f109 0201 	add.w	r2, r9, #1
 8009c10:	42aa      	cmp	r2, r5
 8009c12:	da25      	bge.n	8009c60 <st_sssa8_fully_connected+0x294>
 8009c14:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8009c18:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009c1c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009c20:	f996 0001 	ldrsb.w	r0, [r6, #1]
 8009c24:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009c28:	f109 0202 	add.w	r2, r9, #2
 8009c2c:	42aa      	cmp	r2, r5
 8009c2e:	da17      	bge.n	8009c60 <st_sssa8_fully_connected+0x294>
 8009c30:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8009c34:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8009c38:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009c3c:	f996 0002 	ldrsb.w	r0, [r6, #2]
 8009c40:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009c44:	f109 0203 	add.w	r2, r9, #3
 8009c48:	4295      	cmp	r5, r2
 8009c4a:	dd09      	ble.n	8009c60 <st_sssa8_fully_connected+0x294>
 8009c4c:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8009c50:	f996 0003 	ldrsb.w	r0, [r6, #3]
 8009c54:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009c58:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8009c5c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009c60:	9a04      	ldr	r2, [sp, #16]
 8009c62:	eba2 0909 	sub.w	r9, r2, r9
 8009c66:	444c      	add	r4, r9
 8009c68:	9a05      	ldr	r2, [sp, #20]
 8009c6a:	2a15      	cmp	r2, #21
 8009c6c:	dd7b      	ble.n	8009d66 <st_sssa8_fully_connected+0x39a>
 8009c6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009c70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c72:	9a08      	ldr	r2, [sp, #32]
 8009c74:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c76:	fb53 0302 	smmla	r3, r3, r2, r0
 8009c7a:	412b      	asrs	r3, r5
 8009c7c:	4433      	add	r3, r6
 8009c7e:	fb51 0102 	smmla	r1, r1, r2, r0
 8009c82:	f303 0307 	ssat	r3, #8, r3
 8009c86:	9a07      	ldr	r2, [sp, #28]
 8009c88:	4129      	asrs	r1, r5
 8009c8a:	f802 3c02 	strb.w	r3, [r2, #-2]
 8009c8e:	198b      	adds	r3, r1, r6
 8009c90:	f303 0307 	ssat	r3, #8, r3
 8009c94:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c98:	9a04      	ldr	r2, [sp, #16]
 8009c9a:	9b06      	ldr	r3, [sp, #24]
 8009c9c:	18a5      	adds	r5, r4, r2
 8009c9e:	9a07      	ldr	r2, [sp, #28]
 8009ca0:	3202      	adds	r2, #2
 8009ca2:	9207      	str	r2, [sp, #28]
 8009ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	9306      	str	r3, [sp, #24]
 8009cac:	f47f aee4 	bne.w	8009a78 <st_sssa8_fully_connected+0xac>
 8009cb0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009cb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cb4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009cb8:	9225      	str	r2, [sp, #148]	; 0x94
 8009cba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cc0:	9324      	str	r3, [sp, #144]	; 0x90
 8009cc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cc4:	07db      	lsls	r3, r3, #31
 8009cc6:	d54a      	bpl.n	8009d5e <st_sssa8_fully_connected+0x392>
 8009cc8:	9a04      	ldr	r2, [sp, #16]
 8009cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ccc:	0897      	lsrs	r7, r2, #2
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f000 8173 	beq.w	8009fba <st_sssa8_fully_connected+0x5ee>
 8009cd4:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009cd6:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8009cda:	f855 2b04 	ldr.w	r2, [r5], #4
 8009cde:	6804      	ldr	r4, [r0, #0]
 8009ce0:	ea4f 2132 	mov.w	r1, r2, ror #8
 8009ce4:	fa2f f282 	sxtb16	r2, r2
 8009ce8:	fa2f f181 	sxtb16	r1, r1
 8009cec:	fb24 3202 	smlad	r2, r4, r2, r3
 8009cf0:	6843      	ldr	r3, [r0, #4]
 8009cf2:	3008      	adds	r0, #8
 8009cf4:	fb23 2301 	smlad	r3, r3, r1, r2
 8009cf8:	42b5      	cmp	r5, r6
 8009cfa:	d1ee      	bne.n	8009cda <st_sssa8_fully_connected+0x30e>
 8009cfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009cfe:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8009d02:	9226      	str	r2, [sp, #152]	; 0x98
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	f012 0203 	ands.w	r2, r2, #3
 8009d0a:	d016      	beq.n	8009d3a <st_sssa8_fully_connected+0x36e>
 8009d0c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009d0e:	f996 1000 	ldrsb.w	r1, [r6]
 8009d12:	8800      	ldrh	r0, [r0, #0]
 8009d14:	3a01      	subs	r2, #1
 8009d16:	b292      	uxth	r2, r2
 8009d18:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009d1c:	b16a      	cbz	r2, 8009d3a <st_sssa8_fully_connected+0x36e>
 8009d1e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009d20:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8009d24:	8840      	ldrh	r0, [r0, #2]
 8009d26:	2a01      	cmp	r2, #1
 8009d28:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009d2c:	d005      	beq.n	8009d3a <st_sssa8_fully_connected+0x36e>
 8009d2e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009d30:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009d34:	8889      	ldrh	r1, [r1, #4]
 8009d36:	fb11 3302 	smlabb	r3, r1, r2, r3
 8009d3a:	9a05      	ldr	r2, [sp, #20]
 8009d3c:	2a15      	cmp	r2, #21
 8009d3e:	f340 811a 	ble.w	8009f76 <st_sssa8_fully_connected+0x5aa>
 8009d42:	1e91      	subs	r1, r2, #2
 8009d44:	2201      	movs	r2, #1
 8009d46:	408a      	lsls	r2, r1
 8009d48:	9908      	ldr	r1, [sp, #32]
 8009d4a:	fb53 2301 	smmla	r3, r3, r1, r2
 8009d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d50:	4113      	asrs	r3, r2
 8009d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d54:	4413      	add	r3, r2
 8009d56:	f303 0307 	ssat	r3, #8, r3
 8009d5a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009d5c:	7013      	strb	r3, [r2, #0]
 8009d5e:	2000      	movs	r0, #0
 8009d60:	b017      	add	sp, #92	; 0x5c
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d66:	2a00      	cmp	r2, #0
 8009d68:	dd13      	ble.n	8009d92 <st_sssa8_fully_connected+0x3c6>
 8009d6a:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	0049      	lsls	r1, r1, #1
 8009d72:	fb53 5300 	smmla	r3, r3, r0, r5
 8009d76:	fb51 5100 	smmla	r1, r1, r0, r5
 8009d7a:	4113      	asrs	r3, r2
 8009d7c:	f303 0307 	ssat	r3, #8, r3
 8009d80:	9807      	ldr	r0, [sp, #28]
 8009d82:	4111      	asrs	r1, r2
 8009d84:	f800 3c02 	strb.w	r3, [r0, #-2]
 8009d88:	f301 0107 	ssat	r1, #8, r1
 8009d8c:	f800 1c01 	strb.w	r1, [r0, #-1]
 8009d90:	e782      	b.n	8009c98 <st_sssa8_fully_connected+0x2cc>
 8009d92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d94:	4093      	lsls	r3, r2
 8009d96:	f303 031f 	ssat	r3, #32, r3
 8009d9a:	9808      	ldr	r0, [sp, #32]
 8009d9c:	fb53 f310 	smmulr	r3, r3, r0
 8009da0:	fa01 f202 	lsl.w	r2, r1, r2
 8009da4:	f302 021f 	ssat	r2, #32, r2
 8009da8:	fb52 f210 	smmulr	r2, r2, r0
 8009dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dae:	440b      	add	r3, r1
 8009db0:	f303 0307 	ssat	r3, #8, r3
 8009db4:	9807      	ldr	r0, [sp, #28]
 8009db6:	440a      	add	r2, r1
 8009db8:	f800 3c02 	strb.w	r3, [r0, #-2]
 8009dbc:	f302 0207 	ssat	r2, #8, r2
 8009dc0:	f800 2c01 	strb.w	r2, [r0, #-1]
 8009dc4:	e768      	b.n	8009c98 <st_sssa8_fully_connected+0x2cc>
 8009dc6:	4634      	mov	r4, r6
 8009dc8:	e712      	b.n	8009bf0 <st_sssa8_fully_connected+0x224>
 8009dca:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8009dce:	462e      	mov	r6, r5
 8009dd0:	f04f 0900 	mov.w	r9, #0
 8009dd4:	e6d0      	b.n	8009b78 <st_sssa8_fully_connected+0x1ac>
 8009dd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dd8:	4274      	negs	r4, r6
 8009dda:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0bd      	beq.n	8009d5e <st_sssa8_fully_connected+0x392>
 8009de2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009de4:	9904      	ldr	r1, [sp, #16]
 8009de6:	9805      	ldr	r0, [sp, #20]
 8009de8:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8009dec:	f8cd b010 	str.w	fp, [sp, #16]
 8009df0:	3301      	adds	r3, #1
 8009df2:	18d3      	adds	r3, r2, r3
 8009df4:	f1a1 0810 	sub.w	r8, r1, #16
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	f102 0e01 	add.w	lr, r2, #1
 8009dfe:	f028 080f 	bic.w	r8, r8, #15
 8009e02:	2201      	movs	r2, #1
 8009e04:	1e83      	subs	r3, r0, #2
 8009e06:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0a:	f108 0810 	add.w	r8, r8, #16
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	4689      	mov	r9, r1
 8009e12:	eb0b 0308 	add.w	r3, fp, r8
 8009e16:	9306      	str	r3, [sp, #24]
 8009e18:	f1b9 0f0f 	cmp.w	r9, #15
 8009e1c:	eba2 0300 	sub.w	r3, r2, r0
 8009e20:	930a      	str	r3, [sp, #40]	; 0x28
 8009e22:	b236      	sxth	r6, r6
 8009e24:	f85a 3b04 	ldr.w	r3, [sl], #4
 8009e28:	f340 8081 	ble.w	8009f2e <st_sssa8_fully_connected+0x562>
 8009e2c:	9804      	ldr	r0, [sp, #16]
 8009e2e:	eb05 0c08 	add.w	ip, r5, r8
 8009e32:	462a      	mov	r2, r5
 8009e34:	f8d2 b000 	ldr.w	fp, [r2]
 8009e38:	6801      	ldr	r1, [r0, #0]
 8009e3a:	ea4f 273b 	mov.w	r7, fp, ror #8
 8009e3e:	ea4f 2531 	mov.w	r5, r1, ror #8
 8009e42:	fa2f fb8b 	sxtb16	fp, fp
 8009e46:	fa2f f787 	sxtb16	r7, r7
 8009e4a:	fa24 f181 	sxtab16	r1, r4, r1
 8009e4e:	fa24 f585 	sxtab16	r5, r4, r5
 8009e52:	fb21 330b 	smlad	r3, r1, fp, r3
 8009e56:	fb25 3107 	smlad	r1, r5, r7, r3
 8009e5a:	f8d2 b004 	ldr.w	fp, [r2, #4]
 8009e5e:	6843      	ldr	r3, [r0, #4]
 8009e60:	ea4f 273b 	mov.w	r7, fp, ror #8
 8009e64:	ea4f 2533 	mov.w	r5, r3, ror #8
 8009e68:	fa2f fb8b 	sxtb16	fp, fp
 8009e6c:	fa2f f787 	sxtb16	r7, r7
 8009e70:	fa24 f383 	sxtab16	r3, r4, r3
 8009e74:	fa24 f585 	sxtab16	r5, r4, r5
 8009e78:	fb23 110b 	smlad	r1, r3, fp, r1
 8009e7c:	fb25 1307 	smlad	r3, r5, r7, r1
 8009e80:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8009e84:	6885      	ldr	r5, [r0, #8]
 8009e86:	ea4f 273b 	mov.w	r7, fp, ror #8
 8009e8a:	ea4f 2135 	mov.w	r1, r5, ror #8
 8009e8e:	fa2f fb8b 	sxtb16	fp, fp
 8009e92:	fa2f f787 	sxtb16	r7, r7
 8009e96:	fa24 f585 	sxtab16	r5, r4, r5
 8009e9a:	fa24 f181 	sxtab16	r1, r4, r1
 8009e9e:	fb25 330b 	smlad	r3, r5, fp, r3
 8009ea2:	fb21 3507 	smlad	r5, r1, r7, r3
 8009ea6:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8009eaa:	68c3      	ldr	r3, [r0, #12]
 8009eac:	ea4f 273b 	mov.w	r7, fp, ror #8
 8009eb0:	ea4f 2133 	mov.w	r1, r3, ror #8
 8009eb4:	3210      	adds	r2, #16
 8009eb6:	3010      	adds	r0, #16
 8009eb8:	fa2f fb8b 	sxtb16	fp, fp
 8009ebc:	fa2f f787 	sxtb16	r7, r7
 8009ec0:	fa24 f383 	sxtab16	r3, r4, r3
 8009ec4:	fa24 f181 	sxtab16	r1, r4, r1
 8009ec8:	fb23 530b 	smlad	r3, r3, fp, r5
 8009ecc:	fb21 3307 	smlad	r3, r1, r7, r3
 8009ed0:	4594      	cmp	ip, r2
 8009ed2:	d1af      	bne.n	8009e34 <st_sssa8_fully_connected+0x468>
 8009ed4:	4645      	mov	r5, r8
 8009ed6:	45a9      	cmp	r9, r5
 8009ed8:	9f06      	ldr	r7, [sp, #24]
 8009eda:	dd2d      	ble.n	8009f38 <st_sssa8_fully_connected+0x56c>
 8009edc:	eba9 0505 	sub.w	r5, r9, r5
 8009ee0:	4415      	add	r5, r2
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	f917 0b01 	ldrsb.w	r0, [r7], #1
 8009ee8:	7809      	ldrb	r1, [r1, #0]
 8009eea:	3201      	adds	r2, #1
 8009eec:	b249      	sxtb	r1, r1
 8009eee:	1b80      	subs	r0, r0, r6
 8009ef0:	42aa      	cmp	r2, r5
 8009ef2:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009ef6:	d1f4      	bne.n	8009ee2 <st_sssa8_fully_connected+0x516>
 8009ef8:	9a05      	ldr	r2, [sp, #20]
 8009efa:	2a15      	cmp	r2, #21
 8009efc:	dd20      	ble.n	8009f40 <st_sssa8_fully_connected+0x574>
 8009efe:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8009f02:	fb53 1302 	smmla	r3, r3, r2, r1
 8009f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f08:	4113      	asrs	r3, r2
 8009f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f303 0307 	ssat	r3, #8, r3
 8009f12:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	f10e 0e01 	add.w	lr, lr, #1
 8009f1c:	459e      	cmp	lr, r3
 8009f1e:	f43f af1e 	beq.w	8009d5e <st_sssa8_fully_connected+0x392>
 8009f22:	f1b9 0f0f 	cmp.w	r9, #15
 8009f26:	f85a 3b04 	ldr.w	r3, [sl], #4
 8009f2a:	f73f af7f 	bgt.w	8009e2c <st_sssa8_fully_connected+0x460>
 8009f2e:	462a      	mov	r2, r5
 8009f30:	2500      	movs	r5, #0
 8009f32:	45a9      	cmp	r9, r5
 8009f34:	9f04      	ldr	r7, [sp, #16]
 8009f36:	dcd1      	bgt.n	8009edc <st_sssa8_fully_connected+0x510>
 8009f38:	4615      	mov	r5, r2
 8009f3a:	9a05      	ldr	r2, [sp, #20]
 8009f3c:	2a15      	cmp	r2, #21
 8009f3e:	dcde      	bgt.n	8009efe <st_sssa8_fully_connected+0x532>
 8009f40:	2a00      	cmp	r2, #0
 8009f42:	dd0a      	ble.n	8009f5a <st_sssa8_fully_connected+0x58e>
 8009f44:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	fb53 0301 	smmla	r3, r3, r1, r0
 8009f4e:	4113      	asrs	r3, r2
 8009f50:	f303 0307 	ssat	r3, #8, r3
 8009f54:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8009f58:	e7dd      	b.n	8009f16 <st_sssa8_fully_connected+0x54a>
 8009f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f5c:	4093      	lsls	r3, r2
 8009f5e:	f303 031f 	ssat	r3, #32, r3
 8009f62:	9a08      	ldr	r2, [sp, #32]
 8009f64:	fb53 f312 	smmulr	r3, r3, r2
 8009f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f303 0307 	ssat	r3, #8, r3
 8009f70:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8009f74:	e7cf      	b.n	8009f16 <st_sssa8_fully_connected+0x54a>
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	dd0d      	ble.n	8009f96 <st_sssa8_fully_connected+0x5ca>
 8009f7a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	fb53 0301 	smmla	r3, r3, r1, r0
 8009f84:	4113      	asrs	r3, r2
 8009f86:	f303 0307 	ssat	r3, #8, r3
 8009f8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	7013      	strb	r3, [r2, #0]
 8009f90:	b017      	add	sp, #92	; 0x5c
 8009f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f96:	f1c2 0201 	rsb	r2, r2, #1
 8009f9a:	4093      	lsls	r3, r2
 8009f9c:	f303 031f 	ssat	r3, #32, r3
 8009fa0:	9a08      	ldr	r2, [sp, #32]
 8009fa2:	fb53 f312 	smmulr	r3, r3, r2
 8009fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fa8:	441a      	add	r2, r3
 8009faa:	f302 0307 	ssat	r3, #8, r2
 8009fae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	7013      	strb	r3, [r2, #0]
 8009fb4:	b017      	add	sp, #92	; 0x5c
 8009fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fba:	462e      	mov	r6, r5
 8009fbc:	e6a2      	b.n	8009d04 <st_sssa8_fully_connected+0x338>
 8009fbe:	bf00      	nop

08009fc0 <st_int8_copy>:
 8009fc0:	4288      	cmp	r0, r1
 8009fc2:	d057      	beq.n	800a074 <st_int8_copy+0xb4>
 8009fc4:	2a00      	cmp	r2, #0
 8009fc6:	d055      	beq.n	800a074 <st_int8_copy+0xb4>
 8009fc8:	4288      	cmp	r0, r1
 8009fca:	d354      	bcc.n	800a076 <st_int8_copy+0xb6>
 8009fcc:	078b      	lsls	r3, r1, #30
 8009fce:	d102      	bne.n	8009fd6 <st_int8_copy+0x16>
 8009fd0:	e009      	b.n	8009fe6 <st_int8_copy+0x26>
 8009fd2:	2a00      	cmp	r2, #0
 8009fd4:	d05c      	beq.n	800a090 <st_int8_copy+0xd0>
 8009fd6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009fda:	f801 3b01 	strb.w	r3, [r1], #1
 8009fde:	078b      	lsls	r3, r1, #30
 8009fe0:	f102 32ff 	add.w	r2, r2, #4294967295
 8009fe4:	d1f5      	bne.n	8009fd2 <st_int8_copy+0x12>
 8009fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8009fee:	d069      	beq.n	800a0c4 <st_int8_copy+0x104>
 8009ff0:	ea41 0300 	orr.w	r3, r1, r0
 8009ff4:	075b      	lsls	r3, r3, #29
 8009ff6:	d14c      	bne.n	800a092 <st_int8_copy+0xd2>
 8009ff8:	f10e 33ff 	add.w	r3, lr, #4294967295
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d948      	bls.n	800a092 <st_int8_copy+0xd2>
 800a000:	f100 0310 	add.w	r3, r0, #16
 800a004:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a008:	f101 0c10 	add.w	ip, r1, #16
 800a00c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800a010:	ed13 6b04 	vldr	d6, [r3, #-16]
 800a014:	ed13 7b02 	vldr	d7, [r3, #-8]
 800a018:	3310      	adds	r3, #16
 800a01a:	4573      	cmp	r3, lr
 800a01c:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800a020:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800a024:	f10c 0c10 	add.w	ip, ip, #16
 800a028:	d1f2      	bne.n	800a010 <st_int8_copy+0x50>
 800a02a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a02e:	4421      	add	r1, r4
 800a030:	4420      	add	r0, r4
 800a032:	f002 0203 	and.w	r2, r2, #3
 800a036:	b16b      	cbz	r3, 800a054 <st_int8_copy+0x94>
 800a038:	6804      	ldr	r4, [r0, #0]
 800a03a:	600c      	str	r4, [r1, #0]
 800a03c:	1e5c      	subs	r4, r3, #1
 800a03e:	d005      	beq.n	800a04c <st_int8_copy+0x8c>
 800a040:	6845      	ldr	r5, [r0, #4]
 800a042:	604d      	str	r5, [r1, #4]
 800a044:	2c01      	cmp	r4, #1
 800a046:	bf1c      	itt	ne
 800a048:	6884      	ldrne	r4, [r0, #8]
 800a04a:	608c      	strne	r4, [r1, #8]
 800a04c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a050:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a054:	b162      	cbz	r2, 800a070 <st_int8_copy+0xb0>
 800a056:	f990 3000 	ldrsb.w	r3, [r0]
 800a05a:	700b      	strb	r3, [r1, #0]
 800a05c:	3a01      	subs	r2, #1
 800a05e:	d007      	beq.n	800a070 <st_int8_copy+0xb0>
 800a060:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a064:	704b      	strb	r3, [r1, #1]
 800a066:	2a01      	cmp	r2, #1
 800a068:	bf1c      	itt	ne
 800a06a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800a06e:	708b      	strbne	r3, [r1, #2]
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	4770      	bx	lr
 800a076:	1883      	adds	r3, r0, r2
 800a078:	428b      	cmp	r3, r1
 800a07a:	d9a7      	bls.n	8009fcc <st_int8_copy+0xc>
 800a07c:	4283      	cmp	r3, r0
 800a07e:	440a      	add	r2, r1
 800a080:	d9f8      	bls.n	800a074 <st_int8_copy+0xb4>
 800a082:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800a086:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800a08a:	4283      	cmp	r3, r0
 800a08c:	d1f9      	bne.n	800a082 <st_int8_copy+0xc2>
 800a08e:	4770      	bx	lr
 800a090:	4770      	bx	lr
 800a092:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a096:	460b      	mov	r3, r1
 800a098:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800a09c:	4684      	mov	ip, r0
 800a09e:	f8dc 7000 	ldr.w	r7, [ip]
 800a0a2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a0a6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800a0aa:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800a0ae:	f8c3 800c 	str.w	r8, [r3, #12]
 800a0b2:	601f      	str	r7, [r3, #0]
 800a0b4:	605e      	str	r6, [r3, #4]
 800a0b6:	609d      	str	r5, [r3, #8]
 800a0b8:	3310      	adds	r3, #16
 800a0ba:	459e      	cmp	lr, r3
 800a0bc:	f10c 0c10 	add.w	ip, ip, #16
 800a0c0:	d1ed      	bne.n	800a09e <st_int8_copy+0xde>
 800a0c2:	e7b2      	b.n	800a02a <st_int8_copy+0x6a>
 800a0c4:	0893      	lsrs	r3, r2, #2
 800a0c6:	f002 0203 	and.w	r2, r2, #3
 800a0ca:	e7b4      	b.n	800a036 <st_int8_copy+0x76>

0800a0cc <st_int8_reordered_no_shift_zero>:
 800a0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ce:	0897      	lsrs	r7, r2, #2
 800a0d0:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800a0d4:	d02e      	beq.n	800a134 <st_int8_reordered_no_shift_zero+0x68>
 800a0d6:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f850 cb04 	ldr.w	ip, [r0], #4
 800a0e0:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800a0e4:	fa2f fe8e 	sxtb16	lr, lr
 800a0e8:	fade fe03 	ssub16	lr, lr, r3
 800a0ec:	fa2f fc8c 	sxtb16	ip, ip
 800a0f0:	fadc fc03 	ssub16	ip, ip, r3
 800a0f4:	42a8      	cmp	r0, r5
 800a0f6:	f8c4 c000 	str.w	ip, [r4]
 800a0fa:	f8c4 e004 	str.w	lr, [r4, #4]
 800a0fe:	f104 0408 	add.w	r4, r4, #8
 800a102:	d1eb      	bne.n	800a0dc <st_int8_reordered_no_shift_zero+0x10>
 800a104:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a108:	f012 0203 	ands.w	r2, r2, #3
 800a10c:	d011      	beq.n	800a132 <st_int8_reordered_no_shift_zero+0x66>
 800a10e:	f995 3000 	ldrsb.w	r3, [r5]
 800a112:	b276      	sxtb	r6, r6
 800a114:	1b9b      	subs	r3, r3, r6
 800a116:	3a01      	subs	r2, #1
 800a118:	800b      	strh	r3, [r1, #0]
 800a11a:	d00a      	beq.n	800a132 <st_int8_reordered_no_shift_zero+0x66>
 800a11c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800a120:	2a01      	cmp	r2, #1
 800a122:	eba3 0306 	sub.w	r3, r3, r6
 800a126:	804b      	strh	r3, [r1, #2]
 800a128:	d003      	beq.n	800a132 <st_int8_reordered_no_shift_zero+0x66>
 800a12a:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800a12e:	1b9e      	subs	r6, r3, r6
 800a130:	808e      	strh	r6, [r1, #4]
 800a132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a134:	4605      	mov	r5, r0
 800a136:	e7e7      	b.n	800a108 <st_int8_reordered_no_shift_zero+0x3c>

0800a138 <weights_2channels_prefetch>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	b087      	sub	sp, #28
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800a144:	9302      	str	r3, [sp, #8]
 800a146:	f340 80d7 	ble.w	800a2f8 <weights_2channels_prefetch+0x1c0>
 800a14a:	f1a8 0310 	sub.w	r3, r8, #16
 800a14e:	091b      	lsrs	r3, r3, #4
 800a150:	3301      	adds	r3, #1
 800a152:	f1a8 0403 	sub.w	r4, r8, #3
 800a156:	9403      	str	r4, [sp, #12]
 800a158:	011c      	lsls	r4, r3, #4
 800a15a:	019b      	lsls	r3, r3, #6
 800a15c:	9304      	str	r3, [sp, #16]
 800a15e:	f1a8 0304 	sub.w	r3, r8, #4
 800a162:	9400      	str	r4, [sp, #0]
 800a164:	f04f 0b00 	mov.w	fp, #0
 800a168:	9305      	str	r3, [sp, #20]
 800a16a:	f1b8 0f0f 	cmp.w	r8, #15
 800a16e:	f340 80c8 	ble.w	800a302 <weights_2channels_prefetch+0x1ca>
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	460c      	mov	r4, r1
 800a176:	18c6      	adds	r6, r0, r3
 800a178:	4613      	mov	r3, r2
 800a17a:	6807      	ldr	r7, [r0, #0]
 800a17c:	6825      	ldr	r5, [r4, #0]
 800a17e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800a182:	fa2f f787 	sxtb16	r7, r7
 800a186:	601f      	str	r7, [r3, #0]
 800a188:	fa2f f78c 	sxtb16	r7, ip
 800a18c:	605f      	str	r7, [r3, #4]
 800a18e:	ea4f 2735 	mov.w	r7, r5, ror #8
 800a192:	fa2f f585 	sxtb16	r5, r5
 800a196:	609d      	str	r5, [r3, #8]
 800a198:	fa2f f587 	sxtb16	r5, r7
 800a19c:	60dd      	str	r5, [r3, #12]
 800a19e:	6847      	ldr	r7, [r0, #4]
 800a1a0:	6865      	ldr	r5, [r4, #4]
 800a1a2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800a1a6:	fa2f f787 	sxtb16	r7, r7
 800a1aa:	611f      	str	r7, [r3, #16]
 800a1ac:	fa2f f78c 	sxtb16	r7, ip
 800a1b0:	615f      	str	r7, [r3, #20]
 800a1b2:	ea4f 2735 	mov.w	r7, r5, ror #8
 800a1b6:	fa2f f585 	sxtb16	r5, r5
 800a1ba:	619d      	str	r5, [r3, #24]
 800a1bc:	fa2f f587 	sxtb16	r5, r7
 800a1c0:	61dd      	str	r5, [r3, #28]
 800a1c2:	6887      	ldr	r7, [r0, #8]
 800a1c4:	68a5      	ldr	r5, [r4, #8]
 800a1c6:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800a1ca:	fa2f f787 	sxtb16	r7, r7
 800a1ce:	621f      	str	r7, [r3, #32]
 800a1d0:	fa2f f78c 	sxtb16	r7, ip
 800a1d4:	625f      	str	r7, [r3, #36]	; 0x24
 800a1d6:	ea4f 2735 	mov.w	r7, r5, ror #8
 800a1da:	fa2f f585 	sxtb16	r5, r5
 800a1de:	629d      	str	r5, [r3, #40]	; 0x28
 800a1e0:	fa2f f587 	sxtb16	r5, r7
 800a1e4:	62dd      	str	r5, [r3, #44]	; 0x2c
 800a1e6:	68c7      	ldr	r7, [r0, #12]
 800a1e8:	68e5      	ldr	r5, [r4, #12]
 800a1ea:	3010      	adds	r0, #16
 800a1ec:	42b0      	cmp	r0, r6
 800a1ee:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800a1f2:	f104 0410 	add.w	r4, r4, #16
 800a1f6:	fa2f f787 	sxtb16	r7, r7
 800a1fa:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a1fe:	f843 7c10 	str.w	r7, [r3, #-16]
 800a202:	fa2f f78c 	sxtb16	r7, ip
 800a206:	f843 7c0c 	str.w	r7, [r3, #-12]
 800a20a:	ea4f 2735 	mov.w	r7, r5, ror #8
 800a20e:	fa2f f585 	sxtb16	r5, r5
 800a212:	f843 5c08 	str.w	r5, [r3, #-8]
 800a216:	fa2f f587 	sxtb16	r5, r7
 800a21a:	f843 5c04 	str.w	r5, [r3, #-4]
 800a21e:	d1ac      	bne.n	800a17a <weights_2channels_prefetch+0x42>
 800a220:	9b04      	ldr	r3, [sp, #16]
 800a222:	441a      	add	r2, r3
 800a224:	9b00      	ldr	r3, [sp, #0]
 800a226:	4419      	add	r1, r3
 800a228:	469e      	mov	lr, r3
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	4573      	cmp	r3, lr
 800a22e:	dd66      	ble.n	800a2fe <weights_2channels_prefetch+0x1c6>
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	eba3 090e 	sub.w	r9, r3, lr
 800a236:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800a23a:	f109 0a01 	add.w	sl, r9, #1
 800a23e:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 800a248:	4613      	mov	r3, r2
 800a24a:	468c      	mov	ip, r1
 800a24c:	f856 5b04 	ldr.w	r5, [r6], #4
 800a250:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a254:	4286      	cmp	r6, r0
 800a256:	ea4f 2735 	mov.w	r7, r5, ror #8
 800a25a:	f103 0310 	add.w	r3, r3, #16
 800a25e:	fa2f f585 	sxtb16	r5, r5
 800a262:	fa2f f787 	sxtb16	r7, r7
 800a266:	f843 5c10 	str.w	r5, [r3, #-16]
 800a26a:	f843 7c0c 	str.w	r7, [r3, #-12]
 800a26e:	ea4f 2534 	mov.w	r5, r4, ror #8
 800a272:	fa2f f484 	sxtb16	r4, r4
 800a276:	f843 4c08 	str.w	r4, [r3, #-8]
 800a27a:	fa2f f485 	sxtb16	r4, r5
 800a27e:	f843 4c04 	str.w	r4, [r3, #-4]
 800a282:	d1e3      	bne.n	800a24c <weights_2channels_prefetch+0x114>
 800a284:	9b01      	ldr	r3, [sp, #4]
 800a286:	f10e 0e04 	add.w	lr, lr, #4
 800a28a:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 800a28e:	4419      	add	r1, r3
 800a290:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800a294:	45f0      	cmp	r8, lr
 800a296:	dd29      	ble.n	800a2ec <weights_2channels_prefetch+0x1b4>
 800a298:	f990 3000 	ldrsb.w	r3, [r0]
 800a29c:	8013      	strh	r3, [r2, #0]
 800a29e:	f991 3000 	ldrsb.w	r3, [r1]
 800a2a2:	8053      	strh	r3, [r2, #2]
 800a2a4:	f10e 0301 	add.w	r3, lr, #1
 800a2a8:	4598      	cmp	r8, r3
 800a2aa:	dd19      	ble.n	800a2e0 <weights_2channels_prefetch+0x1a8>
 800a2ac:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a2b0:	8093      	strh	r3, [r2, #4]
 800a2b2:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800a2b6:	80d3      	strh	r3, [r2, #6]
 800a2b8:	f10e 0302 	add.w	r3, lr, #2
 800a2bc:	4598      	cmp	r8, r3
 800a2be:	dd0f      	ble.n	800a2e0 <weights_2channels_prefetch+0x1a8>
 800a2c0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800a2c4:	8113      	strh	r3, [r2, #8]
 800a2c6:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800a2ca:	8153      	strh	r3, [r2, #10]
 800a2cc:	f10e 0303 	add.w	r3, lr, #3
 800a2d0:	4598      	cmp	r8, r3
 800a2d2:	dd05      	ble.n	800a2e0 <weights_2channels_prefetch+0x1a8>
 800a2d4:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800a2d8:	8193      	strh	r3, [r2, #12]
 800a2da:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800a2de:	81d3      	strh	r3, [r2, #14]
 800a2e0:	eba8 0e0e 	sub.w	lr, r8, lr
 800a2e4:	4470      	add	r0, lr
 800a2e6:	4471      	add	r1, lr
 800a2e8:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	f10b 0b01 	add.w	fp, fp, #1
 800a2f2:	455b      	cmp	r3, fp
 800a2f4:	f47f af39 	bne.w	800a16a <weights_2channels_prefetch+0x32>
 800a2f8:	b007      	add	sp, #28
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	4630      	mov	r0, r6
 800a300:	e7c8      	b.n	800a294 <weights_2channels_prefetch+0x15c>
 800a302:	4606      	mov	r6, r0
 800a304:	f04f 0e00 	mov.w	lr, #0
 800a308:	e78f      	b.n	800a22a <weights_2channels_prefetch+0xf2>
 800a30a:	bf00      	nop

0800a30c <st_sssa8_ch_fullW_prefetch>:
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	b087      	sub	sp, #28
 800a312:	4680      	mov	r8, r0
 800a314:	4618      	mov	r0, r3
 800a316:	4613      	mov	r3, r2
 800a318:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 800a31c:	104f      	asrs	r7, r1, #1
 800a31e:	9103      	str	r1, [sp, #12]
 800a320:	eb08 0402 	add.w	r4, r8, r2
 800a324:	9704      	str	r7, [sp, #16]
 800a326:	d020      	beq.n	800a36a <st_sssa8_ch_fullW_prefetch+0x5e>
 800a328:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a32a:	f8cd 8014 	str.w	r8, [sp, #20]
 800a32e:	4646      	mov	r6, r8
 800a330:	4655      	mov	r5, sl
 800a332:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800a336:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800a33a:	4680      	mov	r8, r0
 800a33c:	469a      	mov	sl, r3
 800a33e:	462a      	mov	r2, r5
 800a340:	4621      	mov	r1, r4
 800a342:	4630      	mov	r0, r6
 800a344:	f8cd 8000 	str.w	r8, [sp]
 800a348:	4653      	mov	r3, sl
 800a34a:	f7ff fef5 	bl	800a138 <weights_2channels_prefetch>
 800a34e:	3f01      	subs	r7, #1
 800a350:	445d      	add	r5, fp
 800a352:	444c      	add	r4, r9
 800a354:	444e      	add	r6, r9
 800a356:	d1f2      	bne.n	800a33e <st_sssa8_ch_fullW_prefetch+0x32>
 800a358:	9b04      	ldr	r3, [sp, #16]
 800a35a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a35e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800a362:	fb03 8809 	mla	r8, r3, r9, r8
 800a366:	fb03 aa0b 	mla	sl, r3, fp, sl
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	07db      	lsls	r3, r3, #31
 800a36e:	d509      	bpl.n	800a384 <st_sssa8_ch_fullW_prefetch+0x78>
 800a370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd06      	ble.n	800a384 <st_sssa8_ch_fullW_prefetch+0x78>
 800a376:	4443      	add	r3, r8
 800a378:	f918 2b01 	ldrsb.w	r2, [r8], #1
 800a37c:	f82a 2b02 	strh.w	r2, [sl], #2
 800a380:	4543      	cmp	r3, r8
 800a382:	d1f9      	bne.n	800a378 <st_sssa8_ch_fullW_prefetch+0x6c>
 800a384:	b007      	add	sp, #28
 800a386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38a:	bf00      	nop

0800a38c <st_sssa8_ch_nn_mat_mult_nt_t>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	b0bf      	sub	sp, #252	; 0xfc
 800a392:	902d      	str	r0, [sp, #180]	; 0xb4
 800a394:	9328      	str	r3, [sp, #160]	; 0xa0
 800a396:	e9dd 3052 	ldrd	r3, r0, [sp, #328]	; 0x148
 800a39a:	2800      	cmp	r0, #0
 800a39c:	bf18      	it	ne
 800a39e:	4603      	movne	r3, r0
 800a3a0:	9352      	str	r3, [sp, #328]	; 0x148
 800a3a2:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800a3a4:	9134      	str	r1, [sp, #208]	; 0xd0
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	923d      	str	r2, [sp, #244]	; 0xf4
 800a3aa:	f340 8282 	ble.w	800a8b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x526>
 800a3ae:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800a3b0:	4694      	mov	ip, r2
 800a3b2:	f1a3 0210 	sub.w	r2, r3, #16
 800a3b6:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800a3b8:	3b02      	subs	r3, #2
 800a3ba:	085e      	lsrs	r6, r3, #1
 800a3bc:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800a3be:	963c      	str	r6, [sp, #240]	; 0xf0
 800a3c0:	091b      	lsrs	r3, r3, #4
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	9310      	str	r3, [sp, #64]	; 0x40
 800a3c6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800a3c8:	f3c3 0481 	ubfx	r4, r3, #2, #2
 800a3cc:	f003 0503 	and.w	r5, r3, #3
 800a3d0:	109f      	asrs	r7, r3, #2
 800a3d2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800a3d4:	9411      	str	r4, [sp, #68]	; 0x44
 800a3d6:	f013 0302 	ands.w	r3, r3, #2
 800a3da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3dc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a3de:	9504      	str	r5, [sp, #16]
 800a3e0:	f103 0304 	add.w	r3, r3, #4
 800a3e4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a3e8:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 800a3ea:	9330      	str	r3, [sp, #192]	; 0xc0
 800a3ec:	f06f 0303 	mvn.w	r3, #3
 800a3f0:	eba3 0306 	sub.w	r3, r3, r6
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	f1a6 030f 	sub.w	r3, r6, #15
 800a3fa:	9337      	str	r3, [sp, #220]	; 0xdc
 800a3fc:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800a3fe:	9736      	str	r7, [sp, #216]	; 0xd8
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	931b      	str	r3, [sp, #108]	; 0x6c
 800a406:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800a408:	ea4f 0363 	mov.w	r3, r3, asr #1
 800a40c:	932f      	str	r3, [sp, #188]	; 0xbc
 800a40e:	4603      	mov	r3, r0
 800a410:	f100 30ff 	add.w	r0, r0, #4294967295
 800a414:	9015      	str	r0, [sp, #84]	; 0x54
 800a416:	4620      	mov	r0, r4
 800a418:	f104 34ff 	add.w	r4, r4, #4294967295
 800a41c:	9414      	str	r4, [sp, #80]	; 0x50
 800a41e:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800a420:	f004 0401 	and.w	r4, r4, #1
 800a424:	942e      	str	r4, [sp, #184]	; 0xb8
 800a426:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 800a428:	bf08      	it	eq
 800a42a:	2401      	moveq	r4, #1
 800a42c:	943b      	str	r4, [sp, #236]	; 0xec
 800a42e:	0074      	lsls	r4, r6, #1
 800a430:	942c      	str	r4, [sp, #176]	; 0xb0
 800a432:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 800a434:	0064      	lsls	r4, r4, #1
 800a436:	9435      	str	r4, [sp, #212]	; 0xd4
 800a438:	00b4      	lsls	r4, r6, #2
 800a43a:	9433      	str	r4, [sp, #204]	; 0xcc
 800a43c:	1f34      	subs	r4, r6, #4
 800a43e:	9413      	str	r4, [sp, #76]	; 0x4c
 800a440:	9c49      	ldr	r4, [sp, #292]	; 0x124
 800a442:	9427      	str	r4, [sp, #156]	; 0x9c
 800a444:	9c48      	ldr	r4, [sp, #288]	; 0x120
 800a446:	9129      	str	r1, [sp, #164]	; 0xa4
 800a448:	3404      	adds	r4, #4
 800a44a:	9426      	str	r4, [sp, #152]	; 0x98
 800a44c:	9c51      	ldr	r4, [sp, #324]	; 0x144
 800a44e:	3404      	adds	r4, #4
 800a450:	0912      	lsrs	r2, r2, #4
 800a452:	9425      	str	r4, [sp, #148]	; 0x94
 800a454:	4664      	mov	r4, ip
 800a456:	3201      	adds	r2, #1
 800a458:	3404      	adds	r4, #4
 800a45a:	9424      	str	r4, [sp, #144]	; 0x90
 800a45c:	0114      	lsls	r4, r2, #4
 800a45e:	0192      	lsls	r2, r2, #6
 800a460:	9238      	str	r2, [sp, #224]	; 0xe0
 800a462:	013a      	lsls	r2, r7, #4
 800a464:	923a      	str	r2, [sp, #232]	; 0xe8
 800a466:	1e6a      	subs	r2, r5, #1
 800a468:	921c      	str	r2, [sp, #112]	; 0x70
 800a46a:	1eaa      	subs	r2, r5, #2
 800a46c:	9220      	str	r2, [sp, #128]	; 0x80
 800a46e:	011a      	lsls	r2, r3, #4
 800a470:	019b      	lsls	r3, r3, #6
 800a472:	9331      	str	r3, [sp, #196]	; 0xc4
 800a474:	0103      	lsls	r3, r0, #4
 800a476:	9318      	str	r3, [sp, #96]	; 0x60
 800a478:	0083      	lsls	r3, r0, #2
 800a47a:	9317      	str	r3, [sp, #92]	; 0x5c
 800a47c:	1ef3      	subs	r3, r6, #3
 800a47e:	9339      	str	r3, [sp, #228]	; 0xe4
 800a480:	4633      	mov	r3, r6
 800a482:	3304      	adds	r3, #4
 800a484:	9432      	str	r4, [sp, #200]	; 0xc8
 800a486:	9216      	str	r2, [sp, #88]	; 0x58
 800a488:	9319      	str	r3, [sp, #100]	; 0x64
 800a48a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800a48c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a490:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a494:	921a      	str	r2, [sp, #104]	; 0x68
 800a496:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a498:	931e      	str	r3, [sp, #120]	; 0x78
 800a49a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	920d      	str	r2, [sp, #52]	; 0x34
 800a4a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a4a4:	910c      	str	r1, [sp, #48]	; 0x30
 800a4a6:	2b15      	cmp	r3, #21
 800a4a8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800a4ac:	6812      	ldr	r2, [r2, #0]
 800a4ae:	910e      	str	r1, [sp, #56]	; 0x38
 800a4b0:	920f      	str	r2, [sp, #60]	; 0x3c
 800a4b2:	f300 856e 	bgt.w	800af92 <st_sssa8_ch_nn_mat_mult_nt_t+0xc06>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfcc      	ite	gt
 800a4ba:	2300      	movgt	r3, #0
 800a4bc:	2301      	movle	r3, #1
 800a4be:	425b      	negs	r3, r3
 800a4c0:	9308      	str	r3, [sp, #32]
 800a4c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a4c4:	2b15      	cmp	r3, #21
 800a4c6:	f300 844a 	bgt.w	800ad5e <st_sssa8_ch_nn_mat_mult_nt_t+0x9d2>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bfcc      	ite	gt
 800a4ce:	2300      	movgt	r3, #0
 800a4d0:	2301      	movle	r3, #1
 800a4d2:	425b      	negs	r3, r3
 800a4d4:	9307      	str	r3, [sp, #28]
 800a4d6:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8446 	beq.w	800ad6a <st_sssa8_ch_nn_mat_mult_nt_t+0x9de>
 800a4de:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f040 850d 	bne.w	800af00 <st_sssa8_ch_nn_mat_mult_nt_t+0xb74>
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	9824      	ldr	r0, [sp, #144]	; 0x90
 800a4ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a4f0:	18cb      	adds	r3, r1, r3
 800a4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f4:	6803      	ldr	r3, [r0, #0]
 800a4f6:	18d3      	adds	r3, r2, r3
 800a4f8:	930a      	str	r3, [sp, #40]	; 0x28
 800a4fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 8325 	beq.w	800ab4c <st_sssa8_ch_nn_mat_mult_nt_t+0x7c0>
 800a502:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800a504:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a506:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800a508:	3303      	adds	r3, #3
 800a50a:	18d3      	adds	r3, r2, r3
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	2800      	cmp	r0, #0
 800a510:	f000 8322 	beq.w	800ab58 <st_sssa8_ch_nn_mat_mult_nt_t+0x7cc>
 800a514:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a516:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a518:	9005      	str	r0, [sp, #20]
 800a51a:	2401      	movs	r4, #1
 800a51c:	1e93      	subs	r3, r2, #2
 800a51e:	fa04 f303 	lsl.w	r3, r4, r3
 800a522:	9322      	str	r3, [sp, #136]	; 0x88
 800a524:	1e8b      	subs	r3, r1, #2
 800a526:	fa04 f303 	lsl.w	r3, r4, r3
 800a52a:	9321      	str	r3, [sp, #132]	; 0x84
 800a52c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 800a52e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800a530:	4423      	add	r3, r4
 800a532:	9312      	str	r3, [sp, #72]	; 0x48
 800a534:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800a53a:	931d      	str	r3, [sp, #116]	; 0x74
 800a53c:	1e4b      	subs	r3, r1, #1
 800a53e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a540:	f1c1 0301 	rsb	r3, r1, #1
 800a544:	932a      	str	r3, [sp, #168]	; 0xa8
 800a546:	1e53      	subs	r3, r2, #1
 800a548:	931f      	str	r3, [sp, #124]	; 0x7c
 800a54a:	f1c2 0301 	rsb	r3, r2, #1
 800a54e:	932b      	str	r3, [sp, #172]	; 0xac
 800a550:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 82f3 	beq.w	800ab3e <st_sssa8_ch_nn_mat_mult_nt_t+0x7b2>
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a55e:	9e52      	ldr	r6, [sp, #328]	; 0x148
 800a560:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800a564:	189f      	adds	r7, r3, r2
 800a566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a568:	4604      	mov	r4, r0
 800a56a:	4613      	mov	r3, r2
 800a56c:	9d02      	ldr	r5, [sp, #8]
 800a56e:	6831      	ldr	r1, [r6, #0]
 800a570:	f855 c007 	ldr.w	ip, [r5, r7]
 800a574:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800a578:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800a57c:	f8d6 900c 	ldr.w	r9, [r6, #12]
 800a580:	eb05 0e07 	add.w	lr, r5, r7
 800a584:	fa2f f58c 	sxtb16	r5, ip
 800a588:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800a58c:	fb25 0001 	smlad	r0, r5, r1, r0
 800a590:	fb2c 000a 	smlad	r0, ip, sl, r0
 800a594:	fb25 250b 	smlad	r5, r5, fp, r2
 800a598:	fb2c 5509 	smlad	r5, ip, r9, r5
 800a59c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a5a0:	fa2f fc82 	sxtb16	ip, r2
 800a5a4:	fa2f f292 	sxtb16	r2, r2, ror #8
 800a5a8:	fb2c 4101 	smlad	r1, ip, r1, r4
 800a5ac:	fb2c 330b 	smlad	r3, ip, fp, r3
 800a5b0:	fb22 110a 	smlad	r1, r2, sl, r1
 800a5b4:	f8d6 a010 	ldr.w	sl, [r6, #16]
 800a5b8:	6974      	ldr	r4, [r6, #20]
 800a5ba:	fb22 3909 	smlad	r9, r2, r9, r3
 800a5be:	f8de 3004 	ldr.w	r3, [lr, #4]
 800a5c2:	69b2      	ldr	r2, [r6, #24]
 800a5c4:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 800a5c8:	fa2f fc83 	sxtb16	ip, r3
 800a5cc:	fa2f f393 	sxtb16	r3, r3, ror #8
 800a5d0:	fb2c 000a 	smlad	r0, ip, sl, r0
 800a5d4:	fb23 0004 	smlad	r0, r3, r4, r0
 800a5d8:	fb2c 5c02 	smlad	ip, ip, r2, r5
 800a5dc:	fb23 cc0b 	smlad	ip, r3, fp, ip
 800a5e0:	683d      	ldr	r5, [r7, #0]
 800a5e2:	fa2f f385 	sxtb16	r3, r5
 800a5e6:	fa2f f595 	sxtb16	r5, r5, ror #8
 800a5ea:	fb23 1a0a 	smlad	sl, r3, sl, r1
 800a5ee:	fb23 9902 	smlad	r9, r3, r2, r9
 800a5f2:	fb25 aa04 	smlad	sl, r5, r4, sl
 800a5f6:	6a34      	ldr	r4, [r6, #32]
 800a5f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a5fa:	fb25 9b0b 	smlad	fp, r5, fp, r9
 800a5fe:	f8de 1008 	ldr.w	r1, [lr, #8]
 800a602:	f8d6 9028 	ldr.w	r9, [r6, #40]	; 0x28
 800a606:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800a608:	fa2f f381 	sxtb16	r3, r1
 800a60c:	fa2f f191 	sxtb16	r1, r1, ror #8
 800a610:	fb23 0004 	smlad	r0, r3, r4, r0
 800a614:	fb21 0002 	smlad	r0, r1, r2, r0
 800a618:	fb23 c309 	smlad	r3, r3, r9, ip
 800a61c:	fb21 3105 	smlad	r1, r1, r5, r3
 800a620:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a624:	fa2f f38c 	sxtb16	r3, ip
 800a628:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800a62c:	fb23 a404 	smlad	r4, r3, r4, sl
 800a630:	fb23 bb09 	smlad	fp, r3, r9, fp
 800a634:	fb2c 4a02 	smlad	sl, ip, r2, r4
 800a638:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
 800a63c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800a63e:	fb2c b505 	smlad	r5, ip, r5, fp
 800a642:	f8de 200c 	ldr.w	r2, [lr, #12]
 800a646:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38
 800a64a:	f8d6 e03c 	ldr.w	lr, [r6, #60]	; 0x3c
 800a64e:	fa2f f382 	sxtb16	r3, r2
 800a652:	3640      	adds	r6, #64	; 0x40
 800a654:	fa2f f292 	sxtb16	r2, r2, ror #8
 800a658:	fb23 0009 	smlad	r0, r3, r9, r0
 800a65c:	fb22 0004 	smlad	r0, r2, r4, r0
 800a660:	fb23 110b 	smlad	r1, r3, fp, r1
 800a664:	fb22 120e 	smlad	r2, r2, lr, r1
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	fa2f f183 	sxtb16	r1, r3
 800a66e:	fa2f f393 	sxtb16	r3, r3, ror #8
 800a672:	fb21 aa09 	smlad	sl, r1, r9, sl
 800a676:	fb21 550b 	smlad	r5, r1, fp, r5
 800a67a:	fb23 a404 	smlad	r4, r3, r4, sl
 800a67e:	fb23 530e 	smlad	r3, r3, lr, r5
 800a682:	f108 38ff 	add.w	r8, r8, #4294967295
 800a686:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a68a:	f107 0710 	add.w	r7, r7, #16
 800a68e:	f47f af6d 	bne.w	800a56c <st_sssa8_ch_nn_mat_mult_nt_t+0x1e0>
 800a692:	9901      	ldr	r1, [sp, #4]
 800a694:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a696:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800a69a:	4429      	add	r1, r5
 800a69c:	9101      	str	r1, [sp, #4]
 800a69e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6a0:	b3b9      	cbz	r1, 800a712 <st_sssa8_ch_nn_mat_mult_nt_t+0x386>
 800a6a2:	4659      	mov	r1, fp
 800a6a4:	f8cd b018 	str.w	fp, [sp, #24]
 800a6a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a6ac:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800a6b0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800a6b4:	f8d1 a000 	ldr.w	sl, [r1]
 800a6b8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a6bc:	f85e 5b04 	ldr.w	r5, [lr], #4
 800a6c0:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800a6c4:	68cf      	ldr	r7, [r1, #12]
 800a6c6:	fa2f f685 	sxtb16	r6, r5
 800a6ca:	3110      	adds	r1, #16
 800a6cc:	fa2f f595 	sxtb16	r5, r5, ror #8
 800a6d0:	fb26 000a 	smlad	r0, r6, sl, r0
 800a6d4:	fb25 0008 	smlad	r0, r5, r8, r0
 800a6d8:	fb26 2209 	smlad	r2, r6, r9, r2
 800a6dc:	fb25 2207 	smlad	r2, r5, r7, r2
 800a6e0:	f85e 500b 	ldr.w	r5, [lr, fp]
 800a6e4:	fa2f f685 	sxtb16	r6, r5
 800a6e8:	fa2f f595 	sxtb16	r5, r5, ror #8
 800a6ec:	fb26 440a 	smlad	r4, r6, sl, r4
 800a6f0:	fb26 3309 	smlad	r3, r6, r9, r3
 800a6f4:	fb25 4408 	smlad	r4, r5, r8, r4
 800a6f8:	fb25 3307 	smlad	r3, r5, r7, r3
 800a6fc:	f1bc 0c01 	subs.w	ip, ip, #1
 800a700:	d2d8      	bcs.n	800a6b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x328>
 800a702:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a704:	f8dd b018 	ldr.w	fp, [sp, #24]
 800a708:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a70a:	448b      	add	fp, r1
 800a70c:	9901      	ldr	r1, [sp, #4]
 800a70e:	4429      	add	r1, r5
 800a710:	9101      	str	r1, [sp, #4]
 800a712:	9904      	ldr	r1, [sp, #16]
 800a714:	2900      	cmp	r1, #0
 800a716:	d051      	beq.n	800a7bc <st_sssa8_ch_nn_mat_mult_nt_t+0x430>
 800a718:	9f01      	ldr	r7, [sp, #4]
 800a71a:	f9bb 6000 	ldrsh.w	r6, [fp]
 800a71e:	f997 1000 	ldrsb.w	r1, [r7]
 800a722:	f9bb 5002 	ldrsh.w	r5, [fp, #2]
 800a726:	fb16 0001 	smlabb	r0, r6, r1, r0
 800a72a:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a72e:	994d      	ldr	r1, [sp, #308]	; 0x134
 800a730:	5679      	ldrsb	r1, [r7, r1]
 800a732:	fb16 4401 	smlabb	r4, r6, r1, r4
 800a736:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800a738:	fb15 3301 	smlabb	r3, r5, r1, r3
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	d039      	beq.n	800a7b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x428>
 800a740:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 800a742:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
 800a746:	19b9      	adds	r1, r7, r6
 800a748:	f9bb 6004 	ldrsh.w	r6, [fp, #4]
 800a74c:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800a750:	fb16 4401 	smlabb	r4, r6, r1, r4
 800a754:	fb15 3301 	smlabb	r3, r5, r1, r3
 800a758:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800a75c:	fb16 0001 	smlabb	r0, r6, r1, r0
 800a760:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a762:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a766:	1cb9      	adds	r1, r7, #2
 800a768:	b326      	cbz	r6, 800a7b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x428>
 800a76a:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 800a76c:	f9bb 500a 	ldrsh.w	r5, [fp, #10]
 800a770:	5789      	ldrsb	r1, [r1, r6]
 800a772:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 800a776:	fb15 3301 	smlabb	r3, r5, r1, r3
 800a77a:	fb16 4401 	smlabb	r4, r6, r1, r4
 800a77e:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800a782:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a786:	9d04      	ldr	r5, [sp, #16]
 800a788:	2d03      	cmp	r5, #3
 800a78a:	fb16 0001 	smlabb	r0, r6, r1, r0
 800a78e:	f107 0103 	add.w	r1, r7, #3
 800a792:	d00f      	beq.n	800a7b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x428>
 800a794:	9d4d      	ldr	r5, [sp, #308]	; 0x134
 800a796:	f9bb 600e 	ldrsh.w	r6, [fp, #14]
 800a79a:	574d      	ldrsb	r5, [r1, r5]
 800a79c:	f9bb 100c 	ldrsh.w	r1, [fp, #12]
 800a7a0:	fb16 3305 	smlabb	r3, r6, r5, r3
 800a7a4:	fb11 4405 	smlabb	r4, r1, r5, r4
 800a7a8:	f997 5003 	ldrsb.w	r5, [r7, #3]
 800a7ac:	fb11 0005 	smlabb	r0, r1, r5, r0
 800a7b0:	fb16 2205 	smlabb	r2, r6, r5, r2
 800a7b4:	9901      	ldr	r1, [sp, #4]
 800a7b6:	9d04      	ldr	r5, [sp, #16]
 800a7b8:	4429      	add	r1, r5
 800a7ba:	9101      	str	r1, [sp, #4]
 800a7bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7be:	2900      	cmp	r1, #0
 800a7c0:	f000 8120 	beq.w	800aa04 <st_sssa8_ch_nn_mat_mult_nt_t+0x678>
 800a7c4:	9f03      	ldr	r7, [sp, #12]
 800a7c6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a7c8:	1c79      	adds	r1, r7, #1
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	f000 8118 	beq.w	800aa00 <st_sssa8_ch_nn_mat_mult_nt_t+0x674>
 800a7d0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a7d2:	1eb5      	subs	r5, r6, #2
 800a7d4:	2d00      	cmp	r5, #0
 800a7d6:	f340 817a 	ble.w	800aace <st_sssa8_ch_nn_mat_mult_nt_t+0x742>
 800a7da:	951d      	str	r5, [sp, #116]	; 0x74
 800a7dc:	9d03      	ldr	r5, [sp, #12]
 800a7de:	9e08      	ldr	r6, [sp, #32]
 800a7e0:	f105 0c02 	add.w	ip, r5, #2
 800a7e4:	2e00      	cmp	r6, #0
 800a7e6:	f040 80f2 	bne.w	800a9ce <st_sssa8_ch_nn_mat_mult_nt_t+0x642>
 800a7ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a7ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a7ee:	0040      	lsls	r0, r0, #1
 800a7f0:	0064      	lsls	r4, r4, #1
 800a7f2:	fb50 7006 	smmla	r0, r0, r6, r7
 800a7f6:	fb54 7406 	smmla	r4, r4, r6, r7
 800a7fa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a7fc:	4130      	asrs	r0, r6
 800a7fe:	f300 0007 	ssat	r0, #8, r0
 800a802:	9f03      	ldr	r7, [sp, #12]
 800a804:	4134      	asrs	r4, r6
 800a806:	7038      	strb	r0, [r7, #0]
 800a808:	f304 0407 	ssat	r4, #8, r4
 800a80c:	700c      	strb	r4, [r1, #0]
 800a80e:	463e      	mov	r6, r7
 800a810:	984b      	ldr	r0, [sp, #300]	; 0x12c
 800a812:	9f07      	ldr	r7, [sp, #28]
 800a814:	1834      	adds	r4, r6, r0
 800a816:	1808      	adds	r0, r1, r0
 800a818:	2f00      	cmp	r7, #0
 800a81a:	f040 80bf 	bne.w	800a99c <st_sssa8_ch_nn_mat_mult_nt_t+0x610>
 800a81e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a820:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a822:	0052      	lsls	r2, r2, #1
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	fb52 4200 	smmla	r2, r2, r0, r4
 800a82a:	fb53 4300 	smmla	r3, r3, r0, r4
 800a82e:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a830:	4102      	asrs	r2, r0
 800a832:	f302 0207 	ssat	r2, #8, r2
 800a836:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 800a838:	4103      	asrs	r3, r0
 800a83a:	5532      	strb	r2, [r6, r4]
 800a83c:	f303 0307 	ssat	r3, #8, r3
 800a840:	550b      	strb	r3, [r1, r4]
 800a842:	f8cd c00c 	str.w	ip, [sp, #12]
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800a84a:	4413      	add	r3, r2
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	9b05      	ldr	r3, [sp, #20]
 800a850:	3b01      	subs	r3, #1
 800a852:	9305      	str	r3, [sp, #20]
 800a854:	f47f ae7c 	bne.w	800a550 <st_sssa8_ch_nn_mat_mult_nt_t+0x1c4>
 800a858:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f040 8182 	bne.w	800ab64 <st_sssa8_ch_nn_mat_mult_nt_t+0x7d8>
 800a860:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a862:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a864:	4413      	add	r3, r2
 800a866:	9329      	str	r3, [sp, #164]	; 0xa4
 800a868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 8273 	beq.w	800ad56 <st_sssa8_ch_nn_mat_mult_nt_t+0x9ca>
 800a870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a872:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800a874:	4413      	add	r3, r2
 800a876:	9328      	str	r3, [sp, #160]	; 0xa0
 800a878:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 800a87a:	b11b      	cbz	r3, 800a884 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 800a87c:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800a87e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800a880:	4413      	add	r3, r2
 800a882:	9352      	str	r3, [sp, #328]	; 0x148
 800a884:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a886:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a888:	3208      	adds	r2, #8
 800a88a:	9226      	str	r2, [sp, #152]	; 0x98
 800a88c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a88e:	3208      	adds	r2, #8
 800a890:	9225      	str	r2, [sp, #148]	; 0x94
 800a892:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a894:	3208      	adds	r2, #8
 800a896:	9224      	str	r2, [sp, #144]	; 0x90
 800a898:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800a89a:	3304      	adds	r3, #4
 800a89c:	429a      	cmp	r2, r3
 800a89e:	9327      	str	r3, [sp, #156]	; 0x9c
 800a8a0:	f47f adf3 	bne.w	800a48a <st_sssa8_ch_nn_mat_mult_nt_t+0xfe>
 800a8a4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800a8a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a8a8:	fb02 3303 	mla	r3, r2, r3, r3
 800a8ac:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800a8ae:	441a      	add	r2, r3
 800a8b0:	9234      	str	r2, [sp, #208]	; 0xd0
 800a8b2:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800a8b4:	07db      	lsls	r3, r3, #31
 800a8b6:	d56d      	bpl.n	800a994 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 800a8b8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800a8ba:	f013 0b01 	ands.w	fp, r3, #1
 800a8be:	d004      	beq.n	800a8ca <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 800a8c0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800a8c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a8c4:	3303      	adds	r3, #3
 800a8c6:	441a      	add	r2, r3
 800a8c8:	9228      	str	r2, [sp, #160]	; 0xa0
 800a8ca:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dd61      	ble.n	800a994 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 800a8d0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800a8d2:	f8dd 9140 	ldr.w	r9, [sp, #320]	; 0x140
 800a8d6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800a8d8:	f8cd b00c 	str.w	fp, [sp, #12]
 800a8dc:	f003 0c02 	and.w	ip, r3, #2
 800a8e0:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800a8e2:	f8cd 9010 	str.w	r9, [sp, #16]
 800a8e6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800a8ea:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800a8ec:	3801      	subs	r0, #1
 800a8ee:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800a8f2:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800a8f4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800a8f8:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800a8fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8fe:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800a900:	f103 4800 	add.w	r8, r3, #2147483648	; 0x80000000
 800a904:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a906:	e9cd ec01 	strd	lr, ip, [sp, #4]
 800a90a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a90e:	e9dd e24d 	ldrd	lr, r2, [sp, #308]	; 0x134
 800a912:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 800a916:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a918:	2100      	movs	r1, #0
 800a91a:	f04f 0a01 	mov.w	sl, #1
 800a91e:	9d01      	ldr	r5, [sp, #4]
 800a920:	f1be 0f00 	cmp.w	lr, #0
 800a924:	682f      	ldr	r7, [r5, #0]
 800a926:	dd0d      	ble.n	800a944 <st_sssa8_ch_nn_mat_mult_nt_t+0x5b8>
 800a928:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800a92a:	eb03 0b0e 	add.w	fp, r3, lr
 800a92e:	f105 3cff 	add.w	ip, r5, #4294967295
 800a932:	f913 5b01 	ldrsb.w	r5, [r3], #1
 800a936:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 800a93a:	1aad      	subs	r5, r5, r2
 800a93c:	459b      	cmp	fp, r3
 800a93e:	fb09 7705 	mla	r7, r9, r5, r7
 800a942:	d1f6      	bne.n	800a932 <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 800a944:	f9b8 c000 	ldrsh.w	ip, [r8]
 800a948:	f1bc 0f15 	cmp.w	ip, #21
 800a94c:	f340 837f 	ble.w	800b04e <st_sssa8_ch_nn_mat_mult_nt_t+0xcc2>
 800a950:	f1ac 0902 	sub.w	r9, ip, #2
 800a954:	fa0a f909 	lsl.w	r9, sl, r9
 800a958:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a95c:	6825      	ldr	r5, [r4, #0]
 800a95e:	fb57 9505 	smmla	r5, r7, r5, r9
 800a962:	6807      	ldr	r7, [r0, #0]
 800a964:	fa45 f50c 	asr.w	r5, r5, ip
 800a968:	443d      	add	r5, r7
 800a96a:	f305 0507 	ssat	r5, #8, r5
 800a96e:	7035      	strb	r5, [r6, #0]
 800a970:	9d02      	ldr	r5, [sp, #8]
 800a972:	2d00      	cmp	r5, #0
 800a974:	f000 8368 	beq.w	800b048 <st_sssa8_ch_nn_mat_mult_nt_t+0xcbc>
 800a978:	9d03      	ldr	r5, [sp, #12]
 800a97a:	b135      	cbz	r5, 800a98a <st_sssa8_ch_nn_mat_mult_nt_t+0x5fe>
 800a97c:	9d04      	ldr	r5, [sp, #16]
 800a97e:	3d01      	subs	r5, #1
 800a980:	9504      	str	r5, [sp, #16]
 800a982:	d102      	bne.n	800a98a <st_sssa8_ch_nn_mat_mult_nt_t+0x5fe>
 800a984:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800a986:	9504      	str	r5, [sp, #16]
 800a988:	3602      	adds	r6, #2
 800a98a:	3601      	adds	r6, #1
 800a98c:	9d4a      	ldr	r5, [sp, #296]	; 0x128
 800a98e:	3101      	adds	r1, #1
 800a990:	428d      	cmp	r5, r1
 800a992:	d1c4      	bne.n	800a91e <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 800a994:	2000      	movs	r0, #0
 800a996:	b03f      	add	sp, #252	; 0xfc
 800a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99c:	4639      	mov	r1, r7
 800a99e:	3101      	adds	r1, #1
 800a9a0:	f000 80b5 	beq.w	800ab0e <st_sssa8_ch_nn_mat_mult_nt_t+0x782>
 800a9a4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800a9a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9aa:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800a9ac:	fb52 6201 	smmla	r2, r2, r1, r6
 800a9b0:	413a      	asrs	r2, r7
 800a9b2:	442a      	add	r2, r5
 800a9b4:	fb53 6301 	smmla	r3, r3, r1, r6
 800a9b8:	f302 0207 	ssat	r2, #8, r2
 800a9bc:	413b      	asrs	r3, r7
 800a9be:	7022      	strb	r2, [r4, #0]
 800a9c0:	442b      	add	r3, r5
 800a9c2:	f303 0307 	ssat	r3, #8, r3
 800a9c6:	7003      	strb	r3, [r0, #0]
 800a9c8:	f8cd c00c 	str.w	ip, [sp, #12]
 800a9cc:	e73b      	b.n	800a846 <st_sssa8_ch_nn_mat_mult_nt_t+0x4ba>
 800a9ce:	3601      	adds	r6, #1
 800a9d0:	f000 8086 	beq.w	800aae0 <st_sssa8_ch_nn_mat_mult_nt_t+0x754>
 800a9d4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800a9d6:	9f22      	ldr	r7, [sp, #136]	; 0x88
 800a9d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9da:	fb50 7005 	smmla	r0, r0, r5, r7
 800a9de:	fb54 7405 	smmla	r4, r4, r5, r7
 800a9e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a9e4:	4130      	asrs	r0, r6
 800a9e6:	4438      	add	r0, r7
 800a9e8:	f300 0007 	ssat	r0, #8, r0
 800a9ec:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800a9ee:	9d03      	ldr	r5, [sp, #12]
 800a9f0:	4134      	asrs	r4, r6
 800a9f2:	7028      	strb	r0, [r5, #0]
 800a9f4:	19e0      	adds	r0, r4, r7
 800a9f6:	f300 0007 	ssat	r0, #8, r0
 800a9fa:	7008      	strb	r0, [r1, #0]
 800a9fc:	462e      	mov	r6, r5
 800a9fe:	e707      	b.n	800a810 <st_sssa8_ch_nn_mat_mult_nt_t+0x484>
 800aa00:	463d      	mov	r5, r7
 800aa02:	e6ec      	b.n	800a7de <st_sssa8_ch_nn_mat_mult_nt_t+0x452>
 800aa04:	9e03      	ldr	r6, [sp, #12]
 800aa06:	994c      	ldr	r1, [sp, #304]	; 0x130
 800aa08:	9d4c      	ldr	r5, [sp, #304]	; 0x130
 800aa0a:	9f08      	ldr	r7, [sp, #32]
 800aa0c:	1871      	adds	r1, r6, r1
 800aa0e:	eb06 0c45 	add.w	ip, r6, r5, lsl #1
 800aa12:	bb47      	cbnz	r7, 800aa66 <st_sssa8_ch_nn_mat_mult_nt_t+0x6da>
 800aa14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800aa16:	0065      	lsls	r5, r4, #1
 800aa18:	0040      	lsls	r0, r0, #1
 800aa1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800aa1c:	fb50 4007 	smmla	r0, r0, r7, r4
 800aa20:	fb55 4407 	smmla	r4, r5, r7, r4
 800aa24:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800aa26:	4138      	asrs	r0, r7
 800aa28:	f300 0007 	ssat	r0, #8, r0
 800aa2c:	7030      	strb	r0, [r6, #0]
 800aa2e:	413c      	asrs	r4, r7
 800aa30:	f304 0407 	ssat	r4, #8, r4
 800aa34:	984c      	ldr	r0, [sp, #304]	; 0x130
 800aa36:	5434      	strb	r4, [r6, r0]
 800aa38:	9807      	ldr	r0, [sp, #28]
 800aa3a:	bb78      	cbnz	r0, 800aa9c <st_sssa8_ch_nn_mat_mult_nt_t+0x710>
 800aa3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800aa40:	0052      	lsls	r2, r2, #1
 800aa42:	005b      	lsls	r3, r3, #1
 800aa44:	fb52 4200 	smmla	r2, r2, r0, r4
 800aa48:	fb53 4300 	smmla	r3, r3, r0, r4
 800aa4c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800aa4e:	4102      	asrs	r2, r0
 800aa50:	f302 0207 	ssat	r2, #8, r2
 800aa54:	9c03      	ldr	r4, [sp, #12]
 800aa56:	4103      	asrs	r3, r0
 800aa58:	7062      	strb	r2, [r4, #1]
 800aa5a:	f303 0307 	ssat	r3, #8, r3
 800aa5e:	704b      	strb	r3, [r1, #1]
 800aa60:	f8cd c00c 	str.w	ip, [sp, #12]
 800aa64:	e6ef      	b.n	800a846 <st_sssa8_ch_nn_mat_mult_nt_t+0x4ba>
 800aa66:	463e      	mov	r6, r7
 800aa68:	3601      	adds	r6, #1
 800aa6a:	f000 8296 	beq.w	800af9a <st_sssa8_ch_nn_mat_mult_nt_t+0xc0e>
 800aa6e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800aa70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa72:	9f22      	ldr	r7, [sp, #136]	; 0x88
 800aa74:	fb50 7006 	smmla	r0, r0, r6, r7
 800aa78:	fb54 7406 	smmla	r4, r4, r6, r7
 800aa7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aa7e:	4128      	asrs	r0, r5
 800aa80:	4430      	add	r0, r6
 800aa82:	f300 0007 	ssat	r0, #8, r0
 800aa86:	9f03      	ldr	r7, [sp, #12]
 800aa88:	7038      	strb	r0, [r7, #0]
 800aa8a:	fa44 f005 	asr.w	r0, r4, r5
 800aa8e:	4430      	add	r0, r6
 800aa90:	f300 0007 	ssat	r0, #8, r0
 800aa94:	7008      	strb	r0, [r1, #0]
 800aa96:	9807      	ldr	r0, [sp, #28]
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0cf      	beq.n	800aa3c <st_sssa8_ch_nn_mat_mult_nt_t+0x6b0>
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	f000 8293 	beq.w	800afc8 <st_sssa8_ch_nn_mat_mult_nt_t+0xc3c>
 800aaa2:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800aaa4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aaa6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800aaa8:	fb52 4200 	smmla	r2, r2, r0, r4
 800aaac:	fb53 4300 	smmla	r3, r3, r0, r4
 800aab0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aab2:	412a      	asrs	r2, r5
 800aab4:	4402      	add	r2, r0
 800aab6:	f302 0207 	ssat	r2, #8, r2
 800aaba:	9c03      	ldr	r4, [sp, #12]
 800aabc:	412b      	asrs	r3, r5
 800aabe:	7062      	strb	r2, [r4, #1]
 800aac0:	4403      	add	r3, r0
 800aac2:	f303 0307 	ssat	r3, #8, r3
 800aac6:	704b      	strb	r3, [r1, #1]
 800aac8:	f8cd c00c 	str.w	ip, [sp, #12]
 800aacc:	e6bb      	b.n	800a846 <st_sssa8_ch_nn_mat_mult_nt_t+0x4ba>
 800aace:	f1c6 0602 	rsb	r6, r6, #2
 800aad2:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800aad6:	9e50      	ldr	r6, [sp, #320]	; 0x140
 800aad8:	1975      	adds	r5, r6, r5
 800aada:	951d      	str	r5, [sp, #116]	; 0x74
 800aadc:	1cbd      	adds	r5, r7, #2
 800aade:	e67e      	b.n	800a7de <st_sssa8_ch_nn_mat_mult_nt_t+0x452>
 800aae0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800aae2:	40a8      	lsls	r0, r5
 800aae4:	f300 001f 	ssat	r0, #32, r0
 800aae8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aaea:	fb50 f016 	smmulr	r0, r0, r6
 800aaee:	40ac      	lsls	r4, r5
 800aaf0:	f304 041f 	ssat	r4, #32, r4
 800aaf4:	fb54 f416 	smmulr	r4, r4, r6
 800aaf8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aafa:	4428      	add	r0, r5
 800aafc:	f300 0007 	ssat	r0, #8, r0
 800ab00:	9e03      	ldr	r6, [sp, #12]
 800ab02:	7030      	strb	r0, [r6, #0]
 800ab04:	1928      	adds	r0, r5, r4
 800ab06:	f300 0007 	ssat	r0, #8, r0
 800ab0a:	7008      	strb	r0, [r1, #0]
 800ab0c:	e680      	b.n	800a810 <st_sssa8_ch_nn_mat_mult_nt_t+0x484>
 800ab0e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ab10:	408a      	lsls	r2, r1
 800ab12:	f302 021f 	ssat	r2, #32, r2
 800ab16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ab18:	fb52 f215 	smmulr	r2, r2, r5
 800ab1c:	408b      	lsls	r3, r1
 800ab1e:	f303 031f 	ssat	r3, #32, r3
 800ab22:	fb53 f315 	smmulr	r3, r3, r5
 800ab26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab28:	440a      	add	r2, r1
 800ab2a:	f302 0207 	ssat	r2, #8, r2
 800ab2e:	7022      	strb	r2, [r4, #0]
 800ab30:	440b      	add	r3, r1
 800ab32:	f303 0307 	ssat	r3, #8, r3
 800ab36:	7003      	strb	r3, [r0, #0]
 800ab38:	f8cd c00c 	str.w	ip, [sp, #12]
 800ab3c:	e683      	b.n	800a846 <st_sssa8_ch_nn_mat_mult_nt_t+0x4ba>
 800ab3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab42:	f8dd b148 	ldr.w	fp, [sp, #328]	; 0x148
 800ab46:	4613      	mov	r3, r2
 800ab48:	4604      	mov	r4, r0
 800ab4a:	e5a8      	b.n	800a69e <st_sssa8_ch_nn_mat_mult_nt_t+0x312>
 800ab4c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800ab4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f47f acde 	bne.w	800a514 <st_sssa8_ch_nn_mat_mult_nt_t+0x188>
 800ab58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f43f ae7e 	beq.w	800a860 <st_sssa8_ch_nn_mat_mult_nt_t+0x4d4>
 800ab64:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f340 82b5 	ble.w	800b0d6 <st_sssa8_ch_nn_mat_mult_nt_t+0xd4a>
 800ab6c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800ab6e:	9801      	ldr	r0, [sp, #4]
 800ab70:	e9dd 5209 	ldrd	r5, r2, [sp, #36]	; 0x24
 800ab74:	18c7      	adds	r7, r0, r3
 800ab76:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800ab78:	6801      	ldr	r1, [r0, #0]
 800ab7a:	fa2f f481 	sxtb16	r4, r1
 800ab7e:	fa2f f191 	sxtb16	r1, r1, ror #8
 800ab82:	681e      	ldr	r6, [r3, #0]
 800ab84:	fb24 5506 	smlad	r5, r4, r6, r5
 800ab88:	685e      	ldr	r6, [r3, #4]
 800ab8a:	fb21 5606 	smlad	r6, r1, r6, r5
 800ab8e:	689d      	ldr	r5, [r3, #8]
 800ab90:	fb24 2205 	smlad	r2, r4, r5, r2
 800ab94:	68dc      	ldr	r4, [r3, #12]
 800ab96:	fb21 2104 	smlad	r1, r1, r4, r2
 800ab9a:	6842      	ldr	r2, [r0, #4]
 800ab9c:	fa2f f482 	sxtb16	r4, r2
 800aba0:	fa2f f292 	sxtb16	r2, r2, ror #8
 800aba4:	691d      	ldr	r5, [r3, #16]
 800aba6:	fb24 6505 	smlad	r5, r4, r5, r6
 800abaa:	695e      	ldr	r6, [r3, #20]
 800abac:	fb22 5606 	smlad	r6, r2, r6, r5
 800abb0:	699d      	ldr	r5, [r3, #24]
 800abb2:	fb24 1105 	smlad	r1, r4, r5, r1
 800abb6:	69dc      	ldr	r4, [r3, #28]
 800abb8:	fb22 1104 	smlad	r1, r2, r4, r1
 800abbc:	6882      	ldr	r2, [r0, #8]
 800abbe:	fa2f f482 	sxtb16	r4, r2
 800abc2:	fa2f f292 	sxtb16	r2, r2, ror #8
 800abc6:	6a1d      	ldr	r5, [r3, #32]
 800abc8:	fb24 6505 	smlad	r5, r4, r5, r6
 800abcc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800abce:	fb22 5606 	smlad	r6, r2, r6, r5
 800abd2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800abd4:	fb24 1105 	smlad	r1, r4, r5, r1
 800abd8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800abda:	fb22 1104 	smlad	r1, r2, r4, r1
 800abde:	68c2      	ldr	r2, [r0, #12]
 800abe0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800abe2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800abe6:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 800abea:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
 800abee:	fa2f f482 	sxtb16	r4, r2
 800abf2:	3010      	adds	r0, #16
 800abf4:	3340      	adds	r3, #64	; 0x40
 800abf6:	fa2f f292 	sxtb16	r2, r2, ror #8
 800abfa:	fb24 6505 	smlad	r5, r4, r5, r6
 800abfe:	fb22 5508 	smlad	r5, r2, r8, r5
 800ac02:	fb24 110e 	smlad	r1, r4, lr, r1
 800ac06:	fb22 120c 	smlad	r2, r2, ip, r1
 800ac0a:	4287      	cmp	r7, r0
 800ac0c:	d1b4      	bne.n	800ab78 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 800ac0e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800ac10:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
 800ac14:	9001      	str	r0, [sp, #4]
 800ac16:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 800ac1a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800ac1c:	eb03 0c02 	add.w	ip, r3, r2
 800ac20:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800ac22:	459e      	cmp	lr, r3
 800ac24:	f280 825f 	bge.w	800b0e6 <st_sssa8_ch_nn_mat_mult_nt_t+0xd5a>
 800ac28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac2a:	9c01      	ldr	r4, [sp, #4]
 800ac2c:	f8cd c004 	str.w	ip, [sp, #4]
 800ac30:	eba3 090e 	sub.w	r9, r3, lr
 800ac34:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800ac38:	e9dd 5609 	ldrd	r5, r6, [sp, #36]	; 0x24
 800ac3c:	f109 0801 	add.w	r8, r9, #1
 800ac40:	eb04 0788 	add.w	r7, r4, r8, lsl #2
 800ac44:	4663      	mov	r3, ip
 800ac46:	6818      	ldr	r0, [r3, #0]
 800ac48:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800ac4c:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800ac50:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ac54:	f854 2b04 	ldr.w	r2, [r4], #4
 800ac58:	fa2f f182 	sxtb16	r1, r2
 800ac5c:	3310      	adds	r3, #16
 800ac5e:	fa2f f292 	sxtb16	r2, r2, ror #8
 800ac62:	fb21 5500 	smlad	r5, r1, r0, r5
 800ac66:	fb22 550b 	smlad	r5, r2, fp, r5
 800ac6a:	fb21 660a 	smlad	r6, r1, sl, r6
 800ac6e:	fb22 660c 	smlad	r6, r2, ip, r6
 800ac72:	42bc      	cmp	r4, r7
 800ac74:	d1e7      	bne.n	800ac46 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ba>
 800ac76:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ac7a:	e9cd 5609 	strd	r5, r6, [sp, #36]	; 0x24
 800ac7e:	f10e 0e04 	add.w	lr, lr, #4
 800ac82:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 800ac86:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800ac8a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800ac8c:	4573      	cmp	r3, lr
 800ac8e:	dd40      	ble.n	800ad12 <st_sssa8_ch_nn_mat_mult_nt_t+0x986>
 800ac90:	f997 3000 	ldrsb.w	r3, [r7]
 800ac94:	f8bc 2000 	ldrh.w	r2, [ip]
 800ac98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac9c:	fb12 1103 	smlabb	r1, r2, r3, r1
 800aca0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aca4:	9109      	str	r1, [sp, #36]	; 0x24
 800aca6:	fb12 0003 	smlabb	r0, r2, r3, r0
 800acaa:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800acac:	900a      	str	r0, [sp, #40]	; 0x28
 800acae:	f10e 0301 	add.w	r3, lr, #1
 800acb2:	429a      	cmp	r2, r3
 800acb4:	dd2d      	ble.n	800ad12 <st_sssa8_ch_nn_mat_mult_nt_t+0x986>
 800acb6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800acba:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800acbe:	fb12 1103 	smlabb	r1, r2, r3, r1
 800acc2:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800acc6:	9109      	str	r1, [sp, #36]	; 0x24
 800acc8:	fb12 0003 	smlabb	r0, r2, r3, r0
 800accc:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800acce:	900a      	str	r0, [sp, #40]	; 0x28
 800acd0:	f10e 0302 	add.w	r3, lr, #2
 800acd4:	429a      	cmp	r2, r3
 800acd6:	dd1c      	ble.n	800ad12 <st_sssa8_ch_nn_mat_mult_nt_t+0x986>
 800acd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800acdc:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800ace0:	fb12 1103 	smlabb	r1, r2, r3, r1
 800ace4:	f8bc 200a 	ldrh.w	r2, [ip, #10]
 800ace8:	9109      	str	r1, [sp, #36]	; 0x24
 800acea:	fb12 0003 	smlabb	r0, r2, r3, r0
 800acee:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800acf0:	900a      	str	r0, [sp, #40]	; 0x28
 800acf2:	f10e 0e03 	add.w	lr, lr, #3
 800acf6:	4573      	cmp	r3, lr
 800acf8:	dd0b      	ble.n	800ad12 <st_sssa8_ch_nn_mat_mult_nt_t+0x986>
 800acfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acfe:	f8bc 200c 	ldrh.w	r2, [ip, #12]
 800ad02:	fb12 1203 	smlabb	r2, r2, r3, r1
 800ad06:	9209      	str	r2, [sp, #36]	; 0x24
 800ad08:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800ad0c:	fb12 0303 	smlabb	r3, r2, r3, r0
 800ad10:	930a      	str	r3, [sp, #40]	; 0x28
 800ad12:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800ad14:	9a03      	ldr	r2, [sp, #12]
 800ad16:	18d1      	adds	r1, r2, r3
 800ad18:	9b08      	ldr	r3, [sp, #32]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f040 8180 	bne.w	800b020 <st_sssa8_ch_nn_mat_mult_nt_t+0xc94>
 800ad20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad22:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	fb53 4300 	smmla	r3, r3, r0, r4
 800ad2c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800ad2e:	4103      	asrs	r3, r0
 800ad30:	f303 0307 	ssat	r3, #8, r3
 800ad34:	7013      	strb	r3, [r2, #0]
 800ad36:	9b07      	ldr	r3, [sp, #28]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f040 815e 	bne.w	800affa <st_sssa8_ch_nn_mat_mult_nt_t+0xc6e>
 800ad3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	fb53 0302 	smmla	r3, r3, r2, r0
 800ad4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad4c:	4113      	asrs	r3, r2
 800ad4e:	f303 0307 	ssat	r3, #8, r3
 800ad52:	700b      	strb	r3, [r1, #0]
 800ad54:	e584      	b.n	800a860 <st_sssa8_ch_nn_mat_mult_nt_t+0x4d4>
 800ad56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ad58:	3302      	adds	r3, #2
 800ad5a:	9328      	str	r3, [sp, #160]	; 0xa0
 800ad5c:	e58c      	b.n	800a878 <st_sssa8_ch_nn_mat_mult_nt_t+0x4ec>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	9307      	str	r3, [sp, #28]
 800ad62:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f47f abba 	bne.w	800a4de <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 800ad6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ad6c:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800ad6e:	eb03 0902 	add.w	r9, r3, r2
 800ad72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f340 81b8 	ble.w	800b0ea <st_sssa8_ch_nn_mat_mult_nt_t+0xd5e>
 800ad7a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800ad7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ad7e:	18d0      	adds	r0, r2, r3
 800ad80:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800ad82:	4649      	mov	r1, r9
 800ad84:	6815      	ldr	r5, [r2, #0]
 800ad86:	680c      	ldr	r4, [r1, #0]
 800ad88:	ea4f 2635 	mov.w	r6, r5, ror #8
 800ad8c:	fa2f f585 	sxtb16	r5, r5
 800ad90:	601d      	str	r5, [r3, #0]
 800ad92:	fa2f f586 	sxtb16	r5, r6
 800ad96:	605d      	str	r5, [r3, #4]
 800ad98:	ea4f 2534 	mov.w	r5, r4, ror #8
 800ad9c:	fa2f f484 	sxtb16	r4, r4
 800ada0:	609c      	str	r4, [r3, #8]
 800ada2:	fa2f f485 	sxtb16	r4, r5
 800ada6:	60dc      	str	r4, [r3, #12]
 800ada8:	6855      	ldr	r5, [r2, #4]
 800adaa:	684c      	ldr	r4, [r1, #4]
 800adac:	ea4f 2635 	mov.w	r6, r5, ror #8
 800adb0:	fa2f f585 	sxtb16	r5, r5
 800adb4:	611d      	str	r5, [r3, #16]
 800adb6:	fa2f f586 	sxtb16	r5, r6
 800adba:	615d      	str	r5, [r3, #20]
 800adbc:	ea4f 2534 	mov.w	r5, r4, ror #8
 800adc0:	fa2f f484 	sxtb16	r4, r4
 800adc4:	619c      	str	r4, [r3, #24]
 800adc6:	fa2f f485 	sxtb16	r4, r5
 800adca:	61dc      	str	r4, [r3, #28]
 800adcc:	6895      	ldr	r5, [r2, #8]
 800adce:	688c      	ldr	r4, [r1, #8]
 800add0:	ea4f 2635 	mov.w	r6, r5, ror #8
 800add4:	fa2f f585 	sxtb16	r5, r5
 800add8:	621d      	str	r5, [r3, #32]
 800adda:	fa2f f586 	sxtb16	r5, r6
 800adde:	625d      	str	r5, [r3, #36]	; 0x24
 800ade0:	ea4f 2534 	mov.w	r5, r4, ror #8
 800ade4:	fa2f f484 	sxtb16	r4, r4
 800ade8:	629c      	str	r4, [r3, #40]	; 0x28
 800adea:	fa2f f485 	sxtb16	r4, r5
 800adee:	62dc      	str	r4, [r3, #44]	; 0x2c
 800adf0:	68d5      	ldr	r5, [r2, #12]
 800adf2:	68cc      	ldr	r4, [r1, #12]
 800adf4:	3210      	adds	r2, #16
 800adf6:	4282      	cmp	r2, r0
 800adf8:	ea4f 2635 	mov.w	r6, r5, ror #8
 800adfc:	f101 0110 	add.w	r1, r1, #16
 800ae00:	fa2f f585 	sxtb16	r5, r5
 800ae04:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800ae08:	f843 5c10 	str.w	r5, [r3, #-16]
 800ae0c:	fa2f f586 	sxtb16	r5, r6
 800ae10:	f843 5c0c 	str.w	r5, [r3, #-12]
 800ae14:	ea4f 2534 	mov.w	r5, r4, ror #8
 800ae18:	fa2f f484 	sxtb16	r4, r4
 800ae1c:	f843 4c08 	str.w	r4, [r3, #-8]
 800ae20:	fa2f f485 	sxtb16	r4, r5
 800ae24:	f843 4c04 	str.w	r4, [r3, #-4]
 800ae28:	d1ac      	bne.n	800ad84 <st_sssa8_ch_nn_mat_mult_nt_t+0x9f8>
 800ae2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800ae2c:	9a52      	ldr	r2, [sp, #328]	; 0x148
 800ae2e:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800ae30:	4499      	add	r9, r3
 800ae32:	1857      	adds	r7, r2, r1
 800ae34:	469c      	mov	ip, r3
 800ae36:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800ae38:	4563      	cmp	r3, ip
 800ae3a:	bfd8      	it	le
 800ae3c:	4606      	movle	r6, r0
 800ae3e:	dd2f      	ble.n	800aea0 <st_sssa8_ch_nn_mat_mult_nt_t+0xb14>
 800ae40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae42:	eba3 030c 	sub.w	r3, r3, ip
 800ae46:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800ae4a:	f108 0e01 	add.w	lr, r8, #1
 800ae4e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 800ae52:	eb00 068e 	add.w	r6, r0, lr, lsl #2
 800ae56:	463b      	mov	r3, r7
 800ae58:	464d      	mov	r5, r9
 800ae5a:	f850 1b04 	ldr.w	r1, [r0], #4
 800ae5e:	f855 2b04 	ldr.w	r2, [r5], #4
 800ae62:	4286      	cmp	r6, r0
 800ae64:	ea4f 2431 	mov.w	r4, r1, ror #8
 800ae68:	f103 0310 	add.w	r3, r3, #16
 800ae6c:	fa2f f181 	sxtb16	r1, r1
 800ae70:	f843 1c10 	str.w	r1, [r3, #-16]
 800ae74:	fa2f f184 	sxtb16	r1, r4
 800ae78:	f843 1c0c 	str.w	r1, [r3, #-12]
 800ae7c:	ea4f 2132 	mov.w	r1, r2, ror #8
 800ae80:	fa2f f282 	sxtb16	r2, r2
 800ae84:	f843 2c08 	str.w	r2, [r3, #-8]
 800ae88:	fa2f f281 	sxtb16	r2, r1
 800ae8c:	f843 2c04 	str.w	r2, [r3, #-4]
 800ae90:	d1e3      	bne.n	800ae5a <st_sssa8_ch_nn_mat_mult_nt_t+0xace>
 800ae92:	f10c 0304 	add.w	r3, ip, #4
 800ae96:	44d1      	add	r9, sl
 800ae98:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800ae9c:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 800aea0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800aea2:	4563      	cmp	r3, ip
 800aea4:	f77f ab1b 	ble.w	800a4de <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 800aea8:	461a      	mov	r2, r3
 800aeaa:	f996 3000 	ldrsb.w	r3, [r6]
 800aeae:	803b      	strh	r3, [r7, #0]
 800aeb0:	f999 3000 	ldrsb.w	r3, [r9]
 800aeb4:	807b      	strh	r3, [r7, #2]
 800aeb6:	f10c 0301 	add.w	r3, ip, #1
 800aeba:	4293      	cmp	r3, r2
 800aebc:	f6bf ab0f 	bge.w	800a4de <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 800aec0:	f996 3001 	ldrsb.w	r3, [r6, #1]
 800aec4:	80bb      	strh	r3, [r7, #4]
 800aec6:	f999 3001 	ldrsb.w	r3, [r9, #1]
 800aeca:	80fb      	strh	r3, [r7, #6]
 800aecc:	f10c 0302 	add.w	r3, ip, #2
 800aed0:	4293      	cmp	r3, r2
 800aed2:	f6bf ab04 	bge.w	800a4de <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 800aed6:	f996 3002 	ldrsb.w	r3, [r6, #2]
 800aeda:	813b      	strh	r3, [r7, #8]
 800aedc:	f10c 0c03 	add.w	ip, ip, #3
 800aee0:	f999 3002 	ldrsb.w	r3, [r9, #2]
 800aee4:	817b      	strh	r3, [r7, #10]
 800aee6:	4594      	cmp	ip, r2
 800aee8:	f6bf aaf9 	bge.w	800a4de <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 800aeec:	f996 3003 	ldrsb.w	r3, [r6, #3]
 800aef0:	81bb      	strh	r3, [r7, #12]
 800aef2:	f999 3003 	ldrsb.w	r3, [r9, #3]
 800aef6:	81fb      	strh	r3, [r7, #14]
 800aef8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f43f aaf3 	beq.w	800a4e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x15a>
 800af00:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800af02:	2800      	cmp	r0, #0
 800af04:	f000 80e3 	beq.w	800b0ce <st_sssa8_ch_nn_mat_mult_nt_t+0xd42>
 800af08:	9a52      	ldr	r2, [sp, #328]	; 0x148
 800af0a:	2300      	movs	r3, #0
 800af0c:	f102 0110 	add.w	r1, r2, #16
 800af10:	461a      	mov	r2, r3
 800af12:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 800af16:	1b1b      	subs	r3, r3, r4
 800af18:	f931 4c08 	ldrsh.w	r4, [r1, #-8]
 800af1c:	1b12      	subs	r2, r2, r4
 800af1e:	f931 4c0e 	ldrsh.w	r4, [r1, #-14]
 800af22:	1b1b      	subs	r3, r3, r4
 800af24:	f931 4c06 	ldrsh.w	r4, [r1, #-6]
 800af28:	1b12      	subs	r2, r2, r4
 800af2a:	f931 4c0c 	ldrsh.w	r4, [r1, #-12]
 800af2e:	1b1b      	subs	r3, r3, r4
 800af30:	f931 4c04 	ldrsh.w	r4, [r1, #-4]
 800af34:	1b12      	subs	r2, r2, r4
 800af36:	f931 4c0a 	ldrsh.w	r4, [r1, #-10]
 800af3a:	1b1b      	subs	r3, r3, r4
 800af3c:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 800af40:	3801      	subs	r0, #1
 800af42:	eba2 0204 	sub.w	r2, r2, r4
 800af46:	f101 0110 	add.w	r1, r1, #16
 800af4a:	d1e2      	bne.n	800af12 <st_sssa8_ch_nn_mat_mult_nt_t+0xb86>
 800af4c:	9952      	ldr	r1, [sp, #328]	; 0x148
 800af4e:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800af50:	4401      	add	r1, r0
 800af52:	9804      	ldr	r0, [sp, #16]
 800af54:	b1a8      	cbz	r0, 800af82 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf6>
 800af56:	f9b1 0000 	ldrsh.w	r0, [r1]
 800af5a:	1a1b      	subs	r3, r3, r0
 800af5c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 800af60:	1a12      	subs	r2, r2, r0
 800af62:	981c      	ldr	r0, [sp, #112]	; 0x70
 800af64:	b168      	cbz	r0, 800af82 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf6>
 800af66:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 800af6a:	1a1b      	subs	r3, r3, r0
 800af6c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 800af70:	1a12      	subs	r2, r2, r0
 800af72:	9820      	ldr	r0, [sp, #128]	; 0x80
 800af74:	b128      	cbz	r0, 800af82 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf6>
 800af76:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 800af7a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800af7e:	1a1b      	subs	r3, r3, r0
 800af80:	1a52      	subs	r2, r2, r1
 800af82:	994e      	ldr	r1, [sp, #312]	; 0x138
 800af84:	fb03 f101 	mul.w	r1, r3, r1
 800af88:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800af8a:	fb03 f202 	mul.w	r2, r3, r2
 800af8e:	f7ff baac 	b.w	800a4ea <st_sssa8_ch_nn_mat_mult_nt_t+0x15e>
 800af92:	2301      	movs	r3, #1
 800af94:	9308      	str	r3, [sp, #32]
 800af96:	f7ff ba94 	b.w	800a4c2 <st_sssa8_ch_nn_mat_mult_nt_t+0x136>
 800af9a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800af9c:	40a8      	lsls	r0, r5
 800af9e:	f300 001f 	ssat	r0, #32, r0
 800afa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800afa4:	fb50 f016 	smmulr	r0, r0, r6
 800afa8:	40ac      	lsls	r4, r5
 800afaa:	f304 041f 	ssat	r4, #32, r4
 800afae:	fb54 f416 	smmulr	r4, r4, r6
 800afb2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800afb4:	4428      	add	r0, r5
 800afb6:	f300 0007 	ssat	r0, #8, r0
 800afba:	9e03      	ldr	r6, [sp, #12]
 800afbc:	7030      	strb	r0, [r6, #0]
 800afbe:	1928      	adds	r0, r5, r4
 800afc0:	f300 0007 	ssat	r0, #8, r0
 800afc4:	7008      	strb	r0, [r1, #0]
 800afc6:	e537      	b.n	800aa38 <st_sssa8_ch_nn_mat_mult_nt_t+0x6ac>
 800afc8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800afca:	4082      	lsls	r2, r0
 800afcc:	f302 021f 	ssat	r2, #32, r2
 800afd0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800afd2:	fb52 f214 	smmulr	r2, r2, r4
 800afd6:	4083      	lsls	r3, r0
 800afd8:	f303 031f 	ssat	r3, #32, r3
 800afdc:	fb53 f314 	smmulr	r3, r3, r4
 800afe0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800afe2:	4402      	add	r2, r0
 800afe4:	f302 0207 	ssat	r2, #8, r2
 800afe8:	9c03      	ldr	r4, [sp, #12]
 800afea:	4403      	add	r3, r0
 800afec:	7062      	strb	r2, [r4, #1]
 800afee:	f303 0307 	ssat	r3, #8, r3
 800aff2:	704b      	strb	r3, [r1, #1]
 800aff4:	f8cd c00c 	str.w	ip, [sp, #12]
 800aff8:	e425      	b.n	800a846 <st_sssa8_ch_nn_mat_mult_nt_t+0x4ba>
 800affa:	3301      	adds	r3, #1
 800affc:	d056      	beq.n	800b0ac <st_sssa8_ch_nn_mat_mult_nt_t+0xd20>
 800affe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b000:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b002:	1e93      	subs	r3, r2, #2
 800b004:	2001      	movs	r0, #1
 800b006:	3a01      	subs	r2, #1
 800b008:	fa00 f303 	lsl.w	r3, r0, r3
 800b00c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b00e:	fb50 3304 	smmla	r3, r0, r4, r3
 800b012:	4113      	asrs	r3, r2
 800b014:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b016:	4413      	add	r3, r2
 800b018:	f303 0307 	ssat	r3, #8, r3
 800b01c:	700b      	strb	r3, [r1, #0]
 800b01e:	e41f      	b.n	800a860 <st_sssa8_ch_nn_mat_mult_nt_t+0x4d4>
 800b020:	3301      	adds	r3, #1
 800b022:	d032      	beq.n	800b08a <st_sssa8_ch_nn_mat_mult_nt_t+0xcfe>
 800b024:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b026:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b028:	1e93      	subs	r3, r2, #2
 800b02a:	2001      	movs	r0, #1
 800b02c:	3a01      	subs	r2, #1
 800b02e:	fa00 f303 	lsl.w	r3, r0, r3
 800b032:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b034:	fb50 3304 	smmla	r3, r0, r4, r3
 800b038:	4113      	asrs	r3, r2
 800b03a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b03c:	4413      	add	r3, r2
 800b03e:	f303 0307 	ssat	r3, #8, r3
 800b042:	9a03      	ldr	r2, [sp, #12]
 800b044:	7013      	strb	r3, [r2, #0]
 800b046:	e676      	b.n	800ad36 <st_sssa8_ch_nn_mat_mult_nt_t+0x9aa>
 800b048:	9d4c      	ldr	r5, [sp, #304]	; 0x130
 800b04a:	442e      	add	r6, r5
 800b04c:	e49e      	b.n	800a98c <st_sssa8_ch_nn_mat_mult_nt_t+0x600>
 800b04e:	f1bc 0f00 	cmp.w	ip, #0
 800b052:	dd0b      	ble.n	800b06c <st_sssa8_ch_nn_mat_mult_nt_t+0xce0>
 800b054:	6825      	ldr	r5, [r4, #0]
 800b056:	ea4f 0947 	mov.w	r9, r7, lsl #1
 800b05a:	6807      	ldr	r7, [r0, #0]
 800b05c:	fb59 7705 	smmla	r7, r9, r5, r7
 800b060:	fa47 f50c 	asr.w	r5, r7, ip
 800b064:	f305 0507 	ssat	r5, #8, r5
 800b068:	7035      	strb	r5, [r6, #0]
 800b06a:	e481      	b.n	800a970 <st_sssa8_ch_nn_mat_mult_nt_t+0x5e4>
 800b06c:	f1cc 0c01 	rsb	ip, ip, #1
 800b070:	fa07 f70c 	lsl.w	r7, r7, ip
 800b074:	f307 071f 	ssat	r7, #32, r7
 800b078:	6825      	ldr	r5, [r4, #0]
 800b07a:	fb57 f715 	smmulr	r7, r7, r5
 800b07e:	6805      	ldr	r5, [r0, #0]
 800b080:	443d      	add	r5, r7
 800b082:	f305 0507 	ssat	r5, #8, r5
 800b086:	7035      	strb	r5, [r6, #0]
 800b088:	e472      	b.n	800a970 <st_sssa8_ch_nn_mat_mult_nt_t+0x5e4>
 800b08a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b08c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b08e:	f1c3 0301 	rsb	r3, r3, #1
 800b092:	409a      	lsls	r2, r3
 800b094:	f302 031f 	ssat	r3, #32, r2
 800b098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b09a:	fb53 f312 	smmulr	r3, r3, r2
 800b09e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a0:	441a      	add	r2, r3
 800b0a2:	f302 0307 	ssat	r3, #8, r2
 800b0a6:	9a03      	ldr	r2, [sp, #12]
 800b0a8:	7013      	strb	r3, [r2, #0]
 800b0aa:	e644      	b.n	800ad36 <st_sssa8_ch_nn_mat_mult_nt_t+0x9aa>
 800b0ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b0ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0b0:	f1c3 0301 	rsb	r3, r3, #1
 800b0b4:	409a      	lsls	r2, r3
 800b0b6:	f302 031f 	ssat	r3, #32, r2
 800b0ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0bc:	fb53 f312 	smmulr	r3, r3, r2
 800b0c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0c2:	441a      	add	r2, r3
 800b0c4:	f302 0307 	ssat	r3, #8, r2
 800b0c8:	700b      	strb	r3, [r1, #0]
 800b0ca:	f7ff bbc9 	b.w	800a860 <st_sssa8_ch_nn_mat_mult_nt_t+0x4d4>
 800b0ce:	9952      	ldr	r1, [sp, #328]	; 0x148
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	e73d      	b.n	800af52 <st_sssa8_ch_nn_mat_mult_nt_t+0xbc6>
 800b0d6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800b0d8:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
 800b0dc:	f04f 0e00 	mov.w	lr, #0
 800b0e0:	459e      	cmp	lr, r3
 800b0e2:	f6ff ada1 	blt.w	800ac28 <st_sssa8_ch_nn_mat_mult_nt_t+0x89c>
 800b0e6:	9f01      	ldr	r7, [sp, #4]
 800b0e8:	e5cf      	b.n	800ac8a <st_sssa8_ch_nn_mat_mult_nt_t+0x8fe>
 800b0ea:	9f52      	ldr	r7, [sp, #328]	; 0x148
 800b0ec:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800b0ee:	f8dd c14c 	ldr.w	ip, [sp, #332]	; 0x14c
 800b0f2:	e6a0      	b.n	800ae36 <st_sssa8_ch_nn_mat_mult_nt_t+0xaaa>

0800b0f4 <st_int8_avepool>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	b097      	sub	sp, #92	; 0x5c
 800b0fa:	4699      	mov	r9, r3
 800b0fc:	9100      	str	r1, [sp, #0]
 800b0fe:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 800b102:	9111      	str	r1, [sp, #68]	; 0x44
 800b104:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800b108:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 800b10c:	9112      	str	r1, [sp, #72]	; 0x48
 800b10e:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 800b112:	930f      	str	r3, [sp, #60]	; 0x3c
 800b114:	4692      	mov	sl, r2
 800b116:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800b11a:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 800b11e:	9105      	str	r1, [sp, #20]
 800b120:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	; 0xa4
 800b124:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 800b128:	930b      	str	r3, [sp, #44]	; 0x2c
 800b12a:	9103      	str	r1, [sp, #12]
 800b12c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800b130:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	; 0xa8
 800b134:	9310      	str	r3, [sp, #64]	; 0x40
 800b136:	eec0 6a20 	vdiv.f32	s13, s0, s1
 800b13a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800b13e:	9404      	str	r4, [sp, #16]
 800b140:	9213      	str	r2, [sp, #76]	; 0x4c
 800b142:	9102      	str	r1, [sp, #8]
 800b144:	2a00      	cmp	r2, #0
 800b146:	f000 80aa 	beq.w	800b29e <st_int8_avepool+0x1aa>
 800b14a:	2c01      	cmp	r4, #1
 800b14c:	4683      	mov	fp, r0
 800b14e:	f040 80dd 	bne.w	800b30c <st_int8_avepool+0x218>
 800b152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b154:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 800b304 <st_int8_avepool+0x210>
 800b158:	eddf 3a6b 	vldr	s7, [pc, #428]	; 800b308 <st_int8_avepool+0x214>
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	b29b      	uxth	r3, r3
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	425b      	negs	r3, r3
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	920d      	str	r2, [sp, #52]	; 0x34
 800b16e:	2200      	movs	r2, #0
 800b170:	930c      	str	r3, [sp, #48]	; 0x30
 800b172:	4613      	mov	r3, r2
 800b174:	9905      	ldr	r1, [sp, #20]
 800b176:	2900      	cmp	r1, #0
 800b178:	f000 80c0 	beq.w	800b2fc <st_int8_avepool+0x208>
 800b17c:	b292      	uxth	r2, r2
 800b17e:	9207      	str	r2, [sp, #28]
 800b180:	9a05      	ldr	r2, [sp, #20]
 800b182:	eddd 7a03 	vldr	s15, [sp, #12]
 800b186:	fb03 f302 	mul.w	r3, r3, r2
 800b18a:	9308      	str	r3, [sp, #32]
 800b18c:	9a01      	ldr	r2, [sp, #4]
 800b18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	b21b      	sxth	r3, r3
 800b194:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800b198:	eddd 7a02 	vldr	s15, [sp, #8]
 800b19c:	930a      	str	r3, [sp, #40]	; 0x28
 800b19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b1a8:	9306      	str	r3, [sp, #24]
 800b1aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b1ae:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800b1b2:	b216      	sxth	r6, r2
 800b1b4:	4688      	mov	r8, r1
 800b1b6:	b28b      	uxth	r3, r1
 800b1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b1bc:	9b08      	ldr	r3, [sp, #32]
 800b1be:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 800b1c2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 800b1c6:	42b2      	cmp	r2, r6
 800b1c8:	4498      	add	r8, r3
 800b1ca:	f280 8083 	bge.w	800b2d4 <st_int8_avepool+0x1e0>
 800b1ce:	2700      	movs	r7, #0
 800b1d0:	46bc      	mov	ip, r7
 800b1d2:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 800b1d6:	428c      	cmp	r4, r1
 800b1d8:	da13      	bge.n	800b202 <st_int8_avepool+0x10e>
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	fb0a f502 	mul.w	r5, sl, r2
 800b1e0:	db0f      	blt.n	800b202 <st_int8_avepool+0x10e>
 800b1e2:	454a      	cmp	r2, r9
 800b1e4:	da0d      	bge.n	800b202 <st_int8_avepool+0x10e>
 800b1e6:	2c00      	cmp	r4, #0
 800b1e8:	4623      	mov	r3, r4
 800b1ea:	db5b      	blt.n	800b2a4 <st_int8_avepool+0x1b0>
 800b1ec:	445d      	add	r5, fp
 800b1ee:	459a      	cmp	sl, r3
 800b1f0:	dd03      	ble.n	800b1fa <st_int8_avepool+0x106>
 800b1f2:	f915 e003 	ldrsb.w	lr, [r5, r3]
 800b1f6:	3701      	adds	r7, #1
 800b1f8:	44f4      	add	ip, lr
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b21b      	sxth	r3, r3
 800b1fe:	428b      	cmp	r3, r1
 800b200:	dbf5      	blt.n	800b1ee <st_int8_avepool+0xfa>
 800b202:	3201      	adds	r2, #1
 800b204:	b212      	sxth	r2, r2
 800b206:	42b2      	cmp	r2, r6
 800b208:	dbe5      	blt.n	800b1d6 <st_int8_avepool+0xe2>
 800b20a:	eeb4 0a60 	vcmp.f32	s0, s1
 800b20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b212:	d103      	bne.n	800b21c <st_int8_avepool+0x128>
 800b214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b218:	4293      	cmp	r3, r2
 800b21a:	d04e      	beq.n	800b2ba <st_int8_avepool+0x1c6>
 800b21c:	ee07 ca90 	vmov	s15, ip
 800b220:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 800b224:	ee07 7a90 	vmov	s15, r7
 800b228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b22c:	ee84 7a27 	vdiv.f32	s14, s8, s15
 800b230:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b234:	eef0 7a45 	vmov.f32	s15, s10
 800b238:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b23c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b244:	bfb4      	ite	lt
 800b246:	eeb0 7a46 	vmovlt.f32	s14, s12
 800b24a:	eeb0 7a65 	vmovge.f32	s14, s11
 800b24e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b256:	ee17 3a90 	vmov	r3, s15
 800b25a:	f303 0307 	ssat	r3, #8, r3
 800b25e:	9a00      	ldr	r2, [sp, #0]
 800b260:	f802 3008 	strb.w	r3, [r2, r8]
 800b264:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b266:	9b06      	ldr	r3, [sp, #24]
 800b268:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b26a:	9a04      	ldr	r2, [sp, #16]
 800b26c:	4403      	add	r3, r0
 800b26e:	b29b      	uxth	r3, r3
 800b270:	3101      	adds	r1, #1
 800b272:	9306      	str	r3, [sp, #24]
 800b274:	9b05      	ldr	r3, [sp, #20]
 800b276:	b209      	sxth	r1, r1
 800b278:	4402      	add	r2, r0
 800b27a:	b292      	uxth	r2, r2
 800b27c:	4299      	cmp	r1, r3
 800b27e:	9204      	str	r2, [sp, #16]
 800b280:	4688      	mov	r8, r1
 800b282:	db98      	blt.n	800b1b6 <st_int8_avepool+0xc2>
 800b284:	9b01      	ldr	r3, [sp, #4]
 800b286:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b288:	9a07      	ldr	r2, [sp, #28]
 800b28a:	440b      	add	r3, r1
 800b28c:	3201      	adds	r2, #1
 800b28e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b290:	b212      	sxth	r2, r2
 800b292:	b29b      	uxth	r3, r3
 800b294:	4291      	cmp	r1, r2
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	4613      	mov	r3, r2
 800b29a:	f73f af6b 	bgt.w	800b174 <st_int8_avepool+0x80>
 800b29e:	b017      	add	sp, #92	; 0x5c
 800b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	b21b      	sxth	r3, r3
 800b2a8:	4298      	cmp	r0, r3
 800b2aa:	dcfb      	bgt.n	800b2a4 <st_int8_avepool+0x1b0>
 800b2ac:	4299      	cmp	r1, r3
 800b2ae:	dc9d      	bgt.n	800b1ec <st_int8_avepool+0xf8>
 800b2b0:	3201      	adds	r2, #1
 800b2b2:	b212      	sxth	r2, r2
 800b2b4:	42b2      	cmp	r2, r6
 800b2b6:	db8e      	blt.n	800b1d6 <st_int8_avepool+0xe2>
 800b2b8:	e7a7      	b.n	800b20a <st_int8_avepool+0x116>
 800b2ba:	f1bc 0f00 	cmp.w	ip, #0
 800b2be:	db16      	blt.n	800b2ee <st_int8_avepool+0x1fa>
 800b2c0:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 800b2c4:	fbbc fcf7 	udiv	ip, ip, r7
 800b2c8:	f30c 0c07 	ssat	ip, #8, ip
 800b2cc:	9b00      	ldr	r3, [sp, #0]
 800b2ce:	f803 c008 	strb.w	ip, [r3, r8]
 800b2d2:	e7c7      	b.n	800b264 <st_int8_avepool+0x170>
 800b2d4:	eeb4 0a60 	vcmp.f32	s0, s1
 800b2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2dc:	d104      	bne.n	800b2e8 <st_int8_avepool+0x1f4>
 800b2de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	f000 8103 	beq.w	800b4ee <st_int8_avepool+0x3fa>
 800b2e8:	eeb0 7a63 	vmov.f32	s14, s7
 800b2ec:	e7a0      	b.n	800b230 <st_int8_avepool+0x13c>
 800b2ee:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 800b2f2:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 800b2f6:	fb93 fcf7 	sdiv	ip, r3, r7
 800b2fa:	e7e5      	b.n	800b2c8 <st_int8_avepool+0x1d4>
 800b2fc:	b293      	uxth	r3, r2
 800b2fe:	9307      	str	r3, [sp, #28]
 800b300:	e7c0      	b.n	800b284 <st_int8_avepool+0x190>
 800b302:	bf00      	nop
 800b304:	befffffc 	.word	0xbefffffc
 800b308:	7fc00000 	.word	0x7fc00000
 800b30c:	425b      	negs	r3, r3
 800b30e:	9905      	ldr	r1, [sp, #20]
 800b310:	ed1f 5a04 	vldr	s10, [pc, #-16]	; 800b304 <st_int8_avepool+0x210>
 800b314:	ed5f 5a04 	vldr	s11, [pc, #-16]	; 800b308 <st_int8_avepool+0x214>
 800b318:	9014      	str	r0, [sp, #80]	; 0x50
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	2200      	movs	r2, #0
 800b31e:	930a      	str	r3, [sp, #40]	; 0x28
 800b320:	46d3      	mov	fp, sl
 800b322:	4613      	mov	r3, r2
 800b324:	46ca      	mov	sl, r9
 800b326:	2900      	cmp	r1, #0
 800b328:	f000 80b9 	beq.w	800b49e <st_int8_avepool+0x3aa>
 800b32c:	b292      	uxth	r2, r2
 800b32e:	920e      	str	r2, [sp, #56]	; 0x38
 800b330:	9a05      	ldr	r2, [sp, #20]
 800b332:	eddd 7a03 	vldr	s15, [sp, #12]
 800b336:	fb03 f302 	mul.w	r3, r3, r2
 800b33a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b33c:	9315      	str	r3, [sp, #84]	; 0x54
 800b33e:	4253      	negs	r3, r2
 800b340:	b29b      	uxth	r3, r3
 800b342:	9308      	str	r3, [sp, #32]
 800b344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b346:	1a9b      	subs	r3, r3, r2
 800b348:	b29b      	uxth	r3, r3
 800b34a:	9309      	str	r3, [sp, #36]	; 0x24
 800b34c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b350:	4413      	add	r3, r2
 800b352:	fa0f f983 	sxth.w	r9, r3
 800b356:	f04f 0800 	mov.w	r8, #0
 800b35a:	b213      	sxth	r3, r2
 800b35c:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800b360:	930c      	str	r3, [sp, #48]	; 0x30
 800b362:	4643      	mov	r3, r8
 800b364:	9a04      	ldr	r2, [sp, #16]
 800b366:	2a00      	cmp	r2, #0
 800b368:	f000 80bd 	beq.w	800b4e6 <st_int8_avepool+0x3f2>
 800b36c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b36e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800b372:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800b376:	4413      	add	r3, r2
 800b378:	fa1f f288 	uxth.w	r2, r8
 800b37c:	920d      	str	r2, [sp, #52]	; 0x34
 800b37e:	9a04      	ldr	r2, [sp, #16]
 800b380:	f04f 0e00 	mov.w	lr, #0
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	9307      	str	r3, [sp, #28]
 800b38a:	46f0      	mov	r8, lr
 800b38c:	ea01 70e1 	and.w	r0, r1, r1, asr #31
 800b390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b392:	454a      	cmp	r2, r9
 800b394:	f280 8094 	bge.w	800b4c0 <st_int8_avepool+0x3cc>
 800b398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b39a:	2500      	movs	r5, #0
 800b39c:	4443      	add	r3, r8
 800b39e:	462e      	mov	r6, r5
 800b3a0:	9306      	str	r3, [sp, #24]
 800b3a2:	428c      	cmp	r4, r1
 800b3a4:	da1a      	bge.n	800b3dc <st_int8_avepool+0x2e8>
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	fb02 f70b 	mul.w	r7, r2, fp
 800b3ac:	db16      	blt.n	800b3dc <st_int8_avepool+0x2e8>
 800b3ae:	4552      	cmp	r2, sl
 800b3b0:	da14      	bge.n	800b3dc <st_int8_avepool+0x2e8>
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	4623      	mov	r3, r4
 800b3b6:	db75      	blt.n	800b4a4 <st_int8_avepool+0x3b0>
 800b3b8:	9701      	str	r7, [sp, #4]
 800b3ba:	459b      	cmp	fp, r3
 800b3bc:	dd0a      	ble.n	800b3d4 <st_int8_avepool+0x2e0>
 800b3be:	9f01      	ldr	r7, [sp, #4]
 800b3c0:	eb07 0c03 	add.w	ip, r7, r3
 800b3c4:	9f04      	ldr	r7, [sp, #16]
 800b3c6:	fb07 fc0c 	mul.w	ip, r7, ip
 800b3ca:	9f06      	ldr	r7, [sp, #24]
 800b3cc:	f917 c00c 	ldrsb.w	ip, [r7, ip]
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	4466      	add	r6, ip
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	dbee      	blt.n	800b3ba <st_int8_avepool+0x2c6>
 800b3dc:	3201      	adds	r2, #1
 800b3de:	b212      	sxth	r2, r2
 800b3e0:	454a      	cmp	r2, r9
 800b3e2:	dbde      	blt.n	800b3a2 <st_int8_avepool+0x2ae>
 800b3e4:	eeb4 0a60 	vcmp.f32	s0, s1
 800b3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ec:	d103      	bne.n	800b3f6 <st_int8_avepool+0x302>
 800b3ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d05d      	beq.n	800b4b2 <st_int8_avepool+0x3be>
 800b3f6:	ee07 6a90 	vmov	s15, r6
 800b3fa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b3fe:	ee07 5a90 	vmov	s15, r5
 800b402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b406:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800b40a:	ed9d 7a02 	vldr	s14, [sp, #8]
 800b40e:	ee37 6ae4 	vsub.f32	s12, s15, s9
 800b412:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b416:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b41a:	eea6 7a26 	vfma.f32	s14, s12, s13
 800b41e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b426:	bfb8      	it	lt
 800b428:	eef0 7a45 	vmovlt.f32	s15, s10
 800b42c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b434:	ee17 3a90 	vmov	r3, s15
 800b438:	f303 0307 	ssat	r3, #8, r3
 800b43c:	9a00      	ldr	r2, [sp, #0]
 800b43e:	9d07      	ldr	r5, [sp, #28]
 800b440:	442a      	add	r2, r5
 800b442:	f10e 0e01 	add.w	lr, lr, #1
 800b446:	f802 3008 	strb.w	r3, [r2, r8]
 800b44a:	9b04      	ldr	r3, [sp, #16]
 800b44c:	fa0f fe8e 	sxth.w	lr, lr
 800b450:	459e      	cmp	lr, r3
 800b452:	46f0      	mov	r8, lr
 800b454:	db9c      	blt.n	800b390 <st_int8_avepool+0x29c>
 800b456:	9a08      	ldr	r2, [sp, #32]
 800b458:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b45c:	440a      	add	r2, r1
 800b45e:	f103 0801 	add.w	r8, r3, #1
 800b462:	b292      	uxth	r2, r2
 800b464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b466:	9208      	str	r2, [sp, #32]
 800b468:	9a05      	ldr	r2, [sp, #20]
 800b46a:	fa0f f888 	sxth.w	r8, r8
 800b46e:	440b      	add	r3, r1
 800b470:	b29b      	uxth	r3, r3
 800b472:	4590      	cmp	r8, r2
 800b474:	9309      	str	r3, [sp, #36]	; 0x24
 800b476:	4643      	mov	r3, r8
 800b478:	f6ff af74 	blt.w	800b364 <st_int8_avepool+0x270>
 800b47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b47e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b482:	440b      	add	r3, r1
 800b484:	3201      	adds	r2, #1
 800b486:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b488:	b212      	sxth	r2, r2
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	4291      	cmp	r1, r2
 800b48e:	930a      	str	r3, [sp, #40]	; 0x28
 800b490:	4613      	mov	r3, r2
 800b492:	f77f af04 	ble.w	800b29e <st_int8_avepool+0x1aa>
 800b496:	9905      	ldr	r1, [sp, #20]
 800b498:	2900      	cmp	r1, #0
 800b49a:	f47f af47 	bne.w	800b32c <st_int8_avepool+0x238>
 800b49e:	b293      	uxth	r3, r2
 800b4a0:	930e      	str	r3, [sp, #56]	; 0x38
 800b4a2:	e7eb      	b.n	800b47c <st_int8_avepool+0x388>
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	b21b      	sxth	r3, r3
 800b4a8:	4298      	cmp	r0, r3
 800b4aa:	dcfb      	bgt.n	800b4a4 <st_int8_avepool+0x3b0>
 800b4ac:	428b      	cmp	r3, r1
 800b4ae:	db83      	blt.n	800b3b8 <st_int8_avepool+0x2c4>
 800b4b0:	e794      	b.n	800b3dc <st_int8_avepool+0x2e8>
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	db10      	blt.n	800b4d8 <st_int8_avepool+0x3e4>
 800b4b6:	eb06 0665 	add.w	r6, r6, r5, asr #1
 800b4ba:	fbb6 f3f5 	udiv	r3, r6, r5
 800b4be:	e7bb      	b.n	800b438 <st_int8_avepool+0x344>
 800b4c0:	eeb4 0a60 	vcmp.f32	s0, s1
 800b4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c8:	d103      	bne.n	800b4d2 <st_int8_avepool+0x3de>
 800b4ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d00d      	beq.n	800b4ee <st_int8_avepool+0x3fa>
 800b4d2:	eef0 7a65 	vmov.f32	s15, s11
 800b4d6:	e798      	b.n	800b40a <st_int8_avepool+0x316>
 800b4d8:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 800b4dc:	eba6 0363 	sub.w	r3, r6, r3, asr #1
 800b4e0:	fb93 f3f5 	sdiv	r3, r3, r5
 800b4e4:	e7a8      	b.n	800b438 <st_int8_avepool+0x344>
 800b4e6:	fa1f f388 	uxth.w	r3, r8
 800b4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800b4ec:	e7b3      	b.n	800b456 <st_int8_avepool+0x362>
 800b4ee:	deff      	udf	#255	; 0xff

0800b4f0 <arm_float_to_q15>:
 800b4f0:	b530      	push	{r4, r5, lr}
 800b4f2:	0895      	lsrs	r5, r2, #2
 800b4f4:	d072      	beq.n	800b5dc <arm_float_to_q15+0xec>
 800b4f6:	eddf 5a60 	vldr	s11, [pc, #384]	; 800b678 <arm_float_to_q15+0x188>
 800b4fa:	f100 0c10 	add.w	ip, r0, #16
 800b4fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b502:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800b506:	f101 0e08 	add.w	lr, r1, #8
 800b50a:	462c      	mov	r4, r5
 800b50c:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800b510:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b514:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b51c:	bfd4      	ite	le
 800b51e:	eef0 7a45 	vmovle.f32	s15, s10
 800b522:	eef0 7a47 	vmovgt.f32	s15, s14
 800b526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b52a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b52e:	ee17 3a90 	vmov	r3, s15
 800b532:	f303 030f 	ssat	r3, #16, r3
 800b536:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800b53a:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800b53e:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b542:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b54a:	bfd4      	ite	le
 800b54c:	eef0 7a45 	vmovle.f32	s15, s10
 800b550:	eef0 7a47 	vmovgt.f32	s15, s14
 800b554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b55c:	ee17 3a90 	vmov	r3, s15
 800b560:	f303 030f 	ssat	r3, #16, r3
 800b564:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800b568:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800b56c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b570:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	bfd4      	ite	le
 800b57a:	eef0 7a45 	vmovle.f32	s15, s10
 800b57e:	eef0 7a47 	vmovgt.f32	s15, s14
 800b582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b58a:	ee17 3a90 	vmov	r3, s15
 800b58e:	f303 030f 	ssat	r3, #16, r3
 800b592:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800b596:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800b59a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b59e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b5a2:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800b5a6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b5aa:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800b5ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b6:	bfcc      	ite	gt
 800b5b8:	ee16 3a90 	vmovgt	r3, s13
 800b5bc:	ee16 3a10 	vmovle	r3, s12
 800b5c0:	f303 030f 	ssat	r3, #16, r3
 800b5c4:	3c01      	subs	r4, #1
 800b5c6:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800b5ca:	f10c 0c10 	add.w	ip, ip, #16
 800b5ce:	f10e 0e08 	add.w	lr, lr, #8
 800b5d2:	d19b      	bne.n	800b50c <arm_float_to_q15+0x1c>
 800b5d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b5d8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b5dc:	f012 0203 	ands.w	r2, r2, #3
 800b5e0:	d049      	beq.n	800b676 <arm_float_to_q15+0x186>
 800b5e2:	edd0 7a00 	vldr	s15, [r0]
 800b5e6:	eddf 5a24 	vldr	s11, [pc, #144]	; 800b678 <arm_float_to_q15+0x188>
 800b5ea:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b5ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b5f2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b5f6:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800b5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fe:	bfd4      	ite	le
 800b600:	eef0 7a46 	vmovle.f32	s15, s12
 800b604:	eef0 7a47 	vmovgt.f32	s15, s14
 800b608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b60c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b610:	ee17 3a90 	vmov	r3, s15
 800b614:	f303 030f 	ssat	r3, #16, r3
 800b618:	3a01      	subs	r2, #1
 800b61a:	800b      	strh	r3, [r1, #0]
 800b61c:	d02b      	beq.n	800b676 <arm_float_to_q15+0x186>
 800b61e:	edd0 7a01 	vldr	s15, [r0, #4]
 800b622:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62e:	bfd4      	ite	le
 800b630:	eef0 6a46 	vmovle.f32	s13, s12
 800b634:	eef0 6a47 	vmovgt.f32	s13, s14
 800b638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b63c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b640:	ee17 3a90 	vmov	r3, s15
 800b644:	f303 030f 	ssat	r3, #16, r3
 800b648:	2a01      	cmp	r2, #1
 800b64a:	804b      	strh	r3, [r1, #2]
 800b64c:	d013      	beq.n	800b676 <arm_float_to_q15+0x186>
 800b64e:	edd0 7a02 	vldr	s15, [r0, #8]
 800b652:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800b656:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800b65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65e:	bfd8      	it	le
 800b660:	eeb0 7a46 	vmovle.f32	s14, s12
 800b664:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b668:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b66c:	ee17 3a10 	vmov	r3, s14
 800b670:	f303 030f 	ssat	r3, #16, r3
 800b674:	808b      	strh	r3, [r1, #4]
 800b676:	bd30      	pop	{r4, r5, pc}
 800b678:	47000000 	.word	0x47000000

0800b67c <arm_float_to_q7>:
 800b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67e:	0895      	lsrs	r5, r2, #2
 800b680:	d078      	beq.n	800b774 <arm_float_to_q7+0xf8>
 800b682:	f101 0c04 	add.w	ip, r1, #4
 800b686:	eddf 5a6b 	vldr	s11, [pc, #428]	; 800b834 <arm_float_to_q7+0x1b8>
 800b68a:	f100 0e10 	add.w	lr, r0, #16
 800b68e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b692:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 800b696:	00ae      	lsls	r6, r5, #2
 800b698:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800b69c:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800b6a0:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b6a4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ac:	bfd4      	ite	le
 800b6ae:	eef0 7a45 	vmovle.f32	s15, s10
 800b6b2:	eef0 7a46 	vmovgt.f32	s15, s12
 800b6b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6be:	ee17 3a90 	vmov	r3, s15
 800b6c2:	b21b      	sxth	r3, r3
 800b6c4:	f303 0307 	ssat	r3, #8, r3
 800b6c8:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800b6cc:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800b6d0:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b6d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6dc:	bfd4      	ite	le
 800b6de:	eef0 7a45 	vmovle.f32	s15, s10
 800b6e2:	eef0 7a46 	vmovgt.f32	s15, s12
 800b6e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6ee:	ee17 3a90 	vmov	r3, s15
 800b6f2:	b21b      	sxth	r3, r3
 800b6f4:	f303 0307 	ssat	r3, #8, r3
 800b6f8:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800b6fc:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800b700:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b704:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70c:	bfd4      	ite	le
 800b70e:	eef0 7a45 	vmovle.f32	s15, s10
 800b712:	eef0 7a46 	vmovgt.f32	s15, s12
 800b716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b71a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b71e:	ee17 3a90 	vmov	r3, s15
 800b722:	b21b      	sxth	r3, r3
 800b724:	f303 0307 	ssat	r3, #8, r3
 800b728:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800b72c:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800b730:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b734:	ee76 7a86 	vadd.f32	s15, s13, s12
 800b738:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800b73c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b740:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b744:	ee17 3a90 	vmov	r3, s15
 800b748:	ee17 7a10 	vmov	r7, s14
 800b74c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b754:	b21b      	sxth	r3, r3
 800b756:	b23f      	sxth	r7, r7
 800b758:	dd5f      	ble.n	800b81a <arm_float_to_q7+0x19e>
 800b75a:	f303 0307 	ssat	r3, #8, r3
 800b75e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b762:	f10c 0c04 	add.w	ip, ip, #4
 800b766:	4564      	cmp	r4, ip
 800b768:	f10e 0e10 	add.w	lr, lr, #16
 800b76c:	d196      	bne.n	800b69c <arm_float_to_q7+0x20>
 800b76e:	4431      	add	r1, r6
 800b770:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b774:	f012 0203 	ands.w	r2, r2, #3
 800b778:	d04e      	beq.n	800b818 <arm_float_to_q7+0x19c>
 800b77a:	edd0 7a00 	vldr	s15, [r0]
 800b77e:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 800b834 <arm_float_to_q7+0x1b8>
 800b782:	ee67 6a85 	vmul.f32	s13, s15, s10
 800b786:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b78a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b78e:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800b792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b796:	bfd4      	ite	le
 800b798:	eef0 7a65 	vmovle.f32	s15, s11
 800b79c:	eef0 7a47 	vmovgt.f32	s15, s14
 800b7a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7a8:	ee17 3a90 	vmov	r3, s15
 800b7ac:	b21b      	sxth	r3, r3
 800b7ae:	f303 0307 	ssat	r3, #8, r3
 800b7b2:	3a01      	subs	r2, #1
 800b7b4:	700b      	strb	r3, [r1, #0]
 800b7b6:	d02f      	beq.n	800b818 <arm_float_to_q7+0x19c>
 800b7b8:	edd0 6a01 	vldr	s13, [r0, #4]
 800b7bc:	ee26 6a85 	vmul.f32	s12, s13, s10
 800b7c0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800b7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c8:	bfd4      	ite	le
 800b7ca:	eef0 6a65 	vmovle.f32	s13, s11
 800b7ce:	eef0 6a47 	vmovgt.f32	s13, s14
 800b7d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b7d6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b7da:	ee16 3a90 	vmov	r3, s13
 800b7de:	b21b      	sxth	r3, r3
 800b7e0:	f303 0307 	ssat	r3, #8, r3
 800b7e4:	2a01      	cmp	r2, #1
 800b7e6:	704b      	strb	r3, [r1, #1]
 800b7e8:	d016      	beq.n	800b818 <arm_float_to_q7+0x19c>
 800b7ea:	edd0 7a02 	vldr	s15, [r0, #8]
 800b7ee:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b7f2:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fa:	bfd4      	ite	le
 800b7fc:	eef0 7a65 	vmovle.f32	s15, s11
 800b800:	eef0 7a47 	vmovgt.f32	s15, s14
 800b804:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b80c:	ee17 3a90 	vmov	r3, s15
 800b810:	b21b      	sxth	r3, r3
 800b812:	f303 0307 	ssat	r3, #8, r3
 800b816:	708b      	strb	r3, [r1, #2]
 800b818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b81a:	f307 0707 	ssat	r7, #8, r7
 800b81e:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800b822:	f10c 0c04 	add.w	ip, ip, #4
 800b826:	45a4      	cmp	ip, r4
 800b828:	f10e 0e10 	add.w	lr, lr, #16
 800b82c:	f47f af36 	bne.w	800b69c <arm_float_to_q7+0x20>
 800b830:	e79d      	b.n	800b76e <arm_float_to_q7+0xf2>
 800b832:	bf00      	nop
 800b834:	43000000 	.word	0x43000000

0800b838 <arm_q15_to_float>:
 800b838:	b530      	push	{r4, r5, lr}
 800b83a:	0894      	lsrs	r4, r2, #2
 800b83c:	d038      	beq.n	800b8b0 <arm_q15_to_float+0x78>
 800b83e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b900 <arm_q15_to_float+0xc8>
 800b842:	f100 0c08 	add.w	ip, r0, #8
 800b846:	f101 0310 	add.w	r3, r1, #16
 800b84a:	46a6      	mov	lr, r4
 800b84c:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800b850:	ee07 5a90 	vmov	s15, r5
 800b854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b858:	3310      	adds	r3, #16
 800b85a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b85e:	f10c 0c08 	add.w	ip, ip, #8
 800b862:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800b866:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800b86a:	ee07 5a90 	vmov	s15, r5
 800b86e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b872:	f1be 0e01 	subs.w	lr, lr, #1
 800b876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b87a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800b87e:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800b882:	ee07 5a90 	vmov	s15, r5
 800b886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b88a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b88e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800b892:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800b896:	ee07 5a90 	vmov	s15, r5
 800b89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b89e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8a2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b8a6:	d1d1      	bne.n	800b84c <arm_q15_to_float+0x14>
 800b8a8:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b8ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b8b0:	f012 0203 	ands.w	r2, r2, #3
 800b8b4:	d023      	beq.n	800b8fe <arm_q15_to_float+0xc6>
 800b8b6:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b8ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b900 <arm_q15_to_float+0xc8>
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8c6:	3a01      	subs	r2, #1
 800b8c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8cc:	edc1 7a00 	vstr	s15, [r1]
 800b8d0:	d015      	beq.n	800b8fe <arm_q15_to_float+0xc6>
 800b8d2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b8d6:	ee07 3a90 	vmov	s15, r3
 800b8da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8de:	2a01      	cmp	r2, #1
 800b8e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8e4:	edc1 7a01 	vstr	s15, [r1, #4]
 800b8e8:	d009      	beq.n	800b8fe <arm_q15_to_float+0xc6>
 800b8ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8fa:	edc1 7a02 	vstr	s15, [r1, #8]
 800b8fe:	bd30      	pop	{r4, r5, pc}
 800b900:	38000000 	.word	0x38000000

0800b904 <arm_q7_to_float>:
 800b904:	b530      	push	{r4, r5, lr}
 800b906:	0894      	lsrs	r4, r2, #2
 800b908:	d037      	beq.n	800b97a <arm_q7_to_float+0x76>
 800b90a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b9cc <arm_q7_to_float+0xc8>
 800b90e:	1d03      	adds	r3, r0, #4
 800b910:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b914:	f101 0010 	add.w	r0, r1, #16
 800b918:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800b91c:	ee07 ea90 	vmov	s15, lr
 800b920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b924:	469e      	mov	lr, r3
 800b926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b92a:	3304      	adds	r3, #4
 800b92c:	ed40 7a04 	vstr	s15, [r0, #-16]
 800b930:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800b934:	ee07 5a90 	vmov	s15, r5
 800b938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b93c:	45e6      	cmp	lr, ip
 800b93e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b942:	f100 0010 	add.w	r0, r0, #16
 800b946:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 800b94a:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800b94e:	ee07 5a90 	vmov	s15, r5
 800b952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b95a:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 800b95e:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800b962:	ee07 5a90 	vmov	s15, r5
 800b966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b96a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b96e:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 800b972:	d1d1      	bne.n	800b918 <arm_q7_to_float+0x14>
 800b974:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b978:	4660      	mov	r0, ip
 800b97a:	f012 0203 	ands.w	r2, r2, #3
 800b97e:	d023      	beq.n	800b9c8 <arm_q7_to_float+0xc4>
 800b980:	f990 3000 	ldrsb.w	r3, [r0]
 800b984:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b9cc <arm_q7_to_float+0xc8>
 800b988:	ee07 3a90 	vmov	s15, r3
 800b98c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b990:	3a01      	subs	r2, #1
 800b992:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b996:	edc1 7a00 	vstr	s15, [r1]
 800b99a:	d015      	beq.n	800b9c8 <arm_q7_to_float+0xc4>
 800b99c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9a8:	2a01      	cmp	r2, #1
 800b9aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9ae:	edc1 7a01 	vstr	s15, [r1, #4]
 800b9b2:	d009      	beq.n	800b9c8 <arm_q7_to_float+0xc4>
 800b9b4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b9b8:	ee07 3a90 	vmov	s15, r3
 800b9bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9c4:	edc1 7a02 	vstr	s15, [r1, #8]
 800b9c8:	bd30      	pop	{r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	3c000000 	.word	0x3c000000

0800b9d0 <ai_array_to_buffer_fmt>:
 800b9d0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d050      	beq.n	800ba7a <ai_array_to_buffer_fmt+0xaa>
 800b9d8:	4b2a      	ldr	r3, [pc, #168]	; (800ba84 <ai_array_to_buffer_fmt+0xb4>)
 800b9da:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d00b      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800b9e2:	dc1c      	bgt.n	800ba1e <ai_array_to_buffer_fmt+0x4e>
 800b9e4:	4b28      	ldr	r3, [pc, #160]	; (800ba88 <ai_array_to_buffer_fmt+0xb8>)
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d007      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800b9ea:	dd0b      	ble.n	800ba04 <ai_array_to_buffer_fmt+0x34>
 800b9ec:	4b27      	ldr	r3, [pc, #156]	; (800ba8c <ai_array_to_buffer_fmt+0xbc>)
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d003      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800b9f2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d131      	bne.n	800ba5e <ai_array_to_buffer_fmt+0x8e>
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ba00:	4318      	orrs	r0, r3
 800ba02:	4770      	bx	lr
 800ba04:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d0f6      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba0c:	dd2c      	ble.n	800ba68 <ai_array_to_buffer_fmt+0x98>
 800ba0e:	4b20      	ldr	r3, [pc, #128]	; (800ba90 <ai_array_to_buffer_fmt+0xc0>)
 800ba10:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ba14:	429a      	cmp	r2, r3
 800ba16:	bf18      	it	ne
 800ba18:	2340      	movne	r3, #64	; 0x40
 800ba1a:	4318      	orrs	r0, r3
 800ba1c:	4770      	bx	lr
 800ba1e:	4b1d      	ldr	r3, [pc, #116]	; (800ba94 <ai_array_to_buffer_fmt+0xc4>)
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d0ea      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba24:	dd0e      	ble.n	800ba44 <ai_array_to_buffer_fmt+0x74>
 800ba26:	4b1c      	ldr	r3, [pc, #112]	; (800ba98 <ai_array_to_buffer_fmt+0xc8>)
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d0e6      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba2c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d0e2      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba34:	4b19      	ldr	r3, [pc, #100]	; (800ba9c <ai_array_to_buffer_fmt+0xcc>)
 800ba36:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	bf18      	it	ne
 800ba3e:	2340      	movne	r3, #64	; 0x40
 800ba40:	4318      	orrs	r0, r3
 800ba42:	4770      	bx	lr
 800ba44:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d0d6      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d0d3      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba52:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ba56:	429a      	cmp	r2, r3
 800ba58:	bf18      	it	ne
 800ba5a:	2340      	movne	r3, #64	; 0x40
 800ba5c:	e7ce      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba5e:	4b10      	ldr	r3, [pc, #64]	; (800baa0 <ai_array_to_buffer_fmt+0xd0>)
 800ba60:	429a      	cmp	r2, r3
 800ba62:	bf18      	it	ne
 800ba64:	2340      	movne	r3, #64	; 0x40
 800ba66:	e7c9      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba68:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d0c4      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba70:	3380      	adds	r3, #128	; 0x80
 800ba72:	429a      	cmp	r2, r3
 800ba74:	bf18      	it	ne
 800ba76:	2340      	movne	r3, #64	; 0x40
 800ba78:	e7c0      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba7a:	4b0a      	ldr	r3, [pc, #40]	; (800baa4 <ai_array_to_buffer_fmt+0xd4>)
 800ba7c:	4003      	ands	r3, r0
 800ba7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba82:	e7bb      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba84:	00840040 	.word	0x00840040
 800ba88:	00040840 	.word	0x00040840
 800ba8c:	00041040 	.word	0x00041040
 800ba90:	00040447 	.word	0x00040447
 800ba94:	00840840 	.word	0x00840840
 800ba98:	00841040 	.word	0x00841040
 800ba9c:	0084084f 	.word	0x0084084f
 800baa0:	0004084f 	.word	0x0004084f
 800baa4:	00803fff 	.word	0x00803fff

0800baa8 <ai_array_get_byte_size>:
 800baa8:	b319      	cbz	r1, 800baf2 <ai_array_get_byte_size+0x4a>
 800baaa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800baae:	fb03 f101 	mul.w	r1, r3, r1
 800bab2:	3107      	adds	r1, #7
 800bab4:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800bab8:	f021 0307 	bic.w	r3, r1, #7
 800babc:	2a04      	cmp	r2, #4
 800babe:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800bac2:	fa23 f101 	lsr.w	r1, r3, r1
 800bac6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800baca:	d00b      	beq.n	800bae4 <ai_array_get_byte_size+0x3c>
 800bacc:	2a08      	cmp	r2, #8
 800bace:	d002      	beq.n	800bad6 <ai_array_get_byte_size+0x2e>
 800bad0:	3107      	adds	r1, #7
 800bad2:	08c8      	lsrs	r0, r1, #3
 800bad4:	4770      	bx	lr
 800bad6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bada:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800bade:	3107      	adds	r1, #7
 800bae0:	08c8      	lsrs	r0, r1, #3
 800bae2:	4770      	bx	lr
 800bae4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bae8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800baec:	3107      	adds	r1, #7
 800baee:	08c8      	lsrs	r0, r1, #3
 800baf0:	4770      	bx	lr
 800baf2:	4608      	mov	r0, r1
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop

0800baf8 <ai_array_get_data_byte_size>:
 800baf8:	b169      	cbz	r1, 800bb16 <ai_array_get_data_byte_size+0x1e>
 800bafa:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800bafe:	fb02 f101 	mul.w	r1, r2, r1
 800bb02:	1dcb      	adds	r3, r1, #7
 800bb04:	f023 0307 	bic.w	r3, r3, #7
 800bb08:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800bb0c:	fa23 f000 	lsr.w	r0, r3, r0
 800bb10:	3007      	adds	r0, #7
 800bb12:	08c0      	lsrs	r0, r0, #3
 800bb14:	4770      	bx	lr
 800bb16:	4608      	mov	r0, r1
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop

0800bb1c <malloc>:
 800bb1c:	4b02      	ldr	r3, [pc, #8]	; (800bb28 <malloc+0xc>)
 800bb1e:	4601      	mov	r1, r0
 800bb20:	6818      	ldr	r0, [r3, #0]
 800bb22:	f000 b823 	b.w	800bb6c <_malloc_r>
 800bb26:	bf00      	nop
 800bb28:	20000d34 	.word	0x20000d34

0800bb2c <sbrk_aligned>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	4e0e      	ldr	r6, [pc, #56]	; (800bb68 <sbrk_aligned+0x3c>)
 800bb30:	460c      	mov	r4, r1
 800bb32:	6831      	ldr	r1, [r6, #0]
 800bb34:	4605      	mov	r5, r0
 800bb36:	b911      	cbnz	r1, 800bb3e <sbrk_aligned+0x12>
 800bb38:	f000 fe62 	bl	800c800 <_sbrk_r>
 800bb3c:	6030      	str	r0, [r6, #0]
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4628      	mov	r0, r5
 800bb42:	f000 fe5d 	bl	800c800 <_sbrk_r>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	d00a      	beq.n	800bb60 <sbrk_aligned+0x34>
 800bb4a:	1cc4      	adds	r4, r0, #3
 800bb4c:	f024 0403 	bic.w	r4, r4, #3
 800bb50:	42a0      	cmp	r0, r4
 800bb52:	d007      	beq.n	800bb64 <sbrk_aligned+0x38>
 800bb54:	1a21      	subs	r1, r4, r0
 800bb56:	4628      	mov	r0, r5
 800bb58:	f000 fe52 	bl	800c800 <_sbrk_r>
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d101      	bne.n	800bb64 <sbrk_aligned+0x38>
 800bb60:	f04f 34ff 	mov.w	r4, #4294967295
 800bb64:	4620      	mov	r0, r4
 800bb66:	bd70      	pop	{r4, r5, r6, pc}
 800bb68:	20013390 	.word	0x20013390

0800bb6c <_malloc_r>:
 800bb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb70:	1ccd      	adds	r5, r1, #3
 800bb72:	f025 0503 	bic.w	r5, r5, #3
 800bb76:	3508      	adds	r5, #8
 800bb78:	2d0c      	cmp	r5, #12
 800bb7a:	bf38      	it	cc
 800bb7c:	250c      	movcc	r5, #12
 800bb7e:	2d00      	cmp	r5, #0
 800bb80:	4607      	mov	r7, r0
 800bb82:	db01      	blt.n	800bb88 <_malloc_r+0x1c>
 800bb84:	42a9      	cmp	r1, r5
 800bb86:	d905      	bls.n	800bb94 <_malloc_r+0x28>
 800bb88:	230c      	movs	r3, #12
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	2600      	movs	r6, #0
 800bb8e:	4630      	mov	r0, r6
 800bb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc68 <_malloc_r+0xfc>
 800bb98:	f000 f868 	bl	800bc6c <__malloc_lock>
 800bb9c:	f8d8 3000 	ldr.w	r3, [r8]
 800bba0:	461c      	mov	r4, r3
 800bba2:	bb5c      	cbnz	r4, 800bbfc <_malloc_r+0x90>
 800bba4:	4629      	mov	r1, r5
 800bba6:	4638      	mov	r0, r7
 800bba8:	f7ff ffc0 	bl	800bb2c <sbrk_aligned>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	4604      	mov	r4, r0
 800bbb0:	d155      	bne.n	800bc5e <_malloc_r+0xf2>
 800bbb2:	f8d8 4000 	ldr.w	r4, [r8]
 800bbb6:	4626      	mov	r6, r4
 800bbb8:	2e00      	cmp	r6, #0
 800bbba:	d145      	bne.n	800bc48 <_malloc_r+0xdc>
 800bbbc:	2c00      	cmp	r4, #0
 800bbbe:	d048      	beq.n	800bc52 <_malloc_r+0xe6>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	eb04 0903 	add.w	r9, r4, r3
 800bbca:	f000 fe19 	bl	800c800 <_sbrk_r>
 800bbce:	4581      	cmp	r9, r0
 800bbd0:	d13f      	bne.n	800bc52 <_malloc_r+0xe6>
 800bbd2:	6821      	ldr	r1, [r4, #0]
 800bbd4:	1a6d      	subs	r5, r5, r1
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	4638      	mov	r0, r7
 800bbda:	f7ff ffa7 	bl	800bb2c <sbrk_aligned>
 800bbde:	3001      	adds	r0, #1
 800bbe0:	d037      	beq.n	800bc52 <_malloc_r+0xe6>
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	442b      	add	r3, r5
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	f8d8 3000 	ldr.w	r3, [r8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d038      	beq.n	800bc62 <_malloc_r+0xf6>
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	42a2      	cmp	r2, r4
 800bbf4:	d12b      	bne.n	800bc4e <_malloc_r+0xe2>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	605a      	str	r2, [r3, #4]
 800bbfa:	e00f      	b.n	800bc1c <_malloc_r+0xb0>
 800bbfc:	6822      	ldr	r2, [r4, #0]
 800bbfe:	1b52      	subs	r2, r2, r5
 800bc00:	d41f      	bmi.n	800bc42 <_malloc_r+0xd6>
 800bc02:	2a0b      	cmp	r2, #11
 800bc04:	d917      	bls.n	800bc36 <_malloc_r+0xca>
 800bc06:	1961      	adds	r1, r4, r5
 800bc08:	42a3      	cmp	r3, r4
 800bc0a:	6025      	str	r5, [r4, #0]
 800bc0c:	bf18      	it	ne
 800bc0e:	6059      	strne	r1, [r3, #4]
 800bc10:	6863      	ldr	r3, [r4, #4]
 800bc12:	bf08      	it	eq
 800bc14:	f8c8 1000 	streq.w	r1, [r8]
 800bc18:	5162      	str	r2, [r4, r5]
 800bc1a:	604b      	str	r3, [r1, #4]
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	f104 060b 	add.w	r6, r4, #11
 800bc22:	f000 f829 	bl	800bc78 <__malloc_unlock>
 800bc26:	f026 0607 	bic.w	r6, r6, #7
 800bc2a:	1d23      	adds	r3, r4, #4
 800bc2c:	1af2      	subs	r2, r6, r3
 800bc2e:	d0ae      	beq.n	800bb8e <_malloc_r+0x22>
 800bc30:	1b9b      	subs	r3, r3, r6
 800bc32:	50a3      	str	r3, [r4, r2]
 800bc34:	e7ab      	b.n	800bb8e <_malloc_r+0x22>
 800bc36:	42a3      	cmp	r3, r4
 800bc38:	6862      	ldr	r2, [r4, #4]
 800bc3a:	d1dd      	bne.n	800bbf8 <_malloc_r+0x8c>
 800bc3c:	f8c8 2000 	str.w	r2, [r8]
 800bc40:	e7ec      	b.n	800bc1c <_malloc_r+0xb0>
 800bc42:	4623      	mov	r3, r4
 800bc44:	6864      	ldr	r4, [r4, #4]
 800bc46:	e7ac      	b.n	800bba2 <_malloc_r+0x36>
 800bc48:	4634      	mov	r4, r6
 800bc4a:	6876      	ldr	r6, [r6, #4]
 800bc4c:	e7b4      	b.n	800bbb8 <_malloc_r+0x4c>
 800bc4e:	4613      	mov	r3, r2
 800bc50:	e7cc      	b.n	800bbec <_malloc_r+0x80>
 800bc52:	230c      	movs	r3, #12
 800bc54:	603b      	str	r3, [r7, #0]
 800bc56:	4638      	mov	r0, r7
 800bc58:	f000 f80e 	bl	800bc78 <__malloc_unlock>
 800bc5c:	e797      	b.n	800bb8e <_malloc_r+0x22>
 800bc5e:	6025      	str	r5, [r4, #0]
 800bc60:	e7dc      	b.n	800bc1c <_malloc_r+0xb0>
 800bc62:	605b      	str	r3, [r3, #4]
 800bc64:	deff      	udf	#255	; 0xff
 800bc66:	bf00      	nop
 800bc68:	2001338c 	.word	0x2001338c

0800bc6c <__malloc_lock>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	; (800bc74 <__malloc_lock+0x8>)
 800bc6e:	f000 be14 	b.w	800c89a <__retarget_lock_acquire_recursive>
 800bc72:	bf00      	nop
 800bc74:	200134d4 	.word	0x200134d4

0800bc78 <__malloc_unlock>:
 800bc78:	4801      	ldr	r0, [pc, #4]	; (800bc80 <__malloc_unlock+0x8>)
 800bc7a:	f000 be0f 	b.w	800c89c <__retarget_lock_release_recursive>
 800bc7e:	bf00      	nop
 800bc80:	200134d4 	.word	0x200134d4

0800bc84 <__cvt>:
 800bc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	ec55 4b10 	vmov	r4, r5, d0
 800bc8c:	2d00      	cmp	r5, #0
 800bc8e:	460e      	mov	r6, r1
 800bc90:	4619      	mov	r1, r3
 800bc92:	462b      	mov	r3, r5
 800bc94:	bfbb      	ittet	lt
 800bc96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc9a:	461d      	movlt	r5, r3
 800bc9c:	2300      	movge	r3, #0
 800bc9e:	232d      	movlt	r3, #45	; 0x2d
 800bca0:	700b      	strb	r3, [r1, #0]
 800bca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bca8:	4691      	mov	r9, r2
 800bcaa:	f023 0820 	bic.w	r8, r3, #32
 800bcae:	bfbc      	itt	lt
 800bcb0:	4622      	movlt	r2, r4
 800bcb2:	4614      	movlt	r4, r2
 800bcb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcb8:	d005      	beq.n	800bcc6 <__cvt+0x42>
 800bcba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcbe:	d100      	bne.n	800bcc2 <__cvt+0x3e>
 800bcc0:	3601      	adds	r6, #1
 800bcc2:	2102      	movs	r1, #2
 800bcc4:	e000      	b.n	800bcc8 <__cvt+0x44>
 800bcc6:	2103      	movs	r1, #3
 800bcc8:	ab03      	add	r3, sp, #12
 800bcca:	9301      	str	r3, [sp, #4]
 800bccc:	ab02      	add	r3, sp, #8
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	ec45 4b10 	vmov	d0, r4, r5
 800bcd4:	4653      	mov	r3, sl
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	f000 fe7a 	bl	800c9d0 <_dtoa_r>
 800bcdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bce0:	4607      	mov	r7, r0
 800bce2:	d102      	bne.n	800bcea <__cvt+0x66>
 800bce4:	f019 0f01 	tst.w	r9, #1
 800bce8:	d022      	beq.n	800bd30 <__cvt+0xac>
 800bcea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcee:	eb07 0906 	add.w	r9, r7, r6
 800bcf2:	d110      	bne.n	800bd16 <__cvt+0x92>
 800bcf4:	783b      	ldrb	r3, [r7, #0]
 800bcf6:	2b30      	cmp	r3, #48	; 0x30
 800bcf8:	d10a      	bne.n	800bd10 <__cvt+0x8c>
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd06:	b918      	cbnz	r0, 800bd10 <__cvt+0x8c>
 800bd08:	f1c6 0601 	rsb	r6, r6, #1
 800bd0c:	f8ca 6000 	str.w	r6, [sl]
 800bd10:	f8da 3000 	ldr.w	r3, [sl]
 800bd14:	4499      	add	r9, r3
 800bd16:	2200      	movs	r2, #0
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	f7f4 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd22:	b108      	cbz	r0, 800bd28 <__cvt+0xa4>
 800bd24:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd28:	2230      	movs	r2, #48	; 0x30
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	454b      	cmp	r3, r9
 800bd2e:	d307      	bcc.n	800bd40 <__cvt+0xbc>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd34:	1bdb      	subs	r3, r3, r7
 800bd36:	4638      	mov	r0, r7
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	b004      	add	sp, #16
 800bd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd40:	1c59      	adds	r1, r3, #1
 800bd42:	9103      	str	r1, [sp, #12]
 800bd44:	701a      	strb	r2, [r3, #0]
 800bd46:	e7f0      	b.n	800bd2a <__cvt+0xa6>

0800bd48 <__exponent>:
 800bd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	bfb8      	it	lt
 800bd50:	4249      	neglt	r1, r1
 800bd52:	f803 2b02 	strb.w	r2, [r3], #2
 800bd56:	bfb4      	ite	lt
 800bd58:	222d      	movlt	r2, #45	; 0x2d
 800bd5a:	222b      	movge	r2, #43	; 0x2b
 800bd5c:	2909      	cmp	r1, #9
 800bd5e:	7042      	strb	r2, [r0, #1]
 800bd60:	dd2a      	ble.n	800bdb8 <__exponent+0x70>
 800bd62:	f10d 0207 	add.w	r2, sp, #7
 800bd66:	4617      	mov	r7, r2
 800bd68:	260a      	movs	r6, #10
 800bd6a:	4694      	mov	ip, r2
 800bd6c:	fb91 f5f6 	sdiv	r5, r1, r6
 800bd70:	fb06 1415 	mls	r4, r6, r5, r1
 800bd74:	3430      	adds	r4, #48	; 0x30
 800bd76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	2c63      	cmp	r4, #99	; 0x63
 800bd7e:	f102 32ff 	add.w	r2, r2, #4294967295
 800bd82:	4629      	mov	r1, r5
 800bd84:	dcf1      	bgt.n	800bd6a <__exponent+0x22>
 800bd86:	3130      	adds	r1, #48	; 0x30
 800bd88:	f1ac 0402 	sub.w	r4, ip, #2
 800bd8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bd90:	1c41      	adds	r1, r0, #1
 800bd92:	4622      	mov	r2, r4
 800bd94:	42ba      	cmp	r2, r7
 800bd96:	d30a      	bcc.n	800bdae <__exponent+0x66>
 800bd98:	f10d 0209 	add.w	r2, sp, #9
 800bd9c:	eba2 020c 	sub.w	r2, r2, ip
 800bda0:	42bc      	cmp	r4, r7
 800bda2:	bf88      	it	hi
 800bda4:	2200      	movhi	r2, #0
 800bda6:	4413      	add	r3, r2
 800bda8:	1a18      	subs	r0, r3, r0
 800bdaa:	b003      	add	sp, #12
 800bdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdae:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bdb2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bdb6:	e7ed      	b.n	800bd94 <__exponent+0x4c>
 800bdb8:	2330      	movs	r3, #48	; 0x30
 800bdba:	3130      	adds	r1, #48	; 0x30
 800bdbc:	7083      	strb	r3, [r0, #2]
 800bdbe:	70c1      	strb	r1, [r0, #3]
 800bdc0:	1d03      	adds	r3, r0, #4
 800bdc2:	e7f1      	b.n	800bda8 <__exponent+0x60>

0800bdc4 <_printf_float>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	ed2d 8b02 	vpush	{d8}
 800bdcc:	b08d      	sub	sp, #52	; 0x34
 800bdce:	460c      	mov	r4, r1
 800bdd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bdd4:	4616      	mov	r6, r2
 800bdd6:	461f      	mov	r7, r3
 800bdd8:	4605      	mov	r5, r0
 800bdda:	f000 fcd9 	bl	800c790 <_localeconv_r>
 800bdde:	f8d0 a000 	ldr.w	sl, [r0]
 800bde2:	4650      	mov	r0, sl
 800bde4:	f7f4 fa44 	bl	8000270 <strlen>
 800bde8:	2300      	movs	r3, #0
 800bdea:	930a      	str	r3, [sp, #40]	; 0x28
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	9305      	str	r3, [sp, #20]
 800bdf0:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bdf8:	3307      	adds	r3, #7
 800bdfa:	f023 0307 	bic.w	r3, r3, #7
 800bdfe:	f103 0208 	add.w	r2, r3, #8
 800be02:	f8c8 2000 	str.w	r2, [r8]
 800be06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be0e:	9307      	str	r3, [sp, #28]
 800be10:	f8cd 8018 	str.w	r8, [sp, #24]
 800be14:	ee08 0a10 	vmov	s16, r0
 800be18:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800be1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be20:	4b9e      	ldr	r3, [pc, #632]	; (800c09c <_printf_float+0x2d8>)
 800be22:	f04f 32ff 	mov.w	r2, #4294967295
 800be26:	f7f4 fe81 	bl	8000b2c <__aeabi_dcmpun>
 800be2a:	bb88      	cbnz	r0, 800be90 <_printf_float+0xcc>
 800be2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be30:	4b9a      	ldr	r3, [pc, #616]	; (800c09c <_printf_float+0x2d8>)
 800be32:	f04f 32ff 	mov.w	r2, #4294967295
 800be36:	f7f4 fe5b 	bl	8000af0 <__aeabi_dcmple>
 800be3a:	bb48      	cbnz	r0, 800be90 <_printf_float+0xcc>
 800be3c:	2200      	movs	r2, #0
 800be3e:	2300      	movs	r3, #0
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f7f4 fe4a 	bl	8000adc <__aeabi_dcmplt>
 800be48:	b110      	cbz	r0, 800be50 <_printf_float+0x8c>
 800be4a:	232d      	movs	r3, #45	; 0x2d
 800be4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be50:	4a93      	ldr	r2, [pc, #588]	; (800c0a0 <_printf_float+0x2dc>)
 800be52:	4b94      	ldr	r3, [pc, #592]	; (800c0a4 <_printf_float+0x2e0>)
 800be54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be58:	bf94      	ite	ls
 800be5a:	4690      	movls	r8, r2
 800be5c:	4698      	movhi	r8, r3
 800be5e:	2303      	movs	r3, #3
 800be60:	6123      	str	r3, [r4, #16]
 800be62:	9b05      	ldr	r3, [sp, #20]
 800be64:	f023 0304 	bic.w	r3, r3, #4
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	f04f 0900 	mov.w	r9, #0
 800be6e:	9700      	str	r7, [sp, #0]
 800be70:	4633      	mov	r3, r6
 800be72:	aa0b      	add	r2, sp, #44	; 0x2c
 800be74:	4621      	mov	r1, r4
 800be76:	4628      	mov	r0, r5
 800be78:	f000 f9da 	bl	800c230 <_printf_common>
 800be7c:	3001      	adds	r0, #1
 800be7e:	f040 8090 	bne.w	800bfa2 <_printf_float+0x1de>
 800be82:	f04f 30ff 	mov.w	r0, #4294967295
 800be86:	b00d      	add	sp, #52	; 0x34
 800be88:	ecbd 8b02 	vpop	{d8}
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	4642      	mov	r2, r8
 800be92:	464b      	mov	r3, r9
 800be94:	4640      	mov	r0, r8
 800be96:	4649      	mov	r1, r9
 800be98:	f7f4 fe48 	bl	8000b2c <__aeabi_dcmpun>
 800be9c:	b140      	cbz	r0, 800beb0 <_printf_float+0xec>
 800be9e:	464b      	mov	r3, r9
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bfbc      	itt	lt
 800bea4:	232d      	movlt	r3, #45	; 0x2d
 800bea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800beaa:	4a7f      	ldr	r2, [pc, #508]	; (800c0a8 <_printf_float+0x2e4>)
 800beac:	4b7f      	ldr	r3, [pc, #508]	; (800c0ac <_printf_float+0x2e8>)
 800beae:	e7d1      	b.n	800be54 <_printf_float+0x90>
 800beb0:	6863      	ldr	r3, [r4, #4]
 800beb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800beb6:	9206      	str	r2, [sp, #24]
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	d13f      	bne.n	800bf3c <_printf_float+0x178>
 800bebc:	2306      	movs	r3, #6
 800bebe:	6063      	str	r3, [r4, #4]
 800bec0:	9b05      	ldr	r3, [sp, #20]
 800bec2:	6861      	ldr	r1, [r4, #4]
 800bec4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bec8:	2300      	movs	r3, #0
 800beca:	9303      	str	r3, [sp, #12]
 800becc:	ab0a      	add	r3, sp, #40	; 0x28
 800bece:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bed2:	ab09      	add	r3, sp, #36	; 0x24
 800bed4:	ec49 8b10 	vmov	d0, r8, r9
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	6022      	str	r2, [r4, #0]
 800bedc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bee0:	4628      	mov	r0, r5
 800bee2:	f7ff fecf 	bl	800bc84 <__cvt>
 800bee6:	9b06      	ldr	r3, [sp, #24]
 800bee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800beea:	2b47      	cmp	r3, #71	; 0x47
 800beec:	4680      	mov	r8, r0
 800beee:	d108      	bne.n	800bf02 <_printf_float+0x13e>
 800bef0:	1cc8      	adds	r0, r1, #3
 800bef2:	db02      	blt.n	800befa <_printf_float+0x136>
 800bef4:	6863      	ldr	r3, [r4, #4]
 800bef6:	4299      	cmp	r1, r3
 800bef8:	dd41      	ble.n	800bf7e <_printf_float+0x1ba>
 800befa:	f1ab 0302 	sub.w	r3, fp, #2
 800befe:	fa5f fb83 	uxtb.w	fp, r3
 800bf02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf06:	d820      	bhi.n	800bf4a <_printf_float+0x186>
 800bf08:	3901      	subs	r1, #1
 800bf0a:	465a      	mov	r2, fp
 800bf0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf10:	9109      	str	r1, [sp, #36]	; 0x24
 800bf12:	f7ff ff19 	bl	800bd48 <__exponent>
 800bf16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf18:	1813      	adds	r3, r2, r0
 800bf1a:	2a01      	cmp	r2, #1
 800bf1c:	4681      	mov	r9, r0
 800bf1e:	6123      	str	r3, [r4, #16]
 800bf20:	dc02      	bgt.n	800bf28 <_printf_float+0x164>
 800bf22:	6822      	ldr	r2, [r4, #0]
 800bf24:	07d2      	lsls	r2, r2, #31
 800bf26:	d501      	bpl.n	800bf2c <_printf_float+0x168>
 800bf28:	3301      	adds	r3, #1
 800bf2a:	6123      	str	r3, [r4, #16]
 800bf2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d09c      	beq.n	800be6e <_printf_float+0xaa>
 800bf34:	232d      	movs	r3, #45	; 0x2d
 800bf36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf3a:	e798      	b.n	800be6e <_printf_float+0xaa>
 800bf3c:	9a06      	ldr	r2, [sp, #24]
 800bf3e:	2a47      	cmp	r2, #71	; 0x47
 800bf40:	d1be      	bne.n	800bec0 <_printf_float+0xfc>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1bc      	bne.n	800bec0 <_printf_float+0xfc>
 800bf46:	2301      	movs	r3, #1
 800bf48:	e7b9      	b.n	800bebe <_printf_float+0xfa>
 800bf4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf4e:	d118      	bne.n	800bf82 <_printf_float+0x1be>
 800bf50:	2900      	cmp	r1, #0
 800bf52:	6863      	ldr	r3, [r4, #4]
 800bf54:	dd0b      	ble.n	800bf6e <_printf_float+0x1aa>
 800bf56:	6121      	str	r1, [r4, #16]
 800bf58:	b913      	cbnz	r3, 800bf60 <_printf_float+0x19c>
 800bf5a:	6822      	ldr	r2, [r4, #0]
 800bf5c:	07d0      	lsls	r0, r2, #31
 800bf5e:	d502      	bpl.n	800bf66 <_printf_float+0x1a2>
 800bf60:	3301      	adds	r3, #1
 800bf62:	440b      	add	r3, r1
 800bf64:	6123      	str	r3, [r4, #16]
 800bf66:	65a1      	str	r1, [r4, #88]	; 0x58
 800bf68:	f04f 0900 	mov.w	r9, #0
 800bf6c:	e7de      	b.n	800bf2c <_printf_float+0x168>
 800bf6e:	b913      	cbnz	r3, 800bf76 <_printf_float+0x1b2>
 800bf70:	6822      	ldr	r2, [r4, #0]
 800bf72:	07d2      	lsls	r2, r2, #31
 800bf74:	d501      	bpl.n	800bf7a <_printf_float+0x1b6>
 800bf76:	3302      	adds	r3, #2
 800bf78:	e7f4      	b.n	800bf64 <_printf_float+0x1a0>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e7f2      	b.n	800bf64 <_printf_float+0x1a0>
 800bf7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf84:	4299      	cmp	r1, r3
 800bf86:	db05      	blt.n	800bf94 <_printf_float+0x1d0>
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	6121      	str	r1, [r4, #16]
 800bf8c:	07d8      	lsls	r0, r3, #31
 800bf8e:	d5ea      	bpl.n	800bf66 <_printf_float+0x1a2>
 800bf90:	1c4b      	adds	r3, r1, #1
 800bf92:	e7e7      	b.n	800bf64 <_printf_float+0x1a0>
 800bf94:	2900      	cmp	r1, #0
 800bf96:	bfd4      	ite	le
 800bf98:	f1c1 0202 	rsble	r2, r1, #2
 800bf9c:	2201      	movgt	r2, #1
 800bf9e:	4413      	add	r3, r2
 800bfa0:	e7e0      	b.n	800bf64 <_printf_float+0x1a0>
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	055a      	lsls	r2, r3, #21
 800bfa6:	d407      	bmi.n	800bfb8 <_printf_float+0x1f4>
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	4642      	mov	r2, r8
 800bfac:	4631      	mov	r1, r6
 800bfae:	4628      	mov	r0, r5
 800bfb0:	47b8      	blx	r7
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	d12c      	bne.n	800c010 <_printf_float+0x24c>
 800bfb6:	e764      	b.n	800be82 <_printf_float+0xbe>
 800bfb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfbc:	f240 80e0 	bls.w	800c180 <_printf_float+0x3bc>
 800bfc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f7f4 fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d034      	beq.n	800c03a <_printf_float+0x276>
 800bfd0:	4a37      	ldr	r2, [pc, #220]	; (800c0b0 <_printf_float+0x2ec>)
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	47b8      	blx	r7
 800bfda:	3001      	adds	r0, #1
 800bfdc:	f43f af51 	beq.w	800be82 <_printf_float+0xbe>
 800bfe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	db02      	blt.n	800bfee <_printf_float+0x22a>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	07d8      	lsls	r0, r3, #31
 800bfec:	d510      	bpl.n	800c010 <_printf_float+0x24c>
 800bfee:	ee18 3a10 	vmov	r3, s16
 800bff2:	4652      	mov	r2, sl
 800bff4:	4631      	mov	r1, r6
 800bff6:	4628      	mov	r0, r5
 800bff8:	47b8      	blx	r7
 800bffa:	3001      	adds	r0, #1
 800bffc:	f43f af41 	beq.w	800be82 <_printf_float+0xbe>
 800c000:	f04f 0800 	mov.w	r8, #0
 800c004:	f104 091a 	add.w	r9, r4, #26
 800c008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00a:	3b01      	subs	r3, #1
 800c00c:	4543      	cmp	r3, r8
 800c00e:	dc09      	bgt.n	800c024 <_printf_float+0x260>
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	079b      	lsls	r3, r3, #30
 800c014:	f100 8107 	bmi.w	800c226 <_printf_float+0x462>
 800c018:	68e0      	ldr	r0, [r4, #12]
 800c01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c01c:	4298      	cmp	r0, r3
 800c01e:	bfb8      	it	lt
 800c020:	4618      	movlt	r0, r3
 800c022:	e730      	b.n	800be86 <_printf_float+0xc2>
 800c024:	2301      	movs	r3, #1
 800c026:	464a      	mov	r2, r9
 800c028:	4631      	mov	r1, r6
 800c02a:	4628      	mov	r0, r5
 800c02c:	47b8      	blx	r7
 800c02e:	3001      	adds	r0, #1
 800c030:	f43f af27 	beq.w	800be82 <_printf_float+0xbe>
 800c034:	f108 0801 	add.w	r8, r8, #1
 800c038:	e7e6      	b.n	800c008 <_printf_float+0x244>
 800c03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dc39      	bgt.n	800c0b4 <_printf_float+0x2f0>
 800c040:	4a1b      	ldr	r2, [pc, #108]	; (800c0b0 <_printf_float+0x2ec>)
 800c042:	2301      	movs	r3, #1
 800c044:	4631      	mov	r1, r6
 800c046:	4628      	mov	r0, r5
 800c048:	47b8      	blx	r7
 800c04a:	3001      	adds	r0, #1
 800c04c:	f43f af19 	beq.w	800be82 <_printf_float+0xbe>
 800c050:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c054:	4313      	orrs	r3, r2
 800c056:	d102      	bne.n	800c05e <_printf_float+0x29a>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	07d9      	lsls	r1, r3, #31
 800c05c:	d5d8      	bpl.n	800c010 <_printf_float+0x24c>
 800c05e:	ee18 3a10 	vmov	r3, s16
 800c062:	4652      	mov	r2, sl
 800c064:	4631      	mov	r1, r6
 800c066:	4628      	mov	r0, r5
 800c068:	47b8      	blx	r7
 800c06a:	3001      	adds	r0, #1
 800c06c:	f43f af09 	beq.w	800be82 <_printf_float+0xbe>
 800c070:	f04f 0900 	mov.w	r9, #0
 800c074:	f104 0a1a 	add.w	sl, r4, #26
 800c078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07a:	425b      	negs	r3, r3
 800c07c:	454b      	cmp	r3, r9
 800c07e:	dc01      	bgt.n	800c084 <_printf_float+0x2c0>
 800c080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c082:	e792      	b.n	800bfaa <_printf_float+0x1e6>
 800c084:	2301      	movs	r3, #1
 800c086:	4652      	mov	r2, sl
 800c088:	4631      	mov	r1, r6
 800c08a:	4628      	mov	r0, r5
 800c08c:	47b8      	blx	r7
 800c08e:	3001      	adds	r0, #1
 800c090:	f43f aef7 	beq.w	800be82 <_printf_float+0xbe>
 800c094:	f109 0901 	add.w	r9, r9, #1
 800c098:	e7ee      	b.n	800c078 <_printf_float+0x2b4>
 800c09a:	bf00      	nop
 800c09c:	7fefffff 	.word	0x7fefffff
 800c0a0:	080107c4 	.word	0x080107c4
 800c0a4:	080107c8 	.word	0x080107c8
 800c0a8:	080107cc 	.word	0x080107cc
 800c0ac:	080107d0 	.word	0x080107d0
 800c0b0:	080107d4 	.word	0x080107d4
 800c0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	bfa8      	it	ge
 800c0bc:	461a      	movge	r2, r3
 800c0be:	2a00      	cmp	r2, #0
 800c0c0:	4691      	mov	r9, r2
 800c0c2:	dc37      	bgt.n	800c134 <_printf_float+0x370>
 800c0c4:	f04f 0b00 	mov.w	fp, #0
 800c0c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0cc:	f104 021a 	add.w	r2, r4, #26
 800c0d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0d2:	9305      	str	r3, [sp, #20]
 800c0d4:	eba3 0309 	sub.w	r3, r3, r9
 800c0d8:	455b      	cmp	r3, fp
 800c0da:	dc33      	bgt.n	800c144 <_printf_float+0x380>
 800c0dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	db3b      	blt.n	800c15c <_printf_float+0x398>
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	07da      	lsls	r2, r3, #31
 800c0e8:	d438      	bmi.n	800c15c <_printf_float+0x398>
 800c0ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c0ee:	eba2 0903 	sub.w	r9, r2, r3
 800c0f2:	9b05      	ldr	r3, [sp, #20]
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	4591      	cmp	r9, r2
 800c0f8:	bfa8      	it	ge
 800c0fa:	4691      	movge	r9, r2
 800c0fc:	f1b9 0f00 	cmp.w	r9, #0
 800c100:	dc35      	bgt.n	800c16e <_printf_float+0x3aa>
 800c102:	f04f 0800 	mov.w	r8, #0
 800c106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c10a:	f104 0a1a 	add.w	sl, r4, #26
 800c10e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	eba3 0309 	sub.w	r3, r3, r9
 800c118:	4543      	cmp	r3, r8
 800c11a:	f77f af79 	ble.w	800c010 <_printf_float+0x24c>
 800c11e:	2301      	movs	r3, #1
 800c120:	4652      	mov	r2, sl
 800c122:	4631      	mov	r1, r6
 800c124:	4628      	mov	r0, r5
 800c126:	47b8      	blx	r7
 800c128:	3001      	adds	r0, #1
 800c12a:	f43f aeaa 	beq.w	800be82 <_printf_float+0xbe>
 800c12e:	f108 0801 	add.w	r8, r8, #1
 800c132:	e7ec      	b.n	800c10e <_printf_float+0x34a>
 800c134:	4613      	mov	r3, r2
 800c136:	4631      	mov	r1, r6
 800c138:	4642      	mov	r2, r8
 800c13a:	4628      	mov	r0, r5
 800c13c:	47b8      	blx	r7
 800c13e:	3001      	adds	r0, #1
 800c140:	d1c0      	bne.n	800c0c4 <_printf_float+0x300>
 800c142:	e69e      	b.n	800be82 <_printf_float+0xbe>
 800c144:	2301      	movs	r3, #1
 800c146:	4631      	mov	r1, r6
 800c148:	4628      	mov	r0, r5
 800c14a:	9205      	str	r2, [sp, #20]
 800c14c:	47b8      	blx	r7
 800c14e:	3001      	adds	r0, #1
 800c150:	f43f ae97 	beq.w	800be82 <_printf_float+0xbe>
 800c154:	9a05      	ldr	r2, [sp, #20]
 800c156:	f10b 0b01 	add.w	fp, fp, #1
 800c15a:	e7b9      	b.n	800c0d0 <_printf_float+0x30c>
 800c15c:	ee18 3a10 	vmov	r3, s16
 800c160:	4652      	mov	r2, sl
 800c162:	4631      	mov	r1, r6
 800c164:	4628      	mov	r0, r5
 800c166:	47b8      	blx	r7
 800c168:	3001      	adds	r0, #1
 800c16a:	d1be      	bne.n	800c0ea <_printf_float+0x326>
 800c16c:	e689      	b.n	800be82 <_printf_float+0xbe>
 800c16e:	9a05      	ldr	r2, [sp, #20]
 800c170:	464b      	mov	r3, r9
 800c172:	4442      	add	r2, r8
 800c174:	4631      	mov	r1, r6
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	d1c1      	bne.n	800c102 <_printf_float+0x33e>
 800c17e:	e680      	b.n	800be82 <_printf_float+0xbe>
 800c180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c182:	2a01      	cmp	r2, #1
 800c184:	dc01      	bgt.n	800c18a <_printf_float+0x3c6>
 800c186:	07db      	lsls	r3, r3, #31
 800c188:	d53a      	bpl.n	800c200 <_printf_float+0x43c>
 800c18a:	2301      	movs	r3, #1
 800c18c:	4642      	mov	r2, r8
 800c18e:	4631      	mov	r1, r6
 800c190:	4628      	mov	r0, r5
 800c192:	47b8      	blx	r7
 800c194:	3001      	adds	r0, #1
 800c196:	f43f ae74 	beq.w	800be82 <_printf_float+0xbe>
 800c19a:	ee18 3a10 	vmov	r3, s16
 800c19e:	4652      	mov	r2, sl
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	47b8      	blx	r7
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	f43f ae6b 	beq.w	800be82 <_printf_float+0xbe>
 800c1ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c1b8:	f7f4 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1bc:	b9d8      	cbnz	r0, 800c1f6 <_printf_float+0x432>
 800c1be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c1c2:	f108 0201 	add.w	r2, r8, #1
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	47b8      	blx	r7
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d10e      	bne.n	800c1ee <_printf_float+0x42a>
 800c1d0:	e657      	b.n	800be82 <_printf_float+0xbe>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4652      	mov	r2, sl
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	4628      	mov	r0, r5
 800c1da:	47b8      	blx	r7
 800c1dc:	3001      	adds	r0, #1
 800c1de:	f43f ae50 	beq.w	800be82 <_printf_float+0xbe>
 800c1e2:	f108 0801 	add.w	r8, r8, #1
 800c1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	4543      	cmp	r3, r8
 800c1ec:	dcf1      	bgt.n	800c1d2 <_printf_float+0x40e>
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c1f4:	e6da      	b.n	800bfac <_printf_float+0x1e8>
 800c1f6:	f04f 0800 	mov.w	r8, #0
 800c1fa:	f104 0a1a 	add.w	sl, r4, #26
 800c1fe:	e7f2      	b.n	800c1e6 <_printf_float+0x422>
 800c200:	2301      	movs	r3, #1
 800c202:	4642      	mov	r2, r8
 800c204:	e7df      	b.n	800c1c6 <_printf_float+0x402>
 800c206:	2301      	movs	r3, #1
 800c208:	464a      	mov	r2, r9
 800c20a:	4631      	mov	r1, r6
 800c20c:	4628      	mov	r0, r5
 800c20e:	47b8      	blx	r7
 800c210:	3001      	adds	r0, #1
 800c212:	f43f ae36 	beq.w	800be82 <_printf_float+0xbe>
 800c216:	f108 0801 	add.w	r8, r8, #1
 800c21a:	68e3      	ldr	r3, [r4, #12]
 800c21c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c21e:	1a5b      	subs	r3, r3, r1
 800c220:	4543      	cmp	r3, r8
 800c222:	dcf0      	bgt.n	800c206 <_printf_float+0x442>
 800c224:	e6f8      	b.n	800c018 <_printf_float+0x254>
 800c226:	f04f 0800 	mov.w	r8, #0
 800c22a:	f104 0919 	add.w	r9, r4, #25
 800c22e:	e7f4      	b.n	800c21a <_printf_float+0x456>

0800c230 <_printf_common>:
 800c230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c234:	4616      	mov	r6, r2
 800c236:	4699      	mov	r9, r3
 800c238:	688a      	ldr	r2, [r1, #8]
 800c23a:	690b      	ldr	r3, [r1, #16]
 800c23c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c240:	4293      	cmp	r3, r2
 800c242:	bfb8      	it	lt
 800c244:	4613      	movlt	r3, r2
 800c246:	6033      	str	r3, [r6, #0]
 800c248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c24c:	4607      	mov	r7, r0
 800c24e:	460c      	mov	r4, r1
 800c250:	b10a      	cbz	r2, 800c256 <_printf_common+0x26>
 800c252:	3301      	adds	r3, #1
 800c254:	6033      	str	r3, [r6, #0]
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	0699      	lsls	r1, r3, #26
 800c25a:	bf42      	ittt	mi
 800c25c:	6833      	ldrmi	r3, [r6, #0]
 800c25e:	3302      	addmi	r3, #2
 800c260:	6033      	strmi	r3, [r6, #0]
 800c262:	6825      	ldr	r5, [r4, #0]
 800c264:	f015 0506 	ands.w	r5, r5, #6
 800c268:	d106      	bne.n	800c278 <_printf_common+0x48>
 800c26a:	f104 0a19 	add.w	sl, r4, #25
 800c26e:	68e3      	ldr	r3, [r4, #12]
 800c270:	6832      	ldr	r2, [r6, #0]
 800c272:	1a9b      	subs	r3, r3, r2
 800c274:	42ab      	cmp	r3, r5
 800c276:	dc26      	bgt.n	800c2c6 <_printf_common+0x96>
 800c278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c27c:	1e13      	subs	r3, r2, #0
 800c27e:	6822      	ldr	r2, [r4, #0]
 800c280:	bf18      	it	ne
 800c282:	2301      	movne	r3, #1
 800c284:	0692      	lsls	r2, r2, #26
 800c286:	d42b      	bmi.n	800c2e0 <_printf_common+0xb0>
 800c288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c28c:	4649      	mov	r1, r9
 800c28e:	4638      	mov	r0, r7
 800c290:	47c0      	blx	r8
 800c292:	3001      	adds	r0, #1
 800c294:	d01e      	beq.n	800c2d4 <_printf_common+0xa4>
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	6922      	ldr	r2, [r4, #16]
 800c29a:	f003 0306 	and.w	r3, r3, #6
 800c29e:	2b04      	cmp	r3, #4
 800c2a0:	bf02      	ittt	eq
 800c2a2:	68e5      	ldreq	r5, [r4, #12]
 800c2a4:	6833      	ldreq	r3, [r6, #0]
 800c2a6:	1aed      	subeq	r5, r5, r3
 800c2a8:	68a3      	ldr	r3, [r4, #8]
 800c2aa:	bf0c      	ite	eq
 800c2ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2b0:	2500      	movne	r5, #0
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	bfc4      	itt	gt
 800c2b6:	1a9b      	subgt	r3, r3, r2
 800c2b8:	18ed      	addgt	r5, r5, r3
 800c2ba:	2600      	movs	r6, #0
 800c2bc:	341a      	adds	r4, #26
 800c2be:	42b5      	cmp	r5, r6
 800c2c0:	d11a      	bne.n	800c2f8 <_printf_common+0xc8>
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	e008      	b.n	800c2d8 <_printf_common+0xa8>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	4652      	mov	r2, sl
 800c2ca:	4649      	mov	r1, r9
 800c2cc:	4638      	mov	r0, r7
 800c2ce:	47c0      	blx	r8
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d103      	bne.n	800c2dc <_printf_common+0xac>
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2dc:	3501      	adds	r5, #1
 800c2de:	e7c6      	b.n	800c26e <_printf_common+0x3e>
 800c2e0:	18e1      	adds	r1, r4, r3
 800c2e2:	1c5a      	adds	r2, r3, #1
 800c2e4:	2030      	movs	r0, #48	; 0x30
 800c2e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2ea:	4422      	add	r2, r4
 800c2ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2f4:	3302      	adds	r3, #2
 800c2f6:	e7c7      	b.n	800c288 <_printf_common+0x58>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	4638      	mov	r0, r7
 800c300:	47c0      	blx	r8
 800c302:	3001      	adds	r0, #1
 800c304:	d0e6      	beq.n	800c2d4 <_printf_common+0xa4>
 800c306:	3601      	adds	r6, #1
 800c308:	e7d9      	b.n	800c2be <_printf_common+0x8e>
	...

0800c30c <_printf_i>:
 800c30c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c310:	7e0f      	ldrb	r7, [r1, #24]
 800c312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c314:	2f78      	cmp	r7, #120	; 0x78
 800c316:	4691      	mov	r9, r2
 800c318:	4680      	mov	r8, r0
 800c31a:	460c      	mov	r4, r1
 800c31c:	469a      	mov	sl, r3
 800c31e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c322:	d807      	bhi.n	800c334 <_printf_i+0x28>
 800c324:	2f62      	cmp	r7, #98	; 0x62
 800c326:	d80a      	bhi.n	800c33e <_printf_i+0x32>
 800c328:	2f00      	cmp	r7, #0
 800c32a:	f000 80d4 	beq.w	800c4d6 <_printf_i+0x1ca>
 800c32e:	2f58      	cmp	r7, #88	; 0x58
 800c330:	f000 80c0 	beq.w	800c4b4 <_printf_i+0x1a8>
 800c334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c33c:	e03a      	b.n	800c3b4 <_printf_i+0xa8>
 800c33e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c342:	2b15      	cmp	r3, #21
 800c344:	d8f6      	bhi.n	800c334 <_printf_i+0x28>
 800c346:	a101      	add	r1, pc, #4	; (adr r1, 800c34c <_printf_i+0x40>)
 800c348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c34c:	0800c3a5 	.word	0x0800c3a5
 800c350:	0800c3b9 	.word	0x0800c3b9
 800c354:	0800c335 	.word	0x0800c335
 800c358:	0800c335 	.word	0x0800c335
 800c35c:	0800c335 	.word	0x0800c335
 800c360:	0800c335 	.word	0x0800c335
 800c364:	0800c3b9 	.word	0x0800c3b9
 800c368:	0800c335 	.word	0x0800c335
 800c36c:	0800c335 	.word	0x0800c335
 800c370:	0800c335 	.word	0x0800c335
 800c374:	0800c335 	.word	0x0800c335
 800c378:	0800c4bd 	.word	0x0800c4bd
 800c37c:	0800c3e5 	.word	0x0800c3e5
 800c380:	0800c477 	.word	0x0800c477
 800c384:	0800c335 	.word	0x0800c335
 800c388:	0800c335 	.word	0x0800c335
 800c38c:	0800c4df 	.word	0x0800c4df
 800c390:	0800c335 	.word	0x0800c335
 800c394:	0800c3e5 	.word	0x0800c3e5
 800c398:	0800c335 	.word	0x0800c335
 800c39c:	0800c335 	.word	0x0800c335
 800c3a0:	0800c47f 	.word	0x0800c47f
 800c3a4:	682b      	ldr	r3, [r5, #0]
 800c3a6:	1d1a      	adds	r2, r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	602a      	str	r2, [r5, #0]
 800c3ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e09f      	b.n	800c4f8 <_printf_i+0x1ec>
 800c3b8:	6820      	ldr	r0, [r4, #0]
 800c3ba:	682b      	ldr	r3, [r5, #0]
 800c3bc:	0607      	lsls	r7, r0, #24
 800c3be:	f103 0104 	add.w	r1, r3, #4
 800c3c2:	6029      	str	r1, [r5, #0]
 800c3c4:	d501      	bpl.n	800c3ca <_printf_i+0xbe>
 800c3c6:	681e      	ldr	r6, [r3, #0]
 800c3c8:	e003      	b.n	800c3d2 <_printf_i+0xc6>
 800c3ca:	0646      	lsls	r6, r0, #25
 800c3cc:	d5fb      	bpl.n	800c3c6 <_printf_i+0xba>
 800c3ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c3d2:	2e00      	cmp	r6, #0
 800c3d4:	da03      	bge.n	800c3de <_printf_i+0xd2>
 800c3d6:	232d      	movs	r3, #45	; 0x2d
 800c3d8:	4276      	negs	r6, r6
 800c3da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3de:	485a      	ldr	r0, [pc, #360]	; (800c548 <_printf_i+0x23c>)
 800c3e0:	230a      	movs	r3, #10
 800c3e2:	e012      	b.n	800c40a <_printf_i+0xfe>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	6820      	ldr	r0, [r4, #0]
 800c3e8:	1d19      	adds	r1, r3, #4
 800c3ea:	6029      	str	r1, [r5, #0]
 800c3ec:	0605      	lsls	r5, r0, #24
 800c3ee:	d501      	bpl.n	800c3f4 <_printf_i+0xe8>
 800c3f0:	681e      	ldr	r6, [r3, #0]
 800c3f2:	e002      	b.n	800c3fa <_printf_i+0xee>
 800c3f4:	0641      	lsls	r1, r0, #25
 800c3f6:	d5fb      	bpl.n	800c3f0 <_printf_i+0xe4>
 800c3f8:	881e      	ldrh	r6, [r3, #0]
 800c3fa:	4853      	ldr	r0, [pc, #332]	; (800c548 <_printf_i+0x23c>)
 800c3fc:	2f6f      	cmp	r7, #111	; 0x6f
 800c3fe:	bf0c      	ite	eq
 800c400:	2308      	moveq	r3, #8
 800c402:	230a      	movne	r3, #10
 800c404:	2100      	movs	r1, #0
 800c406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c40a:	6865      	ldr	r5, [r4, #4]
 800c40c:	60a5      	str	r5, [r4, #8]
 800c40e:	2d00      	cmp	r5, #0
 800c410:	bfa2      	ittt	ge
 800c412:	6821      	ldrge	r1, [r4, #0]
 800c414:	f021 0104 	bicge.w	r1, r1, #4
 800c418:	6021      	strge	r1, [r4, #0]
 800c41a:	b90e      	cbnz	r6, 800c420 <_printf_i+0x114>
 800c41c:	2d00      	cmp	r5, #0
 800c41e:	d04b      	beq.n	800c4b8 <_printf_i+0x1ac>
 800c420:	4615      	mov	r5, r2
 800c422:	fbb6 f1f3 	udiv	r1, r6, r3
 800c426:	fb03 6711 	mls	r7, r3, r1, r6
 800c42a:	5dc7      	ldrb	r7, [r0, r7]
 800c42c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c430:	4637      	mov	r7, r6
 800c432:	42bb      	cmp	r3, r7
 800c434:	460e      	mov	r6, r1
 800c436:	d9f4      	bls.n	800c422 <_printf_i+0x116>
 800c438:	2b08      	cmp	r3, #8
 800c43a:	d10b      	bne.n	800c454 <_printf_i+0x148>
 800c43c:	6823      	ldr	r3, [r4, #0]
 800c43e:	07de      	lsls	r6, r3, #31
 800c440:	d508      	bpl.n	800c454 <_printf_i+0x148>
 800c442:	6923      	ldr	r3, [r4, #16]
 800c444:	6861      	ldr	r1, [r4, #4]
 800c446:	4299      	cmp	r1, r3
 800c448:	bfde      	ittt	le
 800c44a:	2330      	movle	r3, #48	; 0x30
 800c44c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c450:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c454:	1b52      	subs	r2, r2, r5
 800c456:	6122      	str	r2, [r4, #16]
 800c458:	f8cd a000 	str.w	sl, [sp]
 800c45c:	464b      	mov	r3, r9
 800c45e:	aa03      	add	r2, sp, #12
 800c460:	4621      	mov	r1, r4
 800c462:	4640      	mov	r0, r8
 800c464:	f7ff fee4 	bl	800c230 <_printf_common>
 800c468:	3001      	adds	r0, #1
 800c46a:	d14a      	bne.n	800c502 <_printf_i+0x1f6>
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	b004      	add	sp, #16
 800c472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	f043 0320 	orr.w	r3, r3, #32
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	4833      	ldr	r0, [pc, #204]	; (800c54c <_printf_i+0x240>)
 800c480:	2778      	movs	r7, #120	; 0x78
 800c482:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	6829      	ldr	r1, [r5, #0]
 800c48a:	061f      	lsls	r7, r3, #24
 800c48c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c490:	d402      	bmi.n	800c498 <_printf_i+0x18c>
 800c492:	065f      	lsls	r7, r3, #25
 800c494:	bf48      	it	mi
 800c496:	b2b6      	uxthmi	r6, r6
 800c498:	07df      	lsls	r7, r3, #31
 800c49a:	bf48      	it	mi
 800c49c:	f043 0320 	orrmi.w	r3, r3, #32
 800c4a0:	6029      	str	r1, [r5, #0]
 800c4a2:	bf48      	it	mi
 800c4a4:	6023      	strmi	r3, [r4, #0]
 800c4a6:	b91e      	cbnz	r6, 800c4b0 <_printf_i+0x1a4>
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	f023 0320 	bic.w	r3, r3, #32
 800c4ae:	6023      	str	r3, [r4, #0]
 800c4b0:	2310      	movs	r3, #16
 800c4b2:	e7a7      	b.n	800c404 <_printf_i+0xf8>
 800c4b4:	4824      	ldr	r0, [pc, #144]	; (800c548 <_printf_i+0x23c>)
 800c4b6:	e7e4      	b.n	800c482 <_printf_i+0x176>
 800c4b8:	4615      	mov	r5, r2
 800c4ba:	e7bd      	b.n	800c438 <_printf_i+0x12c>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	6826      	ldr	r6, [r4, #0]
 800c4c0:	6961      	ldr	r1, [r4, #20]
 800c4c2:	1d18      	adds	r0, r3, #4
 800c4c4:	6028      	str	r0, [r5, #0]
 800c4c6:	0635      	lsls	r5, r6, #24
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	d501      	bpl.n	800c4d0 <_printf_i+0x1c4>
 800c4cc:	6019      	str	r1, [r3, #0]
 800c4ce:	e002      	b.n	800c4d6 <_printf_i+0x1ca>
 800c4d0:	0670      	lsls	r0, r6, #25
 800c4d2:	d5fb      	bpl.n	800c4cc <_printf_i+0x1c0>
 800c4d4:	8019      	strh	r1, [r3, #0]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	6123      	str	r3, [r4, #16]
 800c4da:	4615      	mov	r5, r2
 800c4dc:	e7bc      	b.n	800c458 <_printf_i+0x14c>
 800c4de:	682b      	ldr	r3, [r5, #0]
 800c4e0:	1d1a      	adds	r2, r3, #4
 800c4e2:	602a      	str	r2, [r5, #0]
 800c4e4:	681d      	ldr	r5, [r3, #0]
 800c4e6:	6862      	ldr	r2, [r4, #4]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f7f3 fe70 	bl	80001d0 <memchr>
 800c4f0:	b108      	cbz	r0, 800c4f6 <_printf_i+0x1ea>
 800c4f2:	1b40      	subs	r0, r0, r5
 800c4f4:	6060      	str	r0, [r4, #4]
 800c4f6:	6863      	ldr	r3, [r4, #4]
 800c4f8:	6123      	str	r3, [r4, #16]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c500:	e7aa      	b.n	800c458 <_printf_i+0x14c>
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	462a      	mov	r2, r5
 800c506:	4649      	mov	r1, r9
 800c508:	4640      	mov	r0, r8
 800c50a:	47d0      	blx	sl
 800c50c:	3001      	adds	r0, #1
 800c50e:	d0ad      	beq.n	800c46c <_printf_i+0x160>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	079b      	lsls	r3, r3, #30
 800c514:	d413      	bmi.n	800c53e <_printf_i+0x232>
 800c516:	68e0      	ldr	r0, [r4, #12]
 800c518:	9b03      	ldr	r3, [sp, #12]
 800c51a:	4298      	cmp	r0, r3
 800c51c:	bfb8      	it	lt
 800c51e:	4618      	movlt	r0, r3
 800c520:	e7a6      	b.n	800c470 <_printf_i+0x164>
 800c522:	2301      	movs	r3, #1
 800c524:	4632      	mov	r2, r6
 800c526:	4649      	mov	r1, r9
 800c528:	4640      	mov	r0, r8
 800c52a:	47d0      	blx	sl
 800c52c:	3001      	adds	r0, #1
 800c52e:	d09d      	beq.n	800c46c <_printf_i+0x160>
 800c530:	3501      	adds	r5, #1
 800c532:	68e3      	ldr	r3, [r4, #12]
 800c534:	9903      	ldr	r1, [sp, #12]
 800c536:	1a5b      	subs	r3, r3, r1
 800c538:	42ab      	cmp	r3, r5
 800c53a:	dcf2      	bgt.n	800c522 <_printf_i+0x216>
 800c53c:	e7eb      	b.n	800c516 <_printf_i+0x20a>
 800c53e:	2500      	movs	r5, #0
 800c540:	f104 0619 	add.w	r6, r4, #25
 800c544:	e7f5      	b.n	800c532 <_printf_i+0x226>
 800c546:	bf00      	nop
 800c548:	080107d6 	.word	0x080107d6
 800c54c:	080107e7 	.word	0x080107e7

0800c550 <std>:
 800c550:	2300      	movs	r3, #0
 800c552:	b510      	push	{r4, lr}
 800c554:	4604      	mov	r4, r0
 800c556:	e9c0 3300 	strd	r3, r3, [r0]
 800c55a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c55e:	6083      	str	r3, [r0, #8]
 800c560:	8181      	strh	r1, [r0, #12]
 800c562:	6643      	str	r3, [r0, #100]	; 0x64
 800c564:	81c2      	strh	r2, [r0, #14]
 800c566:	6183      	str	r3, [r0, #24]
 800c568:	4619      	mov	r1, r3
 800c56a:	2208      	movs	r2, #8
 800c56c:	305c      	adds	r0, #92	; 0x5c
 800c56e:	f000 f8f4 	bl	800c75a <memset>
 800c572:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <std+0x58>)
 800c574:	6263      	str	r3, [r4, #36]	; 0x24
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <std+0x5c>)
 800c578:	62a3      	str	r3, [r4, #40]	; 0x28
 800c57a:	4b0d      	ldr	r3, [pc, #52]	; (800c5b0 <std+0x60>)
 800c57c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c57e:	4b0d      	ldr	r3, [pc, #52]	; (800c5b4 <std+0x64>)
 800c580:	6323      	str	r3, [r4, #48]	; 0x30
 800c582:	4b0d      	ldr	r3, [pc, #52]	; (800c5b8 <std+0x68>)
 800c584:	6224      	str	r4, [r4, #32]
 800c586:	429c      	cmp	r4, r3
 800c588:	d006      	beq.n	800c598 <std+0x48>
 800c58a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c58e:	4294      	cmp	r4, r2
 800c590:	d002      	beq.n	800c598 <std+0x48>
 800c592:	33d0      	adds	r3, #208	; 0xd0
 800c594:	429c      	cmp	r4, r3
 800c596:	d105      	bne.n	800c5a4 <std+0x54>
 800c598:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5a0:	f000 b97a 	b.w	800c898 <__retarget_lock_init_recursive>
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	bf00      	nop
 800c5a8:	0800c6d5 	.word	0x0800c6d5
 800c5ac:	0800c6f7 	.word	0x0800c6f7
 800c5b0:	0800c72f 	.word	0x0800c72f
 800c5b4:	0800c753 	.word	0x0800c753
 800c5b8:	20013394 	.word	0x20013394

0800c5bc <stdio_exit_handler>:
 800c5bc:	4a02      	ldr	r2, [pc, #8]	; (800c5c8 <stdio_exit_handler+0xc>)
 800c5be:	4903      	ldr	r1, [pc, #12]	; (800c5cc <stdio_exit_handler+0x10>)
 800c5c0:	4803      	ldr	r0, [pc, #12]	; (800c5d0 <stdio_exit_handler+0x14>)
 800c5c2:	f000 b869 	b.w	800c698 <_fwalk_sglue>
 800c5c6:	bf00      	nop
 800c5c8:	20000cdc 	.word	0x20000cdc
 800c5cc:	0800de51 	.word	0x0800de51
 800c5d0:	20000ce8 	.word	0x20000ce8

0800c5d4 <cleanup_stdio>:
 800c5d4:	6841      	ldr	r1, [r0, #4]
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <cleanup_stdio+0x34>)
 800c5d8:	4299      	cmp	r1, r3
 800c5da:	b510      	push	{r4, lr}
 800c5dc:	4604      	mov	r4, r0
 800c5de:	d001      	beq.n	800c5e4 <cleanup_stdio+0x10>
 800c5e0:	f001 fc36 	bl	800de50 <_fflush_r>
 800c5e4:	68a1      	ldr	r1, [r4, #8]
 800c5e6:	4b09      	ldr	r3, [pc, #36]	; (800c60c <cleanup_stdio+0x38>)
 800c5e8:	4299      	cmp	r1, r3
 800c5ea:	d002      	beq.n	800c5f2 <cleanup_stdio+0x1e>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f001 fc2f 	bl	800de50 <_fflush_r>
 800c5f2:	68e1      	ldr	r1, [r4, #12]
 800c5f4:	4b06      	ldr	r3, [pc, #24]	; (800c610 <cleanup_stdio+0x3c>)
 800c5f6:	4299      	cmp	r1, r3
 800c5f8:	d004      	beq.n	800c604 <cleanup_stdio+0x30>
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c600:	f001 bc26 	b.w	800de50 <_fflush_r>
 800c604:	bd10      	pop	{r4, pc}
 800c606:	bf00      	nop
 800c608:	20013394 	.word	0x20013394
 800c60c:	200133fc 	.word	0x200133fc
 800c610:	20013464 	.word	0x20013464

0800c614 <global_stdio_init.part.0>:
 800c614:	b510      	push	{r4, lr}
 800c616:	4b0b      	ldr	r3, [pc, #44]	; (800c644 <global_stdio_init.part.0+0x30>)
 800c618:	4c0b      	ldr	r4, [pc, #44]	; (800c648 <global_stdio_init.part.0+0x34>)
 800c61a:	4a0c      	ldr	r2, [pc, #48]	; (800c64c <global_stdio_init.part.0+0x38>)
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	4620      	mov	r0, r4
 800c620:	2200      	movs	r2, #0
 800c622:	2104      	movs	r1, #4
 800c624:	f7ff ff94 	bl	800c550 <std>
 800c628:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c62c:	2201      	movs	r2, #1
 800c62e:	2109      	movs	r1, #9
 800c630:	f7ff ff8e 	bl	800c550 <std>
 800c634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c638:	2202      	movs	r2, #2
 800c63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c63e:	2112      	movs	r1, #18
 800c640:	f7ff bf86 	b.w	800c550 <std>
 800c644:	200134cc 	.word	0x200134cc
 800c648:	20013394 	.word	0x20013394
 800c64c:	0800c5bd 	.word	0x0800c5bd

0800c650 <__sfp_lock_acquire>:
 800c650:	4801      	ldr	r0, [pc, #4]	; (800c658 <__sfp_lock_acquire+0x8>)
 800c652:	f000 b922 	b.w	800c89a <__retarget_lock_acquire_recursive>
 800c656:	bf00      	nop
 800c658:	200134d5 	.word	0x200134d5

0800c65c <__sfp_lock_release>:
 800c65c:	4801      	ldr	r0, [pc, #4]	; (800c664 <__sfp_lock_release+0x8>)
 800c65e:	f000 b91d 	b.w	800c89c <__retarget_lock_release_recursive>
 800c662:	bf00      	nop
 800c664:	200134d5 	.word	0x200134d5

0800c668 <__sinit>:
 800c668:	b510      	push	{r4, lr}
 800c66a:	4604      	mov	r4, r0
 800c66c:	f7ff fff0 	bl	800c650 <__sfp_lock_acquire>
 800c670:	6a23      	ldr	r3, [r4, #32]
 800c672:	b11b      	cbz	r3, 800c67c <__sinit+0x14>
 800c674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c678:	f7ff bff0 	b.w	800c65c <__sfp_lock_release>
 800c67c:	4b04      	ldr	r3, [pc, #16]	; (800c690 <__sinit+0x28>)
 800c67e:	6223      	str	r3, [r4, #32]
 800c680:	4b04      	ldr	r3, [pc, #16]	; (800c694 <__sinit+0x2c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1f5      	bne.n	800c674 <__sinit+0xc>
 800c688:	f7ff ffc4 	bl	800c614 <global_stdio_init.part.0>
 800c68c:	e7f2      	b.n	800c674 <__sinit+0xc>
 800c68e:	bf00      	nop
 800c690:	0800c5d5 	.word	0x0800c5d5
 800c694:	200134cc 	.word	0x200134cc

0800c698 <_fwalk_sglue>:
 800c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69c:	4607      	mov	r7, r0
 800c69e:	4688      	mov	r8, r1
 800c6a0:	4614      	mov	r4, r2
 800c6a2:	2600      	movs	r6, #0
 800c6a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6a8:	f1b9 0901 	subs.w	r9, r9, #1
 800c6ac:	d505      	bpl.n	800c6ba <_fwalk_sglue+0x22>
 800c6ae:	6824      	ldr	r4, [r4, #0]
 800c6b0:	2c00      	cmp	r4, #0
 800c6b2:	d1f7      	bne.n	800c6a4 <_fwalk_sglue+0xc>
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ba:	89ab      	ldrh	r3, [r5, #12]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d907      	bls.n	800c6d0 <_fwalk_sglue+0x38>
 800c6c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	d003      	beq.n	800c6d0 <_fwalk_sglue+0x38>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	47c0      	blx	r8
 800c6ce:	4306      	orrs	r6, r0
 800c6d0:	3568      	adds	r5, #104	; 0x68
 800c6d2:	e7e9      	b.n	800c6a8 <_fwalk_sglue+0x10>

0800c6d4 <__sread>:
 800c6d4:	b510      	push	{r4, lr}
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6dc:	f000 f87e 	bl	800c7dc <_read_r>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	bfab      	itete	ge
 800c6e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6e8:	181b      	addge	r3, r3, r0
 800c6ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6ee:	bfac      	ite	ge
 800c6f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6f2:	81a3      	strhlt	r3, [r4, #12]
 800c6f4:	bd10      	pop	{r4, pc}

0800c6f6 <__swrite>:
 800c6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fa:	461f      	mov	r7, r3
 800c6fc:	898b      	ldrh	r3, [r1, #12]
 800c6fe:	05db      	lsls	r3, r3, #23
 800c700:	4605      	mov	r5, r0
 800c702:	460c      	mov	r4, r1
 800c704:	4616      	mov	r6, r2
 800c706:	d505      	bpl.n	800c714 <__swrite+0x1e>
 800c708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70c:	2302      	movs	r3, #2
 800c70e:	2200      	movs	r2, #0
 800c710:	f000 f852 	bl	800c7b8 <_lseek_r>
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c71a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c71e:	81a3      	strh	r3, [r4, #12]
 800c720:	4632      	mov	r2, r6
 800c722:	463b      	mov	r3, r7
 800c724:	4628      	mov	r0, r5
 800c726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c72a:	f000 b879 	b.w	800c820 <_write_r>

0800c72e <__sseek>:
 800c72e:	b510      	push	{r4, lr}
 800c730:	460c      	mov	r4, r1
 800c732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c736:	f000 f83f 	bl	800c7b8 <_lseek_r>
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	bf15      	itete	ne
 800c740:	6560      	strne	r0, [r4, #84]	; 0x54
 800c742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c74a:	81a3      	strheq	r3, [r4, #12]
 800c74c:	bf18      	it	ne
 800c74e:	81a3      	strhne	r3, [r4, #12]
 800c750:	bd10      	pop	{r4, pc}

0800c752 <__sclose>:
 800c752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c756:	f000 b81f 	b.w	800c798 <_close_r>

0800c75a <memset>:
 800c75a:	4402      	add	r2, r0
 800c75c:	4603      	mov	r3, r0
 800c75e:	4293      	cmp	r3, r2
 800c760:	d100      	bne.n	800c764 <memset+0xa>
 800c762:	4770      	bx	lr
 800c764:	f803 1b01 	strb.w	r1, [r3], #1
 800c768:	e7f9      	b.n	800c75e <memset+0x4>

0800c76a <strncmp>:
 800c76a:	b510      	push	{r4, lr}
 800c76c:	b16a      	cbz	r2, 800c78a <strncmp+0x20>
 800c76e:	3901      	subs	r1, #1
 800c770:	1884      	adds	r4, r0, r2
 800c772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c776:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d103      	bne.n	800c786 <strncmp+0x1c>
 800c77e:	42a0      	cmp	r0, r4
 800c780:	d001      	beq.n	800c786 <strncmp+0x1c>
 800c782:	2a00      	cmp	r2, #0
 800c784:	d1f5      	bne.n	800c772 <strncmp+0x8>
 800c786:	1ad0      	subs	r0, r2, r3
 800c788:	bd10      	pop	{r4, pc}
 800c78a:	4610      	mov	r0, r2
 800c78c:	e7fc      	b.n	800c788 <strncmp+0x1e>
	...

0800c790 <_localeconv_r>:
 800c790:	4800      	ldr	r0, [pc, #0]	; (800c794 <_localeconv_r+0x4>)
 800c792:	4770      	bx	lr
 800c794:	20000e28 	.word	0x20000e28

0800c798 <_close_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d06      	ldr	r5, [pc, #24]	; (800c7b4 <_close_r+0x1c>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f002 fa4c 	bl	800ec40 <_close>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_close_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_close_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	200134d0 	.word	0x200134d0

0800c7b8 <_lseek_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4d07      	ldr	r5, [pc, #28]	; (800c7d8 <_lseek_r+0x20>)
 800c7bc:	4604      	mov	r4, r0
 800c7be:	4608      	mov	r0, r1
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	602a      	str	r2, [r5, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f002 fa62 	bl	800ec90 <_lseek>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_lseek_r+0x1e>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_lseek_r+0x1e>
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	200134d0 	.word	0x200134d0

0800c7dc <_read_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4d07      	ldr	r5, [pc, #28]	; (800c7fc <_read_r+0x20>)
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	602a      	str	r2, [r5, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	f002 fa58 	bl	800eca0 <_read>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_read_r+0x1e>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_read_r+0x1e>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	200134d0 	.word	0x200134d0

0800c800 <_sbrk_r>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	4d06      	ldr	r5, [pc, #24]	; (800c81c <_sbrk_r+0x1c>)
 800c804:	2300      	movs	r3, #0
 800c806:	4604      	mov	r4, r0
 800c808:	4608      	mov	r0, r1
 800c80a:	602b      	str	r3, [r5, #0]
 800c80c:	f7f4 fe1a 	bl	8001444 <_sbrk>
 800c810:	1c43      	adds	r3, r0, #1
 800c812:	d102      	bne.n	800c81a <_sbrk_r+0x1a>
 800c814:	682b      	ldr	r3, [r5, #0]
 800c816:	b103      	cbz	r3, 800c81a <_sbrk_r+0x1a>
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	bd38      	pop	{r3, r4, r5, pc}
 800c81c:	200134d0 	.word	0x200134d0

0800c820 <_write_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4d07      	ldr	r5, [pc, #28]	; (800c840 <_write_r+0x20>)
 800c824:	4604      	mov	r4, r0
 800c826:	4608      	mov	r0, r1
 800c828:	4611      	mov	r1, r2
 800c82a:	2200      	movs	r2, #0
 800c82c:	602a      	str	r2, [r5, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	f7f6 f906 	bl	8002a40 <_write>
 800c834:	1c43      	adds	r3, r0, #1
 800c836:	d102      	bne.n	800c83e <_write_r+0x1e>
 800c838:	682b      	ldr	r3, [r5, #0]
 800c83a:	b103      	cbz	r3, 800c83e <_write_r+0x1e>
 800c83c:	6023      	str	r3, [r4, #0]
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	200134d0 	.word	0x200134d0

0800c844 <__errno>:
 800c844:	4b01      	ldr	r3, [pc, #4]	; (800c84c <__errno+0x8>)
 800c846:	6818      	ldr	r0, [r3, #0]
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	20000d34 	.word	0x20000d34

0800c850 <__libc_init_array>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	4d0d      	ldr	r5, [pc, #52]	; (800c888 <__libc_init_array+0x38>)
 800c854:	4c0d      	ldr	r4, [pc, #52]	; (800c88c <__libc_init_array+0x3c>)
 800c856:	1b64      	subs	r4, r4, r5
 800c858:	10a4      	asrs	r4, r4, #2
 800c85a:	2600      	movs	r6, #0
 800c85c:	42a6      	cmp	r6, r4
 800c85e:	d109      	bne.n	800c874 <__libc_init_array+0x24>
 800c860:	4d0b      	ldr	r5, [pc, #44]	; (800c890 <__libc_init_array+0x40>)
 800c862:	4c0c      	ldr	r4, [pc, #48]	; (800c894 <__libc_init_array+0x44>)
 800c864:	f002 fa26 	bl	800ecb4 <_init>
 800c868:	1b64      	subs	r4, r4, r5
 800c86a:	10a4      	asrs	r4, r4, #2
 800c86c:	2600      	movs	r6, #0
 800c86e:	42a6      	cmp	r6, r4
 800c870:	d105      	bne.n	800c87e <__libc_init_array+0x2e>
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	f855 3b04 	ldr.w	r3, [r5], #4
 800c878:	4798      	blx	r3
 800c87a:	3601      	adds	r6, #1
 800c87c:	e7ee      	b.n	800c85c <__libc_init_array+0xc>
 800c87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c882:	4798      	blx	r3
 800c884:	3601      	adds	r6, #1
 800c886:	e7f2      	b.n	800c86e <__libc_init_array+0x1e>
 800c888:	08010b54 	.word	0x08010b54
 800c88c:	08010b54 	.word	0x08010b54
 800c890:	08010b54 	.word	0x08010b54
 800c894:	08010b58 	.word	0x08010b58

0800c898 <__retarget_lock_init_recursive>:
 800c898:	4770      	bx	lr

0800c89a <__retarget_lock_acquire_recursive>:
 800c89a:	4770      	bx	lr

0800c89c <__retarget_lock_release_recursive>:
 800c89c:	4770      	bx	lr

0800c89e <memcpy>:
 800c89e:	440a      	add	r2, r1
 800c8a0:	4291      	cmp	r1, r2
 800c8a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8a6:	d100      	bne.n	800c8aa <memcpy+0xc>
 800c8a8:	4770      	bx	lr
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8b4:	4291      	cmp	r1, r2
 800c8b6:	d1f9      	bne.n	800c8ac <memcpy+0xe>
 800c8b8:	bd10      	pop	{r4, pc}

0800c8ba <quorem>:
 800c8ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8be:	6903      	ldr	r3, [r0, #16]
 800c8c0:	690c      	ldr	r4, [r1, #16]
 800c8c2:	42a3      	cmp	r3, r4
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	db7e      	blt.n	800c9c6 <quorem+0x10c>
 800c8c8:	3c01      	subs	r4, #1
 800c8ca:	f101 0814 	add.w	r8, r1, #20
 800c8ce:	f100 0514 	add.w	r5, r0, #20
 800c8d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c8e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8f0:	d331      	bcc.n	800c956 <quorem+0x9c>
 800c8f2:	f04f 0e00 	mov.w	lr, #0
 800c8f6:	4640      	mov	r0, r8
 800c8f8:	46ac      	mov	ip, r5
 800c8fa:	46f2      	mov	sl, lr
 800c8fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c900:	b293      	uxth	r3, r2
 800c902:	fb06 e303 	mla	r3, r6, r3, lr
 800c906:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c90a:	0c1a      	lsrs	r2, r3, #16
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	ebaa 0303 	sub.w	r3, sl, r3
 800c912:	f8dc a000 	ldr.w	sl, [ip]
 800c916:	fa13 f38a 	uxtah	r3, r3, sl
 800c91a:	fb06 220e 	mla	r2, r6, lr, r2
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	9b00      	ldr	r3, [sp, #0]
 800c922:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c926:	b292      	uxth	r2, r2
 800c928:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c92c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c930:	f8bd 3000 	ldrh.w	r3, [sp]
 800c934:	4581      	cmp	r9, r0
 800c936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c93a:	f84c 3b04 	str.w	r3, [ip], #4
 800c93e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c942:	d2db      	bcs.n	800c8fc <quorem+0x42>
 800c944:	f855 300b 	ldr.w	r3, [r5, fp]
 800c948:	b92b      	cbnz	r3, 800c956 <quorem+0x9c>
 800c94a:	9b01      	ldr	r3, [sp, #4]
 800c94c:	3b04      	subs	r3, #4
 800c94e:	429d      	cmp	r5, r3
 800c950:	461a      	mov	r2, r3
 800c952:	d32c      	bcc.n	800c9ae <quorem+0xf4>
 800c954:	613c      	str	r4, [r7, #16]
 800c956:	4638      	mov	r0, r7
 800c958:	f001 f8f4 	bl	800db44 <__mcmp>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	db22      	blt.n	800c9a6 <quorem+0xec>
 800c960:	3601      	adds	r6, #1
 800c962:	4629      	mov	r1, r5
 800c964:	2000      	movs	r0, #0
 800c966:	f858 2b04 	ldr.w	r2, [r8], #4
 800c96a:	f8d1 c000 	ldr.w	ip, [r1]
 800c96e:	b293      	uxth	r3, r2
 800c970:	1ac3      	subs	r3, r0, r3
 800c972:	0c12      	lsrs	r2, r2, #16
 800c974:	fa13 f38c 	uxtah	r3, r3, ip
 800c978:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c97c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c980:	b29b      	uxth	r3, r3
 800c982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c986:	45c1      	cmp	r9, r8
 800c988:	f841 3b04 	str.w	r3, [r1], #4
 800c98c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c990:	d2e9      	bcs.n	800c966 <quorem+0xac>
 800c992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c99a:	b922      	cbnz	r2, 800c9a6 <quorem+0xec>
 800c99c:	3b04      	subs	r3, #4
 800c99e:	429d      	cmp	r5, r3
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	d30a      	bcc.n	800c9ba <quorem+0x100>
 800c9a4:	613c      	str	r4, [r7, #16]
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	b003      	add	sp, #12
 800c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	6812      	ldr	r2, [r2, #0]
 800c9b0:	3b04      	subs	r3, #4
 800c9b2:	2a00      	cmp	r2, #0
 800c9b4:	d1ce      	bne.n	800c954 <quorem+0x9a>
 800c9b6:	3c01      	subs	r4, #1
 800c9b8:	e7c9      	b.n	800c94e <quorem+0x94>
 800c9ba:	6812      	ldr	r2, [r2, #0]
 800c9bc:	3b04      	subs	r3, #4
 800c9be:	2a00      	cmp	r2, #0
 800c9c0:	d1f0      	bne.n	800c9a4 <quorem+0xea>
 800c9c2:	3c01      	subs	r4, #1
 800c9c4:	e7eb      	b.n	800c99e <quorem+0xe4>
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e7ee      	b.n	800c9a8 <quorem+0xee>
 800c9ca:	0000      	movs	r0, r0
 800c9cc:	0000      	movs	r0, r0
	...

0800c9d0 <_dtoa_r>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	ed2d 8b04 	vpush	{d8-d9}
 800c9d8:	69c5      	ldr	r5, [r0, #28]
 800c9da:	b093      	sub	sp, #76	; 0x4c
 800c9dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c9e0:	ec57 6b10 	vmov	r6, r7, d0
 800c9e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c9e8:	9107      	str	r1, [sp, #28]
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	920a      	str	r2, [sp, #40]	; 0x28
 800c9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c9f0:	b975      	cbnz	r5, 800ca10 <_dtoa_r+0x40>
 800c9f2:	2010      	movs	r0, #16
 800c9f4:	f7f6 f866 	bl	8002ac4 <__wrap_malloc>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	61e0      	str	r0, [r4, #28]
 800c9fc:	b920      	cbnz	r0, 800ca08 <_dtoa_r+0x38>
 800c9fe:	4bae      	ldr	r3, [pc, #696]	; (800ccb8 <_dtoa_r+0x2e8>)
 800ca00:	21ef      	movs	r1, #239	; 0xef
 800ca02:	48ae      	ldr	r0, [pc, #696]	; (800ccbc <_dtoa_r+0x2ec>)
 800ca04:	f001 fa4c 	bl	800dea0 <__assert_func>
 800ca08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca0c:	6005      	str	r5, [r0, #0]
 800ca0e:	60c5      	str	r5, [r0, #12]
 800ca10:	69e3      	ldr	r3, [r4, #28]
 800ca12:	6819      	ldr	r1, [r3, #0]
 800ca14:	b151      	cbz	r1, 800ca2c <_dtoa_r+0x5c>
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	604a      	str	r2, [r1, #4]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4093      	lsls	r3, r2
 800ca1e:	608b      	str	r3, [r1, #8]
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 fe53 	bl	800d6cc <_Bfree>
 800ca26:	69e3      	ldr	r3, [r4, #28]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	1e3b      	subs	r3, r7, #0
 800ca2e:	bfbb      	ittet	lt
 800ca30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca34:	9303      	strlt	r3, [sp, #12]
 800ca36:	2300      	movge	r3, #0
 800ca38:	2201      	movlt	r2, #1
 800ca3a:	bfac      	ite	ge
 800ca3c:	f8c8 3000 	strge.w	r3, [r8]
 800ca40:	f8c8 2000 	strlt.w	r2, [r8]
 800ca44:	4b9e      	ldr	r3, [pc, #632]	; (800ccc0 <_dtoa_r+0x2f0>)
 800ca46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ca4a:	ea33 0308 	bics.w	r3, r3, r8
 800ca4e:	d11b      	bne.n	800ca88 <_dtoa_r+0xb8>
 800ca50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca52:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ca5c:	4333      	orrs	r3, r6
 800ca5e:	f000 8593 	beq.w	800d588 <_dtoa_r+0xbb8>
 800ca62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca64:	b963      	cbnz	r3, 800ca80 <_dtoa_r+0xb0>
 800ca66:	4b97      	ldr	r3, [pc, #604]	; (800ccc4 <_dtoa_r+0x2f4>)
 800ca68:	e027      	b.n	800caba <_dtoa_r+0xea>
 800ca6a:	4b97      	ldr	r3, [pc, #604]	; (800ccc8 <_dtoa_r+0x2f8>)
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	3308      	adds	r3, #8
 800ca70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	9800      	ldr	r0, [sp, #0]
 800ca76:	b013      	add	sp, #76	; 0x4c
 800ca78:	ecbd 8b04 	vpop	{d8-d9}
 800ca7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca80:	4b90      	ldr	r3, [pc, #576]	; (800ccc4 <_dtoa_r+0x2f4>)
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	3303      	adds	r3, #3
 800ca86:	e7f3      	b.n	800ca70 <_dtoa_r+0xa0>
 800ca88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	ec51 0b17 	vmov	r0, r1, d7
 800ca92:	eeb0 8a47 	vmov.f32	s16, s14
 800ca96:	eef0 8a67 	vmov.f32	s17, s15
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f7f4 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 800caa0:	4681      	mov	r9, r0
 800caa2:	b160      	cbz	r0, 800cabe <_dtoa_r+0xee>
 800caa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caa6:	2301      	movs	r3, #1
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 8568 	beq.w	800d582 <_dtoa_r+0xbb2>
 800cab2:	4b86      	ldr	r3, [pc, #536]	; (800cccc <_dtoa_r+0x2fc>)
 800cab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	3b01      	subs	r3, #1
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	e7da      	b.n	800ca74 <_dtoa_r+0xa4>
 800cabe:	aa10      	add	r2, sp, #64	; 0x40
 800cac0:	a911      	add	r1, sp, #68	; 0x44
 800cac2:	4620      	mov	r0, r4
 800cac4:	eeb0 0a48 	vmov.f32	s0, s16
 800cac8:	eef0 0a68 	vmov.f32	s1, s17
 800cacc:	f001 f8e0 	bl	800dc90 <__d2b>
 800cad0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cad4:	4682      	mov	sl, r0
 800cad6:	2d00      	cmp	r5, #0
 800cad8:	d07f      	beq.n	800cbda <_dtoa_r+0x20a>
 800cada:	ee18 3a90 	vmov	r3, s17
 800cade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cae2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cae6:	ec51 0b18 	vmov	r0, r1, d8
 800caea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800caee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800caf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800caf6:	4619      	mov	r1, r3
 800caf8:	2200      	movs	r2, #0
 800cafa:	4b75      	ldr	r3, [pc, #468]	; (800ccd0 <_dtoa_r+0x300>)
 800cafc:	f7f3 fbc4 	bl	8000288 <__aeabi_dsub>
 800cb00:	a367      	add	r3, pc, #412	; (adr r3, 800cca0 <_dtoa_r+0x2d0>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	f7f3 fd77 	bl	80005f8 <__aeabi_dmul>
 800cb0a:	a367      	add	r3, pc, #412	; (adr r3, 800cca8 <_dtoa_r+0x2d8>)
 800cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb10:	f7f3 fbbc 	bl	800028c <__adddf3>
 800cb14:	4606      	mov	r6, r0
 800cb16:	4628      	mov	r0, r5
 800cb18:	460f      	mov	r7, r1
 800cb1a:	f7f3 fd03 	bl	8000524 <__aeabi_i2d>
 800cb1e:	a364      	add	r3, pc, #400	; (adr r3, 800ccb0 <_dtoa_r+0x2e0>)
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	f7f3 fd68 	bl	80005f8 <__aeabi_dmul>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	4639      	mov	r1, r7
 800cb30:	f7f3 fbac 	bl	800028c <__adddf3>
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	f7f4 f80e 	bl	8000b58 <__aeabi_d2iz>
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	4683      	mov	fp, r0
 800cb40:	2300      	movs	r3, #0
 800cb42:	4630      	mov	r0, r6
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 ffc9 	bl	8000adc <__aeabi_dcmplt>
 800cb4a:	b148      	cbz	r0, 800cb60 <_dtoa_r+0x190>
 800cb4c:	4658      	mov	r0, fp
 800cb4e:	f7f3 fce9 	bl	8000524 <__aeabi_i2d>
 800cb52:	4632      	mov	r2, r6
 800cb54:	463b      	mov	r3, r7
 800cb56:	f7f3 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb5a:	b908      	cbnz	r0, 800cb60 <_dtoa_r+0x190>
 800cb5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb60:	f1bb 0f16 	cmp.w	fp, #22
 800cb64:	d857      	bhi.n	800cc16 <_dtoa_r+0x246>
 800cb66:	4b5b      	ldr	r3, [pc, #364]	; (800ccd4 <_dtoa_r+0x304>)
 800cb68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	ec51 0b18 	vmov	r0, r1, d8
 800cb74:	f7f3 ffb2 	bl	8000adc <__aeabi_dcmplt>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d04e      	beq.n	800cc1a <_dtoa_r+0x24a>
 800cb7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb80:	2300      	movs	r3, #0
 800cb82:	930c      	str	r3, [sp, #48]	; 0x30
 800cb84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb86:	1b5b      	subs	r3, r3, r5
 800cb88:	1e5a      	subs	r2, r3, #1
 800cb8a:	bf45      	ittet	mi
 800cb8c:	f1c3 0301 	rsbmi	r3, r3, #1
 800cb90:	9305      	strmi	r3, [sp, #20]
 800cb92:	2300      	movpl	r3, #0
 800cb94:	2300      	movmi	r3, #0
 800cb96:	9206      	str	r2, [sp, #24]
 800cb98:	bf54      	ite	pl
 800cb9a:	9305      	strpl	r3, [sp, #20]
 800cb9c:	9306      	strmi	r3, [sp, #24]
 800cb9e:	f1bb 0f00 	cmp.w	fp, #0
 800cba2:	db3c      	blt.n	800cc1e <_dtoa_r+0x24e>
 800cba4:	9b06      	ldr	r3, [sp, #24]
 800cba6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cbaa:	445b      	add	r3, fp
 800cbac:	9306      	str	r3, [sp, #24]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	9308      	str	r3, [sp, #32]
 800cbb2:	9b07      	ldr	r3, [sp, #28]
 800cbb4:	2b09      	cmp	r3, #9
 800cbb6:	d868      	bhi.n	800cc8a <_dtoa_r+0x2ba>
 800cbb8:	2b05      	cmp	r3, #5
 800cbba:	bfc4      	itt	gt
 800cbbc:	3b04      	subgt	r3, #4
 800cbbe:	9307      	strgt	r3, [sp, #28]
 800cbc0:	9b07      	ldr	r3, [sp, #28]
 800cbc2:	f1a3 0302 	sub.w	r3, r3, #2
 800cbc6:	bfcc      	ite	gt
 800cbc8:	2500      	movgt	r5, #0
 800cbca:	2501      	movle	r5, #1
 800cbcc:	2b03      	cmp	r3, #3
 800cbce:	f200 8085 	bhi.w	800ccdc <_dtoa_r+0x30c>
 800cbd2:	e8df f003 	tbb	[pc, r3]
 800cbd6:	3b2e      	.short	0x3b2e
 800cbd8:	5839      	.short	0x5839
 800cbda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cbde:	441d      	add	r5, r3
 800cbe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cbe4:	2b20      	cmp	r3, #32
 800cbe6:	bfc1      	itttt	gt
 800cbe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cbec:	fa08 f803 	lslgt.w	r8, r8, r3
 800cbf0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cbf4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cbf8:	bfd6      	itet	le
 800cbfa:	f1c3 0320 	rsble	r3, r3, #32
 800cbfe:	ea48 0003 	orrgt.w	r0, r8, r3
 800cc02:	fa06 f003 	lslle.w	r0, r6, r3
 800cc06:	f7f3 fc7d 	bl	8000504 <__aeabi_ui2d>
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cc10:	3d01      	subs	r5, #1
 800cc12:	920e      	str	r2, [sp, #56]	; 0x38
 800cc14:	e76f      	b.n	800caf6 <_dtoa_r+0x126>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e7b3      	b.n	800cb82 <_dtoa_r+0x1b2>
 800cc1a:	900c      	str	r0, [sp, #48]	; 0x30
 800cc1c:	e7b2      	b.n	800cb84 <_dtoa_r+0x1b4>
 800cc1e:	9b05      	ldr	r3, [sp, #20]
 800cc20:	eba3 030b 	sub.w	r3, r3, fp
 800cc24:	9305      	str	r3, [sp, #20]
 800cc26:	f1cb 0300 	rsb	r3, fp, #0
 800cc2a:	9308      	str	r3, [sp, #32]
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc30:	e7bf      	b.n	800cbb2 <_dtoa_r+0x1e2>
 800cc32:	2300      	movs	r3, #0
 800cc34:	9309      	str	r3, [sp, #36]	; 0x24
 800cc36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dc52      	bgt.n	800cce2 <_dtoa_r+0x312>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	9304      	str	r3, [sp, #16]
 800cc42:	461a      	mov	r2, r3
 800cc44:	920a      	str	r2, [sp, #40]	; 0x28
 800cc46:	e00b      	b.n	800cc60 <_dtoa_r+0x290>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e7f3      	b.n	800cc34 <_dtoa_r+0x264>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc52:	445b      	add	r3, fp
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	3301      	adds	r3, #1
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	9304      	str	r3, [sp, #16]
 800cc5c:	bfb8      	it	lt
 800cc5e:	2301      	movlt	r3, #1
 800cc60:	69e0      	ldr	r0, [r4, #28]
 800cc62:	2100      	movs	r1, #0
 800cc64:	2204      	movs	r2, #4
 800cc66:	f102 0614 	add.w	r6, r2, #20
 800cc6a:	429e      	cmp	r6, r3
 800cc6c:	d93d      	bls.n	800ccea <_dtoa_r+0x31a>
 800cc6e:	6041      	str	r1, [r0, #4]
 800cc70:	4620      	mov	r0, r4
 800cc72:	f000 fceb 	bl	800d64c <_Balloc>
 800cc76:	9000      	str	r0, [sp, #0]
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d139      	bne.n	800ccf0 <_dtoa_r+0x320>
 800cc7c:	4b16      	ldr	r3, [pc, #88]	; (800ccd8 <_dtoa_r+0x308>)
 800cc7e:	4602      	mov	r2, r0
 800cc80:	f240 11af 	movw	r1, #431	; 0x1af
 800cc84:	e6bd      	b.n	800ca02 <_dtoa_r+0x32>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e7e1      	b.n	800cc4e <_dtoa_r+0x27e>
 800cc8a:	2501      	movs	r5, #1
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	9307      	str	r3, [sp, #28]
 800cc90:	9509      	str	r5, [sp, #36]	; 0x24
 800cc92:	f04f 33ff 	mov.w	r3, #4294967295
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	9304      	str	r3, [sp, #16]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	2312      	movs	r3, #18
 800cc9e:	e7d1      	b.n	800cc44 <_dtoa_r+0x274>
 800cca0:	636f4361 	.word	0x636f4361
 800cca4:	3fd287a7 	.word	0x3fd287a7
 800cca8:	8b60c8b3 	.word	0x8b60c8b3
 800ccac:	3fc68a28 	.word	0x3fc68a28
 800ccb0:	509f79fb 	.word	0x509f79fb
 800ccb4:	3fd34413 	.word	0x3fd34413
 800ccb8:	08010805 	.word	0x08010805
 800ccbc:	0801081c 	.word	0x0801081c
 800ccc0:	7ff00000 	.word	0x7ff00000
 800ccc4:	08010801 	.word	0x08010801
 800ccc8:	080107f8 	.word	0x080107f8
 800cccc:	080107d5 	.word	0x080107d5
 800ccd0:	3ff80000 	.word	0x3ff80000
 800ccd4:	08010908 	.word	0x08010908
 800ccd8:	08010874 	.word	0x08010874
 800ccdc:	2301      	movs	r3, #1
 800ccde:	9309      	str	r3, [sp, #36]	; 0x24
 800cce0:	e7d7      	b.n	800cc92 <_dtoa_r+0x2c2>
 800cce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce4:	9301      	str	r3, [sp, #4]
 800cce6:	9304      	str	r3, [sp, #16]
 800cce8:	e7ba      	b.n	800cc60 <_dtoa_r+0x290>
 800ccea:	3101      	adds	r1, #1
 800ccec:	0052      	lsls	r2, r2, #1
 800ccee:	e7ba      	b.n	800cc66 <_dtoa_r+0x296>
 800ccf0:	69e3      	ldr	r3, [r4, #28]
 800ccf2:	9a00      	ldr	r2, [sp, #0]
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	9b04      	ldr	r3, [sp, #16]
 800ccf8:	2b0e      	cmp	r3, #14
 800ccfa:	f200 80a8 	bhi.w	800ce4e <_dtoa_r+0x47e>
 800ccfe:	2d00      	cmp	r5, #0
 800cd00:	f000 80a5 	beq.w	800ce4e <_dtoa_r+0x47e>
 800cd04:	f1bb 0f00 	cmp.w	fp, #0
 800cd08:	dd38      	ble.n	800cd7c <_dtoa_r+0x3ac>
 800cd0a:	4bc0      	ldr	r3, [pc, #768]	; (800d00c <_dtoa_r+0x63c>)
 800cd0c:	f00b 020f 	and.w	r2, fp, #15
 800cd10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cd18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cd1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cd20:	d019      	beq.n	800cd56 <_dtoa_r+0x386>
 800cd22:	4bbb      	ldr	r3, [pc, #748]	; (800d010 <_dtoa_r+0x640>)
 800cd24:	ec51 0b18 	vmov	r0, r1, d8
 800cd28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd2c:	f7f3 fd8e 	bl	800084c <__aeabi_ddiv>
 800cd30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd34:	f008 080f 	and.w	r8, r8, #15
 800cd38:	2503      	movs	r5, #3
 800cd3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d010 <_dtoa_r+0x640>
 800cd3e:	f1b8 0f00 	cmp.w	r8, #0
 800cd42:	d10a      	bne.n	800cd5a <_dtoa_r+0x38a>
 800cd44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd48:	4632      	mov	r2, r6
 800cd4a:	463b      	mov	r3, r7
 800cd4c:	f7f3 fd7e 	bl	800084c <__aeabi_ddiv>
 800cd50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd54:	e02b      	b.n	800cdae <_dtoa_r+0x3de>
 800cd56:	2502      	movs	r5, #2
 800cd58:	e7ef      	b.n	800cd3a <_dtoa_r+0x36a>
 800cd5a:	f018 0f01 	tst.w	r8, #1
 800cd5e:	d008      	beq.n	800cd72 <_dtoa_r+0x3a2>
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cd68:	f7f3 fc46 	bl	80005f8 <__aeabi_dmul>
 800cd6c:	3501      	adds	r5, #1
 800cd6e:	4606      	mov	r6, r0
 800cd70:	460f      	mov	r7, r1
 800cd72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cd76:	f109 0908 	add.w	r9, r9, #8
 800cd7a:	e7e0      	b.n	800cd3e <_dtoa_r+0x36e>
 800cd7c:	f000 809f 	beq.w	800cebe <_dtoa_r+0x4ee>
 800cd80:	f1cb 0600 	rsb	r6, fp, #0
 800cd84:	4ba1      	ldr	r3, [pc, #644]	; (800d00c <_dtoa_r+0x63c>)
 800cd86:	4fa2      	ldr	r7, [pc, #648]	; (800d010 <_dtoa_r+0x640>)
 800cd88:	f006 020f 	and.w	r2, r6, #15
 800cd8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	ec51 0b18 	vmov	r0, r1, d8
 800cd98:	f7f3 fc2e 	bl	80005f8 <__aeabi_dmul>
 800cd9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cda0:	1136      	asrs	r6, r6, #4
 800cda2:	2300      	movs	r3, #0
 800cda4:	2502      	movs	r5, #2
 800cda6:	2e00      	cmp	r6, #0
 800cda8:	d17e      	bne.n	800cea8 <_dtoa_r+0x4d8>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1d0      	bne.n	800cd50 <_dtoa_r+0x380>
 800cdae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 8084 	beq.w	800cec2 <_dtoa_r+0x4f2>
 800cdba:	4b96      	ldr	r3, [pc, #600]	; (800d014 <_dtoa_r+0x644>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	f7f3 fe8b 	bl	8000adc <__aeabi_dcmplt>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d07b      	beq.n	800cec2 <_dtoa_r+0x4f2>
 800cdca:	9b04      	ldr	r3, [sp, #16]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d078      	beq.n	800cec2 <_dtoa_r+0x4f2>
 800cdd0:	9b01      	ldr	r3, [sp, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dd39      	ble.n	800ce4a <_dtoa_r+0x47a>
 800cdd6:	4b90      	ldr	r3, [pc, #576]	; (800d018 <_dtoa_r+0x648>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4640      	mov	r0, r8
 800cddc:	4649      	mov	r1, r9
 800cdde:	f7f3 fc0b 	bl	80005f8 <__aeabi_dmul>
 800cde2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cde6:	9e01      	ldr	r6, [sp, #4]
 800cde8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cdec:	3501      	adds	r5, #1
 800cdee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f7f3 fb96 	bl	8000524 <__aeabi_i2d>
 800cdf8:	4642      	mov	r2, r8
 800cdfa:	464b      	mov	r3, r9
 800cdfc:	f7f3 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ce00:	4b86      	ldr	r3, [pc, #536]	; (800d01c <_dtoa_r+0x64c>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	f7f3 fa42 	bl	800028c <__adddf3>
 800ce08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ce0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce10:	9303      	str	r3, [sp, #12]
 800ce12:	2e00      	cmp	r6, #0
 800ce14:	d158      	bne.n	800cec8 <_dtoa_r+0x4f8>
 800ce16:	4b82      	ldr	r3, [pc, #520]	; (800d020 <_dtoa_r+0x650>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	4649      	mov	r1, r9
 800ce1e:	f7f3 fa33 	bl	8000288 <__aeabi_dsub>
 800ce22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce26:	4680      	mov	r8, r0
 800ce28:	4689      	mov	r9, r1
 800ce2a:	f7f3 fe75 	bl	8000b18 <__aeabi_dcmpgt>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f040 8296 	bne.w	800d360 <_dtoa_r+0x990>
 800ce34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ce38:	4640      	mov	r0, r8
 800ce3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce3e:	4649      	mov	r1, r9
 800ce40:	f7f3 fe4c 	bl	8000adc <__aeabi_dcmplt>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f040 8289 	bne.w	800d35c <_dtoa_r+0x98c>
 800ce4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ce4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f2c0 814e 	blt.w	800d0f2 <_dtoa_r+0x722>
 800ce56:	f1bb 0f0e 	cmp.w	fp, #14
 800ce5a:	f300 814a 	bgt.w	800d0f2 <_dtoa_r+0x722>
 800ce5e:	4b6b      	ldr	r3, [pc, #428]	; (800d00c <_dtoa_r+0x63c>)
 800ce60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f280 80dc 	bge.w	800d028 <_dtoa_r+0x658>
 800ce70:	9b04      	ldr	r3, [sp, #16]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f300 80d8 	bgt.w	800d028 <_dtoa_r+0x658>
 800ce78:	f040 826f 	bne.w	800d35a <_dtoa_r+0x98a>
 800ce7c:	4b68      	ldr	r3, [pc, #416]	; (800d020 <_dtoa_r+0x650>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4640      	mov	r0, r8
 800ce82:	4649      	mov	r1, r9
 800ce84:	f7f3 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ce88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce8c:	f7f3 fe3a 	bl	8000b04 <__aeabi_dcmpge>
 800ce90:	9e04      	ldr	r6, [sp, #16]
 800ce92:	4637      	mov	r7, r6
 800ce94:	2800      	cmp	r0, #0
 800ce96:	f040 8245 	bne.w	800d324 <_dtoa_r+0x954>
 800ce9a:	9d00      	ldr	r5, [sp, #0]
 800ce9c:	2331      	movs	r3, #49	; 0x31
 800ce9e:	f805 3b01 	strb.w	r3, [r5], #1
 800cea2:	f10b 0b01 	add.w	fp, fp, #1
 800cea6:	e241      	b.n	800d32c <_dtoa_r+0x95c>
 800cea8:	07f2      	lsls	r2, r6, #31
 800ceaa:	d505      	bpl.n	800ceb8 <_dtoa_r+0x4e8>
 800ceac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceb0:	f7f3 fba2 	bl	80005f8 <__aeabi_dmul>
 800ceb4:	3501      	adds	r5, #1
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	1076      	asrs	r6, r6, #1
 800ceba:	3708      	adds	r7, #8
 800cebc:	e773      	b.n	800cda6 <_dtoa_r+0x3d6>
 800cebe:	2502      	movs	r5, #2
 800cec0:	e775      	b.n	800cdae <_dtoa_r+0x3de>
 800cec2:	9e04      	ldr	r6, [sp, #16]
 800cec4:	465f      	mov	r7, fp
 800cec6:	e792      	b.n	800cdee <_dtoa_r+0x41e>
 800cec8:	9900      	ldr	r1, [sp, #0]
 800ceca:	4b50      	ldr	r3, [pc, #320]	; (800d00c <_dtoa_r+0x63c>)
 800cecc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ced0:	4431      	add	r1, r6
 800ced2:	9102      	str	r1, [sp, #8]
 800ced4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ced6:	eeb0 9a47 	vmov.f32	s18, s14
 800ceda:	eef0 9a67 	vmov.f32	s19, s15
 800cede:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cee6:	2900      	cmp	r1, #0
 800cee8:	d044      	beq.n	800cf74 <_dtoa_r+0x5a4>
 800ceea:	494e      	ldr	r1, [pc, #312]	; (800d024 <_dtoa_r+0x654>)
 800ceec:	2000      	movs	r0, #0
 800ceee:	f7f3 fcad 	bl	800084c <__aeabi_ddiv>
 800cef2:	ec53 2b19 	vmov	r2, r3, d9
 800cef6:	f7f3 f9c7 	bl	8000288 <__aeabi_dsub>
 800cefa:	9d00      	ldr	r5, [sp, #0]
 800cefc:	ec41 0b19 	vmov	d9, r0, r1
 800cf00:	4649      	mov	r1, r9
 800cf02:	4640      	mov	r0, r8
 800cf04:	f7f3 fe28 	bl	8000b58 <__aeabi_d2iz>
 800cf08:	4606      	mov	r6, r0
 800cf0a:	f7f3 fb0b 	bl	8000524 <__aeabi_i2d>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 f9b7 	bl	8000288 <__aeabi_dsub>
 800cf1a:	3630      	adds	r6, #48	; 0x30
 800cf1c:	f805 6b01 	strb.w	r6, [r5], #1
 800cf20:	ec53 2b19 	vmov	r2, r3, d9
 800cf24:	4680      	mov	r8, r0
 800cf26:	4689      	mov	r9, r1
 800cf28:	f7f3 fdd8 	bl	8000adc <__aeabi_dcmplt>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d164      	bne.n	800cffa <_dtoa_r+0x62a>
 800cf30:	4642      	mov	r2, r8
 800cf32:	464b      	mov	r3, r9
 800cf34:	4937      	ldr	r1, [pc, #220]	; (800d014 <_dtoa_r+0x644>)
 800cf36:	2000      	movs	r0, #0
 800cf38:	f7f3 f9a6 	bl	8000288 <__aeabi_dsub>
 800cf3c:	ec53 2b19 	vmov	r2, r3, d9
 800cf40:	f7f3 fdcc 	bl	8000adc <__aeabi_dcmplt>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	f040 80b6 	bne.w	800d0b6 <_dtoa_r+0x6e6>
 800cf4a:	9b02      	ldr	r3, [sp, #8]
 800cf4c:	429d      	cmp	r5, r3
 800cf4e:	f43f af7c 	beq.w	800ce4a <_dtoa_r+0x47a>
 800cf52:	4b31      	ldr	r3, [pc, #196]	; (800d018 <_dtoa_r+0x648>)
 800cf54:	ec51 0b19 	vmov	r0, r1, d9
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f7f3 fb4d 	bl	80005f8 <__aeabi_dmul>
 800cf5e:	4b2e      	ldr	r3, [pc, #184]	; (800d018 <_dtoa_r+0x648>)
 800cf60:	ec41 0b19 	vmov	d9, r0, r1
 800cf64:	2200      	movs	r2, #0
 800cf66:	4640      	mov	r0, r8
 800cf68:	4649      	mov	r1, r9
 800cf6a:	f7f3 fb45 	bl	80005f8 <__aeabi_dmul>
 800cf6e:	4680      	mov	r8, r0
 800cf70:	4689      	mov	r9, r1
 800cf72:	e7c5      	b.n	800cf00 <_dtoa_r+0x530>
 800cf74:	ec51 0b17 	vmov	r0, r1, d7
 800cf78:	f7f3 fb3e 	bl	80005f8 <__aeabi_dmul>
 800cf7c:	9b02      	ldr	r3, [sp, #8]
 800cf7e:	9d00      	ldr	r5, [sp, #0]
 800cf80:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf82:	ec41 0b19 	vmov	d9, r0, r1
 800cf86:	4649      	mov	r1, r9
 800cf88:	4640      	mov	r0, r8
 800cf8a:	f7f3 fde5 	bl	8000b58 <__aeabi_d2iz>
 800cf8e:	4606      	mov	r6, r0
 800cf90:	f7f3 fac8 	bl	8000524 <__aeabi_i2d>
 800cf94:	3630      	adds	r6, #48	; 0x30
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	4649      	mov	r1, r9
 800cf9e:	f7f3 f973 	bl	8000288 <__aeabi_dsub>
 800cfa2:	f805 6b01 	strb.w	r6, [r5], #1
 800cfa6:	9b02      	ldr	r3, [sp, #8]
 800cfa8:	429d      	cmp	r5, r3
 800cfaa:	4680      	mov	r8, r0
 800cfac:	4689      	mov	r9, r1
 800cfae:	f04f 0200 	mov.w	r2, #0
 800cfb2:	d124      	bne.n	800cffe <_dtoa_r+0x62e>
 800cfb4:	4b1b      	ldr	r3, [pc, #108]	; (800d024 <_dtoa_r+0x654>)
 800cfb6:	ec51 0b19 	vmov	r0, r1, d9
 800cfba:	f7f3 f967 	bl	800028c <__adddf3>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	4640      	mov	r0, r8
 800cfc4:	4649      	mov	r1, r9
 800cfc6:	f7f3 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d173      	bne.n	800d0b6 <_dtoa_r+0x6e6>
 800cfce:	ec53 2b19 	vmov	r2, r3, d9
 800cfd2:	4914      	ldr	r1, [pc, #80]	; (800d024 <_dtoa_r+0x654>)
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	f7f3 f957 	bl	8000288 <__aeabi_dsub>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	4640      	mov	r0, r8
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	f7f3 fd7b 	bl	8000adc <__aeabi_dcmplt>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	f43f af2f 	beq.w	800ce4a <_dtoa_r+0x47a>
 800cfec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cfee:	1e6b      	subs	r3, r5, #1
 800cff0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cff2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cff6:	2b30      	cmp	r3, #48	; 0x30
 800cff8:	d0f8      	beq.n	800cfec <_dtoa_r+0x61c>
 800cffa:	46bb      	mov	fp, r7
 800cffc:	e04a      	b.n	800d094 <_dtoa_r+0x6c4>
 800cffe:	4b06      	ldr	r3, [pc, #24]	; (800d018 <_dtoa_r+0x648>)
 800d000:	f7f3 fafa 	bl	80005f8 <__aeabi_dmul>
 800d004:	4680      	mov	r8, r0
 800d006:	4689      	mov	r9, r1
 800d008:	e7bd      	b.n	800cf86 <_dtoa_r+0x5b6>
 800d00a:	bf00      	nop
 800d00c:	08010908 	.word	0x08010908
 800d010:	080108e0 	.word	0x080108e0
 800d014:	3ff00000 	.word	0x3ff00000
 800d018:	40240000 	.word	0x40240000
 800d01c:	401c0000 	.word	0x401c0000
 800d020:	40140000 	.word	0x40140000
 800d024:	3fe00000 	.word	0x3fe00000
 800d028:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d02c:	9d00      	ldr	r5, [sp, #0]
 800d02e:	4642      	mov	r2, r8
 800d030:	464b      	mov	r3, r9
 800d032:	4630      	mov	r0, r6
 800d034:	4639      	mov	r1, r7
 800d036:	f7f3 fc09 	bl	800084c <__aeabi_ddiv>
 800d03a:	f7f3 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800d03e:	9001      	str	r0, [sp, #4]
 800d040:	f7f3 fa70 	bl	8000524 <__aeabi_i2d>
 800d044:	4642      	mov	r2, r8
 800d046:	464b      	mov	r3, r9
 800d048:	f7f3 fad6 	bl	80005f8 <__aeabi_dmul>
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	4630      	mov	r0, r6
 800d052:	4639      	mov	r1, r7
 800d054:	f7f3 f918 	bl	8000288 <__aeabi_dsub>
 800d058:	9e01      	ldr	r6, [sp, #4]
 800d05a:	9f04      	ldr	r7, [sp, #16]
 800d05c:	3630      	adds	r6, #48	; 0x30
 800d05e:	f805 6b01 	strb.w	r6, [r5], #1
 800d062:	9e00      	ldr	r6, [sp, #0]
 800d064:	1bae      	subs	r6, r5, r6
 800d066:	42b7      	cmp	r7, r6
 800d068:	4602      	mov	r2, r0
 800d06a:	460b      	mov	r3, r1
 800d06c:	d134      	bne.n	800d0d8 <_dtoa_r+0x708>
 800d06e:	f7f3 f90d 	bl	800028c <__adddf3>
 800d072:	4642      	mov	r2, r8
 800d074:	464b      	mov	r3, r9
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	f7f3 fd4d 	bl	8000b18 <__aeabi_dcmpgt>
 800d07e:	b9c8      	cbnz	r0, 800d0b4 <_dtoa_r+0x6e4>
 800d080:	4642      	mov	r2, r8
 800d082:	464b      	mov	r3, r9
 800d084:	4630      	mov	r0, r6
 800d086:	4639      	mov	r1, r7
 800d088:	f7f3 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d08c:	b110      	cbz	r0, 800d094 <_dtoa_r+0x6c4>
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	07db      	lsls	r3, r3, #31
 800d092:	d40f      	bmi.n	800d0b4 <_dtoa_r+0x6e4>
 800d094:	4651      	mov	r1, sl
 800d096:	4620      	mov	r0, r4
 800d098:	f000 fb18 	bl	800d6cc <_Bfree>
 800d09c:	2300      	movs	r3, #0
 800d09e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0a0:	702b      	strb	r3, [r5, #0]
 800d0a2:	f10b 0301 	add.w	r3, fp, #1
 800d0a6:	6013      	str	r3, [r2, #0]
 800d0a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f43f ace2 	beq.w	800ca74 <_dtoa_r+0xa4>
 800d0b0:	601d      	str	r5, [r3, #0]
 800d0b2:	e4df      	b.n	800ca74 <_dtoa_r+0xa4>
 800d0b4:	465f      	mov	r7, fp
 800d0b6:	462b      	mov	r3, r5
 800d0b8:	461d      	mov	r5, r3
 800d0ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0be:	2a39      	cmp	r2, #57	; 0x39
 800d0c0:	d106      	bne.n	800d0d0 <_dtoa_r+0x700>
 800d0c2:	9a00      	ldr	r2, [sp, #0]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d1f7      	bne.n	800d0b8 <_dtoa_r+0x6e8>
 800d0c8:	9900      	ldr	r1, [sp, #0]
 800d0ca:	2230      	movs	r2, #48	; 0x30
 800d0cc:	3701      	adds	r7, #1
 800d0ce:	700a      	strb	r2, [r1, #0]
 800d0d0:	781a      	ldrb	r2, [r3, #0]
 800d0d2:	3201      	adds	r2, #1
 800d0d4:	701a      	strb	r2, [r3, #0]
 800d0d6:	e790      	b.n	800cffa <_dtoa_r+0x62a>
 800d0d8:	4ba3      	ldr	r3, [pc, #652]	; (800d368 <_dtoa_r+0x998>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f7f3 fa8c 	bl	80005f8 <__aeabi_dmul>
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	f7f3 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d09e      	beq.n	800d02e <_dtoa_r+0x65e>
 800d0f0:	e7d0      	b.n	800d094 <_dtoa_r+0x6c4>
 800d0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0f4:	2a00      	cmp	r2, #0
 800d0f6:	f000 80ca 	beq.w	800d28e <_dtoa_r+0x8be>
 800d0fa:	9a07      	ldr	r2, [sp, #28]
 800d0fc:	2a01      	cmp	r2, #1
 800d0fe:	f300 80ad 	bgt.w	800d25c <_dtoa_r+0x88c>
 800d102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d104:	2a00      	cmp	r2, #0
 800d106:	f000 80a5 	beq.w	800d254 <_dtoa_r+0x884>
 800d10a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d10e:	9e08      	ldr	r6, [sp, #32]
 800d110:	9d05      	ldr	r5, [sp, #20]
 800d112:	9a05      	ldr	r2, [sp, #20]
 800d114:	441a      	add	r2, r3
 800d116:	9205      	str	r2, [sp, #20]
 800d118:	9a06      	ldr	r2, [sp, #24]
 800d11a:	2101      	movs	r1, #1
 800d11c:	441a      	add	r2, r3
 800d11e:	4620      	mov	r0, r4
 800d120:	9206      	str	r2, [sp, #24]
 800d122:	f000 fb89 	bl	800d838 <__i2b>
 800d126:	4607      	mov	r7, r0
 800d128:	b165      	cbz	r5, 800d144 <_dtoa_r+0x774>
 800d12a:	9b06      	ldr	r3, [sp, #24]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	dd09      	ble.n	800d144 <_dtoa_r+0x774>
 800d130:	42ab      	cmp	r3, r5
 800d132:	9a05      	ldr	r2, [sp, #20]
 800d134:	bfa8      	it	ge
 800d136:	462b      	movge	r3, r5
 800d138:	1ad2      	subs	r2, r2, r3
 800d13a:	9205      	str	r2, [sp, #20]
 800d13c:	9a06      	ldr	r2, [sp, #24]
 800d13e:	1aed      	subs	r5, r5, r3
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	9306      	str	r3, [sp, #24]
 800d144:	9b08      	ldr	r3, [sp, #32]
 800d146:	b1f3      	cbz	r3, 800d186 <_dtoa_r+0x7b6>
 800d148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 80a3 	beq.w	800d296 <_dtoa_r+0x8c6>
 800d150:	2e00      	cmp	r6, #0
 800d152:	dd10      	ble.n	800d176 <_dtoa_r+0x7a6>
 800d154:	4639      	mov	r1, r7
 800d156:	4632      	mov	r2, r6
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 fc2d 	bl	800d9b8 <__pow5mult>
 800d15e:	4652      	mov	r2, sl
 800d160:	4601      	mov	r1, r0
 800d162:	4607      	mov	r7, r0
 800d164:	4620      	mov	r0, r4
 800d166:	f000 fb7d 	bl	800d864 <__multiply>
 800d16a:	4651      	mov	r1, sl
 800d16c:	4680      	mov	r8, r0
 800d16e:	4620      	mov	r0, r4
 800d170:	f000 faac 	bl	800d6cc <_Bfree>
 800d174:	46c2      	mov	sl, r8
 800d176:	9b08      	ldr	r3, [sp, #32]
 800d178:	1b9a      	subs	r2, r3, r6
 800d17a:	d004      	beq.n	800d186 <_dtoa_r+0x7b6>
 800d17c:	4651      	mov	r1, sl
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 fc1a 	bl	800d9b8 <__pow5mult>
 800d184:	4682      	mov	sl, r0
 800d186:	2101      	movs	r1, #1
 800d188:	4620      	mov	r0, r4
 800d18a:	f000 fb55 	bl	800d838 <__i2b>
 800d18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d190:	2b00      	cmp	r3, #0
 800d192:	4606      	mov	r6, r0
 800d194:	f340 8081 	ble.w	800d29a <_dtoa_r+0x8ca>
 800d198:	461a      	mov	r2, r3
 800d19a:	4601      	mov	r1, r0
 800d19c:	4620      	mov	r0, r4
 800d19e:	f000 fc0b 	bl	800d9b8 <__pow5mult>
 800d1a2:	9b07      	ldr	r3, [sp, #28]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	dd7a      	ble.n	800d2a0 <_dtoa_r+0x8d0>
 800d1aa:	f04f 0800 	mov.w	r8, #0
 800d1ae:	6933      	ldr	r3, [r6, #16]
 800d1b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d1b4:	6918      	ldr	r0, [r3, #16]
 800d1b6:	f000 faf1 	bl	800d79c <__hi0bits>
 800d1ba:	f1c0 0020 	rsb	r0, r0, #32
 800d1be:	9b06      	ldr	r3, [sp, #24]
 800d1c0:	4418      	add	r0, r3
 800d1c2:	f010 001f 	ands.w	r0, r0, #31
 800d1c6:	f000 8094 	beq.w	800d2f2 <_dtoa_r+0x922>
 800d1ca:	f1c0 0320 	rsb	r3, r0, #32
 800d1ce:	2b04      	cmp	r3, #4
 800d1d0:	f340 8085 	ble.w	800d2de <_dtoa_r+0x90e>
 800d1d4:	9b05      	ldr	r3, [sp, #20]
 800d1d6:	f1c0 001c 	rsb	r0, r0, #28
 800d1da:	4403      	add	r3, r0
 800d1dc:	9305      	str	r3, [sp, #20]
 800d1de:	9b06      	ldr	r3, [sp, #24]
 800d1e0:	4403      	add	r3, r0
 800d1e2:	4405      	add	r5, r0
 800d1e4:	9306      	str	r3, [sp, #24]
 800d1e6:	9b05      	ldr	r3, [sp, #20]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dd05      	ble.n	800d1f8 <_dtoa_r+0x828>
 800d1ec:	4651      	mov	r1, sl
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f000 fc3b 	bl	800da6c <__lshift>
 800d1f6:	4682      	mov	sl, r0
 800d1f8:	9b06      	ldr	r3, [sp, #24]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	dd05      	ble.n	800d20a <_dtoa_r+0x83a>
 800d1fe:	4631      	mov	r1, r6
 800d200:	461a      	mov	r2, r3
 800d202:	4620      	mov	r0, r4
 800d204:	f000 fc32 	bl	800da6c <__lshift>
 800d208:	4606      	mov	r6, r0
 800d20a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d072      	beq.n	800d2f6 <_dtoa_r+0x926>
 800d210:	4631      	mov	r1, r6
 800d212:	4650      	mov	r0, sl
 800d214:	f000 fc96 	bl	800db44 <__mcmp>
 800d218:	2800      	cmp	r0, #0
 800d21a:	da6c      	bge.n	800d2f6 <_dtoa_r+0x926>
 800d21c:	2300      	movs	r3, #0
 800d21e:	4651      	mov	r1, sl
 800d220:	220a      	movs	r2, #10
 800d222:	4620      	mov	r0, r4
 800d224:	f000 fa74 	bl	800d710 <__multadd>
 800d228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d22a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d22e:	4682      	mov	sl, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	f000 81b0 	beq.w	800d596 <_dtoa_r+0xbc6>
 800d236:	2300      	movs	r3, #0
 800d238:	4639      	mov	r1, r7
 800d23a:	220a      	movs	r2, #10
 800d23c:	4620      	mov	r0, r4
 800d23e:	f000 fa67 	bl	800d710 <__multadd>
 800d242:	9b01      	ldr	r3, [sp, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	4607      	mov	r7, r0
 800d248:	f300 8096 	bgt.w	800d378 <_dtoa_r+0x9a8>
 800d24c:	9b07      	ldr	r3, [sp, #28]
 800d24e:	2b02      	cmp	r3, #2
 800d250:	dc59      	bgt.n	800d306 <_dtoa_r+0x936>
 800d252:	e091      	b.n	800d378 <_dtoa_r+0x9a8>
 800d254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d25a:	e758      	b.n	800d10e <_dtoa_r+0x73e>
 800d25c:	9b04      	ldr	r3, [sp, #16]
 800d25e:	1e5e      	subs	r6, r3, #1
 800d260:	9b08      	ldr	r3, [sp, #32]
 800d262:	42b3      	cmp	r3, r6
 800d264:	bfbf      	itttt	lt
 800d266:	9b08      	ldrlt	r3, [sp, #32]
 800d268:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d26a:	9608      	strlt	r6, [sp, #32]
 800d26c:	1af3      	sublt	r3, r6, r3
 800d26e:	bfb4      	ite	lt
 800d270:	18d2      	addlt	r2, r2, r3
 800d272:	1b9e      	subge	r6, r3, r6
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	bfbc      	itt	lt
 800d278:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d27a:	2600      	movlt	r6, #0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	bfb7      	itett	lt
 800d280:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d284:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d288:	1a9d      	sublt	r5, r3, r2
 800d28a:	2300      	movlt	r3, #0
 800d28c:	e741      	b.n	800d112 <_dtoa_r+0x742>
 800d28e:	9e08      	ldr	r6, [sp, #32]
 800d290:	9d05      	ldr	r5, [sp, #20]
 800d292:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d294:	e748      	b.n	800d128 <_dtoa_r+0x758>
 800d296:	9a08      	ldr	r2, [sp, #32]
 800d298:	e770      	b.n	800d17c <_dtoa_r+0x7ac>
 800d29a:	9b07      	ldr	r3, [sp, #28]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	dc19      	bgt.n	800d2d4 <_dtoa_r+0x904>
 800d2a0:	9b02      	ldr	r3, [sp, #8]
 800d2a2:	b9bb      	cbnz	r3, 800d2d4 <_dtoa_r+0x904>
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2aa:	b99b      	cbnz	r3, 800d2d4 <_dtoa_r+0x904>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2b2:	0d1b      	lsrs	r3, r3, #20
 800d2b4:	051b      	lsls	r3, r3, #20
 800d2b6:	b183      	cbz	r3, 800d2da <_dtoa_r+0x90a>
 800d2b8:	9b05      	ldr	r3, [sp, #20]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	9305      	str	r3, [sp, #20]
 800d2be:	9b06      	ldr	r3, [sp, #24]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	9306      	str	r3, [sp, #24]
 800d2c4:	f04f 0801 	mov.w	r8, #1
 800d2c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f47f af6f 	bne.w	800d1ae <_dtoa_r+0x7de>
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	e774      	b.n	800d1be <_dtoa_r+0x7ee>
 800d2d4:	f04f 0800 	mov.w	r8, #0
 800d2d8:	e7f6      	b.n	800d2c8 <_dtoa_r+0x8f8>
 800d2da:	4698      	mov	r8, r3
 800d2dc:	e7f4      	b.n	800d2c8 <_dtoa_r+0x8f8>
 800d2de:	d082      	beq.n	800d1e6 <_dtoa_r+0x816>
 800d2e0:	9a05      	ldr	r2, [sp, #20]
 800d2e2:	331c      	adds	r3, #28
 800d2e4:	441a      	add	r2, r3
 800d2e6:	9205      	str	r2, [sp, #20]
 800d2e8:	9a06      	ldr	r2, [sp, #24]
 800d2ea:	441a      	add	r2, r3
 800d2ec:	441d      	add	r5, r3
 800d2ee:	9206      	str	r2, [sp, #24]
 800d2f0:	e779      	b.n	800d1e6 <_dtoa_r+0x816>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	e7f4      	b.n	800d2e0 <_dtoa_r+0x910>
 800d2f6:	9b04      	ldr	r3, [sp, #16]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dc37      	bgt.n	800d36c <_dtoa_r+0x99c>
 800d2fc:	9b07      	ldr	r3, [sp, #28]
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	dd34      	ble.n	800d36c <_dtoa_r+0x99c>
 800d302:	9b04      	ldr	r3, [sp, #16]
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	9b01      	ldr	r3, [sp, #4]
 800d308:	b963      	cbnz	r3, 800d324 <_dtoa_r+0x954>
 800d30a:	4631      	mov	r1, r6
 800d30c:	2205      	movs	r2, #5
 800d30e:	4620      	mov	r0, r4
 800d310:	f000 f9fe 	bl	800d710 <__multadd>
 800d314:	4601      	mov	r1, r0
 800d316:	4606      	mov	r6, r0
 800d318:	4650      	mov	r0, sl
 800d31a:	f000 fc13 	bl	800db44 <__mcmp>
 800d31e:	2800      	cmp	r0, #0
 800d320:	f73f adbb 	bgt.w	800ce9a <_dtoa_r+0x4ca>
 800d324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d326:	9d00      	ldr	r5, [sp, #0]
 800d328:	ea6f 0b03 	mvn.w	fp, r3
 800d32c:	f04f 0800 	mov.w	r8, #0
 800d330:	4631      	mov	r1, r6
 800d332:	4620      	mov	r0, r4
 800d334:	f000 f9ca 	bl	800d6cc <_Bfree>
 800d338:	2f00      	cmp	r7, #0
 800d33a:	f43f aeab 	beq.w	800d094 <_dtoa_r+0x6c4>
 800d33e:	f1b8 0f00 	cmp.w	r8, #0
 800d342:	d005      	beq.n	800d350 <_dtoa_r+0x980>
 800d344:	45b8      	cmp	r8, r7
 800d346:	d003      	beq.n	800d350 <_dtoa_r+0x980>
 800d348:	4641      	mov	r1, r8
 800d34a:	4620      	mov	r0, r4
 800d34c:	f000 f9be 	bl	800d6cc <_Bfree>
 800d350:	4639      	mov	r1, r7
 800d352:	4620      	mov	r0, r4
 800d354:	f000 f9ba 	bl	800d6cc <_Bfree>
 800d358:	e69c      	b.n	800d094 <_dtoa_r+0x6c4>
 800d35a:	2600      	movs	r6, #0
 800d35c:	4637      	mov	r7, r6
 800d35e:	e7e1      	b.n	800d324 <_dtoa_r+0x954>
 800d360:	46bb      	mov	fp, r7
 800d362:	4637      	mov	r7, r6
 800d364:	e599      	b.n	800ce9a <_dtoa_r+0x4ca>
 800d366:	bf00      	nop
 800d368:	40240000 	.word	0x40240000
 800d36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 80c8 	beq.w	800d504 <_dtoa_r+0xb34>
 800d374:	9b04      	ldr	r3, [sp, #16]
 800d376:	9301      	str	r3, [sp, #4]
 800d378:	2d00      	cmp	r5, #0
 800d37a:	dd05      	ble.n	800d388 <_dtoa_r+0x9b8>
 800d37c:	4639      	mov	r1, r7
 800d37e:	462a      	mov	r2, r5
 800d380:	4620      	mov	r0, r4
 800d382:	f000 fb73 	bl	800da6c <__lshift>
 800d386:	4607      	mov	r7, r0
 800d388:	f1b8 0f00 	cmp.w	r8, #0
 800d38c:	d05b      	beq.n	800d446 <_dtoa_r+0xa76>
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	4620      	mov	r0, r4
 800d392:	f000 f95b 	bl	800d64c <_Balloc>
 800d396:	4605      	mov	r5, r0
 800d398:	b928      	cbnz	r0, 800d3a6 <_dtoa_r+0x9d6>
 800d39a:	4b83      	ldr	r3, [pc, #524]	; (800d5a8 <_dtoa_r+0xbd8>)
 800d39c:	4602      	mov	r2, r0
 800d39e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d3a2:	f7ff bb2e 	b.w	800ca02 <_dtoa_r+0x32>
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	3202      	adds	r2, #2
 800d3aa:	0092      	lsls	r2, r2, #2
 800d3ac:	f107 010c 	add.w	r1, r7, #12
 800d3b0:	300c      	adds	r0, #12
 800d3b2:	f7ff fa74 	bl	800c89e <memcpy>
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f000 fb56 	bl	800da6c <__lshift>
 800d3c0:	9b00      	ldr	r3, [sp, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	9308      	str	r3, [sp, #32]
 800d3ce:	9b02      	ldr	r3, [sp, #8]
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	46b8      	mov	r8, r7
 800d3d6:	9306      	str	r3, [sp, #24]
 800d3d8:	4607      	mov	r7, r0
 800d3da:	9b04      	ldr	r3, [sp, #16]
 800d3dc:	4631      	mov	r1, r6
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	f7ff fa69 	bl	800c8ba <quorem>
 800d3e8:	4641      	mov	r1, r8
 800d3ea:	9002      	str	r0, [sp, #8]
 800d3ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d3f0:	4650      	mov	r0, sl
 800d3f2:	f000 fba7 	bl	800db44 <__mcmp>
 800d3f6:	463a      	mov	r2, r7
 800d3f8:	9005      	str	r0, [sp, #20]
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fbbd 	bl	800db7c <__mdiff>
 800d402:	68c2      	ldr	r2, [r0, #12]
 800d404:	4605      	mov	r5, r0
 800d406:	bb02      	cbnz	r2, 800d44a <_dtoa_r+0xa7a>
 800d408:	4601      	mov	r1, r0
 800d40a:	4650      	mov	r0, sl
 800d40c:	f000 fb9a 	bl	800db44 <__mcmp>
 800d410:	4602      	mov	r2, r0
 800d412:	4629      	mov	r1, r5
 800d414:	4620      	mov	r0, r4
 800d416:	9209      	str	r2, [sp, #36]	; 0x24
 800d418:	f000 f958 	bl	800d6cc <_Bfree>
 800d41c:	9b07      	ldr	r3, [sp, #28]
 800d41e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d420:	9d04      	ldr	r5, [sp, #16]
 800d422:	ea43 0102 	orr.w	r1, r3, r2
 800d426:	9b06      	ldr	r3, [sp, #24]
 800d428:	4319      	orrs	r1, r3
 800d42a:	d110      	bne.n	800d44e <_dtoa_r+0xa7e>
 800d42c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d430:	d029      	beq.n	800d486 <_dtoa_r+0xab6>
 800d432:	9b05      	ldr	r3, [sp, #20]
 800d434:	2b00      	cmp	r3, #0
 800d436:	dd02      	ble.n	800d43e <_dtoa_r+0xa6e>
 800d438:	9b02      	ldr	r3, [sp, #8]
 800d43a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	f883 9000 	strb.w	r9, [r3]
 800d444:	e774      	b.n	800d330 <_dtoa_r+0x960>
 800d446:	4638      	mov	r0, r7
 800d448:	e7ba      	b.n	800d3c0 <_dtoa_r+0x9f0>
 800d44a:	2201      	movs	r2, #1
 800d44c:	e7e1      	b.n	800d412 <_dtoa_r+0xa42>
 800d44e:	9b05      	ldr	r3, [sp, #20]
 800d450:	2b00      	cmp	r3, #0
 800d452:	db04      	blt.n	800d45e <_dtoa_r+0xa8e>
 800d454:	9907      	ldr	r1, [sp, #28]
 800d456:	430b      	orrs	r3, r1
 800d458:	9906      	ldr	r1, [sp, #24]
 800d45a:	430b      	orrs	r3, r1
 800d45c:	d120      	bne.n	800d4a0 <_dtoa_r+0xad0>
 800d45e:	2a00      	cmp	r2, #0
 800d460:	dded      	ble.n	800d43e <_dtoa_r+0xa6e>
 800d462:	4651      	mov	r1, sl
 800d464:	2201      	movs	r2, #1
 800d466:	4620      	mov	r0, r4
 800d468:	f000 fb00 	bl	800da6c <__lshift>
 800d46c:	4631      	mov	r1, r6
 800d46e:	4682      	mov	sl, r0
 800d470:	f000 fb68 	bl	800db44 <__mcmp>
 800d474:	2800      	cmp	r0, #0
 800d476:	dc03      	bgt.n	800d480 <_dtoa_r+0xab0>
 800d478:	d1e1      	bne.n	800d43e <_dtoa_r+0xa6e>
 800d47a:	f019 0f01 	tst.w	r9, #1
 800d47e:	d0de      	beq.n	800d43e <_dtoa_r+0xa6e>
 800d480:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d484:	d1d8      	bne.n	800d438 <_dtoa_r+0xa68>
 800d486:	9a01      	ldr	r2, [sp, #4]
 800d488:	2339      	movs	r3, #57	; 0x39
 800d48a:	7013      	strb	r3, [r2, #0]
 800d48c:	462b      	mov	r3, r5
 800d48e:	461d      	mov	r5, r3
 800d490:	3b01      	subs	r3, #1
 800d492:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d496:	2a39      	cmp	r2, #57	; 0x39
 800d498:	d06c      	beq.n	800d574 <_dtoa_r+0xba4>
 800d49a:	3201      	adds	r2, #1
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	e747      	b.n	800d330 <_dtoa_r+0x960>
 800d4a0:	2a00      	cmp	r2, #0
 800d4a2:	dd07      	ble.n	800d4b4 <_dtoa_r+0xae4>
 800d4a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d4a8:	d0ed      	beq.n	800d486 <_dtoa_r+0xab6>
 800d4aa:	9a01      	ldr	r2, [sp, #4]
 800d4ac:	f109 0301 	add.w	r3, r9, #1
 800d4b0:	7013      	strb	r3, [r2, #0]
 800d4b2:	e73d      	b.n	800d330 <_dtoa_r+0x960>
 800d4b4:	9b04      	ldr	r3, [sp, #16]
 800d4b6:	9a08      	ldr	r2, [sp, #32]
 800d4b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d043      	beq.n	800d548 <_dtoa_r+0xb78>
 800d4c0:	4651      	mov	r1, sl
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	220a      	movs	r2, #10
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f000 f922 	bl	800d710 <__multadd>
 800d4cc:	45b8      	cmp	r8, r7
 800d4ce:	4682      	mov	sl, r0
 800d4d0:	f04f 0300 	mov.w	r3, #0
 800d4d4:	f04f 020a 	mov.w	r2, #10
 800d4d8:	4641      	mov	r1, r8
 800d4da:	4620      	mov	r0, r4
 800d4dc:	d107      	bne.n	800d4ee <_dtoa_r+0xb1e>
 800d4de:	f000 f917 	bl	800d710 <__multadd>
 800d4e2:	4680      	mov	r8, r0
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	9b04      	ldr	r3, [sp, #16]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	9304      	str	r3, [sp, #16]
 800d4ec:	e775      	b.n	800d3da <_dtoa_r+0xa0a>
 800d4ee:	f000 f90f 	bl	800d710 <__multadd>
 800d4f2:	4639      	mov	r1, r7
 800d4f4:	4680      	mov	r8, r0
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	220a      	movs	r2, #10
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 f908 	bl	800d710 <__multadd>
 800d500:	4607      	mov	r7, r0
 800d502:	e7f0      	b.n	800d4e6 <_dtoa_r+0xb16>
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	9d00      	ldr	r5, [sp, #0]
 800d50a:	4631      	mov	r1, r6
 800d50c:	4650      	mov	r0, sl
 800d50e:	f7ff f9d4 	bl	800c8ba <quorem>
 800d512:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d516:	9b00      	ldr	r3, [sp, #0]
 800d518:	f805 9b01 	strb.w	r9, [r5], #1
 800d51c:	1aea      	subs	r2, r5, r3
 800d51e:	9b01      	ldr	r3, [sp, #4]
 800d520:	4293      	cmp	r3, r2
 800d522:	dd07      	ble.n	800d534 <_dtoa_r+0xb64>
 800d524:	4651      	mov	r1, sl
 800d526:	2300      	movs	r3, #0
 800d528:	220a      	movs	r2, #10
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 f8f0 	bl	800d710 <__multadd>
 800d530:	4682      	mov	sl, r0
 800d532:	e7ea      	b.n	800d50a <_dtoa_r+0xb3a>
 800d534:	9b01      	ldr	r3, [sp, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfc8      	it	gt
 800d53a:	461d      	movgt	r5, r3
 800d53c:	9b00      	ldr	r3, [sp, #0]
 800d53e:	bfd8      	it	le
 800d540:	2501      	movle	r5, #1
 800d542:	441d      	add	r5, r3
 800d544:	f04f 0800 	mov.w	r8, #0
 800d548:	4651      	mov	r1, sl
 800d54a:	2201      	movs	r2, #1
 800d54c:	4620      	mov	r0, r4
 800d54e:	f000 fa8d 	bl	800da6c <__lshift>
 800d552:	4631      	mov	r1, r6
 800d554:	4682      	mov	sl, r0
 800d556:	f000 faf5 	bl	800db44 <__mcmp>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	dc96      	bgt.n	800d48c <_dtoa_r+0xabc>
 800d55e:	d102      	bne.n	800d566 <_dtoa_r+0xb96>
 800d560:	f019 0f01 	tst.w	r9, #1
 800d564:	d192      	bne.n	800d48c <_dtoa_r+0xabc>
 800d566:	462b      	mov	r3, r5
 800d568:	461d      	mov	r5, r3
 800d56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d56e:	2a30      	cmp	r2, #48	; 0x30
 800d570:	d0fa      	beq.n	800d568 <_dtoa_r+0xb98>
 800d572:	e6dd      	b.n	800d330 <_dtoa_r+0x960>
 800d574:	9a00      	ldr	r2, [sp, #0]
 800d576:	429a      	cmp	r2, r3
 800d578:	d189      	bne.n	800d48e <_dtoa_r+0xabe>
 800d57a:	f10b 0b01 	add.w	fp, fp, #1
 800d57e:	2331      	movs	r3, #49	; 0x31
 800d580:	e796      	b.n	800d4b0 <_dtoa_r+0xae0>
 800d582:	4b0a      	ldr	r3, [pc, #40]	; (800d5ac <_dtoa_r+0xbdc>)
 800d584:	f7ff ba99 	b.w	800caba <_dtoa_r+0xea>
 800d588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f47f aa6d 	bne.w	800ca6a <_dtoa_r+0x9a>
 800d590:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <_dtoa_r+0xbe0>)
 800d592:	f7ff ba92 	b.w	800caba <_dtoa_r+0xea>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	dcb5      	bgt.n	800d508 <_dtoa_r+0xb38>
 800d59c:	9b07      	ldr	r3, [sp, #28]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	f73f aeb1 	bgt.w	800d306 <_dtoa_r+0x936>
 800d5a4:	e7b0      	b.n	800d508 <_dtoa_r+0xb38>
 800d5a6:	bf00      	nop
 800d5a8:	08010874 	.word	0x08010874
 800d5ac:	080107d4 	.word	0x080107d4
 800d5b0:	080107f8 	.word	0x080107f8

0800d5b4 <_free_r>:
 800d5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5b6:	2900      	cmp	r1, #0
 800d5b8:	d044      	beq.n	800d644 <_free_r+0x90>
 800d5ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5be:	9001      	str	r0, [sp, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f1a1 0404 	sub.w	r4, r1, #4
 800d5c6:	bfb8      	it	lt
 800d5c8:	18e4      	addlt	r4, r4, r3
 800d5ca:	f7fe fb4f 	bl	800bc6c <__malloc_lock>
 800d5ce:	4a1e      	ldr	r2, [pc, #120]	; (800d648 <_free_r+0x94>)
 800d5d0:	9801      	ldr	r0, [sp, #4]
 800d5d2:	6813      	ldr	r3, [r2, #0]
 800d5d4:	b933      	cbnz	r3, 800d5e4 <_free_r+0x30>
 800d5d6:	6063      	str	r3, [r4, #4]
 800d5d8:	6014      	str	r4, [r2, #0]
 800d5da:	b003      	add	sp, #12
 800d5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5e0:	f7fe bb4a 	b.w	800bc78 <__malloc_unlock>
 800d5e4:	42a3      	cmp	r3, r4
 800d5e6:	d908      	bls.n	800d5fa <_free_r+0x46>
 800d5e8:	6825      	ldr	r5, [r4, #0]
 800d5ea:	1961      	adds	r1, r4, r5
 800d5ec:	428b      	cmp	r3, r1
 800d5ee:	bf01      	itttt	eq
 800d5f0:	6819      	ldreq	r1, [r3, #0]
 800d5f2:	685b      	ldreq	r3, [r3, #4]
 800d5f4:	1949      	addeq	r1, r1, r5
 800d5f6:	6021      	streq	r1, [r4, #0]
 800d5f8:	e7ed      	b.n	800d5d6 <_free_r+0x22>
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	b10b      	cbz	r3, 800d604 <_free_r+0x50>
 800d600:	42a3      	cmp	r3, r4
 800d602:	d9fa      	bls.n	800d5fa <_free_r+0x46>
 800d604:	6811      	ldr	r1, [r2, #0]
 800d606:	1855      	adds	r5, r2, r1
 800d608:	42a5      	cmp	r5, r4
 800d60a:	d10b      	bne.n	800d624 <_free_r+0x70>
 800d60c:	6824      	ldr	r4, [r4, #0]
 800d60e:	4421      	add	r1, r4
 800d610:	1854      	adds	r4, r2, r1
 800d612:	42a3      	cmp	r3, r4
 800d614:	6011      	str	r1, [r2, #0]
 800d616:	d1e0      	bne.n	800d5da <_free_r+0x26>
 800d618:	681c      	ldr	r4, [r3, #0]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	6053      	str	r3, [r2, #4]
 800d61e:	440c      	add	r4, r1
 800d620:	6014      	str	r4, [r2, #0]
 800d622:	e7da      	b.n	800d5da <_free_r+0x26>
 800d624:	d902      	bls.n	800d62c <_free_r+0x78>
 800d626:	230c      	movs	r3, #12
 800d628:	6003      	str	r3, [r0, #0]
 800d62a:	e7d6      	b.n	800d5da <_free_r+0x26>
 800d62c:	6825      	ldr	r5, [r4, #0]
 800d62e:	1961      	adds	r1, r4, r5
 800d630:	428b      	cmp	r3, r1
 800d632:	bf04      	itt	eq
 800d634:	6819      	ldreq	r1, [r3, #0]
 800d636:	685b      	ldreq	r3, [r3, #4]
 800d638:	6063      	str	r3, [r4, #4]
 800d63a:	bf04      	itt	eq
 800d63c:	1949      	addeq	r1, r1, r5
 800d63e:	6021      	streq	r1, [r4, #0]
 800d640:	6054      	str	r4, [r2, #4]
 800d642:	e7ca      	b.n	800d5da <_free_r+0x26>
 800d644:	b003      	add	sp, #12
 800d646:	bd30      	pop	{r4, r5, pc}
 800d648:	2001338c 	.word	0x2001338c

0800d64c <_Balloc>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	69c6      	ldr	r6, [r0, #28]
 800d650:	4604      	mov	r4, r0
 800d652:	460d      	mov	r5, r1
 800d654:	b976      	cbnz	r6, 800d674 <_Balloc+0x28>
 800d656:	2010      	movs	r0, #16
 800d658:	f7f5 fa34 	bl	8002ac4 <__wrap_malloc>
 800d65c:	4602      	mov	r2, r0
 800d65e:	61e0      	str	r0, [r4, #28]
 800d660:	b920      	cbnz	r0, 800d66c <_Balloc+0x20>
 800d662:	4b18      	ldr	r3, [pc, #96]	; (800d6c4 <_Balloc+0x78>)
 800d664:	4818      	ldr	r0, [pc, #96]	; (800d6c8 <_Balloc+0x7c>)
 800d666:	216b      	movs	r1, #107	; 0x6b
 800d668:	f000 fc1a 	bl	800dea0 <__assert_func>
 800d66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d670:	6006      	str	r6, [r0, #0]
 800d672:	60c6      	str	r6, [r0, #12]
 800d674:	69e6      	ldr	r6, [r4, #28]
 800d676:	68f3      	ldr	r3, [r6, #12]
 800d678:	b183      	cbz	r3, 800d69c <_Balloc+0x50>
 800d67a:	69e3      	ldr	r3, [r4, #28]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d682:	b9b8      	cbnz	r0, 800d6b4 <_Balloc+0x68>
 800d684:	2101      	movs	r1, #1
 800d686:	fa01 f605 	lsl.w	r6, r1, r5
 800d68a:	1d72      	adds	r2, r6, #5
 800d68c:	0092      	lsls	r2, r2, #2
 800d68e:	4620      	mov	r0, r4
 800d690:	f000 fc24 	bl	800dedc <_calloc_r>
 800d694:	b160      	cbz	r0, 800d6b0 <_Balloc+0x64>
 800d696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d69a:	e00e      	b.n	800d6ba <_Balloc+0x6e>
 800d69c:	2221      	movs	r2, #33	; 0x21
 800d69e:	2104      	movs	r1, #4
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 fc1b 	bl	800dedc <_calloc_r>
 800d6a6:	69e3      	ldr	r3, [r4, #28]
 800d6a8:	60f0      	str	r0, [r6, #12]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e4      	bne.n	800d67a <_Balloc+0x2e>
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	6802      	ldr	r2, [r0, #0]
 800d6b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6c0:	e7f7      	b.n	800d6b2 <_Balloc+0x66>
 800d6c2:	bf00      	nop
 800d6c4:	08010805 	.word	0x08010805
 800d6c8:	08010885 	.word	0x08010885

0800d6cc <_Bfree>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	69c6      	ldr	r6, [r0, #28]
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	b976      	cbnz	r6, 800d6f4 <_Bfree+0x28>
 800d6d6:	2010      	movs	r0, #16
 800d6d8:	f7f5 f9f4 	bl	8002ac4 <__wrap_malloc>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	61e8      	str	r0, [r5, #28]
 800d6e0:	b920      	cbnz	r0, 800d6ec <_Bfree+0x20>
 800d6e2:	4b09      	ldr	r3, [pc, #36]	; (800d708 <_Bfree+0x3c>)
 800d6e4:	4809      	ldr	r0, [pc, #36]	; (800d70c <_Bfree+0x40>)
 800d6e6:	218f      	movs	r1, #143	; 0x8f
 800d6e8:	f000 fbda 	bl	800dea0 <__assert_func>
 800d6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6f0:	6006      	str	r6, [r0, #0]
 800d6f2:	60c6      	str	r6, [r0, #12]
 800d6f4:	b13c      	cbz	r4, 800d706 <_Bfree+0x3a>
 800d6f6:	69eb      	ldr	r3, [r5, #28]
 800d6f8:	6862      	ldr	r2, [r4, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d700:	6021      	str	r1, [r4, #0]
 800d702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	08010805 	.word	0x08010805
 800d70c:	08010885 	.word	0x08010885

0800d710 <__multadd>:
 800d710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d714:	690d      	ldr	r5, [r1, #16]
 800d716:	4607      	mov	r7, r0
 800d718:	460c      	mov	r4, r1
 800d71a:	461e      	mov	r6, r3
 800d71c:	f101 0c14 	add.w	ip, r1, #20
 800d720:	2000      	movs	r0, #0
 800d722:	f8dc 3000 	ldr.w	r3, [ip]
 800d726:	b299      	uxth	r1, r3
 800d728:	fb02 6101 	mla	r1, r2, r1, r6
 800d72c:	0c1e      	lsrs	r6, r3, #16
 800d72e:	0c0b      	lsrs	r3, r1, #16
 800d730:	fb02 3306 	mla	r3, r2, r6, r3
 800d734:	b289      	uxth	r1, r1
 800d736:	3001      	adds	r0, #1
 800d738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d73c:	4285      	cmp	r5, r0
 800d73e:	f84c 1b04 	str.w	r1, [ip], #4
 800d742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d746:	dcec      	bgt.n	800d722 <__multadd+0x12>
 800d748:	b30e      	cbz	r6, 800d78e <__multadd+0x7e>
 800d74a:	68a3      	ldr	r3, [r4, #8]
 800d74c:	42ab      	cmp	r3, r5
 800d74e:	dc19      	bgt.n	800d784 <__multadd+0x74>
 800d750:	6861      	ldr	r1, [r4, #4]
 800d752:	4638      	mov	r0, r7
 800d754:	3101      	adds	r1, #1
 800d756:	f7ff ff79 	bl	800d64c <_Balloc>
 800d75a:	4680      	mov	r8, r0
 800d75c:	b928      	cbnz	r0, 800d76a <__multadd+0x5a>
 800d75e:	4602      	mov	r2, r0
 800d760:	4b0c      	ldr	r3, [pc, #48]	; (800d794 <__multadd+0x84>)
 800d762:	480d      	ldr	r0, [pc, #52]	; (800d798 <__multadd+0x88>)
 800d764:	21ba      	movs	r1, #186	; 0xba
 800d766:	f000 fb9b 	bl	800dea0 <__assert_func>
 800d76a:	6922      	ldr	r2, [r4, #16]
 800d76c:	3202      	adds	r2, #2
 800d76e:	f104 010c 	add.w	r1, r4, #12
 800d772:	0092      	lsls	r2, r2, #2
 800d774:	300c      	adds	r0, #12
 800d776:	f7ff f892 	bl	800c89e <memcpy>
 800d77a:	4621      	mov	r1, r4
 800d77c:	4638      	mov	r0, r7
 800d77e:	f7ff ffa5 	bl	800d6cc <_Bfree>
 800d782:	4644      	mov	r4, r8
 800d784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d788:	3501      	adds	r5, #1
 800d78a:	615e      	str	r6, [r3, #20]
 800d78c:	6125      	str	r5, [r4, #16]
 800d78e:	4620      	mov	r0, r4
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d794:	08010874 	.word	0x08010874
 800d798:	08010885 	.word	0x08010885

0800d79c <__hi0bits>:
 800d79c:	0c03      	lsrs	r3, r0, #16
 800d79e:	041b      	lsls	r3, r3, #16
 800d7a0:	b9d3      	cbnz	r3, 800d7d8 <__hi0bits+0x3c>
 800d7a2:	0400      	lsls	r0, r0, #16
 800d7a4:	2310      	movs	r3, #16
 800d7a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7aa:	bf04      	itt	eq
 800d7ac:	0200      	lsleq	r0, r0, #8
 800d7ae:	3308      	addeq	r3, #8
 800d7b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7b4:	bf04      	itt	eq
 800d7b6:	0100      	lsleq	r0, r0, #4
 800d7b8:	3304      	addeq	r3, #4
 800d7ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7be:	bf04      	itt	eq
 800d7c0:	0080      	lsleq	r0, r0, #2
 800d7c2:	3302      	addeq	r3, #2
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	db05      	blt.n	800d7d4 <__hi0bits+0x38>
 800d7c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7cc:	f103 0301 	add.w	r3, r3, #1
 800d7d0:	bf08      	it	eq
 800d7d2:	2320      	moveq	r3, #32
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	4770      	bx	lr
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e7e4      	b.n	800d7a6 <__hi0bits+0xa>

0800d7dc <__lo0bits>:
 800d7dc:	6803      	ldr	r3, [r0, #0]
 800d7de:	f013 0207 	ands.w	r2, r3, #7
 800d7e2:	d00c      	beq.n	800d7fe <__lo0bits+0x22>
 800d7e4:	07d9      	lsls	r1, r3, #31
 800d7e6:	d422      	bmi.n	800d82e <__lo0bits+0x52>
 800d7e8:	079a      	lsls	r2, r3, #30
 800d7ea:	bf49      	itett	mi
 800d7ec:	085b      	lsrmi	r3, r3, #1
 800d7ee:	089b      	lsrpl	r3, r3, #2
 800d7f0:	6003      	strmi	r3, [r0, #0]
 800d7f2:	2201      	movmi	r2, #1
 800d7f4:	bf5c      	itt	pl
 800d7f6:	6003      	strpl	r3, [r0, #0]
 800d7f8:	2202      	movpl	r2, #2
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	4770      	bx	lr
 800d7fe:	b299      	uxth	r1, r3
 800d800:	b909      	cbnz	r1, 800d806 <__lo0bits+0x2a>
 800d802:	0c1b      	lsrs	r3, r3, #16
 800d804:	2210      	movs	r2, #16
 800d806:	b2d9      	uxtb	r1, r3
 800d808:	b909      	cbnz	r1, 800d80e <__lo0bits+0x32>
 800d80a:	3208      	adds	r2, #8
 800d80c:	0a1b      	lsrs	r3, r3, #8
 800d80e:	0719      	lsls	r1, r3, #28
 800d810:	bf04      	itt	eq
 800d812:	091b      	lsreq	r3, r3, #4
 800d814:	3204      	addeq	r2, #4
 800d816:	0799      	lsls	r1, r3, #30
 800d818:	bf04      	itt	eq
 800d81a:	089b      	lsreq	r3, r3, #2
 800d81c:	3202      	addeq	r2, #2
 800d81e:	07d9      	lsls	r1, r3, #31
 800d820:	d403      	bmi.n	800d82a <__lo0bits+0x4e>
 800d822:	085b      	lsrs	r3, r3, #1
 800d824:	f102 0201 	add.w	r2, r2, #1
 800d828:	d003      	beq.n	800d832 <__lo0bits+0x56>
 800d82a:	6003      	str	r3, [r0, #0]
 800d82c:	e7e5      	b.n	800d7fa <__lo0bits+0x1e>
 800d82e:	2200      	movs	r2, #0
 800d830:	e7e3      	b.n	800d7fa <__lo0bits+0x1e>
 800d832:	2220      	movs	r2, #32
 800d834:	e7e1      	b.n	800d7fa <__lo0bits+0x1e>
	...

0800d838 <__i2b>:
 800d838:	b510      	push	{r4, lr}
 800d83a:	460c      	mov	r4, r1
 800d83c:	2101      	movs	r1, #1
 800d83e:	f7ff ff05 	bl	800d64c <_Balloc>
 800d842:	4602      	mov	r2, r0
 800d844:	b928      	cbnz	r0, 800d852 <__i2b+0x1a>
 800d846:	4b05      	ldr	r3, [pc, #20]	; (800d85c <__i2b+0x24>)
 800d848:	4805      	ldr	r0, [pc, #20]	; (800d860 <__i2b+0x28>)
 800d84a:	f240 1145 	movw	r1, #325	; 0x145
 800d84e:	f000 fb27 	bl	800dea0 <__assert_func>
 800d852:	2301      	movs	r3, #1
 800d854:	6144      	str	r4, [r0, #20]
 800d856:	6103      	str	r3, [r0, #16]
 800d858:	bd10      	pop	{r4, pc}
 800d85a:	bf00      	nop
 800d85c:	08010874 	.word	0x08010874
 800d860:	08010885 	.word	0x08010885

0800d864 <__multiply>:
 800d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	4691      	mov	r9, r2
 800d86a:	690a      	ldr	r2, [r1, #16]
 800d86c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d870:	429a      	cmp	r2, r3
 800d872:	bfb8      	it	lt
 800d874:	460b      	movlt	r3, r1
 800d876:	460c      	mov	r4, r1
 800d878:	bfbc      	itt	lt
 800d87a:	464c      	movlt	r4, r9
 800d87c:	4699      	movlt	r9, r3
 800d87e:	6927      	ldr	r7, [r4, #16]
 800d880:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d884:	68a3      	ldr	r3, [r4, #8]
 800d886:	6861      	ldr	r1, [r4, #4]
 800d888:	eb07 060a 	add.w	r6, r7, sl
 800d88c:	42b3      	cmp	r3, r6
 800d88e:	b085      	sub	sp, #20
 800d890:	bfb8      	it	lt
 800d892:	3101      	addlt	r1, #1
 800d894:	f7ff feda 	bl	800d64c <_Balloc>
 800d898:	b930      	cbnz	r0, 800d8a8 <__multiply+0x44>
 800d89a:	4602      	mov	r2, r0
 800d89c:	4b44      	ldr	r3, [pc, #272]	; (800d9b0 <__multiply+0x14c>)
 800d89e:	4845      	ldr	r0, [pc, #276]	; (800d9b4 <__multiply+0x150>)
 800d8a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d8a4:	f000 fafc 	bl	800dea0 <__assert_func>
 800d8a8:	f100 0514 	add.w	r5, r0, #20
 800d8ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8b0:	462b      	mov	r3, r5
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	4543      	cmp	r3, r8
 800d8b6:	d321      	bcc.n	800d8fc <__multiply+0x98>
 800d8b8:	f104 0314 	add.w	r3, r4, #20
 800d8bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d8c0:	f109 0314 	add.w	r3, r9, #20
 800d8c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d8c8:	9202      	str	r2, [sp, #8]
 800d8ca:	1b3a      	subs	r2, r7, r4
 800d8cc:	3a15      	subs	r2, #21
 800d8ce:	f022 0203 	bic.w	r2, r2, #3
 800d8d2:	3204      	adds	r2, #4
 800d8d4:	f104 0115 	add.w	r1, r4, #21
 800d8d8:	428f      	cmp	r7, r1
 800d8da:	bf38      	it	cc
 800d8dc:	2204      	movcc	r2, #4
 800d8de:	9201      	str	r2, [sp, #4]
 800d8e0:	9a02      	ldr	r2, [sp, #8]
 800d8e2:	9303      	str	r3, [sp, #12]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d80c      	bhi.n	800d902 <__multiply+0x9e>
 800d8e8:	2e00      	cmp	r6, #0
 800d8ea:	dd03      	ble.n	800d8f4 <__multiply+0x90>
 800d8ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d05b      	beq.n	800d9ac <__multiply+0x148>
 800d8f4:	6106      	str	r6, [r0, #16]
 800d8f6:	b005      	add	sp, #20
 800d8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fc:	f843 2b04 	str.w	r2, [r3], #4
 800d900:	e7d8      	b.n	800d8b4 <__multiply+0x50>
 800d902:	f8b3 a000 	ldrh.w	sl, [r3]
 800d906:	f1ba 0f00 	cmp.w	sl, #0
 800d90a:	d024      	beq.n	800d956 <__multiply+0xf2>
 800d90c:	f104 0e14 	add.w	lr, r4, #20
 800d910:	46a9      	mov	r9, r5
 800d912:	f04f 0c00 	mov.w	ip, #0
 800d916:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d91a:	f8d9 1000 	ldr.w	r1, [r9]
 800d91e:	fa1f fb82 	uxth.w	fp, r2
 800d922:	b289      	uxth	r1, r1
 800d924:	fb0a 110b 	mla	r1, sl, fp, r1
 800d928:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d92c:	f8d9 2000 	ldr.w	r2, [r9]
 800d930:	4461      	add	r1, ip
 800d932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d936:	fb0a c20b 	mla	r2, sl, fp, ip
 800d93a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d93e:	b289      	uxth	r1, r1
 800d940:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d944:	4577      	cmp	r7, lr
 800d946:	f849 1b04 	str.w	r1, [r9], #4
 800d94a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d94e:	d8e2      	bhi.n	800d916 <__multiply+0xb2>
 800d950:	9a01      	ldr	r2, [sp, #4]
 800d952:	f845 c002 	str.w	ip, [r5, r2]
 800d956:	9a03      	ldr	r2, [sp, #12]
 800d958:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d95c:	3304      	adds	r3, #4
 800d95e:	f1b9 0f00 	cmp.w	r9, #0
 800d962:	d021      	beq.n	800d9a8 <__multiply+0x144>
 800d964:	6829      	ldr	r1, [r5, #0]
 800d966:	f104 0c14 	add.w	ip, r4, #20
 800d96a:	46ae      	mov	lr, r5
 800d96c:	f04f 0a00 	mov.w	sl, #0
 800d970:	f8bc b000 	ldrh.w	fp, [ip]
 800d974:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d978:	fb09 220b 	mla	r2, r9, fp, r2
 800d97c:	4452      	add	r2, sl
 800d97e:	b289      	uxth	r1, r1
 800d980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d984:	f84e 1b04 	str.w	r1, [lr], #4
 800d988:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d98c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d990:	f8be 1000 	ldrh.w	r1, [lr]
 800d994:	fb09 110a 	mla	r1, r9, sl, r1
 800d998:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d99c:	4567      	cmp	r7, ip
 800d99e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9a2:	d8e5      	bhi.n	800d970 <__multiply+0x10c>
 800d9a4:	9a01      	ldr	r2, [sp, #4]
 800d9a6:	50a9      	str	r1, [r5, r2]
 800d9a8:	3504      	adds	r5, #4
 800d9aa:	e799      	b.n	800d8e0 <__multiply+0x7c>
 800d9ac:	3e01      	subs	r6, #1
 800d9ae:	e79b      	b.n	800d8e8 <__multiply+0x84>
 800d9b0:	08010874 	.word	0x08010874
 800d9b4:	08010885 	.word	0x08010885

0800d9b8 <__pow5mult>:
 800d9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9bc:	4615      	mov	r5, r2
 800d9be:	f012 0203 	ands.w	r2, r2, #3
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	460f      	mov	r7, r1
 800d9c6:	d007      	beq.n	800d9d8 <__pow5mult+0x20>
 800d9c8:	4c25      	ldr	r4, [pc, #148]	; (800da60 <__pow5mult+0xa8>)
 800d9ca:	3a01      	subs	r2, #1
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9d2:	f7ff fe9d 	bl	800d710 <__multadd>
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	10ad      	asrs	r5, r5, #2
 800d9da:	d03d      	beq.n	800da58 <__pow5mult+0xa0>
 800d9dc:	69f4      	ldr	r4, [r6, #28]
 800d9de:	b97c      	cbnz	r4, 800da00 <__pow5mult+0x48>
 800d9e0:	2010      	movs	r0, #16
 800d9e2:	f7f5 f86f 	bl	8002ac4 <__wrap_malloc>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	61f0      	str	r0, [r6, #28]
 800d9ea:	b928      	cbnz	r0, 800d9f8 <__pow5mult+0x40>
 800d9ec:	4b1d      	ldr	r3, [pc, #116]	; (800da64 <__pow5mult+0xac>)
 800d9ee:	481e      	ldr	r0, [pc, #120]	; (800da68 <__pow5mult+0xb0>)
 800d9f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d9f4:	f000 fa54 	bl	800dea0 <__assert_func>
 800d9f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9fc:	6004      	str	r4, [r0, #0]
 800d9fe:	60c4      	str	r4, [r0, #12]
 800da00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800da04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da08:	b94c      	cbnz	r4, 800da1e <__pow5mult+0x66>
 800da0a:	f240 2171 	movw	r1, #625	; 0x271
 800da0e:	4630      	mov	r0, r6
 800da10:	f7ff ff12 	bl	800d838 <__i2b>
 800da14:	2300      	movs	r3, #0
 800da16:	f8c8 0008 	str.w	r0, [r8, #8]
 800da1a:	4604      	mov	r4, r0
 800da1c:	6003      	str	r3, [r0, #0]
 800da1e:	f04f 0900 	mov.w	r9, #0
 800da22:	07eb      	lsls	r3, r5, #31
 800da24:	d50a      	bpl.n	800da3c <__pow5mult+0x84>
 800da26:	4639      	mov	r1, r7
 800da28:	4622      	mov	r2, r4
 800da2a:	4630      	mov	r0, r6
 800da2c:	f7ff ff1a 	bl	800d864 <__multiply>
 800da30:	4639      	mov	r1, r7
 800da32:	4680      	mov	r8, r0
 800da34:	4630      	mov	r0, r6
 800da36:	f7ff fe49 	bl	800d6cc <_Bfree>
 800da3a:	4647      	mov	r7, r8
 800da3c:	106d      	asrs	r5, r5, #1
 800da3e:	d00b      	beq.n	800da58 <__pow5mult+0xa0>
 800da40:	6820      	ldr	r0, [r4, #0]
 800da42:	b938      	cbnz	r0, 800da54 <__pow5mult+0x9c>
 800da44:	4622      	mov	r2, r4
 800da46:	4621      	mov	r1, r4
 800da48:	4630      	mov	r0, r6
 800da4a:	f7ff ff0b 	bl	800d864 <__multiply>
 800da4e:	6020      	str	r0, [r4, #0]
 800da50:	f8c0 9000 	str.w	r9, [r0]
 800da54:	4604      	mov	r4, r0
 800da56:	e7e4      	b.n	800da22 <__pow5mult+0x6a>
 800da58:	4638      	mov	r0, r7
 800da5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da5e:	bf00      	nop
 800da60:	080109d0 	.word	0x080109d0
 800da64:	08010805 	.word	0x08010805
 800da68:	08010885 	.word	0x08010885

0800da6c <__lshift>:
 800da6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da70:	460c      	mov	r4, r1
 800da72:	6849      	ldr	r1, [r1, #4]
 800da74:	6923      	ldr	r3, [r4, #16]
 800da76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	4607      	mov	r7, r0
 800da7e:	4691      	mov	r9, r2
 800da80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da84:	f108 0601 	add.w	r6, r8, #1
 800da88:	42b3      	cmp	r3, r6
 800da8a:	db0b      	blt.n	800daa4 <__lshift+0x38>
 800da8c:	4638      	mov	r0, r7
 800da8e:	f7ff fddd 	bl	800d64c <_Balloc>
 800da92:	4605      	mov	r5, r0
 800da94:	b948      	cbnz	r0, 800daaa <__lshift+0x3e>
 800da96:	4602      	mov	r2, r0
 800da98:	4b28      	ldr	r3, [pc, #160]	; (800db3c <__lshift+0xd0>)
 800da9a:	4829      	ldr	r0, [pc, #164]	; (800db40 <__lshift+0xd4>)
 800da9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800daa0:	f000 f9fe 	bl	800dea0 <__assert_func>
 800daa4:	3101      	adds	r1, #1
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	e7ee      	b.n	800da88 <__lshift+0x1c>
 800daaa:	2300      	movs	r3, #0
 800daac:	f100 0114 	add.w	r1, r0, #20
 800dab0:	f100 0210 	add.w	r2, r0, #16
 800dab4:	4618      	mov	r0, r3
 800dab6:	4553      	cmp	r3, sl
 800dab8:	db33      	blt.n	800db22 <__lshift+0xb6>
 800daba:	6920      	ldr	r0, [r4, #16]
 800dabc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dac0:	f104 0314 	add.w	r3, r4, #20
 800dac4:	f019 091f 	ands.w	r9, r9, #31
 800dac8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dacc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dad0:	d02b      	beq.n	800db2a <__lshift+0xbe>
 800dad2:	f1c9 0e20 	rsb	lr, r9, #32
 800dad6:	468a      	mov	sl, r1
 800dad8:	2200      	movs	r2, #0
 800dada:	6818      	ldr	r0, [r3, #0]
 800dadc:	fa00 f009 	lsl.w	r0, r0, r9
 800dae0:	4310      	orrs	r0, r2
 800dae2:	f84a 0b04 	str.w	r0, [sl], #4
 800dae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800daea:	459c      	cmp	ip, r3
 800daec:	fa22 f20e 	lsr.w	r2, r2, lr
 800daf0:	d8f3      	bhi.n	800dada <__lshift+0x6e>
 800daf2:	ebac 0304 	sub.w	r3, ip, r4
 800daf6:	3b15      	subs	r3, #21
 800daf8:	f023 0303 	bic.w	r3, r3, #3
 800dafc:	3304      	adds	r3, #4
 800dafe:	f104 0015 	add.w	r0, r4, #21
 800db02:	4584      	cmp	ip, r0
 800db04:	bf38      	it	cc
 800db06:	2304      	movcc	r3, #4
 800db08:	50ca      	str	r2, [r1, r3]
 800db0a:	b10a      	cbz	r2, 800db10 <__lshift+0xa4>
 800db0c:	f108 0602 	add.w	r6, r8, #2
 800db10:	3e01      	subs	r6, #1
 800db12:	4638      	mov	r0, r7
 800db14:	612e      	str	r6, [r5, #16]
 800db16:	4621      	mov	r1, r4
 800db18:	f7ff fdd8 	bl	800d6cc <_Bfree>
 800db1c:	4628      	mov	r0, r5
 800db1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db22:	f842 0f04 	str.w	r0, [r2, #4]!
 800db26:	3301      	adds	r3, #1
 800db28:	e7c5      	b.n	800dab6 <__lshift+0x4a>
 800db2a:	3904      	subs	r1, #4
 800db2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db30:	f841 2f04 	str.w	r2, [r1, #4]!
 800db34:	459c      	cmp	ip, r3
 800db36:	d8f9      	bhi.n	800db2c <__lshift+0xc0>
 800db38:	e7ea      	b.n	800db10 <__lshift+0xa4>
 800db3a:	bf00      	nop
 800db3c:	08010874 	.word	0x08010874
 800db40:	08010885 	.word	0x08010885

0800db44 <__mcmp>:
 800db44:	b530      	push	{r4, r5, lr}
 800db46:	6902      	ldr	r2, [r0, #16]
 800db48:	690c      	ldr	r4, [r1, #16]
 800db4a:	1b12      	subs	r2, r2, r4
 800db4c:	d10e      	bne.n	800db6c <__mcmp+0x28>
 800db4e:	f100 0314 	add.w	r3, r0, #20
 800db52:	3114      	adds	r1, #20
 800db54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db64:	42a5      	cmp	r5, r4
 800db66:	d003      	beq.n	800db70 <__mcmp+0x2c>
 800db68:	d305      	bcc.n	800db76 <__mcmp+0x32>
 800db6a:	2201      	movs	r2, #1
 800db6c:	4610      	mov	r0, r2
 800db6e:	bd30      	pop	{r4, r5, pc}
 800db70:	4283      	cmp	r3, r0
 800db72:	d3f3      	bcc.n	800db5c <__mcmp+0x18>
 800db74:	e7fa      	b.n	800db6c <__mcmp+0x28>
 800db76:	f04f 32ff 	mov.w	r2, #4294967295
 800db7a:	e7f7      	b.n	800db6c <__mcmp+0x28>

0800db7c <__mdiff>:
 800db7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db80:	460c      	mov	r4, r1
 800db82:	4606      	mov	r6, r0
 800db84:	4611      	mov	r1, r2
 800db86:	4620      	mov	r0, r4
 800db88:	4690      	mov	r8, r2
 800db8a:	f7ff ffdb 	bl	800db44 <__mcmp>
 800db8e:	1e05      	subs	r5, r0, #0
 800db90:	d110      	bne.n	800dbb4 <__mdiff+0x38>
 800db92:	4629      	mov	r1, r5
 800db94:	4630      	mov	r0, r6
 800db96:	f7ff fd59 	bl	800d64c <_Balloc>
 800db9a:	b930      	cbnz	r0, 800dbaa <__mdiff+0x2e>
 800db9c:	4b3a      	ldr	r3, [pc, #232]	; (800dc88 <__mdiff+0x10c>)
 800db9e:	4602      	mov	r2, r0
 800dba0:	f240 2137 	movw	r1, #567	; 0x237
 800dba4:	4839      	ldr	r0, [pc, #228]	; (800dc8c <__mdiff+0x110>)
 800dba6:	f000 f97b 	bl	800dea0 <__assert_func>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb4:	bfa4      	itt	ge
 800dbb6:	4643      	movge	r3, r8
 800dbb8:	46a0      	movge	r8, r4
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbc0:	bfa6      	itte	ge
 800dbc2:	461c      	movge	r4, r3
 800dbc4:	2500      	movge	r5, #0
 800dbc6:	2501      	movlt	r5, #1
 800dbc8:	f7ff fd40 	bl	800d64c <_Balloc>
 800dbcc:	b920      	cbnz	r0, 800dbd8 <__mdiff+0x5c>
 800dbce:	4b2e      	ldr	r3, [pc, #184]	; (800dc88 <__mdiff+0x10c>)
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	f240 2145 	movw	r1, #581	; 0x245
 800dbd6:	e7e5      	b.n	800dba4 <__mdiff+0x28>
 800dbd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbdc:	6926      	ldr	r6, [r4, #16]
 800dbde:	60c5      	str	r5, [r0, #12]
 800dbe0:	f104 0914 	add.w	r9, r4, #20
 800dbe4:	f108 0514 	add.w	r5, r8, #20
 800dbe8:	f100 0e14 	add.w	lr, r0, #20
 800dbec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbf4:	f108 0210 	add.w	r2, r8, #16
 800dbf8:	46f2      	mov	sl, lr
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc04:	fa11 f88b 	uxtah	r8, r1, fp
 800dc08:	b299      	uxth	r1, r3
 800dc0a:	0c1b      	lsrs	r3, r3, #16
 800dc0c:	eba8 0801 	sub.w	r8, r8, r1
 800dc10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc18:	fa1f f888 	uxth.w	r8, r8
 800dc1c:	1419      	asrs	r1, r3, #16
 800dc1e:	454e      	cmp	r6, r9
 800dc20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc24:	f84a 3b04 	str.w	r3, [sl], #4
 800dc28:	d8e8      	bhi.n	800dbfc <__mdiff+0x80>
 800dc2a:	1b33      	subs	r3, r6, r4
 800dc2c:	3b15      	subs	r3, #21
 800dc2e:	f023 0303 	bic.w	r3, r3, #3
 800dc32:	3304      	adds	r3, #4
 800dc34:	3415      	adds	r4, #21
 800dc36:	42a6      	cmp	r6, r4
 800dc38:	bf38      	it	cc
 800dc3a:	2304      	movcc	r3, #4
 800dc3c:	441d      	add	r5, r3
 800dc3e:	4473      	add	r3, lr
 800dc40:	469e      	mov	lr, r3
 800dc42:	462e      	mov	r6, r5
 800dc44:	4566      	cmp	r6, ip
 800dc46:	d30e      	bcc.n	800dc66 <__mdiff+0xea>
 800dc48:	f10c 0203 	add.w	r2, ip, #3
 800dc4c:	1b52      	subs	r2, r2, r5
 800dc4e:	f022 0203 	bic.w	r2, r2, #3
 800dc52:	3d03      	subs	r5, #3
 800dc54:	45ac      	cmp	ip, r5
 800dc56:	bf38      	it	cc
 800dc58:	2200      	movcc	r2, #0
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dc60:	b17a      	cbz	r2, 800dc82 <__mdiff+0x106>
 800dc62:	6107      	str	r7, [r0, #16]
 800dc64:	e7a4      	b.n	800dbb0 <__mdiff+0x34>
 800dc66:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc6a:	fa11 f288 	uxtah	r2, r1, r8
 800dc6e:	1414      	asrs	r4, r2, #16
 800dc70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc74:	b292      	uxth	r2, r2
 800dc76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc7a:	f84e 2b04 	str.w	r2, [lr], #4
 800dc7e:	1421      	asrs	r1, r4, #16
 800dc80:	e7e0      	b.n	800dc44 <__mdiff+0xc8>
 800dc82:	3f01      	subs	r7, #1
 800dc84:	e7ea      	b.n	800dc5c <__mdiff+0xe0>
 800dc86:	bf00      	nop
 800dc88:	08010874 	.word	0x08010874
 800dc8c:	08010885 	.word	0x08010885

0800dc90 <__d2b>:
 800dc90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc94:	460f      	mov	r7, r1
 800dc96:	2101      	movs	r1, #1
 800dc98:	ec59 8b10 	vmov	r8, r9, d0
 800dc9c:	4616      	mov	r6, r2
 800dc9e:	f7ff fcd5 	bl	800d64c <_Balloc>
 800dca2:	4604      	mov	r4, r0
 800dca4:	b930      	cbnz	r0, 800dcb4 <__d2b+0x24>
 800dca6:	4602      	mov	r2, r0
 800dca8:	4b24      	ldr	r3, [pc, #144]	; (800dd3c <__d2b+0xac>)
 800dcaa:	4825      	ldr	r0, [pc, #148]	; (800dd40 <__d2b+0xb0>)
 800dcac:	f240 310f 	movw	r1, #783	; 0x30f
 800dcb0:	f000 f8f6 	bl	800dea0 <__assert_func>
 800dcb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dcb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcbc:	bb2d      	cbnz	r5, 800dd0a <__d2b+0x7a>
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	f1b8 0300 	subs.w	r3, r8, #0
 800dcc4:	d026      	beq.n	800dd14 <__d2b+0x84>
 800dcc6:	4668      	mov	r0, sp
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	f7ff fd87 	bl	800d7dc <__lo0bits>
 800dcce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dcd2:	b1e8      	cbz	r0, 800dd10 <__d2b+0x80>
 800dcd4:	f1c0 0320 	rsb	r3, r0, #32
 800dcd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcdc:	430b      	orrs	r3, r1
 800dcde:	40c2      	lsrs	r2, r0
 800dce0:	6163      	str	r3, [r4, #20]
 800dce2:	9201      	str	r2, [sp, #4]
 800dce4:	9b01      	ldr	r3, [sp, #4]
 800dce6:	61a3      	str	r3, [r4, #24]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	bf14      	ite	ne
 800dcec:	2202      	movne	r2, #2
 800dcee:	2201      	moveq	r2, #1
 800dcf0:	6122      	str	r2, [r4, #16]
 800dcf2:	b1bd      	cbz	r5, 800dd24 <__d2b+0x94>
 800dcf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dcf8:	4405      	add	r5, r0
 800dcfa:	603d      	str	r5, [r7, #0]
 800dcfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd00:	6030      	str	r0, [r6, #0]
 800dd02:	4620      	mov	r0, r4
 800dd04:	b003      	add	sp, #12
 800dd06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd0e:	e7d6      	b.n	800dcbe <__d2b+0x2e>
 800dd10:	6161      	str	r1, [r4, #20]
 800dd12:	e7e7      	b.n	800dce4 <__d2b+0x54>
 800dd14:	a801      	add	r0, sp, #4
 800dd16:	f7ff fd61 	bl	800d7dc <__lo0bits>
 800dd1a:	9b01      	ldr	r3, [sp, #4]
 800dd1c:	6163      	str	r3, [r4, #20]
 800dd1e:	3020      	adds	r0, #32
 800dd20:	2201      	movs	r2, #1
 800dd22:	e7e5      	b.n	800dcf0 <__d2b+0x60>
 800dd24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd2c:	6038      	str	r0, [r7, #0]
 800dd2e:	6918      	ldr	r0, [r3, #16]
 800dd30:	f7ff fd34 	bl	800d79c <__hi0bits>
 800dd34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd38:	e7e2      	b.n	800dd00 <__d2b+0x70>
 800dd3a:	bf00      	nop
 800dd3c:	08010874 	.word	0x08010874
 800dd40:	08010885 	.word	0x08010885

0800dd44 <__sflush_r>:
 800dd44:	898a      	ldrh	r2, [r1, #12]
 800dd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	0710      	lsls	r0, r2, #28
 800dd4e:	460c      	mov	r4, r1
 800dd50:	d458      	bmi.n	800de04 <__sflush_r+0xc0>
 800dd52:	684b      	ldr	r3, [r1, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dc05      	bgt.n	800dd64 <__sflush_r+0x20>
 800dd58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	dc02      	bgt.n	800dd64 <__sflush_r+0x20>
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd66:	2e00      	cmp	r6, #0
 800dd68:	d0f9      	beq.n	800dd5e <__sflush_r+0x1a>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd70:	682f      	ldr	r7, [r5, #0]
 800dd72:	6a21      	ldr	r1, [r4, #32]
 800dd74:	602b      	str	r3, [r5, #0]
 800dd76:	d032      	beq.n	800ddde <__sflush_r+0x9a>
 800dd78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	075a      	lsls	r2, r3, #29
 800dd7e:	d505      	bpl.n	800dd8c <__sflush_r+0x48>
 800dd80:	6863      	ldr	r3, [r4, #4]
 800dd82:	1ac0      	subs	r0, r0, r3
 800dd84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd86:	b10b      	cbz	r3, 800dd8c <__sflush_r+0x48>
 800dd88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd8a:	1ac0      	subs	r0, r0, r3
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4602      	mov	r2, r0
 800dd90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd92:	6a21      	ldr	r1, [r4, #32]
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b0      	blx	r6
 800dd98:	1c43      	adds	r3, r0, #1
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	d106      	bne.n	800ddac <__sflush_r+0x68>
 800dd9e:	6829      	ldr	r1, [r5, #0]
 800dda0:	291d      	cmp	r1, #29
 800dda2:	d82b      	bhi.n	800ddfc <__sflush_r+0xb8>
 800dda4:	4a29      	ldr	r2, [pc, #164]	; (800de4c <__sflush_r+0x108>)
 800dda6:	410a      	asrs	r2, r1
 800dda8:	07d6      	lsls	r6, r2, #31
 800ddaa:	d427      	bmi.n	800ddfc <__sflush_r+0xb8>
 800ddac:	2200      	movs	r2, #0
 800ddae:	6062      	str	r2, [r4, #4]
 800ddb0:	04d9      	lsls	r1, r3, #19
 800ddb2:	6922      	ldr	r2, [r4, #16]
 800ddb4:	6022      	str	r2, [r4, #0]
 800ddb6:	d504      	bpl.n	800ddc2 <__sflush_r+0x7e>
 800ddb8:	1c42      	adds	r2, r0, #1
 800ddba:	d101      	bne.n	800ddc0 <__sflush_r+0x7c>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b903      	cbnz	r3, 800ddc2 <__sflush_r+0x7e>
 800ddc0:	6560      	str	r0, [r4, #84]	; 0x54
 800ddc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddc4:	602f      	str	r7, [r5, #0]
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d0c9      	beq.n	800dd5e <__sflush_r+0x1a>
 800ddca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddce:	4299      	cmp	r1, r3
 800ddd0:	d002      	beq.n	800ddd8 <__sflush_r+0x94>
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f7ff fbee 	bl	800d5b4 <_free_r>
 800ddd8:	2000      	movs	r0, #0
 800ddda:	6360      	str	r0, [r4, #52]	; 0x34
 800dddc:	e7c0      	b.n	800dd60 <__sflush_r+0x1c>
 800ddde:	2301      	movs	r3, #1
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b0      	blx	r6
 800dde4:	1c41      	adds	r1, r0, #1
 800dde6:	d1c8      	bne.n	800dd7a <__sflush_r+0x36>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0c5      	beq.n	800dd7a <__sflush_r+0x36>
 800ddee:	2b1d      	cmp	r3, #29
 800ddf0:	d001      	beq.n	800ddf6 <__sflush_r+0xb2>
 800ddf2:	2b16      	cmp	r3, #22
 800ddf4:	d101      	bne.n	800ddfa <__sflush_r+0xb6>
 800ddf6:	602f      	str	r7, [r5, #0]
 800ddf8:	e7b1      	b.n	800dd5e <__sflush_r+0x1a>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	e7ad      	b.n	800dd60 <__sflush_r+0x1c>
 800de04:	690f      	ldr	r7, [r1, #16]
 800de06:	2f00      	cmp	r7, #0
 800de08:	d0a9      	beq.n	800dd5e <__sflush_r+0x1a>
 800de0a:	0793      	lsls	r3, r2, #30
 800de0c:	680e      	ldr	r6, [r1, #0]
 800de0e:	bf08      	it	eq
 800de10:	694b      	ldreq	r3, [r1, #20]
 800de12:	600f      	str	r7, [r1, #0]
 800de14:	bf18      	it	ne
 800de16:	2300      	movne	r3, #0
 800de18:	eba6 0807 	sub.w	r8, r6, r7
 800de1c:	608b      	str	r3, [r1, #8]
 800de1e:	f1b8 0f00 	cmp.w	r8, #0
 800de22:	dd9c      	ble.n	800dd5e <__sflush_r+0x1a>
 800de24:	6a21      	ldr	r1, [r4, #32]
 800de26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de28:	4643      	mov	r3, r8
 800de2a:	463a      	mov	r2, r7
 800de2c:	4628      	mov	r0, r5
 800de2e:	47b0      	blx	r6
 800de30:	2800      	cmp	r0, #0
 800de32:	dc06      	bgt.n	800de42 <__sflush_r+0xfe>
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de3a:	81a3      	strh	r3, [r4, #12]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	e78e      	b.n	800dd60 <__sflush_r+0x1c>
 800de42:	4407      	add	r7, r0
 800de44:	eba8 0800 	sub.w	r8, r8, r0
 800de48:	e7e9      	b.n	800de1e <__sflush_r+0xda>
 800de4a:	bf00      	nop
 800de4c:	dfbffffe 	.word	0xdfbffffe

0800de50 <_fflush_r>:
 800de50:	b538      	push	{r3, r4, r5, lr}
 800de52:	690b      	ldr	r3, [r1, #16]
 800de54:	4605      	mov	r5, r0
 800de56:	460c      	mov	r4, r1
 800de58:	b913      	cbnz	r3, 800de60 <_fflush_r+0x10>
 800de5a:	2500      	movs	r5, #0
 800de5c:	4628      	mov	r0, r5
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	b118      	cbz	r0, 800de6a <_fflush_r+0x1a>
 800de62:	6a03      	ldr	r3, [r0, #32]
 800de64:	b90b      	cbnz	r3, 800de6a <_fflush_r+0x1a>
 800de66:	f7fe fbff 	bl	800c668 <__sinit>
 800de6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d0f3      	beq.n	800de5a <_fflush_r+0xa>
 800de72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de74:	07d0      	lsls	r0, r2, #31
 800de76:	d404      	bmi.n	800de82 <_fflush_r+0x32>
 800de78:	0599      	lsls	r1, r3, #22
 800de7a:	d402      	bmi.n	800de82 <_fflush_r+0x32>
 800de7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de7e:	f7fe fd0c 	bl	800c89a <__retarget_lock_acquire_recursive>
 800de82:	4628      	mov	r0, r5
 800de84:	4621      	mov	r1, r4
 800de86:	f7ff ff5d 	bl	800dd44 <__sflush_r>
 800de8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de8c:	07da      	lsls	r2, r3, #31
 800de8e:	4605      	mov	r5, r0
 800de90:	d4e4      	bmi.n	800de5c <_fflush_r+0xc>
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	059b      	lsls	r3, r3, #22
 800de96:	d4e1      	bmi.n	800de5c <_fflush_r+0xc>
 800de98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de9a:	f7fe fcff 	bl	800c89c <__retarget_lock_release_recursive>
 800de9e:	e7dd      	b.n	800de5c <_fflush_r+0xc>

0800dea0 <__assert_func>:
 800dea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dea2:	4614      	mov	r4, r2
 800dea4:	461a      	mov	r2, r3
 800dea6:	4b09      	ldr	r3, [pc, #36]	; (800decc <__assert_func+0x2c>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4605      	mov	r5, r0
 800deac:	68d8      	ldr	r0, [r3, #12]
 800deae:	b14c      	cbz	r4, 800dec4 <__assert_func+0x24>
 800deb0:	4b07      	ldr	r3, [pc, #28]	; (800ded0 <__assert_func+0x30>)
 800deb2:	9100      	str	r1, [sp, #0]
 800deb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800deb8:	4906      	ldr	r1, [pc, #24]	; (800ded4 <__assert_func+0x34>)
 800deba:	462b      	mov	r3, r5
 800debc:	f000 f844 	bl	800df48 <fiprintf>
 800dec0:	f000 f854 	bl	800df6c <abort>
 800dec4:	4b04      	ldr	r3, [pc, #16]	; (800ded8 <__assert_func+0x38>)
 800dec6:	461c      	mov	r4, r3
 800dec8:	e7f3      	b.n	800deb2 <__assert_func+0x12>
 800deca:	bf00      	nop
 800decc:	20000d34 	.word	0x20000d34
 800ded0:	080109e6 	.word	0x080109e6
 800ded4:	080109f3 	.word	0x080109f3
 800ded8:	08010a21 	.word	0x08010a21

0800dedc <_calloc_r>:
 800dedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dede:	fba1 2402 	umull	r2, r4, r1, r2
 800dee2:	b94c      	cbnz	r4, 800def8 <_calloc_r+0x1c>
 800dee4:	4611      	mov	r1, r2
 800dee6:	9201      	str	r2, [sp, #4]
 800dee8:	f7fd fe40 	bl	800bb6c <_malloc_r>
 800deec:	9a01      	ldr	r2, [sp, #4]
 800deee:	4605      	mov	r5, r0
 800def0:	b930      	cbnz	r0, 800df00 <_calloc_r+0x24>
 800def2:	4628      	mov	r0, r5
 800def4:	b003      	add	sp, #12
 800def6:	bd30      	pop	{r4, r5, pc}
 800def8:	220c      	movs	r2, #12
 800defa:	6002      	str	r2, [r0, #0]
 800defc:	2500      	movs	r5, #0
 800defe:	e7f8      	b.n	800def2 <_calloc_r+0x16>
 800df00:	4621      	mov	r1, r4
 800df02:	f7fe fc2a 	bl	800c75a <memset>
 800df06:	e7f4      	b.n	800def2 <_calloc_r+0x16>

0800df08 <__ascii_mbtowc>:
 800df08:	b082      	sub	sp, #8
 800df0a:	b901      	cbnz	r1, 800df0e <__ascii_mbtowc+0x6>
 800df0c:	a901      	add	r1, sp, #4
 800df0e:	b142      	cbz	r2, 800df22 <__ascii_mbtowc+0x1a>
 800df10:	b14b      	cbz	r3, 800df26 <__ascii_mbtowc+0x1e>
 800df12:	7813      	ldrb	r3, [r2, #0]
 800df14:	600b      	str	r3, [r1, #0]
 800df16:	7812      	ldrb	r2, [r2, #0]
 800df18:	1e10      	subs	r0, r2, #0
 800df1a:	bf18      	it	ne
 800df1c:	2001      	movne	r0, #1
 800df1e:	b002      	add	sp, #8
 800df20:	4770      	bx	lr
 800df22:	4610      	mov	r0, r2
 800df24:	e7fb      	b.n	800df1e <__ascii_mbtowc+0x16>
 800df26:	f06f 0001 	mvn.w	r0, #1
 800df2a:	e7f8      	b.n	800df1e <__ascii_mbtowc+0x16>

0800df2c <__ascii_wctomb>:
 800df2c:	b149      	cbz	r1, 800df42 <__ascii_wctomb+0x16>
 800df2e:	2aff      	cmp	r2, #255	; 0xff
 800df30:	bf85      	ittet	hi
 800df32:	238a      	movhi	r3, #138	; 0x8a
 800df34:	6003      	strhi	r3, [r0, #0]
 800df36:	700a      	strbls	r2, [r1, #0]
 800df38:	f04f 30ff 	movhi.w	r0, #4294967295
 800df3c:	bf98      	it	ls
 800df3e:	2001      	movls	r0, #1
 800df40:	4770      	bx	lr
 800df42:	4608      	mov	r0, r1
 800df44:	4770      	bx	lr
	...

0800df48 <fiprintf>:
 800df48:	b40e      	push	{r1, r2, r3}
 800df4a:	b503      	push	{r0, r1, lr}
 800df4c:	4601      	mov	r1, r0
 800df4e:	ab03      	add	r3, sp, #12
 800df50:	4805      	ldr	r0, [pc, #20]	; (800df68 <fiprintf+0x20>)
 800df52:	f853 2b04 	ldr.w	r2, [r3], #4
 800df56:	6800      	ldr	r0, [r0, #0]
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	f000 f837 	bl	800dfcc <_vfiprintf_r>
 800df5e:	b002      	add	sp, #8
 800df60:	f85d eb04 	ldr.w	lr, [sp], #4
 800df64:	b003      	add	sp, #12
 800df66:	4770      	bx	lr
 800df68:	20000d34 	.word	0x20000d34

0800df6c <abort>:
 800df6c:	b508      	push	{r3, lr}
 800df6e:	2006      	movs	r0, #6
 800df70:	f000 fa04 	bl	800e37c <raise>
 800df74:	2001      	movs	r0, #1
 800df76:	f000 fe9b 	bl	800ecb0 <_exit>

0800df7a <__sfputc_r>:
 800df7a:	6893      	ldr	r3, [r2, #8]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	2b00      	cmp	r3, #0
 800df80:	b410      	push	{r4}
 800df82:	6093      	str	r3, [r2, #8]
 800df84:	da08      	bge.n	800df98 <__sfputc_r+0x1e>
 800df86:	6994      	ldr	r4, [r2, #24]
 800df88:	42a3      	cmp	r3, r4
 800df8a:	db01      	blt.n	800df90 <__sfputc_r+0x16>
 800df8c:	290a      	cmp	r1, #10
 800df8e:	d103      	bne.n	800df98 <__sfputc_r+0x1e>
 800df90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df94:	f000 b934 	b.w	800e200 <__swbuf_r>
 800df98:	6813      	ldr	r3, [r2, #0]
 800df9a:	1c58      	adds	r0, r3, #1
 800df9c:	6010      	str	r0, [r2, #0]
 800df9e:	7019      	strb	r1, [r3, #0]
 800dfa0:	4608      	mov	r0, r1
 800dfa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <__sfputs_r>:
 800dfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfaa:	4606      	mov	r6, r0
 800dfac:	460f      	mov	r7, r1
 800dfae:	4614      	mov	r4, r2
 800dfb0:	18d5      	adds	r5, r2, r3
 800dfb2:	42ac      	cmp	r4, r5
 800dfb4:	d101      	bne.n	800dfba <__sfputs_r+0x12>
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	e007      	b.n	800dfca <__sfputs_r+0x22>
 800dfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfbe:	463a      	mov	r2, r7
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f7ff ffda 	bl	800df7a <__sfputc_r>
 800dfc6:	1c43      	adds	r3, r0, #1
 800dfc8:	d1f3      	bne.n	800dfb2 <__sfputs_r+0xa>
 800dfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfcc <_vfiprintf_r>:
 800dfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd0:	460d      	mov	r5, r1
 800dfd2:	b09d      	sub	sp, #116	; 0x74
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	4698      	mov	r8, r3
 800dfd8:	4606      	mov	r6, r0
 800dfda:	b118      	cbz	r0, 800dfe4 <_vfiprintf_r+0x18>
 800dfdc:	6a03      	ldr	r3, [r0, #32]
 800dfde:	b90b      	cbnz	r3, 800dfe4 <_vfiprintf_r+0x18>
 800dfe0:	f7fe fb42 	bl	800c668 <__sinit>
 800dfe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfe6:	07d9      	lsls	r1, r3, #31
 800dfe8:	d405      	bmi.n	800dff6 <_vfiprintf_r+0x2a>
 800dfea:	89ab      	ldrh	r3, [r5, #12]
 800dfec:	059a      	lsls	r2, r3, #22
 800dfee:	d402      	bmi.n	800dff6 <_vfiprintf_r+0x2a>
 800dff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dff2:	f7fe fc52 	bl	800c89a <__retarget_lock_acquire_recursive>
 800dff6:	89ab      	ldrh	r3, [r5, #12]
 800dff8:	071b      	lsls	r3, r3, #28
 800dffa:	d501      	bpl.n	800e000 <_vfiprintf_r+0x34>
 800dffc:	692b      	ldr	r3, [r5, #16]
 800dffe:	b99b      	cbnz	r3, 800e028 <_vfiprintf_r+0x5c>
 800e000:	4629      	mov	r1, r5
 800e002:	4630      	mov	r0, r6
 800e004:	f000 f93a 	bl	800e27c <__swsetup_r>
 800e008:	b170      	cbz	r0, 800e028 <_vfiprintf_r+0x5c>
 800e00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e00c:	07dc      	lsls	r4, r3, #31
 800e00e:	d504      	bpl.n	800e01a <_vfiprintf_r+0x4e>
 800e010:	f04f 30ff 	mov.w	r0, #4294967295
 800e014:	b01d      	add	sp, #116	; 0x74
 800e016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01a:	89ab      	ldrh	r3, [r5, #12]
 800e01c:	0598      	lsls	r0, r3, #22
 800e01e:	d4f7      	bmi.n	800e010 <_vfiprintf_r+0x44>
 800e020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e022:	f7fe fc3b 	bl	800c89c <__retarget_lock_release_recursive>
 800e026:	e7f3      	b.n	800e010 <_vfiprintf_r+0x44>
 800e028:	2300      	movs	r3, #0
 800e02a:	9309      	str	r3, [sp, #36]	; 0x24
 800e02c:	2320      	movs	r3, #32
 800e02e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e032:	f8cd 800c 	str.w	r8, [sp, #12]
 800e036:	2330      	movs	r3, #48	; 0x30
 800e038:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e1ec <_vfiprintf_r+0x220>
 800e03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e040:	f04f 0901 	mov.w	r9, #1
 800e044:	4623      	mov	r3, r4
 800e046:	469a      	mov	sl, r3
 800e048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e04c:	b10a      	cbz	r2, 800e052 <_vfiprintf_r+0x86>
 800e04e:	2a25      	cmp	r2, #37	; 0x25
 800e050:	d1f9      	bne.n	800e046 <_vfiprintf_r+0x7a>
 800e052:	ebba 0b04 	subs.w	fp, sl, r4
 800e056:	d00b      	beq.n	800e070 <_vfiprintf_r+0xa4>
 800e058:	465b      	mov	r3, fp
 800e05a:	4622      	mov	r2, r4
 800e05c:	4629      	mov	r1, r5
 800e05e:	4630      	mov	r0, r6
 800e060:	f7ff ffa2 	bl	800dfa8 <__sfputs_r>
 800e064:	3001      	adds	r0, #1
 800e066:	f000 80a9 	beq.w	800e1bc <_vfiprintf_r+0x1f0>
 800e06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e06c:	445a      	add	r2, fp
 800e06e:	9209      	str	r2, [sp, #36]	; 0x24
 800e070:	f89a 3000 	ldrb.w	r3, [sl]
 800e074:	2b00      	cmp	r3, #0
 800e076:	f000 80a1 	beq.w	800e1bc <_vfiprintf_r+0x1f0>
 800e07a:	2300      	movs	r3, #0
 800e07c:	f04f 32ff 	mov.w	r2, #4294967295
 800e080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e084:	f10a 0a01 	add.w	sl, sl, #1
 800e088:	9304      	str	r3, [sp, #16]
 800e08a:	9307      	str	r3, [sp, #28]
 800e08c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e090:	931a      	str	r3, [sp, #104]	; 0x68
 800e092:	4654      	mov	r4, sl
 800e094:	2205      	movs	r2, #5
 800e096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e09a:	4854      	ldr	r0, [pc, #336]	; (800e1ec <_vfiprintf_r+0x220>)
 800e09c:	f7f2 f898 	bl	80001d0 <memchr>
 800e0a0:	9a04      	ldr	r2, [sp, #16]
 800e0a2:	b9d8      	cbnz	r0, 800e0dc <_vfiprintf_r+0x110>
 800e0a4:	06d1      	lsls	r1, r2, #27
 800e0a6:	bf44      	itt	mi
 800e0a8:	2320      	movmi	r3, #32
 800e0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0ae:	0713      	lsls	r3, r2, #28
 800e0b0:	bf44      	itt	mi
 800e0b2:	232b      	movmi	r3, #43	; 0x2b
 800e0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0be:	d015      	beq.n	800e0ec <_vfiprintf_r+0x120>
 800e0c0:	9a07      	ldr	r2, [sp, #28]
 800e0c2:	4654      	mov	r4, sl
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	f04f 0c0a 	mov.w	ip, #10
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0d0:	3b30      	subs	r3, #48	; 0x30
 800e0d2:	2b09      	cmp	r3, #9
 800e0d4:	d94d      	bls.n	800e172 <_vfiprintf_r+0x1a6>
 800e0d6:	b1b0      	cbz	r0, 800e106 <_vfiprintf_r+0x13a>
 800e0d8:	9207      	str	r2, [sp, #28]
 800e0da:	e014      	b.n	800e106 <_vfiprintf_r+0x13a>
 800e0dc:	eba0 0308 	sub.w	r3, r0, r8
 800e0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	9304      	str	r3, [sp, #16]
 800e0e8:	46a2      	mov	sl, r4
 800e0ea:	e7d2      	b.n	800e092 <_vfiprintf_r+0xc6>
 800e0ec:	9b03      	ldr	r3, [sp, #12]
 800e0ee:	1d19      	adds	r1, r3, #4
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	9103      	str	r1, [sp, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	bfbb      	ittet	lt
 800e0f8:	425b      	neglt	r3, r3
 800e0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800e0fe:	9307      	strge	r3, [sp, #28]
 800e100:	9307      	strlt	r3, [sp, #28]
 800e102:	bfb8      	it	lt
 800e104:	9204      	strlt	r2, [sp, #16]
 800e106:	7823      	ldrb	r3, [r4, #0]
 800e108:	2b2e      	cmp	r3, #46	; 0x2e
 800e10a:	d10c      	bne.n	800e126 <_vfiprintf_r+0x15a>
 800e10c:	7863      	ldrb	r3, [r4, #1]
 800e10e:	2b2a      	cmp	r3, #42	; 0x2a
 800e110:	d134      	bne.n	800e17c <_vfiprintf_r+0x1b0>
 800e112:	9b03      	ldr	r3, [sp, #12]
 800e114:	1d1a      	adds	r2, r3, #4
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	9203      	str	r2, [sp, #12]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	bfb8      	it	lt
 800e11e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e122:	3402      	adds	r4, #2
 800e124:	9305      	str	r3, [sp, #20]
 800e126:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e1fc <_vfiprintf_r+0x230>
 800e12a:	7821      	ldrb	r1, [r4, #0]
 800e12c:	2203      	movs	r2, #3
 800e12e:	4650      	mov	r0, sl
 800e130:	f7f2 f84e 	bl	80001d0 <memchr>
 800e134:	b138      	cbz	r0, 800e146 <_vfiprintf_r+0x17a>
 800e136:	9b04      	ldr	r3, [sp, #16]
 800e138:	eba0 000a 	sub.w	r0, r0, sl
 800e13c:	2240      	movs	r2, #64	; 0x40
 800e13e:	4082      	lsls	r2, r0
 800e140:	4313      	orrs	r3, r2
 800e142:	3401      	adds	r4, #1
 800e144:	9304      	str	r3, [sp, #16]
 800e146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e14a:	4829      	ldr	r0, [pc, #164]	; (800e1f0 <_vfiprintf_r+0x224>)
 800e14c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e150:	2206      	movs	r2, #6
 800e152:	f7f2 f83d 	bl	80001d0 <memchr>
 800e156:	2800      	cmp	r0, #0
 800e158:	d03f      	beq.n	800e1da <_vfiprintf_r+0x20e>
 800e15a:	4b26      	ldr	r3, [pc, #152]	; (800e1f4 <_vfiprintf_r+0x228>)
 800e15c:	bb1b      	cbnz	r3, 800e1a6 <_vfiprintf_r+0x1da>
 800e15e:	9b03      	ldr	r3, [sp, #12]
 800e160:	3307      	adds	r3, #7
 800e162:	f023 0307 	bic.w	r3, r3, #7
 800e166:	3308      	adds	r3, #8
 800e168:	9303      	str	r3, [sp, #12]
 800e16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16c:	443b      	add	r3, r7
 800e16e:	9309      	str	r3, [sp, #36]	; 0x24
 800e170:	e768      	b.n	800e044 <_vfiprintf_r+0x78>
 800e172:	fb0c 3202 	mla	r2, ip, r2, r3
 800e176:	460c      	mov	r4, r1
 800e178:	2001      	movs	r0, #1
 800e17a:	e7a6      	b.n	800e0ca <_vfiprintf_r+0xfe>
 800e17c:	2300      	movs	r3, #0
 800e17e:	3401      	adds	r4, #1
 800e180:	9305      	str	r3, [sp, #20]
 800e182:	4619      	mov	r1, r3
 800e184:	f04f 0c0a 	mov.w	ip, #10
 800e188:	4620      	mov	r0, r4
 800e18a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e18e:	3a30      	subs	r2, #48	; 0x30
 800e190:	2a09      	cmp	r2, #9
 800e192:	d903      	bls.n	800e19c <_vfiprintf_r+0x1d0>
 800e194:	2b00      	cmp	r3, #0
 800e196:	d0c6      	beq.n	800e126 <_vfiprintf_r+0x15a>
 800e198:	9105      	str	r1, [sp, #20]
 800e19a:	e7c4      	b.n	800e126 <_vfiprintf_r+0x15a>
 800e19c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e7f0      	b.n	800e188 <_vfiprintf_r+0x1bc>
 800e1a6:	ab03      	add	r3, sp, #12
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	4b12      	ldr	r3, [pc, #72]	; (800e1f8 <_vfiprintf_r+0x22c>)
 800e1ae:	a904      	add	r1, sp, #16
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7fd fe07 	bl	800bdc4 <_printf_float>
 800e1b6:	4607      	mov	r7, r0
 800e1b8:	1c78      	adds	r0, r7, #1
 800e1ba:	d1d6      	bne.n	800e16a <_vfiprintf_r+0x19e>
 800e1bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1be:	07d9      	lsls	r1, r3, #31
 800e1c0:	d405      	bmi.n	800e1ce <_vfiprintf_r+0x202>
 800e1c2:	89ab      	ldrh	r3, [r5, #12]
 800e1c4:	059a      	lsls	r2, r3, #22
 800e1c6:	d402      	bmi.n	800e1ce <_vfiprintf_r+0x202>
 800e1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1ca:	f7fe fb67 	bl	800c89c <__retarget_lock_release_recursive>
 800e1ce:	89ab      	ldrh	r3, [r5, #12]
 800e1d0:	065b      	lsls	r3, r3, #25
 800e1d2:	f53f af1d 	bmi.w	800e010 <_vfiprintf_r+0x44>
 800e1d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1d8:	e71c      	b.n	800e014 <_vfiprintf_r+0x48>
 800e1da:	ab03      	add	r3, sp, #12
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	462a      	mov	r2, r5
 800e1e0:	4b05      	ldr	r3, [pc, #20]	; (800e1f8 <_vfiprintf_r+0x22c>)
 800e1e2:	a904      	add	r1, sp, #16
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f7fe f891 	bl	800c30c <_printf_i>
 800e1ea:	e7e4      	b.n	800e1b6 <_vfiprintf_r+0x1ea>
 800e1ec:	08010b23 	.word	0x08010b23
 800e1f0:	08010b2d 	.word	0x08010b2d
 800e1f4:	0800bdc5 	.word	0x0800bdc5
 800e1f8:	0800dfa9 	.word	0x0800dfa9
 800e1fc:	08010b29 	.word	0x08010b29

0800e200 <__swbuf_r>:
 800e200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e202:	460e      	mov	r6, r1
 800e204:	4614      	mov	r4, r2
 800e206:	4605      	mov	r5, r0
 800e208:	b118      	cbz	r0, 800e212 <__swbuf_r+0x12>
 800e20a:	6a03      	ldr	r3, [r0, #32]
 800e20c:	b90b      	cbnz	r3, 800e212 <__swbuf_r+0x12>
 800e20e:	f7fe fa2b 	bl	800c668 <__sinit>
 800e212:	69a3      	ldr	r3, [r4, #24]
 800e214:	60a3      	str	r3, [r4, #8]
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	071a      	lsls	r2, r3, #28
 800e21a:	d525      	bpl.n	800e268 <__swbuf_r+0x68>
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	b31b      	cbz	r3, 800e268 <__swbuf_r+0x68>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	6922      	ldr	r2, [r4, #16]
 800e224:	1a98      	subs	r0, r3, r2
 800e226:	6963      	ldr	r3, [r4, #20]
 800e228:	b2f6      	uxtb	r6, r6
 800e22a:	4283      	cmp	r3, r0
 800e22c:	4637      	mov	r7, r6
 800e22e:	dc04      	bgt.n	800e23a <__swbuf_r+0x3a>
 800e230:	4621      	mov	r1, r4
 800e232:	4628      	mov	r0, r5
 800e234:	f7ff fe0c 	bl	800de50 <_fflush_r>
 800e238:	b9e0      	cbnz	r0, 800e274 <__swbuf_r+0x74>
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	3b01      	subs	r3, #1
 800e23e:	60a3      	str	r3, [r4, #8]
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	6022      	str	r2, [r4, #0]
 800e246:	701e      	strb	r6, [r3, #0]
 800e248:	6962      	ldr	r2, [r4, #20]
 800e24a:	1c43      	adds	r3, r0, #1
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d004      	beq.n	800e25a <__swbuf_r+0x5a>
 800e250:	89a3      	ldrh	r3, [r4, #12]
 800e252:	07db      	lsls	r3, r3, #31
 800e254:	d506      	bpl.n	800e264 <__swbuf_r+0x64>
 800e256:	2e0a      	cmp	r6, #10
 800e258:	d104      	bne.n	800e264 <__swbuf_r+0x64>
 800e25a:	4621      	mov	r1, r4
 800e25c:	4628      	mov	r0, r5
 800e25e:	f7ff fdf7 	bl	800de50 <_fflush_r>
 800e262:	b938      	cbnz	r0, 800e274 <__swbuf_r+0x74>
 800e264:	4638      	mov	r0, r7
 800e266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e268:	4621      	mov	r1, r4
 800e26a:	4628      	mov	r0, r5
 800e26c:	f000 f806 	bl	800e27c <__swsetup_r>
 800e270:	2800      	cmp	r0, #0
 800e272:	d0d5      	beq.n	800e220 <__swbuf_r+0x20>
 800e274:	f04f 37ff 	mov.w	r7, #4294967295
 800e278:	e7f4      	b.n	800e264 <__swbuf_r+0x64>
	...

0800e27c <__swsetup_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4b2a      	ldr	r3, [pc, #168]	; (800e328 <__swsetup_r+0xac>)
 800e280:	4605      	mov	r5, r0
 800e282:	6818      	ldr	r0, [r3, #0]
 800e284:	460c      	mov	r4, r1
 800e286:	b118      	cbz	r0, 800e290 <__swsetup_r+0x14>
 800e288:	6a03      	ldr	r3, [r0, #32]
 800e28a:	b90b      	cbnz	r3, 800e290 <__swsetup_r+0x14>
 800e28c:	f7fe f9ec 	bl	800c668 <__sinit>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e296:	0718      	lsls	r0, r3, #28
 800e298:	d422      	bmi.n	800e2e0 <__swsetup_r+0x64>
 800e29a:	06d9      	lsls	r1, r3, #27
 800e29c:	d407      	bmi.n	800e2ae <__swsetup_r+0x32>
 800e29e:	2309      	movs	r3, #9
 800e2a0:	602b      	str	r3, [r5, #0]
 800e2a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e2a6:	81a3      	strh	r3, [r4, #12]
 800e2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ac:	e034      	b.n	800e318 <__swsetup_r+0x9c>
 800e2ae:	0758      	lsls	r0, r3, #29
 800e2b0:	d512      	bpl.n	800e2d8 <__swsetup_r+0x5c>
 800e2b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2b4:	b141      	cbz	r1, 800e2c8 <__swsetup_r+0x4c>
 800e2b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2ba:	4299      	cmp	r1, r3
 800e2bc:	d002      	beq.n	800e2c4 <__swsetup_r+0x48>
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f7ff f978 	bl	800d5b4 <_free_r>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	6363      	str	r3, [r4, #52]	; 0x34
 800e2c8:	89a3      	ldrh	r3, [r4, #12]
 800e2ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2ce:	81a3      	strh	r3, [r4, #12]
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	6063      	str	r3, [r4, #4]
 800e2d4:	6923      	ldr	r3, [r4, #16]
 800e2d6:	6023      	str	r3, [r4, #0]
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	f043 0308 	orr.w	r3, r3, #8
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	6923      	ldr	r3, [r4, #16]
 800e2e2:	b94b      	cbnz	r3, 800e2f8 <__swsetup_r+0x7c>
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ee:	d003      	beq.n	800e2f8 <__swsetup_r+0x7c>
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f000 f884 	bl	800e400 <__smakebuf_r>
 800e2f8:	89a0      	ldrh	r0, [r4, #12]
 800e2fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2fe:	f010 0301 	ands.w	r3, r0, #1
 800e302:	d00a      	beq.n	800e31a <__swsetup_r+0x9e>
 800e304:	2300      	movs	r3, #0
 800e306:	60a3      	str	r3, [r4, #8]
 800e308:	6963      	ldr	r3, [r4, #20]
 800e30a:	425b      	negs	r3, r3
 800e30c:	61a3      	str	r3, [r4, #24]
 800e30e:	6923      	ldr	r3, [r4, #16]
 800e310:	b943      	cbnz	r3, 800e324 <__swsetup_r+0xa8>
 800e312:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e316:	d1c4      	bne.n	800e2a2 <__swsetup_r+0x26>
 800e318:	bd38      	pop	{r3, r4, r5, pc}
 800e31a:	0781      	lsls	r1, r0, #30
 800e31c:	bf58      	it	pl
 800e31e:	6963      	ldrpl	r3, [r4, #20]
 800e320:	60a3      	str	r3, [r4, #8]
 800e322:	e7f4      	b.n	800e30e <__swsetup_r+0x92>
 800e324:	2000      	movs	r0, #0
 800e326:	e7f7      	b.n	800e318 <__swsetup_r+0x9c>
 800e328:	20000d34 	.word	0x20000d34

0800e32c <_raise_r>:
 800e32c:	291f      	cmp	r1, #31
 800e32e:	b538      	push	{r3, r4, r5, lr}
 800e330:	4604      	mov	r4, r0
 800e332:	460d      	mov	r5, r1
 800e334:	d904      	bls.n	800e340 <_raise_r+0x14>
 800e336:	2316      	movs	r3, #22
 800e338:	6003      	str	r3, [r0, #0]
 800e33a:	f04f 30ff 	mov.w	r0, #4294967295
 800e33e:	bd38      	pop	{r3, r4, r5, pc}
 800e340:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e342:	b112      	cbz	r2, 800e34a <_raise_r+0x1e>
 800e344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e348:	b94b      	cbnz	r3, 800e35e <_raise_r+0x32>
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 f830 	bl	800e3b0 <_getpid_r>
 800e350:	462a      	mov	r2, r5
 800e352:	4601      	mov	r1, r0
 800e354:	4620      	mov	r0, r4
 800e356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e35a:	f000 b817 	b.w	800e38c <_kill_r>
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d00a      	beq.n	800e378 <_raise_r+0x4c>
 800e362:	1c59      	adds	r1, r3, #1
 800e364:	d103      	bne.n	800e36e <_raise_r+0x42>
 800e366:	2316      	movs	r3, #22
 800e368:	6003      	str	r3, [r0, #0]
 800e36a:	2001      	movs	r0, #1
 800e36c:	e7e7      	b.n	800e33e <_raise_r+0x12>
 800e36e:	2400      	movs	r4, #0
 800e370:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e374:	4628      	mov	r0, r5
 800e376:	4798      	blx	r3
 800e378:	2000      	movs	r0, #0
 800e37a:	e7e0      	b.n	800e33e <_raise_r+0x12>

0800e37c <raise>:
 800e37c:	4b02      	ldr	r3, [pc, #8]	; (800e388 <raise+0xc>)
 800e37e:	4601      	mov	r1, r0
 800e380:	6818      	ldr	r0, [r3, #0]
 800e382:	f7ff bfd3 	b.w	800e32c <_raise_r>
 800e386:	bf00      	nop
 800e388:	20000d34 	.word	0x20000d34

0800e38c <_kill_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4d07      	ldr	r5, [pc, #28]	; (800e3ac <_kill_r+0x20>)
 800e390:	2300      	movs	r3, #0
 800e392:	4604      	mov	r4, r0
 800e394:	4608      	mov	r0, r1
 800e396:	4611      	mov	r1, r2
 800e398:	602b      	str	r3, [r5, #0]
 800e39a:	f000 fc71 	bl	800ec80 <_kill>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d102      	bne.n	800e3a8 <_kill_r+0x1c>
 800e3a2:	682b      	ldr	r3, [r5, #0]
 800e3a4:	b103      	cbz	r3, 800e3a8 <_kill_r+0x1c>
 800e3a6:	6023      	str	r3, [r4, #0]
 800e3a8:	bd38      	pop	{r3, r4, r5, pc}
 800e3aa:	bf00      	nop
 800e3ac:	200134d0 	.word	0x200134d0

0800e3b0 <_getpid_r>:
 800e3b0:	f000 bc56 	b.w	800ec60 <_getpid>

0800e3b4 <__swhatbuf_r>:
 800e3b4:	b570      	push	{r4, r5, r6, lr}
 800e3b6:	460c      	mov	r4, r1
 800e3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3bc:	2900      	cmp	r1, #0
 800e3be:	b096      	sub	sp, #88	; 0x58
 800e3c0:	4615      	mov	r5, r2
 800e3c2:	461e      	mov	r6, r3
 800e3c4:	da0d      	bge.n	800e3e2 <__swhatbuf_r+0x2e>
 800e3c6:	89a3      	ldrh	r3, [r4, #12]
 800e3c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e3cc:	f04f 0100 	mov.w	r1, #0
 800e3d0:	bf0c      	ite	eq
 800e3d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e3d6:	2340      	movne	r3, #64	; 0x40
 800e3d8:	2000      	movs	r0, #0
 800e3da:	6031      	str	r1, [r6, #0]
 800e3dc:	602b      	str	r3, [r5, #0]
 800e3de:	b016      	add	sp, #88	; 0x58
 800e3e0:	bd70      	pop	{r4, r5, r6, pc}
 800e3e2:	466a      	mov	r2, sp
 800e3e4:	f000 f848 	bl	800e478 <_fstat_r>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	dbec      	blt.n	800e3c6 <__swhatbuf_r+0x12>
 800e3ec:	9901      	ldr	r1, [sp, #4]
 800e3ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e3f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e3f6:	4259      	negs	r1, r3
 800e3f8:	4159      	adcs	r1, r3
 800e3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fe:	e7eb      	b.n	800e3d8 <__swhatbuf_r+0x24>

0800e400 <__smakebuf_r>:
 800e400:	898b      	ldrh	r3, [r1, #12]
 800e402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e404:	079d      	lsls	r5, r3, #30
 800e406:	4606      	mov	r6, r0
 800e408:	460c      	mov	r4, r1
 800e40a:	d507      	bpl.n	800e41c <__smakebuf_r+0x1c>
 800e40c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e410:	6023      	str	r3, [r4, #0]
 800e412:	6123      	str	r3, [r4, #16]
 800e414:	2301      	movs	r3, #1
 800e416:	6163      	str	r3, [r4, #20]
 800e418:	b002      	add	sp, #8
 800e41a:	bd70      	pop	{r4, r5, r6, pc}
 800e41c:	ab01      	add	r3, sp, #4
 800e41e:	466a      	mov	r2, sp
 800e420:	f7ff ffc8 	bl	800e3b4 <__swhatbuf_r>
 800e424:	9900      	ldr	r1, [sp, #0]
 800e426:	4605      	mov	r5, r0
 800e428:	4630      	mov	r0, r6
 800e42a:	f7fd fb9f 	bl	800bb6c <_malloc_r>
 800e42e:	b948      	cbnz	r0, 800e444 <__smakebuf_r+0x44>
 800e430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e434:	059a      	lsls	r2, r3, #22
 800e436:	d4ef      	bmi.n	800e418 <__smakebuf_r+0x18>
 800e438:	f023 0303 	bic.w	r3, r3, #3
 800e43c:	f043 0302 	orr.w	r3, r3, #2
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	e7e3      	b.n	800e40c <__smakebuf_r+0xc>
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	6020      	str	r0, [r4, #0]
 800e448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	9b00      	ldr	r3, [sp, #0]
 800e450:	6163      	str	r3, [r4, #20]
 800e452:	9b01      	ldr	r3, [sp, #4]
 800e454:	6120      	str	r0, [r4, #16]
 800e456:	b15b      	cbz	r3, 800e470 <__smakebuf_r+0x70>
 800e458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e45c:	4630      	mov	r0, r6
 800e45e:	f000 f81d 	bl	800e49c <_isatty_r>
 800e462:	b128      	cbz	r0, 800e470 <__smakebuf_r+0x70>
 800e464:	89a3      	ldrh	r3, [r4, #12]
 800e466:	f023 0303 	bic.w	r3, r3, #3
 800e46a:	f043 0301 	orr.w	r3, r3, #1
 800e46e:	81a3      	strh	r3, [r4, #12]
 800e470:	89a3      	ldrh	r3, [r4, #12]
 800e472:	431d      	orrs	r5, r3
 800e474:	81a5      	strh	r5, [r4, #12]
 800e476:	e7cf      	b.n	800e418 <__smakebuf_r+0x18>

0800e478 <_fstat_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4d07      	ldr	r5, [pc, #28]	; (800e498 <_fstat_r+0x20>)
 800e47c:	2300      	movs	r3, #0
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	4611      	mov	r1, r2
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	f000 fbe3 	bl	800ec50 <_fstat>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	d102      	bne.n	800e494 <_fstat_r+0x1c>
 800e48e:	682b      	ldr	r3, [r5, #0]
 800e490:	b103      	cbz	r3, 800e494 <_fstat_r+0x1c>
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	bf00      	nop
 800e498:	200134d0 	.word	0x200134d0

0800e49c <_isatty_r>:
 800e49c:	b538      	push	{r3, r4, r5, lr}
 800e49e:	4d06      	ldr	r5, [pc, #24]	; (800e4b8 <_isatty_r+0x1c>)
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	4608      	mov	r0, r1
 800e4a6:	602b      	str	r3, [r5, #0]
 800e4a8:	f000 fbe2 	bl	800ec70 <_isatty>
 800e4ac:	1c43      	adds	r3, r0, #1
 800e4ae:	d102      	bne.n	800e4b6 <_isatty_r+0x1a>
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	b103      	cbz	r3, 800e4b6 <_isatty_r+0x1a>
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	200134d0 	.word	0x200134d0

0800e4bc <powf>:
 800e4bc:	b508      	push	{r3, lr}
 800e4be:	ed2d 8b04 	vpush	{d8-d9}
 800e4c2:	eeb0 8a60 	vmov.f32	s16, s1
 800e4c6:	eeb0 9a40 	vmov.f32	s18, s0
 800e4ca:	f000 f885 	bl	800e5d8 <__ieee754_powf>
 800e4ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800e4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d6:	eef0 8a40 	vmov.f32	s17, s0
 800e4da:	d63e      	bvs.n	800e55a <powf+0x9e>
 800e4dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e4:	d112      	bne.n	800e50c <powf+0x50>
 800e4e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ee:	d039      	beq.n	800e564 <powf+0xa8>
 800e4f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e4f4:	f000 f840 	bl	800e578 <finitef>
 800e4f8:	b378      	cbz	r0, 800e55a <powf+0x9e>
 800e4fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e502:	d52a      	bpl.n	800e55a <powf+0x9e>
 800e504:	f7fe f99e 	bl	800c844 <__errno>
 800e508:	2322      	movs	r3, #34	; 0x22
 800e50a:	e014      	b.n	800e536 <powf+0x7a>
 800e50c:	f000 f834 	bl	800e578 <finitef>
 800e510:	b998      	cbnz	r0, 800e53a <powf+0x7e>
 800e512:	eeb0 0a49 	vmov.f32	s0, s18
 800e516:	f000 f82f 	bl	800e578 <finitef>
 800e51a:	b170      	cbz	r0, 800e53a <powf+0x7e>
 800e51c:	eeb0 0a48 	vmov.f32	s0, s16
 800e520:	f000 f82a 	bl	800e578 <finitef>
 800e524:	b148      	cbz	r0, 800e53a <powf+0x7e>
 800e526:	eef4 8a68 	vcmp.f32	s17, s17
 800e52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52e:	d7e9      	bvc.n	800e504 <powf+0x48>
 800e530:	f7fe f988 	bl	800c844 <__errno>
 800e534:	2321      	movs	r3, #33	; 0x21
 800e536:	6003      	str	r3, [r0, #0]
 800e538:	e00f      	b.n	800e55a <powf+0x9e>
 800e53a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e542:	d10a      	bne.n	800e55a <powf+0x9e>
 800e544:	eeb0 0a49 	vmov.f32	s0, s18
 800e548:	f000 f816 	bl	800e578 <finitef>
 800e54c:	b128      	cbz	r0, 800e55a <powf+0x9e>
 800e54e:	eeb0 0a48 	vmov.f32	s0, s16
 800e552:	f000 f811 	bl	800e578 <finitef>
 800e556:	2800      	cmp	r0, #0
 800e558:	d1d4      	bne.n	800e504 <powf+0x48>
 800e55a:	eeb0 0a68 	vmov.f32	s0, s17
 800e55e:	ecbd 8b04 	vpop	{d8-d9}
 800e562:	bd08      	pop	{r3, pc}
 800e564:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e568:	e7f7      	b.n	800e55a <powf+0x9e>

0800e56a <fabsf>:
 800e56a:	ee10 3a10 	vmov	r3, s0
 800e56e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e572:	ee00 3a10 	vmov	s0, r3
 800e576:	4770      	bx	lr

0800e578 <finitef>:
 800e578:	b082      	sub	sp, #8
 800e57a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e57e:	9801      	ldr	r0, [sp, #4]
 800e580:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e584:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e588:	bfac      	ite	ge
 800e58a:	2000      	movge	r0, #0
 800e58c:	2001      	movlt	r0, #1
 800e58e:	b002      	add	sp, #8
 800e590:	4770      	bx	lr

0800e592 <with_errnof>:
 800e592:	b513      	push	{r0, r1, r4, lr}
 800e594:	4604      	mov	r4, r0
 800e596:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e59a:	f7fe f953 	bl	800c844 <__errno>
 800e59e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e5a2:	6004      	str	r4, [r0, #0]
 800e5a4:	b002      	add	sp, #8
 800e5a6:	bd10      	pop	{r4, pc}

0800e5a8 <xflowf>:
 800e5a8:	b130      	cbz	r0, 800e5b8 <xflowf+0x10>
 800e5aa:	eef1 7a40 	vneg.f32	s15, s0
 800e5ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e5b2:	2022      	movs	r0, #34	; 0x22
 800e5b4:	f7ff bfed 	b.w	800e592 <with_errnof>
 800e5b8:	eef0 7a40 	vmov.f32	s15, s0
 800e5bc:	e7f7      	b.n	800e5ae <xflowf+0x6>
	...

0800e5c0 <__math_uflowf>:
 800e5c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e5c8 <__math_uflowf+0x8>
 800e5c4:	f7ff bff0 	b.w	800e5a8 <xflowf>
 800e5c8:	10000000 	.word	0x10000000

0800e5cc <__math_oflowf>:
 800e5cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e5d4 <__math_oflowf+0x8>
 800e5d0:	f7ff bfea 	b.w	800e5a8 <xflowf>
 800e5d4:	70000000 	.word	0x70000000

0800e5d8 <__ieee754_powf>:
 800e5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5dc:	ee10 4a90 	vmov	r4, s1
 800e5e0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800e5e4:	ed2d 8b02 	vpush	{d8}
 800e5e8:	ee10 7a10 	vmov	r7, s0
 800e5ec:	eeb0 8a40 	vmov.f32	s16, s0
 800e5f0:	eef0 8a60 	vmov.f32	s17, s1
 800e5f4:	d10c      	bne.n	800e610 <__ieee754_powf+0x38>
 800e5f6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800e5fa:	007f      	lsls	r7, r7, #1
 800e5fc:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800e600:	f240 8292 	bls.w	800eb28 <__ieee754_powf+0x550>
 800e604:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e608:	ecbd 8b02 	vpop	{d8}
 800e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e610:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800e614:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e618:	dcf4      	bgt.n	800e604 <__ieee754_powf+0x2c>
 800e61a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e61e:	dd08      	ble.n	800e632 <__ieee754_powf+0x5a>
 800e620:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e624:	d1ee      	bne.n	800e604 <__ieee754_powf+0x2c>
 800e626:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800e62a:	0064      	lsls	r4, r4, #1
 800e62c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800e630:	e7e6      	b.n	800e600 <__ieee754_powf+0x28>
 800e632:	2f00      	cmp	r7, #0
 800e634:	da20      	bge.n	800e678 <__ieee754_powf+0xa0>
 800e636:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800e63a:	da2d      	bge.n	800e698 <__ieee754_powf+0xc0>
 800e63c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e640:	f2c0 827b 	blt.w	800eb3a <__ieee754_powf+0x562>
 800e644:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800e648:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e64c:	fa48 f603 	asr.w	r6, r8, r3
 800e650:	fa06 f303 	lsl.w	r3, r6, r3
 800e654:	4543      	cmp	r3, r8
 800e656:	f040 8270 	bne.w	800eb3a <__ieee754_powf+0x562>
 800e65a:	f006 0601 	and.w	r6, r6, #1
 800e65e:	f1c6 0602 	rsb	r6, r6, #2
 800e662:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e666:	d11f      	bne.n	800e6a8 <__ieee754_powf+0xd0>
 800e668:	2c00      	cmp	r4, #0
 800e66a:	f280 8263 	bge.w	800eb34 <__ieee754_powf+0x55c>
 800e66e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e672:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e676:	e7c7      	b.n	800e608 <__ieee754_powf+0x30>
 800e678:	2600      	movs	r6, #0
 800e67a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e67e:	d1f0      	bne.n	800e662 <__ieee754_powf+0x8a>
 800e680:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800e684:	f000 8250 	beq.w	800eb28 <__ieee754_powf+0x550>
 800e688:	dd08      	ble.n	800e69c <__ieee754_powf+0xc4>
 800e68a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e990 <__ieee754_powf+0x3b8>
 800e68e:	2c00      	cmp	r4, #0
 800e690:	bfa8      	it	ge
 800e692:	eeb0 0a68 	vmovge.f32	s0, s17
 800e696:	e7b7      	b.n	800e608 <__ieee754_powf+0x30>
 800e698:	2602      	movs	r6, #2
 800e69a:	e7ee      	b.n	800e67a <__ieee754_powf+0xa2>
 800e69c:	2c00      	cmp	r4, #0
 800e69e:	f280 8246 	bge.w	800eb2e <__ieee754_powf+0x556>
 800e6a2:	eeb1 0a68 	vneg.f32	s0, s17
 800e6a6:	e7af      	b.n	800e608 <__ieee754_powf+0x30>
 800e6a8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e6ac:	d102      	bne.n	800e6b4 <__ieee754_powf+0xdc>
 800e6ae:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e6b2:	e7a9      	b.n	800e608 <__ieee754_powf+0x30>
 800e6b4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e6b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e6bc:	d107      	bne.n	800e6ce <__ieee754_powf+0xf6>
 800e6be:	2f00      	cmp	r7, #0
 800e6c0:	db05      	blt.n	800e6ce <__ieee754_powf+0xf6>
 800e6c2:	ecbd 8b02 	vpop	{d8}
 800e6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ca:	f000 bab5 	b.w	800ec38 <__ieee754_sqrtf>
 800e6ce:	f7ff ff4c 	bl	800e56a <fabsf>
 800e6d2:	b125      	cbz	r5, 800e6de <__ieee754_powf+0x106>
 800e6d4:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800e6d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e6dc:	d115      	bne.n	800e70a <__ieee754_powf+0x132>
 800e6de:	2c00      	cmp	r4, #0
 800e6e0:	bfbc      	itt	lt
 800e6e2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e6e6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e6ea:	2f00      	cmp	r7, #0
 800e6ec:	da8c      	bge.n	800e608 <__ieee754_powf+0x30>
 800e6ee:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800e6f2:	4335      	orrs	r5, r6
 800e6f4:	d104      	bne.n	800e700 <__ieee754_powf+0x128>
 800e6f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e6fa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e6fe:	e783      	b.n	800e608 <__ieee754_powf+0x30>
 800e700:	2e01      	cmp	r6, #1
 800e702:	d181      	bne.n	800e608 <__ieee754_powf+0x30>
 800e704:	eeb1 0a40 	vneg.f32	s0, s0
 800e708:	e77e      	b.n	800e608 <__ieee754_powf+0x30>
 800e70a:	0ff8      	lsrs	r0, r7, #31
 800e70c:	3801      	subs	r0, #1
 800e70e:	ea56 0300 	orrs.w	r3, r6, r0
 800e712:	d104      	bne.n	800e71e <__ieee754_powf+0x146>
 800e714:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e718:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e71c:	e774      	b.n	800e608 <__ieee754_powf+0x30>
 800e71e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800e722:	dd73      	ble.n	800e80c <__ieee754_powf+0x234>
 800e724:	4b9b      	ldr	r3, [pc, #620]	; (800e994 <__ieee754_powf+0x3bc>)
 800e726:	429d      	cmp	r5, r3
 800e728:	dc08      	bgt.n	800e73c <__ieee754_powf+0x164>
 800e72a:	2c00      	cmp	r4, #0
 800e72c:	da0b      	bge.n	800e746 <__ieee754_powf+0x16e>
 800e72e:	2000      	movs	r0, #0
 800e730:	ecbd 8b02 	vpop	{d8}
 800e734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e738:	f7ff bf48 	b.w	800e5cc <__math_oflowf>
 800e73c:	4b96      	ldr	r3, [pc, #600]	; (800e998 <__ieee754_powf+0x3c0>)
 800e73e:	429d      	cmp	r5, r3
 800e740:	dd08      	ble.n	800e754 <__ieee754_powf+0x17c>
 800e742:	2c00      	cmp	r4, #0
 800e744:	dcf3      	bgt.n	800e72e <__ieee754_powf+0x156>
 800e746:	2000      	movs	r0, #0
 800e748:	ecbd 8b02 	vpop	{d8}
 800e74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	f7ff bf36 	b.w	800e5c0 <__math_uflowf>
 800e754:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e758:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e75c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800e99c <__ieee754_powf+0x3c4>
 800e760:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e764:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e768:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e76c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e770:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e774:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e778:	eddf 7a89 	vldr	s15, [pc, #548]	; 800e9a0 <__ieee754_powf+0x3c8>
 800e77c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e780:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800e9a4 <__ieee754_powf+0x3cc>
 800e784:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e788:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800e9a8 <__ieee754_powf+0x3d0>
 800e78c:	eef0 6a67 	vmov.f32	s13, s15
 800e790:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e794:	ee16 3a90 	vmov	r3, s13
 800e798:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e79c:	f023 030f 	bic.w	r3, r3, #15
 800e7a0:	ee06 3a90 	vmov	s13, r3
 800e7a4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800e7a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e7ac:	3e01      	subs	r6, #1
 800e7ae:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800e7b2:	4306      	orrs	r6, r0
 800e7b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e7b8:	f024 040f 	bic.w	r4, r4, #15
 800e7bc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e7c0:	bf08      	it	eq
 800e7c2:	eeb0 8a47 	vmoveq.f32	s16, s14
 800e7c6:	ee07 4a10 	vmov	s14, r4
 800e7ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e7ce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e7d2:	ee07 3a90 	vmov	s15, r3
 800e7d6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e7da:	ee07 4a10 	vmov	s14, r4
 800e7de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7e2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e7e6:	ee17 1a10 	vmov	r1, s14
 800e7ea:	2900      	cmp	r1, #0
 800e7ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e7f0:	f340 817c 	ble.w	800eaec <__ieee754_powf+0x514>
 800e7f4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e7f8:	f340 80f8 	ble.w	800e9ec <__ieee754_powf+0x414>
 800e7fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e804:	bf4c      	ite	mi
 800e806:	2001      	movmi	r0, #1
 800e808:	2000      	movpl	r0, #0
 800e80a:	e791      	b.n	800e730 <__ieee754_powf+0x158>
 800e80c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800e810:	bf01      	itttt	eq
 800e812:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800e9ac <__ieee754_powf+0x3d4>
 800e816:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e81a:	f06f 0317 	mvneq.w	r3, #23
 800e81e:	ee17 5a90 	vmoveq	r5, s15
 800e822:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800e826:	bf18      	it	ne
 800e828:	2300      	movne	r3, #0
 800e82a:	3a7f      	subs	r2, #127	; 0x7f
 800e82c:	441a      	add	r2, r3
 800e82e:	4b60      	ldr	r3, [pc, #384]	; (800e9b0 <__ieee754_powf+0x3d8>)
 800e830:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800e834:	429d      	cmp	r5, r3
 800e836:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800e83a:	dd06      	ble.n	800e84a <__ieee754_powf+0x272>
 800e83c:	4b5d      	ldr	r3, [pc, #372]	; (800e9b4 <__ieee754_powf+0x3dc>)
 800e83e:	429d      	cmp	r5, r3
 800e840:	f340 80a4 	ble.w	800e98c <__ieee754_powf+0x3b4>
 800e844:	3201      	adds	r2, #1
 800e846:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e84a:	2500      	movs	r5, #0
 800e84c:	4b5a      	ldr	r3, [pc, #360]	; (800e9b8 <__ieee754_powf+0x3e0>)
 800e84e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800e852:	ee07 1a10 	vmov	s14, r1
 800e856:	edd3 5a00 	vldr	s11, [r3]
 800e85a:	4b58      	ldr	r3, [pc, #352]	; (800e9bc <__ieee754_powf+0x3e4>)
 800e85c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e864:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e868:	1049      	asrs	r1, r1, #1
 800e86a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e86e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e872:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800e876:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e87a:	ee07 1a90 	vmov	s15, r1
 800e87e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e882:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e886:	ee15 7a10 	vmov	r7, s10
 800e88a:	401f      	ands	r7, r3
 800e88c:	ee06 7a90 	vmov	s13, r7
 800e890:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e894:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e898:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e89c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e8a0:	eddf 5a47 	vldr	s11, [pc, #284]	; 800e9c0 <__ieee754_powf+0x3e8>
 800e8a4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e9c4 <__ieee754_powf+0x3ec>
 800e8a8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e8ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e9c8 <__ieee754_powf+0x3f0>
 800e8b0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e8b4:	eddf 5a39 	vldr	s11, [pc, #228]	; 800e99c <__ieee754_powf+0x3c4>
 800e8b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e8bc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800e9cc <__ieee754_powf+0x3f4>
 800e8c0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e8c4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e9d0 <__ieee754_powf+0x3f8>
 800e8c8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e8cc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e8d0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e8d4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e8d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e8dc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800e8e0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e8e4:	eef0 5a67 	vmov.f32	s11, s15
 800e8e8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e8ec:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e8f0:	ee15 1a90 	vmov	r1, s11
 800e8f4:	4019      	ands	r1, r3
 800e8f6:	ee05 1a90 	vmov	s11, r1
 800e8fa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e8fe:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e902:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e906:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e90a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e90e:	eeb0 6a67 	vmov.f32	s12, s15
 800e912:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e916:	ee16 1a10 	vmov	r1, s12
 800e91a:	4019      	ands	r1, r3
 800e91c:	ee07 1a10 	vmov	s14, r1
 800e920:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e924:	ee06 1a10 	vmov	s12, r1
 800e928:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e92c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e9d4 <__ieee754_powf+0x3fc>
 800e930:	4929      	ldr	r1, [pc, #164]	; (800e9d8 <__ieee754_powf+0x400>)
 800e932:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800e9dc <__ieee754_powf+0x404>
 800e936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e93a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e9e0 <__ieee754_powf+0x408>
 800e93e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e942:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800e946:	ed91 7a00 	vldr	s14, [r1]
 800e94a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e94e:	ee07 2a10 	vmov	s14, r2
 800e952:	eef0 6a67 	vmov.f32	s13, s15
 800e956:	4a23      	ldr	r2, [pc, #140]	; (800e9e4 <__ieee754_powf+0x40c>)
 800e958:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e95c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e960:	ed92 5a00 	vldr	s10, [r2]
 800e964:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e968:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e96c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800e970:	ee16 2a90 	vmov	r2, s13
 800e974:	4013      	ands	r3, r2
 800e976:	ee06 3a90 	vmov	s13, r3
 800e97a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e97e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e982:	eea6 7a65 	vfms.f32	s14, s12, s11
 800e986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e98a:	e70f      	b.n	800e7ac <__ieee754_powf+0x1d4>
 800e98c:	2501      	movs	r5, #1
 800e98e:	e75d      	b.n	800e84c <__ieee754_powf+0x274>
 800e990:	00000000 	.word	0x00000000
 800e994:	3f7ffff3 	.word	0x3f7ffff3
 800e998:	3f800007 	.word	0x3f800007
 800e99c:	3eaaaaab 	.word	0x3eaaaaab
 800e9a0:	3fb8aa3b 	.word	0x3fb8aa3b
 800e9a4:	36eca570 	.word	0x36eca570
 800e9a8:	3fb8aa00 	.word	0x3fb8aa00
 800e9ac:	4b800000 	.word	0x4b800000
 800e9b0:	001cc471 	.word	0x001cc471
 800e9b4:	005db3d6 	.word	0x005db3d6
 800e9b8:	08010b34 	.word	0x08010b34
 800e9bc:	fffff000 	.word	0xfffff000
 800e9c0:	3e6c3255 	.word	0x3e6c3255
 800e9c4:	3e53f142 	.word	0x3e53f142
 800e9c8:	3e8ba305 	.word	0x3e8ba305
 800e9cc:	3edb6db7 	.word	0x3edb6db7
 800e9d0:	3f19999a 	.word	0x3f19999a
 800e9d4:	3f76384f 	.word	0x3f76384f
 800e9d8:	08010b44 	.word	0x08010b44
 800e9dc:	3f763800 	.word	0x3f763800
 800e9e0:	369dc3a0 	.word	0x369dc3a0
 800e9e4:	08010b3c 	.word	0x08010b3c
 800e9e8:	3338aa3c 	.word	0x3338aa3c
 800e9ec:	f040 8093 	bne.w	800eb16 <__ieee754_powf+0x53e>
 800e9f0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e9e8 <__ieee754_powf+0x410>
 800e9f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e9f8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e9fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	f73f aefa 	bgt.w	800e7fc <__ieee754_powf+0x224>
 800ea08:	15db      	asrs	r3, r3, #23
 800ea0a:	3b7e      	subs	r3, #126	; 0x7e
 800ea0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ea10:	4118      	asrs	r0, r3
 800ea12:	4408      	add	r0, r1
 800ea14:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ea18:	4a49      	ldr	r2, [pc, #292]	; (800eb40 <__ieee754_powf+0x568>)
 800ea1a:	3b7f      	subs	r3, #127	; 0x7f
 800ea1c:	411a      	asrs	r2, r3
 800ea1e:	4002      	ands	r2, r0
 800ea20:	ee07 2a10 	vmov	s14, r2
 800ea24:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ea28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ea2c:	f1c3 0317 	rsb	r3, r3, #23
 800ea30:	4118      	asrs	r0, r3
 800ea32:	2900      	cmp	r1, #0
 800ea34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ea38:	bfb8      	it	lt
 800ea3a:	4240      	neglt	r0, r0
 800ea3c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ea40:	eddf 6a40 	vldr	s13, [pc, #256]	; 800eb44 <__ieee754_powf+0x56c>
 800ea44:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800eb48 <__ieee754_powf+0x570>
 800ea48:	ee17 3a10 	vmov	r3, s14
 800ea4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ea50:	f023 030f 	bic.w	r3, r3, #15
 800ea54:	ee07 3a10 	vmov	s14, r3
 800ea58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ea60:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ea64:	eddf 7a39 	vldr	s15, [pc, #228]	; 800eb4c <__ieee754_powf+0x574>
 800ea68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea6c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ea70:	eef0 6a67 	vmov.f32	s13, s15
 800ea74:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ea78:	eef0 5a66 	vmov.f32	s11, s13
 800ea7c:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ea80:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ea84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ea88:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800eb50 <__ieee754_powf+0x578>
 800ea8c:	eddf 5a31 	vldr	s11, [pc, #196]	; 800eb54 <__ieee754_powf+0x57c>
 800ea90:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ea94:	eddf 5a30 	vldr	s11, [pc, #192]	; 800eb58 <__ieee754_powf+0x580>
 800ea98:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ea9c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800eb5c <__ieee754_powf+0x584>
 800eaa0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800eaa4:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800eb60 <__ieee754_powf+0x588>
 800eaa8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800eaac:	eeb0 6a66 	vmov.f32	s12, s13
 800eab0:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800eab4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800eab8:	ee66 5a86 	vmul.f32	s11, s13, s12
 800eabc:	ee36 6a47 	vsub.f32	s12, s12, s14
 800eac0:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800eac4:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800eac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eacc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ead0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ead4:	ee10 3a10 	vmov	r3, s0
 800ead8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800eadc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eae0:	da1f      	bge.n	800eb22 <__ieee754_powf+0x54a>
 800eae2:	f000 f843 	bl	800eb6c <scalbnf>
 800eae6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800eaea:	e58d      	b.n	800e608 <__ieee754_powf+0x30>
 800eaec:	4a1d      	ldr	r2, [pc, #116]	; (800eb64 <__ieee754_powf+0x58c>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	dd07      	ble.n	800eb02 <__ieee754_powf+0x52a>
 800eaf2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafa:	bf4c      	ite	mi
 800eafc:	2001      	movmi	r0, #1
 800eafe:	2000      	movpl	r0, #0
 800eb00:	e622      	b.n	800e748 <__ieee754_powf+0x170>
 800eb02:	d108      	bne.n	800eb16 <__ieee754_powf+0x53e>
 800eb04:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb08:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800eb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb10:	f6ff af7a 	blt.w	800ea08 <__ieee754_powf+0x430>
 800eb14:	e7ed      	b.n	800eaf2 <__ieee754_powf+0x51a>
 800eb16:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800eb1a:	f73f af75 	bgt.w	800ea08 <__ieee754_powf+0x430>
 800eb1e:	2000      	movs	r0, #0
 800eb20:	e78c      	b.n	800ea3c <__ieee754_powf+0x464>
 800eb22:	ee00 3a10 	vmov	s0, r3
 800eb26:	e7de      	b.n	800eae6 <__ieee754_powf+0x50e>
 800eb28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eb2c:	e56c      	b.n	800e608 <__ieee754_powf+0x30>
 800eb2e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800eb68 <__ieee754_powf+0x590>
 800eb32:	e569      	b.n	800e608 <__ieee754_powf+0x30>
 800eb34:	eeb0 0a48 	vmov.f32	s0, s16
 800eb38:	e566      	b.n	800e608 <__ieee754_powf+0x30>
 800eb3a:	2600      	movs	r6, #0
 800eb3c:	e591      	b.n	800e662 <__ieee754_powf+0x8a>
 800eb3e:	bf00      	nop
 800eb40:	ff800000 	.word	0xff800000
 800eb44:	3f317218 	.word	0x3f317218
 800eb48:	3f317200 	.word	0x3f317200
 800eb4c:	35bfbe8c 	.word	0x35bfbe8c
 800eb50:	b5ddea0e 	.word	0xb5ddea0e
 800eb54:	3331bb4c 	.word	0x3331bb4c
 800eb58:	388ab355 	.word	0x388ab355
 800eb5c:	bb360b61 	.word	0xbb360b61
 800eb60:	3e2aaaab 	.word	0x3e2aaaab
 800eb64:	43160000 	.word	0x43160000
 800eb68:	00000000 	.word	0x00000000

0800eb6c <scalbnf>:
 800eb6c:	ee10 3a10 	vmov	r3, s0
 800eb70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800eb74:	d02b      	beq.n	800ebce <scalbnf+0x62>
 800eb76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800eb7a:	d302      	bcc.n	800eb82 <scalbnf+0x16>
 800eb7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eb80:	4770      	bx	lr
 800eb82:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800eb86:	d123      	bne.n	800ebd0 <scalbnf+0x64>
 800eb88:	4b24      	ldr	r3, [pc, #144]	; (800ec1c <scalbnf+0xb0>)
 800eb8a:	eddf 7a25 	vldr	s15, [pc, #148]	; 800ec20 <scalbnf+0xb4>
 800eb8e:	4298      	cmp	r0, r3
 800eb90:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eb94:	db17      	blt.n	800ebc6 <scalbnf+0x5a>
 800eb96:	ee10 3a10 	vmov	r3, s0
 800eb9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eb9e:	3a19      	subs	r2, #25
 800eba0:	f24c 3150 	movw	r1, #50000	; 0xc350
 800eba4:	4288      	cmp	r0, r1
 800eba6:	dd15      	ble.n	800ebd4 <scalbnf+0x68>
 800eba8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800ec24 <scalbnf+0xb8>
 800ebac:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800ec28 <scalbnf+0xbc>
 800ebb0:	ee10 3a10 	vmov	r3, s0
 800ebb4:	eeb0 7a67 	vmov.f32	s14, s15
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	bfb8      	it	lt
 800ebbc:	eef0 7a66 	vmovlt.f32	s15, s13
 800ebc0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ebc4:	4770      	bx	lr
 800ebc6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ec2c <scalbnf+0xc0>
 800ebca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ebce:	4770      	bx	lr
 800ebd0:	0dd2      	lsrs	r2, r2, #23
 800ebd2:	e7e5      	b.n	800eba0 <scalbnf+0x34>
 800ebd4:	4410      	add	r0, r2
 800ebd6:	28fe      	cmp	r0, #254	; 0xfe
 800ebd8:	dce6      	bgt.n	800eba8 <scalbnf+0x3c>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	dd06      	ble.n	800ebec <scalbnf+0x80>
 800ebde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ebe2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ebe6:	ee00 3a10 	vmov	s0, r3
 800ebea:	4770      	bx	lr
 800ebec:	f110 0f16 	cmn.w	r0, #22
 800ebf0:	da09      	bge.n	800ec06 <scalbnf+0x9a>
 800ebf2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ec2c <scalbnf+0xc0>
 800ebf6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ec30 <scalbnf+0xc4>
 800ebfa:	ee10 3a10 	vmov	r3, s0
 800ebfe:	eeb0 7a67 	vmov.f32	s14, s15
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	e7d9      	b.n	800ebba <scalbnf+0x4e>
 800ec06:	3019      	adds	r0, #25
 800ec08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec0c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ec10:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800ec34 <scalbnf+0xc8>
 800ec14:	ee07 3a90 	vmov	s15, r3
 800ec18:	e7d7      	b.n	800ebca <scalbnf+0x5e>
 800ec1a:	bf00      	nop
 800ec1c:	ffff3cb0 	.word	0xffff3cb0
 800ec20:	4c000000 	.word	0x4c000000
 800ec24:	7149f2ca 	.word	0x7149f2ca
 800ec28:	f149f2ca 	.word	0xf149f2ca
 800ec2c:	0da24260 	.word	0x0da24260
 800ec30:	8da24260 	.word	0x8da24260
 800ec34:	33000000 	.word	0x33000000

0800ec38 <__ieee754_sqrtf>:
 800ec38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ec3c:	4770      	bx	lr
	...

0800ec40 <_close>:
 800ec40:	4b02      	ldr	r3, [pc, #8]	; (800ec4c <_close+0xc>)
 800ec42:	2258      	movs	r2, #88	; 0x58
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4a:	4770      	bx	lr
 800ec4c:	200134d0 	.word	0x200134d0

0800ec50 <_fstat>:
 800ec50:	4b02      	ldr	r3, [pc, #8]	; (800ec5c <_fstat+0xc>)
 800ec52:	2258      	movs	r2, #88	; 0x58
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	f04f 30ff 	mov.w	r0, #4294967295
 800ec5a:	4770      	bx	lr
 800ec5c:	200134d0 	.word	0x200134d0

0800ec60 <_getpid>:
 800ec60:	4b02      	ldr	r3, [pc, #8]	; (800ec6c <_getpid+0xc>)
 800ec62:	2258      	movs	r2, #88	; 0x58
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6a:	4770      	bx	lr
 800ec6c:	200134d0 	.word	0x200134d0

0800ec70 <_isatty>:
 800ec70:	4b02      	ldr	r3, [pc, #8]	; (800ec7c <_isatty+0xc>)
 800ec72:	2258      	movs	r2, #88	; 0x58
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	2000      	movs	r0, #0
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	200134d0 	.word	0x200134d0

0800ec80 <_kill>:
 800ec80:	4b02      	ldr	r3, [pc, #8]	; (800ec8c <_kill+0xc>)
 800ec82:	2258      	movs	r2, #88	; 0x58
 800ec84:	601a      	str	r2, [r3, #0]
 800ec86:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8a:	4770      	bx	lr
 800ec8c:	200134d0 	.word	0x200134d0

0800ec90 <_lseek>:
 800ec90:	4b02      	ldr	r3, [pc, #8]	; (800ec9c <_lseek+0xc>)
 800ec92:	2258      	movs	r2, #88	; 0x58
 800ec94:	601a      	str	r2, [r3, #0]
 800ec96:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9a:	4770      	bx	lr
 800ec9c:	200134d0 	.word	0x200134d0

0800eca0 <_read>:
 800eca0:	4b02      	ldr	r3, [pc, #8]	; (800ecac <_read+0xc>)
 800eca2:	2258      	movs	r2, #88	; 0x58
 800eca4:	601a      	str	r2, [r3, #0]
 800eca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecaa:	4770      	bx	lr
 800ecac:	200134d0 	.word	0x200134d0

0800ecb0 <_exit>:
 800ecb0:	e7fe      	b.n	800ecb0 <_exit>
	...

0800ecb4 <_init>:
 800ecb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb6:	bf00      	nop
 800ecb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecba:	bc08      	pop	{r3}
 800ecbc:	469e      	mov	lr, r3
 800ecbe:	4770      	bx	lr

0800ecc0 <_fini>:
 800ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc2:	bf00      	nop
 800ecc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecc6:	bc08      	pop	{r3}
 800ecc8:	469e      	mov	lr, r3
 800ecca:	4770      	bx	lr
